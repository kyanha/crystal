/*
    Crystal Space Windowing System: Theme Class
    Copyright (C) 2000 by Jerry A. Segler, Jr <jasegler@gerf.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free
    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

#ifndef __CSTHEME_H__
#define __CSTHEME_H__

#include "csutil/hashmap.h"

class csVectorThemeComponent;
class csThemeComponent;
class csComponent;
class csApp;
class csTitleBar;
class csButton;

/// Possible window frame styles
enum csThemeFrameStyle
{
  csthfsNone,
  csthfsOblique,
  csthfsThickRect,
  csthfsThinRect,
  csthfsThin,
  csthfsTexture,
  /// This style is what a person should base CUSTOM styles off of.  i.e. csmyfsWacky = csthfsCustom+1, etc
  csthfsCustom
};

/**
 * The following commands are generated by theme changes.
 */
enum
{
  /**
   * Theme has change. (or multiple components in the theme)
   */
  cscmdThemeChange = 0x00000f00,
  /**
   * Theme Component has changed.
   */
  cscmdThemeComponentChange
};


/**
 * This class is the standard theme.  It is intended to be subclassed for custom themes.
 *<p>
 * Generally there should be only one object of this class.
 * However, you can specify a theme per component if you wish.
 */
class csTheme
{
protected:
  csApp * g_app;
  csVectorThemeComponent * themeComponents;

public:
  csTheme(csApp * napp);

  void DrawBorder(csComponent &comp,int FrameStyle,int &bw, int &bh,int li,int di, csPixmap * pixmap = NULL);
  void GetBorderSize(csComponent &comp,int FrameStyle,int &bw, int &bh);

  void BroadcastThemeChange(csThemeComponent *tcomp);

  void AddThemeComponent(csThemeComponent * comp);
  csThemeComponent * GetThemeComponent(char * name);
  inline csApp * GetApp(){return g_app;};
};

class csThemeComponent
{
protected:
  char * name;
  csTheme * theme;
  int BorderWidth;
  int BorderHeight;

public:
  csThemeComponent(csTheme * ntheme);
  csTheme * GetTheme(void){return theme;};

  inline int GetBorderWidth(){return BorderWidth;};
  inline void SetBorderWidth(int width){BorderWidth=width;};
  inline int GetBorderHeight(){return BorderHeight;};
  inline void SetBorderHeight(int height){BorderHeight=height;};

  inline char *GetName() {return name;};
  inline void DrawBorder(csComponent &comp,int FrameStyle,int &bw, int &bh,int li,int di, csPixmap * pixmap = NULL) \
    {theme->DrawBorder(comp,FrameStyle,bw,bh,li,di,pixmap);};
  inline void GetBorderSize(csComponent &comp,int FrameStyle,int &bw, int &bh) \
    {theme->GetBorderSize(comp,FrameStyle,bw,bh);};

  void BroadcastThemeChange();
};

class csThemeButton : public csThemeComponent
{
protected:
  int BorderLightColor;
  int BorderDarkColor;
  int BackgroundColor;
  csPixmap * BorderTexture;

public:
  csThemeButton(csTheme * ntheme);
};

class csThemeWindow : public csThemeComponent
{
protected:
  int TitleBarHeight;
  int MenuHeight;
  int BorderLightColor;
  int BorderDarkColor;
  int BackgroundColor;
  int FrameStyle;
  csPixmap *BackgroundPixmap;
  csPixmap *BorderPixmap;
  csPixmap *bmpClosen;
  csPixmap *bmpClosep;
  csPixmap *bmpHiden;
  csPixmap *bmpHidep;
  csPixmap *bmpMaximizen;
  csPixmap *bmpMaximizep;

public:
  csThemeWindow(csTheme * ntheme);

  int GetFrameStyle(){return FrameStyle;};
  void SetFrameStyle(int fs){FrameStyle=fs;};

  int GetTitleBarHeight(){return TitleBarHeight;};
  void SetTitleBarHeight(int Height){TitleBarHeight=Height;};

  int GetMenuHeight(){return MenuHeight;};
  void SetMenuHeight(int Height){MenuHeight=Height;};

  int GetBorderLightColor(){return BorderLightColor;};
  void SetBorderLightColor(int Color){BorderLightColor = Color;};

  int GetBorderDarkColor(){return BorderDarkColor;};
  void SetBorderDarkColor(int Color){BorderDarkColor = Color;};

  int GetBackgroundColor(){return BackgroundColor;};
  void SetBackgroundColor(int Color){BackgroundColor = Color;};

  csPixmap * GetBackgroundPixmap();
  void SetBackgroundPixmap(csPixmap * pixmap)
    {if (BackgroundPixmap != NULL) delete BackgroundPixmap; BackgroundPixmap = pixmap;};

  csPixmap * GetBorderPixmap();
  void SetBorderPixmap(csPixmap * pixmap)
    {if (BorderPixmap != NULL) delete BorderPixmap; BorderPixmap = pixmap;};

  csButton * GetCloseButton(csComponent *window);
  csPixmap * GetCloseButtonP();
  csPixmap * GetCloseButtonN();

  csButton * GetHideButton(csComponent *window);
  csButton * GetMaximizeButton(csComponent *window);
  csTitleBar * GetTitleBar(csComponent *window, const char *iTitle);

  void SetDefaultPallet(csComponent *window);

  void GetSysMenu();
  void GetToolbar();
  void GetMenuBar();
};

/// This class holds a number of csThemeComponent classes
class csVectorThemeComponent : public csVector
{
public:
  csVectorThemeComponent () : csVector (16, 16) {}
  virtual ~csVectorThemeComponent () { DeleteAll (); }
  virtual bool FreeItem (csSome Item)
  { delete (csThemeComponent *)Item; return true; }
  virtual int CompareKey (csSome Item, csConstSome Key, int) const
  { return strcmp (((csThemeComponent *)Item)->GetName(), (char *)Key); }
  virtual int Compare (csSome Item1, csSome Item2, int) const
  { return strcmp (((csThemeComponent *)Item1)->GetName(),
                   ((csThemeComponent *)Item2)->GetName()); }
};

#endif // __CSTHEME_H__
