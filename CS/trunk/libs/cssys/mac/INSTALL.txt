Crystal Space Macintosh Development Readme
This is up to date as of December 8th, 1999
Written by K. Robert Bate
If you have any questions or problems, contact me at rbate@ma.ultranet.com.

Contents:
1.	Requirements
2.	Getting ready to develop
3.	Working with the crystal space projects.
4.	Frequently Asked Questions.

[1] REQUIREMENTS

1) Compiler: Metrowerks CodeWarrior Pro 4 or later.
2) Include Files: Universal Includes 3.2 from Apple

[2] GETTING READY TO DEVELOP

If you are going to build the Open GL Renderer you need to download the OpenGL SDK from Apple.
ftp://ftp.apple.com/developer/opengl/opengl_sdk.hqx  This will download a self mounting disk image.
Double click on it.  Create a folder in the "Metrowerks CodeWarrior:MacOS Support" folder called
"OpenGL SDK".  Copy the folders "Headers", "Libraries" and "Resources" from the "OpenGL SDK" disk
and place them into the "OpenGL SDK" folder you just created.

If you are going to build the Glide Renderer you need to download the Glide SDK from 3dfx.
http://www.3dfx.com/downloads/SDK/sdk_glidemacppc/glide2xsdk_sea.hqx  This will download a self
extracting archive.  Double click on "Glide2x SDK.sea".  No drivers are included. The SDK depends
upon the operating system, not the cards. The Glide 2x drivers are available from the manufacturer
of your Voodoo-based Macintosh accelerator card. You will need to place a copy of your driver (library)
into the LIB folder in order to build your projects.

[3] WORKING WITH THE CRYSTAL SPACE PROJECTS

There are 22 Crystal Space projects in the mwcw folder: 

3 projects that build static libraries:
CSpace.mcp		- generates the static linked library, which includes the
				  majority of the code for Crystal Space
CSWS.mcp		- generates the static linked library, which includes the
				  code for the Crystal Space Windowing System
impexp.mcp		- generates the static linked library, which includes the
				  code for the import and export code.

7 projects that build shared libraries:
Driver2D.mcp			- generates the 2D Graphics shared library.
SftRndr.mcp				- generates the SoftwareRender shared library, which includes the 3D graphics
						  driver for software rasterization.
OpenGLRndr.mcp			- generates the OpenGL Render shared library.
Sound.mcp 				- generates the mac sound driver shared library and
						  software sound render shared library.

These next 3 projects are not up to date:
GlideRender.mcp			- generates the Glide Render shared library.
NetworkDriverNull.mcp	- generates the null network driver shared library.
NetworkMgrNull.mcp  	- generates the null network manager shared library.

10 projects that generate applications
Blocks.mcp		- A Tetris type game
scfreg.mcp		- The application which registers the shared libraries.
CSWSTest.mcp	- The application which tests the Crystal Space Windowing System.
MazeD.mcp		- The Crystal Space Editor.
MetaDemo.mcp	- A demo application
Primedit.mcp	- Another Crystal Space Editor. (Not up to date)
Simple.mcp  	- Simple Crystal Space application.
Shooter.mcp  	- A Crystal Space application.
Squawk.mcp  	- A Crystal Space application.
Walktest.mcp	- Another Simple Crystal Space application.

and 2 project that builds other projects
MakeShared.mcp	- Makes sure all of the shared libraries and CSRegSvr are up to date.
MakeApps.mcp	- Makes sure all of the applications are up to date.

Generally you will just build an application and all of the other pieces will be built for you.
All of the resulting libraries and applications will be placed in the src directory.

1. Open MakeShared.mcp in CodeWarrior and make it.

2. Switch back to the finder select all of the files that end in .shlb
in the src folder and drop them on the scfreg application.

3. Choose an application to build.  I generally start with walktest.  Make it.

4. Make sure the world file flarge.zip is in the data folder.

5. You're all set to run the application.

[3] FREQUENTLY ASKED QUESTIONS (Well, not really)

1) There are a lot of warnings during compile.

Well, that's normal as long as there are no errors.

2a) What is this "ignored 'fopen' (code) in MSL.C.PPC.Lib" link warning?

Inorder to keep from changing a lot of crystal space to fix the differences
in path separators, I wrote a new version of fopen which handles the path separators
then calls the same routines that the MSL library version of fopen does.  The warning
is harmless and you should only worry if you don't get the warning message.

2b) What is this "ignored 'fgets' (code) in MSL.C.PPC.Lib" link warning?

Inorder to keep from changing a lot of crystal space to fix the differences
in line endings, I wrote a new version of fgets which handles the line endings
then calls the same routines that the MSL library version of fgets does.  The warning
is harmless and you should only worry if you don't get the warning message.

3) I need to get to the command line, where is it?

When you launch the application, if you hold down the option key a command line
dialog will pop up.  If the command line that you are typing needs to be the same
all the time, create a 'str#' resource with an id of 1024 and make the first string in it
the command line you want and it will be automaticly used.  Also, if you drop a text file
on the application, the first 255 characters of the file are read and used as the command line.
