PROBLEM: AMD and K6 processors seem to have problems with CS?
SOLUTION: No idea yet.  This needs to be investigated.  Does every AMD and K6
    owner have problems?
DIFFICULTY: Moderate to hard?

PROBLEM: Halos are missing in some 3D hardware accelerated drivers (OpenGL and
    Glide).
SOLUTION: A more general solution (alpha mapped texture?) may solve all
    problems at once.  Or else implement it ad hoc again.
DIFFICULTY: Moderate to hard.

PROBLEM: Turn on 'freelook' and look around in mirror.zip.  After some time CS
    will crash while trying to draw a polygon.
SOLUTION: No idea?
DIFFICULTY: Moderate?

PROBLEM: Glide doesn't support 2D text yet.
SOLUTION: It is coming.
DIFFICULTY: Moderate.

PROBLEM: Lightmaps on OpenGL in Win32 look very rough.  There are no smooth
    transitions from level to level.  - RivaTNT, Detonator drivers.
    (thieber@gmx.net)
SOLUTION: Investigation?
DIFFICULTY: Moderate?

PROBLEM: Lightmapping in Glide is still broken.
SOLUTION: Don't know (someone who manages Glide port just have to look, since
    OpenGL and DirectX have correct mapping)
DIFFICULTY: Moderate?

PROBLEM: No halos in 8-bit and 32-bit display mode.
SOLUTION: 32-bit display mode is easy.  It just needs to be done.  8-bit is
    another matter.
DIFFICULTY: Easy to moderate.

PROBLEM: Semi-transparent textures (textures in which one color is completely
    transparent and the rest is opaque) only work correctly in 16-bit color.
    In 32-bit color there is no transparancy and in 8-bit color there is only
    transparency in some cases.
SOLUTION: For the 8-bit problem I suspect there is a problem in the texture
    cache here (maybe the difference between 'white light only' and 'general
    color').  32-bit transparancy needs to be investigated.
DIFFICULTY: Easy.

PROBLEM: MazeD only works in windowed mode (on Windows).
SOLUTION: Rewrite buggy getpage() method in Windows renderer.
DIFFICULTY: Easy

PROBLEM: Lighting still has a bug that it sometimes rejects polygons which are
    affected by the light but it thinks they are not.
SOLUTION: Just need a better test.
DIFFICULTY: Easy.

PROBLEM: Mirrored surfaces display incorrect colors in RGBA 32-bit mode on
    big-endian hardware.  The code is almost certainly using hardcoded shift
    amounts when composing and decomposing colors which only work for ARGB or
    ABGR.
SOLUTION: Allow the shift amounts to be specified on a platform by platform
    basis in osdefs.h.
DIFFICULTY: Easy (hopefully).

PROBLEM: Sprites display incorrect colors in RGBA 32-bit mode on little- and
    big-endian hardware.  On little-endian hardware, a sprite lit by red light
    appears blue.  On big-endian hardware, a sprite lit by red light appears
    green.  The code is almost certainly using hardcoded shift amounts when
    composing and decomposing colors which only work for ARGB and ABGR.
SOLUTION: Allow the shift amounts to be specified on a platform by platform
    basis in osdefs.h.
DIFFICULTY: Easy (hopefully).

PROBLEM: Semi-translucent sprites display bizarre color anomalies in RGBA
    32-bit mode on big-endian hardware.  It is suspected that hardcoded shift
    amounts may be the cause of the problem, or even accidental sign-extension
    when color masks are shifted to the right.
SOLUTION: Unknown.
DIFFICULTY: Unknown.

