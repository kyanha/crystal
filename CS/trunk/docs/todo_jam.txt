This is a list of issues which should be addressed in the Jam-based build
system.

H - High Prioriy (important showstopper)
M - Medium Priority
L - Low Priority (only minor function loss)
W - Wishlist (the build also works without this feature)
* - Completed

[H] msvcgen.jam: Add support to create multiple, customizable workspaces rather
    than always creating only wksall.  Obvious examples of workspaces are the
    ones presently created by the GNU make system: wksall, wkstypical,
    wkswalkall, wksnewrenderer.  This is particularly problematic since
    creation of the wksnewrenderer target is entirely crippled by the fact that
    USE_NEW_RENDERER must be "no" in order to create the other workspaces, but
    "yes" to create this one. A different set of Jamfiles is loaded depending
    upon this setting, thus making it extremely difficult to get the proper set
    of module definitions.
[H] msvcgen.jam: Add support to create specified pseudo-groups in generated
    workspaces, such as grpall-typical, grplibs-typical, etc.
[H] msvcgen.jam: Either respect ExternaLibs() or fix all the Jamfiles which
    require special Windows libraries to invoke MsvcExternalLibrary().  This is
    necessary for modules such as cssocket and ensocket which require
    wsock32.lib, for instance.  There are a number of other such modules.  The
    current monlithic solution of placing this information in
    CS/mk/msvcgen/Jamconfig is ugly, error-prone, and a maintenance headache.
[H] msvcgen.jam: Eliminate the ugly and monolithic mk/msvcgen/msvcgen.jam. The
    information in this file should be provided by rule invocations in the
    various module Jamfiles. (This is directly related to the above item.)
[H] msvcgen.jam: There should be some way to indicate that project files should
    not be generated for certain applications, plugins, and libraries.  This
    could be done either via a monolithic list or on a module-by-module basis
    in each module's Jamfile.  (What are the relative merits of each approach?)
    Obvious examples for which MSVC project files should not be created are
    those modules which are specific to Unix and MacOS/X. "static" variations
    of targets are also very good candidates for exclusion.  (Be sure to
    exclude walktest_static.)
[H] msvcgen.jam: When modules reference sources or headers outside of the local
    source directory via some number of ".."'s, these resources appear as
    "../../foo/bar/../../this/module" in the generated project file.  (If MSVC6
    & 7 don't care about this, then we can lower the priority of this item, and
    instead consider it just an ugly but not dangerous anomaly.)
[H] There are no rules for building the pure Python module yet (only the Python
    plugin works).
[H] There are no rules for building the pure Perl5 module yet (only the Perl5
    plugin works).
[H] The `jobber' script on SourceForge should use jam instead of make.
[H] Write complete documentation about the Jam build system for the CS user
    manual.

[M] Introduce a new rule named Description and change all invocations of the
    Help rule (except the ones using the "verbatim" option) to invocations of
    the Description rule throughout the project.  Next, remove the "verbatim"
    option from the Help rule and make the Help rule _always_ treat its
    argument as verbatim. Also eliminate the anomaly where Help is hard-coded
    to prepend "Build the" to the incoming text.  Then, augment the
    Application, Library, Plugin, and ShellScript rules to invoke Help
    automatically with the text "Build the $(description)".  Finally, augment
    msvcgen.jam and win32.jam to utilize the target's decription string (as
    collected by the Description rule) rather than the help string (which is
    not necessarily appropriate as a module's description).
[M] msvcgen.jam: Eliminate dependency upon external scripts for creation of the
    .rc resources. win32.jam is already capable of performing these tasks
    stand-alone, so it should be possible to do the same for msvcgen.jam,
    possibly by invoking the rules provided by win32.jam.
[M] Write a tutorial (maybe we could just link to the text in the RoboRun
    project?).  Another interesting topic would be integrating Crystal Space
    with other build systems like Automake or Ant.
[M] Re-work the provided m4 scripts to provide functionality like CS_CHECK_HOST
    and INITJAMFILE. Would be also nice to extract more of the detection
    scripts in CS (perl, python, nasm, problematic cflags?)

[L] msvcgen.jam: Overhaul the "configuration" file handling rule so that it
    associates configuration files with built targets.  This will allow the
    generated projects to reference configuration files.  Rather than the
    present InstallConfig rule, we either need a ConfigFile:<target>:<configs>
    rule, or we should upgrade the Application and Plugin rules to also accept
    configuration files. (The GNU msvcgen does this.) Note that this is just a
    convenience for the user of the project file; the project file itself will
    function correctly without this information.
[L] msvcgen.jam: Provide a generic Resources() rule which allows specification
    of additional textual resources for inclusion in generated projects.  (The
    GNU msvcgen does this.)  Note that this is just a convenience for the user
    of the project file; the project file itself will function correctly
    without this information.
[L] msvcgen.jam: Provide rules to copy the generated files back to the source
    tree upon explicit request so that they can be committed to the CVS
    respository if desired.
[L] Eliminate the need for the documentation-building shell scripts; the ones
    which copy image files from docs/texinfo/* into the build directory.  Jam
    is sufficiently expressive that it should be able to handle the
    image-copying and other functionality without depending upon these external
    tools.

[W] See if there's a way to create some suitable MSVC templates for external
    projects, so that we autogenrate msvc-makefiles there too.
[W] Finish the tool for extracting the documentation from the rules files.
[W] Create templates for some IDEs.  Generating a template for KDevelop3.x is
    very easy, in theory, as it comes with a great plugin architecture allowing
    for custom build plugins.  However, there are only standard plugins for
    make, ant, and qmake.  We'd have to write a custom Jam plugin first; there
    is no way to have a "standard" plugin where you specify just some commands
    for building/updating.  Seems we have a similar situation in Anjuta.
    Creating project files would be easy but they also rely on make.  Anjuta2
    seems to be better, and provides support for custom commands being run for
    building, however the code seems to have a bug at the moment and always
    adds -k to the command-line.  :-(
[W] It would be nice to have the configure files regenerated and execute if the
    configure.ac file has changed.  Unfortunately it is not possible to force
    jam to re-read its configuration files, so this isn't 100% possible.  Would
    it be possible to somehow recreate the configure files and then exit Jam
    with a message telling that you should rerun configure, or at least emit a
    big warning?

[*] msvcgen.jam: Eliminate the ugly mk/msvcgen/msvcgen.sh.  Instead, it should
    be possible to run the entire process using the normal Jamconfig created by
    the configuration process and by simply invoking the desired targets
    (msvcgen, msvcgen6, msvcgen7).
[*] msvcgen.jam: Auto-generated MSVC project files should be generated into the
    build directory rather than the source tree, since the source tree might be
    read-only or shared.
[*] msvcgen.jam: When PERL5.AVAILABLE is "yes", Jam reports that it doesn't
    know how to locate or create <grist>csperlxs.c.
[*] When Bison and Flex are installed, the generated MSVC project file for AWS
    incorrectly mentions skinlex.ll and skinpars.yy, rather than skinlex.cpp
    and skinpars.cpp from the source directory.
[*] Auto-generated Swig files should be generated into the build directory
    rather than the source tree, since the source tree might be read-only or
    shared.  We should provide rules to copy the generated files back to the
    source tree upon explicit request so that they can be committed to the CVS
    respository if desired.
[*] The MSVC-generated project file for csutil is missing all of the sources
    (and headers) from the cssys directory.
[*] Make handling of files in subdirs more robust (this is a about handling
    files for a single target): It should be possible to reference files in
    parent subdirs (ie. ../bla/blup.cpp). Also it should be possible to have
    several files with same name in different subdirs.
[*] Improve handling of rc files on Win32. Jam should know about them and you
    should be able to specify them like normal source files. (Caveats:
    mingw/cygwin only allow 1 rc file per plugin/application, creating a
    correct version resource file is hard when doing it purely in Jam, but I
    don't want to rely on external shell scripts.)
[*] External projects on Win32 and MacoSX shouldn't fail. The problem here is
    that the shell scripts in libs/csutil/win32 and libs/csutil/macosx aren't
    present in external projects. Should we collect scripts which are used by
    the build system or should we try to avoid these in the Jamb uild (these 2
    scripts can probably be solved by improving the Jam rules).
[*] MacOSX rules should be aware of the struture of an application wrapper
    instead of using external shell scripts for generating them. Probably we
    also want some rules to add additional stuff into the application wrappers.
[*] Re-work static plugin linking: This should not be an independent `mode',
    and the intelligence should not be put globally into the Application and
    Plugin rules.  Rather the Plugin rules should create a 2nd target where
    they compile into a static library instead of a dynamic plugin.  For
    linking a static application you should have to use a 2nd rule where you
    have to specify which plugins you want to have linked into the application.
[*] CS is using -fvtable-thunks flag on Win32 with gcc 2.x on MSYS.  This makes
    CS libraries incompatible with other applications.  Someone should check if
    we really need -fvtable-thunks in general or if we could specify it for the
    `ddraw' plugin only.  (Eric says: Checking if -fvtable-thunks is needed is
    the responsibility of the CS configure script, and indeed it has performed
    this check for quite a long time now.  I now see evidence that the Jam
    build utilizes this flag when unwarranted, thus I marked this item as
    `done'.)
[*] Auto-generated Bison & Flex files should be generated into the build
    directory rather than the source tree, since the source tree might be
    read-only or shared.  We should provide rules to copy the generated files
    back to the source tree upon explicit request so that they can be committed
    to the CVS respository if desired.
