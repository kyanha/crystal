The history order is reversed so that new features are at the top.

23-Aug-2002
	- Cs2Xml now supports old-style START keyword.
	- Fixed Cs2Xml so that it only adds the name attribute to some node
	  if it is actually different from the empty string.
	- Fixed a few compilation issues in csloader after changes from res.
22-Aug-2002
	- Fixed Cs2Xml for DURATION and FRAME commands in motion loader.
	- Cs2Xml now supports the normal notation for vertices in 3D
	  sprites (i.e. V (x,y,z:u,v:nx,ny,nz)).
	- When you give a zip file as argument to Cs2Xml it will now
	  convert all CS files it can find in that zip file (including
	  subdirectories). In addition it will make backups of all the
	  files that it converts (.bak extension).
	- iLoader::LoadLibraryFile() now detects XML and switches accordingly.
	- iLoader::LoadMeshObjectFactory() now detects XML and switches
	  accordingly.
	- iLoader::LoadMeshObject() now detects XML and switches
	  accordingly.
	- Improved error handling in the standard loader again (using
	  more of the new syntax services ReportError() and ReportBadToken()).
	- Fixed a bad bug in cs2xml. The created backup file was corrupt
	  because it was already being treated by the old CS parser which
	  overwrites the string that was read.
	- Fixed another related bug in cs2xml.
	- Converted standard.zip to XML.
	- Added support for ROT and Q (quaternions) in cs2xml.
	- Converted blocks.zip to XML.
21-Aug-2002
	- Implemented XML version of the spiral loader.
	- Fixed a bug in cs2xml with parsing of the RADIUS
	  keyword. This RADIUS can be used for single radius (lights)
	  or vectors.
	- Fixed a similar bug with SCALE which can be used with
	  two or one parameter.
	- Converted partsys to XML. Seems to be working fine now.
	- Fixed a fundamental problem in the csPluginLoader class. Plugins
	  used to query for other components in their 'Initialize' routine.
	  However csPluginLoader calls load+initialize for every plugin
	  and only registers a plugin after it has been loaded AND
	  initialized. This means that during the call to Initialize() it
	  is possible (and even likely) that some other component cannot
	  yet be found because it wasn't yet loaded and registered. This
	  bug caused the reporter to be ignored in apps like walktest
	  and so on. The fix for this is to delay initialization of a
	  plugin until ALL plugins are loaded and registered. I had to
	  extend iPluginManager::LoadPlugin() with a new optional parameter
	  which indicates that no initialization is required.
	- Greatly improved error reporting in syntax services. There is now
	  a new ReportError() function there which takes a message id, a
	  message, and the node that causes the error. From that node it
	  will construct a path with type of the node and the optional
	  'name' attribute so that it is easier to locate the error. This
	  feature is very useful especially since there are no line numbers
	  to depend on in XML.
	- Also added ReportBadToken() to syntax services.
	- All new XML loader plugins now use the new ReportError() and
	  ReportBadToken() functions.
	- Csparser no longer reports error that it cannot load a mesh object
	  factory or mesh object. It is assumed that the mesh object loader
	  will have reported its own error already.
	- Added mention of csRef to the faq.
	- Added explanation to faq of how Z-buffer initialization works in CS.
20-Aug-2002
	- Implemented XML version of the spr2d mesh object loader.
	- Added new ParseBox() in syntax services (for XML).
	- Implemented XML version of the gtreeldr.
	- Implemented XML version of the gmeshldr.
	- Implemented XML version of the meta ball loader.
	- Implemented XML version of the emit loader.
	- Implemented XML version of the fountain loader.
	- Implemented XML version of the snow loader.
	- Implemented XML version of the fire loader.
	- In most of those loaders the error handling is also better now (in
	  some it was simply non-existant before conversion).
	- In addition I made the error handling a little bit cleaner by
	  using csRef smart pointers.
	- Implemented proper conversion of PRIORITY in cs2xml.
	- Implemented proper conversion of PLUGIN in cs2xml.
	- Fixed a bug in XML parsing of render priorities in main loader.
	- Cs2xml will remove underscores in tokens now. This fixes a lot
	  of loader issues.
	- Cs2xml correctly converts NUM(x,y) for genmesh.
	- Cs2xml correctly converts VERTICES for spr2d and genmesh.
	- Cs2xml correctly converts UV for polygons and spr2d.
	- Cs2xml correctly converts TRIANGLES in genmesh.
	- Cs2xml correctly converts F inside ACTION for 3d sprites.
	- Cs2xml correctly converts EMITBOX, EMITFIXED, AGING,
	  and RECTPARTICLES (emit particle system).
	- Cs2Xml correctly converts DROPSIZE, BOX and ORIGINBOX.
	- Fixed a bug in cs2xml with converting of old style lights.
	- Cs2Xml will now translate POLYGON to 'p' and work correctly
	  in case 'P' is used.
	- Fixed a bug in the bezier loader addon.
	- Cs2Xml correctly converts KEY.
	- Cs2Xml correctly converts RADIUS.
	- Fixed a bug in cs2xml where it would not properly recognize strings
	  if they have no quotes.
	- Cs2Xml correctly converts COLORS for spr2d.
	- Cs2Xml correctly converts W for warp.
	- Fixed a few bugs in the syntax services for parsing of polygons.
	- Cs2Xml correctly converts FOG.
	- Cs2Xml correctly converts HALO.
	- Cs2Xml correctly converts CURVECONTROL and CURVECENTER.
	- These changes are sufficient to fully convert /data/flarge/world
	  to XML. Consequently I also commited the XML version of 'world'.
	  Note that ONLY stuff that is used in flarge is guaranteed to
	  work. Nothing else has been tested and some mesh object plugins
	  are not even converted. This is true both for cs2xml and for
	  the XML loading itself. The XML loader seems a little bit slower
	  compared to the old lower although the difference isn't much.
	  There is still a lot of room for optimization though.
	- Cs2Xml correctly converts EMITSPHERE, EMITCYLINDER, EMITLINE, and
	  EMITCYLINDERTANGENT.
	- Cs2Xml correctly converts REGULARPARTICLES.
	- Cs2Xml correctly converts DIRECTION and DIRECTIONAL.
	- Cs2Xml correctly converts SOURCE.
	- Cs2Xml correctly converts HAZEBOX and HAZECONE.
	- Implemented XML version of the haze loader.
	- Cs2Xml now considers '-' as a valid token in a string without
	  quotes.
	- Fixed an error in the new XML loading stuff. Thanks to
	  MatzeB for finding this using valgrind.
	- Implemented XML version of the rain loader.
19-Aug-2002
	- Implemented XML version of the ball mesh object loader.
	- Fixed a memory leak in SKELETON statement of spr3d loader.
	- Converted the 3D sprite loader to XML.
17-Aug-2002
	- Better error message is a texture could not be loaded in
	  the loader.
	- Implemented XML loading for PROCTEX in the csparser plugin.
	- Implemented HALO parsing in XML for lights.
	- cs2xml will now correctly export lights in old and new
	  syntax. Halos are not yet properly supported.
16-Aug-2002
	- Implemented XML loading in the csparser plugin for the following
	  items:
	    - Library (LIBRARY)
	    - Sounds (SOUNDS and SOUND)
	    - Lod control (LOD)
	    - Mesh factory (MESHFACT)
	    - Mesh object from factory (MESHREF)
	    - Add-on (ADDON)
	    - Settings (SETTINGS)
	    - Render priorities (PRIORITIES)
	    - Collections (COLLECTION)
	    - Start (START)
	    - Keys (KEY)
	    - Nodes (NODE)
	- Additionally implemented:
	    - Texture generation (HEIGHTGEN)
15-Aug-2002
	- Eric Sunshine changed next.mak so that it only uses the CFLAGS
	  -Ilibs/zlib, -Ilibs/libpng, -Ilibs/libjpeg and the LFLAGS
	  -Llibs/zlib, -Llibs/libpng, -Llibs/libjpeg if those directories
	  actually exist, rather than using the flags unconditionally.  This
	  change will eliminate the annoying MacOS/X (Apple/NeXT) linker
	  warnings about non-existent directories.
	- Eric Sunshine eliminated a number of compilation warnings in csutil.
	- Eric Sunshine fixed csconf.mak so that it only executes the sed
	  commands when the top-level `csconfig' target is invoked, rather than
	  when _any_ target is invoked.
14-Aug-2002
	- Removed CreateElement(), CreateText(), and CreateComment() again.
	  Will do this differently.
	- Added iDocumentNode::CreateNodeBefore() to create nodes before
	  the given node (or at end if given node is NULL).
	- Renamed csXmlNodeType to csDocumentNodeType. Also renamed
	  the CS_XMLNODE_... constants to CS_NODE_....
	- Fixed unittest of syntax services. It was performing a bad
	  test with the 'scale' token.
	- Added iString::Format() and FormatV() (similar to csString versions).
	- Renamed ParseXML() and WriteXML() to Parse() and Write() in iDocument.
	- Implemented a VERY dirty hack in the TinyXML source code. We would
	  like to avoid modifying those sources too much (to make it easier
	  to upgrade if that is needed). However I needed a function to write
	  out XML to iString as opposed to FILE*. So I just redefined FILE
	  and all FILE related routines (fprintf, ...) to work on iString :-)
	  Of course, this hack is local to the TinyXml sources.
	- Added version of Write() that takes a VFS filename.
	- Implemented three versions of Write() to write out document files.
	- Removed all CreateAttribute... and MoveAttribute... functions
	  from iDocumentNode. Instead there is only SetAttribute() which is
	  now implemented.
	- Added SetValueAsInt() and SetValueAsFloat() for iDocumentNode.
	- Added iString, csString, and scfString versions of SetFastGrowing().
	  Use this new flag if you have a string that grows a lot (i.e. lot
	  of Append() calls). It will consume more memory but it is a LOT
	  faster. If you don't plan on doing a lot of Append() calls then
	  do not use this.
	- The TinyXml output now uses this option for writing out XML to
	  an iString. This GREATLY speeds up XML writing (from a minute to
	  about a second :-)
	- cs2xml now uses XML writing with TinyXML. Still not 100% operational.
	- Added a warning in mk/user.mak with regards to the usage of
	  USE_SHARED_LIBS.
	- cs2xml now does a very good job of converting flarge to XML. I
	  think it is nearly perfect now. It also translates TEXTURE to
	  'texmap' (in case we're in a polygon) and it combines PORTAL
	  and WARP keywords into 'portal' section.
13-Aug-2002
	- Implemented XML versions of LoadMap() and LoadSector() in the
	  main loader.
	- Added XML version of ParseColor() to syntax services.
	- Added XML version of ParseStatLight() to the loader.
	- Implemented XML parsing of textures and materials in loader (things
	  like procedural textures and heightmap texture generation tools are
	  not yet converted).
	- Implemented XML parsing of 'plugins' block.
	- Implemented XML parsing of 'meshobj'.
	- Modified LoadMap() in the main parser so that it will automatically
	  switch to XML loading if the first non-blank character in the
	  read buffer is equal to '<'.
	- LoadMap() will also see if it can find an iXmlSystem in the object
	  registry. If not it will use the tinyxml parser. Using that it is
	  possible to make your own implementations of iXmlSystem using another
	  XML parser.
	- Fixed cs2xml so that it makes an XML world file that can almost be
	  read by the current loader (still need to fix a few things manually
	  but I will not continue writing cs2xml like this anyway. The plan is
	  to let cs2xml generate a node tree and output that using the XML
	  system). By doing this I could confirm that XML map loading works
	  for very simple levels now (sectors, textures, materials, lights,
	  and thing mesh objects). This is a very nice step indeed.
	- Did the following renames:
	    iXmlSystem -> iDocumentSystem
	    iXmlNode -> iDocumentNode
	    iXmlAttribute -> iDocumentAttribute
	    iXmlDocument -> iDocument
	    iXmlAttributeIterator -> iDocumentAttributeIterator
	    iXmlNodeIterator -> iDocumentNodeIterator
	    csTinyXmlSystem -> csTinyDocumentSystem
	- Renamed iutil/xml.h to iutil/document.h.
	- Added CreateElement(), CreateComment(), and CreateText() to
	  iDocument. Use these functions to create unlinked nodes. Later
	  you can add them to a parent node.
	- Removed iDocumentNode->Create...() functions.
12-Aug-2002
	- Renamed the XML version of ParseTexture() to ParseTextureMapping()
	  as that more accuratelly reflects what happens (in syntax
	  services).
	- Renamed the XML version of ParseWarp() to ParsePortal() and
	  also added parsing of the destination sector there (syntax
	  services).
	- Implemented ParsePortal() in syntax services.
	- Removed XML version of ParseShading() in syntax services. It
	  isn't that useful to keep as a seperate routine.
	- Added XML version of ParseBool() to syntax services.
	- Partially implemented XML version of ParsePoly3d() for syntax
	  services. This means that syntax services nearly completely
	  supports XML now.
	- Implemented XML thing loading. This includes plane and
	  bezier addon-loaders.
9-Aug-2002
	- Added conveniance functions to get a value from a node (iXmlNode).
	  This will basically search for the first TEXT child in the node and
	  return the value of that child.
	- Changed GetType()/SetType() to GetValue()/SetValue() in iXmlNode.
	  Added GetType() which returns the type of the node.
	- Implemented ParseMatrix() in syntax services for XML.
	- The OpenGL renderer will now register the effects server with
	  the object registry after loading it.
	- Added (empty) unittest implementation for csutil. More specifically
	  for the XML parsing tools.
	- Added unittest implementation for syntax services to test the
	  new XML functions. ParseVector() already seems to work but there
	  are still a few problems.
	- Extended unittest app to call the new unittests.
	- Fixed a stupid bug in iXmlNode::GetAttribute() (for TinyXML parser).
	- Fixed a bug in iObjectRegistry::Register() where it would accidently
	  increase the ref count on the object with a given tag if that tag
	  was already defined.
	- Matrices and Vectors now parse nicely with the new XML parser.
	  The syntax loader unit test now succeeds.
	- Eric Sunshine fixed the cslexan makefile, which was recently broken,
	  so that it once again produces a plugin.
	- Implemented XML parsing for mixmodes in syntax services.
	- Implemented XML parsing for texture specifications in syntax
	  services.
	- Removed scalex, scaley, and scalez. There is now only 'scale' which
	  has four optional arguments (x, y, z, and all).
	- Added a VERY short and incomplete Schema for the CS map file format.
	  This is very much work in progress as I'm still learning Schema.
	  Look in scripts/xml.
	- Eric Sunshine fixed numerous problems introduced recently into
	  csconf.mak, including garbled sed commands, many improper quoting
	  issues, and invalid expansion of makefile variables by the shell when
	  the shell synthesized the makefile fragment in response to
	  --makevars.
	- Eric Sunshine changed csconf.mak so that cs-config now has real
	  dependencies, which means that it will be rebuilt only when its
	  dependencies change, rather than being rebuilt each time the target
	  is invoked.  The current dependencies are config.mak, mk/user.mak,
	  and the currently configured platform-specific makefile (i.e.
	  linux.mak).
8-Aug-2002
	- Removed support/doom2cs again. This doom2cs utility can now be
	  found at ftp://sunsite.dk/projects/crystal/contrib/doom2cs.zip
	- Ryan Surkamp applied a fix to the bcterr landscape engine.
	- Removed support/gnu/bison.sim file. As far as I could see this file
	  is not used in CS. If it appears I looked wrong then we can always
	  put it back.
	- Removed the old memory debugger in support/debug. There are
	  better tools out there now (valgrind for example) and I'm not even
	  sure this system still works.
	- Moved fpu80x86.h to include/csutil.
	- Completely removed the 'support' directory from CS since it is now
	  empty.
	- Implemented basic reading of XML. You can now read an XML document
	  and parse of nodes and attributes. Writing of XML is not supported
	  yet. And not all operations for reading are supported either.
	  i.e. use the iterators. Nothing else works.
	- Added xmltest application to dump the contents of an XML file.
	- Fixed an error in mergeres.h by quoting the quotes.
	- Steven Geens fixed the motion manager plugin. Motions will now
	  work correctly if no key frame is defined for timeframe 0.
	- Extended iLoaderPlugin with a new version of Parse() that accepts
	  an iXmlNode instead of a string. This new version is not yet used.
	  Put empty implementations of this Parse() in all mesh loaders. This
	  function will provide the upgrade path to the new XML format. Once
	  the upgrade is complete the old version will be removed.
	- Internally extended the main loader plugin with new functions to
	  parse from iXmlNode instead of char*. All these new functions are
	  still empty and will be gradually implemented.
	- Extended iSyntaxService with new functions that load from XML
	  data instead of char* data. Some of these functions are actually
	  implemented and should work. This is untested though.
	- Added a few functions to iXmlNode and also changed the names
	  which refered to 'children' so that they now specify 'nodes'.
	  You can now access nodes by type and attributes by name more
	  easily.
	- Also added conveniance functions to iXmlAttribute to set values
	  as int and float.
	- Steven Geens added a motion test program. With this program you can
	  see the motion manager in action.
	- Steven Geens also fixed bugs in the Milkshape 2 CS convertor.
	- Added new csStringHash class. This is a simple hash of strings
	  where you can assign unique id's to strings. The old csStringSet
	  (which differs because it automatically assigns id's) now uses
	  this new csStringHash.
7-Aug-2002
	- Eric Sunshine fixed a couple problems with csconf.mak.  First, it was
	  using " instead of $".  It was using the hardcoded path "out/"
	  instead of $(OUT).
	- Eric Sunshine (hopefully) worked around a problem caused by buggy
	  stat() on Win9x and WinME where a bogus result is returned if the
	  path has a trailing slash.  This causes problems with the makefile
	  dependency rules which depend upon $(OUTBASE), $(OUTOS), $(OUTPROC),
	  or $(OUT), all of which end with a slash, since make thinks that
	  those directories don't exist even when they are present.
	  Consequently, make tries invoking $(MKDIR) on already-present
	  directories.  The work-around was to redefine these variable so
	  without the trailing slash.  Also updated all makefiles throughout
	  the project to take into account that these variables are no longer
	  defined with a trailing slash.
	- Eric Sunshine removed the unmaintained and obsolete csphyziks library
	  and phyztest programs.
	- Eric Sunshine fixed bug in crystal.m4: enable_cstext versus
	  enable_cstest.
6-Aug-2002
	- Extended iXmlNode with functions to create and move nodes
	  and attributes. Added iXmlDocument as a representation of a document.
	  Added iXmlSystem which represents the XML system in general.
	- Removed JNG image target from walkall. It is not an essential
	  target to have.
	- More work on cs2xml.
	- Started work on integrating TinyXml XML parser into CS. Currently
	  we integrated the TinyXml sources in csutil. Please do not start
	  modifying those sources unless needed to fix warnings or errors.
	  The TinyXml include files are not in include/csutil because they
	  are not public. To use TinyXml parser you must instantiate an
	  instance of class csTinyXmlSystem and start from there.
	- Eric Sunshine fixed a problem with libs/cssys/win32/mergeres.sh where
	  it was outputting ICON lines with a leading, but no trailing
	  quotation mark.  Also fixed this script so that it works with older
	  versions of sed which do not understand alternation (`|').
	- Eric Sunshine fixed several problems with dddraw.mak after recent
	  changes caused it to stop working.
	- Eric Sunshine fixed the "clean" target so that it removes all of
	  those annoying debug .txt files.
	- Eric Sunshine merged msys.mak into win32gcc.mak in order to reduce
	  future maintenance headaches.  msys.mak kept lagging behind
	  win32gcc.mak.
	- Eric Sunshine fixed the following problems with the Texinfo
	  documentation:
	    - Syntax error in mapfmt.txi.
	    - Fixed to work with makeinfo program from the Mingw/MSYS
	      distribution which complains if @ref{} and cousins are split over
	      multiple lines.  The following files were affected: rain.txi,
	      snow.txi, 3dsprite.txi, internal/platform/next.txi.
5-Aug-2002
	- Removed CS_GNUC_PRINTF macros with iGraphics2D->PerformExtension()
	  since this doesn't make sense. PerformExtension() doesn't follow
	  printf formatting rules.
	- Avoided several warnings in ogl_g3dcom.cpp.
	- Fixed DrawTriangleMesh() in OpenGL renderer so it no longer crashes
	  if no material is given.
	- Fixed csParser so it will now also copy the token to
	  GetUnknownToken() even if the token is not known.
	- First attempt at making a conversion tool to convert the old
	  style world files to a new XML format. This is unfinished though.
	- Eric Sunshine made these additional changes to msvcgen.mak:
	    - Fixed problem where generated project files were referring to .rc
	      resource in CS/out/mk directory, rather than CS/mk/visualc[7].
	    - Fixed problems with the top-level msvcgen install and clean
	      targets where the MSVCGEN_VERSION was not being correctly set on
	      Unix.  (It probably worked on Windows, though, because shell
	      variables have a different scope on Windows than in Unix.)
	    - Folded out a bunch of common code in the root targets makefile
	      section.  This will reduce future maintenance headaches.
	    - Fixed the global "clean" target so that it works correctly with
	      the merged (msvc + msvc7) msvcgen makefile.
	- Eric Sunshine added apps/import/caltocs to msvcgen/required.mak.
	- Eric Sunshine fixed msvcgen templates so that they provide the
	  resource compiler with sufficient information so that the headers
	  #included by the .rc files can be found.
	- Eric Sunshine fixed mk/msvcgen/win32.mak so that the libcssys project
	  file is once again created correctly following the replacement of
	  DSP.PROJECT.RESOURCES with $(PROJECT.EXE).WINRSRC.
	- Eric Sunshine temporarily disabled msvcgen.mak's use of
	  $(PROJECT.EXE).WINRSRC since it causes problems at build time.  The
	  exact problem is that when WINRSRC points at
	  CS/libs/cssys/win32/rsrc/cs1.rc, the .res file is created in the same
	  directory.  However, at link time, MSVC expects to find the .res file
	  in the buid directory (CS/mk/visualc/csdebug/temp/walktest, for
	  example).  We need to devise a reasonable solution for this problem.
	- Eric Sunshine temporarily disabled use of $(PROJECT.EXE).WINRSRC in
	  win32gcc.mak since it was causing problems for users.  In particular,
	  the Mingw resource compiler wants to know the path to the cs1.ico
	  file from the CS root directory, rather than just the relative path
	  from the CS/libs/cssys/win32/rsrc directory.  This problem is in
	  some fasion related to the problem experienced by MSVC users.  We
	  need a proper solution.
	- Added iXmlNode and iXmlAttribute. These are proposals for the
	  XML interfaces we're going to use in CS.
4-Aug-2002
	- Eric Sunshine made the following changes to mk/msvcgen/msvcgen.mak
	  and msvc7gen.mak:
	    - Fixed numerous bugs in the .rc file generation support code which
	      was recently added.
	    - Once again works with older versions of GNU make.  No longer uses
	      recently added features of GNU make, such as $(if ...).
	    - Now invokes .rc creation shell scripts with $(RUN_SCRIPT) to
	      ensure that it finds the correct shell.  This allows it to once
	      again run on Unix.  (The problem was that the shell scripts do
	      not have execute permission enabled in the CVS repository.  This
	      fix works around that problem.)
	    - Once again works with older versions of sed.  No longer uses
	      advanced sed features.
	    - Fixed comments which became outdated after recent changes.
	    - The "clean" target now cleans only files and directories related
	      to the particular makefile, rather than blasting the entire
	      CS/out/mk directory.
	- Eric Sunshine made the following changes to mk/msvcgen/msvcgen.pl:
	    - Fixed create_project() so that the so-called "dummy file" ends
	      with a line terminator.
	- Eric Sunshine made the following changes to libs/win32/mkverres.sh:
	    - Fixed the composition of FILEVERSION which seemed to be bonked.
	    - Fixed so that it works with older sed programs which do not
	      understand [:digit:].
	    - Fixed quoting problems in sed rules.
	    - Simplified composition of the output .rc file.
	    - Added missing line terminator at end of file.
	- Eric Sunshine made the following changes to libs/win32/compres.sh:
	    - Fixed so that it works with older sed programs which do not
	      understand [:alnum:].
	    - Added missing line terminator at end of file.
3-Aug-2002
	- Added effects system plugin from Anders Stenberg.  Since I have
	  crashes with the OpenGL patches to actually use this system I am not
	  commiting those.  So at this moment the 'effects' plugin is
	  completely unused and unusable until I manage to fix the problem.  I
	  will add more documentaiton about this new system later.
	- I found out what routine is crashing.  It is the new version of
	  DrawTriangleMesh() which seems to give problems in some cases.  As a
	  workaround I just call OldDrawTriangleMesh().  This basically means
	  that the effect system is not yet functional although it is now fully
	  in CVS.  Still have to debug what's wrong with the new implementation
	  of DrawTriangleMesh().  Documentation and extensions to the current
	  loader for the new effects will be added soon.
	- In addition to effects the patch from Anders also adds an OpenGL
	  state cache to the OpenGL canvases.  That should optimize state
	  changes and speed up a little more.
2-Aug-2002
	- Eric Sunshine eliminated several unnecessary, and inadvertently
	  inserted, event dispatch loops from csEventQueue::Process().
	- Steven Geens updated the milk2spr convertor so it also converts
	  the motions (for the motion manager). This works mostly but there
	  are still a few bugs. For example, sometimes there is a 360
	  degree rotation and sometimes it mirrors the model along Y-axis.
1-Aug-2002
	- Added == and != operators to compare csRef& and T* instances.
31-Jul-2002
	- Eric Sunshine performed the following tasks.
	    - Changed csutil/ref.h and the csRef smart pointer template as
	      follows:
		o Added a `transfer_ownership' argument to the existing
		  Assign() method which tells Assign() whether or not
		  IncRef() has already been invoked upon the the incoming
		  pointer.  This defaults to false for convenience.
		o Eliminated the Set() method since Assign()'s new
		  transfer_ownership argument made Set() redundant.
		o Added a second Assign() method which accepts a csRef
		  reference. The presence of this method will smooth the
		  path for future API upgrades. For example, if
		  iSector::GetCow() currently returns a pointer to an iCow,
		  then code such as `ref.Assign(sector->GetCow())' will be
		  API-compatible even after GetCow() is upgraded to return a
		  csRef<iCow>.
		o Added an IsValid() method for checking if the referenced
		  object is valid (non-null).  This is semantically equivalent
		  to the existing boolean cast operator, but more explicit.
		o Fixed the boolean cast operator so that it works with
		  compilers which do not have a built-in bool type.
		  Specifically, it now returns (obj != 0), rather than
		  returning (obj).
		o Fixed incorrect include protection macros.
		o Improved class documentation.
	      For all of the curious folk out there, the csRef template _does_
	      work with the NextStep compiler, as predicted.
	    - Fixed incorrect header include protection macros in
	      csutil/refcount.h and improved the class comments.
	- Fixed behaviour of csRef::Assign(). By default it will now
	  transfer owner ship (for pointers) as was intended in the first
	  place.
	- Converted simple2 tutorial to use smart pointers.
	- Fixed csRef::Assign() so it now correctly tests for NULL pointers.
	- Got Yet Another Blender export script from Krishnan Shrikumar
	  <krish@urbyte.com>. This one exports entire levels. You can find
	  it in scripts/blender/sectorexport.
	- Added 'explicit' keyword to csRef constructor which takes a normal
	  pointer so that you cannot misuse the assign anymore.
	- Removed the 'bool' cast for csRef because this was
	  ambigious.
	- Eric Sunshine added csRef::operator=(T*).  Eliminated all Assign()
	  methods since they were subsumed by the equivalent functionality of
	  the assignment operators.  Fixed reference-counting bug in
	  csRef::Take().
	- Added patch from Jochen Moench <jochen.moench@de.thalesgroup.com>
	  to allow SetAction() which will stop the animation after the
	  action has completed. This also modifies iSprite3DState.
	  It is now also possible to include a speed factor for animation.
	- Changed csRef again so that the T* constructor now does IncRef().
	  This means that 'Take()' is the ONLY safe way to convert an
	  old style pointer that has already be IncRef()'ed into a csRef.
30-Jul-2002
	- Added simple csRefCount class which does reference counting
	  without the need for iBase.
	- Added csRef class which is a smart pointer class that works
	  with both iBase and csRefCount pointers. Still in testing
	  phase! Thanks to Matze Braun for helping to write this.
	- Converted simple1 tutorial to use smart pointers. Note that I
	  only converted the code and not the documentation.
29-Jul-2002
	- Fixed a memory leak in csThing::PreparePolygonBuffer().
27-Jul-2002
	- Added a new blender export script (blender2cs.py) written by
	  John Harger. This one exports to thing mesh factories and puts
	  those in a seperate library.
26-Jul-2002
	- Eric Sunshine fixed problem reported by Reed Hedges
	  <reed@zerohour.net> where aws.mak neglected to install awsdef.zip.
25-Jul-2002
	- Fixed a bug in FORWARD/UPWARD (START command in map files) so
	  that this now actually works. Keep in mind that both FORWARD
	  and UPWARD are relative.
25-Jul-2002
	- Eric Sunshine made the following changes to the MingW/MSYS platform
	  configuration (msys.make and msysconf.sh):
	    - msysconf.sh is now run only once at configuration time, rather
	      than twice.
	    - msysconf.sh now determines whether or not executables and plugins
	      must be linked explicitly against libmingwex.a, which is a new
	      library containing functions such as opendir() (which used to be
	      in libmingw32.a).  Newer interim versions of MingW do not link
	      automatically against this library, so we must do so explicitly.
	    - Fixed problem with msysconf.sh configuration where CC and CXX
	      were not defined, thus all of the tests invoked by this script
	      which required a compiler would fail.
	    - msys.mak will now utilize CS/libs/zlib, CS/libs/libpng, and
	      CS/libs/libjpeg, if present.
	- Eric Sunshine eliminated compilation warnings in ensocket/inet.cpp
	  and wodrv.cpp.
24-Jul-2002
	- Eric Sunshine corrected the formatting of some makefile help
	  messages.
	- Eric Sunshine introduced the new variable RUN_SCRIPT into the
	  makefile system.  This variable is used to run Bourne-style (Bash)
	  scripts.  Typically, its value is the same as SHELL, but some
	  platforms may need to change it.  For example, on Windows, if SHELL
	  is COMMAND.COM or CMD.EXE, then RUN_SCRIPT may be set to "bash".
23-Jul-2002
	- Both walktest and cslight now support the 'cache:' keyword
	  on the commandline. If this keyword is given then the lightmap
	  and other caches will go to that file instead of the usual
	  map file. This is very useful in combination with multiple
	  levels. You can now say:
	  	walktest flarge room cache:test.zip -recalc
	  which will load flarge and room and then place all cached
	  lightmaps in test.zip. Similar for cslight.
	- The engine will now store 'precalc_info' in the cache manager
	  instead of VFS (as it should have done a long time ago).
	  It is also now called 'lm_precalc_info'.
22-Jul-2002
	- Also extended cslight tool with the ability to load multiple
	  maps and thus calculate lighting for all maps together. Note that
	  lightmaps will go to the cache of the last specified level for now.
21-Jul-2002
	- Renamed new ogl_g3dext.hpp to ogl_g3dext.h.
	- Added a new feature to walktest. You can now say:
	    walktest room maze sydney
	  and walktest will load all specified levels in memory.
	  Sectors with the same name will be merged (so objects from
	  same-named sectors in different map files will be joined in one
	  sector). You can also define world files that connect to sectors
	  in other world files.  Using this technique you can easily make
	  huge worlds from smaller zip files (easier for artists to manage).
	  One problem at this moment: CS will try to find and recalculate
	  all lightmap information from the last level given on the commandline.
	  So if you do:
	    walktest flarge room
	  it will not be able to load lights from flarge cache but only the
	  lights from room. I will try to find a solution for this later.
19-Jul-2002
	- Got a new tutorial from Hariharan Bhasker. This tutorial
	  shows how to use the csPath class in csgeom to smoothly move
	  an object along a path. This class is also used in csdemo
	  to achieve the smooth movements of the ships in the space
	  demo. In addition to the position of the object, the forward
	  and up vectors are also interpolated by csPath. The tree
	  resulting vectors can then be used with SetOrigin() and
	  LookAt(). The tutorial is also speed independent so that
	  the object will move at the same speed on all hardware.
	- Got a new landscape engine (based on bezier curves) from
	  Ryan Surkamp <deathatsight@yahoo.com>. This engine is still
	  work in progress though but as I have seen the author seems
	  very fast in his development :-)  The new landscape engine
	  can be found in plugins/mesh/bcterr.
	- Fixed a new memory leak in iPluginManager::LoadPlugin() when
	  it would load the same plugin a second time.
18-Jul-2002
	- Steven Geens fixed a bad bug in the RAPID collision detection
	  plugin. It now seems to work properly in all cases regardless
	  of the transforms that are given.
	- Jonathan Tarbox suggested a minor optimization in
	  csGraphics2DGLCommon::Write().
	- Added iTerrFuncState::GetHeightFunction() and GetNormalFunction()
	  so that you can retrieve the functions used by the landscape
	  engine.
17-Jul-2002
	- Added unittest for RAPID plugin. Extended unittest app so that it
	  calls this unittest. This test now fails but I don't know why.
	  Some help would be helpful here.
	- Added a new version of CreateMeshWrapper() to iEngine. This version
	  is an easy way to make a mesh wrapper directly from the type
	  class id. It will first create a factory and if that factory
	  implements iMeshObject it will return that (useful for things).
	  If that factory doesn't implement iMeshObject it will call
	  NewInstance() and return that new mesh object instead.
	- Added iEngine::CreateThingMesh() which is a conveniance function
	  that will create a thing mesh, place it in a sector, set ZUSE
	  z-buffer mode, and 'object' render priority. It is very similar
	  to CreateSectorWallsMesh() but that will use ZFILL and 'wall'
	  instead.
	- Michael O'Shea suggested a modification in csparser which makes
	  it possible to define a sector in pieces. So if you say SECTOR 'xxx'
	  with 'xxx' a sector that was previously defined you will just
	  add objects to that sector without affecting the previous contents.
	- Changed an snprintf to sprintf in caltocs.
	- Added a new MilkShape to CS/3D sprite convertor to CS. This convertor
	  is actually able to convert skeletal information! It has not been
	  tested a lot though. Thanks to Steven Geens <old_belge@hotmail.com>
	  for making this.
15-Jul-2002
	- Fixed a compiler error in spr3d by rearranging the code a little
	  bit.
	- Temporary fix to frustvis so that all objects are marked visible.
	  This fixes a problem in levels with moving objects. Apparently
	  the kd-tree is not updated correctly. This fix will just mark
	  all objects as visible. Dynavis has the same bug but this hack-fix
	  has not been applied to Dynavis.
	- Reverted all changes to graph2d.cpp made by Noah Falk and
	  Matt Reda. These changes break procedural textures. If you looked
	  at the textured rotating cube in walktest/flarge (main room on
	  the right) then you would see that the procedural texture was
	  not mapped correctly. Please only reapply the clipping changes
	  to graph2d with a correctly functional procedural texture
	  clipping. Side note: last (buggy) revision in CVS was 1.84.
	  I reverted back to version 1.81.
	- Reverted my own reversion of graph2d.cpp. Don't know why it didn't
	  work at first.
12-Jul-2002
	- csPluginManager::LoadPlugin() is now a bit smarter. If a plugin
	  is already on the plugin list it will not add it anymore. So you
	  can now safely do CS_LOAD_PLUGIN multiple times to create multiple
	  instances of the same plugin.
10-Jul-2002
	- Further work on levtool.
9-Jul-2002
	- DynaVis now correctly does frustum culling in mirrored sectors.
	  Apparently the fix that I did yesterday for FrustVis has the
	  wrong effect for DynaVis. I have no clue why but for the moment
	  Dynavis seems to work for mirrored sectors.
	- Added support for unknown tokens in csParser. If you construct
	  csParser with allow_unknown_tokens equal to true then the parser
	  will no longer consider an unknown token as an error.
	- Optimized csParser by precalculating the length of the strings
	  in the token table. This avoids strlen() at various points during
	  the parsing process. It also avoids actually trying to compare
	  tokens that are not equal. So this could avoid a lot of compares.
	- Started work on a new 'levtool' application. One of the main
	  purposes of this application will be a tool to convert an old-style
	  octree level to Dynavis. But more features will also be
	  added like world file validation and things like that. At this
	  moment this tool doesn't do much.
8-Jul-2002
	- Implemented CastShadows() in Dynavis. Not fully optimal yet
	  (i.e. no culling is actually done except for frustum culling).
	- Removed SupportsShadowCasting() from iVisibilityCuller. Shadow
	  casting is no longer an optional feature. It must be supported
	  by the culler.
	- Fixed a refcount leak on plugin manager in
	  csSector::UseCullerPlugin().
	- The crystalspace.culling.frustvis visibility culler is now the
	  default visibility culler in all cases. This means that a sector
	  will ALWAYS have a visibility culler now.
	- Fixed a bug in the frustum visibility culler. It would not mark
	  an object as visible if you were in the bounding box of that
	  object.
	- There is now better error checking when loading a culling
	  plugin for a sector.
	- Fixed a bug in the sector drawing code when used in combination
	  with a visibility culler and a space-warping portal. In such a
	  case the traversal of the portal could cause the previously
	  calculated vis culling results to be wrong. This is now solved
	  by storing an array of visible objects BEFORE drawing them.
	- The bugfix above also also fixes a bug in the sector drawing code
	  related to the alpha render priority (which will sort objects
	  back to front internally) and the use of space-warping (or mirror)
	  portals. In that case the traversal through the portal would resort
	  the objects on that priority which would mess up the order in the
	  previous recursion level.
	- The bugfix mentioned above involves changing the way the render
	  priority queue works. Now all is sorted at once and then put
	  in one big list.
	- Fixed a bug in FrustVis and DynaVis with regards to frustum
	  culling in case the sector is mirrored (i.e. looking through
	  a mirroring portal). The frustum planes need to be reversed in
	  that case. Seems that DynaVis still has some problems though.
	- Removed csSector::GetVisibleObjects() since that is no longer
	  needed (there is always a culler to do this work now).
7-Jul-2002
	- csSector::GetVisibleObjects() now uses the efficient
	  csIntersect3::BoxFrustum() routine. This also fixes a bug
	  because the old code was actually not always correct.
6-Jul-2002
	- Removed -fno-rtti from comptest.sh. So this option will no
	  longer be used from the moment you do 'make linux' again.
4-Jul-2002
	- Received a binary sprite loader/saver from David Asbell
	  <dasbell@yahoo.com>. This sprite 3D loader is roughly equivalent
	  to the ASCII loader but it saves to a binary format instead.
	  Load times using the binary format are a LOT better.
	- David Asbell also extended the viewmesh application so that it
	  can now save 3D sprites to the binary format.
	- Fixed a very weird construction in AWS where the destructor
	  of the superclass was called explicitely like this:
	  	this->super::~super().
	  This causes problems on some compilers and I don't see the
	  need for this either.
	- Added a 3dsMax script for converting 3dsMax levels to Crystal
	  Space. This script is written for 3dsMax version 4 but it may
	  also work with lower versions. This convertor is specifically
	  designed with Dynavis in mind so it will export seperate objects
	  in 3dsMax as seperate objects in CS. Thanks to Luca Pancallo for
	  creating this very useful script!
3-Jul-2002
	- Added non-functional iEngine->GetVisibleObjects(). The purpose
	  of this routine will be to return all potentially visible objects
	  from a given position. At this moment this function returns NULL.
	  It still has to be implemented. There are two versions: one accepts
	  a single point and computes visibility in a full 360 degree around
	  that point. The other has a frustum to restrict visibility.
	- Updated the documentation with regards to the SCF _FAST macros
	  that are now removed.
	- Significantly updated the map format documentation. Now it should
	  be about 95% up-to-date. However! Keep in mind that this is ONLY
	  the documentation for the basic map format. It does NOT contain
	  documentation for the loader plugins. This means that everything
	  that is INSIDE a PARAMS block is not documented by this documentation.
	- Matze did some aws cleanups:
		-reindented some stuff
		-rewrote some parts of the parser
		-changed some char* into const char*
		-changed lots of stuff that used iString* before, but since
			everyone was using iString* without care (LEAKS!)
			I changed most of this stuff to const char*
2-Jul-2002
	- Removed an obsolete feature to show the c-buffer in walktest.
	- Removed db_cbuffer console command in walktest.
	- Added iLight->GetFlags().
	- Moved a lot of the Doxygen documentation and also a few
	  constants from the private csLight to iLight.
	- Added iEngine->GetLightIterator() to iterate over all static
	  and pseudo-dynamic lights of the engine (for a given region
	  optionally). Added iLightIterator.
	- Added iEngine->GetFirstDynLight().
	- Removed the old cludgy iEngine->GetCsEngine(). Modified walktest
	  so it no longer needs it (by using the newly added functions
	  above).
	- Fixed a bug in iDynLight->GetNext(). It would actually try to
	  get the iDynLight from a NULL csDynLight pointer.
	- Removed isoldr.h from the plugins dir.
1-Jul-2002
	- Extended both iShadowCaster and iShadowReceiver with iMovable
	  parameter.
	- Enabled the use of iShadowReceiver instead of iThingState
	  by the lighting routines. csThing now implements iShadowReceiver.
	- Removed RegisterShadowReceiver() (and unregister) from
	  iVisibilityCuller. The culling system will have to detect this
	  on its own by doing SCF_QUERY_INTERFACE.
	- Updated a comment in iPolygon3D::SetMaterial() to indicate a
	  potential problem.
	- Fixed a bug in the octree version of VisTest(box/sphere). It
	  would use the object space bounding box instead of the world
	  space bounding box for testing.
	- Removed the following macros:
	     SCF_QUERY_INTERFACE_FAST
	     CS_GET_CHILD_OBJECT_FAST
	     CS_GET_NAMED_CHILD_OBJECT_FAST
	     CS_GET_FIRST_NAMED_CHILD_OBJECT_FAST
	     SCF_DECLARE_FAST_INTERFACE
	  All SCF macros are now declared automatically as the FAST
	  version (inside SCF_VERSION). So just remove the _FAST
	  and it will be ok.
	  CS_QUERY_REGISTRY and CS_QUERY_REGISTRY_TAG will also benefit
	  from this optimization.
	- Updated apimod96.txi for this change.
30-Jun-2002
	- Thing mesh objects now implement iShadowCaster.
	  csSector::CheckFrustum() will now use that instead of directly
	  going to the thing.
	- Further work on using iShadowCaster instead of iThingState.
	  Also fixed a bug with checking of the flags for enabling
	  and disabling shadows.
29-Jun-2002
	- Removed the dependency on iSector from iShadowBlock and
	  iShadowBlockList. This means that it is now easier to use
	  iShadowBlock outside the engine (i.e. from within Dynavis soon).
27-Jun-2002
	- Eric Sunshine fixed a significant number of problems in the Texinfo
	  source files.  Also eliminated all TeX overfull and underfull 'hbox'
	  warnings.
	- Christopher Nelson committed a huge patch to AWS from Noah Falk.
	  He tried to make sure that the API is mostly the same but there
	  were some modifications that may break code. Specifically the
	  3dengineview is now it's own component. Here is a list of all
	  changes:
	    - awsComponent
		- Added Move, Resize funcs and protected frame. Then dredged
		  through all the other components and (I think) updated all
		  code relating to moving or resizing components.
		- Added all the necessary code to handle being a top level
		  component.
		- Changed component storage from array to linked list like
		  windows.
		- Components have a depth ordering now, needed for things like
		  child windows and even with the array depth was still
		  implicit.
		- Added a few new handlers where I needed to be alerted of
		  certain things.
	    - childHide/childShow/childMove
		- Added window flag which signifies that a component should be
		  treated like a window (so far that just means that the
		  background texture aligns to it, and windows use it to
		  determine if another component with that flag is on top of
		  them to see if they are active). The Window() func now
		  searches using that flag or returns the top level component
		  if it didn't find one.
		- Added non-client flag and client frame. components without
		  the non-client flag are clipped to the client frame while
		  components with it are clipped to the Frame().
		- Gained some stray functionality that only windows use to
		  have like Maximize and FindChild. I'm not sure if maximize
		  really belongs but it has been convenient for the being.
	    - awsPanel
		- Added this class which supports some basic drawing things
		  that many of the components were duplicating code for. It
		  handles backgrounds, styles,overlays, alpha levels, insets,
		  and child clipping. I went through many of the existing
		  widgets and overhauled their drawing code to use panel
		  instead.
	    - aws3dFrame
		- Reworked alot of the code into seperate per-style functions
		  rather than one massive block. I also added some more
		  styles, and some extra versions of the draw function
		  for convenience. It also can make use of a rectRegion now
		  for more optimized drawing.
		- Fixed all the frames to draw according to the def given in
		  csRect which says that lines x = xmax and y=ymax are not
		  part of the rect area.
		- Makes a crude attempt at having a pallete, but at the moment
		  you can set your background drawing color. you could set the
		  others too but I haven't needed to yet so I haven't written
		  the setXXX funcs for them. In the end a nicer pallete
		  approach would be better I think.
	    - awsManager
		- Reworked the draw code, it clips properly at least on the
		  screen canvas. Again the clip rects are set to not include
		  x = Frame().xmax and y =Frame().ymax. Unfortunately due to
		  some discrepancies in the 2d and 3d software clip code lines
		  and pixels are clipped to the inclusive clip region while
		  boxes/pixmaps do not include y = ymax / x = xmax. So right
		  now there are some small gaps where a box or pixmap should
		  be clipped one pixel less. Disabling/enabling the always
		  redraw seems to work properly when I no longer draw the
		  engine in the background. Erasing however is better than it
		  was but I suspect there still might be some lingering errors
		  in the rectRegion code.
		- Reworked all the functions which previously required top
		  level windows, now they work with components.
		- Re-did the event handling routines.
		- Mouse events now go to the lowest level visible component
		  and then proceed up through the parent hierarchy.
		- Mouse focus now cannot go from one component to another
		  without hitting every intermediate component in the tree
		  between them.
		- You can capture the mouse in response to losing mouse
		  focus in which case you don't lose it, focus does not
		  travel further, and the would-be focused component does
		  not get to handle the event. This was very useful for the
		  popup-menus where now the popups can capture focus if the
		  mouse leaves the frame, but still have mouse events
		  delivered normally when the mouse is inside a child
		  component.
		- Keyboard events just go to the keyboard focus, something a
		  little more interesting is probably desirable but I haven't
		  messed around with it yet.
	    - awsPrefMgr
		- Added an extra background fill color to the pallete. This is
		  the color components paint their background (might be
		  different from the fill color but that is what it defaults
		  to if not specified).
	    - awsWindow
		- Stripped away ALOT, all the top level component code went
		  to component. Much of the drawing code has gone to panel
		  and 3dframe.
		- Implemented the controls using actual non-client cmd buttons
		  rather than doing it all inside of window.
		- The title bar displays a bit more nicely now when you
		  shrink the window.
		- The minimum size is a bit more intelligent for resize.
		- You can draw the a gradient title bar if you want by setting
		  a 2nd titlebar color (ala windows).
		- Engine view is now a seperate component.
		- Messed around with the draw code alot so im not sure all
		  the styles/option combinations work exactly like they used
		  to. I have stopped drawing the grip for the time being as
		  it looked funny always getting overdrawn by the interior
		  components (you either have to move the client frame
		  inwards alot to include it or components over-draw it).
		- iAwsWindow is eliminated.
	    - awsTabCtrl
		- This is a more general version of the notebook button bar.
		  You provide captions and it returns sources from the tabs
		  that you can hook up to see when the tabs are gettings
		  pressed.
		- Reworked the notebook to use this tab ctrl instead.
		- I think that has made the notebook button bar obsolete.
	    - awsNotebook
		- While I am thinking of it, I think the deaf flag was only
		  used here but I think is now obsolete as well because of
		  the changes I made in the managers event handling. I can't
		  remember whether I actually removed the SetDeaf() calls
		  though.
	    - awsEngineView
		- Simple little class with a view property, you just set it
		  and thats about it.
	    - awsControlBar
		- A base class that I used to make menu and popups from. You
		  could also use it for toolbars and just about it any other
		  simple layout of components in a row. It can do various
		  things with sizing the children and itself and their are
		  some alignment options.
	    - awsMenu. awsMenuBar, awsPopupMenu, awsMenuEntry, awsMenuBarEntry
		- Bunch of classes for menus. I tried to design the menus so
		  that the actual items which you put in them are minimally
		  restrained. The defaults right now are a bit simplistic but
		  should look nicer with a little more work. Through a little
		  fudging it will work properly if you make a menu bar have
		  children which are menu bar entries, which have children
		  which are popups, which have children which are popup
		  entries, which may then recursively have popup children. I
		  included an example (I think its PopupMenuTest.def) that
		  crudely shows what can be done. The menus still lack a lot
		  of programatic access and support though. The code will also
		  work for standalone popups but you can't create them
		  properly from definitions yet.
	    - Grid bag layout:
		- Changed it so that it would only layout the components that
		  were added as opposed to all children of the owner.
	    - CmdButton:
		- I think I changed the toolbar style to more of what I
		  wanted the toolbar style to look like. The menu bar
		  entries are toolbar style buttons.
		- You can now set state as well as query it.
	    - imageView
		- You can set a color to be drawn, which I used to help me
		  see the system pallete colors. It seems like it would be
		  useful in a color picker too.
	- Christopher did some various fixes later resulting from the huge
	  AWS patch.
	- Duhprey fixed some \r\n problems with the new AWS code.
	- Norman Kramer added default implementations for the new methods
	  in iAwsComponent.
	- Christopher Nelson fixed a few compile problems pointed out by
	  Reed Hedges.
	- Christopher added debug guards so that the mouse status messages
	  don't appear unless you tyrn on the debug flags DEBUG_MANAGER and
	  AWS_COMP_DEBUG in aswcomp.cpp and awsmgr.cpp inversely respective.
	- Norman Kramer fixed odedynam.h: "ode/ode.h" -> <ode/ode.h>
	- Norman replaced SetEnvineView() with SetProperty("view", wview)
	  in awstest.cpp.
	- Norman replaced the NASM flag "-f aoutb CWITH_UNDERSCORE" with
	  the more likely flag "-f elf".
	- Chris Forno updated the Unix platform build instructions.
	- Chris also updated Justin Miller's contributions.
26-Jun-2002
	- Fixed Dynavis so that the 'freeze' visibility feature works
	  again.
	- Justin Miller did a CS-local workaround to prevent int8, uint8,
	  int32, and uint32 conflicts with ODE. Thanks to Eric Sunshine
	  for suggesting the solution.
	- Res did the following:
	    - docs: removed a couple of '\internal's.
	    - docs: added some more grouping.
25-Jun-2002
	- Added howto for a very simple map.
	- Optimized csOBB code a bit and fixed a huge number of rather
	  big memory leaks there. There is still a big bug in OBB code
	  somewhere though. It sometimes crashes with division by zero.
	- Added an (untested) frustum view culler. This culler is a simpler
	  version of Dynavis that will be used as the default culler in
	  the future for all sectors.
	- Added 'frustvis' target to walkall.
	- Added new simple csIndPrint class in csutil which can be used
	  for indented printing.
	- Added temporary debugging code to csOBB to help find a problem
	  there.
	- Found the reason for the csOBB bug but not the correct fix yet.
	  Working around the bug right now seems to work reasonably well.
	- Philip Wyett removed reference to Code Warrior from sysreq.txi
	  as there is no longer a Code Warrior port.
	- Res did some documentation updates.
	- Duhprey fixed obb.cpp for the case where length == 0. This
	  fixes a logic error in the OBB creation.
	- Norman Kramer removed incref/decref of the wmgr in the
	  awsembeddedcomponentfactory since this creates circular
	  dependencies (the factories are increffed and stored by the
	  mgr upon registration).
	- Res fixed plugin.tpl (MSVC7 project file generation): %lflags%
	  and %libs% was swapped in one place.
	- Chris Forno did some documentation updates:
	    - Unified some naming conventions.
	    - Fixed printed output in the first 34 pages of the manual.
	    - Updated documentation contributor list (added myself!).
	    - Removed ambiguous references to 'I' and 'me' in the contributor
	      list.
	- Res did more work on documentation (Doxygen documentation).
24-Jun-2002
	- Mathew Sutcliffe fixed Doxygen comments so iImageIO shows up in
	  pubapi docs.
	- Res did the following:
	    - Attempt to add some missing API documentation.
	    - Moved csEvBind from binder.h to binder.cpp.
	    - Added a pair of parentheses to defintion of CS_ALLOC_STACK_ARRAY.
	    - Moved csEvBind from binder.h to binder.cpp.
	- Chris Forno fixed a broken link in the system requirements
	  documentation.
23-Jun-2002
	- Added csIntersect3::BoxSphere() function which tests intersection
	  between a box and a sphere.
	- Extended iVisibilityCuller interface with two new VisTest()
	  variants that take a bounding box and bounding sphere. These
	  functions will mark all objects visible that intersect
	  with those bounding objects.
	- Implemented Dynavis version of these functions.
	- Implemented octree version of these functions. This implementation
	  is very naive though. It will not use the octree and instead
	  just traverses all objects to test them with the bounding
	  box or sphere.
	- Changed iEngine->GetNearbyObjects() so that it will use the
	  new VisTest(sphere) function if there is a visibility culler.
	  That way GetNearbyObjects() will actually become a lot more
	  useful and faster if a culler is used.
	- Completely rewrote the object iterator in the engine. It was
	  hard to understand and very buggy. The current one is a lot
	  more robust. GetNearbyObjects() now uses this.
	- Walktest collision detection now uses GetNearbyObjects() for
	  a LOT faster moving around now. Especially in large levels that
	  have lots of mesh objects.
	- GetNearbyObjects() now correctly supports portals (it will
	  check if the portal is in the given radius) and then
	  traverse the portal if needed. This does not (yet) work
	  for space warping portals though! This finally fixes the bug
	  when you walk around in the flarge street and you sink through
	  the floor :-)
	- Removed the old csObjectIt class. csObjectListIt replaces it
	  (used by the updated GetNearbyObjects() function).
	- Norman Kramer did the following to AWS:
	    - Windows and their child components are now destroyed if
	      awsmanager goes down.
	    - Fixed bug in slot connection where the sink was not increfed.
	    - Fixed bugs in notebookbuttonbar and scrollbar destructors
	      where some child components were decref'ed twice.
	    - Rewrote awstimer a bit to avoid keeping a reference to the
	      eventqueue which caused some nasty circular rererencing.
22-Jun-2002
	- Fixed a small bug in the adding of operations to a tiled
	  coverage buffer.
	- Fixed a bug with Dynavis: it would crash if an object
	  didn't support a polygon mesh. Fixed this by using AABB
	  instead of OBB in that case.
	- Fixed a bug in Dynavis::IntersectSegment(). The intersection
	  point was not correctly passed to the caller.
	- Fixed a severe memory overwrite bug caused by out of bounds
	  line drawing in the DrawLine function of the tiled
	  coverage buffer.
	- Small changes to Dynavis.
	- Justin Miller fixed FRAME() output generated with 3ds2lev -3.
	- Norman Kramer added an entry for the ODE physics plugin
	  (commented out) to user.mak.
	- Norman added comment where to get ode lib, what version is needed
	  and what changes to the config have to be done.
21-Jun-2002
	- Fixed a bug in csSector::IntersectSegment() (which is used
	  in HitBeam() and other functions like that). Apparently if an
	  octree was used it would test all non-octree objects twice.
	- Added iThingState::IntersectSegment().
	- Implemented IntersectSegment() in Dynavis. It is a fairly
	  optimal implementation that will use the kd-tree for rough
	  front-to-back sorting and it will also test the segment
	  against the bounding box of the kdtree nodes and objects.
	- For reasons totally unknown to me the FindOBB routine suddenly
	  started crashing. So for Dynavis I have no switched to
	  FindOBBAccurate(). This function is slower but it only happens
	  once so that's not a big problem usually. Will investigate later
	  to see what's going on.
	- csSector::IntersectSegment() now uses the culler in general
	  and not only if it is an octree culler. That way all routines
	  that use csSector::IntersectSegment() are now speed up by
	  Dynavis.
	- Some optimizations to Dynavis again.
	- Switched back to FindOBB()... Weird...
	- Mathew Sutcliffe added workaround for freopen() problems in
	  Cygwin.
	- Chris Forno updated more of the directory hierarchy documentation.
	- Chris also updated system requirements documentation.
20-Jun-2002
	- Considerably optimized AppendWriteQueue() in Dynavis. Profiling
	  showed that this is now the function that does most work.
	  The optimization I did makes this function a LOT faster but
	  less accurate meaning that the benefit of the write queue
	  will be less. In future we need to use the OBB instead of the
	  AABB to transform to camera space. That will improve accuracy
	  again without much additional performance cost.
	- Added csOBB class to csgeom. This is a subclass of csBox3
	  representing an oriented bounding box (OBB). Thanks to Daniel
	  Duhprey for making this.
	- Added csOBBFrozen which is a frozen (more optimal) version of
	  csOBB. It will do the transformation once and cache them.
	- Dynavis now uses OBB instead of AABB for the write queue
	  and for test object visibility (TestRectangle). This improves
	  the culling ability of Dynavis considerably.
	- Added csOBBFrozen::ProjectOBB() to project an OBB to a
	  screen space box (similar to csBox3::ProjectBox()).
	- Started work on csVisibilityObjectHistory class. This class
	  contains all history-related visibility information for an
	  object (and in the future also kdtree node). The reason
	  for this seperation is to make it easier later on to redesign
	  this to support multiple camera positions.
	- csVisibilityObjectHistory is now an SCF class so that it can
	  be embedded more generally in the csKDTree.
	- Every tree node also has a history object now. This way history
	  based culling (i.e. marking a node as visible if it was visible
	  previous frame) is now possible. In future this can also be
	  used for VTP (Visible Point Tracking). This optimization improved
	  Dynavis a bit again :-)
	- Increased the time objects are considered visible (for history
	  culling).
	- Justin Miller applied a hinge patch by Duhprey (ODE dynamics).
	- Justin rearranged declarations of index variables in csOBB.
	- Chris Forno updated the resources section of documentation.
	- Justin Miller reports:
	    - Added iDynamicsMoveCallback,
	      iDynamicSystem::CreateDefaultMoveCallback(), and
	      iRigidBody::SetMoveCallback(). The application can now decide how
	      to move body attachments after a dynamics step. Updated physics
	      tutorial to use these.
	    - iDynamicSystem now has a default move callback member instead of
	      CreateDefaultMoveCallback(), and it gives this to all bodies when
	      creating them. The default can be retrieved with
	      GetDefaultMoveCallback().
	    - Updated physics tutorial.
	- Chris Forno updated the feedback section of the documentation.
	- Chris revised the feature set layout and updated some of the
	  directory hierarchy listing.
	- Philip Wyett added C4514 warning to be squashed and hidden by
	  MSVC 6.
19-Jun-2002
	- Clarified an API comment to indicate that the OFTEN moving
	  option for things doesn't work yet.
	- Added 'toggle_freeze' command to Dynavis (assigned to alt-f
	  in BugPlug). This will freeze the current visibility status
	  of all objects. No further visibility testing will occur. If
	  the camera moves the visibility information valid at some
	  point will be unchanged so you can walk around the level
	  and see what is visible and not.
	- Added 'exact_freeze' command to Dynavis (assigned to ctrl-f
	  in BugPlug). This will first compute exact visibility with
	  the (slow) exact visibility culler. Then it will freeze
	  that result. This will give the theoretical maximum performance
	  that a hypothetical zero-cost visibility culler could give.
	  This is the upper limit for Dynavis. Dynavis cannot get faster
	  than that. In order to improve speed further rendering optimizations
	  have to be done like DrawPolygonMesh and so on.
	- Fixed the exact visibility culler in Dynavis so that it actually
	  correctly clips polygons that go out of screen and out of
	  the Z=0 plane. Without this fix the results of the exact
	  visibility culler were actually not relevant.
	- Added an entry to the FAQ about states and mesh wrappers.
	- Added an entry to the FAQ to clarify reference counting.
	- Fixed a bug in the TestRectangle of the tiled coverage buffer. This
	  bug would accidently mark some rectangles as visible even if they
	  were not.
	- Optimized TestRectangle for Dynavis. Profiling shows that the
	  test of rectangle visibility is currently the function that
	  takes most time to calculate.
	- Several additional optimizations on the tiled coverage buffer.
	- Norman Kramer changed fd_mask to fd_maskset due to type naming
	  clash on freebsd (ensocket plugin).
	- Justin Miller added a patch to cspyhton.mak by technorama.
	- Justin added Duhprey's AttachColliderCylinder() to ODE dynamics
	  plugin.
18-Jun-2002
	- Extended iBugPlug interface with functions to setup a debug
	  view. This is a 2D view on which you can render one general
	  object (provided by application or plugin, this is done by
	  implementing iBugPlugRenderObject) and then a set of points
	  and lines.
	- Added 'debugview' command to BugPlug to switch to this view.
	  Assigned alt-s key to this command.
	- Added new 'setup_debugview' Dynavis command which setups the
	  debug view for testing of the tiled coverage buffer. Assigned
	  this command to the 's' key. This command will setup the
	  debug view with three outlines that are rendered on the tiled
	  coverage buffer. It also shows a box which does TestRectangle().
	  If the box is visible you see a small red box in the top-left
	  corner of the display.
	- Extended BugPlug so that you can now drag the points.
	- Implemented the graphical dump of the tiled coverage buffer.
	  This is now used in the setup_debugview command.
	- Optimized the tiled coverage buffer by improving the check
	  if a tile can is full.
	- Fixed a bug where tiles which are full where not marked as
	  dirty even though they have to be marked.
	- Fixed TestRectangle() so it does a smarter test now.
	- Tiled coverage culling starts to work now. Time to optimize
	  a bit :-)
	- Philip Wyett did some mysterious changes to the win32gcc
	  documentation.
	- Justin Miller applied a new patch by Duhprey to allow
	  setting of parameters before attaching body (for iJoin/ODE
	  dynamics plugin). Justin patched physics tutorial so that
	  'j' adds a jointed body.
	- Chris Forno started working on the documentation. He did the
	  first initial updates.
17-Jun-2002
	- Worked further on the tiled coverage buffer in Dynavis.
	- Fixed bug in handling of 'analyze_vis' command in Dynavis.
	- Tiled coverage buffer is still not working properly. Work
	  in progress.
	- Justin Miller added a new feature from GoGi: csString::FormatV()
	  which also takes a va_list.
	- Justin applied a new patch from Duhprey: iJoint interface and
	  implementation.
16-Jun-2002
	- Fixed a bug in csTiledCoverageBuffer::Debug_Dump().
	- Fixed a bug in the tiled coverage buffer. The operations
	  were cleared at the wrong time.
	- While still not completely correct, tiled coverage buffer
	  is starting to work a bit now.
	- Made BugPlug a little bit more friendly by showing a message
	  when it is waiting for a key.
14-Jun-2002
	- Upto now BugPlug has always been a plugin with no own interface.
	  So there was no way to talk with BugPlug. This has now changed.
	  I added the iBugPlug interface. With this interface it will be
	  possible to control various features of BugPlug.
	- Added several commands to enable a new 'debug sector' feature
	  in BugPlug. With this feature a plugin or application can
	  create a sector filled with boxes and triangles. This can be
	  used for debugging purposes. Not all features in this inteface
	  are already implemented. Currently only filled boxes and
	  triangles.
	- Added new 'debugsector' to BugPlug to enable the debug
	  sector view. Assigned to shift-s key. As soon is this mode
	  is active you don't have to press ctrl-d anymore for BugPlug
	  commands. So shift-s is sufficient to exit.
	- Added several 'ds_...' commands to move in the debug sector.
	  Assigned to arrow keys and shift-arrow keys for strafe.
	- Extended Dynavis with a new 'setup_debugsector' command. This
	  command will use BugPlug to set up a debug sector with boxes
	  for all objects. The boxes are colored according to the last
	  visibility result:
	    white=visible
	    green=out frustum
	    dark-gray=invisible because parent kd-tree node is invisible
	    dark-red=invisible because culled with coverage buffer
	  While this mode is active Dynavis will mark all objects as
	  invisible. That means that this mode can run at full speed.
	- In addition to the boxes the view frustum is also shown with
	  transparent colored triangles that fade in the distance.
	- Assigned 'setup_debugsector' to shift-3 key in BugPlug.
	- Some more debugging in Dynavis.
	- Philip Wyett updated links to msvc_libs for MSVC7 to latest
	  version 0.94e.
	- Res did the following:
	    - Removed workaround for bug in mipmap_0... 
	    - Reincarnated the glwin32 window z order hack... but not that
	      ugly anymore.
	    - Added support for image output options. Currently supported by
	      png ang jpg plugins. Options are a comma-separated list and can
	      be either 'option' or 'option=value'.
	      supported options:
		compress=# - image compression, 0..100 higher values give
		smaller files, but take longer to encode or give uglier results.
		progressive - progressive(jpg)/interlaced(png) output.
	      examples:
		compress=50
		progressive,compress=30
	    - Updated gfxtest to support this feature.
	- Justin Miller did an elasticity tweak to the physics tutorial.
13-Jun-2002
	- Fixed ode plugin so that it now calls DeferUpdateLighting()
	  when the object moves so that lighting is calculated. This is
	  not good though. ODE plugin should not move objects on its
	  own but instead call a callback from the application saying
	  to move the object. The application can then choose to
	  decide how exactly to move the object. This includes lighting,
	  moving through another system (i.e. pcmovable in CEL), or
	  even sending movement information over a network.
	- Changed lights in phystut a bit.
	- Further fixes on Dynavis. Doesn't crash now but culls incorrectly.
	- Enabled more plugins in win32gcc.mak since mingw installation
	  now has the needed libraries (or soon will have at least).
	- Started implementing unit tester in the tiled coverage buffer.
	- Implemented TestPoint() in the tiled coverage buffer, doesn't work
	  properly yet. So the unit tester will fail now.
	- Fixed a bug in the tiled coverage buffer.
	- Justin Miller added a simple physics application using iDynamics.
	- Justin tweaked sphere sizes in physics tutorial. Space key creates
	  random objects now.
	- Justin added a time step loop (from Duhprey). Greatly improves
	  the accuracy of the simulation (physics tutorial).
	- Justin fixed/changed: gravity amount, starting position,
	  object velocities, box collider dimensions, collider friction and
	  elasticity values (physics tutorial).
	- Justin then added another less brutal stepping algorithm to
	  physics tutorial.
	- Philip Wyett updated documentation to reflect a new msvc_libs
	  release (version 0.94d).
12-Jun-2002
	- Enabled stencil again in opengl.cfg. For some reason it
	  was disabled.
	- Added first implementation of tiled coverage buffer in Dynavis.
	  Doesn't work at all at the moment so it is disabled by default.
	  If you like segmentation faults you can enable it with the
	  new 'toggle_tiled' command in Dynavis (assigned to '5' in bugplug).
	- A few further fixes on Dynavis. Not enough to avoid crashes.
	- Justin Miller fixed ODE dynamics plugin so that mesh transforms
	  are better set.
11-Jun-2002
	- Philip Wyett added Dynavis back into default build.
	- Justin Miller applied Duhprey's fixed to MakeStatic(). Also
	  inlined GetID() (ODE dynamics plugin).
10-Jun-2002
	- Added an entry to the faq.
9-Jun-2002
	- Eric Sunshine fixed bug reported by Noah Falk <nsf@andrew.cmu.edu>.
	  In the case where csRectRegion::ClipTo() clipped a rectangle
	  completely out of existence, it then failed to clip the immediately
	  following rectangle.  Furthermore, it would access non-existent
	  elements beyond the end of the region list.
	- Matze Braun fixed csrectrg.cpp: someone forgot to declare a
	  variable.
8-Jun-2002
	- Philip Wyett did the following:
	    - Removed Dynavis from CS build until a missing file is
	      committed.
7-Jun-2002
	- Added several entries to the faq.
	- Added new 'analyze_vis' command to Dynavis. This command
	  will first run a new exact visibility culler (a very slow one)
	  and compare the results with the visibility testing of Dynavis.
	  That way the quality of culling (and correctness) can be
	  calculated. Assigned alt-a to this command in BugPlug.
	- Philip Wyett did the following:
	    - Added checkes for GL 1.1. Compilation will stop if
	      'GL_VERSION_1_1' is not defined in gl.h.
6-Jun-2002
	- Changed 'double' to 'float' in OpenGL renderer texture cache.
	- Added 'toggle_queue' command to Dynavis. Assigned this command
	  to '4' in BugPlug.
	- Added csBox2::TestIntersect() and csBox3::TestIntersect(). These
	  functions test if two boxes have an intersection without
	  actually computing the intersection. So it complements the
	  *= operator in csBox2 and csBox3 which actually computes the
	  intersection.
	- Made the first implementation of the write queue in Dynavis. This
	  queue will prevent occlusion writes (which are expensive) unless
	  they are really needed. This seems to work rather well and gives
	  a noticable speed increase.
	- Updated faq.txi with some technical questions and answers.
	- Fixed an error in the collision detection howto.
	- Added new 'origin_z' command to Dynavis. With this command you can
	  change the distance at which the origin is rendered in the debug
	  view. By default this is 50. origin_z can have the following
	  parameters:
	  	origin_z +	(add 1 to z)
		origin_z ++	(add 10 to z)
		origin_z -	(subtract 1 from z)
		origin_z --	(subtract 10 from z)
		origin_z 30.3	(set z to 30.3)
	  Assigned shift-1 to origin_z -- and shift-2 to origin_z ++ in
	  BugPlug.
	- Philip Wyett did the following:
	    - Eliminated some uninitialized variable warnings under MSVC
	      (Dynavis).
5-Jun-2002
	- Thanks to the extensive research and coding efforts of Toni
	  I managed to fix up static lighting so that it gives more correct
	  shadows in most cases.
	- Justin Miller applied Duhprey's MakeStatic()/MakeDynamic() patches
	  to the ODE dynamics plugin.
	- Christopher Nelson added CreateEmbeddableComponentFrom to AWS.
	- Christopher also added some suggestions from Barry R for
	  AWS textbox.
	- Matze Braun replaced the strange aws.log with normal CS reporter.
updated3-Jun-2002
	- Justin Miller updated scf.cfg for ODE dynamics plugin.
2-Jun-2002
	- Justin Miller changed export name of odedynam.cpp to match the
	  plugin name.
1-Jun-2002
	- Res did the following changes to the MSVC7 project files:
	    - All projects now use the runtime dll (apps, libs used the static
	      rt).
	    - Removed unused appgui template.
31-May-2002
	- Implemented a new CLEARSCREEN option in the SETTINGS block. Using
	  this you can force clearing of the screen every frame (this is
	  not done by default). There is also a iEngine::SetClearScreen()
	  function and equivalent. And an Engine.ClearScreen config option.
	- Justin Miller did some fixes on the ODE dynamic plugin:
	  iRigidBody: Added GetProperties(), typo fix in Attach methods.
	- Philip Wyett updated links for msvc_libs for MSVC 5 and 6 which
	  contains a fixed ode.lib. The new version is 0.94c.
30-May-2002
	- Removed support for the XOR buffer in the engine. The XOR buffer
	  is still used in Dynavis. Also removed 'toggle_xorbuf' command
	  in the engine.
	- Unittest application will no longer link statically with engine
	  since the XOR buffer test is removed.
	- Added new iMaterialEngine interface. The material definition of
	  the engine implements this interface (in addition to iMaterial).
	  You can use this to query for the iTextureWrapper's that are used
	  by the material. Keep in mind that not all iMaterial implementations
	  may implement this additional interface.
	- I did a quick run of all annotations that were added to the
	  user documentation and public API reference manual, and I
	  incorporated all useful suggestions, corrections, and clarifications
	  into the real manual.
	- Updated part of the Map2CS documentation that was still using
	  old syntax for map2cs.cfg config file.
	- Philip Wyett did the following:
	    - Updated links to the latest version of msvc_libs.
	    - Added Cygwin build documentation.
	    - Updated msvc_libs links for new 0.94b release.
	    - Added plugins line for new odedynam (physics plugin).
	    - Fixed link problems with GCC compilers. The makefile did
	      not have any knowledge of libode.a or any ode static library.
	    - Removed ugly CS_DEBUG hack for -fs mode. This is not advisable
	      having such code which redefines the z-order in the win32 API.
	      The IDE is visible via ALT + TAB on XP if their is an instance
	      where it is not can people mail me with this instance so I can
	      test.
	    - Minor Fix in oglg2d.cpp. Changed order From:
		ShowWindow();
		UpdateWindow();
	      to more correct:
		UpdateWindow();
		ShowWindow();
29-May-2002
	- Implemented history culling in Dynavis. This means that if an
	  object is visible then it will be kept as visible for a few
	  frames (random). This will avoid testing objects that are most
	  likely visible too much.
	- Added a new 'toggle_history' command in Dynavis to enable/disable
	  this new feature. Assigned to the '3' key in BugPlug.
	- Added a new outline debugging mode. This will render all outlines
	  on screen so you can examine if they are allright. You can go to this
	  mode with BugPlug key shift-v. Note that only the outlines of
	  visible objects are shown.
	- Added several CS_ASSERT's to csgeom and Dynavis to help debugging.
	- Added first version of the ODE based dynamics plugin to CS. This
	  plugin was made by Anders Stenberg. Source code for this plugin
	  can be found in plugins/physics/odedynam. The interface header
	  is in include/ivaria/dynamics.h. Note that there is no makefile
	  yet (and no MSVC project files). I didn't have time to actually
	  make those.
	- Fixed a severe memory overwrite bug in the coverage buffer
	  (InitializePolygonBuffer() function).
	- Fixed a newly introduced bug in the coverage buffer.
	- Corrected line-drawing in the coverage buffer of Dynavis a little.
	- Fixed a significant bug in the outline coverage buffer updating
	  which could cause severe performance degradation in some cases.
	  The problem was that the bounding box used for outline rendering
	  was using uninitialized vertices and so could result in a bounding
	  box that was too big.
	- Res added a makefile for the ode dynamics plugin (untested).
	- Christopher Nelson applied a patch submitted by Marc Haisenko
	  which fixes a bug in radio buttons not being able to tell
	  which one received the click notification.
	- Christopher added two new signals to awsRadioButton:
	  signalRadButtonTurnedOff and signalRadButtonTurnedOn. Now you can
	  easily find out if a radio button is on or off without polling.
	  Simply register for one or both of these signals. Also, these
	  signals ONLY get sent by the radiobutton losing it's on state, and
	  the radio button gaining the on state.
	- Res fixed path for polymesh.h in ODE dynamics plugin.
28-May-2002
	- Fixed visibility culling in Dynavis when the camera was inside
	  the bounding box of an object.
	- Optimized outline visibility writing a bit by avoiding unneeded
	  storage of transformed z coordinate.
	- Changed csPolygonMeshTools::CalculateOutline() so that it returns
	  the used vertices with a bool array instead of the old method.
	  This is more efficient for Dynavis.
	- There seems to be a bug in the KD-tree traversal in some
	  special cases... Need to investigate.
	- Toni reports: Oriol Esteve has done some hacks to try to avoid the
	  opengl shadow bug (lightmaps were misaligned). This code is
	  experimental though. It has been tested in some levels and seems to
	  place the lightmaps correctly and doesn't crash (and well, that's
	  important :). It seems stable, but is still under observation.
	- Res did some fixes to OpenGL/windows and ddraw canvases:
	    - In fullscreen mode glwin32 canvas now behaves the same as 
	      ddraw canvas when the window is deactivated (through alt+tab 
	      or win key).
	    - Window isn't always on top now. there's a method to explicitly
	      cover the task bar mentioned in the Windows Shell docs. Works
	      fine on win2000, what about the other ones?
	    - Added small hack to glwin32 debug build to work around 
	      the problem that in fs mode the app window covers the IDE while
	      debugging.
	    - glwin32 and ddraw canvas now try to set the fs video mode with
	      a display frequency specified in the Video.DisplayFrequency
	      cfgvar. If the modeswitch fails the first time or the
	      cfgvar == 0 the default frequency is used.
	    - Added an #ifdef so the latest ddraw.h isn't needed 
	      (display frequency frequency req. dd7; won't be enabled
	      w/ older with headers).
	- Christopher Nelson added 'State' to SetProperty() for the checkbox
	  and radio-button.
27-May-2002
	- Fixed IsZero() from Toni by using a 'float' precision instead
	  of 'double'.
	- Fixed a bug in the coverage buffer of Dynavis in case the outline
	  has a lot of vertices. Now it automatically adapts the array
	  of vertices.
	- Simplified the coverage buffer a bit by removing support for
	  left/right lines.
	- Polygon insertion into coverage buffer is now also more robust
	  and faster because it doesn't care about left/right lines anymore.
	- Implemented a work-around for csImageFile::MipMap() in case steps
	  is 0 and width or height is 1.
	- Norman Kramer added some (void)funcname to reduce the amount of
	  warnings under MSVC.
	- Res improved level 0 mipmapping of 1 pixel wide images.
26-May-2002
	- Fixed a bug in the KD-tree of Dynavis. It was possible for
	  a split axis to be outside the node bounding box.
	- Made the test on outline radius > instead >=. Otherwise it could
	  happen that the outline was recalculated every frame if radius
	  happened to be 0.
	- Extended the unittest of csKDTree in Dynavis.
	- Philip Wyett eliminated a warning in csimage.cpp (under MSVC).
25-May-2002
	- Fixed a bug in KD-tree of Dynavis which could cause infinite
	  recursion while traversing the tree. Also enabled normal Dynavis
	  processing again.
	- Extended Dynavis 'toggle_coverage' command so that it now has
	  three modes: None, Polygon, and Outline.
	- Norman Kramer added patch submitted by malverian@lockless.dyndns.org
	  (Philip Walls) : Added software cursor drawing, which is available
	  to other canvases (and now svga2d canvas) via the
	  Video.SystemMouseCursor option.
	- Philip Wyett added freefnt2 plugin back into default MSVC build.
24-May-2002
	- Fixed a bug in the handling of the polygon mesh instances in a thing.
	  If they were queried too early they could hold invalid date and
	  the vis system would not know about it.
	- This fix means that Dynavis outline culling finally works :-)
	- Added lots of debug info to Dynavis (making it totally unusable
	  for mere mortals) to help me debug a crash.
	- Toni fixed a little bug in fector3.h: IsZero method compared the
	  components of the vector with 0. Now it has a default float
	  parameter named "precision". Its default value is SMALL_EPSILON
	  (0.000001f), but other values can be passed. As a precondition
	  precision value should be > 0, the test done is
	     ABS(x) < precision && ABS(y) < precision && ABS(z) < precision
	  so if precision value is negative this will return always true.
	  It could be solved typing ABS(precision) but this is not needed if
	  we're careful.
	- Philip Wyett removed SDL canvas and FreeType2 plugins from default
	  MSVC build.
23-May-2002
	- Put back the fflush() in engine.cpp. An fflush() can NEVER
	  cause crashes unless your environment is screwed up a lot.
	- Changed csPolygonMeshTools::CalculateOutline() so that it returns
	  the output edges as sets of vertex indices instead of edge
	  indices.
	- Extended the unit tester for CalculateOutline().
	- Replaced the normals with planes in the csObjectModelManager from
	  Dynavis.
	- Fixed a bug in CS which caused problems with portals that go
	  between sectors that contain static polygon trees. The c-buffer
	  was not cleared properly when the portal was on a mesh that itself
	  doesn't have the static tree.
	- Added support for calculating position dependend outlines in the
	  model manager of Dynavis. As long as the position doesn't move
	  too much with relation to the original model then the outline will
	  also be reused from previous frame.
	- Added support for rendering outlines in the coverage buffer of
	  Dynavis. No support for unit testing yet.
	- Added first version of outline rendering support in Dynavis.
	  Currently not working properly yet.
	- Philip Wyett fixes in OpenGL windows canvas:
	  Removed association between Depth and pfd.cColorBits. This is the
	  most likely cause of corruption some are seeing, because it is
	  ignored by us in setup. This also forced Windows to use the depth of
	  the desktop and stopped setting of depth via config files.
22-May-2002
	- Updated apimod96 for new csParser class.
	- Some minor code cleanup in the new csParser class. It was already
	  formatted rather well though.
	- Fixed python plugin.
	- Added csPolygonMeshTools::CalculateEdges() which will calculate a
	  table of edges for the mesh. Also added a unit tester for this
	  routine to the csgeom unit tester.
	- Added csPolygonMeshTools::CalculatePlanes() function to calculate
	  planes for the mesh.
	- Added csPolygonMeshTools::CheckActiveEdges() function to calculate
	  the activity state of all edges.
	- Added csPolygonMeshTools::CalculateOutline() to create an outline
	  (expressed in 3D) for the given set of edges and planes. Added
	  a unit test to the csgeom unit tester.
	- Res did the following:
	    - Added a missing newline at end of win32.cpp.
	    - Removed an fflush() from engine.cpp which caused crashes.
	    - Removed redundant functions ParseMixmode() from a couple of
	      loaders; iSyntaxService is used instead.
	- Philip Wyett reports:
	    - Added support for MSYS from the MinGW project.
	      To build with MSYS do "make msys MODE=debug" in place of your
	      old method.
	    - Fixed mkdir command in CS so msys can deal with directory
	      creation. Note: This is very hacked and early support and is
	      subject to change.
	- Philip also fixed a link problem in freefnt2. This requires you update
	  to latest msvc_libs 0.94a.
21-May-2002
	- Added include/igeom/polymesh.h to css.h.
	- Fixed bug with csEvCord not calling SCF_CONSTRUCT_IBASE in
	  constructor.
	- Added new iObjectModel interface. This interface represents a
	  generic way to look at some geometry in object space. This
	  is the most generic way to look at a mesh object.
	- Added iMeshObject::GetObjectModel() and added this to all
	  mesh object implementations...
	- Removed iMeshObject::GetShapeNumber(), GetRadius(),
	  GetObjectBoundingBox(), and GetWriteObject() since these are now in
	  GetObjectModel().
	- Removed iVisibilityObject::GetShapeNumber(), GetBoundingBox(),
	  and GetWriteObject(). Replaced with GetObjectModel().
	- Added a new csObjectModelManager to Dynavis. This manager is
	  responsible for managing iObjectModel instances that are registered
	  to it from the engine. The model manager will detect (using a
	  hashmap) that two different objects in the visibility system use
	  the same model and in that case be able to optimize a lot of the
	  calculations (in future the calculation of the OBB and outline
	  can be cached per model instead of per object). At this moment
	  no objects in the engine actually support sharing models yet but
	  this is planned.
	- Added new csPolygonMeshTools class in csgeom. This class will
	  contain functions to work with iPolygonMesh instances. Currently
	  it only contains the CalculateNormals() function which will calculate
	  the normals of all polygons in the mesh.
	- Optimized csPoly3D::ComputeNormal() a bit.
	- csPolyPlane contained a virtual destructor for no particular reason.
	- Polygon perspective projection was doing an additional transform
	  of the camera plane for no particular reason.
	- Implemented backface culling for writing out objects to the
	  coverage buffer in Dynavis.
	- I discovered that meshes rendered with DrawPolygonMesh were
	  still transforming all the vertices to camera space in the engine.
	  This is totally unneeded so I removed that. This should make
	  DPM meshes a little faster again.
	- Philip Wyett added #include "igeom/objmodel.h" to metagen.h
	  for CS_BBOX_NORMAL.
	- Res added msvc7gen to jobber.
	- Res did the following:
	    - Stuffed the parser functions in csutil/parser.h into a class
	      csParser.
	    - Added method csParser* GetParser() to iLoaderContext.
	    - Parse* methods in iSyntaxService require now a csParser*.
	    - Updated loaders.
20-May-2002
	- csThing now implements GetWriteObject(). Currently it will
	  just return the full detail version of the thing. A lower
	  detail version is planned.
	- Dynavis no longer uses iThingState. Instead it uses the
	  write object which is more general.
	- Removed the construct trans1 * trans2.GetInverse() with
	  trans1 / trans2 at various places in the engine and other
	  plugins. This is a considerable implementation as the
	  latter is a lot faster.
	- Philip Wyett added (but disabled until next cs mingw release)
	  "ie3ds" and "freefnt2" (Freetype 2 plugin), these libs are fully
	  supported in the release. Yes, I'm adding these as I go to keep
	  track of what is yet to support. :)
	- Philip Wyett removed Freetype 1 plugin and added Freetype 2
	  plugin to default MSVC build.
	- Norman Kramer replaced freefont with freefont2 and fixed various
	  issues related to this.
	- Res did the following changes:
	    - Changed MSVC project name to 'freefnt2'.
	    - Added command line help for win32 -[no]console.
	    - Window icon is tried to be loaded from <excutable>.ico.
	    - glwin32 supports specification of depth buffer bits through 
	      Video.OpenGL.DepthBits cfgvar.
	    - Added support for AlertV() to win32 canvases (displays a 
	      message box).
	    - g2dtest didn't set the window title.
	- Philip Wyett changed scf.cfg so original odivx plugin is default
	  again for pre 4 content. This is due to the fact it is this plugin
	  which is the only one that consistently works correctly under
	  Windows i.e.  MSVC and yes MinGW. :)
	- Philip added (but disabled until release of new cs mingw) 'csavi'
	  and 'odivx' plugins.
19-May-2002
	- Also added GetWriteObject() function to iMeshObject. The
	  same function in iVisibilityObject will pass control to the
	  GetWriteObject() of iMeshObject. Implementation note: it is
	  possible that two different mesh object instances will return
	  the same polygon mesh. In this case the visibility system
	  can use that to share shape related visibility information
	  for those different mesh objects. One way to implement
	  this from the perspective of the mesh object is to let
	  the factory be responsible for the geometry.
	- Implemented GetWriteObject() in all mesh objects. Current
	  implementation just returns NULL.
	- Implemented GetShapeNumber() in csThing mesh object. This
	  number will be incremented as soon as the geometry of
	  the thing changes.
	- Added PolyMeshHelper class for csThing and put the old
	  iPolygonMesh implementation there.
	- Moved iPolygonMesh interface from include/ivaria to include/igeom.
	- New apimod96 document.
	- Res did the following:
	    - Cleaned up mipmap code a bit:
	      Now there is only 'native' support for level 0 (blurring) and
	      level 1, level 2 and 3 generation weren't used by anything but
	      gfxtest anyway. Mipmap levels >1 are now generated by creating a
	      level 1 mipmap repeatedly. 
	    - Fixed incorrect handling of 1-row/column mipmaps.
	    - Added iImage::Sharpen() and csImageFile::Sharpen().
	    - Software and GL have now options to sharpen mipmaps.
	    - Updated gfxtest.
	- Philip Wyett did the following:
	    - Removed include to now removed "ivaria/polymesh.h"
18-May-2002
	- Fixed a bug in csCoverageBuffer::TestRectangle() with very
	  large boxes that exceed integer accuracy.
	- Extended iVisibilityObject with a GetWriteObject() function
	  which will be used to write the occlusion buffer. Currently
	  not implemented.
	- Philip Wyett did the following:
	    - Removed code files from MVSC howto zip.
	    - Removed redefinitions of ABS and SMALL_EPSILON.
	    - Enabled Minimal Rebuild "/Gm" in MSVC7 project files.
	    - Enabled Browse Information "/FR", under debug builds.
17-May-2002
	- Added csBox3::CalculatePointSegment() which calculates the
	  segment (between 0 and 27) of a point relative to the box.
	- Added csBox3::ProjectBox() which projects a 3D box to 2D
	  given a transform.
	- The Dynavis ProjectBBox routine is now replaced with the new
	  ProjectBox() function. We should look in the rest of CS to
	  see if we can replace it there too...
	- Added new blender export script (scripts/blender/csexp223.py).
	  Thanks to Yvon Tanguy <tanguy13@bst.bsf.alcatel.fr>.
	- Res did the following changes:
	    - Ambient color can now be specified in a world file's SETTINGS
	      block.
	    - Very dark lightmaps are now possible.
	    - Enhanced csLoader::ParseColor(): can now accept 1 or 3 input
	      values.
	    - Added version of csLoader::ParseColor() which returns csColor.
	    - Fixed wrong resetting of ambient color.
	    - MAXLIGHTMAPSIZE can now have either 1 or 2 parameters.
16-May-2002
	- Added a very efficient AABB/frustum intersection tester which
	  has an associated clipmask to avoid testing planes that are no
	  longer active. Thanks to Ville Miettinen from Hybrid Graphics
	  for giving this algorithm to me. The routine is
	  csIntersect3::BoxFrustum().
	- Implemented frustum culling in Dynavis with BoxFrustum().
	- Also enabled frustum culling for individual objects.
	- Added timing statistics to the debug view of Dynavis so that
	  we can see how many time is spent in the culling part versus
	  the rendering part.
	- Dynavis now implements the 'toggle_frustum' command so you can
	  toggle on/off frustum culling. The '1' key in Bugplug is
	  assigned to that command by default.
	- Dynavis now implements 'cycle_view' command so you can cycle
	  between different debug views. Currently two views are supported:
	  statistics only or statistics + outline overlay. By default
	  shift-v is assigned to this command in Bugplug.
	- Added a new view mode for cycle_view (Dynavis) which clears
	  the screen first.
	- Dynavis now implements the 'toggle_coverage' command so you can
	  toggle on/off coverage culling (not implemented yet). The '2' key
	  in Bugplug is assigned to that command by default.
	- Dynavis now implements 'clear_stats' command to clear all statistics.
	  The ctrl-v command in bugplug is assigned to that command by default.
	- Implement the first primitive and slow version of coverage culling.
	- Dynavis now implements 'dump_state' command to dump all vis
	  culling operations that happen during the next frame. This flag
	  will immediatelly be cleared again after one dump.
	  The alt-v command in bugplug is assigned to that command by default.
	- Coverage buffer in Dynavis now also supports a textual dump of
	  the current coverage tree content.
	- Fixed a bug in csCoverageBuffer::TestRectangle() which caused
	  problems with boxes partially outside the view.
	- Dynavis basically works now. However enabling it currently slows
	  down as compared to not doing visibility culling. This is
	  totally expected as the current way to update the coverage buffer
	  is VERY bad (individual polygons) and defeats the entire purpose
	  of culling. Here is where the real work starts :-)
	- Res fixed incorrect handling of lightmaps with cell size <8
	  (software renderer).
	- Res fixed visual artifacts occuring on very dark lightmaps
	  (software renderer).
	- Philip Wyett removed cfg related stuff from the unittest makefile
	  as this application has no config files and it is causing
	  make install problems.
15-May-2002
	- Fixed a bad bug in csKDTree::Front2Back().
	- Fixed a bug in the bounding box insertion in the KD-tree.
	  The bounding boxes were not transformed correctly to world space.
	- This fixes view frustum culling in Dynavis.
	- Fixed the graphical debug view of Dynavis again.
14-May-2002
	- Improved the visual debugger for Dynavis.
	- Started work on actually implementing frustum culling in Dynavis.
	- Norman Kramer changed aws: for windows he added BackgroundSubrect
	  and OverlaySubrect to specify a subrectangle of the texture to use
	  for drawing if window has fsBitmap style.
	- Wyatt Miler fixed plugin.txi.
13-May-2002
	- Fixed a bug in the csCoverageBuffer.
	- Small optimization to csCoverageBuffer::TestRectangle().
	- Added notion of parent to csKDTree nodes.
	- Using that parent I optimized csKDTree so that when moving
	  an object the object is moved upwards in the tree to the best
	  fitting node (so that it can later be distributed downwards
	  again).
	- Dynavis also supports graphical dump now (using iDebugHelper).
	- Enhanced Bugplug with two new commands: visculview and visculcmd.
	  The first command will enable/disable tracking of a visibility
	  culler in the current sector. With the second command you can
	  send commands to the specific visibility culler. By default
	  the 'v' key is assigned to 'visculview'.
	- Fixed a bug in Dynavis::RegisterVisObject(). It was not correctly
	  adding the visibility object to its internal list.
	- Implemented unfinished support for graphical dumping in
	  Dynavis.
	- Matze Braun fixed case of GL includes in OpenGL windows canvas.
	- Matze Braun added hack to walktest to solve the collision detection
	  problems. We just don't allow being in a wall after a move now.
	- Res updated some comments in the msvc7gen.mak makefile. Also
	  changed name of output directories.
	- Res did a couple of changes ot MSVC7 project file generation so the
	  projects better match their MSVC6 counterparts.
	- Res fixed a grammatical error in csloader.cpp.
	- Res changed redirection when disabling console output from
	  "debug.txt" to "<application name>.txt" (ie "walktest.txt").
	- Christian Bayle added support for HPPA and M68K in arch.sh.
	- Christian also updated the Debian scripts.
12-May-2002
	- Res fixed MSVC project file generator for version MSVC7.
	- Res also did:
	    - Couple of fixes for HTML Help support.
	    - Added new make target 'chmsupp'.
	    - Added a short text how to create documentation in HTML
	      Help format.
11-May-2002
	- Norman Kramer did the following:
	    - Removed include of strvec.h and util.h from several
	      mesh loader plugins, both were no longer needed - thanks to
	      j5t who spotted this.
	    - Added Jorrit's plugin howto from the mailing list.
	- Res added MSVC project file generator for version MSVC7.
10-May-2002
	- Matze Braun added a unix/linux section on 'howto setting CRYSTAL var'.
	- Philip Wyett updated links to ssh in the wincvs documentation.
	- Philip added ddraw.lib to it's makefile and removed refs to
	  ddraw.lib and zlib.lib from the MSVC project file templates. Now it
	  will not appear that projects like vfs.dll link with these two
	  libs. :)
9-May-2002
	- Philip Wyett added a HOWTO on creating the CRYSTAL enviroment
	  variable at the request of other CS developers as some folks don't
	  seem to know howto do it. I have done the Windows ones. Others may
	  wish to fill in the currently blank sections for Linux and Mac OSX? ;)
8-May-2002
	- Fixed a few bugs in csCoverageBuffer::TestPolygon() and
	  InsertPolygon(). Added a few additional tests to the unit tester.
	- Implemented csCoverageBuffer::TestRectangle() and added
	  extensive tests for that routine to the unit tester.
	- Implemented csCoverageBuffer::TestPoint() and added
	  extensive tests for that routine to the unit tester.
	- The Dynavis now implements VERY basic visibility culling.
	  It used the kdtree for traversal and will cull octree nodes
	  against the view frustum. But that's all for now. This is also
	  untested.
	- Added new CULLERP command in a sector. With this command you can
	  associate to a sector a visibility culler from a plugin instead
	  of from a mesh (with the CULLER command).
7-May-2002
	- Implemented csKDTree::RemoveObject().
	- Added lazy obj_bbox calculation in csKDTree. This is useful
	  so that we don't immediatelly have to recalculate the
	  obj_bbox when objects are removed.
	- Fixed a bad bug in the existing low-level csKDTree::RemoveObject().
	- Implemented an efficient csKDTree::MoveObject(). This function
	  only does RemoveObject/AddObject if it cannot resolve the move
	  more efficiently (by checking if it remains in the current
	  leafs after moving).
	- Changed the meaning of obj_bbox (and csKDTree::GetObjectBBox()).
	  It now represents only the bounding box of all objects in this
	  node and not the children.
	- Added csDepthBuffer class to the Dynavis plugin. This will
	  implement the depth buffer. The Dynavis unit tester will also
	  call UnitTest on the depth buffer. The depth buffer is not
	  yet functional though.
	- Added csCoverageBuffer class to the Dynavis plugin. This is a
	  full copy of the current csXORBuffer which is in the engine.
	  In addition the csCoverageBuffer will also maintain a maximum
	  depth value for every 8x8 pixels.
	  This will replace the csDepthBuffer that hasn't even been
	  finished yet :-)
	- Removed csDepthBuffer class again. csCoverageBuffer is not finished
	  yet.
6-May-2002
	- Added csBox2::SetMin/SetMax and csBox3::SetMin/SetMax functions.
	- Renamed csKDTree::tree_bbox to obj_bbox and added a node_bbox
	  member too. So now for every node we have a bounding box of
	  all objects that are in the node (this bbox may exceed actual
	  node dimensions because objects are not clipped by the tree),
	  and we also have a bounding box of the node itself which is
	  made by cutting an infinite box at the root with all the axis
	  planes during tree creation.
	- Fixed the comment with csIntersect3::BoxSegment().
	- Added csGeomDebugHelper class in csgeom library. This class
	  implements iDebugHelper and is responsible for unit testing in
	  the csgeom library. Unittest app will also call UnitTest() on it.
	  Currently this unit tester only contains a few tests for
	  csIntersect3::BoxSegment().
	- Fixed a bad bug in the csKDTree again. In some cases it would
	  generate an infinite tree (memory allowing :-)
	- Added more extensive unit testing for Front2Back() in csKDTree
	  implementation. Now UnitTest() tries to test that Front2Back()
	  is really front 2 back.
	- Implemented Benchmark() in iDebugHelper implementation
	  of csKDTree and Dynavis plugin.
	- Norman Kramer did the following to AWS:
	    - Update AWS documentation (added doc for notebook, ...).
	    - Added stylesheet to convert designer 2.0 output (from QT3)
	      to aws.
	    - Changed the property values for barcharts framestyle slightly
	      bcsXXX now is bcfsXXX. This brings naming in line with other
	      controls framestyle values.
	    - Added the wrong qt3aws xsl file and even there I included
	      another bug :)
	    - Added comment on when to use qt2aws.xsl and qt3aws.xsl.
5-May-2002
	- Matze Braun fixed a mistmatching new/free in moddata.h.
	- Matze changed Normans name a bit to make my xslt processor more
	  happy. Probably the correct fix would be choosing the right
	  language but I have no idea how to do that.
	- Norman Kramer did the following to AWS:
	    - Added description for awsImageView, awsMultilineEdit,
	      awsScrollBar, awsTextBox. Extended description of the other
	      controls.
	    - Two methods were void but still tried to return the value of
	      another void method, which some compilers seem to dislike a bit.
	    - Prefixed all attributes with 'me'.
	    - Added QTextView translation to Multiline Edit.
4-May-2002
	- Norman Kramer did the following to AWS:
	    - Added a multi-line edit control for AWS.
	    - Added two new actions to multi line edit control: GetText
	      and SetText.
	    - Removed a few structures from awsmled.h which were meant for
	      another control.
3-May-2002
	- Implemented delayed processing in the KD-tree. This means that
	  when objects are added they are not automatically distributed
	  to lower levels then. This happens later when really needed. This
	  greatly increases efficiency of the generated tree as more
	  information is available at the time you really want the tree
	  to be generated. It is also more optimal as tree generation
	  will be done less and more gradually as needed.
	- Added a way to print statistics of the generated tree in
	  the textual dump of the KD-tree.
	- Extended the UnitTest() function of the KD-tree to print
	  statistics about various stages of the process.
	- Made adding objects to a KD-tree node more efficient by
	  increasing growth rate of internal vector for storing objects.
	- Uses 'int' instead of 'float' for calculating quality for the
	  KD-tree splitting algorithm.
	- Implemented Front2Back() traversal of the tree.
	- Matze Braun fixed compile error on ia64 (ensocket).
	- Matze also fixed a wrong delete in oss sound driver.
	- Matze fixed uninitialized memory reported by valgrind.
	- Matze did some preparation for my oss driver fix: removed some
	  unneeded global variables.
2-May-2002
	- Removed a warning in win32.cpp.
	- Enabled console in debug mode again for Windows. I think that
	  when you are debugging you certainly want to have that console.
	- Added iDebugHelper implementation of Dynavis plugin.
	- Added new csKDTree class to the Dynavis plugin. This class will
	  manage the geometrical distribution of objects in 3D space.
	  At this moment the class only supports adding objects. It will
	  not try to reorganize the tree if the quality of the tree starts
	  degrading.
	- Added UnitTest() implementation of csKDTree for the current
	  supported operations.
	- csKDTree also supports textual dump and state test. Also
	  changed Dynavis plugin to prepare for the situation in the future
	  where it will delegate textual dump and state test to the
	  csKDTree instance it is maintaining.
	- Christian Bayle added comments in package description of Debian
	  scripts.
1-May-2002
	- Philip Wyett changed MAX_SCANCODE so it can at least read Num Lock
	  out 0x5a (90). Removed Jorrits temp fix. Apps should now not
	  crash when built with MingW which was the only way I could
	  reproduce the bug. Note: Some work needs to be done with keys and
	  remapping under Windows as there are some Virtual Key issues which
          not harmful but need addressing.
	- Philip did some fixes to win32.cpp.
	- Res added quotes around textures and filenames in world file
	  (map2cs).
30-Apr-2002
	- Added a new iDebugHelper interface in iutil. This interface defines
	  a consistant interface for debugging CS modules. It has the following
	  features (all features are optional so some module doesn't have
	  to implement them all):
	    - Unit testing: this is basically an extensive test of the module
	      to ensure it is working properly.
	    - State testing: this is a consistency check that can be used
	      at run-time to ensure the current state of the object is
	      consistent.
	    - Benchmark: runs a benchmark for this module.
	    - Text dump: allows for a text-based dump of the internal
	      state of the object.
	    - Graphical dump: allows for a single-frame graphical dump
	      of the internal state of the object.
	    - Sending specific debug commands to a module. This way a
	      module can implement additional commands (string based) to
	      enable or otherwise perform additional debugging operations.
	- Implemented iDebugHelper in csXORBuffer. The debug helper of
	  csXORBuffer implements unit testing, benchmarking, and
	  graphical dump.
	- Cleaned up the unittest application a bit. It also uses the
	  new iDebugHelper interface now.
	- The unit tester is already useful. It showed a bug with certain
	  kinds of polygons in the XOR buffer. Fixed now.
	- Fixed a crash bug in the XOR buffer with polygons that are
	  completely out of bounds of the buffer.
	- Modified the engine to implement iDebugHelper and removed
	  the ad-hoc iEngine::DebugCommand(). The debug helper of the engine
	  currently only supports DebugCommand() though.
	- Fixed BugPlug for the DebugCommand() change in the engine.
	- Added new 'enginestate' command to BugPlug. This will call the
	  iDebugHelper::StateTest() function of the engine and report
	  the results. Assigned shift-e to this command by default.
	- Applied a patch from Peter Amstutz <amstutz@cs.umass.edu> so that
	  the 3DS importer correctly honors the double-sided triangle flag.
	  In that case the CS model will have double triangles (one for
	  every side).
	- Thanks to the debugging help of Toni Asco Gonzalez I managed to fix
	  a rather big bug in the lighting routines (more specifically
	  in iSector::CheckFrustum()). The problem was csShadowIterator
	  which is supposed to iterate over all shadows. Every seperate thing
	  will cause a seperate shadow block in the shadow list. The
	  shadow iterator will iterate over these shadows in the shadow block
	  list. To do that it will internally iterate over shadow blocks.
	  However it could happen that a block containing no shadows
	  got added to the shadow list. The iterator would fail in this case
	  because it would stop processing further shadow blocks.
	- Fixed a bad bug in the Windows key processing routines. Pressing
	  numpad keys (most frequently '7') could cause CS to crash
	  horribly. This happens in ALL CS apps. At this moment I only
	  avoided the crash by adding a test for this but I'm not sure if
	  this is the good patch actually. The problem is at line 781 of
	  libs/cssys/win32/win32.cpp.
	- Added empty skeleton of the new 'dynavis' plugin. This plugin
	  will contain the implementation of the new dynamic visibility
	  system.
	- Fixed CS_DBGHELP_UNITTTEST and removed one 'T' :-)
	- unittest app will also call UnitTest() on engine (not supported
	  right now) and new dynavis plugin (also not supported).
	- Philip Wyett reports:
	    - Debug console now not shown by default in MSVC debug builds. To
	      see debug console use "-console" commandline switch. You will
	      now notice if you do this from the commandline i.e. "command"
	      or "cmd" output will be now fed back to the calling console and
	      not generate a new console window anymore.
	    - Now use only use "appcon" in makefiles for "DSP.APP_NAME.TYPE = ".
	      Use of "appgui" is now deprecated for MSVC project files.
	      Note: "appgui" "appcon" should be removed from MVSC project file
	      generation and replaced with just "app" as a generic option.
	    - Manually modified MSVC project files.
	    - Updated MSVC external project HOWTO.
	  It is advised MSVC do a clean build after updating from cvs.
29-Apr-2002
	- Eric Sunshine renamed OSXDelegate2D_CGBLit.h to
	  OSXDelegate2D_CGBlit.h (notice the case distinction) so that #include
	  "OSXDelegate2D_CGBlit.h" will work correctly on UFS filesystems which
	  are case-sensitive.  (This was not an issue for HFS+ filesystems
	  since they are case-insensitive.)
28-Apr-2002
	- Fixed another initialization bug in the OpenGL renderer found
	  by valgrind.
	- Fixed an initialization bug in csThing::IntersectSegmentFull()
	  which could cause crashes with a bit of bad luck.
	- Norman Kamer added Robs patch for unbreaking unlooped streamed sound.
27-Apr-2002
	- Worked around a bug in the mipmapping code in csImage. When
	  mipmapping is called for one dimension equal to 1 the routine
	  reads to unallocated memory. I don't really understand
	  mipmap.inc very well so I currently just worked around this
	  bug. This needs more investigation. Thanks to Matze's valgrind
	  debugging for discovering this bug.
	- Fixed a few bugs in the OpenGL renderer where some queue variables
	  were not initialized. Thanks to Matze's valgrind debugging
	  for discovering this bug.
	- Philip Wyett fixed unittest MSVC project file. This file was being
	  generated into a Win32 GUI app rather than the correct Win32 Console
	  app.
	- Philip changed links which pointed to old "linuxgames.com" site and
	  pointed them to the new homepage at SourceForge (SF).
	  Thanks to Jim Sager for spotting this error in the docs.
26-Apr-2002
	- Fixed a bad bug in the XOR buffer which could cause memory
	  overwrites. A nice side effect of fixing this bug is that it is
	  now also more optimal :-)
	- Fixed another bug in the XOR buffer.
	- Added a csXORBuffer::Debug_UnitTest() function which tries to do
	  a full test of the XOR buffer to see that it is working to
	  expectations.
	- Added a new 'unittest' application. The purpose of this application
	  is to contain tests that are useful to be repeated at any time
	  in the future too. i.e. these tests serve to test importants
	  part of CS. If a test ever fails something went wrong so we can
	  quickly detect that. At this moment this test program is non
	  graphical and only calls csXORBuffer::Debug_UnitTest().
	- Added a few more test to csXORBuffer::Debug_UnitTest().
	- Again improved performance of the XOR buffer by only clearing
	  the part of the polygon buffer that will actually be needed.
	  This optimization brings the performance of the XOR buffer
	  rather close to the c-buffer now.
	- Modified 3ds2lev so that the triangle combiner is more robust.
	  It now detects better if two triangles are on same plane
	  and also checks if resulting polygon is convex.
	- Philip Wyett fixed a bug in awstex.h: changed the second 'key_r'
	  value to 'key_b'.
	- Matze Braun added a new option to 3ds2lev that let's you choose
	  between nice looking and fast loading maps.
25-Apr-2002
	- Removed the 'togglecull' and 'togglexor' commands from BugPlug.
	  Instead added the ability to have arguments with bugplug commands
	  and added the more general 'enginecmd' command. The first argument
	  after 'enginecmd' will be given to engine->DebugCommand().
	  In data/config/bugplug.cfg defined x as 'enginecmd toggle_xorbuf'
	  and ctrl-c as 'enginecmd toggle_cullstat'.
	- 'toggle_cullstat' will now show the percentage of the complete
	  octree bounding box that is visible.
	- Extended XOR buffer so it will now make inserted polygons a little
	  bit wider while tested polygons are original size. This increases
	  chance of good culling.
	- XOR buffer will now also correctly render the last row of the
	  polygon. It was not doing that before which caused visibility
	  culling to ignore many good opportunities.
	- Optimized the XOR buffer to use the 2D bounding box of the polygon
	  for doing the XOR sweep. This gives a big boost in speed. Still
	  slower compared to c-buffer.
	- Norman Kramer did the following to aws:
	    - Added "Image" key to imageview, which has a vfs path to an image
	      as argument.
	    - Added "KeyColor" key to imageview, which defines a key color
	      for the "Image"
	    - Added fsScaled, fsTiled and fsFixed as styles to imageview,
	      which define if the image is scaled,tiled or at its fixed size
	      inside the imageview.
	    - Extended the bison file to make components aware of RGB entries.
	    - Added GetTexture (..., r,g,b) to iAwsPrefManager that
	      additionally gives keycolors.
24-Apr-2002
	- Norman disabled output of 'Texture: ""' for the pixmap button since
	  the path isnt stored in the ui file (theres the actual bitmap data
	  stored instead. To get the name of the texture in the output write
	  'l:Texture: "blah"' in the whatsThis property.
	- Norman added awsImageView to the registration of common components.
	  Doh, and i was wondering why it never showed up.
23-Apr-2002
	- Fixed parsing of FILE keyword in texture parsing so it also
	  works with quotes.
	- csScanStr() also accepts '-' for %s now (if no quotes are given).
	- Continued work on XOR buffer. It now seems to work properly.
	  I added several debugging utilities. One of those is
	  Debug_ExtensiveTest() which randomly generates triangles and fills
	  them in the XOR buffer. It then checks if the resulting buffer
	  has values in the last column. If all goes well this should never
	  happen unless the polygon drawer has leaks. After 10000000 random
	  triangles it failed to find a single leak.
	  So csXORBuffer::DrawPolygon() now correctly implements polygon
	  drawing in both directions (clockwise/anti-clockwise) and clipping.
	  There is still much room for optimization. I will first get things
	  working.
	- Implemented InsertPolygon() and TestPolygon() in XOR buffer.
	- Started supporting XOR buffer in engine. Now we'll be able to test
	  performance and see if the XOR buffer is a suitable replacement
	  for the c-buffer.
	- Added iEngine::DebugCommand(). With this new method debugging
	  commands can be performed in the engine. BugPlug can use this to
	  perform certain debug options. At this moment the only supported
	  command is 'toggle_xorbuf' which will toggle between c-buffer
	  and XOR buffer.
	- Bugplug now supports new 'togglexor' command (by default assigned
	  to 'x' key).
	- First performance results indicate that the c-buffer is still
	  a lot faster. However, there is still considerable room for
	  optimizations in the XOR buffer. Also keep in mind that even if
	  the XOR buffer turns out to be slower I still will need it for
	  the real dynamic PVS algorithms because the c-buffer cannot
	  cope with non-convex outlines.
	- Added support for printing out culling efficiency (polygons,
	  nodes, and objects). Only enabled in debug mode.
	- Added 'toggle_cullstat' command (for iEngine::DebugCommand())
	  to toggle the printing of this culling statistics.
	- Added new 'togglecull' command to bugplug which will execute
	  the toggle_cullstat command. Assigned to ctrl-c key.
	- Added csXORBuffer::IsFull() which checks if the entire screen
	  buffer is full and nothing can be visible now. Always returns
	  false at the moment.
	- Implemented csXORBuffer::IsFull(). Also added an optimization
	  to ignore completely full rows in InsertPolygon() and TestPolygon().
	  This significantly improves performance of the XOR buffer but
	  still not as good as the c-buffer.
	- Matze Braun fixed 3ds2lev, it wasn't putting '' around
	  texturefilenames which leaded to corrupted maps if the filename
	  contained special chars.
	- Norman Kramer added a param member to awsListItem. Here you can
	  store additional information you do not want to display but connect
	  with that item like record ids for instance or pointers etc. You
	  transfer them via the param%d entries in the awsParmList.
22-Apr-2002
	- Norman Kramer did the following for aws:
	    - Removed the implementation of awsEmbeddedComponents HandleEvent
	      and replaced it with a call to the embedded components
	      HandleEvent. If you build a new control from ground up using
	      this embedding component technique you can now look up the
	      component factory of awsComponent and that you let create an
	      awsComponent which you can embedd (this implements exactly the
	      HandleEvent which was implemented here before).
	    - Filled the formerly empty Create method of awsComponentFactory
	      to create an awsComponent.
	    - Registered the awsComponentFactory with awsManager.
	    - Ok, so calling the handleevent of the embedded component was
	      a stupid move, why does nobody complain ? :)
	      Put back in the original plus the handling of OnFrameStart as
	      an "excuse me".
21-Apr-2002
	- Norman Kramer did the following for aws:
	    - Aws listbox: the already present 'selectable' property of
	      listrows is now respected when rows are selected.
	    - Added support for declaring use of your own aws controls.
	    - Added documentation on how to use your own control classes
	      and still laying them out in QT designer.
	    - Moved the class type modifier from the tooltip/comment into
	      whatsThis property where the connect and literal special effects
	      already are. Class type token identifier is 't'.
	    - On Initialization the embedded component is now IncRef'ed since
	      it's DecRef'ed at destruction (only decref what you incref).
	    - Added all the missing methods since iAwsComponent has changed a
	      lot.
	    - Made the wmgr in the factory protected, so subclasses can use it.
	    - Removed the pure virtualization of the OnBlah methods and added
	      default implementations (calling the method on the embedded
	      component) - this makes it easy for instance to embedd an
	      awsLabel object in your instance of a derived class of
	      awsEmbeddedComponent and just override the methods you need.
20-Apr-2002
	- Norman Kramer did the following for aws:
	    - Fixes for awsListBox:
		- GetSelectedItem now checks if theres any selected item
		  at all .
		- DeleteItem updates selection if the deleted item was also
		  the selected one.
		- DoFindItem now looks up the iString with FindKey, previously
		  the call to Find compared the iString with a awsListRow.
	    - awsListRowVector:
		- The Compare and CompareKey methods now call strcmp instead
		  of iString::Compare, because iString::Compare returns a
		  bool (if they were not equal false would be returned and
		  with false defined as 0, the "not equal" would be
		  reinterpreted as equal for the csVector's Find algorithm).
	    - Added signals for windows being Zoomed, Minimized, Closed and
	      the broadcasting of these signals.
	    - Added GetItems method to aws listbox for requesting selected
	      data from a specific row. This is now used by GetSelectedItem
	      and a new GetItem method.
19-Apr-2002
	- Philip Wyett temporarily removed the use of precompiled headers
	  for MSVC compile.
18-Apr-2002
	- Norman Kramer reports: components received mouseentry/exit messages
	  even if they was deaf. this caused the problems with controls in
	  notebook pages (for instance buttons never broadcasted
	  signalCmdButtonClicked signals) (aws).
17-Apr-2002
	- Started working on new XOR buffer which *might* (if all goes
	  well) replace the c-buffer. Nothing functional yet though.
	- Continued the work. The basic polygon filler (based on XOR
	  fill) appears to work now.
	- Philip Wyett updated the ensocket plugin with patches from Erik
	  Namtvedt (removed Set(), added doxygen comments, general cleanup).
16-Apr-2002
	- Minor fix to inet.h: friend csNetworkSocket2 is now
	  'friend class csNetworkSocket2'.
	- Christian Bayle fixed a stupid mistake in the Debian scripts.
	- Norman Kramer says: Richard Liu reported compilation failure
	  since solaris has munmap declared slightly different. I added
	  #ifdef OS_SOLARIS to get around that (mmiounix.h).
	- Philip Wyett added LGPL copyrights and did some minor code
	  cleaning (ensocket plugin).
15-Apr-2002
	- Disabled the use of DrawPolygonMultiTexture() in OpenGL renderer
	  even if multi-texture is enabled. DrawPolygonMultiTexture() is
	  obsolete and cannot correctly support super lightmaps. It should
	  never be used. I leave the code in cvs for now as a reference
	  for future multi-texture implementations.
	- Enabled multi-texture again in GeForce specific OpenGL configuration.
	- Removed the fix in csTextureTrans::compute_texture_space() I added
	  yesterday. Instead uses __volatile__ keyword with the asm
	  statements for qsqrt() and qisqrt(). This forces the compiler to
	  keep the code intact which seems to avoid the bug with
	  qisqrt() reported yesterday. I also did a small benchmark to see
	  if adding __volatile__ has a bad effect and I didn't notice an
	  obvious speed decrease. Thanks to Matt Reda for suggesting
	  the __volatile__ keyword.
	- Norman Kramer replaced two new occurences of static csClipInfo
	  blah[100] with the CS_STATIC_* macros and magically it does no
	  longer segfault at exit in walktest (OpenGL renderer).
	- Christopher Nelson added GetError() for awsSink so that you can
	  tell if the last operation caused an error. Also updated
	  definitions with new error codes and added GetError() to the
	  interface.
	- Matt Reda added __volatile__ to PowerPC asm stuff and changed
	  asm to __asm__.
14-Apr-2002
	- In one version of csTextureTrans::compute_texture_space()
	  there were two calls to qisqrt() (equivalent to 1/sqrt()).
	  With gcc 2.96 on linux and optimize -O2 compile the second
	  qisqrt() would fail unless the first one is replaced with
	  1/qsqrt() (debug mode and -O are fine). I have no idea
	  why this is. For now I just replaced the first qisqrt()
	  with 1/qsqrt() but this needs further investigation.
	- Philip Wyett improved MSVC memcpy replacement to handle 'short'
	  more efficiently.
	- Philip also eliminated some minor MSVC compiler warnings in
	  3ds2lev.
	- Matze Braun updated 3ds2lev so that it doesn't crash anymore
	  for empty objects and outputs starting points.
	- Res did the following:
	    - Lightmap mean lighting now includes pseudo-dynamic lights.
	    - OpenGL: translucent polygons are lit by dynamic lights in
	      single-texture mode.
	- Christian Bayle changed size_t in socklen_t (for inet.h) to
	  allow compile on ia64 and s390.
	- Christian also did some changes to the debian files.
	- Norman Kramer fixed aws: lookup for window definition looped
	  forever if def is not present. The double linked list is a
	  circular list.
13-Apr-2002
	- Reverted my csconfig fix again. It fails to generate a correct
	  csconfig file.
	- Philip Wyett fixed bug in win32 GL canvas. Our canvas was not being
	  set topmost, which allowed the desktop/taskbar to leak through and
	  become viewable while GL test were being performed and making things
	  look not too good at all.
	- Res changed OpenGL windows canvas to only set topmost in
	  fullscreen mode.
	- Matze Braun updated todo_1.0.txt.
	- Philip Wyett did the following for OpenGL windows canvas:
	    - Reorganized how/where window styles are handled.
	    - Also cleaned up the code a bit. Bringing it back into line with
	      CS coding standard.
12-Apr-2002
	- Added a fix to 'make csconfig' so that it also works on Win98
	  now. The problem was that redirecting to out/csconfig.tmp works
	  on Win2K and higher but not on Win98 (forward slashes).
	- Fixed a small waste of memory in an internal array of the
	  OpenGL renderer.
	- Philip Wyett fixed ensocket plugin so that it compiles with Win32
	  GCC.
	- Res added a comment about GetArray() in garray.h.
	- Res additionally made some OpenGL related changes:
	    - Disabled multitexturing in glnvgf.cfg.
	    - Fixed garbled metablobs.
	    - Fixed some transparency issues.
	    - A couple of visual errors w/ multitexturing magically
	      disappeared after adding a 'glEnable (GL_TEXTURE_2D)' ...
	    - Queues are flushed before drawing a multitex'ed poly; eliminates
	      some errors, too.
	- Res also fixed software renderer to avoid unwanted holes on
	  keycolored textures and dark lightmap.
11-Apr-2002
	- Replaced /bin/sh to sh in the csconf.mak makefile. Many mingw
	  installations don't have /bin/sh. So using 'sh' is preferable.
	- Reverted my change above. It is not THAT easy.
	- Philip Wyett added "ensocket" network plugin, docs and test
	  app submitted by Erik Namtvedt.
		This is a System independent network driver. This driver
		implements a tcp/ip networking interface. The network driver
		and socket driver currently support BSD compliant calls.
	  Note: Some operating systems may not support all the functions of
	  this plugin.
	- Norman fixed the net ensocket plugin a bit.
	- Philip fixed an 8.3 filename issue pointed out by Norman.
	- Res did the following on Map2CS:
	    - Added "png" to the list of extensions searched in zips.
	    - Default RENDERPRIORITIES() are written to world.
	    - Added facility to set a thing's priority: add an entity
	      property "priority", value: <renderpriority>
	    - Added facility to manually specify files for texures: add a
	      map property "filename_<texture>", value: <vfs path>
	    - When a texture from a wad3 has a name starting with '{' its
	      keycolor is set to blue.
	- Res also modified flarge:
	    - Added two 2d sprites, one with alpha transparency.
	    - Added alpha transparency snow.
	- Res made some changes to OpenGL windows canvas. SetMouseCursor()
	  now uses iWin32Assistant's SetCursor() (like ddraw dir). This
	  fixes the 'always visible mouse cursor' issue in gl. Res then
	  updated walktest so that mouse cursor is hidden in freelook mode.
	- Norman replaced stricmp with strcasecmp.
	- Norman renamed nettut target to netut to avoid circular makefile
	  dependency on unix/linux.
	- Christian Bayle modified arch.sh to add support for s390.
	- Christian did some changes to the debian files.
	- Norman Kramer indented the netut, joylins, ensocket, freefnt2, and
	  odivx4 helplines in the makefile.
10-Apr-2002
	- Philip Wyett fixed a compile error under CodeWarrior 5 for
	  awsscrbr.h.
9-Apr-2002
	- Toni did some modifications to allow DrawPolygonMesh (OpenGL version)
	  to render non-lit meshes.
	- Res tweaked displaying of keycolored textures a bit in OpenGL
	  renderer.
	- Res also did:
	    - Maximum lightmap size can be changed by user.
	    - Added iEngine::ResetWorldSpecificSettings() which reset a subset
	      of flags/settings (which may differ from one world/map to
	      another) to its defaults.
	    - Added functions to get default values for above subset of
	      flags/settings.
	    - When loading a map:
		- Engine->ResetWorldSpecificSettings() is called.
		- map.cfg isn't read any more.
		- Added to SETTINGS():
		    - LIGHTMAPCELLSIZE
		    - MAXLIGHTMAPSIZE
	- Norman Kramer fixed scrollbar knob size calculation in AWS. Also
	  the value of the knob now is between 0 and max-amntvis.
	- Norman removed setting of max value for scrollbar from the listbox'
	  OnDraw method - scrollbars idea of Max value is the count of items,
	  not the Max value its "value" member can have - this is something I
	  could clear later on :)
	- Matze Braun added an != operator to csString.
8-Apr-2002
	- Release of CS 0.94.
	- Philip Wyett updated links to latest 0.94 msvc_libs.
	- Res did the following change:
	  lightmap size check, once more:
	    - Lightmap size can not exceed a (for now) hardcoded limit of
	      256x256. If it does, lighting is disabled for the poly.
	    - Renderer is asked if it can handle this lightmap. if not,
	      poly will be rendered unlit, but lighting is still calculated.
	    - In both cases, notifications are emitted as well.
	- Christopher Nelson fixed awsecomp.h so that it is valid again.
	  Also made some fixes to support the awsecomp.h update.
7-Apr-2002
	- Norman Kramer fixed OpenGL renderer because
	  clipped_lightmap_fog_texel was accessed wrong.
	- Philip Wyett added MSVC #pragma to remove warning C4390 on
	  DEBUG_BREAK. Also added newer msvc_libs files to cvsignore.
	- Philip also updated AWS documentation as follows:
	  Removed aws->SetDefaultContext(engine, myG3D->GetTextureManager());
	  and replaced with the correct canvas creation code, which I cannot
	  be bothered nor have the time to list. :)
	  Thanks to "vrm" from #CrystalSpace for reporting the error this
	  problem created.
5-Apr-2002
	- Andon M. Coleman patched 3ds2lev so it works correctly for
	  non-texture mapped 3DS objects.
4-Apr-2002
	- Cleaned up lots of engine/csgeom comments.
	- Removed lots of exit() calls from all over CS. A module in CS
	  should almost never do exit but instead return an appropriate
	  error to the caller (using the reporter and a return code for
	  example).
	- Philip Wyett did the following:
	    - Fixed precedance under MSVC (lexan.cpp).
	    - Phyztest: Removed Text which prompts for <ENTER> to add an
	      Impulse Spring object as the object does not exist.
	    - Phyztest: Changed <DEL> to <DELETE> in text for adding chain
	      object. It is not the num pad <DEL> which creates the object and
	      was confusing. Well it initially confused me anyway. :)
	    - Code format cleanup in demosky.cpp.
3-Apr-2002
	- Added a texture-less material (green_color) to flarge so that
	  we can easily see if this still works or not. The skeletal
	  spiny tree uses this color.
	- Implemented caching of sprite normals (using SMOOTH()) option.
	  This greatly speeds up load time of a sprite when the cached
	  data is present.
	- 'res' fixed a bug in the OpenGL renderer where sometimes
	  textures where multiplied with texture mean color. This caused
	  color seams.
2-Apr-2002
	- Eric Sunshine fixed a problem which caused a host of HTML pages in
	  the user manual to be blank.  The culprit was a missing closing brace
	  '}' for an @emph directive in msdos.txi.
	- Eric Sunshine fixed formatting of the help message for memory.mak and
	  isoload.mak.
	- Eric Sunshine fixed chkogl.sh so that it no longer yells at people if
	  they don't have OpenGL installed.  There is no valid reason for
	  yelling at and confusing people just because an optional component is
	  absent.
	- Fixed curved surfaces so that they render again after Norman
	  removed the call to GetBezierCache().
	- Eric Sunshine eliminated several overfull and underfull `hbox'
	  warnings reported by TeX for msdos.txi and qtaws.txi.
	- Temporarily disabled the experimental quaddiv in the landscape
	  engine again because there seem to be some problems with it.
	- Changed csBezier2 constructor to a static 'Initialize()' function.
	- MD5 name generation for lightmaps/cache now uses the name
	  of the mesh wrapper and containing sector to guarantee more
	  uniqueness. Previously the name of the csThing itself was used
	  but this is almost always NULL.
	- Fixed description of -n in 3ds2lev so it is now correct.
	- Optimized the MergeNormals() code of 3D sprites (SMOOTH option).
	- Wouter Wijngaards added a ReplaceAge() function in the
	  emitter particle system API.
31-Mar-2002
	- Christian Bayle added $MACHINE error message for not found arch.
30-Mar-2002
	- Matze Braun fixed a bug that prevented going to edit mode in
	  csdemo...
	- Norman Kramer did the following:
	    - Fixed a crasher - in DrawPolygonSingleTexture was a case
	      where lm_queue was not checked to own the data (reproducable
	      crasher by running few times through the fountain in flarge).
	    - Removed a printf ("dang\n") in gl extensions detection routine.
	    - Fixed destruction of csSuperLightMap.
29-Mar-2002
	- Norman Kramer reports: csEmitFixed now exposes the implemented
	  iEmitFixed interface, hinted by Florian Vielhauer <FloViel@web.de>.
	- Norman extended the static variable declaration macros with an
	  _ARRAY version that differs in the destruction process only (that
	  caused the opengl renderer to crash at exit - at least this was one
	  reason).
	- Norman extended OpenGL renderer so it uses the new _ARRAY static
	  var declaration macro.
	- Norman fixed several warnings in the OpenGL renderer.
	- Wouter Wijngaards reports: Optimized terrfunc quaddiv tree drawing;
	  for me it is now more than twice as fast as it was. It is still
	  slower than the terrfunc original, as it does not cache the normals
	  generated.
	- Wouter also reports: This commit has quaddiv_enabled=true; so that
	  the new quadtree based terrain LOD is enabled by default. The FPS
	  is now the same as the fps with it disabled, for me.
	- Philip Wyett reports:
	  Fixed Windows Procedure callbacks which were causing initial
	  crasher of simpvs under Windows. The Window(s) will now
	  successfully create however there are still many issues to be
	  resolved i.e.
	    - Two windows - No destruction of parent.
	    - GL not rendering textures corectly under simpvs under Windows.
	    - Linux lockup issues.
	  Work is progressing... ;)
28-Mar-2002
	- Reverted part of 'res' changes to the lightmap checker because
	  they cause big problems.
	- Toni Asco Gonzalez commited a big patch to a new version of
	  DrawPolygonMesh for OpenGL:
	  To use DrawPolygonMesh just type FASTMESH() inside PARAMS section
	  of a thing. This will use a faster way to render a thing. This
	  optimization is especially good for high polygon models that
	  are not too big (in 3D dimensions). At this moment it is not
	  possible to combine FASTMESH() with VISTREE(). i.e. the thing
	  that is responsible for visibility culling cannot use FASTMESH().
	  Keep in mind also that clipping these objects is expensive. That's
	  why they should be as small as possible (but with high number
	  of polygons).
	  Another limitation is that FASTMESH() currently only works on
	  lit objects (i.e. with lightmaps).
	- Fixed the software version of DrawPolygonMesh() so it correctly
	  sets do_fullbright to false before calling DrawPolygon. This
	  bug would cause the stairs in flarge sometimes to be full
	  bright.
	- Applied a patch from Loic Dachary for improved diagnostics
	  when loading plugins (findlib.cpp).
	- Norman Kramer updated Dos port again. Also updated build
	  instructions.
27-Mar-2002
	- Preparation for release 0.94. Updated version numbers.
	- Norman Kramer reports: awsSource and awsSlot were never
	  SCF_CONSTRUCT'ed. This caused the crash in awsTimer for
	  instance (by clicking the scrollbar handle twice).
	- Norman Kramer reports: slparse.cpp.h is now named slp.hpp. This is
	  because on dos slparse.cpp.h would be too long and not valid due to
	  the two "." in the filename. Beside this djgpp version of bison
	  creates a .hpp file. If you have a better idea how to come around
	  this (some magic bison options ?) let me know.
	- Norman removed debug output from awsTimer.
	- Norman added djgpp versions for csGetTicks and csSleep.
	- Norman fixed the embedded eventhandler in the djgpp port so that
	  it is now constructed. simple1 and simpcd work now compiled
	  in static mode.
	- 'res' fixed crash bug when relighting polygons with lightmaps
	  the renderer can't handle.
	- 'res' also made sure that lighting for a polygon is always
	  calculated even if the renderer can't handle the lightmap.
	- 'res' fixed an infinite recursion in null2d canvas.
	- Matze fixed 3ds2lev optimization so it works better now.
26-Mar-2002
	- Matze added a farplane command to walktest. This command set's a
	  farplane to the camera (surprise, surprise).
	- Norman Kramer renamed multiplex to iplex due to filename limits.
25-Mar-2002
	- Matze Braun let the parser return -1 for now. This is still
	  better than bogus values.
	- Matze changed lib loading to display errors returned by the OS
	  again.
	- Christian Bayle did various changes to the Debian scripts.
24-Mar-2002
	- Matze checked in some of his 3ds2lev changes in, the face
	  optimisation is disabled by default because it still fails on
	  some levels... I hope I can find the bug that causes this soon...
	- Matze made the syntax loader outputting the name of the polygon in
	  error cases...  The real problem I have here is that the line
	  numbers are totally wrong because the parser keeps them as a static
	  variable (that isn't shared cross plugins of course), so the real
	  solution is to rewrite the parser as an object (and eventually add
	  support for compiled tokens to it to make it faster...).
	- Matze did a very small optimization for key parsing (suggested
	  by Vengeance <keith@paqrat.com>).
	- Norman Kramer did the following:
	    - The 'relevant' member in csShadowFrustum was used
	      uninitialized.
	    - 'lighted_particles' in fountain was used uninitialized.
	    - csHazeLayers were not freed.
	    - Closed leak in debug.cpp.
	    - csSprite3DMeshObject's lod_level_config was used uninitialized
	      and is now set to its factory value when SetFactory() is
	      called.
	    - Metaballs num_mesh_vertices was used uninitialized.
	    - csSkelLimbStates 'name' was not freed at destruction.
	    - 'output_connectors' in gtreeldr.cpp was destructed in the
	      constructor. I just moved it into the destructor.
	    - Software renderer protex3d.cpp: decref'ed image used for
	      palette synchronization.
	    - simplept: added missing decref of the image used for the proc
	      texture.
	    - Set cam_move_src in blocks to 0,0,0. It was used uninitialized.
	    - csCommandLineOptionVector did not free its content at
	      destruction.
	    - Walktest: plugin_mgr was not decref'ed.
	    - Walktest: added some more decref'ing.
	    - Input console: lines array was not freed.
	- 'res' fixed three small texinfo syntax errors.
23-Mar-2002
	- Fixed a bug in the patch from Loic which prevented CS
	  from properly working if CRYSTAL var is unset and if
	  so files from current dir are being loaded (linux).
	- Additionally removed the 'stat' test completely for finding
	  out if a library can be loaded. 'stat' and 'csLoadLibrary'
	  are not compatible so 'stat' cannot be used to test if
	  'csLoadLibrary' will work or not.
22-Mar-2002
	- Fixed a bug in the calculation of LOD for sprites. This
	  bug could cause crashes due to an array access at -1.
	  Thanks to Norman for reporting this.
	- Added a patch from Loic Dachary <loic@gnu.org> to give more
	  detailed error messages when plugins can't be loaded. This
	  way it is easier to see what is wrong.
	- Replaced DLERROR with WARNING while loading a plugin because
	  failure to load a plugin is not always an error (for example
	  for the sound and image multiplexers).
	- 'res' added function to iGraphics3D so that the engine can
	  check if a renderer can handle a lightmap. Provided implementation
	  in OpenGL/Software versions.
	- 'res' modified engine so it now checks if the renderer can handle
	  the lightmap.
	- 'res' also replaced some printfs() in the engine with Report().
	- Christopher Nelson did the following to terrbig:
	    - Small update to allow public setting of materials list.
	    - Made another modification to the materials list. Now it makes a
	      copy of the list, rather than just assuming control of the
	      passed in pointer.
	    - Started adding in mapping and material list functions.
	    - Moved RGBVector to it's own file in include/csutil (csRGBVector).
	    - Modified the materials list location, turned the map into
	      a sorted vector vs. an unsorted one for fast searching during
	      the map build process.
	- Norman Kramer added dummy implementation of IsLightmapOk to
	  aws iGraphics3D implementation.
	- Mathew Sutcliffe created reversible form of csHashMap which can
	  find a key from a value as well as the value from a key.
21-Mar-2002
	- Norman Kramer fixed simpcd so that the csColliderWrapper is now
	  released.
	- Norman also initialized color in partgen to black. It was
	  used uninitialized.
20-Mar-2002
	- Philip Wyett did an update to the MSVC documentation:
	  Update to msvc_libs:
	  Note: This is for developers building the bleeding edge cvs code
	  or recent cvs snapshots with either MSVC 5, 6 or 7.
	- 'res' did some changes to the software renderer: added some
	  scanprocs for alpha/keycolor and alpha/alphamap combos. Also
	  fixed two alpha-related crash bugs.
	- Mathew Sutcliffe did a little docs fix to binder.h.
	- Matze Braun fixed a small bug in the key definition parser.
19-Mar-2002
	- Decreased maximum size of lightmaps for software renderer
	  again. 16mil is WAY too much as that will not fit in the
	  texture cache. Now it is set to 2mil which is still two times
	  as big as it was before.
	- Matze Braun improved the 3ds2lev writer.
	- Matze did 3ds2lev optimization part one: removing double vertices.
	- Matze moved mmap functions outside csosdefs.h into mmiounix.h.
	- 'res' reverted his own alpha changes from yesterday.
	- Christopher Nelson did a small fix to mmapio.h that can cause
	  strange linking problems when all the software mmapio is not
	  included, but the header is.
	- Christopher created default and convenience constructor for
	  csTriangle. This makes code much prettier and less onerious when
	  using CS_GROWABLE_ARRAYS.
	- Christopher made a bunch of modifications to terrbig that should
	  let the system render to a 3D mesh much easier. Additionally,
	  texture coordinates are now generated, built factory for the object,
	  and added some necessary member variables to get the factory to
	  work.
	- Christopher Nelson additionally did the following to terrbig:
	    - Created triangle queues so that, for each material there is
	      a set of triangles that pertain to that material. Textures are
	      mapped on block level, so if sub-blocks have different textures
	      the texture will be ignored unless that sub-block is expanded
	      to it's full resolution. This occurs recursively for all blocks.  
  	    - Created sets of meshes in case I have to setup different
	      properties for each material. For the moment all meshes are
	      equivalent except for their triangle list.  
	      Note: I still haven't figured out how to tell the engine what
	      material I want drawn on the triangles. G3dTriangleMesh doesn't
	      appear to have the ability to do this, so I'll keep
	      investigating. Also, if someone who knows what they're doing
	      better than me can look at the draw pipeline in
	      csBigTerrainObject::Draw and see if I even have the right idea,
	      that would be great.
	    - Discovered where to set the material.
	- 'res' added render priority for explosion particles in walktest.
	- 'res' increased upper limit for lit textures in software renderer.
	- 'res' fixed alpha transparency for OpenGL again. Also fixed
	  disappearing of halos behind walls.
	- Wouter Wijngaards did further work on the terrfunc terrain engine.
	  Works nicely now but totally unoptimized so very slow.
	- Matt Reda fixed some of the mmap stuff to compile again (on
	  MacOS/X). I didn't test my changes because I'm not sure what exactly
	  uses the mmap stuff. Also did some testing with QInt() on PowerPC.
	  It works, but on PowerPC it is actually slower than a simple cast
	  (in my simple tests). So we'll leave it off for now.
18-Mar-2002
	- Fixed a bug in the octree cacher. The name used for loading
	  the cache could be different from the name used to writing the
	  cache (more specifically the name generated by the MD5 hash).
	- Fixed a bug in the octree cache. It was using *(char**)memfile
	  to get to the data. This is incorrect and has been
	  changed to (char*)memfile.GetData ().
	- Fixed yet another bug in the octree cache. It appeared that
	  debug/optimize cache could have some differences. This is probably
	  related to small changes in floating point calculations and
	  the polygon splitting routine is very sensitive to that.
	  This has now been fixed by saving additional information to the
	  octree cache. This means the octree cache is now bigger but
	  more robust on different platforms/debug/optimize mode.
	- 'res' fixed a bug found by <lemkef@charter.net> in the bmp
	  loader by removing the check for biClrUsed.
	- Mathew Sutcliffe fixed a problem with deciding whether to use
	  event.Key.Code or .Char.
	- Norman Kramer did the following:
	    - Renamed awslistbx to awslstbx to comply with the 8.3 filename
	      rule.
	    - AWS: Added AWSF_CMP_DEAF flag for components that do not wish
	      to receive any event.
	    - Added AWSF_CMP_DEAF flag, use it through cmp->IsDeaf()
	      and cmp->SetDeaf().
	    - The event distribution code in awsmgr now checks for this flag.
	    - Made invisible tabs in a notebook deaf.
	- Christopher Nelson fixed a compile bug in inpnames.cpp so that
	  MSVC won't complain that the case statements skip it's
	  initialization by including it in it's own {} block.
	- Matze Braun applied a patch from Loic Dachary <loic@gnu.org>
	  that makes using cs-config with autoconf easier.
	- Matze fixed unix csosdefs.h to compoile at least again. But I
	  think the mmapio functions shouldn't go to that header at all.
	- 'res' fixed alpha transparency (full transparent in OpenGL was
	  fully opaque in software and vice versa).
	- Christian Bayle added more dependencies to the debian scripts.
	  Several other smaller changes.
	- Mathew Sutcliffe modified the comments for binder.h. Added a main
	  comment so it will show in the online docs.
17-Mar-2002
	- Norman Kramer did the following:
	    - Fixed scf for static compilation (USE_PLUGINS=no).
	    - Renamed genmesh/csTriangleVertices to csGenTriangleVertices to
	      prevent name clash with terrfunc's csTriangleVertices (if
	      compiled static).
	    - Made csTriangleVertex an inner class of csTriangleVertices to
	      prevent name clash with genmesh's csTriangleVertex (if compiled
	      static).
	    - Added removal of SRC.LIBREF to the DIR.LIBREF target (otherwise
	      no new cslibref will be created if you made it once and then add
	      a plugin and do a "make recache blah")
	    - Removed the ";" from the LIBREF.BODY because
	      SCF_REGISTER_STATIC_LIBRARY already has it (and additionally
	      djgpp gives up there with an error).
	    - ogg: made callback structure public so VC will like it too.
	    - aws: less whining by VC now.
	    - aws: fixed textbox drawing routines potential use of
	      uninitialized variable.
	    - ogl_polybuf.cpp: fixed potential use of uninitialized var.
	    - thing.cpp: poor gcc for Solaris seems to have problems selecting
	      the right convert_endian routine. So I thought I help a bit by
	      casting the input parameter.
	    - Added chkogl.sh script to detect the existance of
	      glXGetProcAddressARB. Script is called from unixconf.sh.
	    - Additionally adds CSGL_EXT_STATIC_ASSERTION to volatile.h
	      if needed.
	    - OpenGL: added define of SGIS_genmerate_mipmap.
	    - OpenGL: made all defines commented out by default, so if your
	      GL implementation does not feature glXGetProcAddressARB no
	      extension is enabled either - you have to go here and enable by
	      hand (or provide an extended chkogl.sh that detects all the
	      nitty and maybe even the gritty).
	- 'res' added ARB_texture_env_combine to config. Changed 3dfx config.
	  Added GeForce config.
	- Richard Uren added HEIGHTMAP token to isoloader to enable heightmap
	  calculation when tiling. HEIGHTMAP lives in a TILE2D definition
	  and defaults to false/off/no.
16-Mar-2002
	- Wouter Wijngaards did further work on terrfunc. Dynamic lod and
	  seamless within one block.
	- Norman Kramer did the following:
	    - Modified the macros for globals so MSVC will (hopefully) not
	      barf.
	    - Gone through plugins to replace the globals with the cs macros.
	    - cswstest: fixed crash in layout example.
	    - Removed unused vars in various plugins and apps.
	    - Fixed pointer to scalar assignment in isoload.cpp.
15-Mar-2002
	- Wouter Wijngaards did some further work on terrfunc: still not
	  operational (the old terrfunc still works though).
	- Christian Bayle did some package correction on the Debian scripts.
	  Also added a dependency on xlibmesa. Added some mini shot used for
	  48x48 and 32x32 gifs.
	- Mathew Sutcliffe added CS_IS_INPUT_EVENT(e) macro.
	- Norman Kramer did the following:
	    - Modified the variables declared with CS_DECLARE_GROWING_ARRAY
	      so they use the new cs macros for static/global objects.
	    - Globals in aws, iso, emit, and rapid are now used via cs macros.
	    - Made the generated destruction function static.
	    - In the CLASSVAR case the class vars were never set but
	      shadowed by another variable.
14-Mar-2002
	- Norman Kramer did some fixes on the DOS port.
	- Norman fixes scf so that it again unloads unused shared libraries
	  on request only.
	- Matze Braun fixed a bug in csString when appending zero length
	  strings. Also added a comment.
	- Wouter Wijngaards did some experimental work on the landscape
	  engine (terrfunc):
	    - Removed the line RDS NOTE: Is this the same as DrawTest?
	      after the TestVisibility function.
	      Answer: No.
	      Long Answer: TestVisibility does quadtree visibility culling,
	      where parts of the terrain occlude other parts of the terrain.
	      This can and will never result in occluding the *entire*
	      terrain. Thus, it is not the same as DrawTest.
	    - Added terrain quad divisor class and terrfunc can enable this
	      (default on false). Placeholder code for now.
	    - Tiles show up, texture coordinates work for terrquaddivisor.
	- Christian Bayle did some cleanup for rules and createmenus in the
	  Debian scripts.
13-Mar-2002
	- Fixed mdl2spr so that it now correctly generates a MESHFACT
	  keyword instead of MESHOBJ.
	- csdemo will now show a list of all demo data files that it can
	  find in the current directory and the data dir if you start it
	  without commandline. In that case you can click and select the
	  data file that you want to run.
	- When you don't use LMCACHE keyword CS will now automatically
	  assign a name to every thing. Currently this name is based
	  on an MD5 checksum of the following information:
	      - Bounding box of the thing.
	      - Number of vertices
	      - Number of polygons/curves
	      - Name
	  This should guarantee sufficient uniqueness. If not we can always
	  add more data to this MD5 generation. This MD5 key will be
	  converted to a 32-byte name which is then used for caching
	  lightmaps and octree. This will make it easier to dynamically
	  load levels even when other parts of the level are already loaded
	  without the user having to manually specify LMCACHE.
	- Matze Braun added --includes to cs-config.
	- Norman Kramer did the following:
	    - Destruction functions are now called in reverse order of
	      registration.
	    - Dynamic libs are now correctly (hopefully) csUnloadLibrary'ed
	      by scf, note that this triggers a segmentation fault (at least
	      on linux (suse 7.3 - gcc 2.95.3 and binutils 2.11.90.0.29))
	      that is caused by gcc/libc's handling of static/global objects
	      in shared libraries. I will now begin to employ the new cs
	      macros to get around this.
	    - Changed a few of the static/global objects in csgeom and
	      csengine to be declared/implemented with the new CS_ macros
	      ("scfreg engine.so" no longer segfaults - that was why I started
	      all this, the guy who asked on irc why it segfaults be cursed :)
	    - Added a CS_..._REF in cssysdef that returns a reference to the
	      static object.
	    - In cssysdef.h moved forward declaration of cleanup function out
	      of extern "C" {} construct.
	- Christian Bayle did some more changes to versioning for the Debian
	  scripts.
12-Mar-2002
	- Made the lightmap cache for pseudo-dynamic lightmaps (shadow
	  maps) a bit more robust. Previously changing pseudo-dynamic
	  lights could cause the map to become unloadable because
	  old cached dynamic lightmap files made things crash.
	- Cleaned up pol2d.cpp source code which seems to have been
	  badly formatted by the C++ 'beautifier' :-)
	- Fixed a bad bug in pseudo-dynamic lights. Due to a wrong test
	  in the lighting code polygons that were fully lit by a
	  pseudo-dynamic light would not get lit at all.
	- CS demo now gives information about where to get demodata.zip
	  if you run it without demodata given on the commandline.
	- Removed the ad-hoc mount to demodata.zip from vfs.cfg.
	- csdemo now only accepts real filesystem path for the demo zip
	  or directory. So run csdemo with 'csdemo data/demodata.zip'
	  for example.
	- csdemo will no longer fail if there is no library in the demo
	  archive.
	- csdemo will now correctly move objects and camera so that they end
	  up in the correct sector if they go through a portal.
	- Changed iSaverPlugin::WriteDown() to accept iFile instead
	  of iStrVector. This will make it possible to write binary data.
	  Changed all implementations of this interface for the new
	  method signature.
	- Christian Bayle did some changes to the Debian script rules.
	- Christion added versioning/added export on tag for the Debian
	  scripts.
	- Norman Kramer did the following:
	    - Further changes to the CS_* macros to provide static/global
	      objects in shared libraries.
	    - Now everything should be in place and ready to be used (that
	      will follow in the coming days).
	- Philip Wyett added include <winsock.h> to csosdefs.h for windows.
11-Mar-2002
	- Fixed a bug in csScanStr when presented with an empty string
	  as input. This prevented the proper scanning of the format
	  string and thus also prevented some stuff that needs to happen
	  even if input is empty (like setting count variables to 0 for
	  lists like %D and %F).
	- Fixed a bug in the parsing of SMOOTH (spr3dldr) which would
	  use '%s' for a numeric parameter if an error occured. This
	  causes crashes. Additionally also fixed the error message
	  that occurs in this case.
	- Wouter Wijngaards added trailing endofline to isomap/isomap.h file.
	- Philip Wyett removed odivx4 plugin from default MSVC build.
	- Norman Kramer did the following:
	    - Added macros for declaring/implementing static/global
	      variables that can be used inside shared libraries.
	    - A Libname_scfFinalize function is called for shared libraries.
	    - The cleanup function for the main application is called in
	      DestroyApplication.
10-Mar-2002
	- Norman Kramer did the following:
	    - Changed SCF_EXPORT_FUNCTION to CS_EXPORTED_FUNCTION.
	    - Changed SCF_EXPORTED_NAME to CS_EXPORTED_NAME.
	    - Moved default definitions of both into cssysdef.h (out of scf.h).
	    - Renamed the SCF_EXPORT_FUNCTIONS in the other system dependent
	      csosdefs.h files.
	    - Declared cs_static_var_cleanup in cssysdef.h as
	      CS_EXPORTED_FUNCTION (that should fix the compiler warnings on
	      win32).
	- 'res' renamed csCreateXORPatternImage() parameter 'patsize' to
	  clearer 'recdepth'. Changed comment a bit.
	- 'res' fixed rle.mak for wrong output file name under MSVC (now
	  rlecodec instead of rle).
	- Philip Wyett removed 'byte' from xorpat.cpp, which is not always
	  known for unsigned char.
	- Philip fixed a bug in the video app: an attempt to centre the
	  video also resulted in the video being halved in size.
	- Philip also reports:
	    - Removed code used in odivx4 plugin which is not part of odivx
	      for Windows. You can see all the affected lines by looking for
	      lines commented out with "// PSW".
	    - Updated msvc_libs (all version) adding odivx4 support.
	      Note: The decore.h now in msvc_libs is a custom version as the
	      one one officially released is missing some definitions and also
	      one which causes crashes. :/
	    - Left all old divx headers and libs etc in for the time being.
	      I will remove later.
	    - Added divx4 plugin to default MSVC build.
	    - Updated docs in cvs ready for when we can get the new versions
	      of msvc_libs onto ftp.
9-Mar-2002
	- Norman Kramer did the following:
	   - In the OpenDivX plugin: removed FOURCC divx, which is now
	     assigned to divx4.
	   - Added new divx4 codec.
	   - In the csosdefs.h files changed CS_IMPLEMENT_PLUGIN to
	     CS_IMPLEMENT_PLATFORM_PLUGIN and CS_IMPLEMENT_APPLICATION to
	     CS_IMPLEMENT_PLATFORM_APPLICATION.
	   - Added CS_IMPLEMENT_STATIC_VARIABLE_CLEANUP and
	     CS_STATIC_VAR_DESTRUCTION_REGISTRAR_FUNCTION in cssysdef.h.
	   - CS_IMPLEMENT_PLUGIN and CS_IMPLEMENT_APPLICATION is now made
	     from CS_IMPLEMENT_STATIC_VARIABLE_CLEANUP and
	     CS_IMPLEMENT_PLATFORM_*.
	- Philip Wyett fixed all the warnings caused by the changes to
	  CS_IMPLEMENT_APPLICATION and CS_IMPLEMENT_PLUGIN. Also changed
	  lib name which MSVC will use for new divx for plugon to eliminate
	  conflicts.
	- Philip then proceeded to revert the massive commit he did a few
	  minutes ago :-)
	- Norman reverted on additional file that Philip forgot to revert.
	- 'res' did some changes to procedural textures (plasma, fire, dots):
	  changed texflags, removed nomipmaps on plasma/fire, added
	  persistent on dots.
	- 'res' fixed the OpenGL backbuffer procedural texture implementation
	  so that up is now up and down is down.
8-Mar-2002
	- Peter Amstutz <tetron@student.umass.edu> gave a patch which
	  does the following:
	    - garray.h will not shrink the allocated size when SetLength() is
	      called (SetLimit() can still shrink the array). He did not change
	      the allocation policy (it still allocates +8 elements at a time).
	    - In mdltest.ccp/csSingleIndexVertexSet::Add() he commented out
	      the n-factorial linear search which he believes is supposed to
	      optimize vertices, but in practice does nothing (except suck
	      up a LOT of runtime).
	    - In sprbuild.cpp/csSpriteBuilder::Build() he added code to count
	      the number of vertices in the imported model and preallocate
	      the required memory in the vertex arrays.
	    - In sprtri.cpp/csTriangleMesh2::AddTriangle() he changed the
	      resize policy from allocating +8 elements at a time to doubling
	      the array size.
	- Jorrit additionally modified the following on this patch:
	    - garray.h will still shrink the allocated size when
	      SetLength() is called which will result in a limit that
	      is 1000 (CS_GARRAY_SHRINKLIMIT) units smaller than the old
	      limit. This means that arrays will still shrink by calling
	      SetLength() if the new length is sufficiently smaller than
	      the old one.
	    - The default grow limit is now set to 16 (CS_GARRAY_GROWSTEP)
	      instead of 8.
	    - Instead of doubling the number of triangles in the spr3d
	      plugin the triangles are doubled with a maximum of 1000
	      triangles at a time. This ensures that not too much memory
	      is wasted.
7-Mar-2002
	- Matt Reda fixed an endian-related bug in the OpenGL screenshot
	  code.
	- Fixed another occurance of an initializer in a cpp file.
	  This is not legal.
	- The cache manager is no longer registered with the object
	  registry. Instead I added iEngine::GetCacheManager() and
	  SetCacheManager(). This is a more explicit and easier way
	  to handle this. So if you want to cache something in the
	  context of the engine just ask the cache manager from the
	  engine. If you don't use SetCacheManager() then the engine
	  will still use the vfs cache manager by default.
	- Octree is now also saved on the cache manager.
	- Fixed a memory leak in csOctree::ReadFromCache().
	- Fixed a big problem in csOctree::ReadFromCache() which could
	  cause memory corruption.
	- Brandon Ehle did some fixes in caltocs for memory corruption.
	- Christian Bayle did an initial addition to build daily Debian
	  package (scripts/debian).
6-Mar-2002
	- Matt Reda made the iso engine explicitly remove all mesh factories 
	  at iso engine destruction for clarity.
	- Matt Reda removed extra assignment where g3dpolyfx.mixmode was 
	  being assigned the same value twice for isometric sprites
	- Matt Reda removed extra screen to world calculation in iso views
	- Matt Reda added support for splitting walktest into two views. 
	  Shift-S splits to 2 views, Shift-T toggles between the two views
	  (allowing the user to navigate the level in the two views), and
	  Shift-U returns to a single view (the currently active one).
	- Added iCacheManager interface (include/iutil/cache.h). This is
	  a generic interface to describe a cache mechanism. It can be used
	  for storing data that is hard to calculate and doesn't change
	  often. Since this is an interface you can create various
	  implemetations that read/write cached items from several sources.
	  Even a networked implementation could be possible.
	- Added csVfsCacheManager implementation of iCacheManager
	  (include/csutil/vfscache.h). This is an implementation of
	  iCacheManager that will store cached items on VFS (file system).
	- The engine will now find a cache manager in the object registry
	  with the tag 'crystalspace.engine.cachemgr'. If this doesn't
	  exist it will create an instance of csVfsCacheManager and
	  register that (cache will be placed in 'cache' dir). By registering
	  your own implementation of iCacheManager to that tag you can
	  force the engine into using a different cache.
	- Extended iLightingInfo interface with a iCacheManager* parameter.
	- Lightmaps are already cached using the new system. Octree and
	  bsp tree are still a todo.
	- Philip Wyett moved the isometric map loader to plugins/isoldr
	  instead of its original location inside plugins/engine/iso.
	- Philip fixed all redefinition errors in inpnames.cpp. Note: when
	  allocating a default value to a variable in a function definition,
	  please could folks do it in the header file only and not in both the
	  .h and .cpp.
	- Richard Uren removed some debug comments from the iso loader.
	- Richard also did some changes to allow the creation of mesh wrappers
	  without a class id for the iso engine. The CLASS directive in the
	  iso map files are no longer needed.
	- Matze Braun added a missing cache.h include to polygon.cpp.
	- Matze also added declarations for iEvent and csEvent again in
	  inpnames.h. Please don't remove them again. They are needed.
	- Matze then did a small bugfix for keyparsing.
	- 'res' changed VFS so that when a file is opened for reading the
	  directories are not automatically created.
	- 'res' did the following changes to lightmaps:
	    - Changed the way lightmap is stored on disk: 
	      the 4th byte was 0x80 all the time, and the comment on line
	      159 in lghtmap.cpp says it wasn't even known why :) now the
	      4th byte is stripped when writing the lightmap and readded when
	      reading. 
	    - Changed lightmap file magic.
	    - Changed lmversion.
	- Mathew Sutcliffe added csInputBinder: an auxilliary support class.
	- Christopher Nelson published FindComponentFactory interface and
	  made several modifications to the interface to accomodate this.
5-Mar-2002
	- Mathew Sutcliffe (Oktal) added new csParseInputDef and
	  csGetInputDesc functions which replace the old functions in
	  cskeys.h. With these functions you can parse a key/mouse/joystick
	  event into a csEvent or vice versa.
	- Mathew added backward compatibility with cskeys and extra.
	- Fixed the csParseInputDef and csGetInputDesc so that they now
	  return bool on success/failure of conversion.
	- Richard Uren added a new loader for the isometric engine.
	- Matze Braun did the following:
            - Small fix from Rene Dudfied <illumen@yahoo.com> to make
	      fpu80x86.h compiling with gcc >= 3.0.4.
            - Matze added some declarations to inpnames.h.
	- Philip Wyett fixed a few issues in the new iso plugin makefiles.
	- Philip also fixed all the conflicts of having two plugins in the
	  same dir and wildcarding all the files in that dir. Isomap now
	  successfully compiles and runs under MSVC.
	- Matze Braun fixed the isomap makefile so that the target name
	  is now different from the executable name.
	- Matze additionally removed double CS_IMPLEMENT_PLUGIN, this results
	  in two main functions in linux.
	- Matze then proceeded to add the CS_IMPLEMENT_PLUGIN again. These
	  really are two plugins.
4-Mar-2002
	- Fixed the tutorials in the docs so that they are up-to-date with
	  regards to changes that happened a long time ago in csInitializer.
	- Philip Wyett implemented a strncmpi() function so MSVC can compile
	  again.
	- Matze Braun fixed inpnames.cpp for unix. Stricmp is MSVC only.
	- Jonathan Tarbox reports: while in most systems returning false
	  as a pointer will evaluate to 0, it does not within BeOS.
	  Fixed a problem in csloader.cpp related to this.
3-Mar-2002
	- Norman Kramer did the following:
	    - csRegisteredString never freed the memory assigned to its
	      String member.
	    - With much help from Matze Braun I have figured what causes
	      the segfault after engine.so gets unloaded: it's the _fini from
	      crti.o that is linked in with the link command that is issued
	      when linking with g++.
	      Why this causes a crash is still unknown, but we can avoid
	      linking this in by adding -nostdlib -lgcc to the g++ link
	      command. This is what i've changed in linux.mak (funny enough we
	      used that already back then when we used gcc instead of g++).
	    - Reverted my changes since now the static objects in engine.so
	      are no longer initialized (well, they are 0 - for instance
	      the csPoly2DFactory in csPoly2DPool).
	- Matze Braun added support for 'free()' to csMemFile (in addition
	  to not deleting and 'delete[]').
	- Matze fixed the indentation/coding style of the sound renderer
	  and also fixed a bug in the destructor.
	- Matze fixed cspython.mak to remove python.cex in pythonclean target.
2-Mar-2002
	- Norman Kramer did the following:
	  Text in the "whatsThis" property of controls are now evaluated.
	  Currently text in the form of: "c:a1,b1,a2,b2[,...]" is recognized
	  and translated into:
		connect
		{
		  a1 -> b1
		  a2 -> b2
		     ...
		}
	  so if you write in the whatsThis property of a pushbutton:
	  c:signalClicked,mysink::Login you'll get:
		connect
		{
		  signalClicked -> mySink::Login
		}
	- Norman also added recognition of literals in whatsThis property.
	  It is of the form "l:literal text". <literal text> will be placed
	  in the output.  "c:" and "l:" tokens have to separated by "|"
	- Norman updated the qtaws.txi documentation.
	- Norman fixed the following:
	    - Thing was not initialized in polygon constructor.
	    - xwindow.cpp: graphics context was not freed.
	    - xexstshm: XImage was leaked, moved destructor of xshmt in x2d
	      around so it happens before xwin is destroyed (xshm also
	      uses dpy variable). NOTE: If you use valgrind (memory checker)
	      you will note that it crashes if the shared memory if
	      shmdt'ed - this seems to be a bug in valgrind.
1-Mar-2002
	- Norman Kramer did the following:
	    - Made joystick code produce "old" events - that is (x,y) pairs
	      for the first 2 axis only.
	    - The keys read from joystick.cfg are now composed as
	      Device.Joystick.<Platform>.<Compiler Name>.*
	      This will possible implementations for other platforms let share
	      this config file.
	- Christopher Nelson fixed some bugs with the transition out code,
	  and modified visibility processing to make transition resets work
	  right without flicker.
	- Wyatt Miler fixed @em -> @emph in apimod94.txi.
28-Feb-2002
	- Norman Kramer did the following:
	    - Cleaned up crysball.cpp a bit.
	    - Replaced a long if-snake with a for loop.
27-Feb-2002
	- Matze changed oss sound driver to nonblocking mode while opening, so
	  if the soundcard is already used it fails now instead of
	  waiting for the sound card to become free.
	- Norman Kramer did the following:
	    - Cleaned up SCF_DECLARE_IBASE in the components, which was not
	      needed (and wrong) since they all inherit from awsComponent
	      which implements iAwsComponent already.
	    - Made awsComponentFactory a full implementation of
	      iAwsComponentFactory (that is I provided a dummy implementation
	      of Create ()).
	    - Removed all the SCF_DECLARE_IBASE stuff for ComponentFactories
	      too.
	- Christopher Nelson did the following:
	    - Made out transitions automatically Hide and Reset the window
	      frame for the in transition.
	    - Made awsStandardSink contain triggers for all out transitions.
	    - Fixed a bug in the status bar that would cause draw pixmap to
	      segfault.
	    - Added new window function: FindChild. This allows you to find a
	      child of a window by name. You must make sure and have the exact
	      same name, though, otherwise the child will not be found. Case
	      IS sensitive.
26-Feb-2002
	- Norman Kramer did the following:
	    - The styleshhet now recognizes QTabWidget which are transformed
	      into awsNotebook.
	    - Fixed bug that created layouting data even if there were none.
	    - Fixed the case where notebook pages have no caption, it now
	      correctly creates dummy captions synthesized from "Tab " + #Tabs.
	- Brandon Ehle implemented the PLUGINS section for libraries in the
	  loader.
	- Matze added a missing csPlane3 forward declaration to campos.h.
	- Christopher Nelson added window transitions for sliding in and out
	  left, right, up and down.  Note that transitions will cause
	  segfaulting if used with a proctexture, because CS proctextures do
	  not provide proper clipping.
	- Norman Kramer fixed DoButton and DoMotion of the joystickdriver
	  (for one the range checking was screwed and now joystick number is
	  in range [0, maxjoy-1] as the comment in iEventPlug suggests.
	- Norman implemented a joystick eventplug for linux that conforms to
	  the Linux Joystick API. Enable it CS/libs/cssys/unix/*.mak. There
	  is also a joystick.cfg.
25-Feb-2002
	- Michael O'Shea found a bug in iLoader::LoadMeshObject(char*fname).
	  This function was totally broken :-)
	- Matze Braun removed an assert from the standard reporter to allow
	  users to define their own severities.
	- Norman Kramer did the following to aws:
	    - Added notebook component.
	    - Events are now only broadcasted to windows that are not hidden.
	    - Added sample for notebook.
23-Feb-2002
	- Matt Reda changed size of uv array in ogl_polybuf.cpp. Array was
	  declared with size 2 but 3 elements where being accessed,
	  overwriting some of the other local variables. Adjusted size to 3
	  until someone with more insight can determine whether that is
	  correct, or if it should only be accessing 2 elements.
	- Philip Wyett fixed compiler error under MinGW Norman Kramer mailed
	  to me. This error was that ENUM_CURRENT_SETTINGS is not part of
	  the win32 api of MinGW whilst it is under MSVC. I have added a nice
	  little define to include it for those which don't have it.
	- Philip did a quick hack to get the LUA plugin to compile.
	- Philip removed include csutil/zip.h from css.h.
22-Feb-2002
	- Added iLoaderContext interface (include/imap/ldrctxt.h). This
	  new interface gives loader plugins a way to find out about
	  sectors, materials, mesh objects, and mesh factory wrappers.
	  The interface supports the notion of region-qualified names (i.e.
	  'regionname/objectname') or just normal object names.
	  Implementations of loader contexts should not be modifiable since
	  sometimes a context is stored for delayed loading.
	- Removed iLoader::FindMaterial(), FindSector(), and
	  ResolveCurrentRegionOnly() since now the loader context has
	  to be used.
	- Changed iLoaderPlugin to use the iLoaderContext instead of
	  material and factory list.
	- The standard loader now supports an iLoaderContext and gives
	  it to the loader plugins.
	- Modified all the loader plugins to use the new context object.
	- Extended iSyntaxService::ParsePoly3d() with a new
	  iLoaderContext* parameter.
	- Added iEngine::CreateLoaderContext(). With this function you can
	  create a loader context that will operate on the engine lists.
	  It also has an optional region parameter with which
	  you can get a loader context that will only search in that
	  region. You can use this function for giving it to loader plugins
	  directly.
	- Changed the new iEngine::FindBla() functions I added yesterday
	  so that they accept an optional region parameter instead of
	  a bool ResolveCurrentRegion.
	- Fixed a bug in iEngine::CreateMeshFactory(). If a factory with
	  the same name already existed it would not create a new factory.
	  This is wrong since different factories with the same name
	  are perfectly legal. It is possible for the factory to be in
	  another region for example.
	- Fixed the python plugin for the changes yesterday.
	- Added the ability to use '*' as the region name when using the
	  'regionname/objectname' syntax. i.e. you can now say:
	    MATERIAL ('*/stone')
	  This syntax forces a global search (i.e. ignoring all regions)
	  for the material 'stone' EVEN if the current loader context
	  says that only one region should be used.
	- Brendan Burns <bburns@genet.cs.umass.edu> and Peter Amstutz made
	  a memory canvas which will render to a memory buffer (and not open
	  a window). This can be useful in applications that want to save
	  a rendering to some file without having to open a window. This is
	  for the software renderer alone. Use the Screenshot() function to
	  get the image.
	- Removed 'required' from BisonFlex in msvc documentation as it is
	  no longer required.
	- Changed iTerrFuncState::LoadMaterialGroup() to use iLoaderContext
	  instead of iMaterialList. This fixes a compilation error.
	- Fixed iLoader::LoadMeshObjectFactory(char* filename) so that it
	  resets the 'ResolveOnlyRegion' to false.
	- Christopher Nelson did the following to AWS:
	    - Added new component, "Status Bar"
	    - Fixed anothe bug in the bar chart.
	    - Added component "Status Bar" to the manager.
	      Status Bar takes the following keys:
	        Status: <integer between 0 and 100 (inclusive)>
	        Style: <typical frame styles, sbBump. sbSimple, etc.>
	        BarTexture: <a text string that is the path to the image>
	        BarTextureAlpha: <an integer between 0 and 255 (inclusive)>
	    - Fixed key bug in status bar.
	    - Fixed insets in status bar to look right.
	    - Fixed command button: mouse over, bitmap issue,
	      getprefferedsize when it's a bitmap.
	    - Fixed barchart: zero barwidth issue, dies when no items.
	    - Fixed textbox: if it was too small text would be truncated
	      to zero and strlen would choke.
	    - Fixed window: if a child had a layout, but the window did not,
	      it would not function right.
	    - Added BackgroundAlpha and OverlayAlpha to window.
	    - Other fixes that I can't remember now.
	- 'res' fixed the Windows OpenGL canvas so that the depth now contains
	  the actual instead of the wanted color depth.
	- 'res' fixed a typo in jobber.pl ('Inovking' instead of 'Invoking').
21-Feb-2002
	- Peter Amstutz <tetron@student.umass.edu> added a patch to CS
	  to add two additional broadcast events:
	    cscmdCanvasExposed
	    cscmdCanvasHidden
	  these events are sent when the canvas becomes exposed/hidden
	  (i.e. iconify for example). Currently only the XWindow canvas
	  will actually send these!
	- Disabled default building of LUA for mingw port.
	- Added FindMaterial(), FindTexture(), FindSector(), FindCollection(),
	  FindCameraPosition(), FindMeshObject(), and FindMeshFactory()
	  to iEngine. All these functions have two parameters: the
	  name to look for and a flag which indicates if the search
	  should be restricted to current region (default false). The name
	  can take two forms: either it is a simple name of the object in
	  which case it will work as explained above, or else it uses
	  the form 'regionname/objectname'. In that case it will ignore
	  the extra flag and look for the object in the specified region.
	- The loader now uses FindMaterial() and FindTexture() from above
	  so you can now specify materials with the form 'region/matname'
	  if you want.
	- Portal loading now works differently. Previously it worked by
	  creating dummy sectors for every portal. These dummy sectors would
	  then later be resolved after the loading pass. This was a bit
	  clumsy and has been a source of bugs in the past. So I changed this
	  with a callback on the portal that is called when a sector is
	  missing. So this means that all portals are by default null-portals
	  unless it is a portal to a sector that was already defined
	  previously. The null-portal will have a callback associated with
	  it that will try to find the destination sector as soon as the
	  portal is first used. This means that worlds that have portal
	  to non-existing sectors will now work except that the portal itself
	  will not be operational (a texture will show).
	- Removed the ugly ResolvePortalSectors() function in the parser.
	  This is no longer needed with the technique above.
	- It is now possible to use the 'regionname/sectorname' notation
	  with the PORTAL command too. So you can specify portals to sectors
	  from other regions.
	- Added iLoader::ResolveCurrentRegionOnly() function to return the
	  current value of the ResolveCurrentRegion flag in the loader.
	- Removed the 'link' parameter from iEngine::CreateSector(). Since
	  this hack is no longer needed sectors are now always linked
	  to the engine as they should.
	- Matze did the following:
	    - Changed csString to handle 0ptrs correctly (a null pointer is
	      returned if a null pointer has been assigned).
	    - Changed cast operator of iString to return const char* instead
	      of char* (if you really need char* which is dangereous use
	      GetData).
	- 'res' fixed a @ref in the next documentation.
	- 'res' fixed description on how to make a sky brush (skybox.txi).
	- 'res' adds support for cscmdCanvasExposed/cscmdCanvasHidden for
	  Windows.
	- 'res' also adds cscmdCanvasExposed support to Walktest.
	- 'res' reports that textures sizes in memory (OpenGL) were calculated
	  wrong in some cases. Also disabled mipmapping for procedural
	  textures.
	- 'res' added support for GL_SGIS_generate_mipmap which allows
	  automagical creation of mipmaps for procedural textures.
	- Christopher Nelson fixed a dumb bug in bar chart that was making
	  display inverted.
20-Feb-2002
	- Added SetMaximumSectorVisit() and GetMaximumSectorVisit() functions
	  to iPortal. With this you can control how many times the same
	  portal can visit the same sector during one recursion level. This
	  is mainly useful for space warping portals that warp back in
	  space so that the portal can be seen from the portal itself :-)
	  By default this limit is set to 5.
	- Added MAXVISIT keyword that you can use inside a WARP() statement
	  for a polygon. This will call SetMaximumSectorVisit().
	- Added new 'entity_WavePortal' command for WalkTest. With this
	  command you can let a space warping portal 'wave' a little bit.
	  flarge contains an example of an infinite room with waving
	  portals. This is only a small illustration of what space warping
	  can do. It is not an example of nice code :-)
	  It also demonstrates a bug where the distance polygons are
	  drawing wrong for some reason.
	- Norman Kramer did the following in the glx2d canvas:
	    - Xvis, cmap and active_GLContext were not set in case the first
	      glXChooseVisual failed.
	    - Also added a test for generic RGBA+Doublebuffer+DEPTH
	      with help from Christophe Cavalaria.
	- Wyatt Miler updated libpng version that is available in documentation.
19-Feb-2002
	- Toni Asco' Gonzalez implemented a faster version of DrawPolygonMesh()
	  for OpenGL. This code is still experimental but it seems to work.
	  Fog is not yet correct though. To enable this use the FASTMESH()
	  option inside the PARAMS() block of a thing mesh object.
	  The speed increase will be mostly visible on small objects with
	  a high polygon count. Don't use it on an entire level because
	  then the mesh will have to be clipped and this degrades performance
	  again.
	- Optimized the new DrawPolygonMesh() a little.
	- It is now possible to also add mesh objects to libraries.
	  Previously only mesh factory could be added. This means that you can
	  now say MESHOBJ or MESHREF from within a LIBRARY. The meaning of
	  this is a bit special. What will happen is that the mesh objects
	  are created like they would have been created inside a sector. But
	  they are not added to any sector. They are only added to the engine
	  list of meshes (engine->GetMeshes()).
	- Added a new keyword 'MESHLIB' that can be used in a sector to
	  refer to a mesh object from a library. What this will do is try
	  to find a mesh object with the given name from a previously loaded
	  library. Then it will link that mesh object to that sector.
	  Note that you can not duplicate objects this way. There is still
	  only one mesh object and after you used MESHLIB to link it to a
	  sector it is in use. Inside MESHLIB you can do everything that
	  you can do in a MESHOBJ statement. So you can specify the MOVE
	  or HARDMOVE for example. PARAMS and PLUGIN are also possible but
	  should not be used as the mesh object is already defined in
	  the library.
	  This new feature is useful for creating worlds that are made
	  from multiple libraries. For example, you can have a library for
	  every building in your world and then make one world file that
	  combines them all. This would look something like this:
	    WORLD (
	      ...
	      LIBRARY '/lib/gamedata/building1' ()
	      SECTOR 'building1Sector' (
	        MESHLIB 'building1Obj' (
		  HARDMOVE (...)
		)
	      )
	      LIBRARY '/lib/gamedata/building2' ()
	      SECTOR 'building2Sector' (
	        MESHLIB 'building2ObjPart1' (
		  HARDMOVE (...)
		)
	        MESHLIB 'building2ObjPart2' (
		  HARDMOVE (...)
		)
	      )
	      ...
	    )
	  In this example we have two libraries for two buildings. The
	  first library contains a MESHOBJ with name 'building1Obj'.
	  The sector that is defined after that will pick up that mesh object
	  by using MESHLIB and then use HARDMOVE to position it elsewhere.
	  The second library contains two mesh objects which are then put
	  in the next sector.
	- Christopher Nelson did the following:
	    - Created new component called "Bar Chart". The bar chart
	      recognizes vertical and horizontal specifications, and it can
	      display both rolling charts and static charts.
	      (A rolling chart must be updated by your application, but the
	      component handles all the dirty work). Bar Chart has these
	      options:
		Options: bcoRolling bcoRollRight bcoRollLeft
			 bcoVertGridLines bcoHorzGridLines bcoVerticalChart
		InnerStyle: ... same as style, only for the inner frame that
			contains the bars ...
		XLegend: "Legend Name"
		YLegend: "Legend Name"
		MaxItems: 10 ... or any other reasonable integer, this is
			only used for the rolling chart ...
		Caption: "Chart Legend"
	    - Added bar chart to common components list.
	    - Added new function FindColor to preferences manager. It looks
	      for the specified RGB triplet using AWS's built-in texture
	      manager.
	    - Made some fixes to bar chart so that the vertical stuff works
	      right, and also so that the options are added in as constants.
	    - Updated test app to fill up bar chart with some sample values.
	    - Updated bar chart so that it displays a proper numerical legend
	      on the left when NOT using bcoVerticalChart.
	    - Fixed divide by zero bug. Also added new signal:
	      signalBarChartTimer which can be controlled by UpdateInterval.
	      This signal is sent every UpdateInterval milliseconds and can
	      be trapped, but ONLY if the bar chart is rolling. Otherwise the
	      signal is not mapped.
	    - Added notion of Icons that can be shown left, right, above or
	      below the text of a command button.
	      Example:
		component "East" is "Command Button"
		{
		  Caption: "East"
		  Icon: "/aws/zoom.png"
		  IconAlign: biaLeft
		}
18-Feb-2002
	- Added experimental code to allow video mode selection using
	  AWS. This does not work yet and the API is subject to change
	  so I don't recommend using this yet. Also add a 'simpvs'
	  application that uses this feature.
	- Removed dependency on AWS to libflex (for MSVC). This is not
	  required.
	- Wouter Wijngaards fixed the layout bug Patrick spotted in csmod
	  and csogg makefiles.
	- Matze fixed annotation time to be really UTC.
	- Norman reports: gridlayout is now translated into aws GridBag
	  layout (this has still some issues). Norman also added description
	  on how to use the qt2aws.xsl stylesheet.
	- 'res' reports: fontplex now breaks loading of font servers after 2
	  consecutive failures (instead after the first failure).
16-Feb-2002
	- Philip Wyett eliminated 'no newline' warnings in some aws source
	  files.
	- Norman Kramer did the following:
	    - Modified csRectRegion::Include.
	    - This solves the flickering problem in aws.
	    - I'm sure Christopher dislikes my solution since it always splits
	      the rectangle if it partly covers the new to be included
	      rectangle, so the case where n>1 already existing rectangles
	      cover the newly to be included rectangle is ignored.
	- Philip Wyett made modification, which can be seen on cs-main.
	  changed:
		n = ((n + threshold - 1) / threshold) * threshold;
	  to:
 		n = n + threshold - 1;
	  This bug was found by Shawn Carroll and publised to the list
	  by Patrick McFarland the creator of m4 for CS.
	- Reverted Philip's change since for integers n/a*a is not always
	  equal to n.
15-Feb-2002
	- Reverted 'res' change to win32gcc.mak since it breaks compile of
	  ddraw plugin. The problem is that the -lddraw library link command
	  is added after the command so it is added after the 'rm'. This is
	  obviously wrong.
	- Fixed a compile error in aws. You cannot say 'virtual Func ()'.
	  You have to specify a return type or 'void'.
	- Little code reformatting of libs/csutil/cfgmgr.cpp.
	- Reverted 'res' change to enginep.mak since it breaks loading
	  of the engine plugin on MingW at least.
	- 'res' added an alternative workaround for dllwrap on MingW (but
	  not activated by default).
	- Completely reformatted the AWS source code using the GC utility.
	  Now the source of AWS finally conforms to CS coding style rules.
	- Completely reformatted the engine source code using the GC utility.
	- Completely reformatted the csgeom source code using the GC utility.
	- Fixed memory leaks in AWS related to the canvas. Changed
	  behaviour of GetCanvas() so that it no longer increases ref count
	  of returned canvas.
	- Added iConfigManager::CleanUp(). This will flush all removed
	  config files and also clean up all loaded domains.
	- Removed iConfigManager::CleanUp() again. This is not the right
	  way to do this.
	- Matt Reda fixed bug in OSX canvases. Window title never switched
	  back after being unpaused.
	- Wouter Wijngaards added a check to the new halo fading (which looks
	  good!) so that it is only done if the flare component is CS_FX_ADD.
	  Other mixmodes would be colored black, which would not be nice.
	- Jonathan Tarbox added comments on how to enable NASM for CS
	  under BeOS.
	- Christopher Nelson did the following:
	    - Renamed awslayot.cpp to awsgbl.cpp.
	    - Added BorderLayout. Should work pretty much like the Java one,
	      with the exception that it ignores "BEFORE_FIRST_LINE" and
	      similar because that has no meaning in AWS. In order to specify
	      the anchor point for children use Anchor: blNorth, blSouth,
	      blEast, blWest, and blCenter.
	    - Added BorderLayout constants to preference manager.
	    - Fixed a couple of bugs in the BorderLayout. Now functional and
	      works like the book says it should.
	    - Fixed horizontal and vertical gap in border layout. Wasn't
	      working quite right. NOW everything works just like the book
	      says it should.
	    - Updated the awstest.def definition file to include a group
	      frame in a layout WITH a layout (BorderLayout) and five kids
	      in their respective position with gap.
	    - Fixed Group Frame so that it returns insets. This lets layout
	      managers work correctly with it.
	    - Added a new flag called AWSF_CMP_INVISIBLE which means that a
	      component cannot be seen because it's too small. This keeps
	      certain errors fram happening during resizing.
	    - Fixed the two layouts to use this flag when components get too
	      small. There is still the odd refresh issue that I don't
	      understand, and there needs to be a way to lock windows into a
	      minimum frame size. If a window gets sized too small then
	      certain components will freak out. Plus, since clipping still
	      does not work correctly in most of Crystal Space's canvases,
	      something needs to be done about clipping components to a
	      specific area. I'm unsure how to proceed on that one as of
	      yet. Probably I'll wait until someone cares enough to mention
	      it, then we can have a decent discussion.
	    - Updated label to make it work right with layouts.
	- Norman Kramer added the missing AWSF_CMP_INVISIBLE flag.
	- Matt Reda fixed a copy-and-paste error he made last night.
14-Feb-2002
	- Fixed new gridbag constraints in AWS so that it is an enum
	  (static const int is not legal in C++) and also renamed
	  the constants so that they start with GBS_... Several of the
	  constants were defined in windows include files (i.e. RELATIVE
	  in wingdi.h).
	- Fixed another bug in AWS. The 'layout' field in iAwsComponent
	  was not initialized which means it might crash depending
	  on 'luck'.
	- Eric Sunshine removed the outdated and broken classic Macintosh port,
	  as well as the incomplete and unsupported PS2 port.
	- Philip Wyett eliminated a warning with MSVC and starldr.cpp.
	- Christopher Nelson did the following:
 	    - Fixed some ugly bugs in awsGridBagLayout.
	    - Added constants in for GridBagConstraints (gbcCenter,
	      gbcWeightX, etc.)
	    - Enabled layouts in the window manager.
	    - Modified windows to resize using the layout if its there,
	      otherwise revert to old behavior.
	    - There are still some odd problems with layout-enabled windows.
	      I'm not entirely sure why, but they seem to have some bizarre
	      redraw problems that cause blinking during refresh. I don't
	      think that this is related to recalculating the layout, because
	      layouts are only refreshed during a resize and when a window is
	      created.  
	    - GridBagLayout has a bug which may be related to that, but I'm
	      unsure. As it is, layouts work, although GridBagLayout is the
	      only one that exists and it doesn't behave quite right.
	    - Fixed the GridBagLayout bug. Assigning ymax to xmax is not
	      good :-)
	    - Fixed yet another dumb bug related to layouts. They weren't
	      getting the right settings node, so they weren't finding any
	      settings!
	    - Finally fixed all of the layout bugs. The strange refresh
	      problem still exists, trying to discover what that issue is
	      all about.
	    - Updated test app to use layouts.
	    - Fixed the zoom bug for windows and layouts. Only need to adjust
	      by inset, since layouts automatically assume zero space.
	    - Fixed additional bugs related to ScrollBar and ListBox because
	      of layouts.
	    - Slight re-adjustment of space for scrollbar so it doesn't overlap.
	- 'res' added ugly workaround to mingw dllwrap bug (functions with
	  _declspec(dllexport) are not auto-exported from libraries).
	- 'res' modified lens flares so that they fade away.
	- Norman Kramer added inclusion of unistd.h to cssysdef.h. Somehow
	  recent changes broke compilation of socket plugin.
	- Norman did some changes to qt2aws.xsl: pretty indenting. Top level
	  widget is no longer handled in /UI but in a widget matching template.
13-Feb-2002
	- Added new tutorial app in apps/tutorial/awstut. This is a small
	  AWS using application that demonstrates how to open and use
	  one simple window. So it is easier to follow than awstest.
	- Added /tmp mount path to vfs (vfs.cfg) which should point to the
	  system dependent location of a temporary directory. This works
	  for unix and windows now. On windows it will first try
	  $(TEMP), if that doesn't exist it will try $(TMP). Otherwise it
	  will use the temp dir in the Windows directory.
	- Added fflush (stdout) to vshell so that it works on mingw correctly.
	- Matze changed map2cs to support angle in info_player_start.
	- Matze removed hugeroom from walktest and cleaned small other things.
	- Matze changed walktest to load camera position AND direction at
	  startup.
	- Matze eleminated angle vector in walktest which fixes the walking
          through space warping portal bug.
	- Fixed several cases in AWS where SCF implementations were not
	  calling SCF_CONSTRUCT_IBASE() from the constructor. This is BAD.
	- Fixed a memory leak in aws on the font server.
	- Philip Wyett did a hack to allow compilation of linex2d. This needs
	  to be looked at in relation to recent changes with FreeType and
	  others.
	- Matt Reda added a flag that controls whether the runloop continues
	  processing events when the window loses focus (the default is NO)
	  on NeXT-derived platforms. This behavior can be toggled from a
	  config file (System.RunWhenNotFocused) and command line
	  (--alwaysruns).
	- Matt Reda fixed the next2d canvas so that it doesn't display
	  [Paused] in the title bar if the run loop is set to never pause.
	- 'res' added missing $/ at the end of VFS.Win32.TTF_PATH. Changed
	  / to $/ in VFS.CP/M.TMP.
	- Norman Kramer removed the GetDimensions() version Philip added
	  since it is not needed (fontserv.h).
	- Christopher Nelson did the following:
	    - Fixed bug which causes awstxtbx.cpp to crash when setting a
	      string that is shorter than the previous string, and when start
	      and cursor are greater than the length, especially in the
	      case of the notorius empty string.
	    - Added:
		1. getPreferredSize and getMininumSize to support layouts.
		2. design change fixing sill SetProperty behaviour.
	    - Update to resolve empty string issue, while keeping memory
	      consumption minimal. If a user attempts to set a caption to an
	      empty string, the SetProperty method detects it and instead sets
	      the caption to a NULL string. It does not keep track of the
	      empty string, which will most likely go away as soon as the
	      user DecRef's it.
	    - Added the awsGridBagLayout class which supports the Java
	      AWT/Swing GridBaglayout exactly as the definition lists.
	    - Added the beginnings of an awsBorderLayout.
	    - Added the base class for all layouts.
	- Philip Wyett fixed unknown M_PI and unitialized angle.
	- Norman Kramer did the following (AWS):
	    - For scrollbars Min, Max, Value and PageSize are now recognized
	      in the .def file.
	    - For scrollbars changed name "Style" to "Orientation" and valid
	      values from fsHorizontal to sboHorizontal and fsVertical to
	      sboVertical.
	    - Added recognition of QSlider which maps to awsScrollbar.
	    - Now also for QWidget some code is generated.
	    - Added the missing translation from QLineEdit to Text Box.
	    - If caption is empty then the whole caption entry is omitted.
	- Matt Reda reports: A constant is declared/defined as "RELATIVE_"
	  but used as "RELATIVE" - changed to declare/define "RELATIVE" so
	  code compiles (aws).
12-Feb-2002
	- Matt Reda moved the event-handling code in the OSX canvases 
	  from the delegate to a new NSView-derived class.  The old code 
	  wasn't detecting right button clicks for some odd reason, but 
	  it works now.  Events are passed back through the delegate.
	- Matt Reda updated the OSX canvases so that when entering/exiting 
	  fullscreen mode, both canvases now fade in/out.
	- Fixed iLoader::LoadLibraryFile() so that it now reports an error
	  when the engine cannot be found.
	- Discovered that iEngine::LoadMeshFactory() and LoadMeshWrapper()
	  don't actually need the classId parameter. They only need the
	  loaderClassId parameter. So I removed that parameter.
	- Added new 'PARAMSFILE' keyword to the loader for mesh factories
	  and objects. This is similar to 'PARAMS' except that the
	  parameters are read from the given file.
	- Added support for HARDMOVE for mesh factories (in loader).
	- Loader will now check if HARDMOVE is allowed for the given mesh
	  object or factory. If not an error is given.
	- The csdemo app now loads materials and factories from a library
	  instead of hardcoding this in the code. This makes it a little
	  bit more general (but still not general enough).
	- Added loader plugin for loading mesh objects of type 'stars'.
	- Generalized csdemo a bit more. It now loads a file called 'world'
	  in demodata.zip which setups the sector and all objects.
	- Norman Kramer added indentation to the output of qt2aws.xsl. Also
	  QListBox and QListView are now recognized. QListBox will map to
	  an AWS listbox with Type ctList and a single column with generic
	  header "Column0".
	- Norman added recognition of QFrame which maps to an awsGroupFrame.
11-Feb-2002
	- Added csMath3::SpherePosition() which calculates the position
	  on a unit sphere given two angles.
	- Matt Reda fixed a bug in the explosion plugin which would cause
	  the dynamic light that is created by it not to be deleted at
	  destruction time.
	- Philip Wyett did a quick hack to make freefont 1 plugin compile
	  while in transition.
	- Wouter added from Rene Dudfield:
	  A preprocessor for header files to be used for swig. See README
	  for more details including a TODO.
	- Wouter Wijngaards added command line options for swig to make
	  doc strings for the python wrapper.
	- Norman Kramer added fsNone style for frames and extended the
	  controls already using frame styles with fsNone (and fsFlat that
	  was missing in some cases). Also added frame styles and image view.
10-Feb-2002
	- Philip Wyett updated freefont 2 plugin makefile for successful
	  compilation with MSVC. Also updated msvc_libs adding FreeType 2.0.8.
	  Note: This version of FreeType2 is a mod version from the official
	  Freetype 2.0.8 distro. This is due to the poor quality of MSVC
	  project file maintenance where the output filename does not match
	  the distro release number (2.0.6 is outputted and not 2.0.8 as it
	  should be. Fixed by me).
	  Also the Freetype project uses an absolutley stupid method for
	  #include which MSVC really does not like. In certain circumstances I
	  have worked around this in the Free Font 2 MSVC project file and
	  in some cases by hardcoded includes.
	- Norman Kramer did the following:
	    - Added notion of baseline (which happen to be 1 for all the
	      standard fixed fonts :)
	    - This makes csfont prepared for using with WriteBaseline.
	    - Note I leave the xfont thing in linex2d untouched since it only
	      uses a single hardcoded font (or maybe this should be made a
	      more general fontserver and placed in plugins/font ?)
	    - Added warning about using freefont/freetype1 in a commercial
	      product.
	    - Added first version of an extensible stylesheet to transform
	      QT designers .ui files to aws .def files.
9-Feb-2002
	- Norman Kramer did the following:
	    - Added WriteBaseline () to iGraphics2D. This will come in handy
	      for writing with differently sized fonts having all letters on
	      a baseline.
	    - Currently only freefont2 is prepared for being used with
	      WriteBaseline (and with the old Write), gonna prepare the others
	      tomorrow.
	    - Added new versions of GetGlyphSize, GetGlyphBitmap and
	      GetDimension to the iFont interface which return information
	      about offsets of the glyphbitmaps upper left point to a
	      penposition (which sits on the baseline).
	    - Changed major version of iFont to 2.
	    - Extended csfont and the xfont (in linex).
	    - Extended protex iGraph2d in the opengl renderer with
	      WriteBaseline.
	    - Added dummies for the new iFont interface (to freefont plugin).
8-Feb-2002
	- Matt Reda added support for displaying on any monitor on OSX
	  systems with more than one monitor.  Also added small
	  performance improvement to the OSX software canvas.
	- Matt Reda changed the pixel formats used by the base OpenGL canvas
	  to correspond to the pixel formats used by the software renderer.
	- Matt updated the OSX canvases to support being placed on a specific
	  screen for machines with more than one monitor/videocard. This can
	  be controlled with the "--screen" command line switch or
	  "Video.ScreenNumber" in video.cfg.
	  This is untested as I only have one monitor
	- Matze fixed a bug in csHashIterator - it was returning already
	  deleted elements in some special cases.
	- Philip Wyett did the following:
	    - Fixed bug described by Paul Berg "-fs under 16bpp" on CS Main
	      Mailing list (ddraw canvas).
	    - Also took the opportunity to restructure HDC to use member
	      variable rather than having many local versions.
	- Christopher Nelson added the proper stuff to AWS for fsBitmap style
	  windows. This code is tested and works fine. Note that if you specify
	  a window as fsBitmap, it currently does not try to be an engine
	  view. That's pretty easy to fix though.
	- Christopher fixed it so that Bitmap windows draw an engine view if
	  they are engine windows. This can let you make neat looking engine
	  views: there is a background bitmap, then the engine is drawn over
	  that, then there is an overlay bitmap.
7-Feb-2002
	- Christopher Nelson reports that the bigterrain mesh object now
	  compiles with no errors. But it still doesn't work.
	- Christian Bayle added the directory CS/scripts/debian.
6-Feb-2002
	- Matt Reda fixed a bug in the OpenGL renderer which caused
	  fades (F5 in walktest and fade effect in csdemo) not to work
	  correctly anymore.
	- Fixed a bug in iRenderView::TestBSphere(). This bug was fixed
	  some time ago in iRenderView::ClipBSphere() but I forgot
	  to fix TestBSphere() too.
	- Fixed a bug which affected visibility testing of objects in a
	  sector using octree which was seen through a mirror. The
	  mirror caused culling to be wrong. This means that mirrors now
	  work properly if included with the culler object (i.e. the object
	  using VISTREE() setting).
	- Fixed a stupid bug in the engine which prevented Blocks from
	  working properly.
	- When traversing a portal that is located in a sector using
	  c-buffer visibility culling then we have to clear the c-buffer
	  for the area of the portal. This used to be done in the portal
	  class but the problem is that we do it all the time then even
	  if the sector doesn't use c-buffer (i.e. we do it as soon as
	  the c-buffer is used globally). I moved this code to the polygon
	  drawer because then we can do it only when it is really needed.
	- Philip Wyett removed Squawk and all associated files.
	- 'res' changed some settings for freetype2 plugin.
	- 'res' swapped some pixel layouts in csOpenGLProcSoftware::Prepare().
	  Software renderer proctexes seem to work now (at least for me).
5-Feb-2002
	- Matt Reda update Next makefile to support new method of locating
	  CS installation. OpenStep and MacOS X versions no longer use
	  $CRYSTAL environment variable to locate CS installation directory.
	  It now uses the 'defaults' database value CrystalSpaceRoot
	- Matt fixed OSX so that if it does not find CrystalSpaceRoot in the
	  defaults, it will check the CRYSTAL environment variable.
	- 'res did a few small fixes to OpenGL renderer.
	- Norman Kramer added a font server plugin for the FreeType2 engine.
	  It is not yet enabled by default (edit mk/user.mak).
4-Feb-2002
	- Matt Reda fixed leaking ball mesh factory in demosky2.
	- Matt also reports: In csProcSky::GetSkyBlue(), started by fixing
	  some of the typecasts to int then switched to storing intermediate
	  values as floats and rounding the final value. This should give
	  more accurate result than the old method, which truncated the
	  calculated value to an int after every calculation. 
	- Norman Kramer did the following:
	    - Made the cursor in the AWS textbox to blink.
	    - Ok, since christopher didn't reply to my mail I go ahead and
	      change the mousehandling for the captured mouse case the way I
	      think it should be. I only let the capturing component work the
	      event since no other component should be able to do it (that was
	      the reason the component captured the mouse in the first
	      place) - this solves the magic following of the scrollbar knob.
	    - Awstimer now only hooks itself onto the eventqueue when its
	      Start()'ed and removes itself if Stop()'ed. Otherwise the amount
	      of timers idling in the eventqueue can easily add up.
	    - Fixed dragging knob which sometimes didn't get to the min/max
	      value.
	- 'res' did the following:
	    - Software proctex renderer works again (but flawed).
	    - Backbuffer proctex renderer works again (but flawed).
	- Christopher Nelson added the beginning of implementation for the
	  bigterrain mesh object.
3-Feb-2002
	- Philip Wyett eliminated more truncation and conversion between
	  types warnings under MSVC. Note: MSVC does not like float values
	  being expressed as '.0' or '0.' and always likes you to
	  use a trailing 'f' if you are allocating a value to the float type.
	- Philip also moved some code to user qsqrt() instead of sqrt()
	  where appropriate.
	- Philip fixed performance warning (forcing int to bool).
	- Philip fixed qsqrt() for MSVC adding a COMP_VC specific portion
	  and eliminating all the double to float conversion warnings the
	  old code generated.
	- Began fixing inconsistencies of float and double in physics library.
	- Matze fixed a 'no newline at end of file' warning (mmapio.h).
	- Norman Kramer made the following changes to AWS:
	    - Made the properties in awsCmdButton protected (instead of
	      private) so the new awsSliderButton can access them (well I
	      could have add accessor methods but I prefer it that way - feel
	      free to change it).
	    - Added a new descendend of awsCmdButton, the awsSliderButton
	      which fires signals every n Ticks which can be configured via
	      SetProperty.
	    - awsScrollBar class now uses awsSliderButton controls for the
	      dec/inc handle and the knob - which mean you can keep them
	      pressed (and the knob can be moved around) and they'll send
	      out signalChanged signals. Also the area where the knob moves
	      reacts to button pressed events now.
2-Feb-2002
	- Toxe fixed a brand new bug in csMeshWrapper::HitBeam().
	- Philip Wyett eliminated ATOM to bool warning while registering
	  class (win32.cpp). Net method leaves no need for assertion on
	  bResult, this this has been removed.
	- Philip fixed several files to stop MSVC complaining about
	  assignment inside evaluation expression and maintained execution
	  order.
	- Philip fixed a few truncations from double to float (mainly in
	  csgeom and csengine).
	- Norman Kramer set the initial value of 'stopped' to true (for
	  awstimer), so that after first call to SetTimer() you must
	  call Start() to get going.
	- Wouter Wijngaards reports: the haze.h include file was using
	  CS_SPRITE2D as the header #define. Changed it so the two no longer
	  conflict.
	- Philip fixed class access violation under MSVC 6 (bitary2d.h).
1-Feb-2002
	- Tobias Brueckner (Toxe) fixed a bug in the OpenGL 3D renderer that
	  caused it to crash when rendering materials that only had an
	  assigned flat color and no texture.
31-Jan-2002
	- Fixed a long-standing annoyance in WalkTest. WalkTest was able
	  to load levels in the following cases:
	    - If the level was mounted in vfs.cfg you would just say
	      walktest mounted_name
	    - If the level was not mounted but it was either in the current
	      directory, the data directory or the data directory of the
	      parent, WalkTest would automatically mount it. However you
	      could not use the '.zip' extension then.
	  I extended the last feature so that you can now also use the
	  full filename with extension. If WalkTest finds there is already
	  an extension included it will not try to add its own extension.
	  In addition you can now give a full pathname so walktest can load
	  levels from everywhere without requiring a mount in vfs.cfg.
	- Wouter Wijngaards modified the "Queen of all CS includes" (css.h)
	  to now include everything in CS that an app can use. (Not platform
	  specific stuff). Using #defines some parts can be left out if
	  desired.  Note this file should only be used by projects external
	  to CS.
	- Philip Wyett fixed forward declaration errors and variable
	  redefinition errors in the MSVC port.
	- Philip eliminated a couple of unitialized variable warnings.
	  One is a very MSVC specific complaint.
	- Philip removed various other warnings (MSVC specific).
	- Philip eliminated the assignments within conditional expression
	  warnings under MSVC and also cleaned up some code.
30-Jan-2002
	- Added iEngine::FindLight().
	- Improved comment with iCamera::GetHit().
	- Further work on tree loader. Still not completely functional.
	- Christopher Nelson added alpha version of the large terrain
	  renderer's implementation to the mesh directory. Currently it's just
	  the simple header file that contains all the implementation code.
	  I still have to connect it to the genmesh plugin somehow and do some
	  tests on it. Also, it has no provision for texturing at the moment.
29-Jan-2002
	- Jorge Acereda changed the MD2 importer so that it recognizes 
	  sprite actions. Also, scaling and axis conventions are now
	  coherent with mdl2spr. I hope nobody was using it :-)
	- Jorge also fixed frame timing.
	- Some further experiments with tree generation. Unfinished.
	- Further work on tree. At this moment it doesn't even resemble
	  a tree :-) I'm still debugging. Added texture mapping.
        - Matze added a null canvas for the null 3d renderer, this makes it
          possible to use CS on dedicated servers that can't display
	  anything.
	- Matze fixed destruction (memory leak) of null 3d renderer.
28-Jan-2002
	- Seperated geometry and rule in the tree generator. This will make
	  it easier to setup better rules.
	- Matze changed annotation to include a link to the page in the e-mail
	  and mangles e-mail adress.
	- Matze finally fixed all issues with sky in map2cs (well it works
	  although it could be improved a bit).
	- Matze fixed a sky issue in map2cs.
	- Christopher Nelson did the following:
	    - Added new function: AllWindowsHidden(), which returns true if
	      all windows in the system are currently hidden.
	    - Added new parameter for CaptureMouse which lets you specify the
	      component that wishes to capture the mouse. Note that only this
	      component or it's children will recieve messages until release
	      is called.  
	    - Fixed previously broken functionality where moving from a
	      component to the window wouldn't send out MouseEnter/Exit
	      messages. There was a slight bug in awsTextBox that was
	      breaking this. For future note:  if you want to get focus
	      messages and keep them, you must override all the mouse events
	      to return true. Otherwise the window will take back the focus
	      because it assumes that the component has not handled and does
	      not want focus.
	- Philip Wyett added AUTHORS and COPYING to .cvsignore.
27-Jan-2002
	- Norman Kramer added GetObjectRegistry() to iAws interface. Components
	  didn't have a chance to get their hands on the registry otherwise.
	- Norman also added a timer class to AWS to give pulses for cases no
	  new event is generated but actions should happen (think: keeping the
	  mouse pressed on a scrollbar button).
26-Jan-2002
	- Matze fixed skybox generation in map2cs
	- Added missing initialization of do_manual_colors to genmesh
	  object. This could cause wrong colors in some cases.
25-Jan-2002
	- Added a new GenerateBox() to iGeneralFactoryState. With this you
	  can automatically generate a box for a general mesh.
	- Extended the standard general mesh loader with a new BOX keyword
	  (for factories).
	- Added Get/SetMaterialWrapper() to iGeneralFactoryState. It is now
	  possible to set a material for the factory. When the mesh object
	  itself will not have a material it will use the one from the
	  factory.
	- Added MATERIAL keyword for the general mesh loader (for factories).
	- Completely removed the cube mesh object plugin and also its
	  associated loader. The functionality provided in the cube plugin
	  can be emulated completely with the genmesh plugin.
	  Keep in mind to call CalculateNormals() or use AUTONORMALS()
	  for genmesh so that the normals are calculated automatically.
	- Completely removed the surface mesh object plugin and also its
	  associated loader. Use genmesh.
	- Improved shape of the tree.
	- Eric Sunshine fixed campos.cpp so that it compiles on NextStep.
	- Eric Sunshine eliminated a compiler warning from rview.cpp.
	- Eric Sunshine eliminated compiler warnings from walkcmd.cpp.
	- Eric Sunshine fixed gtreeldr.cpp so that it now compiles on NextStep.
	- Eric Sunshine fixed a problem where both the engine and the Thing
	  mesh plugin were publishing the crystalspace.mesh.object.thing class,
	  which caused linking errors when attempting to load the plugin.
	- Matze hacked map2cs, because it had a problem: It was using CS
	  config files without loading vfs plugins etc...
	  This hack doesn't use vfs files anymore now, but reads CRYSTAL var
	  itself and composes $CRYSTAL/data/config/map2cs.cfg as config
          path...
	- Matze fixed map2cs skybox export by addiong MOVEABLE() to PARAMS
	  section, still the texture mapping seems incorrect
	- Brandon Ehle did various doc fixes with hbox and item bugs.
	- 'res' split the Windows Help files into two projects: docs and api.
	  Also added a script to create pretty TOCs/indices.
	- Christopher Nelson did the following:
	    - Made the system specializations more friendly. Now they exist
	      inside of the csosdef.h file for each platform. In order for an
	      implementation file to see them they should define
	      CS_SYSDEF_PROVIDE_HARDWARE_MMIO before the cssysdef.h include.
	      This will provide a structure called mmioInfo, and two
	      	functions: MemoryMapFile and UnMemoryMapFile.
	      These are platform dependent. mmioINfo is semi-opaque, meaning
	      that data and file_size members should ALWAYS be defined as they
	      are. It may contain as much additional information as the
	      platform requires.
	    - Modified the software demand pager so that it conforms to the
	      same template as the hardware one. Removed all the system
	      defines from the mmapio.h and mmapio.cpp files.
	    - Moved a couple more items around, moved all software portions
	      so that they won't be generated for hardware compiles.
	    - Moved the includes specific for mmap into the #ifdef so that
	      they'll only be included for modules that want them.
	    - Added definitions for the Mac.
	    - Made the inline function really inline.
	    - Fixed some silly bugs in the software demand pager: lack of
	      initializations, inverse check error, bad bit-field length
	      calculation, bad checks.
	    - Made a couple of fixes, and added hits and misses to the
	      software cache set so that you can tweak it.
	    - Killed the mods out of the classic Mac port.
	    - Added the mods into the next port, since that also works with
	      OS X stuff.
	    - Update, fixed a couple of dumb bugs: cache size was not
	      initialized before trying to allocate memory of
	      block_size * cache_block_size, so it was attempting allcoate
	      way too much RAM.
	    - Fixed Windows hardware memory-mapped I/O code. I was under the
	      impression that I should use one function when, in reality, I
	      needed to use another. Instead of simply using OpenFileMapping,
	      you must CreateFile(), then CreateMapping(), then MapViewOfFile().
	      This code has been tested and works.
24-Jan-2002
	- Jorge Acereda relaxed a limit in 3ds2lev that made it crash
	  with scenes with more than 100 textures.
	- Made general mesh factory a bit safer so that you can now
	  safely set the number of triangles after initializing the
	  vertices. Previously setting another number of triangles
	  would clear whatever was set in the vertex arrays before that.
	- Added experimental tree generator. This is basically an alternative
	  loader for the new genmesh mesh object. Instead of creating a
	  genmesh the usual way it will generate a tree instead. At this
	  moment this code is very experimental and not meant to be used.
	- Brandon Ehle added cal3d to CS tutorial.
	- Christopher Nelson did the following:
	    - Added headers for the new memory-mapped I/O stuff.
	      Note that it looks for some bogus defines. The only one I'm
	      pretty sure of right now is the WIN32 define.  
	      Note also, that there currently is no _HAS_MEMORY_MAPPED_IO_ in
	      the build, so that code will never compile, which means that
	      right now everything falls back to software. The hardware code
	      is in place, but I don't know if it will even compile because
	      I haven't tested it yet.
	      The mmio.cpp file compiles under MSVC, but I haven't tested it
	      under any other platforms.
	      Hopefully it doesn't cause any serious problems!  Note that the
	      code isn't quite complete yet.
	    - Added the implementation for memory mapped i/o.
	    - Filled in demand paging section for reading the cache. Uses
	        1. Old, inactive blocks.
		2. New block if we have space.
		3. Least-used block in bucket.
	    - Finished software demand pager.
	    - Removed inactive blocks list since it was unused.
	    - Simplified the cache system slightly, which removed one
	      additional indirection. This should result in a slightly faster
	      implementation.
	    - Modified the code slightly to include LookupIndex right inside
	      GetPointer. This will probably increase it's chances of being
	      inlined, and remove an additional function setup/teardown even
	      if it doesn't.
23-Jan-2002 
        - Jorge Acereda fixed LoadCamera() (crashed if the sector
	  wasn't found). Rewrote it to be more robust and coherent
	  (either loads all parameters or none).
	- Renamed all BOX_ constants in box.h to CS_BOX_. This includes
	  BOX_CORNER_..., BOX_EDGE_..., and BOX_SIDE_...
	- Renamed POL_FRONT, POL_BACK, POL_SAME_PLANE, and POL_SPLIT_NEEDED
	  so that they also start with CS_.
	- Renamed DECLARE_TYPED_QUEUE to CS_DECLARE_TYPED_QUEUE.
	- Created a new general mesh object. This is simply a static mesh
	  rendered with DrawTriangleMesh(). It doesn't support animation
	  except that you can directly alter the vertices in the mesh
	  if you want. For static objects that don't require any special
	  features like animation or such this is a good alternative to
	  3D sprites. The factory of this object contains the geometry
	  so it is very efficient to make multiple instances of this object
	  (just like 3D sprites).
	- Added a loader for the new general mesh objects. Added an example
	  to flarge so you can see how it works.
	- Added the ability to automatically generate normals for
	  the general mesh object.
22-Jan-2002
	- Created a crystal-docs mailing list. The doc annotation script
	  will now send mail to that mailing list.
	- Jonathan Tarbox updated the BeOS port so that it works again.
	- Matze fixed quoted slashes and makes e-mail unreadable for search
	  engines (avoid spammers) (for annotation).
	- Matze also added IP and user agent logging in the XML files.
	  Format of time has been modified.
	- Matze added a comment about circular list in doxygen comment
	  of csdllist.h.
21-Jan-2002
	- Tobias Brueckner suggested a fix for OpenGL with materials
	  that have no associated texture. The fix was incomplete
	  so I tried to complete it. At this moment the OpenGL renderer
	  no longer crashes but the color is still not used. Have
	  to investigate further.
	- Fixed a bug in the engine which caused crashes if a material
	  was defined without a texture.
	- Fixed the OpenGL renderer so that it now properly combines
	  the color defined in the mesh with the color specified in the
	  material (for materials which have no texture). This way it
	  behaves like the software renderer. Note that this is only
	  for DrawTriangleMesh for now.
	- Reformatted some new code in genmaze a little bit.
	- Fixed a bug in the engine in relation with materials without texture
	  in combination with mixmode settings different from CS_FX_COPY.
	- Eric Sunshine fixed spoofdir.php so that it now correctly interprets
	  PHP files within the virtual directories, rather than sending those
	  files back to the client's browser as raw text.
	- Eric Sunshine upgraded jobber.pl so that it can now run an optional
	  post-processing step on files generated for online browsing.  In
	  particular, it now runs a script which sets up the User's Manual and
	  the API reference to accept user-annotation.
	- Made csPortal::SetFilter() safer.
	- FINALLY fixed CAMERA objects for real. CAMERA objects will now
	  at last mirror correctly :-)
	  I fixed the problem by moving the object instead of the camera.
	  This is actually more logical and a lot easier. No more
	  transformation magic.
	- Eric Sunshine augmented spoofdir.php so that it now sends all global
	  variables to PHP files requested by the client; ensures that all
	  elements of the URI query-string are made available to the requested
	  PHP script; and ensures that $PHP_SELF is correctly set for the
	  requested script.  These modifications should now allow PHP scripts
	  requested via spoofdir to operate normally.
	- Eric Sunshine fixed the HTML tables which were being constructed by
	  CS/docs/support/annotate/annotate.php to display the annotations.
	  They were totally bonked; were not closed with </table>, and in some
	  cases, the rows were not introduced with <tr>.  Also fixed the colors
	  so that the text can be read.  Finally, made some formatting
	  improvements.
	- Eric Sunshine augmented annotate.php so that it now stores and
	  displays the date/time of annotations.
	- Matze did the following:
	    - Made output of annotate.php a little bit nicer.
	    - Removed the unneeded "click here to view your new entry".
	- Philip Wyett updated 3ds2lev.mak to add new msvc_libs info and
	  links. Also for msvc documentation.
20-Jan-2002
	- Tobias Brueckner did the following:
	    - Fixed a potential initialization bug in the GLX OpenGL
	      canvas (for Unix).
	    - Fixed a crash bug in the terrain mesh object when
	      BLOCKS(4,4) and GRID(4,4) was used (same values).
	- Matze added iSector::GetName().
	- Removed iSector::GetName() again after Matze added this.
	  Please use sector->QueryObject()->GetName().
	- Philip Wyett added initial documentation for successfully building
	  Crystal Space with Visual C++ .NET (MSVC 7) due to be released to
	  the public on the 13th, Febuary. The docs include a link to the new
	  msvc7_libs which is solely for users of MSVC 7.
	- Matt Reda did the following:
	    - Fixed memory leak and small error where simplept was reporting
	      itself as simple1.
	    - Moved pixel format #defines (CS_24BIT_PIXEL_LAYOUT) out of
	      pixtype.inc and into their own header (pixfmt.h). This was
	      necessary because the constants are also needed in the OpenGL
	      renderer (for procedural textures).
	    - Modified OpenGL proctexes to use the same framebuffer order
	      constants (CS_24BIT_PIXEL_LAYOUT) as the software renderer.
	    - Added new file to define CS_24BIT_PIXEL_LAYOUT for platforms
	      that do not explicitly define it. The values are assigned based
	      on endianness in order to maintain the old behavior.
	    - Changed CFLAGS.SOFT3D.PIXEL_LAYOUT to CFLAGS.PIXEL_LAYOUT since
	      these flags are now also used for the OpenGL renderer.
19-Jan-2002
	- Richard Uren made the following changes to isotest app:
	    - The code that was in isotest.cpp which looped through each
	      (x,y) pair was cleaned up and moved to
	      csGenMaze::ActualSolid.  csGenMaze::ActualSolid(x,y) returns
	      true if a cell is solid or false if it is empty - makes it
	      simple to render a maze.
	    - It adds csGenMaze::PrintMaze() which prints a random maze in
	      ascii. Maze debug code removed from isotest.cpp
	    - It adds csGenMaze::ActualWidth() & csGenMaze::ActualHeight()
	      which both return either the width or height of the maze
	      with walls taken into account.
	    - AddWall() in isotest.cpp had a few fixes to render walls
	      correctly.
	- Diablo-D3 (unknown@panax.com) rewrote the autoconf macro from 
	  scratch. The code is now cleaner, has more standard naming and
	  can even check for a minimum CS version number.
18-Jan-2002
	- Greatly enhanced and clarified the comments for the
	  csTransform, csReversibleTransform, and csOrthoTransform classes
	  in the reference manual.
	- Enhanced the reference manual documentation for csPlane3.
	- Changed the default behaviour of csPlane3::ClipPolygon(). It will
	  now by default clip the polygon on the negative side of the plane
	  (as opposed to positive before). You can still get the old behaviour
	  back by using reversed=true as the third parameter.
	- Added a static version of csPoly3D::Classify().
	- Changed the far-plane handling code to use Classify() instead
	  of ClipPolygon(). This means that polygons will no longer be
	  clipped to the far plane (which is inefficient anyway) but only
	  rejected/accepted. If a polygon is fully behind the far plane
	  it will be rejected.
	- Added SetFarPlane(), ClearFarPlane() and GetFarPlane() to
	  iCameraPosition. With this you can set the far plane for cameras
	  initialized from the camera position.
	- Added FARPLANE(a,b,c,d) keyword while parsing START() block in map
	  files. With this keyword you can now set the far plane in a
	  map file.
	- Removed the old csBeing references in walktest.
	- Reformatted crysbal.cpp a bit.
	- Updated apimod94.txi.
	- Slight code cleanup: removed all trailing spaces and tabs from
	  all lines in all source and make files throughout the entire project.
	  Note that this will most likely not result in a significant
	  FPS increase :-)
	- Matze added a first version of the annotated user manual hack.
	- Matze fixed GNUC_PRINTF in reporter.h.
	- 'res' fixed a single-line comment containing line-continuation
	  character.
17-Jan-2002
	- Jorge Acereda made the following changes:
	    - Added a comment to iGraphics2D::Write() to document the
	      fact that a negative background color will not draw
	      background.
	    - Fixed a bug in the MDL/MD2 converter. Short values where
	      incorrectly promoted to int when calling convert_endian().
	    - Changed some type definitions on things intended to be
              saved to disk to make them 64bit-friendly.
	- Removed the iCamera::SetUnmirroredCameraPos() function again
	  (and fixed iso engine for this). This turned out not to be the good
	  way to solve the bug of mirroring CS_ENTITY_CAMERA objects.
	- Added iRenderView::GetOriginalCamera(). This will return the original
	  camera before any space warping transformation occured.
	- Using the above new function it is now possible to correctly
	  render mesh objects with the CS_ENTITY_CAMERA flag set even through
	  space warping portals.
	- Matt Reda uncommented a DecRef() in CreateMipmaps() that was leaking
	  an iImage.
	- Philip Wyett removed a #warning for a comment (isoview.h) as it is
	  causing a fatal error in MSVC port.
	- Philip also reverted the change of 'res' yesterday as it was
	  forcing fullscreen by default. Later Philip re-implemented the code
	  with one fix and a minor alteration.
	- Philip fixed a typo in the msvc documentation pointed out by RobEG.
16-Jan-2002
	- Matt Reda fixed a memory leak in csIsoEngine::CreateMeshFactory().
	- Fixed a bug in iRenderView::ClipBSphere() in combination
	  with mirroring and a portal that clips geometry.
	- I discovered that there is a bug when a CAMERA object
	  (CS_ENTITY_CAMERA keyword, like a sky-box or sky-dome) is
	  mirrored. The position will then not be correct in the
	  mirror. To try to solve this bug I extended the iCamera
	  interface with SetUnmirroredCameraPos(). At this moment
	  the bug is still not fixed though.
	- Switched ball plugin to use ClipBSphere instead of ClipBBox.
	- Implemented slightly better edge drawing capabilities in
	  OpenGL renderer. This time the real edges of the triangles
	  are shown instead of what the OpenGL renderer will render
	  with glDrawElements. This is only for DrawTriangleMesh() at
	  the moment.
	- Philip Wyett fixed some msvc docs. Fixes pointed out by Wyatt Miler.
	- Andrew Zabolotny did an attempt to fix qsqrt() for gcc 3.0.3 and
	  later. If it causes qsqrt() to not work with gcc 2.95.2 and earlier,
	  it should be reverted back (although I don't believe the changes
	  will break it with earlier compilers).
	- Jorge Acereda did the following:
	    - Fixed a bug in the MDL/MD2 converter. Short values where
	      incorrectly promoted to int when calling convert_endian().
	    - Changed some type definitions on things intended to be saved
	      to disk to make them 64bit-friendly.
	    - Fixed building of iso engine after a few new methods were
	      added to iCamera.
	- 'res' fixed some window/fullscreen and palette issues in the ddraw
	  canvas.
15-Jan-2002
	- Changed iIsoEngine::CreateMeshFactory() to return
	  iMeshFactoryWrapper instead of iMeshObjectFactory.
	  It also no longer does an incref on the returned factory if
	  the factory already existed.
	- Added iEngine::SetClearZBuf() and GetClearZBuf(). With these
	  functions you can let GetBeginDrawFlags() return that the Z-buffer
	  has to be cleared every frame.
	- Added a new SETTINGS section in the map loader. This block will
	  be used to contain level specific settings for the engine and
	  other plugins. At this moment this block can only contain the
	  CLEARZBUF(yes/no) keyword which will call SetClearZBuf() with
	  the given parameter. Using this new keyword it is now possible
	  to make levels that don't have any other way to initialize the
	  Z-buffer. Normal CS levels should initialize the Z-buffer themselves
	  by making sure that the outer polygons of the level are rendered
	  with ZFILL mode. Sometimes this is not possible, or sometimes it
	  would be more efficient to let the hardware clear the Z-buffer
	  in one go and then use the Z-buffer (i.e. for space type levels).
	  That's why this flag is useful.
	- Matze fixed a serious bug in csMemFile: It wasn't increasing file
	  postion while reading. (Seems like no one ever used this...)
14-Jan-2002
	- Matt Reda added 3 OSX drivers (2 canvases and an audio driver)
	  and updated various Makefiles to support these changes.
	- 'res' changed error handling in the waveoutsd sound driver.
	- Fixed a bug in the OpenGL renderer which 'res' introduced
	  by forgetting to test if txt_mm is non-NULL in FlushDrawPolygon().
	- Eric Sunshine committed the following changes on behalf of Matthew
	  Reda <mreda@mac.com>:
	    - Augmented csosdefs.h, macosx.mak, NeXTFrameBuffer32.cpp,
	      next.mak, pixtype.inc, scf.cfg, and sof3d.mak in preparation for
	      brand new OpenGL, CoreGraphics, and CoreAudio drivers Matthew
	      wrote for MacOS/X.
	    - Added CS_SOFT3D_24BIT_PIXEL_LAYOUT which allows platforms to
	      manually specify the pixel layout used by the software renderer,
	      rather than making the decision based upon endianess.  Platforms
	      which do not specify this fallback to the old behavior of pixel
	      layout being determined by endianess.  Apple/NeXT uses this new
	      capability to specify a uniform pixel layout regardless of
	      architecture.  This change allows a nice speed increase in the
	      CoreGraphics driver by eliminating the need to post-process the
	      pixel data.
	    - Added PowerPC-specific versions of qsqrt() and qisqrt() for use
	      by Macintosh (and any other PowerPC-based computers).
	- Eric Sunshine fixed csThing::SetCacheName() so that it once again
	  compiles successfully on NextStep.
	- Eric Sunshine fixed csLightPatchPool::Free() so that it now compiles
	  on NextStep.  Compiler was making apparently bogus complaint about
	  invocation of Free() in the parent class' parent class.
	- Eric Sunshine fixed the next2d canvas so that it once again displays
	  the correct colors in 32-bit mode following changes by Matthew Reda.
	- Philip Wyett added a few of the newer msvc_libs files to .cvsignore.
13-Jan-2002
	- Matze changed cs-config --version to only output major number, the
	  --longversion outputs all.
	- Philip Wyett updated docs to reflect new release of msvc_libs
	  (0.92d).
11-Jan-2002
	- Matze removed DEBUG_BREAK_MSG again :) csString is using CS_ASSERT
	  now.
	- 'res' replaced CRASH macro with DEBUG_BREAK.
	- 'res' modifed the standard reporter to have a different default
	  behaviour in debug mode (CS_DEBUG).
	- 'res' fixed a missing ';' for csstring.h. Compiles with MSVC again.
	- 'res' changed _control87 to csControl80x87 after Matt Reda pointed
	  it out.
10-Jan-2002
	- Matze added an autoconf macro for CS to scripts/cs-config, no
	  documentation on usage yet, but I think it should be clear how to use
	  it if you know autoconf.
	- Matze fixed a strange compiler warning in csobject.cpp (I had to add
	  a iObject() to the initializer list in the copy constructor, anyone
	  knows why this is needed?)
	- Matze also fixed a few warnings.
	- Andrew Zabolotny fixed the OS/2 port of CS. Also renamed the
	  _control80x87 debugging function to csControl80x87 to avoid
	  conflicts with same name routine from emx libc.
	- RedEye Entertainment added #defines to walktest and squawk
	  to make MSVC ignore the csControl80x87 changes of Andrew.
	- 'res' made map2cs tutorial use a little bit less disk space.
	- Philip Wyett fixed new DEBUG_BREAK_MSG and added define so MSVC
	  can compile without errors.
	- 'res' fixed csControl80x87 so that it works again with MSVC. 'res'
	  then removed the MSVC specific #ifdef's from walktest and squawk.
	- 'res' added DEBUG_BREAK macro and removed #define DEBUG_BREAK_MSG.
	- Philip Wyett added 'required' to the msvc documentation for the
	  BisonFlex library as it is needed for successful linking.
9-Jan-2002
	- RedEye Entertainment fixed make errors introduced by Andrew yesterday.
	- Eric Sunshine applied a much saner patch to the makefiles to combat
	  the breakage caused by AndyZ's makefile change.  Reverted a patch
	  which Philip Wyett made to cygwin.mak since the new saner patch
	  should make the cygwin.mak patch unnecessary.
	- Matze added DEBUG_BREAK_MSG macro to cssysdef.h in order to avoid the
	  STR_FATAL macro in csstring.h (perhaps this will also useful for
	  other apps). Problem here is win32 as I had to use printf (or is
	  there a way to access the reporter wihtout having a pointer to
	  iObjectRegistry?).
	- Matze added operator == const char* to csString.
	- Matze added operator = for various types to csString.
	- Smaller cleanups for csString - there's still MUCH room for
	  optimisation.
8-Jan-2002
	- Reverted a change to the png loader plugin (in the saving part)
	  that 'res' made some time ago. It caused quality degradation when
	  writing a big bunch of thumbnails using gfxtest.
	- Eric Sunshine fixed a problem introduced by AndyZ when he modified
	  os2gcc.mak.  His change unconditionally set the makefile SHELL
	  variable to the empty string for all platforms except OS/2, thus
	  resulting in the "make: -c: Command not found" error message
	  experienced by non-OS/2 ports.
	- Eric Sunshine fixed the next2d canvas so that it once again builds
	  successfully.  It broke on 2001/12/27.
	- Eric Sunshined changed the next2d canvas so that it no longer bothers
	  to register the iEventHandler implementor with the event queue in
	  NeXTDriver2D::Initialize(), since its superclass'
	  csGrahpics2D::Initialize() already does so.  (No need to register the
	  same event handler twice.)
	- Eric Sunshine eliminated several compilation warnings from AWS.
	- 'res' did a fix to the png image loader.
	- Andrew Zabolotny fixed os2gcc.mak so that it always overrides
	  SHELL with $(COMSPEC) to avoid a problem with Unix shells.
7-Jan-2002
	- Corrected the includes in the collision detection howto.
	- Extended iLoader::LoadTexture() with a 'register' parameter which
	  is default false. When set to true the loader will register and
	  prepare the texture and material automatically. This is only
	  for the version of LoadTexture() that accepts a 'name' and
	  'filename'.
	- Modified the simple2 tutorial for the above change (i.e.
	  simplified it).
	- Renamed VEC_FORWARD and other similar defines to CS_VEC_FORWARD
	  (i.e. follow CS conventions). Also updated apimod94.txi for this
	  change.
	- Renamed DEFAULT_LIGHT_LEVEL to CS_DEFAULT_LIGHT_LEVEL.
	- Renamed NORMAL_LIGHT_LEVEL to CS_NORMAL_LIGHT_LEVEL.
	- Removed CS_ENTITY_BACK2FRONT as this flag is obsolete and now
	  handled by the render priority system. It was not implemented
	  anyway.
	- Deleted obsolete include/iengine/terrain.h include file. This
	  was apparantly forgotten a long time ago.
	- Rationalized many of the engine Doxygen comments. i.e. added
	  more documentation for possible CS_... values where they can
	  be used. Also updated some out-dated documentation and also
	  added missing entries.
	- Updated docs so that it no longer says CS only works with
	  Python 1.5.2.
	- Matze changed aws to use bison/flex if present.
	- Matze included a hacked flex skeleton file to avoid an msvc error,
  	  where it can't find unistd.h.
	- Philip Wyett updated links in msvc documentation to correspond
	  with location of latest msvc_libs.
	- Philip also added necessary instructions for building CS Python
	  plugin with versions of Python above 1.5.2.
	- Additionally Philip reports:
	    - Removed *.flx and *.bsn files showing up in the AWS MSVC project.
	      This is no longer needed after MatzeB adding of flex skeleton and
	      no longer needed for custom build step within MSVC.
	    - Updated docs to take account of AWS/Flex changes made by MatzeB
	      and added instructions for re-generating sllex.cpp etc. from the
	      command line rather than from inside MSVC.
	  This makes dealing with AWS and MSVC alot easier - Thanks Matze. :-)
	- Philip also added info about Creative EAX 2.0 to MSVC build docs
	  with link to Creative developers website from where the SDK can
	  be obtained.
5-Jan-2002
	- Fixed a bug with the OpenGL renderer where it was trying to
	  store a value of 0, 1, or 2 in a boolean :-)
	  The result of this bug was that portals which required clipping
	  (like for the console portal command) didn't actually clip at
	  all.
4-Jan-2002
	- Eric Sunshine fixed a bad booboo from some time ago which clobbered
	  csTimer by mutating it into csTicksr.
	- Matze added python.cex to 'make install'.
	- Wouter Wijngaards fixed a spelling error in python.cin.
3-Jan-2002
	- Fixed a bug with the portal console command so that the
	  portal back to the original level is now correct.
2-Jan-2002
	- Fixed software renderer after 'res' broke it.
	- Fixed csparser after 'res' broke it.
	- Fixed OpenGL renderer after 'res' broke it.
	- After fixing the csgfx makefile so that it actually uses all
	  .cpp files in the dir I reenabled the csCreateXORImage() in
	  software, OpenGL, and csparser.
	- Added initialization of 'radius' to partgen.cpp.
	- Fixed partgen/GetRadius() to first call SetupObject(). This will
	  make sure the radius returned by iMeshObject->GetRadius() is correct
	  even before the particle system is first drawn.
	- Fixed iMeshWrapper::PlaceMesh() so that it correctly transforms
	  the bounding sphere of the object it is trying to place. Previously
	  it was doing the inverse transform instead.
	- Further fixed PlaceMesh() so that it finally works as intended.
	- Optimized PlaceMesh() so it first checks if the sector has already
	  been added before doing all the calculations.
	- Changed iMeshWrapper::GetRadius() to also consider potential
	  children. In that case it will calculate the union of all the
	  bounding spheres of the children. As a consequence this means that
	  PlaceMesh() will now also consider children.
	- Fixed a bug in the iRenderView::ClipBSphere() and ClipBBox()
	  routines. They both would handle the portal clip plane inverted
	  which means that objects were culled wrong. The best place to
	  see this bug was to do 'portal sydney' in the console of WalkTest.
	- Matze did a small hack to cspython.mak so it links with -util if
	  python lib matches python2%.
	- 'res' did the following on the OpenGL renderer:
	    - When using keycolored textures, z buffer is only used for
	      non-transparent pixels.
	    - Slight visual improvement of keycolored textures w/ bilinear
	      filtering.
	    - Fixed bug "Using software renderer proctexes with OpenGL causes
	      a crash".
1-Jan-2002
	- Fixed bug [497461] from sf.net. This bug prevented joystick
	  button handling to work properly. Reported by J.F. Miller.
	- Eric Sunshine fixed the following documentation-related problems:
	    - Texinfo mark-up errors (misplaced @end itemize and mistyped
	      @nonterm).
	    - Overfull and underfull `hbox' warnings from TeX.
	    - Invalid use of @c comment on first line of cs-unix.txi,
	      cs-mac.txi, and cs-dos.txi.
	- 'res' updated a few places in CS so that a default image is used
	  when an image file cannot be loaded:
	    - An image file can't be loaded.
	    - A NULL image is registered with the software and OpenGL texture
	      managers.

Please see "history.old" for less recent historical entries.
