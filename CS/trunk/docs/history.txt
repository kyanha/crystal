The history order has been reversed so that new features are at the top.

23-Dec-2000
	- Norman Kramer fixed a bug in the bmp loader.
	- Moved snow, rain, spiral, fountain, fire, and explosion particle
	  systems from csengine to csfx library. Only the basic particle
	  and newtonian particle systems remain in csengine.
	- Found out that materials and textures were not correctly searched
	  in the current region. Fixed csloader for this.
	- Fixed a potential bug with polygons that had no texture. The
	  new Visit() would crash on them. It seems however that there is
	  still a bug somewhere. The portal command is very unreliable now.
	  To be investigated.
	- Extended csLoader::FindMaterial() with a regionOnly parameter.
	- Added csEngine::FindCsTexture() and FindCsMaterial() which return
	  a csTextureHandle and csMaterialHandle respectively.
22-Dec-2000
	- Eliminated a bug in the procedural texture manager for the software
	  renderer.  The problem was that only the first 8-bit proc texture was
	  correctly initialized.
	- Fixed csfx so that there is only one Initialize() method now as was
	  originally intended.
	- Disabled lighting for the fire and water polygons that are created in
	  simple.  Now fire and water will actually look like fire and water
	  without having a green tint (from the nearby green light).
	- Eric Sunshine made the following changes to the project:
	    - Upgraded the NextStep port of Crystal Space to be fully
	      compatible with Andrew's National Keyboard Support.  Implementing
	      this required reverse engineering internal NextStep data
	      structures and writing code to extract the appropriate
	      information.  See the discussion in the new NeXTKeymap.cpp file
	      for a detailed explanation.  (National Keyboard Support had
	      already been enabled for the MacOS/X Server and OpenStep ports
	      several days earlier.)
	    - Fixed a long-standing problem with keyboard handling in the
	      NextStep port.  Keystrokes modified by the Alternate key were
	      never interpreted correctly by Crystal Space.  The reason for
	      this was that NextStep had already cooked the keystroke
	      completely out of recognition by the time Crystal Space had a
	      chance to see it, and there was no way to retrieve the original,
	      unmodified keystroke.  Reverse engineering the internal NeXT data
	      structures for National Keyboard Support made it possible to fix
	      this problem by making the unmodified (raw) keystroke available.
	    - Implemented F1 - F12 function key translation in the NextStep
	      port.  (These keys had already been implemented in the MacOS/X
	      Server and OpenStep ports several days earlier.)
21-Dec-2000
	- Philip Wyett fixed a small bug in texture.h.
	- Philip also found a bug in ~SoftwareCachedTexture () which
	  causes an on exit error in "appptlab" in Windows. Because of
	  possible side effects I have merely commented above the offending
	  line for resolution at a later date/more convenient time..
	  Hope that is OK.
	- Wouter Wijngaards fixed the macintosh pow() command for radiosity.
20-Dec-2000
	- Continued work on csfx library. Implemented support for a random
	  dot proc texture, plasma, fire and water (the last three are
	  taken from ptlab and were added to that application by Wouter
	  Wijngaards).
	- Added the notion of a use-callback for a csTextureWrapper.
	  This callback will be called right before a texture is used. Using
	  this callback you can make sure that procedural textures are only
	  updated when really needed (i.e. a polygon/object using the proc
	  texture is visible). Note that the callback can be called several
	  times in one frame if visible. The callback should keep this in
	  mind and use the current time to check if the callback should do
	  something.
	- Extended csTextureWrapper and csMaterialWrapper with a Visit()
	  function. The engine will call Visit() whenever the texture or
	  material is used. Visit() will call the use callback.
	- Note that this Visit() function is on csTextureWrapper and
	  not on iTextureHandle. This means that (for example) csPixmap
	  will not be able to fire this callback. If you use a procedural
	  texture on a csPixmap then you'll have to do the call to Animate
	  on your own.
	- Added GetMaterialWrapper() to csCurve.
	- Extended simple with a demo on how to use the new csfx
	  library. Added a cube with six sides demonstrating the various
	  procedural textures. Due to the new texture callback system the
	  procedural textures are only updated when needed.
	- There is currently an ugly hack in csProcTexture because there
	  seems to be a bug in the software procedural texture implementation
	  when several procedural textures are initialized from Register
	  to Prepare (i.e. interleaved Register/Prepare as opposed to first
	  doing all Register and then all Prepare). That's why there is
	  now an Initialize1 and Initialize2. If the bug is fixed this will
	  be removed.
	- Eric Sunshine eliminated a compilation warning in me_matmn.cpp.
	- Eric Sunshine made the following changes to MetaBalls:
	    - Fixed bug which prevented statistical text from displaying.  This
	      bug has existed since the beginning of time but was only
	      triggered recently.  The problem was that the `count' instance
	      variable, which plays a role in determining when statistics
	      should be displayed, was never initialized.
	    - Added default initializers for all other instance variables (in
	      addition to `count').
	    - Removed unnecessary call to csSystem::GetElapsedTime().
	    - Fixed bug: MetaSys::Help() was printing null-pointer for default
	      texture name.
	    - No longer crashes when unable to load texture.  Now prints
	      meaningful error message and exits cleanly.
19-Dec-2000
	- Andrew Zabolotny did the following changes:
	    - Fixed a error in inifile.cpp. The array allocated with
	      new[] was realloc()'ated. Now it is new/memcpy/delete'd.
	    - Fixed a minor memory leak in system driver. Event cords
	      weren't deleted at shutdown.
	    - Fixed a bad error in inifile.cpp triggered by [Macintosh]
	      section in vfs.cfg: the loader switches to base64 mode due
	      to empty assignments like:
		HOME =
	      (such lines are used to denote base64 keys) and then
	      doesn't switch back when it detects invalid base64 symbols.
	      I changed the ini loader so that it switches to base64 mode
	      by '==' statement, e.g.:
		HOME ==
		ODAwMDAwMDAgd2hpbGUKICAgIHNoYXJlZCBs
		aWJyYXJpZXMgdXN1YWxseSBoYXZlIGFkZHJl
		c3NlcyBsaWtlIDB4NHh4eHh4eHgpLgo=
		===
		;/HOME
	      If you want to assign the '=' value to a key, insert a space,
	      e.g:
		HOME = =
	      is interpreted as a normal key, not the head of a base64
	      stream. csIniFile::Save() inserts spaces automatically, thus
	      a saved ini file should read perfectly. Also if something other
	      than newline follows the second equal sign, it is also
	      interpreted as a normal key.
	    - Fixed a few memory leaks in MazeD.
	    - Finished material manager dialog. Now it is functional, use
	      Ctrl+m to invoke it, model manager has moved to Ctrl+M. Fixed
	      several bugs that leads to MazeD crashes related to materials.
	    - Fixed a bad bug in common texture manager object (txtmgr.cpp):
	      the constructor did no CONSTRUCT_IBASE.
	    - I have enhanced the memory debugger so that on Linux and OS/2
	      it is able to debug malloc/realloc/free's as well as new's and
	      delete's. There is a drawback on Linux though: it will
	      intercept all malloc/free's from all dynamic libraries (even
	      from libX11.so) thus you will see a lot of memory leaks
	      belonging to other libraries (notably libc and libX11). You can
	      filter them by address (in Linux program address is >
	      0x80000000 while shared libraries usually have addresses like
	      0x4xxxxxxx). If you want to debug memory leaks in plug-ins,
	      build executable in static link mode.
	    - Fixed a memory leak in csfont plug-in.
	    - Rearrangement of some aspects of the texture manager to simplify
	      interface API for textures and materials. Previously you had to
	      call texture manager's RegisterXXX (where XXX is Texture or
	      Material) then you had to call PrepareXXX to force texture
	      manager recompute the internal representation of the
	      texture/material; when you are done you had to call
	      UnregisterXXX. Now it works a little different: by calling
	      RegisterXXX you create a new texture/material handle, and
	      further you work only with that handle: call handle->Prepare()
  	      to prepare texture or material for usage; call handle->DecRef()
	      enough times to destroy the handle (you don't have to call
	      UnregisterXXX anymore).
	      I have fixed all the 3D renderers for this, however I'm not
	      sure about Direct3D and Glide renderers (haven't compiled
	      them). All others are fully functional.
	      You can still call PrepareTextures() and PrepareMaterials()
              on texture manager object to call Prepare on all objects at once.
	    - Renamed csTextureMMSoftware into csSoftwareTextureHandle and
	      csTextureMM into csTextureHandle for cleaner names.
	    - Before closing the system (System::Close) the engine will
	      free all texture and material handles since after closing
	      the graphics driver the handles become invalid no matter
	      whenever we did IncRef or not.
	    - Implemented alpha textures support for DrawPolygon, DrawPFX
	      and DrawPixmap in OpenGL renderer.
	    - Re-worked OpenGL texture cache. Texture unloading happens now
	      in a centralized routine, which minimizes the effort required
	      to fix any bugs in it (one of which was causing SIGSEGV on
	      exit).
	- Fixed python plugin after Andrew broke it with the changes
	  above (i.e. remove PrepareTexture() from the cs.i file).
	- Philip Wyett fixed a few compile errors in OpenGL renderer
	  after Andrew's commit.
18-Dec-2000
	- Rene Dudfield fixed a bug in sprite3d. The rand num generator
	  was not initialized.
	- Rene Dudfield also made the sprite3d lighting functions only
	  light the vertices that are used for the lod level.
	- Fixed a bug in WalkTest with ms->snd not being initialized to
	  NULL on systems that don't have sound support. This could result
	  in crashes when firing missiles.
	- Eric Sunshine made the following changes to the project:
	    - Repaired the MacOS/X Server, OpenStep, and NextStep ports of
	      Crystal Space after they had sat idle for several months.  Many
	      core-level changes to the project during the idle time broke
	      these ports rather severely.  The ports are probably about 97%
	      functional now compared to how functional they were once.  Some
	      problems still exist which will be addressed in subsequent repair
	      and upgrade sessions.  For instance, the NextStep port is not yet
	      fully compatible with Andrew's new National Keyboard Support.
	      Full compatiblity requires reverse engineering internal NextStep
	      structures.  The MacOS/X Server and OpenStep ports, on the other
	      hand, are now compatible with the National Keyboard Support.
	      Further, certain portions of the software renderer (which Andrew
	      updated since the last time I repaired all such problems) are
	      broken for the Apple/NeXT ports running at 32-bit mode on
	      big-endian hardware.  Future plans also include a port to the
	      upcoming MacOS/X, as well as further decoupling of the 2D driver
	      from the system driver.
	    - The default NeXT 2D canvas is now responsible for the querying
	      and interpreting its own `simulated depth' option.  This is no
	      longer the responsibility of the system driver.
	    - Eliminated iNeXTSystemDriver (NeXTSystemInterface.h) which
	      published a method to report the simulated-depth value to the 2D
	      canvas.  The canvas is now entirely responsible for this feature,
	      so the system driver need not publish this any longer.
	    - NeXTSystemDriver now manages an iEventOutlet which the 2D canvas
	      can use for default handling of mouse and keyboard events.
	    - NeXTSystemDriver now implements SystemExtension() to provide
	      default mouse and keyboard event handling on behalf of canvases,
	      as well as other functionality.
	    - Promoted the ability to suspend the engine's virtual-time clock
	      into csSystemDriver from NeXTSystemDriver where this feature was
	      originally implemented.  This is useful for ports which allow the
	      user to suspend the entire engine (for instance, to be friendly
	      on multi-tasking systems).  Suspending the virtual-time clock
	      prevents temporal anomalies from occurring within the engine even
	      though the real-time clock continues to elapse.  An example of a
	      temporal anomaly would be the firing of a missile just prior to
	      suspension of the engine.  Upon engine resumption, if the
	      virtual-time clock was not also suspended, the missile would
	      suddenly jump forward as though much engine time had elapsed.
	    - Updated Apple/NeXT plug-in loading (NeXTLoadLibrary.cpp) to work
	      correctly with new plug-in search-path capabilites.  Also now
	      implements a meaningful csPrintLibraryError()
	    - Enhanced keyboard handling in the MacOS/X Server and OpenStep
	      ports to be compatible with Andrew's National Language Support
	      functionality.  (This feature is not yet fully implemented in the
	      NextStep port.  Doing so requires reverse engineering internal
	      NextStep data structures.)
	    - Implemented F1 - F12 function key translation in MacOS/X Server
	      and OpenStep ports.  (These keys are not yet implemented in the
	      NextStep port.)
	    - csEngineConfig is no longer an inner-class of csEngine.  This
	      change was made in order to work around a bug in the NextStep
	      compiler which was triggered after csObject (from which csEngine
	      inherits) was changed so that it inherits from iObject.  Somehow,
	      the compiler was getting confused by the QueryInterface(),
	      IncRef(), and DecRef() methods declared in csEngineConfig as well
	      as in iEngine and csObject (both of which csEngine inherits
	      from).  Making csEngineConfig stand-alone works around the
	      problem.
	    - In order to work around a multiple-inheritance bug in NextStep
	      compiler, changed the following classes so that they embed an SCF
	      interface rather than inherit from it:
		    iCameraPosition  -> csCameraPosition
		    iMaterialWrapper -> csMaterialWrapper
		    iRegion          -> csRegion
		    iSpriteTemplate  -> csSpriteTemplate
		    iTextureWrapper  -> csTextureWrapper
	      The compiler's symptom was that it did not think that IncRef(),
	      DecRef(), and QueryInterface() were implemented in classes which
	      inherited from iBase multiple times (through different paths).
	      *BEWARE* There were many places where the engine was dangerously
	      and blindly casting pointers between the interface and the
	      implementing class.  For instance, a pointer might be cast from a
	      csMaterialWrapper to an iMaterialWrapper or vice-versa.  Although
	      this worked when the implementing class inherited from the SCF
	      interface, it does _not_ work when the interface is embedded.
	      The danger here is that the compiler does not warn about this
	      problem since it assumes that the programmer knew what he or she
	      was doing when using the cast operation in the first place.  I
	      tried to repair all such broken and dangerous blind casts in
	      which the above classes were involved, but it is possible that I
	      missed one here or there.
	    - Added an assignment operator to ddgTriangle3 in order to appease
	      the NextStep compiler.
	    - Added a missing `inline' keyword to csCovMaskTriage::GetState().
	      The lack of this keyword resulted in this function being
	      implemented and exported from every single source file which
	      included the header.
	    - Unified the case of the `full-screen' extension as understood by
	      iGraphics2D::PerformExtension().  Some canvases expected
	      "fullscreen", whereas others expected "FullScreen".
	    - Added a preprocessor flag to Blocks which allows all of the
	      broken networking code to be disabled in one fell-swoop.
	    - Eliminated compilation warning in pttex.cpp.
	    - Minor modification to csphyzik/entity.h to appease broken
	      OpenStep compiler which wasn't instantiating template methods
	      early enough.  Worked around problem via simple textual
	      reordering of header so that templatized variables are declared
	      before they are actually referenced by inline methods.
	    - Augmented TrueType to CS font converter makfile (csfgen.mak) so
	      that its target only shows up on platforms which also build the
	      TrueType font server plug-in.
	    - Eliminated several compilation warnings in ddgchull.cpp regarding
	      use of enumeral and non-enumeral types in conditional expression.
	    - Added missing SYSDEF_ALLOC define to halogen2.cpp.
	    - Worked around minor compiler bug on NextStep which affected
	      csapp.cpp and txtmgr.cpp.
	    - Eliminated several compilation warnings about "unused computed
	      value" in CSWS and several applications which utilize CSWS, such
	      as cswstest and levtool.
	    - Worked around NextStep compiler limitation in null_pix.cpp and
	      drawpmap.cpp.
	    - 3dsout.cpp now includes cssysdefs.h in order to fake up a `bool'
	      type for compilers which do not support `bool' natively.
	    - Fixed error in me_app.cpp.  Was assinging an
	      mzModificationOriginDepth constant to a csVector3 instance.
	    - imotion.h no longer imports matrix3.h and quaterni.h.
	      iskeleton.h no longer imports transfrm.h.  Not only was this
	      unnecessary, but it also caused csSystemDriver to depend upon
	      these classes on NextStep, which was a less-than-desirable
	      consequence.  This resulted in linkage errors when linking the
	      csSystem library into applications which do not otherwise link
	      with the csGeometry library (such as scfreg).  (This problem is
	      specific to the NextStep compiler which generates references to
	      every mentioned class even if the class isn't actually used.)
	    - All source files in apps/t3d2cs and apps/t3d2cs/libt3d now import
	      cssysdef.h as the very first included file.  This ensures that
	      the `bool' type is faked up, if necessary, before it is used by
	      any other imported headers.
	    - Eliminated an "unused variable" warning in tBrush.cpp.
	    - Worked around a bizarre NextStep compiler bug which manifests as
	      an apparent corruption of the virtual table for csSprite2D.
	      Calls to QueryInterface() from a csSprite2D pointer would never
	      actually invoke the real, inherited csSprite::QueryInterface(),
	      and would instead always return NULL.  It is not even clear
	      which, if any, method was being called in lieu of the real
	      csSprite::QueryInterface().  Calls to QueryInterface() from a
	      local instance of csSprite2D would succeed as expected (since the
	      virtual table is not consulted in this case).  The work around
	      for this problem (for magical reasons) is to declare
	      QueryInterface() in csSprite2D which overrides the inherited
	      csSprite::QueryInterface().  It is sufficient for this method to
	      simply exist in csSprite2D.  Its actual implementation merely
	      invokes its superclass' QueryInterface().
17-Dec-2000
	- Brandon Ehle fixed a quaternion bug, with r initializer in the
	  wrong spot. The motion manager bug was fixed by this and
	  motions now look correct.
	- Started work on csfx library. Not finished yet. The csfx library
	  will contain stuff that is not general enough to be placed in the
	  engine but is general enough to be useful for several games. At
	  first I plan to add some procedural textures (i.e. like fire, water,
	  and plasma from the ptlab demo) and some of the particle systems
	  (like rain, fire, fountain, snow, ...).
	- Eric Sunshine temporarily disabled the sumlog.awk script which
	  performs CVS commit-time mailings.  This was necessary since gawk is
	  not present on the new CVS server which SourceForget installed, thus
	  all invocations of sumlog.awk were failing.
15-Dec-2000
	- Bugfix in csPolygon3D::ClipToPlane(). If the portal has a clipping
	  plane (can happen with floating portals) then it was possible that
	  this clipper would result in badly formed polygons generating
	  crashes or at least render errors in some cases. This problem
	  was visible with the new 'portal' console command. Note that
	  the problem is numerical. I'm not sure that my current fix will
	  eliminate the problem completely but at least I wasn't able to
	  reproduce it anymore.
	- Fixed the portal command so that the created portal always
	  faces the camera (at creation time only). The portal itself also
	  has the correct space warping transformation so that it appears
	  again at the starting point of the loaded world.
	- Changed csCameraPosition so that it inherits from csPObject
	  instead of csObject.
	- Added iCameraPosition and let csCameraPosition inherit from this.
	- Added iRegion/csRegion::FindCameraPosition().
	- Added iEngine/csEngine::FindCameraPosition().
	- csCameraPosition objects are now also supported by csRegion.
	- The portal command now correctly uses the real start position of
	  the loaded level (instead of just room,0,0,0) as given by the
	  'START' command.
	- The portal console command will now check if a region is already
	  loaded. If so then it will just open a new portal to the already
	  existing region.
	- The portal command will now also generate a portal back to the
	  world from which you created a portal. This only happens once though.
	  i.e. if you do 'portal maze' then you will get a portal from the
	  current position towards maze and a portal back from maze towards
	  the current position. If you then move to another position and
	  again do 'portal maze' you will only get a portal to maze and
	  not one back.
	- Renamed WalkTest::InitEngine() to InitCollDet() because that's
	  what it is doing.
	- If a new map file is loaded with the portal command the collision
	  detection stuff will be correctly initialized.
	- Moved the portal so that it is standing on the ground (relative
	  to the position of the player).
	- Known remaining issues with portal command:
	    - If you move through the portal your direction will not be
	      correct. This is caused by WalkTest having its own angle
	      vector which is not yet updated when passing a space
	      warping portal.
	    - If you started WalkTest from flarge (for example) then
	      typing 'portal flarge' will load a new instance. The reason
	      is that the default world is not placed in a region so the
	      portal command can't see that it is already loaded.
	    - Missiles can't penetrate the portal.
	    - Dynamic lights don't shine through the portal.
14-Dec-2000
	- Optimized csRegion::IsInRegion(). Replaced the loop over all
	  the objects in the region with a single test if the parent
	  of the given object is equal to the region.
	- Changed the behaviour of csEngine::FindSector, FindThing, FindSky,
	  FindThingTemplate, FindSprite, FindSpriteTemplate, FindTexture,
	  and FindMaterial. If onlyRegion is false then the behaviour is
	  as before but if onlyRegion is true then these functions will now
	  only return objects that are in the region AND also connected
	  to the engine. This contrasts with the old behaviour where these
	  functions could actually return objects that were not connected
	  to the world (example: do new csSector() and the created sector
	  will automatically be added to the current region, however it will
	  not be added automatically to the list of sectors in the engine).
	  The same functions in csRegion behave like they did before (i.e.
	  they can return objects that are not connected to the engine).
	- The previous change fixes the portal command so that it now
	  correctly loads another world and is able to create a portal to
	  that other world. Note that this doesn't complete the portal
	  command yet. A few extra things need to be done to make it
	  truely usable (initialize collision detection, engine mode
	  specific to sector instead of global to engine).
	- Added a warping transformation to the portal generated by the
	  'portal' command so that the portal destination matches the
	  starting point of the loaded level.
13-Dec-2000
	- Did a little further work on the engine SCF interfaces:
	    - Added iEngine/csEngine::FindTexture().
	    - Added iEngine/csEngine::CreateMaterial().
	    - Added iRegion/csRegion::FindTexture().
	    - Changed FindTexture/FindMaterial to return the pointer
	      to the texture/material on success instead of boolean.
	    - Added iView::Draw().
	    - Moved several defines for vectors in csCamera to iCamera.
	    - Added iEngine::GetBeginDrawFlags().
	    - Added iEngine::CreateLight.
	- The result of the SCF changes today and yesterday is that
	  simplep (the version of simple that uses the engine plugin) is
	  actually able to create geometry and show it.
	- Added iTextureWrapper SCF class and let csTextureWrapper implement
	  it.
	- Made some fixes to cs.i so that the Python plugin is now up-to-date
	  to the latest SCF changes.
12-Dec-2000
	- Thomas Hieber added two files to gamecore plugin which he
	  forgot to add in the past.
	- Michael Dale Long fixed the cctest console. Also did some
	  cosmetic code cleanup. Funky console is now enabled again.
	- Philip Wyett fixed a memory write error in the OpenGL texture
	  cache. This was causing an exit memory write error when exiting
	  'Blocks' in Windows.
	- Rene Dudfield made sprite lighting settings local to sprites so
	  that different sprites can use different settings.
	- Added ShineLights to iRegion/csRegion.
	- Added IsInRegion to iRegion/csRegion to check if some object
	  is in a region.
	- Extended csEngine::ShineLights with an optional csRegion
	  parameter to restrict recalculating lighting for some region.
	- Extended csPolyIt, csCurveIt, and csLightIt (iterators that
	  are defined in csEngine) with an optional csRegion parameter
	  to restrict iteration over the objects in that region.
	  Also extended csEngine::NewPolyIterator() and NewLightIterator()
	  functions.
	- Added GetLastSector() to csCurveIt and csLightIt (like csPolyIt).
	- The 'portal' console command works better now. In some cases
	  it 'almost' seems to be doing what it should. But it is still not
	  good enough. It crashes while trying to load some levels and
	  the portals in the other levels don't seem to be correct.
	  'portal sydney' is the only one which seems to work nicely
	  from flarge.
	- Did a little further work on the engine SCF interfaces:
	    - Added Prepare() to iEngine.
	    - csView now extends the already existing but empty iView.
	    - Added a few methods to iView.
	    - Added CreateView() to iEngine.
	    - Added lots of functions from csCamera to iCamera.
10-Dec-2000
	- Eric Sunshine made the following changes to the project:
	    - Finally eliminated the evil monolithic apps/support/static.cpp
	      file which caused repeated maintenance headaches.  The problem
	      with this file was that every time a plug-in module was added or
	      removed from the project, a developer also had to remember to
	      edit static.cpp to reflect the change.  Thus, the perceived
	      modularity of plug-ins was offset by the very real monolithic
	      disposition of this file.
	    - As a replacement for static.cpp, the new makefile
	      CS/mk/static.mak automatically and dynamically synthesizes C++
	      code which forces hard symbolic references to each plug-in module
	      being linked into the application (assuming that the application
	      is being linked statically---that is, with USE_PLUGINS=no).
	    - Information used by the synthesis process is gleaned from the GNU
	      makefiles, project-wide.  The old CFLAGS.STATIC_SCF makefile
	      variable has been removed.  A new variable, SCF.STATIC, contains
	      a list of plug-in module basenames (such as `soft3d', `vfs',
	      etc.), and this information is used to synthesize the hard
	      references needed when linking applications statically.
	    - The static.mak makefile is smart enough to regenerate the
	      synthesized symbolic references when certain events occur; such
	      as when the user edits the list of plug-in modules in user.mak or
	      reconfigures the project's makefiles.
	    - Note that the new synthesis process is geared toward platforms
	      which utilize the GNU makefile system to build the project.  It
	      does not apply to ports which use `project files'.  However,
	      historically, none of the ports which rely on project files has
	      ever supported static linking, so this is no loss.  If, in the
	      future, a port does wish to support static linking via project
	      files, it would be a simple matter to set up an automated
	      synthesis task, and commit the result to the CVS repository on a
	      regular basis, much as is already done with MSVC project files.
	    - Added $(DEP.EXE) to the dependency lists of the following GUI
	      applications.  This should allow them to successfully link
	      statically (that is, when USE_PLUGINS is `no'):
		cctest
		g2dtest
	    - Removed $(DEP.EXE) from the dependency list of the following
	      console applications, since they need not link against the
	      various plug-in modules:
		csfgen
		makedep
		scfreg
		scftutor
		textconv
		uninst
9-Dec-2000
	- Added 'regionOnly' parameter to all 'FindXxx()' methods in
	  csEngine and iEngine. When this parameter is 'true' (default is
	  'false') only objects in the current region will be searched.
	- Added 'FindSky' to csEngine and iEngine.
	- Added all the 'FindXxx()' methods to csRegion and iRegion as well.
	- In addition added a general 'FindObject()' method to csRegion with
	  which you can find any object of a given name and type.
	- Added csThing::IsSky() which returns true if the thing is a sky
	  object.
	- Added optional is_template parameter to the constructor of csThing.
	  This is just to mark a thing as being a template. Usually this
	  should be set to true if the thing is pushed on the template list
	  in the engine. Also added IsTemplate() function to csThing to
	  query the status of this flag. Modified csLoader to correctly
	  set this flag in the constructor.
	- Added 'FindThingTemplate()' to csEngine, iEngine, csRegion, and
	  iRegion.
	- Added iSprite and iSpriteTemplate SCF classes and let csSprite
	  and csSpriteTemplate implement them. csSprite implements iSprite
	  through embedding (similar to how csThing implements iThing).
	  csSpriteTemplate implements iSpriteTemplate with (multiple)
	  inheritance.
	- Because iSprite is now implemented it is possible to actually
	  implement csRegion and csEngine::FindSprite. In addition because
	  iSpriteTemplate now exists I also added csRegion and csEngine::
	  FindSpriteTemplate. Also added to iRegion and iEngine.
	- Added iObject SCF interface. csObject now implements iObject.
	  iObject is currently almost empty (only contains GetName and
	  SetName). It's main purpose is to allow further definition of the
	  engine SCF interface for all methods that expect or return csObject
	  instances. This rather fundamental change triggered a number of
	  other changes in the engine classes with regards to where they
	  get the iBase implementation. Previously some of those classes
	  implemented iBase for sake of embedding or subclasses. Now, those
	  classes can use the iBase provided by csObject.
	- Fixed a bug in Blocks which caused crashes if no network driver
	  was present. Now it simply doesn't attempt to open a connection
	  if there is no network driver.
	- Implemented 'onlyRegion' support in csLoader by using the new
	  FindXxx() routines that were added to csEngine.
	- Extended csPObject thus that it correctly unlinks itself from its
	  parent at destruction time. Previously it didn't care which could
	  cause bad problems.
	- Also fixed csObject::ObjRelease() so that it actually resets the
	  parent to NULL at release time.
	- In addition fixed the csObject destructor so that the children
	  are destroyed the correct way now (given that destroying a child
	  will automatically remove it from the 'children' array).
	- The csObjectNoDel destructor has also been fixed so that it
	  sets the parent of all children to NULL (since they are now
	  unlinked).
	- All engine classes that can be added to a region now extend
	  csPObject instead of csObject. This is to make sure that they
	  actually maintain the parent (which is the region they are in).
	  When such an object is then deleted it will safely unlink itself
	  from the parent (region).
	- Added iRegion/csRegion::PrepareTextures() to prepare all textures
	  and materials that were loaded in the context of this region.
	- Renamed iRegion::Prepare() to PrepareSectors() and added a new
	  Prepare() which calls PrepareTextures() followed by PrepareSectors().
	  This way it works more like csEngine does.
	- All the above changes done today result in the 'portal' console
	  command not crashing anymore and loading the world given as a
	  parameter (probably) correctly in a new region. The 'portal' command
	  still doesn't work though because something is still wrong with
	  the portal.
8-Dec-2000
	- Samuel Humphreys did the following changes to phyztest:
	    - First stage of reformatting csphyziks to be more consistent
	      with itself and the Crystal Space style.
	    - Fixed the dissappearing block in phyztest..thx to Michaels
	      guidance.
	    - Added reportage of the main variables associated with the
	      block object.
	    - Changed the room to be a cube of 10 units each side centred
	      on the origin.
	- Samuel also fixed the bot cam so that it can traverse into the
	  new room of visual feasts (plasma, water, and fire).
	- Fixed a bug in cs.i for python. Eric Sunshine accidentally removed
	  the essential '3' after csVector3 :-)
	- Eric Sunshine moved command.cpp and command.h from apps/support to
	  apps/walktest since these files are only used by WalkTest. Updated
	  makefile and other source files to reflect this change.
	- Martin Geisse added a missing lib in the ds3d makefile.
	- Norman Kramer added missing include to a file in MazeD.
	- Wouter Wijngaards improved fire a bit. You can now show single
	  flames as well as a tiling wall of flame. Also added water and
	  plasma textures (all viewable in ptlab).
7-Dec-2000
	- Wouter Wijngaards made the fire polygon unlit in ptlab. This
	  looks better.
	- Eric Sunshine made the following changes:
	    - Renamed the following classes and SCF interfaces.  Fixed all
	      source files, header files, and documentation to reflect these
	      changes.
		    iWorld --> iEngine
		    csWorld --> csEngine
		    csWorldConfig --> csEngineConfig
		    csWorldState --> csEngineState
		    csWorldStateVector --> csEngineStateVector
	    - Renamed the following files.  Fixed all source files, header
	      files, and documentation to reflect these changes.
		    iworld.h --> iengine.h
		    world.h --> engine.h
		    world.cpp --> engine.cpp
		    worldfmt.txi --> mapfmt.txi
	    - Eliminated the old iEngine SCF interface and the iengine.h header
	      file.  This interface was just a very thin wrapper around the
	      existing iWorld (now iEngine) functionality.  However, since the
	      engine library already contains sufficient SCF goop to pass as a
	      plug-in module, the old thin iEngine wrapper was not actually
	      needed.  The new iEngine is now the one and only interface for
	      accessing the engine regardless of whether or not it is in a
	      plug-in module or statically linked.  There is no longer any
	      distinction.
	    - Renamed all `world' variables to 'engine' throughout the project
	      and documentation.  Renamed all variations of `world' (such as
	      `World', etc.), as well.  Also renamed `world file' references to
	      `map file' references.  Code and documentation which specifically
	      refers to `world space' or `world coordinates' has not changed.
	      In this case, the `world' terminology is appropriate and has been
	      retained.
	    - Added a bunch of missing `const' qualifiers to Dumper class.
	    - Renamed Dungeon plug-in's SCF name from
	      crystalspace.worldrnd.dungeon.std to crystalspace.dungeon.random.
	    - csProgressPulse now uses iSystem::Printf() rather than
	      CsPrintf(), thus it is no longer tied to the engine.  Also added
	      Doxygen comments.
	    - Enhanced the check for new C++ casting syntax in comptest.sh to
	      be more thorough.  It now checks for all casting variations.
	      This was necessary, since someone at NeXT botched the OpenStep
	      Objective-C++ compiler so that it fails to understand
	      reinterpret_cast even though it understands static_cast,
	      const_cast, and dynamic_cast.
	    - Eliminated compilation warning in csbaglay.cpp regarding one
	      variable shadowing another.
	    - NeXT csosdefs.h now defines __NEED_GENERIC_ISDIR for SYSDEF_DIR
	      so that the generic isdir() gets defined.  This is now required
	      by CSWS.
	    - Added missing `const' qualifier to SetName() and GetName()
	      methods of csFrame and csSpriteAction.
	    - Eliminated several compilation warnings from the sound loader
	      plug-in.
	    - Eliminated compilation warning about redefinition of RED_PREPROC
	      macro in haloscan.inc.  This warning only showed up on platforms
	      which have TOP8BITS_R8G8B8_USED defined.
	    - Eliminated several compilation warnings in g2dtest regarding
	      implicit conversion of float to int.
	    - Added missing `const' qualifiers to several methods in
	      mz3DSprite.
	    - Fixed quite a lot of multiple-include protection macros in
	      include/csengine so that they are now prefixed by `CS' (for
	      instance __CS_STATS_H__ rather than STATS_H).  This should help
	      to avoid naming collisions with non-CS packages.
	    - Eliminated compilation warning in ptlab.cpp.
	    - Eliminated compilation warning in dnfnodes.cpp.
6-Dec-2000
	- Fixed a comment in iGraphics2D.
	- Extend csObject::GetChild() with a new 'derived' parameter similar
	  to how GetIterator() works. With 'derived' set to true GetChild()
	  will return the first child that matches the type or is a type
	  derived from the given type. To get the first child you can now
	  use GetChild (csObject::Type, true);
	- Added iRegion SCF interface which csRegion extends.
	- Extended iWorld and csWorld with SelectRegion and GetCurrentRegion.
	- More work on csRegion class. DeleteAll(), Clear(), and Prepare()
	  should all work now. But untested at the moment.
	- All objects that should belong to a region will now add themselves
	  to the current region automatically.
	- Added new 'REGION' keyworld to WORLD in loader. This keyworld
	  will create/select a new region and all subsequent sectors,
	  collections, sprite templates or thing templates, will be added
	  to that region. If the name of the region is empty then the default
	  NULL region will be used. Note that it is possible to interleave
	  region selection. For example, you can first create a few sectors
	  in region 'east', followed by a few sectors in region 'west',
	  followed again by a few sectors in region 'east'.
	- Fixed a bug in csWorld::CreateThing(). This function accidently
	  added the thing twice to the list of things for every sector (once
	  by doing SetSector on the movable and once explicit). In addition
	  this routine forgot to add the thing to the list of things in the
	  world.
	- Added 'portal' console command to WalkTest. This will create a new
	  region with the given name and load the same named level into
	  that region. Then it will create a portal on the spot you are
	  standing to the start position of the new level. For example,
	  you can do 'portal maze' to load maze.zip into the 'maze' region.
	  Then you can enter 'maze.zip' through the new portal :-)
	  WARNING! This command does not work at the moment and the only
	  effect is crashing WalkTest! Work in Progress!
	- Added csLoader::AppendWorldFile() which will load a world
	  file without first clearing the original world.
	- Added a parameter 'onlyRegion' to AppendWorldFile(). If true then
	  then portals will only connect to the sectors in the current
	  region, things will only use thing templates defined in the
	  current region and sprites will only use sprite templates
	  defined in the current region.
	- Small fix in OpenGL which SHOULD support alpha for DrawPixmap
	  but for some reason doesn't.
	- Eric Sunshine fixed unixconf.sh so that it respects the CXX setting
	  from the environment if such a setting already exists, rather than
	  completely ignoring such a setting.
	- Eric Sunshine fixed some problems in cspython.mak and csjava.mak.
	- Eric Sunshine added automatic detection of SVGALIB to unixconf.sh.
	- Eric Sunshine removed the dead cygnus.mak makefile.
	- Eric Sunshine eliminated several compilation warnings from
	  crysball.cpp.
	- Eric Sunshine added missing RequestPlugin(FontServer) to simplep.cpp.
	- Samuel Humphreys added a fire procedural texture to ptlab. The fire
	  algorithm was contributed by Wouter Wijngaards.
	- Martin Geisse fixed a bug which caused the sound modules to ignore
	  some config settings.
5-Dec-2000
	- Wouter Wijngaards created csBox3::SquaredOriginDist which returns
	  a float with the squared distance of the box to (0,0,0). It
	  is extremely fast (algo taken from sector.cpp).
	- Norman Kramer did the following changes:
	    - Catched a div by zero in LOD calc for sprites.
     	    - Sprites are now clipped if shortest distance is greater than
	      D() value of the farplane (squared version).
	- Started work on csRegion class. Not functional at the moment.
	- Eric Sunshine made the following changes:
	    - Removed all platform-specific specializations from of csdef.h.
	      These specializations have been moved to platform-specific
	      makefiles and include files, where appropriate.  The idea here is
	      to eliminate the mentality of monolithicism by moving as much
	      platform-specific goop into platform-specific configuration files
	      rather than polluting generalized project resources with
	      platform-specific crud.
	    - Moved all OS_NEXT-specific specializations out of csdef.h and
	      into next/csosdefs.h.
	    - csdef.h is no longer responsible for setting the OS_UNIX flag for
	      Solaris, Linux, Irix, BSD, BeOS, NeXT, and PS2.  It is now the
	      responsibility of each platform's makefile to set the OS_UNIX
	      flag, instead, if that designation is appropriate for the given
	      platform.
	    - Upgraded volatile.mak so that it has an understanding of
	      operating system `families', such as Unix, Win32, etc.  If it
	      sees that a platform-specific makefile has designated itself as
	      belonging to a particular family, then volatile.mak includes an
	      appropriate definition (such as OS_UNIX) in volatile.h.  All
	      platform-specific makefiles which require OS_UNIX now obtain it
	      via the new `family' mechanism.
	    - Added comptest.sh which tests for different compiler capabilities
	      at project configuration time.  Both unixconf.sh and next.mak now
	      invoke comptest.sh.
	    - Merged booltest.sh into comptest.sh.  Removed booltest.sh.
	    - Added a compiler capability test for new-style C++ casting syntax
	      to comptest.sh.  If the compiler does not understand this syntax,
	      then the makefile variable CS_USE_OLD_STYLE_CASTS is defined.
	      volatile.mak then defines the preprocessor variable
	      CS_USE_OLD_STYLE_CASTS which is recognized by csdef.h.
	    - Added a compiler capability test for the new C++ `explicit'
	      keyword.  If the compiler does not understand this keyword, then
	      the makefile variable CS_USE_FAKE_EXPLICIT_KEYWORD is defined.
	      volatile.mak then defines the preprocessor variable
	      CS_USE_FAKE_EXPLICIT_KEYWORD which is recognized by csdef.h.
	    - Renamed makefile and preprocessor variables DO_FAKE_BOOL to
	      CS_USE_FAKE_BOOL_TYPE.
	    - Renamed makefile and preprocessor variables DO_FAKE_SOCKLEN_T to
	      CS_USE_FAKE_SOCKLEN_TYPE.
	    - Moved initial definition of MAKE_VOLATILE_H out of Makefile and
	      into volatile.mak.
	    - Reworked the STATIC_CAST, DYNAMIC_CAST, REINTERPRET_CAST, and
	      CONST_CAST macros so that the user is no longer responsible for
	      remembering to add extra parentheses around the expression which
	      is being casted.
	    - Eliminated Linux-specific specializations from makedep/parse.cpp.
	    - Eliminated NextStep-specific specializations from bspbox.cpp.
	    - Eliminated platform-specific specializations from scf.h and moved
	      them into the appropriate platform-specific csosdefs.h files.  In
	      particular, the Windows, BeOS, and OS/2 configuration files now
	      override the default function export mechanism rather than
	      hard-coding such platform-specific knowledge into SCF.
	    - Created include/cssys/csosdefs.h which takes over the
	      responsibility of including the platform-specific csosdefs.h from
	      cssysdef.h.  This helps to remove some platform-specific
	      specialization from cssysdef.h.
	    - Eliminated all platform-specific specializations from version.h.
	      It is now the responsibility of the platform-specific makefile
	      and project files to provide this information on behalf of
	      version.h.  The idea here is to eliminate the mentality of
	      monolithicism and promote the concept of modularity, rather than
	      polluting generalized project resources, such as version.h, with
	      platform-, processor-, and compiler-specific crud.  For all
	      platforms which use the GNU makefile system, this information is
	      now provided automatically by volatile.mak by gleaning the
	      necessary information from the existing GNU makefiles.  In
	      particular, volatile.mak examines the makefile variables
	      $(DESCRIPTION.$(TARGET)), $(PROC), and $(COMP) in order to
	      provide useful human-readable information to version.h.
	    - Renamed the following preprocessor identifiers from version.h
	      (some of which are now defined by platform-specific project files
	      rather than being defined directly in version.h):
		CS_VERSION    --> CS_VERSION_MAJOR
		CS_SUBVERSION --> CS_VERSION_MINOR
		VERSION       --> CS_VERSION
		RELEASE_DATE  --> CS_RELEASE_DATE
		OS_VERSION    --> CS_PLATFORM_NAME
		PR_VERSION    --> CS_PROCESSOR_NAME
		CC_VERSION    --> CS_COMPILER_NAME
	    - Renamed the plug-in file extension for MacOS/X Server, OpenStep,
	      and NextStep from .dylib to .csplugin.
	    - Added general/findlib.cpp to SRC.SYS_CSSYS in next.mak.
4-Dec-2000
	- Norman Kramer implemented farplane culling for sprites.
	- Added 'sndload' to the 'walkall' target because without the
	  sound loader WalkTest will not run.
	- Fixed a number of compile errors that trigger with VC5.
3-Dec-2000
	- Norman Kramer did some work on CrystalBall (his polygon culler).
	- Norman also did the following with relation to the c-buffer
	  culler:
	    - GetConvexOutline (in csBox) has a new parameter: bVisisble.
              If true it returns all visible corners, if not then just
	      the outline.
	    - The farplane is now recognized in the octree culling and
	      polygon culling process.
	- Noah L. Gibbs added support for change to libs/csphyzik/qtrbconn.cpp.
	  Also some prototypes for new functions. Here is the comment:
	      Checking in code that's almost enough to make the rigid-body
	      connectors useful. They now successfully take derivatives of
	      an arbitrary point and its velocity on the rigid body with
	      respect to all state variables of that body -- except for the
	      derivative of the velocity with respect to the rigid body's
	      angular momentum.  Ouch.  Working on it.
	- Eric Sunshine made the following changes to the documentation:
	    - Fixed several Texinfo mark-up problems in msdos.txi, win32.txi,
	      win32gcc.txi, 
	    - Performed some re-writing and clean-up of features.txi.
	    - Performed some minor reformatting of csgeom.txi, graphics.txi,
	      and plugins/overview.txi.
	    - Performed some minor re-writing of cssys.txi.
	    - Replaced Doc++ references with Doxygen references in coding.txi.
	- Eric Sunshine made the following changes to CVSROOT/sumlog.awk (and
	    cousins):
	    - Minor beautification of generated output in order to facilitate
	      ease of reading.
	    - Now ensures that all developers have write access to temporary
	      working directory.  This should prevent the problem of
	      "permission denied" errors which occurred for some users when
	      committing files.
	- Eric Sunshine added missing FontPlex registration to static.cpp.
	- Eric Sunshine fixed copy/paste error in fontplex.mak.
	- Eric Sunshine removed references to the obsolete and long dead
	  Amiga and Watcom ports.
	- Eric Sunshine removed the following modules and resources from the
	  project.  Also removed all references to these modules from
	  documentation, source and header files, configuration files, etc.
	  All removed resources were tagged with the name "PURGE_1" just before
	  being purged to CVS's "Attic".  This tag may be used to easily
	  recover any module or resource back to the state it was in just prior
	  to removal.
	    - Defunct NetSpace project and its supporting modules:
		apps/demonets
		apps/nstp
		docs/incoming/nstpimp.html
		include/iauth.h
		include/icmdmgr.h
		include/inetcmd.h
		include/inetman.h
		include/iproto.h
		plugins/csauth/simple
		plugins/net/netman
		plugins/netspace/nsmgr
		plugins/netspace/nstp
	    - Defunct and unmaintained video drivers:
		plugins/video/canvas/dosalleg
	    - Defunct and unmaintained sound renderers:
		plugins/sound/renderer/a3d
		plugins/sound/renderer/eax
	    - Old networking resources and poorly designed cruft:
		apps/ndrvdemo
		mk/mwcw/NetworkDriverNull.mcp
		mk/mwcw/NetworkMgrNull.mcp
	    - Old csGame resources and Shooter demonstration program:
		apps/shooter
		data/shtlib_g.zip
		data/shtlib_m.zip
		data/config/shooter.cfg
		include/csgame
		mk/mwcw/Shooter.mcp
	    - Limited-value applications:
		apps/wscs3d
		data/config/wscs3d.cfg
	    - Old scripting cruft left around by Brandon:
		apps/support/spawn.cpp
		apps/test/pytest
		include/css/cssint.h
		include/ispawn.h
		include/tests.h
	    - Out of date documentation:
		docs/incoming/changes.txt
		docs/incoming/mazedtut.txi
		docs/incoming/mazed123
		docs/incoming/script.txt
	    - Out of date scripts and makefiles:
		bin/helpread.tcl
		bin/launcryst.tcl
		bin/makeman.py
		bin/mshelp.py
		bin/win32link.bat
		libs/cssys/os2/os2wcc.mak
		libs/cssys/win32/win32vc.mak
	    - Other useless and out of date flotsam:
		coordper
		bin/indent.pro
		data/entry.t3d
		include/cssys/wcc
		scripts/python/unrmap.py
	- Martin Geisse added some sections and items to the libs and
	  plugins chapters of the docs.
2-Dec-2000
	- Seth Galbraith did the following changes to sprites:
	    - Automatic level-of-detail adjustment based on distance and
	      field-of-view.
	    - cfg_lod_detail (the "lod" setting in Walktest) is now
	      basically the distance at which full detail is visible
	      instead of a fractional value.
	- Seth also added -mconsole to the linking flags for win32gcc.mak.
          He also added comments explaining what to expect if you
	  comment-out the -mconsole option.
	- Wouter Wijngaards improved WalkTest as follows:
	    - Finetuned the parameters for the 'flame' demo particle system.
	      It looks better now, less blocky.
	    - Removed those irritating 1 pixel wide margins where pixels
	      from the console text could still be seen. At the end of
	      initialize, ClearAll() is called.
1-Dec-2000
	- Andrew Zabolotny tried to fix OpenGL library problems.
	  LIBS.OPENGL.SYSTEM is now the correct variable to define the
	  system libraries for OpenGL support. For example (in system
	  makefile or in config.mak):
	    LIBS.OPENGL.SYSTEM=-L/usr/local/include/MesaGL -lMesaGL

Please see "history.old" for less recent historical entries.
