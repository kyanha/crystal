The history order is reversed so that new features are at the top.

20-Feb-2003
	- Anders Stenberg fixed a bug in shader loader causing fragment
	  programs not to load.
	- Apparently in some cases AWS calls g2d->SetClipRect() with a
	  clipping rectangle that goes outside of screen boundaries. This
	  can cause crashes when using the software renderer and when drawing
	  primitives that actually go beyond the screen boundaries but stay
	  in the clipping rectangle. I don't know enough about AWS to fix
	  this bug in AWS itself but for now I fixed the problem by
	  clamping the clip rect in g2d to the size of the screen so it is
	  now impossible to make the clip rect go outside screen boundaries.
	- The engine no longer crashes if the camera has a NULL sector.
	- Removed the totally unused csWireFrame class from the engine.
	  It was not even possible to use it since there was no SCF
	  API to access it. And it doesn't belong in the engine anyway.
	- Removed the obsolete and broken map commands in walktest.
	- Fixed a bug in the engine where it would forget to load the
	  default culler in one of the IntersectSegment functions. So if
	  the sector was not visited then this could cause a crash.
	- Matze removed the really unfinished plugins in 
	  plugins/mesh/spr3d/persist/impexp and
	  plugins/mesh/thing/persist/impexp
	- Matze removed comments about 8.3 filenames from CS docs. Even djgpp
	  (which isn't supported anymore) was able to use long names in win9x.
	- Matze removed invalid dependencies from netmtest and perl5tst
	  makefiles.
19-Feb-2003
	- Mårten Svanfeldt fixed a bug introduced when adding the new
	  light-parameters for the new renderer due to a missing
	  #ifdef CS_USE_NEW_RENDERER.
	- Mårten Svanfeldt changed the way lights are handled in new renderer
	    - Lights now have a influence radius which is different from the
	      normal radius. Influence radius is the distance at which the light
	      have 1/256 (or 1/512, 1/1024 it is configurable) of the intensity
	      in the center. Influence radius is used to determin wheter i light
	      needs to be used or not to draw on a specific spot.
	    - The way culling of lights and objects work is changed. An more 
	      in depth description of how it's done is in a comment in
	      Sector::Draw.
	    - Shadows now use depthfail shadows if we are in the shadow-volume.
	- Fixed a memory leak in the OpenGL renderer.
	- Philip Wyett updated configure script from 0.96 to 0.97dev.
18-Feb-2003
	- Philipp Aumayr updated bugplug for render3d api changes and "repaired"
	  history.txt for Philipp Wyett (wrong indent :o)
	- Philip Wyett removed commiter related info from flex skeleton file to
	  remove it from being generated into skinlex.cpp and creating cvs
	  changes and conflict.
	- Applied a patch from Anders Reggestad <anders@pvv.ntnu.no> which
	  does the following:
	    - Fixed the windows implementation of csGetTicks() so it is
	      MT safe.
	    - Fixed the unix implementation of csGetTicks() so it no longer
	      overflows (there was currently an overflow every eight hours).
	    - Fixed the MacOS/X implementation of csGetTicks() so it is
	      MT safe.
	    - Fixed a wrapping bug in the virtual clock.
	- Light ID's are now MD5 keys instead of simple numbers. This is
	  done to solve a bug with multiple regions and light id's not
	  matching with the cached light id's in the lightmap cache.
	  This fixes a bug with pseudo-dynamic lights not working if they
	  are loaded differently from when they were loading at relighting
	  time.
	- Changed iEngine->FindLight(id) to iEngine->FindLightID().
	- Changed the engine so it now reports the first 4 objects for which
	  it couldn't load lighting.
17-Feb-2003
	- Steven Geens reports: milk2spr now mentions apps/tests/mottest as its
	  code example.
	- Matthias Braun added libxml2 parser.  The code only reads xml at the
	  moment and lacks some autoconf macros and msvc setup...
	- Fixed a problem in the spr3dldr.cpp with 'char*' being used instead
	  of 'const char*' to store the result of GetAttributeValue().
	- Greg Block fixed MacOSX load library paths.
	    - We support loading from the install path, "components"
	      subdirectory (as configured by build)
	    - We also attempt to load from the current working directory.
	    - This, technically, means that app-wrapped applications can
	      include plugins in their <app>/Contents/MacOS of the app bundle.
	    - A more complete review of wrapped app-loading issues needs to
	      take place in the future, to support application-bundled versions
	      of CS.
	- Christian Bayle made debian package build ok, but it remains some
	  problems with csdemo that is not installed by make install and
	  segfault in walktest -video=software (building with gcc3.2.2)
	- Eric Sunshine fixed problem reported by <groton@gmx.net> where
	  awstxtbx.cpp could invoke cursor-- even when cursor==0 when DEL was
	  pressed.
	- Daniel Duhprey did the following to the new renderer:
	    - Moved the lighting parameters into the MeshObject 
	    - Added capped volumes specified via a flag in iMeshObject
	    - Changed renderer to support Carmack's Reverse for capped volumes
		- Removed itoa in trade for sprintf in gmeshldr
16-Feb-2003
	- Significant optimization in the dynamic/pseudo-dynamic lighting
	  system for things. In the past, when a dynamic light or
	  pseudo-dynamic light hit a thing then all polygons would be
	  marked as being dirty (so this would require a loop over all
	  polygons, setting the polygon as dirty). Now this has been
	  changed by adding a 'light_version' number to the thing and also
	  a 'light_version' number to all polygons. This is similar to the
	  'ambient_version' number that's already there. This saves a lot
	  of flag setting overhead and significantly increases speed
	  of pseudo-dynamic and dynamic lights for big levels.
	- Philipp Aumayr optimized font drawing code to use vertex arrays.
	- Philipp Aumayr extended gmeshldr to support general streams
	  for new Renderer.
	- Reverted latest font drawing optimization because it messed
	  up with the OpenGL renderer. It is currently illegal to
	  set client states outside the OpenGL renderer because the
	  renderer has a state cache for this. We need to find a better
	  way to solve this.
	- Removed an unneeded 'if' before a delete. C++ guarantees checking
	  for NULL pointers with 'delete'. No need to test.
	- Philipp Aumayr optimized font drawing code to use vertex arrays
	  again. This time correctly queries the client states.
	- Daniel Duhprey fixed shadermgr: one too many passes. This is why
	  I lost half my FPS.
	- Matthias Braun removed const from some functions in
	  iDocumentAttribute, this makes it considerably easier to implement
	  them when you have to construct the elements first from some cache
	  thing. Also fixed spr3dldr.
	- Matthias Braun added libxml2 loader, unfortunately has several
	  problems:
	    - Only loading part implemented so far.
	    - Strings which are returned are only valid till the next call to
	      the loader. This breaks several CS plugins which store the
	      string pointer longer than allowed.
	    - No configure test yet.
	    - The worst I'll probably not have time to hack on CS till next
	      weekend, so perhaps someone wants to finish this?
	- Daniel Duhprey fixed gcc based compiler warnings/problems with
	  render3d.
	- Daniel also fixed genmesh to handle anonymous buffers as well as
	  make the vertex buffers slightly more efficient.
	- Daniel changed which stream to use for shadows.
	- Christian Bayle did some other debian related changes.
15-Feb-2003
	- res checked if the image IO plugins work properly and fixed them
	  if necessary:
	    - TGA saving was botched
	    - JNG saving didn't work right where sizeof(csRGBcolor) != 3
	    - JNG loader works better with single-frame MNGs
	    - BMP didn't honor the padding of scanlines to a multiple of 4
	- res augmented gfxtest to add an alpha channel if none is present.
 	- res changed csImageFile::convert_pal8() to ensure the image palette 
 	  has at least 256 entries.
	- Added 'openglcanvas' target which compiles the OpenGL canvas
	  relevant for the given OS (similar to 'softcanvas').
	- Make 'walkall' will now compile the OpenGL renderer instead of
	  the software renderer.
	- Matthias Braun fixed another config issue.
	- Wouter Wijngaards fixed containerbox in emit, works now also for
	  non-alpha particles. Added rotation to the star-sphere in partsys,
	  removed the rotation-key (which did not work for me anyway) using
	  the new fieldspeed feature.
	- Matthias Braun fixed blocks.cfg not getting installed.
	- Daniel Duhprey added arbitrary stream component for genmesh.
	- Christian Bayle did several fixes to the Debian packages.
14-Feb-2003
	- Extended iVertexBuffer and iPolygonBuffer with a bounding box.
	  The renderers can use this to optimize clipping.
	- Fixed a bug in the OpenGL polybuffer implementation for things
	  that don't have lightmaps.
	- ClassifyForClipTriangleMesh() in OpenGL renderer now uses bounding
	  box to avoid too many classify tests on vertices. Doesn't seem
	  to give a dramatic fps improvement though.
	- Added iEngine->GetRenderPriorityCount() and GetRenderPriorityName()
	  to be able to query the render priorities currently in the engine.
	- Added 'frain' command to walktest to test a rain mesh object
	  that follows the camera around (as opposed to 'rain' which just
	  makes a rain mesh object that is in the current sector completely).
	- Huge optimization with CastShadows implementation of Dynavis
	  and Frustvis. It now actually looks at the radius of the light.
	  This has a big impact on speed for recalculation (recalculating
	  lighting for flarge went from 7.5 to 2.7 seconds) and it also helps
	  a lot in case pseudo-dynamic lightmaps or genmeshes need to be
	  updated.
	- Optimized the creation of pseudo-dynamic lightmaps a bit more.
	  Now a pseudo-dynamic lightmap will only be created if the light
	  REALLY affects the polygon and not when it theoretically could
	  affect it due to distance.
	- Fixed a few printf related bugs in map2cs. Thanks to Wouter
	  for reporting this.
	- Added new IntersectSegment() routine to iVisibilityCuller which
	  returns all objects that are intersected by the segment.
	- Mesh objects used to have an old system where a particle system
	  could remove itself by returning true with WantToDie(). However
	  this system is slow since the engine has to check this flag
	  every frame. I replaced this with a new function in the engine
	  (which is also called WantToDie()). With that function objects
	  (like particle systems) can schedule themselves so that they are
	  deleted the next frame. The engine will only have to check if
	  there are any sheduled deletions every frame. Much faster...
	- Anders Stenberg fixed a missing ';' in genmesh.cpp.
	- Philip Wyett turned CS_USE_NEW_RENDERER after #endif into a c++
	  comment as it should be and eliminated compiler warning.
	- Marten Svanfeldt added default attenuation vector and fixed
	  loading of attenuation vector.
	- Marten once again fixed texturemanager (hopefully). It needs some
	  more testing with 1d, 3d and cubemaps though.
	- Matthias Braun fixed problems in cspython.cpp after config changes.
	- Matthias did a fix for aws.mak to not double object files - older
	  compilers don't like that.
	- Matthias added a touch to get timestamp up. Some older bisons don't
	  work otherwise.
	- Wouter Wijngaards did the following:
	  Added features to emitter particle system:
	    - Field speed EmitGen3D can be specified: based on the position
	      of the particle, each frame, the speed can be calculated for
	      the particle.
	    - Field accel EmitGen3D can be given, as above, but for the
	      acceleration.
	    - ContainerBox can be specified: particles outside this box are not 
	      rendered. They are also not respawned, because I'm afraid it would
	      create too many short-aged particles, and destroy the look of it.
	    - The loader has XML format for these features.
	    - The saver writes something sensible, but since the loader
	      does not read this format at all, and any old converter would not
	      support these new features, these values are more for human
	      consumption, I'm afraid.
	    - Note there is currently no testcase in partsys yet for these
	      features.
	- Marten Svanfeldt optimized shader variable system.
	- Marten also added fixes to the way the new texture manager handles
	  cubemaps.
	- Paul Garceau noted a known bug with Win98/ME platforms having to do with
	  the use of dllwrap.exe under Msys/Mingw (win32gcc.mak).  This bug has been
	  relegated to the area of a systems platform specific bug.  It does not affect
	  any other build platforms, including Cygwin.
13-Feb-2003
	- Added another trivial case to csRect::ClipLine() making it a little
	  bit safer again.
	- Dynavis tiled coverage buffer now uses ClipLine(). This greatly
	  cleans up the code and makes it a lot more robust.
	- Made a new counter system in BugPlug. Using this system it is now
	  a lot easier to manage counters that should count something every
	  frame. Basically the application only has to do
	  bugplug->AddCounter("countername") to increase a named counter
	  and BugPlug will do the following at the end of every frame:
	      - Show the last value.
	      - Show the total value accumulated over several frames.
	      - Show the average per frame.
	  The user of these counters doesn't have to take care of clearing
	  them every frame and displaying them.
	  There are two types of counters: normal counters and enum counters.
	  An enum counter keeps track of 10 different values and calculates
	  relative percentages. To use an enum counter an application or
	  plugin can do bugplug->AddCounterEnum ("countername", enumval).
	  enumval should be between 0 and 9.
	- Added commands 'counterfreeze', 'counterreset', and 'counterremove'
	  to BugPlug. With 'counterfreeze' the counters stop counting and
	  you can examine the current values of the counters more easily.
	  With 'counterreset' all counters are reset to initial values.
	  With 'counterremove' all counters are removed. Commands
	  are assigned as follows:
	      - shift-p: counterfreeze
	      - ctrl-p: counterreset
	      - alt-p: counterremove
	- A few minor optimizations to Dynavis in the tiled coverage line
	  drawer.
	- Converted tinyxml string class (TiXmlString) to use malloc/realloc.
	  This should speed up things a tiny bit.
	- Fixed a bug in all the particle systems. They were not correctly
	  updating their change number when the shape of the particle system
	  changed. This *can* potentially lead to culling errors.
	- In addition to the bug above the particle systems were also not
	  calling FireListeners() to notify cullers about possible changes.
	- Got a patch from James Baicoianu <james@baicoianu.com> which
	  implements iPolygonMesh for the ball mesh object so it can be used
	  for collision detection
	- Removed the very inefficient 'light_statics' from walktest. This
	  function needs to be done differently (i.e. DeferUpdateLighting()
	  should be automatic). On large levels (i.e. PlaneShift levels) this
	  function was second in the top (profiling).
	- When you specify the <localshadows/> tag with a genmesh object
	  it will no longer use the DeferUpdateLighting() system but instead
	  it will be lit using the same system that is used for things.
	  This means that lighting will be calculated during -relight
	  and cached just like with things. At this moment there is no
	  shadow information yet. So if a light touches a genmesh it will
	  be fully lit by that light. So the cache on disk basically involves
	  a list of all lights that affect the mesh and nothing more. In
	  future we will cast real shadows on genmeshes.
	  Using this system also ensures that the genmesh lighting will be
	  automatically updated when a light changes (pseudo-dynamic or
	  dynamic) even without having to call DeferUpdateLighting().
	- Christian Bayle did some more Debian stuff.
	- Philipp Aumayr added support for attenuation 3 for new renderer. Also
	  added parsing for this.
	- Matthias Braun renamed aws flex and bison files to more standard
	  extensions.
12-Feb-2003
	- Performed several optimizations on the tinyxml parser. Hopefully
	  it is now a little faster.
	- Added three clipping routines to csRect. All three clip a line to
	  a box:
	    1. ClipLineGeneral: general clipping routine. Doesn't check for
	       any trivial cases and is not safe for large coordinates
	       (bigger than 15 bit int).
	    2. ClipLine: general clipping routine. Checks for trivial cases
	       (line fully outside box, vertical line, horizontal line)
	       but is also not safe for large coordinates.
	    3. ClipLineSafe: Checks for trivial cases and is safe for very
	       large coordinates. This function will automatically switch
	       to ClipLine() if the given coordinates are small enough.
	  Thanks to Steven Geens for making the base algorithm.
	- Matthias Braun did the following:
	  Changed the way CS looks for the install path a bit:
	    - Remove csGetInstallPath function and added csGetConfigPath
	      and csGetPluginPaths.
	    - Changed win32, unix and mac implementations accordingly. All 3
	      compile and the win32 and unix one run fine for me. However I'm
	      not able to test the macos one, as the shell server can't run
	      any graphical app (and also not vsh for some reason).
	    - Changed some #includes: When the include file is on the same
	      directory don't do #include "walktest/walktest.h" but only
	      #include "walktest.h"
	    - There is no need to link the physics loader with ODE.
	- res updated Doxygen documentation for iEvent.
	- Daniel Duhprey did the following:
	    - Added a function to terrbig to convert arbitrary float data (vs
	      image data which has a granularity of 1/255).
	    - Also a fix from John Harger for msvc.
	- Anders Stenberg did some additional fixes for cubemaps.
11-Feb-2003
	- Fixed lightning command in walktest to also work if there is no light
	  called 'l1'.
	- Fixed lightning sequence in flarge a bit.
	- Added iSequenceManager->GetDeltaTime().  This time should be added to
	  GetMainTime() if you want to know the current main time when NOT in
	  an operation callback!  If you are in an operation callback then you
	  should use the delta time that is given to you as a parameter
	  instead.
	- The sequence manager now fires in the 'final' stage
	  (cscmdFinalProcess) instead of cscmdPostProcess.  The engine sequence
	  manager now fires in the cscmdPostProcess stage instead of
	  cscmdPreProcess.  This is to ensure that the following order of
	  execution is guaranteed for every frame:
	    1. Frame is rendered.
	    2. Engine sequence manager fires and performs remaining timed
	       operations.
	    3. Sequence manager fires and performs operations.
	  We REALLY need a better event priority system so that we don't have
	  to depend on those ugly 'pre', 'final', and 'post' things.
	- Eric Sunshine fixed documentation booboo (<texture> was used instead
	  of <texmap>) in thing.txi which was reported by Oroszi Balazs
	  <oroszib@vpg.sulinet.hu>.
	- Eric Sunshine repaired some poor wording in csutil.txi.
	- Eric Sunshine rewrote the "Typed Arrays" section in csutil.txi.  In
	  addition to other changes, it now provides much clearer warning about
	  which classes are preferred, and which should be avoided.
	- Eric Sunshine eliminated `hbox' warnings from the Texinfo files
	  reported by TeX.
	- Marten Svanfeldt changed render3d so that Philipp Aumayr's new texture
	  manager is default.
	- Marten also fixed a loading bug in shadermgr.cpp.
	- Marten fixed multi-texturing in new shader plugin.
	- Marten did a small fix for constants in texture.h and fixed a missing
	  pre-definition.
	- res reports: openal test in configure now also tests if linking with
	  -lalut is needed.
	- Norman Kramer make the first page visible on first appearance for
	  the AWS notebook.
	- Anders Stenberg fixed some errors concerning leaving wrong texture
	  util activated.
	- Anders also fixed some errors with cube mapping.
	- Christian Bayle added the pre-version of the 0.96 package for Debian.
10-Feb-2003
	- Marten Svanfeldt fixed various bugs in TextureManager and hopefully
	  fixed the VAR-buffer manager.
	- Philipp Aumayr added new TextureManager for Render3D with support
	  for 1D, 3D and CubeMap Textures. iTextureManager and iTexture
	  interface was extended to do so (#ifdef CS_USE_NEW_RENDERER).
	- Anders Stenberg did a hack to prevent CG from ruining cached states.
	- Philip Wyett removed duplicate CS_REPORTER_SEVERITY_DEBUG, which
	  caused perftest to output results twice.
	- Philip Wyett moved the flicker-note texture into 'stdtex.zip',
	  updated the world accordingly and removed the texture from the
	  'data/flarge' directory.
	- Fixed a 'cs-config' typo in creating external app docs, reported
	  by David Calkins.
	- Reverted a change to the image loader multiplexer because it was
	  EXTREMELY slow.
	- Added the ability to bugplug to hide the selected mesh. With
	  ctrl-d h the selected mesh will be removed from all sectors.
	  With ctrl-d shift-h the last removed mesh will be put back (works
	  only once).
	- Fixed a bug in Dynavis debugging module. The code was changed
	  to use csRef but the DecRef() wasn't removed.
	- Extended state dumping in Dynavis a bit.
	- Fixed a bug in Dynavis which could cause wrong culling. The
	  problem is that making tiles empty works by setting a flag.
	  The actual initialization of the tile only happens when somebody
	  wants to update the tile. However, a few of the testing functions
	  didn't properly test for this flag.
	- Removed the state dump code in Dynavis in optimize mode.
	- Fixed a bug in Dynavis occluder clamping (for individual polygons).
	- Worked around a bug in Dynavis caused by the bad polygon drawer
	  with have in the coverage buffer. This polygon drawer cannot
	  cope well with large integer coordinates for the given polygons.
	  Worked around this by increasing Z=.1 to Z=.2 so that the perspective
	  corrected coordinates don't get as big.
	- Dynamic ambient wasn't working correctly for objects using
	  DrawPolygonMesh (fastmesh objects).
	- res updated the DirectSound renderer to use smart pointers and fixed
	  a DecRef() on a smart pointer there.
	- res did the following:
	    - Changed map2cs so mirrors get their own renderpriority after
	      sky, but before wall which is drawn f2b. in map2cs tut6 this
	      reduces the z-fighting problems, but doesn't solve them.
	    - Cleaned .scf file loading (no need for version key any more).
	    - Fixed possible crash in csparser (char* could've been NULL 
	      but was unconditionally delete[]d).
	- Matthias Braun changed scfreg to allow creation of .scf files
	  (default now).
9-Feb-2003
	- res augmented flarge to contain a notice that the flickering in
	  the street is intentional.
	- Philip Wyett extended Cygwin docs to cover installation of MNG
	  and the Open Dynamics Engine (ODE) libraries.
	- Fixed map2cs so that it takes the current directory for fetching
	  the config file if CRYSTAL is not set.
	- Fixed a compile error in csArray. Unfortunatelly this also breaks
	  csArray as the destructor is no longer called for elements in the
	  array. Needs a better fix.
	- Renamed csArray::Delete(int n) to DeleteIndex() since otherwise
	  it is impossible to make csArray<int> instances (since you then
	  get a conflict with the two Delete() functions).
	- Eric Sunshine fixed a silly synatx error in csutil/array.h.
	- Eric Sunshine fixed CS/scripts/cs-config/Makefile.template so that
	  the `clean' target now deletes the generated executable,
	  makefile.dep, and csconfig.mak.  David Calkins <dcalk@verizon.net>
	  reported this shortcoming.
	- res further worked on XMLifying map2cs.
	- res changed the image, sound and model converter multiplexer to
	  lazily load plugins.
	- res additionally did the following:
	    - csMultiplexImageIO::SetDithering() improved.
	    - Fixed model converters/sound loaders after interface change.
	- Matthias Braun fixed csArray with older gcc2.9x compilers.
8-Feb-2003
	- Reverted the changes of res for packed rgb struct since they
	  don't appear to work on linux (png image loader crashes).
	- Fixed a memory overwrite bug in the tiled coverage buffer of
	  Dynavis. This could cause crashes at exit or even during running.
	  Added an assert to protect for future equivalent bugs.
	- Fixed a bad bug in cs2xml which I introduced yesterday.
	- The parsing of LEN now actually works with cs2xml.
	- Anders Stenberg added actual support for different meshtypes 
	  in new renderer. (Triangle strips, quads, points, lines, etc.)
	- Anders also did a small fix to rndbuf.h.
	- res did some minor changes in csendian.h to be better accessible via
	  the api docs.
	- res did some minor API documentation changes.
	- res did a recommit of jpg/png loader w/ packed pixel routine
	  utilization; png loader crash bug w/ grayscale images fixed.
	- Marten Svanfeldt added very early version of shader-loader including
	  a simple sample.
	- res XMLified map2cs. Still needs some work. And cleanup. map2cs
	  seems to have quite a few features not mentioned anywhere and
	  probably unknown to everyone. 
7-Feb-2003
	- Fixed levtool so that by default it now gives usage information
	  instead of the -list option. That way people will not forget
	  to add -dynavis.
	- Possibly fixed the bug in map2cs which adds <moveable /> to the
	  same object that has <vistree />. Wasn't able to test this due
	  to not having a map file.
	- Possibly fixed the bug in cs2xml with converting of LEN keyword
	  in a polygon. Didn't test this yet.
	- Fixed a bug in the OpenGL renderer which causes one of the objects
	  in flarge to disappear. It was related to the rendering of
	  transparent polygons not cleaning up properly. Unfortunatelly
	  this doesn't seem to fix all bugs in this area. Some of the
	  PlaneShift levels still suffer from disappearing objects and
	  I'm sure it isn't caused by wrong visibility culling.
	- Eric Sunshine cleaned up the pthread and qsqrt() tests in
	  configure.ac.
	- res enhanced the map loader so that when loading a <library>
	  a VFS->ChDir() into the lib's dir is performed so that relative
	  paths in the library are work as expected.
	- Jorrit then proceeded to revert the automatic VFS dir setting.
	  This takes away control from the application and that is not good.
	- Made the sprite loader a bit more robust. It now checks if the
	  factory is given before using the state.
	- Philip Wyett fixed -fs switch under Windows GL and poor fps
	  in fullscreen mode.
	- Eric Sunshine augmented the qsqrt() test in configure.ac so that it
	  also now checks for bogus results from qsqrt() in optimize mode,
	  rather than only testing if it compiles.  This is needed because some
	  versions of gcc 3.2.x return incorrect results in optimize mode, such
	  as qsqrt(1)=0.
	- Eric Sunshine augmented the lib3ds test in configure.ac so that it
	  checks for a sufficiently recent lib3ds containing lib3ds/io.h which
	  is required by the 3ds plugin but which is not present in older
	  versions of lib3ds.
	- Eric Sunshine made the following changes to the user manual:
	    - Updated MacOS/X build/run instructions to tell user how to switch
	      to software renderer.  (This used to explain how to use OpenGL,
	      but OpenGL is now default.)
	    - Updated Mingw build instructions to mention that csmingwlibs must
	      be re-installed whenever a newer version of MSYS is installed.
	    - Fixed `hbox' warnings from TeX.
	- Eric Sunshine augmented the lib3ds check in configure.ac so that it
	  works in two phases.  First it checks for lib3ds.  Second, it checks
	  if the installed lib3ds is sufficiently recent.  This approach will
	  provide better feedback and debugging information for a user than the
	  old approach where the checks were combined.
	- Eric Sunshine applied a patch to ogl_g3dcom.cpp from Daniel Schubert
	  <daschubert@web.de> which resolves several int versus GLenum issues.
	- Eric Sunshine changed configure.ac so that --without-x is now the
	  default on Windows.  This should work around the problem on Cygwin
	  where the compilation process was finding the Cygwin X11/OpenGL
	  headers instead of the Win32 OpenGL headers.  This was problematic
	  because the Cygwin headers lack __stdcall, which results in link
	  errors when linking against opengl32.lib (libopengl32.a).
	- res did the following:
	    - Added routines for packed RGB/RGBA vs. csRGBcolor/csRGBpixel
	      conversions; should work correctly on platforms where 
	      sizeof(csRGBcolor) != 3 or sizeof(csRGBpixel) != 4.
	    - Minor documentation changes.
	- Matthias Braun did a little code cleanup in cs-config and made it
	  compatible with jam build.
6-Feb-2003
	- Removed Video.OpenGL.Caps.MaxTexWidth, MaxTexHeight, MinTexWidth,
	  and MinTexHeight options in opengl.cfg. Instead there is now the
	  Video.OpenGL.Caps.MaxTextureSize option. By default this is set
	  to -1 which means the OpenGL renderer will autodetect maximum
	  texture size.
	- Apparently there are drivers when getting the maximum texture size
	  with GL_MAX_TEXTURE_SIZE fails. The OpenGL renderer now detects
	  this case and will issue a warning when that happens. In that case
	  it will assume 256x256 max. You can then use the above option
	  to set the real maximum size.
	- Eric Sunshine added FT_UINT_MAX and FT_ULONG_MAX defines to freefont2
	  "make depend" flags to work around problem reported by David Calkins
	  <dcalk@verizon.net>.
	- Eric Sunshine applied a patch to ensocket plugin from Frank Michler
	  <Michler@students.uni-marburg.de> fixing a problem where the return
	  value from accept() was being misinterpreted.
	- Eric Sunshine fixed the following bugs in
	  csNetworkSocket2::SetSocketBlock() in ensocket plugin:
	    - On Unix, was ignoring the blocking flag and always setting the
	      socket to non-blocking.
	    - On Unix, was erroneously sending O_NONBLOCK to setsockopt() as
	      though it was a socket-option.
	    - On Windows, was erroneously sending the error constant
	      WSAEWOULDBLOCK to setsockopt() as though it was a socket-option.
	- Eric Sunshine applied a patch from Gregory Block
	  <gblock@ctoforaday.com> to pngimage.cpp which fixes PNG loading
	  errors for platforms/compilers where csRGBPixel is not four bytes.
	  Prior to this patch, the PNG loader made the dangerous and fragile
	  assumption that csRGBPixel was always four bytes.  The patch works
	  uniformly by converting all input formats to 24-bit.
	- Matthias Braun enabled qsqrt again as it seems to compile for me
	  without problem and according to Jorrit it's important for
	  performance. configure switch still is in of course.
	- Matthias also removed an unneeded #define from the pthread test.
5-Feb-2003
	- Philip Wyett bumped version to 0.97rdev.
	- Anders Stenberg added better matrix support in CG plugin.
	- Anders updated thing and bugplug to comply to changed meshobject
	  interface for new renderer.
	- Anders fixed some bad indentation in genmesh and also made
	  shadow generation work without <autonormals />.
	- Matthias Braun added a Clear() function to the list iterator.
	- Matthias Braun also changed recursive mutex test to define
	  _GNU_SOURCE first this seems to be needed on older linux
	  distributions to get the recursive extension. Also rewrote the posix
	  mutex code a bit.
	- Matthias did a fix for pthread stuff.
	- Marten Svanfeldt fixed a memoryleak due to the sorted render
	  queues not being destructed when using render3d.
	- Marten also updated the OpenGL extensionheader creator in the
	  python plugin.
	- Matthias Braun disabled qsqrt by default as it seems to trigger
	  compiler bugs in latest gcc although our test succeeds.
	- Marten Svanfeldt added a renderbuffer manager for
	  ATI_vertex_array_object. Fixed the NV_vertex_array_range buffer
	  manager so that it hopefully works. Fixed the discardingsystem.
	- Marten also began implementing shader loading.
4-Feb-2003
	- Eric Sunshine augmented the ODE check in configure.ac so that it
	  works in two phases.  First it checks for libode.  Second, it checks
	  if the installed libode is sufficiently recent.  This approach will
	  provide better feedback and debugging information for a user than the
	  old approach where the checks were combined.
	- Eric Sunshine enhanced the "recursive pthread mutex" check in
	  configure.ac so that it recognizes both PTHREAD_MUTEX_RECURSIVE and
	  PTHREAD_MUTEX_RECURSIVE_NP, rather than only recognizing the _NP
	  variation.  The detected macro, if any, is now properly employed by
	  cspthrd.cpp.
	- Matthias Braun reports: apparently on some bitched strange installs
	  (redhat 7.3 :-/) recursive mutexes compile with gcc but don't
	  compile with g++ :-/
	- Marten Svanfeldt did the following:
	    - Changed the way we pass lightinformation to vertex-programs
	      from using glLight tracking into using variables.
	    - Added a 4-component vector. This is almost a copy of
	      csVector3/csDVector3 with small changes due to the 4th-component.
	    - Added support for csVector4 to shader variables.
	    - Added so that default-color is white when using new renderer
	      (this is needed due to how the new renderer handles lighting).
	- Anders Stenberg moved the implementation of csShaderVariable.
	- Daniel Duhprey optimized shadow volumes from 9x per light to 2x per
	  light. Also changed the shadow calculation to depth pass for now
	  (almost twice as fast).
	- Daniel also added light parameter to DrawShadow() for optimization
	  purposes.
3-Feb-2003
	- Eric Sunshine replaced fabsf() with fabs() in terrbig plugin for
	  improved portability since not all platforms have fabsf().  (An
	  alternate solution would be to check for fabsf via configure.  We
	  will probably want to do this in the future.)
	- Eric Sunshine fixed bugs in the new pthread RECURSIVE_NP check which
	  was recently added to configure.ac:
	    - Was incorrectly using "==" rather than "=" in a `test'
	      conditional.
	    - Was passing incorrect flags to CS_CHECK_BUILD().
	- OpenGL: Removed the unlit superlightmap. This is not needed anymore.
	- OpenGL: Added code to detect the optimal size for the super lightmap.
	- Removed the ExtraBright option in opengl.cfg. Wasn't working anyway.
	- OpenGL renderer now listens to the -verbose commandline option too.
	  If that option is given it will print out information (at close
	  time) about super lightmap cache usage.
	- Split the super lightmap cache in four queues. Queue 0 is for
	  the largest super lightmap size (by default 256x256), queue 1
	  is for the next smaller size (128x128) and so on. When building
	  super lightmaps for DrawPolygonMesh the best queue is selected
	  then. This greatly improves super lightmap cache usage with the
	  same amount of texture memory on the card.
	- Changed Video.OpenGL.SuperLightMapNum to SuperLightMapNum0,
	  SuperLightMapNum1, SuperLightMapNum2, and SuperLightMapNum3.
	  With these you can set the sizes of the four queues.
	- Software renderer implementation of DrawPolygonMesh now does
	  backface culling. This makes it a LOT faster and now performance
	  compares to old style single-polygon drawing.
	- Because of this optimization I reduced the FastMeshThresshold to
	  10 by default now.
	- Eric Sunshine made the following changes to configure's OpenGL tests:
	    - Now checks for opengl32 and cousins before libGL and libMesaGL.
	      Hopefully this will work around problems experienced by Cygwin
	      users who have Mesa installed.  The problem is that Mesa seems to
	      be compiled without __stdcall, yet the header found by CS
	      contains __stdcall.  This mismatch leads to linkage errors.
	      Also, Cygwin users report that using opengl32 works properly.
	    - On Unix, now prefers the vendor's OpenGL over Mesa.  Hopefully
	      this will work around some problems reported by users when Mesa
	      was used rather than the vendor's implementation.
	    - Now uses the pthread flags if present when attempting to resolve
	      the OpenGL library since some users have reported that Mesa's
	      OpenGL library references pthread functions.
	- Eric Sunshine made the following changes:
	    - The configure script now checks for "-framework OpenGL" and
	      cousins before checking for libGL, etc.  This ensures that it
	      will find the built-in OpenGL.framework on MacOS/X before finding
	      the optional Mesa libraries which some people have installed via
	      Fink.
	    - Removed hard-coded OpenGL build flags from macosx.mak.
	    - Augmented OpenAL check in configure script to also recognize
	      OpenAL.framework on MacOS/X.
	    - Augmented OpenAL check in configure to automatically deduce need
	      for dsound.lib on Windows.
	    - Ported OpenAL renderer (plugins/sound/renderer/openal) to
	      MacOS/X.  Works correctly with OpenAL.framework.
	- Philip Wyett worked around #define MNG_DLL for Cygwin port, who's
	  default build of MNG is static.
	- Matthias Braun did a fix to cs-config so that --help works without
	  CRYSTAL being set. Also updated ODE test to look for some new
	  0.035 functions and improved check for recursive mutexes.
2-Feb-2002
	- Optimization with polygon buffers (DrawPolygonMesh) in OpenGL
	  renderer. They use less memory now and they are also more efficient.
	- Cleaned up some unused code in ogl_g3dcom.cpp.
	- Fixed a crash bug with fog when clipping is needed.
	- With Z-plane clipping (OpenGL) we now only switch to exact clipping
	  if the NeedScreenClipping flag is set in opengl.cfg.
	- Fixed bug in OpenGL fog handling. Was broken after a recent
	  optimization.
	- Eric Sunshine eliminated unnecessary and fragile "darwin6.3" alias
	  from vfs.cfg.
	- Eric Sunshine modified tutorial/intro.txi so that it gives the full
	  name of SCF and features a hyperlink to the SCF section.
	- Eric Sunshine updated the comments in configure.ac to more fully
	  inform the reader about the Autoconf bugs which configure.ac works
	  around.
	- Removed redundant number of triangles in the polygon buffer.
	- Cleaned up OpenGL polybuf code a bit more.
	- Removed an unneeded IncRef() on iPolyTexture in the polygon buffer
	  implementation.
	- Eric Sunshine made the following changes to the new csArray template:
	    - Fixed bad bug: Public SetLength() allowed client to
	      indiscriminately add and remove elements from the array without
	      proper construction/deletion.  This unsafe method has been
	      replaced with safe methods Truncate() and SetCapacity().
	    - Fixed bad bug: Pop() was returning a destroyed object.
	    - Fixed non-portable constructs which would fail with some
	      compilers.
	    - Added several new useful methods.
	    - Generally cleaned up and unified the code.
	- Updated documentation about the new csArray class.
	- Added iPolygonBuffer->Prepare() function to make it easier to
	  manage optimal super lightmap calculation.
	- Fixed a bug in csGrowingArray<T>->SetLimit(). It would not
	  adjust the length of the array if the new limit was smaller than
	  the length.
	- Now lightmaps are sorted on biggest dimension before we start
	  choosing a super lightmap. By doing this we can significantly
	  reduce the number of needed super lightmaps for some of the larger
	  objects.
	- Anders Stenberg added first version of CG shader plugin.  It can
	  currently handle both vertex and fragment programs, and use textures
	  supplied by the material.  Shader variables can be bound to CG
	  variables.  Features missing include:
	    * Better handling of passing matrices into CG
	    * Fetching "global" textures directly from the engine by name
	    * Effective code (totally unoptimized now)
	- Anders Stenberg fixed stencil clipping for new renderer again.  It
	  should now work even with shadows.
	- Anders also fixed shader plugins to be up to date with minor
	  changes in the shader interface.
	- Eric Sunshine updated the extremely outdated "External Utilities /
	  Libraries" page on the web site and fixed broken links.
	- res fixed a crash in JNG saving.
	- Matthias Braun rewrote the list template:
	    - Function names are more uniform to rest of CS templates now
	      (Yes, we should use STL but the function names used before are
	      neither STL nor CS standard...)
	    - Internal implementation of csListElement is now correctly hidden
	      and only exposed through the Iterators.
	    - Improved implementation of PushFront and PushBack a bit.
	    - Replaced some const T with const T& to make the copy
	      constructors more efficient.
	    - Fixed gl_varbufmgr for the list changes.
	- Matthias Braun finally found the memory error: an unitialized
	  variable in the ogg reader...
	- Matthias added helper class for scoped mutex lock. Also renamed
	  ScopedMutex to ScopedMutexLock.
	- Matthias changed CS mutex code to support recursive mutexes. Also
	  added check for pthread implementation allowing recursive
	  mutexes.
	- res commented out a csMutex::Create() to make it compile again
	  and Matthias then fixed it for real.
1-Feb-2003
	- Marten Svanfeldt completly rewrote the renderbuffer manager using
	  the VAR extension on Nvidia-cards
	- Marten Svanfeldt added a very lightweight template for a double
	  linked list.
	- Marten Svanfeldt renamed iShaderRenderInterface::GetObject to
	  GetPrivateObject to avoid a error with #define GetObject GetObjectA
	  which exsists somewhere in the windows-headers.
	- Marten Svanfeldt renamed iRenderBufferManager::GetBuffer to
	  CreateBuffer to better show what it does.
	- Lightmaps with DrawPolygonMesh were not correctly aligned. This
	  is a very old bug that was fixed for normal lightmap rendering
	  but not for DrawPolygonMesh.
	- Fixed a bad bug with curved surfaces and pseudo-dynamic lighting.
	  This caused crashes.
	- Work around to a division by zero bug that sometimes happens in emit.
	  Don't know what causes this and I don't understand the emit code
	  so I cannot give a real fix.
	- Fixed a very bad bug in the thing mesh plugin. When a lightcell
	  size was selected different from the default 16, all shadow
	  calculations would go wrong because the shift value (4) wasn't
	  updated. This bug was introduced when I moved thing to a seperate
	  plugin.
	- Matthias Braun applied patch from damage-list@freenet.de.
	  This patch fixed some crashers in csgrid and tries to close a memory
	  leak in palettes. (I modified the patch a bit as it contained a
	  mismatched malloc/delete).
31-Jan-2003
	- Another small optimization in the super lightmap cache. This time
	  avoid virtual function calls.
	- Another small optimization. If nothing was drawn during the
	  unlit texture mapping then no lightmaps are drawn either (for
	  DrawPolygonMesh).
	- Cleaned up super lightmap code a little more.
	- Started work on new optimization in the super lightmap cache. Not
	  operational yet.
	- Made the super lightmap cache in the OpenGL renderer a lot faster.
	  There is now a cost associated with every super lightmap (based
	  on number of lightmaps that are in it) and also a timestamp which
	  says when that super lightmap was last needed. When selecting a
	  new super lightmap this information is used to make sure that
	  useful super lightmaps stay in memory.
	- Fixed a bad bug in the exact clipper used by DrawPolygonMesh. This
	  bug was introduced yesterday and caused lightmaps to be wrong
	  if exact clipping was needed.
	- res fixed MSVC assertion in csString::Collapse() if the string
	  contains characters >= 0x80.
	- Eric Sunshine worked around an internal compiler error on MacOS/X by
	  slightly reorganizing csGraphics3DOGLCommon::ClipTriangleMesh() in
	  ogl_g3dcom.cpp.  Also eliminated a significant number of compilation
	  warnings.
	- Matthias Braun fixed plugin linking with custom lflags for various
	  plugins. Also fixed dependency generation.
30-Jan-2003
	- Greatly modified the DrawPolygonMesh and polygon buffer
	  code in the OpenGL renderer. This is still very experimental
	  so I'm going to continue working on this. There are also no
	  substantial performance improvements yet.
	- Additional small optimization in the super lightmap cache handling.
	- Matthias Braun made plugin makefiles using the CFLAGS from external
	  libraries (3ds, mikmod, ogg/vorbis, openal, ode plugins)
	- Eric Sunshine fixed problem in the various OpenGL renderer and canvas
	  plugins in which GL.LFLAGS was being applied to the `ar' invocation
	  for static builds.
29-Jan-2003
	- Matthias Braun fixed ogg loader crash when sound hasn't been
	  initialized.
	- Matthias Braun also fixed the problem with streamed sounds getting
	  looped regardless of their flags (software sound renderer).
	- Marten Svanfeldt fixed the confusion in the contribution
	  section of the documentation about who did what with the new
	  renderer.
	- Release of CS 0.96r001.
	- The software implementation of DrawPolygonMesh was not at all
	  behaving well in case polygons go beyond the Z-plane. Fixed this
	  now.
	- Philip Wyett updated the msvc_libs links in the documentation.
	- Marten Svanfeldt fixed an error made when rewriting the statecache.
28-Jan-2003
	- Removed iGLStateCache. Instead csGLStateCache is used. This is
	  possible because csGLStateCache doesn't do any memory allocation
	  in any of its methods. This means that the functions of
	  csGLStateCache don't have to be virtual anymore. This gives another
	  small speed increase with the OpenGL renderer.
	- Made r3dtest spit out a useful error message if it cannot find
	  a test level.
	- Most CS applications will now use OpenGL by default instead of the
	  software renderer.
	- Reset use_lazy_clipping in OpenGL renderer to false again by default.
	  Setting this to true has bad effect on performance because then
	  lazy clipping is forced in all cases.
	- Keith Fulton fixed a bug flipping the do_tweening flag on saving
	  of binary spr3d's.
	- Fog now works for DrawPolygonMesh (OpenGL version).
	- OpenGL/DrawPolygonMesh now respects the flag to disable lighting.
	- Eric Sunshine changed the Linux joystick test in configure.ac so that
	  it now reports its results to the user.  Also cleaned up the logic.
	- Eric Sunshine disabled the annoying, abusive message in aclocal.m4
	  about missing FreeType2 library.  We don't need to abuse the user
	  when an optional library is absent.
	- Apparently EffectDrawTriangleMesh() in OpenGL doesn't correctly work
	  with fog enabled. As a temporary work around I switch to
	  OldDrawTriangleMesh() in case fog is enabled.
	- Eric Sunshine fixed a double-delete[] bug in win32/loadlib.cpp on
	  Cygwin reported by Dan Mahoney <domahoneyii@users.sourceforge.net>.
	- Eric Sunshine fixed a bug recently introduced into csconfig.mak where
	  it failed to invoke the build.cs-config target in the sub-make
	  invocation.
	- Added a new setting to the engine with which you can control the
	  number of polygons after which CS_THING_FASTMESH is automatically
	  enabled for things (use DrawPolygonMesh then). The default value
	  is 500:
	      - Added Engine.FastMeshThresshold config option.
	      - Added SetFastMeshThresshold() function to iEngine.
	      - Added GetFastMeshThresshold() function to iEngine.
	      - Added <fastmesh> keyword to the <settings> block.
	  Currently this will only work for things that have no portals and
	  no curves.
	- Set the fastmesh thresshold in flarge to 10. That causes a few
	  objects to use fastmesh now.
	- Matze Braun added configure tests for: libmikmod, libogg, libvorbis,
	  libvorbisfile, lib3ds, libode, libopenal, libfreetype2, a switch for
	  linux joystick drivers.
	- Matze Braun tweaked the list of apps "make install" installs and
	  added a call to "cslight" with flarge and partsys to the end of the
	  install process.
	- Eric Sunshine fixed the lib3ds test in configure.ac so that it no
	  longer assumes unconditionally that libm.a is present.  Not all
	  platforms have libm.a
	- Eric Sunshine removed scftutor for lack of obvious usefulness.
	- Eric Sunshine hacked the cslight run in install.mak to work with
	  MacOS/X.
	- Eric Sunshine protected 3ds2lex.mak inside 3DS.AVAILABLE conditional
	  to prevent "make install" from trying to install it on platforms
	  which do not have lib3ds intalled.  Also added it to "all" and "apps"
	  pseudo-targets.
	- Eric Sunshine added "3DS.AVAILABLE=yes" to MSVC.MAKE.FLAGS in
	  msvcgen/required.mak in order to ensure that app3ds2lev project files
	  get built.
	- The OpenGL halo code was bypassing the state cache.
	- Eric Sunshine fixed botched OSS.AVAILABLE available test which was
	  just added to configure.ac.  The botched test only covered two of the
	  three cases.
	- Small optimization in the OpenGL superlightmap cache.
	- Eric Sunshine updated the CS version number in csver.h, version.txi,
	  and configure.ac (configure) in prepration for the 0.96 release.
	  Also rebuilt the documentation with the new version number.
	- Keith Fulton fixed opposite logic bug in binary sprite saver which
	  was saving the opposite setting for tweening from what was actually
	  set.
	- Philip Wyett did the following:
	    - Changed so release build is now the default one loaded when you
	      open csall.dsw.  This will hopefully help those who are unsure
	      and build the for developers only extensive memory debug build.
	      Note: Those who already have builds should be sure to delete
	      csall.ncb and .opt from 'CS\mk\visualc' or the change will not
	      take effect.
	- Matthias Braun did the following:
	    - Fixed make install rules I introduced yesterday.
	    - Added message to make install.
	    - Only build oss driver if soundcard.h is available.
	    - Only build xfree86vm plugin if that extension has been detected.
	- Philip Wyett fixed crasher in g2d.cpp under MSVC and Cygwin.  (And
	  then Eric Sunshine reverted the fix since it treated the symptom
	  rather than the cause, and it broke several other facilities.)
27-Jan-2003
	- Restored number of super lightmaps in OpenGL to 10 again. Apparently
	  16 was too much for cards with less texture memory. We have to find
	  a better way to discover how many super lightmaps we can really
	  use.
	- Made sure that csTinyXmlNode->GetContentsValueAsInt() and
	  GetContentsValueAsFloat() now return 0 if the contents is actually
	  illegal. Previously they would simply return a random value.
	- Fixed a bug in the OpenGL renderer with EffectDrawTriangleMesh.
	  That function was enabling and disabling several client states by
	  using the OpenGL functions directly but that is illegal since the
	  OpenGL renderer itself keeps a cached state of this. So you should
	  always go through the cache instead. This fixes a bug where
	  enabling DrawPolygonMesh for the car in the street of flarge would
	  cause the snow to become too bright.
	- The OpenGL polygon buffer now stores an array of triangles for fog.
	  Not operational yet.
	- Completely removed the slow general EnableState/DisableState
	  functions in the OpenGL state cache and replaced them with specific
	  enable/disable functions for various states. The hashmap is thus
	  no longer needed. This change gives a small but noticable performance
	  increase.
	- 'res' did the following:
	    - Some sequences reference themselves. Added comments to
	      world file about that fact (and only those comments this
	      time).
	    - Fixed some leaks in genmesh and freefnt2.
	    - Fixed mottest crash.
	    - Updated todo.txt about that fact.
	- Matthias Braun did the following:
	    - Updated and fixed null 3d renderer and canvas.
	    - Update to todo.txt about working null renderer.
	    - Install phystut, csdemo, viewmesh and cslight.
	    - Improved current make install process a bit by doing a
	      cslight run on the installed levels.
	    - Improved dependencies for cs-config.
	    - Fixed cs-config .cex files handling when CS has been
	      installed.
	    - Don't install g2dtest and gfxtest.
	    - Added a check for libmikmod to configure script.
	    - Added tests for freetype2, openal, libogg, libode, and
	      lib3ds.
	    - Added a --enable switch for the linux joystick module.
	- Norman Kramer did the following:
	    - Added dependency on pythoncs.i in makefile.
	    - cspace now includes the iDocumentSystem related interfaces.
	    - Before you can query the iDocumentSystem interface you
	      have to put it in the registry by
	      csInitializer.RegisterDocumentSystem (object_reg).
	- Philip Wyett did the following:
	    - Changed simplecloth to use GL by default. With no way
	      seemingly of getting it working correctly for 0.96 under
	      software, will avoid alot of error reports for a problem
	      we already know about.
	    - Fixed some warnings in GL under MSVC release build.
	    - Removed the extra ; from the ends of some lines of code
	      in bcterr.h.
	    - Wrapped up newly added 'shadowmat' code in genmesh for new
	      renderer as a short term measure to fix crashers in
	      default cvs tree i.e. isotest and isomap.
	      Members of the team working here just search for @@@ to
	      find where the temporary modifications have been made.
26-Jan-2003
	- Norman Kramer did the following added updates to cspython by
	  Rene Jager <renej.frog@yucom.be>:
	    - Attached a tgz file with include/ivaria/cspace.i which
	      %include's at the end ivaria/pythoncs.i (ifdef SWIGPYTHON)
	      or ivaria/perl5cs.i (ifdef SWIGPERL5); is extendible of
	      course ;-)
	      Most of the python specific stuff is now in
	      ivaria/pythoncs.i, but some "#ifdef SWIGPYTHON" code
	      remains, although very little. Result: 40% of previous
	      cspace.i is now in pythoncs.i
	      Also updates for cspython.mak and missing cspymod.cpp
	      (needed for using CS as a python module).
	      Update of scripts/python/pysimpcd.py (now sound on
	      collision).
	      Next thing to tackle is the duplicate list with
	      interfaces...
	    - I received the code from Mark Gossage and he states that
	      the smart pointers (read csRef) cause extra (unneeded)
	      code... he's right...  this resulted in preventing SWIG
	      handling csRef by ysing appropriate typemaps; result:
	      less generated code and clear usage in python (hence
	      no __deref__) necessary ;-)
	- Norman Kramer also did the following:
	    - Changed +value in enums to value (without the '+' sign)
	      this caused SWIG trouble (swig bug report has been filed)
	      (this change is small enough to make it here than to write
	      a dozen lines in swig to run around it).
	    - Updates by Rene Jager <renej.frog@yucom.be>:
	      Test examples for using CrystalSpace from within Python.
	      simpcd.py now plays sound on collision.
	- 'res' did the following:
	    - Some sequences reference themselves. Added comments to
	      world file about that fact.
	- Added a missing call to SetMirrored() in the old OpenGL renderer
	  in EffectDrawTriangleMesh(). This fixes a few problems with
	  DrawPolygonMesh and DrawTriangleMesh in mirror mode.
	- Optimization in DrawPolygonMesh so that RecalculateDynamicLights
	  is only called when the polygon buffer is marked as dirty.
	- Optimization in DrawPolygonMesh: the OpenGL transforms are only
	  setup once for one DrawPolygonMesh call as opposed to several
	  times for every internal DrawTriangleMesh call.
	- Eric Sunshine fixed bug in walktest.mak.  The "walkall" target was
	  not declared .PHONY.
	- Eric Sunshine eliminated some compilation warnings from the project.
	- Eric Sunshine update vfs.txi to reflect present reality.
	- Eric Sunshine eliminated TeX `hbox' warnings from the user manual.
	- Eric Sunshine added missing `#ifdef CS_HAS_MEMORY_MAPPED_IO' to
	  csutil/mmapio.cpp.  Problem reported by Robert Stewart
	  (rmsgrey@users.sourceforge.net).
25-Jan-2003
	- Gregory Block did the following:
	    - Added an alias for MacOS X to vfs.cfg.
	- Philip Wyett did the following:
	    - Added newline a end of file gfxtest.cpp.
	- Matthias Braun did the following:
	    - Changed name csconf target to cs-config to be conform with
	      rest of CS and to fix install.
	    - Removed scf.cfg from CSTOOL.CFG as it already was in CSUTIL.CFG
	- 'res' did the following:
	    - Fixed -1 bug in win32.cpp reported by Anders Stenberg.
24-Jan-2003
	- Philip Wyett did the following:
	    - Fixed redefinition of i in for loops under MSVC 6 in
	      shadermgr.cpp.
	- Philipp Aumayr did the following:
	    - Updated metaballs for new renderer.
	- Added the notion of 'camera' flag to a render priority. When this
	  flag is true the engine will scan all objects in this render
	  priority to see if any of them has the CS_ENTITY_CAMERA flag set.
	  If that's the case it will automatically correct the position of
	  that object based on the current camera position (during rendering).
	- Added various API functions in CS to get/set this render priority
	  flag.
	- Added <camera> keyword for parsing render priorities so that you
	  can manually set this flag. If you don't specify render priorities
	  in your map then the 'sky' render priority will automatically have
	  this flag set.
	- When a mesh object with CS_ENTITY_CAMERA is added to a sector it
	  will automatically cause the render priority of that object
	  to be tagged with the correct do_camera flag. This is done to ensure
	  backwards compatibility.
	- When rendering the sector will now scan all objects that are in
	  a render queue with camera flag set and that have CS_ENTITY_CAMERA
	  set and will move them to the new location. At this moment this
	  only works for objects that are always at 0,0,0 position. This
	  is also usually the case. This solves the bug in csdemo.
	- Bugplug no longer depends on the existance of the font server.
	- OpenGL canvases no longer depend on the existance of the font
	  server.
	- Cleaned up csSector a bit. Added PrepareDraw().
	- Eric Sunshine changed csconf.mak so that it now extracts sections
	  delimited by <cs-config> and </cs-config> directly from the
	  platform-specific makefile and inserts them verbatim into the
	  generated cs-config script for the -makevars option.  This replaces
	  the fragile $(subst) magic in csconf.mak which was attempting to
	  protect $@ in emitted variables, and also generally prevents
	  clobbering of other makefile special variables, such as $*, and
	  special functions, such as $(notdir), $(basename), etc.
23-Jan-2003
	- Matthias Braun did the following:
	    - Update about leaks in todo_1.0.txt.
	- Daniel Duhprey did the following:
	    - Fix in terrbig to improve compile option for mingw.
	    - Optimization to volumes for new renderer.
	    - Small change for transformations in genmesh (needed for
	      the optimization).
	- 'res' did the following:
	    - Replaced ilogb() with csLog2() in terrbig.
	    - Leaks fixed in terrbig.
	    - Walktest now properly cleans up if initialization fails.
	    - Put static vars from csDynaVis::UpdateCoverageBuffer() into 
	      CS_IMPLEMENT_STATIC_VAR() to fix leaks
	- Fixed genmesh so it compiles again.
	- Fixed effects plugin so it compiles again.
	- Fixed an initialization error with the new mesh_tri_normals in
	  genmesh.
	- Fixed bug in dynamic lighting of curves. Hitting 'L' in walktest
	  would trigger the bug if the donut in the street was visible.
	- Removed 'effects' plugin from walkall again and instead added
	  'effects' to 'drivers' and 'drivers3d' targets.
	- Sound loaders are no longer listed in the 'drivers' and 'snddrivers'
	  target. Those are not drivers.
	- Fixed a bug in the OpenGL renderer where a 'modified' flag was not
	  exactly set in the right way.
	- Fixed a bug in DrawPolygonMesh() with regards to lightmaps (in the
	  OpenGL renderer).  The bug was that GL_RGBA8 was used in case the
	  super lightmap was not in the cache and GL_RGBA was used otherwise.
	  Now GL_RGBA is used in all cases.
	- DrawTriangleMesh() and EffectDrawTriangleMesh() initialized
	  use_lazy_clipping to false.  It was never set to true.  However lazy
	  clipping is very good for performance so it is best to set that to
	  true initially and only set it to false when it is required (OpenGL
	  renderer).
	- Increased the number of super lightmaps from 10 to 16 for OpenGL.
	- Improved setting of use_lazy_clipping flag a bit.
	- Fixed the memory leak in csPolygonMeshTools for real using the proper
	  CS_IMPLEMENT_STATIC_VAR instead of the non-portable dependency on
	  global constructors/destructors.
	- Made sure that for outer and optional clippers the '0' (software)
	  clipper is never selected (OpenGL renderer).  Instead it is replaced
	  with 'N' (lazy clipping).
	- Eric Sunshine made the following changes:
	    - Restored debug symbols for plugins in Mingw/Cygwin.  Apparently,
	      the technique of using -shared to create plugins produced
	      inconsistent results: some plugins displayed debug symbols in
	      gdb, while others did not.  (Note that --export-all-symbols had
	      absolutely no effect.)  Reverted to using dllwrap for plugin
	      creation, as this seems to give more reliable results with debug
	      symbols in gdb.  Also now uses dlltool to create the .def file
	      rather than dllwrapwrap.sh.
	    - Also had to work around problem caused by console-support main()
	      function in win32.cpp.  Unfortunately, dllwrap tried resolving
	      the symbols referenced by this function, even though it is not
	      used for plugins, but the referenced symbols (_cs_main and
	      ApplicationShow) do not exist in plugins.  Consequently, had to
	      dummy up these symbols in CS_IMPLEMENT_PLATFORM_PLUGIN().
	- Eric Sunshine changed DO.SHARED.PLUGIN.CORE in win32gcc.mak so that
	  it now creates the .def file manually rather than using dlltool.
	  This was necessary to work around a bug/problem with dlltool where it
	  fails to recognize and insert into the .def file exported symbols
	  from static libraries.  In this case, the SCF goop symbols from
	  csengine library failed to make it into the engine plugin.
22-Jan-2003
	- Philip Wyett did the following:
	    - Fixed delete vs. delete[] mismatch in aws.
	    - Fixed CR/LF reading problem under Cygwin (engine.cfg).
	- 'res' did the following:
	    - Some line endings were messed up in loadlib.cpp.
	    - Effects system now returns smart pointers in some cases.
	    - Fixed some memory leaks in the effects system and GL state
	      cache.
	    - Removed PNM code from gfxtest.
	    - Gfxtest can output a list of supported image formats.
	    - Bmp loader now reports 32bit RGBA support.
	    - Attempt to fix leak in csPolygonMeshTools::CalculateEdges().
	    - Fixed leaks in DynaVis unit test.
	    - Sequences which contained a 'recurse' kept a reference to
	      themselves preventing proper clean-up.
	- Matthias Braun did the following:
	    - Marking the simpvs bug as fixed.
	    - Some more updates and notes in todo_1.0.txt.
	- Anders Stenberg did the following:
	    - Working shadows for the new renderer. (Requires closed
	      meshes for now.)
	- Daniel Duhprey did the following:
	    - Vertex Program to extrude shadow volumes to infinity.
	    - Fixed some buffer issues with the dirty flags in genmesh
	      (Could cause some problems if people arbitrarily change
	      the triangle buffer without changing the others) Also
	      fixed so trinormals is computed regardless of the
	      autonormal flag.
	    - Fixed a memory leak and a problem with open geometries
	      in genmesh.
	    - Compatibility fix with old renderer for genmesh.
	    - Attempt to fix lighting in terrbig. Add some error
	      checking on the input file.
	- Made iEngine->CreateDynLight() a bit more efficient by avoiding
	  the SCF_QUERY_INTERFACE.
	- Lights (dynamic and static) now keep a real reference to the lighting
	  infos they store in their maps. That way there will be no crash
	  if objects get deleted before the lights are deleted. This fixes
	  crash at exit if you press L and then quit walktest.
	  I think this also fixes the crash at exit that sometimes occurs
	  with Blocks.
	- Eric Sunshine committed a patch to win32/loadlib.cpp from John Harger
	  <john_h@selectpath.com> which hopefully will resolve the problem on
	  Cygwin where vfs.dll failed to load (or any other plugin which has an
	  implicit dependency upon DLLs in Cygwin's /bin directory).
	- Philip Wyett did the following:
	    - Fixup in msmodel.cpp to match new CS_ALLOC_STACK_ARRAY.
	- 'res' did the following:
	    - Win32Assistant IncRef()'d the object registry but did not
	      DecRef() it.
	    - Plugins won't be unloaded w/ MSVC extensive memdebug
	      (otherwise source file info for leaked objects gets lost).
21-Jan-2003
	- Keith Fulton moved the maya2spr converter from the Planeshift
	  cvs to Crystal Space.
	- Made a makefile for maya2spr and fixed it so it compiles cleanly.
	- Marten Svanfeldt did the following:
	    - Fixed a bug which made statecache segfault on destruction. It
	      should not be a csRef but just an ordinary pointer.
	- Matthias Braun did the following:
	    - Worked around a bug in aws: aws won't work if there isn't a
	      iGraphics2D registered at the time aws is loaded. Changed
	      loading order in vidprefs.cpp to fix a bug reported by Eric.
	    - Added check an warning message about iGraphics2D to aws.
	- 'res' did the following:
	    - walktest: default font is loaded if user-specified one fails
	    - Renamed ALLOC_STACK_ARRAY to CS_ALLOC_STACK_ARRAY. Flipped
	      order of var & type parameters so it matches the C++ variabel
	      declaration (type first, then name).
	    - win32: console windows are only hidden after an app window was
	      created.
	    - win32: plugins now export a function which returns the used
	      compiler. If it doesn't match the app compiler the plugin isn't
	      loaded (so mixing MinGW & MSVC binaries will cause an error
	      report instead of just a crash).
	    - Added iCommandLineParser::GetBoolOption().
	    - A few leak fixes.
20-Jan-2003
	- Marten Svanfeldt did the following:
	    - Added two methods to iRenderBuffer allow discardable buffers.
	    - Modified genmesh to correctly handle buffers which can be
	      discarded.
	    - Fixed indexbuffer lockingproblems when using multiple
	      texturepasses.
	    - Updated glshader_mtex.cpp to follow newest interface. Added
	      iRenderMesh* to Deactivate.
	- Norman Kramer renamed PLUGINS.DYNAMIC to PLUGINS in win32gcc.mak.
	- 'res' did the following:
	    - Small change to the LoadLibrary error reporting: instead of
	      GetLastError() calling twice, its return value is now stored
	      (theoretically, FormatMessage() could change the last error
	      code, so a wrong error number would be used in the sprintf()).
	    - Reduced number of spaces in csPrintLibraryError() (caused
	      linebreaks at least for german 'file not found'... two should be
	      enough for visual grouping of the messages).
	- Christian Bayle did more Debian updates.
	  Smaller icons to respect policy.
	- Removed the obsolete and non-working iRenderView callback system
	  and the associated iEngine->DrawFunc().
	- Eric Sunshine reverted the recent change to the general
	  csFindLoadLibrary() which caused it to throw away potentially useful
	  diagnostic information when a plugin failed to load.  Unconditionally
	  throwing away this information was unacceptable.  Instead, the
	  verbosity of error messages from the plugin loader is now controlled
	  by the new command-line option "-verbose".  When -verbose is used,
	  error messages present detailed information about the load failure.
	  When not used, a simple message is printed saying that the load
	  failed and that the user should use "-verbose" for more details.  For
	  debug builds, -verbose is the default.  For optimize builds, it is
	  not.
	- Andrew Craig fixed a problem with unreleased references in the
	  Windows OpenGL canvas. RestoreDisplayMode() set is_open to false
	  but this prevented the superclass Close() to properly do the
	  cleanup. In addition fixed the call to the parent Close() so that
	  it calls csGraphics2DGLCommon::Close() instead of
	  csGraphics2D::Close().
	- Eric Sunshine committed an update for win32/loadlib.cpp from John
	  Harger <john_h@selectpath.com> which implements error reporting.
	  Previously, win32/loadlib.cpp simply threw away all diagnostic
	  information, which made it impossible to debug plugin load failures
	  on Windows.
	- Eric Sunshine augmented jobber.pl so that it emits "USE_PLUGINS=yes"
	  to the config.mak file which it fakes up.  This fixes the problem in
	  which scftutor.mak was misbehaving and adding dog.cpp and worm.cpp to
	  the appzoo project.  (These files should have appeared only in the
	  plgdog and plgworm projects.)
19-Jan-2003
	- Philip Wyett fixed mismatched delete vs. delete [] at
	  destruction of 'nTerrainInfo' (terrbig).
	- Christian Bayle added new debian package files mostly moved
	  from debian to deb dir.
	- Marten Svanfeldt did the following:
	    - Made csGLTextureCache a interface so that shaderplugins can
	      access it.
	    - Added so that
	      eiShadercsGLRender3D::eiShaderRenderInterface::GetObject
	      returns the texturecache.
	    - Completed multitexturing plugin, including the loader.
	    - Added examplefile for multitexturing plugin.
	- Anders Stenberg adding the first steps towards lighting to the
	  new renderer. Also added support for stream mapping in the
	  vertex program plugin.
	- Anders also cleaned r3dtest up some more.
	- Philip Wyett fixed for MSVC generation failure (simplevp.mak).
	- Fixed a problem where RemoveObject() would not properly remove
	  objects from the sectors so memory leaks would occur.
	- Changed the way the mesh, factory, light and sector lists are
	  implemented so that it is no longer possible to misuse them (the
	  array has been made private).
	- Eric Sunshine began converting the makefiles so that object-files for
	  each module are placed in a module-specific object-file directory,
	  rather than in the common out/PLATFORM/CPU/mode directory.  This
	  change corrects the broken and monolithic design limitation of the
	  makefile system where no two source files in the entire project can
	  have the same name even if they reside in different module
	  directories.
	- Eric Sunshine made a small change to CS_TEXT_CACHE_OUTPUT() in
	  configure.ac, as suggested by Matze, which obviates the need for
	  CS_ESCAPE().  Also removed CS_ESCAPE().
18-Jan-2003
	- Daniel Duhprey optimized terrbig (about 10%).
	- Anders Stenberg did some optimizations in the new render3d
	  OpenGL.
	- Anders also improved error reporting in vertex programs.
	- Norman Kramer did the following:
	    - Included util.h in cspython.cpp for csStrNew declaration.
	    - Commented out shader.h and associated definition from
	      cspace.i, so no conflict between new and old renderer
	      anymore which means the plugin compiles with
	      US_NEW_CSPYTHON_PLUGIN.
	- Marten Svanfeldt fixed multitexturing shaderplugin.
	- Fixed the engine so it no longer tries to load the thing_type
	  immediatelly in initialization. Instead it tries to load it
	  the first time really required. This solves a bug with awstest
	  which loaded the engine plugin manually.
	- Fixed a problem in cslight. It would not request the fontserver
	  at init time. This caused a crash when cslight was used with
	  the OpenGL renderer since the OpenGL renderer requires the font
	  server.
	- Fixed the sky procedural texture so that the sky is back in the
	  sky where it belongs (demosky app).
	- Fixed an assert error at exit when cleaning up materials in the
	  iso engine. This fixes crash at exit for isotest and isomap.
17-Jan-2003
	- Marten Svanfeldt did the following:
	    - Added DrawLine to render3d interface.
	    - Cleaned up shader interface.
	    - Added prepare step.
	    - Extended bugplug to compile under render3d.
	    - Fixed dynavis to compile with render3d.
	    - Fixed a small error in VAR buffer manager.
	    - Added first version of opengl-multitexturing pseudo-fragment
	      program.
	    - Fixed compilation error related to shaders with old renderer.
	    - Fixed an error which caused render-stall.
	- Philip Wyett did the following:
	    - Removed appgui.tpl due to problems it's re-insertion is
	      causing.
	    - Removed EAX plugin. Those needing it, which seems to
	      be virtually none can manually re-generate it back into
	      the build process.
	    - Fix for Cygwin in sockets.h.
	    - Added include dir for DirectX headers that get installed
	      into Cygwin. This will hopefully be part of the autoconfig
	      eventually.
	- Fixed a bug in the OpenGL renderer where attempts were made to
	  clip fog information even if no fog is present. This resulted
	  in valgrind errors (use of uninitialized variables) and also
	  results in unneeded clipping work (not as efficient as it could
	  be). Unfortunatelly this does not yet fix the bug that people
	  experience when turning right in the main hall of flarge.
	- Fixed an initialization error in csEngine. The cache_mgr variable
	  was not initialized to NULL. I guess we were just lucky that nobody
	  hit this :-)
	- Moved the initialization of the state cache in the common code
	  of all OpenGL canvases to before the font cache is created. Otherwise
	  there would be an access to an uninitialized fields since the font
	  cache is already trying to use the state cache.
	- Fixed the crash bug in OpenGL when turning right in flarge.
	  The reason appeared to be that the code to update procedural
	  textures with a texture not in the texture cache wasn't working
	  very well in all cases (not exactly sure why). I fixed this by
	  making sure that the texture is always in the cache before it is
	  being updated.
	- The spr3d, ball, and genmesh mesh objects will now respect
	  static ambient (from the engine) and dynamic ambient (from the
	  current sector) when their lighting is updated
	  (DeferUpdateLighting()). This ambient+dynamic ambient is added
	  to the base color that is already set. This may mean that if
	  you manually set the ambient on such a model then the object
	  can be too bright now. In that case use black as the base color.
	- In optimize mode the general library loader will print out less
	  threathing warnings in case some dll's cannot be loaded. In debug
	  mode the warnings are still as descriptive as before.
	- Fixed glrender3d and shadermgr so they compile on gcc.
	- Fixed r3dtest so it compiles with old renderer too. Easier
	  to compare performance that way.
	- Fixed an initialization bug with bounding box creation in genmesh
	  for new renderer.
16-Jan-2003
	- Philipp Aumayr did the following:
	    - Killed char mod_name[strlen(name)]; bug in cspython.cpp.
	- Marten Svanfeldt fixed a small bugg in GetBuffer which caused
	  buffers to be regenerated each call (genmesh).
	- 'reverse_action' in 3D sprites was not initialized to false.
	- Fixed odedynam plugin so it compiles again.
	- Fixed ie3ds plugin so it compiles again.
	- Eric Sunshine removed the -ggdb check from configure.ac since it
	  breaks the MacOS/X Jaguar port (assembler barfs on generated
	  assembly), and it wasn't really used/needed anyhow.
	- Keith Fulton added csColor and csVector3 types to iSharedVariable.
	- Keith Fulton added ability to reference an iSharedVariable
	  from a <setambient> sequence command using a color_var attribute.
	  Walktest now sets the ambient in the large room to the color of
	  light on the stairs at the moment you hit Ctrl-L to start the
	  lightning.
	- Fixed a memory leak in the shared variable implementation.
	  Changed prototype of New() (for creating a new shared variable)
	  to return a csPtr instead of a normal pointer.
	- Fixed error handling in parsing of shared variables and
	  imposter settings.
	- Changed syntax for variables. Now it is like:
	    <variable name="color"><color red="..." /></variable>
	  or:
	    <variable name="float" value="1.3" />
	- Changed prototype of iSharedVariable->SetVector() so that it
	  expects a vector instead of three floats.
	- Added 'const' to a few methods in iSharedVariable.
	- Updated the FAQ a little bit.
	- Updated a bit of the engine documentation.
	- Eric Sunshine fixed a problem with the Autoconf configure script
	  where it was emitting the obsolete "MINGW_LIBS+=-lmingwex" rather
	  than the newer "LIBS.SYSTEM+=-lmingwex" for older versions of Mingw
	  which require explicit mention of libmingwex.a.  Problem was
	  discovered based upon bug report from Calvin Finch
	  <calvinfinch@shaw.ca> in which he noted that link failed to resolve
	  opendir(), readdir(), closedir().
	- Eric Sunshine applied patch from John Harger <john_h@selectpath.com>
	  to mdltool.cpp to work around MSVC6 internal compiler error.
	- Eric Sunshine eliminated some compilation warnings.
15-Jan-2003
	- Anders Stenberg did various small fixes and updates for the
	  new renderer. Also cleaned up r3dtest a bit, and added more
	  "FPSish" camera control.
	- Christian Bayle updated the Debian scripts.
	- Peter Amstutz converts csObjVector to csRefArray in ODE
	  dynamics plugin.
	- Started removing a few csVector usages and replacing them
	  with typed versions. In particular changed:
	    - csCrysBall
	    - csCollection
	    - csMeshWrapper
	    - csSector
	    - csAnimationTemplate
	- Removed csObjVector (replaced with csRefArray in most places).
	- Fixed terrfunc so that it correctly calculates the bounding box.
	  This fixes an assert in dynavis/frustvis.
	- Eric Sunshine removed the old ad-hoc "make platform" configuration
	  mechanism.  The new Autoconf configure script is now the only way to
	  configure the project.
	- Eric Sunshine updated the configure script so that it emits the
	  makefile variables COMP and OS to config.mak, and also now emits
	  DEPEND_TOOL=cc if makedep is missing or has the incorrect version.
	- Eric Sunshine eliminated compilation warnigns from the cloth plugin.
	- Eric Sunshine fixed bugs in md32spr.mak.
14-Jan-2003
	- Keith Fulton fixed a bug in csPArray and csRefArray where DeleteAll()
	  would not set the limit to 0.
	- Keith also fixed FindByName() and GetIndexByName() in
	  csRefArrayObject when the name of the object was NULL.
	- Fixed a bug in csGrowingArray where DeleteAll() would not set
	  the limit to 0.
	- Added csPDelArray. This is similar to csPArray but it will
	  delete elements that are removed from the array.
	- Replaced all occurances of CS_DECLARE_TYPED_VECTOR with
	  csPDelArray.
	- Removed the CS_DECLARE_TYPED_VECTOR defines.
	- Removed the CS_DECLARE_TYPED_IBASE_VECTOR defines.
	- Changed the return of csRefArray<T>::Pop() from csRef<T> to
	  csPtr<T>. This is a lot safer since you can assign a csRef<T>
	  to a normal pointer and that error isn't detected by a compiler.
	  But you cannot assign a csPtr<T> to a normal pointer. You are
	  forced to use a csRef<T> then.
	- Fixed mdltool to use a csRef<T> to catch the Pop().
	- Fixed compile error in thing plugin (curve templates). Put the
	  DecRef() back in since it is needed. It will now work correctly.
	- csMovable now uses a csRefArray for the listeners. Previously
	  it wouldn't do that with potentially bad results (i.e. it would
	  keep no refs to the listeners).
	- Fixed the documentation on typed vectors and added documentation
	  for all new templated arrays.
	- Got a fix from res so that the console on win32 works again
	  (in debug mode).
	- Fixed a bad bug in the OpenGL renderer (wrong usage of
	  csGrowingArray) which could cause severe crashes when using
	  large triangle meshes.
	- Andreas Busch modified the documentation for map2cs and texmap
	  from old syntax to XML.
	- Added InsertSorted() and FindSortedKey() to csPArray and
	  csPDelArray. Fixed motion plugin with that.
13-Jan-2003
	- 'res' did the following:
	    - Fixed 'entry point not found' for MSVC6/ExtMemDebug config.
	    - Reverted commit of my 'personal' csall.dsw.
	- Philip Wyett did the following:
	    - Fixed MSVC templates.
	- Steven Geens fixed msmodel.cpp so that a 0,0,0 normal is not
	  used.
	- Andreas Busch modified meshobj documents from old syntax to XML.
	- 'res' did the following:
	    - Re-added appgui MSVC template. The difference is just in
	      Release buils; creates a GUI subsystem app instead of a
	      binary app.
	    - Changed way console/GUI subsystem apps are detected.
	    - Hack: console window for GUI apps is kept open when command
	      line -help is wanted.
	    - Milk2spr: ALLOC_STACK_ARRAY instead of GCC-style stack
	      alloc.
	    - Walktest: csInitializer::DestroyApplication() inserted after
	      cmd line help (required so console window is kept open after
	      help).
	    - Commented out a DecRef() which seemed to cause a crash in 
	      csThingObjectType::FindCurveTemplate().
	- Keith Fulton did the following:
	    - Fixed bug in DeleteAll of csPArray and csRefArray which
	      prevented the freed vector from being realloc'd if the array
	      was used again.
	    - Fixed crash on unnamed objects in csRefArrayObject.
	- Further work on XML doc.
	- Added support for <key> in mesh factories and collections.
	- Enhanced the new XML document a lot. Also some other smaller
	  documentation fixes.
	- Renamed csPtrArray to csPArray because csPtrArray may confuse
	  people into thinking it stores csPtr instances.
	- Added csRefArrayObject. This is a templated subclass of csRefArray
	  which is intended for objects that implement iBase and have
	  a QueryObject() function. It adds functionality to look for an
	  object by name (FindByName() and GetIndexByName()). Eventually it
	  is designed to replace CS_DECLARE_OBJECT_VECTOR.
	- Added PushSmart() to csPArray and csRefArray.
	- Removed all usages of CS_DECLARE_OBJECT_VECTOR in CS. Consequently
	  removed that macro.
	- Added QueryObject() to iSharedVariable.
	- CS_DECLARE_OBJECT_VECTOR_NOREF was not used in CS so I removed it.
	- Replaced usage of CS_DECLARE_RESTRICTED_ACCESS_OBJECT_VECTOR with
	  csRefArrayObject<T> and consequently removed the vector.
	- Removed the now unused csNamedObjectVector.
	- Thing plugin now uses csRefArrayObject for curve templates and
	  planes instead of csNamedObjVector.
	- Ode dynamics plugin now uses csRefArrayObject instead of
	  csNamedObjVector.
	- Iso engine uses csRefArray instead of csNamedObjVector.
	- Removed csNamedObjVector.
	- Fixed a small bug in the Insert() function of csRefArray and csPArray.
	- Added csGrowingArray. This will be a replacement for
	  CS_DECLARE_GROWING_ARRAY. csGrowingArray is only for objects that
	  don't require constructors and not for pointers (for pointers use
	  csPArray or csRefArray).
	- Replaced all occurances of CS_DECLARE_GROWING_ARRAY with
	  csGrowingArray. Consequently removed the GROWING ARRAY macros.
	- Andreas Busch modified the documentation for all meshobjects
	  from old syntax to XML. The thing documentation needs a big
	  review.
	- Eric Sunshine augmented the configure script to emit
	  CS_UNIX_PLUGIN_REQUIRES_MAIN to volatile.h for Unix platforms.  Note
	  that it emits this based upon the broad assumption that Unix
	  platforms will require it.  In the future, we need to perform a real
	  check.
	- Eric Sunshine repaired overfull hbox warnings reported by TeX in
	  xmlfmt.txi.
12-Jan-2003
	- Steven Geens reports:
	  milk2spr now uses the normals given by milkshape.
	  Because CS only allows one normal per vertex the amount of
	  vertices, I had to add multiple vertices with same coordinates.
	  The amount of vertices is nearly tripled.
	  This results in much larger model files.
	- Andreas Busch modified documents from old syntax to XML.
	- Started work on new map format document.
	- Eric Sunshine silenced some warning messages from ActiveState Perl
	  during configuration process.
	- Steven Geens made milk2spr add normals to the vertices.
	- Andreas Busch modified the documentation for spr2d/spr3d/cal2cs 
	  from old syntax to XML.
	- Eric Sunshine fixed some Texinfo mark-up errors and eliminated a
	  number of overfull and underfull hbox warnings reported by TeX.
11-Jan-2003
	- Keith Fulton added GetReverseAction() to get whether the current
	  action is operating in reverse or not.
	- 'res' did the following:
	    - Memdebug.cpp compiles again on MSVC.
	    - MSVC6 projects now have 'ExtensiveMemDebug' configuration as
	      well.
	    - Added facility to msvcgen to support DLL delay loading.
	    - JNG plugin now checks first 8 bytes of the supplied data for
	      the MNG/JNG sig before invoking libmng.
	    - Some comments about delay loading to MSVC templates.
	- Fixed a problem in genmesh where
	  iObjectModel->GetPolygonMeshColldet() was not returning the
	  polygon mesh implementation of the object.
	- Also fixed Doxygen comments in iPolygonMesh for the two new
	  methods (deformation).
	- Fixed the unit tester in csgeom for the new methods.
	- Fixed the rapid plugin for the new methods.
	- Fixed various outdated information throughout the documentation.
	  Still a lot of work to do however. Some of the modifications I did:
	    - Removed all mention of 8-bit display support since CS
	      no longer supports that.
	    - Modified all map file examples from old syntax to XML.
	    - Used csRef where appropriate.
10-Jan-2003
	- Charlls Al'Quarra started better indenting of cloth plugins.
	- Charlls also added 2 methods to iPolygonMesh:
		virtual bool IsDeformable () const = 0;
		virtual uint32 GetChangeNumber() const = 0;
	- Philip Wyett did the following:
	    - Fixed clothobj.cpp - No more comment as this is just not
	      paying attention!
	    - Changed lib MSVC links with from png.lib to libpng.lib.
	    - Updated docs to reflect a new versions of msvc_libs.
	    - Fixed xwindow.cpp.
	- Made the calling of the movable callbacks safe so that they now
	  can delete themselves from the movable. This basically amounts
	  to walking the callback list in reverse order.
	- Changed the loops in all iLightCallback functions to go in reverse
	  order instead of the solution that is now used.
	- Added iLight parameter to the functions in iLightCallback. That
	  way you can use the same callback instance for listening to
	  multiple lights at once.
	- Added iObjectWatcher interface. This is a new system so that you
	  can easily watch a number of objects at the same time. Currently
	  this system supports lights and movables.
	- Added iEngine->CreateObjectWatcher(). This will create an empty
	  object watcher for your own personal use.
	- Added csPtrArray. This is a templated array similar to csRefArray.
	  The main difference is that no reference counting is used.
	  The difference with csVector is that csPtrArray is type-safe.
9-Jan-2003
	- Fixed a bug in the iLight version of IsDynamic(). This caused
	  pseudo-dynamic lights to be broken since the recent move of thing
	  outside the engine since that forced the system to use iLight
	  instead of csLight.
	- Fixed a bug in the genmesh object. It would potentially write
	  outside array bounds if the number of vertices in the factory
	  changed after objects made from that factory were being used.
	  Now the objects will constantly check if the factory is still ok.
	- Keith Fulton did the following:
	    - Added SetOverrideAction, which allows the sprite to run a
	      named animation one time, then auto-reverts back to
	      whatever action was going on before.
	    - Also added SetSingleStepAction, which forces the frame
	      advancing to never skip key frames no matter how slow the
	      CS framerate is. This feature already existed, but it was
	      using the looping flag as the flag on when to single-step
	      the anim also, which is wrong.
	    - Added another menu of Actions to viewmesh to view anims
	      usign SetOverrideAction, which allows the sprite to run
	      a named animation one time, then auto-reverts back to
	      whatever action was going on before.
	- 'res' changed param 'type' to 'value' in
	  iDocumentNode::GetNode[s].
	- 'res' changed configuration name "ExtensiveDebug" to
	  "ExtensiveMemDebug".
	- Philip Wyett fixed iso engine and viewmesh.
	- Charlls Al'Quarra added GetBitArray() to csBitArray to get the
	  full array so specialized (sequential) manipulations/reading
	  can be done without the overhead of calling for individual bits.
8-Jan-2003
	- 'res' did the following:
	    - Moved shellstuff.h from include/cssys/win32 to
	      libs/cssys/win32.
	    - Put #ifndef around #define CSIDL_PROGRAM_FILES.
	    - BMP plugin can now read/write 32bit w/ alpha files.
	    - INC.SYS_CSSYS makefile var.
	- Philip Wyett did the following:
	    - Removed shellstuff.h.
	- Paul Garceau did the following:
	    - Eliminated CFLAGS.INCLUDE in win32gcc.mak.
	      Moved /directx -I references to ddraw.mak, ddraw8.mak.
	    - Relocate -I /directx references for Win32gcc (Mingw-Msys).
	- Peter Amstutz fixed negative array index crash in awsgbl.cpp.
	- Committed a 'backwards compatibility' set from Rene Jager for the
	  Python plugin and SWIG 1.1. The new cspython plugin is built when
	  USE_NEW_CSPYTHON_PLUGIN=yes during make. It is now put in
	  mk/local.mak.
	- Fixed frustvis/dynavis for completely flat objects.
	- Keith Fulton fixed a bug in frame anim of sprite3d's when going
	  from a time delayed frame to a space displacement frame.
	- Fixed a memory leak in the light callbacks (for color changes)
	  that were added some time ago to the lighting class. The code
	  used a csVector to store the light callbacks but csVector doesn't
	  automatically DecRef() the contents when destructed. Now uses
	  csRefArray instead.
	- Added OnPositionChange() to iLightCallback. This is called when
	  the position of a light changes.
	- Added OnSectorChange() to iLightCallback. This is called when
	  the sector of a light changes.
	- Added OnRadiusChange() to iLightCallback. This is called when
	  the radius of a light changes.
	- Added GetLightNumber() to iLight. This can be used to check if
	  a light has changed position, color, sector, or radius since last
	  time you called that function.
	- Bounding box was not correctly updated after doing HardTransform() on
	  a 3D sprite.
	- Added OnDestroy() to iLightCallback.
	- The comments in iLightCallback indicated that it was safe to
	  remove the callback from inside the callback itself. But this
	  was actually not true. Changed the loops in light code to make
	  it really safe.
7-Jan-2003
	- Matthias Braun added macos/x rules to jam build.
	- Philip Wyett did the following:
	    - Fixed caltocs so it compiles again.
	    - Manual update of MSVC 6 project files.
	- Keith Fulton added SetReverseAction to the Sprite3d so that
	  they can walk backwards without defining a new action.  Call this
	  just after setting the action.  Also he made it reset to forward
	  each time SetAction is called, so the old behavior will still
	  work normally, except when the the programmer explicitly tells
	  it to go backwards.
	- Eric Sunshine made another patch to the configure script to allow it
	  to work with Jorrit's eerie hybrid installation on Windows where he
	  has mismatched headers.  Now ensures that int32 is known prior to the
	  windows.h test.
	- Eric Sunshine added the new makefile variable MSVC.MAKE.FLAGS to
	  CS/mk/msvcgen/required.mak and msvcgen.mak.  This variable allows one
	  to give additional options to the child "make" invocation during the
	  synthesis process.  It is most useful for providing additional make
	  variable definitions.
	- Eric Sunshine set MSVC.MAKE.FLAGS in required.mak to define HAS_CAL3D
	  to "yes".  This will allow the synthesis process to build the
	  `caltocs' application.
	- Eric Sunshine updated configure.ac so that it normalizes the value of
	  CS_PLATFORM_NAME which is emitted to volatile.h.  This is necesary
	  because that value is used to make selections from vfs.cfg and
	  joystick.cfg.
	- Eric Sunshine updated vfs.cfg and joystick.cfg to agree with the new
	  normalized CS_PLATFORM_NAME.
	- Eric Sunshine updated NASM URL in user manual.
	- Eric Sunshine updated aged entries in Contributors section of user
	  manual.
6-Jan-2003
	- 'res' did the following:
	    - Removed ChangeDisplaySettings() from win32.cpp.
	    - Added code to glwin32 canvas to prevent unnecessary mode
	      switches, as inspired by Ben Thomas
	      <ben.thomas@wickedstudios.com>. DirectX seems to be smart
	      enough to avoid them on its own.
	    - Inserted ALLOC_STACK_ARRAY so python compiles on MSVC.
	- Wouter Wijngaards did the following:
	    - Possible fix for a bug (reported by Michael O'Shea). The
	      haze mesh object would cause a stack overflow in the
	      recursive DrawPolyAdapt routine. Fix is to clamp the max
	      recursion depth, since I can't reproduce.
	- Norman Kramer did the following:
	    - Made system includes instead of project includes (jng plugin)
	      ( <> vs. "" ) now "make dep" shuts up about missing zlib.h
	      and libmng.h.
	- Fixed a stupid bug in Dynavis. Dynavis wasn't correctly updating
	  the kdtree when objects moved. The reason was that UpdateObjects()
	  wasn't called when needed. Frustvis didn't suffer from this
	  problem.
	- Eric Sunshine added an Autoconf `configure' script to CS.  This is
	  now the preferred way to configure the project.  The old
	  configuration mechanism ("make platform") will continue to exist in
	  parallel with the new mechanism for a short time as a fallback in
	  case some problems are detected with the new mechanism.
	- Eric Sunshine made the following changes to the configure script:
	    - Added work around to OpenGL check for Jorrit's bizarre hybrid
	      installation on Windows where he has mismatched headers.
	    - Worked around issue reported by Wouter with g++ 3.2 where
	      compiler complained about extra -I/usr/local/include flag
	      (something about order of system search path order being
	      changed).
	    - No longer refreshes makefile cache twice if the cache already
	      existed prior to run of configure (and if config.mak changed).
	    - No longer tries to be smart about locating makedep in the CS
	      directory.  This caused problems because the path was not
	      properly recorded and would fail if the user did not have "." in
	      PATH.
	- Eric Sunshine updated the "build" instructions in the user manual to
	  mention "configure" rather than "make platform".
	- Eric Sunshine added libmng to "external libraries" section of user
	  manual.
	- Eric Sunshine updated jobber.pl so that it no longer uses the
	  old-style "make linux" in preparation for its processing.
	- Eric Sunshine made the following changes to the configure script:
	    - Fixed bug: Failed to emit X11.AVAILABLE makefile property when
	      X11 was available.
	    - Fixed bug: Was emitting X_CFLAGS, X_LIBS, X_PRE_LIBS, and
	      X_EXTRA_LIBS makefile properties only if VideoMode extensions
	      were available, but should have been emitting them whenever X11
	      was present.
	    - The -I/usr/local/include viability test is now performed only if
	      /usr/local/include is present on the build host.
5-Jan-2003
	- Andreas Busch did some minor typographical corrections on
	  md32spr.txi.
	- Applied a patch from Rene Jager (renej.frog@yucom.be) which does
	  the following:
	    - Added include/ivaria/cspace.i which is a SWIG 1.3 version of
	      include/ivaria/cs.i (which is for SWIG 1.1).
	    - Made the Python plugin SWIG 1.3 compatible.
	    - A few fixes on the OPCODE plugin so that it works a lot better
	      now (almost as good as the RAPID plugin).
4-Jan-2003
	- Andreas Busch removed duplicate #include lines from various
	  source files and correcty named the multiple-include-protection
	  define in shadervar.h.
3-Jan-2003
	- Philip Wyett did the following:
	    - Added forceable build settings for the following cpu/arch
	      - Athlon XP, Pentium 3, Pentium 4. Note, compiling for
	      these specific platforms make your binaries non-backward
	      compatible.
	    - Removed allocations to MNG.LFLAGS in jng makefile, which
	      cause recursion error.
	- Eric Sunshine made the following changes:
	    - Configuration phase now detects libmng automatically.  Added
	      bin/chkmng.sh.
	    - Configuration phase now determines proper linker flags for
	      sockets.  Removed the now obsolete LIBS.SOCKET.SYSTEM makefile
	      variable.  Added chksockt.sh.  Removed chkheadr.sh.
	    - The following modules are now enabled automatically by user.mak
	      if their prerequisite facilities are available:
		- filesys/vfs
		- video/renderer/opengl
		- video/loader/png
		- video/loader/jpg
		- video/loader/mng
		- net/driver/socket
		- net/driver/ensocket
		- cscript/cspython
	    - Eliminated the unused SOUND_LIBS makefile variable.
	    - Changed the SVGALIB detection script so that it no longer
	      enables the svgalib canvas.  It is now the makefile's
	      responsibility to enable this plugin when the SVGA.AVAILABLE
	      variable is set to "yes".
	    - Added new CS_HAS_SVGALIB macro to volatile.h.
	    - Removed all dependence upon OS_LINUX, OS_BSD, OS_SOLARIS,
	      OS_BE and __NetBSD__ from the project.
2-Jan-2003
	- Eric Sunshine changed the OpenGL-related configuration script and
	  makefiles so that it is now the responsibility of the configuration
	  script to figure out the appropriate compiler and linker flags,
	  rather than having this complicated logic replicated in every
	  OpenGL-related makefile.  chkogl.sh now publishes the makefile
	  variables GL.AVAILABLE, GL.CFLAGS, and GL.LFLAGS; it no longer
	  publishes OPENGL_PATH.
	- Eric Sunshine made the following changes:
	    - The chkperl.sh configuration script is no longer responsible for
	      creating the glue file csperlxs.c.  This is now the
	      responsibility of the csperl5.mak makefile.  A happy side-effect
	      of this shift of responsibility is that the transient csperlxs.c
	      is now created within the CS/out directory hierarchy, rather than
	      within CS/include/cssys where it did not belong.
	    - Removed the ugly hack from cs.mak which was responsible for
	      cleaning up csperlxs.c.  This is no longer needed since
	      csperlxs.c is only now created when the csperl5 module is enabled
	      and only when required; rather than being created by the project
	      configuration phase.
	    - Added the new makefile variable OUTDERIVED to cs.mak.  This
	      variable defines the location where transient derived sources
	      should be placed.  For example, static.mak places cslibref.cpp in
	      OUTDERIVED, and csperl5.mak places csperlxs.c there, as well.
1-Jan-2003
	- Philip Wyett did the following:
	    - Eliminated a uninitialized variable warning in prsseq.cpp,
	      under optimize build.
	- Eric Sunshine merged cygwin.mak into win32gcc.mak.  Now there is a
	  single makefile configuration target for Cygwin and Mingw users.
31-Dec-2002
	- Philip Wyett did the following:
	    - Changed linux.mak to use 03 rather than 02 optimization
	      flag. The 03 settings is supported by GCC 2.95.x and above,
	      which we generally expect developers to be using.
	    - Removed -finline-functions flag as 03 setting automatically
	      turns it on.
	    - Removed -finline-functions from debug build as we don't
	      really want such an optmization in debug builds and
	      possibly causing problems.
	- Eric Sunshine made the following configuration and makefile changes:
	    - chkxfree.sh now publishes the additonal makefile variables
	      X11.AVAILABLE, X_CFLAGS, X_LIBS, X_PRE_LIBS, and X_EXTRA_LIBS.
	    - chkogl.sh now looks for the OpenGL headers and libraries inside
	      the X11 directory tree if the OpenGL resources were not found
	      elsewhere.  This logic was suggested by Rudolf Potucek
	      <potucek@ucalgary.ca>.
30-Dec-2002
	- Matthias Braun did the following:
	    - Improved DecRef() function. The old function did first
	      decrement the refcount and delete the object then. This
	      resulted in problems when an Inc/DecRef happened in the
	      destructor of the object (resulting in a 2nd delete). Now
	      we check the refcount first and decrement after the check.
	      So that Inc/Decreffing in the destructor should be safe now.
	    - Fixed leak at texture loading.
	    - Fixed wrong memset in csinput.cpp reported by Groton.
	- Keith Fulton did the following:
	    - Added function to csString to convert string to lowercase,
	      strlwr().
	    - Fixed missing prototype warning for linux (csString).
	- Eric Sunshine added "-Xlinker --export-all-symbols" to DFLAGS.debug
	  in win32gcc.mak, as suggested by Paul Garceau <pgarceau@attbi.com>.
	  Hopefully, this change will allow DLLs to be once again debugged
	  sucessfully with Mingw's gdb.
	- Eric Sunshine removed obsolete DO_SOUND makefile and header
	  variables.
28-Dec-2002
	- Andreas Busch did the following:
	    - Fixed typo "AVAILABLE" in python plugin.
	    - Removed duplicate isound/source.h in walktest.
	- Eric Sunshine changed chktools.sh so that it records the path of
	  makedep in config.mak, if found.  This is consistent with its
	  treatment of other detected tools.  cs.mak now respects this setting.
27-Dec-2002
	- Daniel Duhprey fixed a problem with the ./ path ptr
	  when tbtut is used outside the CS dir.
26-Dec-2002
	- Andreas Busch fixed a typo in netmtst.cpp.
	- Philip Wyett added newline at end of fþu80x86.h.
25-Dec-2002
	- Philip Wyett did a minor MSVC documentation update.
24-Dec-2002
	- 'res' did the following:
	    - Fixed wrong #ifndef in win32.cpp reported by Lukas
	      Erlinghagen <Erluk@web.de>.
	- Keith Fulton fixed a compile error in directdetection.cpp.
	- Wouter Wijngaards added RPM spec file for crystalspace install.
	  Donated by Rudolf Kastl (che666@uni.de).
	- Norman Kramer did the following to those RPM specs:
	  updates from che: cleanup and some fixes.
	- Norman Kramer also added iImage() call in the constructor,
	  gcc 3.2.1 would not generate a not-in-charge constructor
	  otherwise.
	- Eric Sunshine added a patch to the canvas class which allows the
	  configuration key "Video.DisplayNumber" to select the display
	  (monitor) number.  If the configuration key is absent, or is set to
	  0, then the primary display is used (which is the old behavior).  If
	  it is greater than zero, then the requested display number is used.
	  If the requested display number is not available, then the primary
	  display is used.  Presently, only the DirectDraw canvases respect the
	  display number.  This patch is based upon code sent by Groton
	  <groton@gmx.net>.
	- Eric Sunshine applied patch from Mark <mark@gossage.cjb.net> for
	  csMatrix2 and csMatrix3 which supplies missing implementations of
	  operator/=(float).
	- Eric Sunshine worked around a compilation problem reported by
	  Frank Schoep <fschoep@zeelandnet.nl> where the compiler refused to
	  convert a temporary csColor to a csColor& in prsseq.cpp.
23-Dec-2002
	- Andreas Busch cleaned up multiple-include-protection in header files
	  and renamed some defines to be more CS coding-style compliant.  All
	  core-CS header files are now __CS__FILENAME_or_DESCRIPTION_H__
	  defined; main include files have an extra prefix for their belonging
	  library to avoid conflicts with defines in other files.  For example:
	    includes/iaws/aws.h -> __CS_IAWS_AWS_H__
	    plugins/aws/aws.h   -> __CS_AWS_H__
	  Applications do not have a CS__-prefix at all.  For example:
	  __AWS_H__  (The various TXTMGR implementations need to use the same
	  define at the moment.  See renderer/txtmgr.h, render3d/txtmgr.h,
	  aws/av3dtxtm.h)
21-Dec-2002
	- Mathew Sutcliffe did the following:
	    - Changed 'return false;' to 'return NULL;' in functions which
	      returns a pointer, not a bool (csloader.cpp).
	- Philip Wyett did the following:
	    - Added ability for people with GCC 3.0 or above to specify
	      'athlon' at config time.
	      e.g. make linux CPU=athlon ARCH=athlon MODE=debug
	    - Eliminated some compiler warnings under optimize build. 
	    - Some minor code cleaning in lview.cpp.
	    - Some code cleaning and tweaks. Including case where csColor
	      ... c.red and c.green were being * by 255 and c.blue was
	      being * by 255.0. All are now being * by 255.0f.
	    - Lowered memory usage and need for casts to float in existing
	      halo processing and in what will be the new renderer.
	- Eric Sunshine removed the NextStep, OpenStep, and MacOS/X Server 1.0
	  (Rhapsody) ports of Crystal Space.  Implementation files which were
	  shared with the remaining MacOS/X port were relocated from "next"
	  directories in the project tree to "macosx" directories.  Class
	  names, SCF names, resources, makefile variables, makefile targets,
	  etc.  were renamed so as to mention "OSX", "MACOSX", or "Cocoa" as
	  appropriate instead of the older "NeXT", "NEXT", and "next".  The
	  following files and directories were tagged with NEXT_OBSOLETE in
	  order to simplify recovery from the CVS Attic if necessary.
	    data/config/next.cfg
	    docs/texinfo/build/platform/next.txi
	    docs/texinfo/internal/platform/next.txi
	    include/cssys/next
	    libs/cssys/next
	    plugins/video/canvas/next
	- Eric Sunshine eliminated compilation warnings from the Thing plugin.
	- Eric Sunshine renamed plugins/net/netman to plugins/net/manager.
	- Eric Sunshine removed the unmaintained DJGPP port.  Tagged the
	  following files and directories with "DJGPP_OBSOLETE" in order to
	  simplify the task of recovering them from the Attic if necessary.
	    docs/texinfo/build/platform/msdos.txi
	    include/cssys/djgpp
	    libs/cssys/djgpp
	    plugins/video/canvas/allegro
	    plugins/video/canvas/common/pc-keys.cpp
	    plugins/video/canvas/dosraw
20-Dec-2002
	- Philip Wyett did the following:
	    - Minor Fix in sector.h.
	    - Fixed a struct vs. class in polytext.h.
	    - Disabled warning 4711 and quieter release builds for users,
	      ready for next CS release.
	    - Eliminated some un-initialized variables in cscomp.cpp.
	    - Cleaned md32spr code so that MSVC does not warn against it.
	- Clarified a few Doxygen comments in the engine.
	- Added iLightingInfo->StaticLightChanged() to notify a mesh
	  object that a pseudo-dynamic light has changed intensity.
	- Added iStatLight->AddAffectedLightingInfo().
	- Removed csStatLight->RegisterLightMap(). With this another
	  dependency between csThing and csEngine is removed. This also
	  fixes a bug where pseudo-dynamic lights changing wouldn't affect
	  lighting on a mesh rendered with DrawPolygonMesh.
	- Removed -revis commandline option. This is no longer needed.
	- Removed -recalc commandline option. This is now exactly the
	  same as -relight.
	- The thing object type now also implements iConfig. Moved
	  the cosfact option from csEngine config to thing object type config.
	- Added iEngine->AddToCurrentRegion(). This function was already
	  present in csEngine.
	- Added csThingObjectType::Warn(), Bug(), Notify(), and Error().
	- Added iEngine->GetLightmapsRequirePO2() and
	  iEngine->GetMaxLightmapAspectRatio().
	- csPolygon3D class no longer requires access to csEngine and csLight
	  classes.
	- csPolygon3D now uses iMaterialWrapper instead of csMaterialWrapper.
	- Lightmap cell size can no longer be set from within config.
	  Use the <settings> block in the map file instead.
	- Temporarily removed the ability of setting cosinus factor from
	  within config.
	- Added iFrustumView->CreateShadowBlock().
	- Added accessor functions for lightmap cell size in iThingEnvironment.
	  And removed the SetLightmapCellSize/GetLightmapCellSize() functions
	  from iEngine.
	- Added iFrustumView->GetSquaredRadius().
	- Temporarily removed the ability to set lightmap calculation quality.
	  It will now always be 3.
	- Temporarily removed the ability to control the number of reflections
	  in lighting calculations. Now hardcoded at the default 1 value.
	- Temporarily removed the ability to disable portal traversal for
	  debugging purposes.
	- Added iSector->CheckFrustum() for portal traversal.
	- Removed the 'cosfact' console command in walktest.
	- The big step! csThing is now a seperate plugin!
	- Removed all includes from from the include/csengine dir from css.h.
	  Nothing (except for the engine) is supposed to include from
	  include/csengine.
	- Eric Sunshine removed the unmaintained, unfinished and unused
	  scripts/swig directory.  Tagged the files with "UNMAINTAINED" in
	  order to simplify the task of recovering them from the Attic if
	  necessary.
	- Eric Sunshine removed the unmaintained OS/2 port.  Tagged the
	  following files and directories with "OS2_OBSOLETE" in order to
	  simplify the task of recovering them from the Attic if necessary.
	    docs/texinfo/build/platform/os2.txi
	    docs/texinfo/internal/platform/os2.txi
	    include/cssys/os2
	    libs/cssys/os2
	    plugins/video/canvas/common/os2-keys.h
	    plugins/video/canvas/csdive
	    plugins/video/canvas/openglos2
19-Dec-2002
	- Philip Wyett did the following:
	    - Changed message when preferred visual cannot be used and now
	      indicates a generic visual will be used (OpenGL/X canvas).
	    - Moved XSync() out of Print() and to the window creation
	      point, where it should only be needed to force events to
	      X Server. This has not been tested with all cards and a
	      case may arise that forces a revert. If so could the person
	      please supply info on that case for future reference.
	    - Moved back too msvc_libs 0.95dev003. Until Freetype problem
	      can be fixed.
	- Norman Kramer did the following:
	  Update from Manju for md32spr:
	  Now this tutorial does not depend on any external depenencies.
	- Added iDynLight->AddAffectedLightingInfo(). The plan is to make
	  dynamic lights work on a base of meshes instead of curves and
	  polygons directly.
	- Added iDynLight->RemoveAffectedLightingInfo().
	- Added iLightingInfo->DynamicLightChanged() function. With this
	  function dynamic lights will notify mesh objects that a dynamic
	  light has changed. The dynamic light will only notify meshes
	  that were added using AddAffectedLightingInfo().
	- Added iLightingInfo->DynamicLightDisconnect() function.
	- The changes above disconnect the knowledge of individual
	  polygons and curves from the dynamic lighting system. Another
	  step closer towards csThing/csEngine seperation.
	- Added iLightingProcessInfo->FinalizeLighting() function.
	- Added iLightingProcessData interface. Mesh objects can implement
	  this interface in order to be able to add userdata to the
	  lighting procedure. Added iLightingProcessInfo->AttachUserdata()
	  and QueryUserdata() to work with it.
	- Added csLightingProcessInfo which implements iLightingProcessInfo
	  and is directly used by the lighting system (as userdata
	  for CheckFrustum()).
	- Modified csLightingPolyTexQueue to implement iLightingProcessData
	  so that the lightmap specific lighting stuff is now seperated
	  from the lighting stuff.
	- Physically seperated arrays.cpp in the engine to prepare for the
	  move of thing as a seperate plugin.
	- Moved csLightPatch to lppool.cpp.
	- Removed all includes from core engine to thing and vice versa
	  that are not needed. This only leaves a very few dependencies
	  before thing can be moved outside. Of course these few
	  dependencies still require some work.
18-Dec-2002
	- Daniel Duhprey did the following:
	    - Ported genmesh to new renderer, but ifdef'd to maintain
	      compatibility with the old.
	    - Also corrected for degenerate triangle error.
	    - Updated r3dtest to use genmesh.
	    - Fixed render3d to compile on linux without warnings.
	      Added csTriangle to render3d.h.
	    - Removed referrence to r3dtest.zip.
	- Anders Stenberg did the following:
	    - Fix thing.cpp for new renderer. CS_QUERY_REGISTRY can't
	      handle the iRender3D->iGraphics3D #define, and must be
	      explicitly changed when CS_USE_NEW_RENDERER is defined.
	    - Fixes engseq and frustvis compiling errors with new renderer.
	- Keith Fulton fixed errant return on void function in thingmsh.h.
	- Fixed the sprite socket vector. FreeItem() casted the item
	  to delete to the wrong type (csSpriteSocketVector instead
	  of csSpriteSocket).
	- Removed a bad DecRef() in the genmesh loader. This fixes the
	  crash at exit in walktest. Thanks to Daniel Duhprey for finding
	  this.
	- Removed 'culler_mesh' in csSector. That is no longer valid
	  with the removal of the octree.
	- Added iMovable::IsTransformIdentity() and TransformIdentity().
	  With this feature the movable will track if the transform
	  is still an identity transform. If that's the case then some
	  entities (like engine and cullers) can optimize based on that
	  fact. These two functions also make sure the engine doesn't have
	  to use the equivalent thing flags to do the same optimization.
	- Added csTransform::Identity() and IsIdentity().
	- Also added iMovable::IsFullTransformIdentity() which corresponds
	  to the GetFullTransform() being an identity transform.
	- Optimized Dynavis and Frustvis by using IsFullTransformIdentity()
	  and avoiding the transforms in that case.
	- Additionally optimized all mesh objects and parts of the engine
	  to test for the identity transform and avoid some matrix
	  manipulations or even more in some cases.
	- Added iPortal->HitBeam(). This function already existed in
	  csPortal->HitBeam().
	- Fixed csSector, csCamera, and csPortal so they no longer use
	  csPolygon3D but instead always uses iPolygon3D.
	- Continued working on seperating csThing from the engine.
	  csSector no longer depends on csThing (but still uses iThingState
	  in some places).
	- Removed iFrustumView->SetFirstTime() and related. That way we
	  remove another link between csThing and the engine (this was
	  used for resetting the gouraud color but apparently this is no
	  longer needed).
	- Added iThingEnvironment->Clear() to reset the thing environment.
	- Moved the light patch and polygon pools from the engine to the
	  thing environment.
	- Cleaned up a lot more links between csEngine and csThing.
	- Added iEngine->FindLight() to find a light given an index.
	- Eric Sunshine eliminated compilation warnings.
	- Eric Sunshine worked around a linker warning from the latest MacOS/X
	  developer tools which stated "AppKit/Foundation not made a weak
	  library".
17-Dec-2002
	- Fixed the fix on reparenting of a mesh object for the culler.
	- Added 'do_popup' parameter to iStandardReporterListener->
	  SetMessageDestination(). This has default 'false' as value so
	  it remains backwards compatible. When this flag is set the
	  message will appear on a graphical dialog that goes away
	  after a while (currently 10 seconds).
	- Removed misleading comment from missing iPerfStats plugin.
	  It is now bugplug that does fps.
	- Engine now gives a clearly visible warning if relighting is needed.
	- Engine now reports (using the new popup warning) the number of
	  objects for which it couldn't load cached lighting and also
	  indicates that -relight is needed to fix that.
	- Made engine reporting a little less verbose to avoid confusing
	  people.
	- Removed SetNodeFunction, SetPolygonFunction, and SetCurveFunction
	  from iFrustumView. Instead there is now the more general
	  SetObjectFunction. That way the engine is more removed from using
	  polygons and thing specific stuff.
	- Added iMeshWrapper->GetShadowReceiver() as an optimization.
	- Removed iThingState::CheckFrustum(). It is obsolete.
	- Fixed the cullers to call the object function from the frustum
	  view instead of calling shadow receiver directly. The shadow
	  receiver will now be called from within the object function
	  that is supplied by the lighting routines.
	- Added iFrustumView->SetObjectFunction(). This function was
	  previously private to the csFrustumView class.
	- Added iEngine->CreateFrustumView() function with which an application
	  can create a frustum view that can be used with
	  iVisibilityCuller->CastShadows(). The user can use SetObjectFunction()
	  and other functions to initialize the frustum view and by doing
	  that get called for every object that is visible from the given
	  frustum.
	- First attempts at implementing shadow receiving for genmeshes.
	  Not fully operational yet and also not enabled by default.
	- Eric Sunshine added to the user manual an `md32spr' tutorial written
	  by Manjunath Sripadarao <msripada@@evl.uic.edu>.
	- Keith Fulton added a separate socket vector to the sprite3d objects,
	  which is copied from the factory at creation time and then is 
	  independent.  The way sockets were only on factories, only one mesh 
	  could be assigned to a socket across all parent meshes from a 
	  certain factory.
16-Dec-2002
	- Peter Amstutz did the following:
	    - When an object is reparented to another object with 
	      iMeshWrapper()->GetChildren()->Add(), the child gets
	      removed from the culler entirely.  This is bad.  This
	      change fixes that so that the object is added back to the
	      culler (which is necessary for culling and HitBeam to work).
	    - Comments out an annoying debugging log msg in thing.cpp.
	- Daniel Duhprey did the following:
	    - Fix from John Harger for fopen on windows (terrbig).
	- Completely removed the old octree culler. This has a great impact
	  on the internal engine structure. It greatly simplifies both
	  csThing and csPolygon3D and it also makes sure they are a bit
	  more efficient (use less memory and a bit faster since some
	  virtual function calls are no longer virtual).
	- Moved crysball culler from csengine to csgeom as it doesn't
	  need nor depend on the engine.
	- Removed everything related to PVS from the engine. That wasn't
	  used anyway.
	- Removed several API calls in iEngine and iSector related to the
	  old culler and PVS.
	- The parser will now give an error if 'culler' or 'vistree' is
	  used in a map file.
	- Some documentation updates:
	    - Extended apimod96.txi with information about octree removal.
	    - Removed section about csParser. It is gone.
	    - Extended apimod96.txi with information about the XML format.
	    - Removed documentation about obsolete octree based commands
	      in walktest.
	    - Fixed dirhier.txi for the octree removal. Added mention
	      of frustvis.
	    - Fixed the feature list.
	    - Updated the viscull.txi document a bit. But this still needs
	      more work for Dynavis and Frustvis.
	    - Removed mention of VISTREE from thing mesh object documentation.
15-Dec-2002
	- Daniel Duhprey did the following:
	    - Fixed to remove warnings and errors in linux (glshader_arb).
	    - Fix for the for (int i ...) problem in terrbig.
	- Peter Amstutz did the following:
	  Fixed ClipLine in common canvas code. Hopefully for the last
	  time :-)
	- Peter also fixed sector.h: uses iObject but doesn't actually
	  bring in the include, which can cause a few problems...
14-Dec-2002
	- Matthias Braun did the following:
	    - Cleaned up csvector code a bit.
	    - Removed some obsolete mesh removal code and replaced
	      with GetMeshes()->RemoveAll().
	    - Fixed it above correctly by changing csvector behaviour.
	    - Removed compilation warning in cspixmap.cpp.
	- Anders Stenberg did the following:
	    - Fixed some issues with the material rendering in new
	      render3d.
	- Marten Svanfeldt did the following:
	    - Added variables to shadermanager.
	    - Improved the demo of shaders.
	    - Changed fileformat for ARB_vertex_program plugin.
	    - Fixed bug with mixmode not being set.
	    - Added basic CDATA support to XML parser. CData sections will
	      be threated as text, just that <![CDATA[ is starttag and ]]>
	      is endtag.
	    - Changed into a enum for constants.
	- Daniel Duhprey did the following:
	    - Modified terrbig to take scale as a parameter to the
	      preprocessing.
	    - Must faster/cleaner version of the terrain.
	    - Newest version of test.map to match latest terrbig.
13-Dec-2002
        - Andreas Busch cleaned up some old/unused prototypes and outdated
          comments in walktest/handle_keys.
12-Dec-2002
	- Matthias Braun did the following:
	    - Removed opengl-ext renderer, since work is going on in
	      render3d now.
	- Anders Stenberg did the following:
	    - Various updates to render3d. Materials are implemented and
	      seem to be drawn correctly.
	- Christopher Nelson did the following:
	    - Added new function MouseInComponent to aws. Takes x and y
	      and tests to see if they're inside any top-level components.
	      Returns true if the mouse is inside, otherwise false.
	- Daniel Duhprey did the following:
	    - Fixed vpath definition of shadermgr makefile to point to the
	      correct spot.
	    - Added vpath definition to find .cpp files for
	      glshader_arb makefile.
	- Philip Wyett did the following:
	    - Eliminated the 6000+ compiler warnings generated under MSVC 6
	      by the opcode plugin. Also fixed redefiniton of EPSILON.
	    - Updated link to new version of msvc_libs for MSVC 6, which
	      now incorporate Freetype 2.1.3.
	- Keith Fulton changed format of sequence delay tag from
	  <delay>1000</delay> to <delay time="1000" />.
	- Keith Fulton added min and max attributes (optional) to
	  this delay tag.  Min and max, when specified, cause a
	  random delay between those two values.
	- Keith Fulton modified flarge/world to demonstrate use
	  of this feature to simulate torch flicker in the long
	  hallway before the fog.
	- Added csHashMap::Delete() to delete individual objects from
	  a hashmap.
	- Implemented csHashSet::Delete().
	- Fixed a bug in frustvis and dynavis where it would crash
	  if an object that just moved was also deleted immediatelly
	  (i.e. this crash occured when firing missiles in walktest).
	- Andreas Busch corrected wrong/missing header definition in the
	  python and lua scripting plugins.
11-Dec-2002
	- Matthias Braun did the following:
	    - Fixed a bug in csBasicVector::Pop which wasn't testing if
	      root==NULL. Opengl should work again.
	    - Fixed a bug where CS crashs when a curve has no lightmap
	      assigned.
	    - Fixed a circular Ref: TxtMgr->texture->TxtMgr. Opengl plugin
	      unloads correctly now and software should leak less...
	    - Fixed g2dtest - however it seems the line clipping routines
	      behave wrong (or the test... someone should investigate this).
	    - Fixed yet another bug in csBasicVector::Pop.
	    - Fixed refcounting smartpointer issue in dynavis unit test.
	- Optimization in frustvis where the updates of objects in the
	  visibility culler are put on a queue and only performed when
	  actually needed. This means that movable->UpdateMove() no longer
	  causes a kdtree rebuild every time.
	- Fixed a rather big bug in the frustvis kdtree->Flatten() function.
	  It would not properly unlink objects from the parent leafs in all
	  cases. Also the leafs were not destructed which is a memory
	  leak.
	- Optimization in the frustvis kdtree so that MoveObject()
	  flattens() the affected part of the tree every 50 times it is
	  called. This greatly increases the quality of the tree while
	  keeping the overhead of calling Flatten() considerably.
	- Optimized frustvis->Flatten() by flattening directly to the
	  top-node instead of doing this in a recursive manner.
	- The result of all the optimizations in the kdtree means that
	  walktest flarge will no longer keep slowing down when looking
	  at the robot.
	- Added all frustvis/kdtree changes above also to dynavis/kdtree.
	- Keith Fulton added the <lightvalue> trigger condition tag
	  to the sequence manager.  The flarge demo now has two
	  sequences which are listening to the light on the stairs.
	  One fires when the lights get very dim and the other fires
	  when the light gets brighter again.  Note, these sequences
	  activate each others' triggers, not their own.
	- Fixed a few compile errors in the new changes in the engine
	  sequence manager.
	- Made sure that the normal calculation in terrfunc first
	  clamps the x,y values given to the height function to avoid
	  crashing. Thanks to Joseph Miller for pointing me to the bug
	  and suggesting a fix (which I didn't use).
	- Partially fixed a bug in Dynavis which causes lots of potential
	  loss in occlusion. The problem happend with occluders which
	  go beyond the screen at the right side. This fix should
	  improve performance of Dynavis levels a bit. Note that the
	  fix is not complete. I only fixed a few common trivial cases.
	  The hard general case hasn't been fixed yet.
	- Eric Sunshine fixed incorrect application invocation for MacOS/X in
	  instructions for running programs.
	- Eric Sunshine eliminated compilation warnings.
	- Eric Sunshine removed incorrect run-time dependency from netmtst.mak
	  target.  Only compile-time dependencies should be specified.
10-Dec-2002
	- Matthias Braun did the following:
	    - Fixed a big memory leak in the engine (MeshWrappers have
	      been never released).
	    - Made the opengl plugin abort if it wasn't able to find the
	      effectserver plugin.
	    - Cleaned SCF usage of effects code a bit.
	    - Cleaned up effects server code.
	    - Fixed a refcount bug in the opengl canvas.
	- Philip Wyett did the following:
	    - Removed SCF_DEBUG define in OpenGL renderer.
	- Fixed a bug I introduced yesterday in parsing of HardMove.
	  The transform was inverted.
	- Apparently the meaning of HARDMOVE was inverted for factories.
	  I changed HARDMOVE for factories so that the matrix is inverted.
	  This means that if you have a <meshfact> you now have to invert
	  your matrices. For example, a matrix that scales .5 will now
	  have to be a matrix that multiplies with 2. That way it is more
	  consistent with HARDMOVE for <meshobj> but also it is more
	  correct.
	- Keith Fulton added direct application access to running sequences
	  and triggering triggers defined in the world file.  Also added
	  lightning effect to "large" room in flarge, activated with ctrl-L
	  to demo/test this feature.
	- Removed the call to 'Fire()' from Trigger() in the engine sequence
	  manager. That's not needed. Additionally fixed FireTriggerByName()
	  so it works correctly now. To do that I added
	  iSequenceTrigger::ForceFire() which forces a trigger to be fired
	  no matter what conditions are true. This is the best way to
	  fire the sequence as the trigger holds the parameters required
	  by some sequences.
	- Added 'now' parameter to FireTriggerByName() (engine sequence
	  manager).
	- When a good occluder is found, Dynavis will now use the write
	  queue but with the minimum depth instead of maximum depth.
	  That improves the usage of the coverage buffer but still maintains
	  the good potential for using the good occluder polygons.
	- Fixed a problem that Dynavis would be using outline coverage
	  or polygon coverage culling based on wrong information. This
	  happens when inserting polygons from the write queue.
	- Also fixed a similar problem with comparing a bool with a
	  non-bool value for coverage buffer insertion.
	- Fixed a crash bug in iso engine. An IncRef() was recently
	  removed.
	- <goodoccluder> was not parsed correctly.
	- Implemented -flaggood, -flagbad, and -flagclear options for
	  levtool. With these options you can control the placement
	  of <goodoccluder> and <badoccluder> in things. Check out
	  ./levtool -help for more info on how to use these options.
	- Javier Santos fixed an initialization bug in 3ds2lev.
	- Javier Santos fixed another bug in 3ds2lev where the
	  <lighting> option wouldn't be correctly saved to XML.
	- Fixed a memory leak with texture layers for a material. There
	  was no DecRef(). I fixed this by using csRef.
	- Eric Sunshine applied a large and thorough typographical-error
	  correction patch to the Texinfo documentation from Andreas Busch
	  <nobita@t-online.de>.  Also applied a few minor corrections from Eric
	  Sunshine.
	- Eric Sunshine applied a patch from Andreas Busch <nobita@t-online.de>
	  to convert the cslua plugin over to csRef/csPtr.
9-Dec-2002
	- Fixed a bug in Dynavis where it would consider polygons as possible
	  occluders even if Z very close to 0. This could cause bad overflow.
	- Added iVisibilityObject::GetCullerFlags(). With this you can set
	  various hints for the visibility culler to help optimize
	  performance. The visibility culler can choose to ignore or honor
	  these hints. The following hint flags are defined at this moment
	  but no visibility culler honors them yet:
	    - CS_CULLER_HINT_CONVEX: object is convex.
	    - CS_CULLER_HINT_CLOSED: object is closed (i.e. if you are
	      outside the object you can only see the visible side
	      of the object.
	    - CS_CULLER_HINT_GOODOCCLUDER: this object is a good occluder
	      (i.e. it will probably be able to cull away a lot of the
	      geometry).
	    - CS_CULLER_HINT_BADOCCLUDER: this object is a bad occluder
	      (i.e. it is too small or not convex enough to be a useful
	      occluder).
	- Generalized parameter parsing for mesh objects. A large part of
	  this was now duplicated in two routines (csloader plugin).
	- The <convex/> flag now also sets CS_CULLER_HINT_CONVEX.
	- Added <closed/>, <goodoccluder/>, and <badoccluder/> flags for
	  mesh objects.
	- Dynavis now honors the <badoccluder/> and <closed/> flags. In
	  case of <closed/> it will use outline based culling in any case.
	  In case of <badoccluder/> it will simply not use the object
	  as an occluder.
	- Dynavis now also honors the <goodoccluder/> flag. In that
	  case it will not use the write queue to delay writing of the
	  occluder and it will also use polygon mode instead of outline
	  mode to have more accurate filling of the coverage buffer.
	  The idea is to only use this for large objects that don't have
	  too many small polygons.
	- Keith Fulton fixed a timing bug in spr3d animations when mixing
	  displacement frames with delay frames.
8-Dec-2002
	- Matthias Braun did the following:
	    - Made 3ds2lev output XML - WARNING: This isn't really tested
	      as I had no proper .3ds files here...
	- Marten Svanfeldt did the following:
	    - Added activate/deactivate to iShaderPass.
	    - Added shader-support to user.mak.
	    - Some bugfixes in shaderprogram loading.
	    - Implemented ARB_vertex_program.
	    - Added test for ARB_vertex_program.
	    - Added new objects for render3d-shaders.
	- Experimental optimation in Dynavis for clamp in polygon mode (not
	  yet outline mode). Not enabled yet since it isn't working properly
	  yet.
7-Dec-2002
	- Philip Wyett did the following:
	    - Updated links to point to new msvc_libs for MSVC 6. Thanks
	      to Lukas Erlinghagen for submitting updated ode.lib.
	- Matthias Braun did the following:
	    - Fixed fontplex font server (it was looking for FontServer
	      instead of iFontServer in the object registry). Also changed
	      it's name to multiplexer instead of multiplexor.
	- Made the following modifications to levtool:
	    - Added -splitpoly and -analyzep options. With this it is possible
	      to seperate large polygons in seperate objects.
  	    - Fixed bug with -minsize. That option was simply ignored.
6-Dec-2002
	- Norman Kramer did the following:
	  Fixed an out of bound memory error that would prevent loading of
	  certain models. Now you don't have to remove the line in
	  animation.cfg (md32spr).
	- Fixed a bug in the engine where children of mesh objects wouldn't
	  get registered to the visibility culler. This could cause culling
	  errors and it would also cause HitBeam to fail on mesh children.
	- Changed levtool to work in seperate steps. The -dynavis option
	  will only split in parts now. After that you can run -splitunit
	  to split in seperate units (takes a long time on large
	  levels).
	- Added -analyze to levtool so you can see the distribution
	  of objects and their relative size to the global bounding box.
	- Added -compress to levtool to compress all vertices (remove
	  duplicates and unused vertices). -dynavis no longer does
	  this by itself but -splitunit still does.
	- Added -splitgeom which will try to split all large objects
	  (using -minsize option which defaults to 20%) into smaller
	  objects (i.e. it will divide them in 8 sub-objects).
	- Fixed levtool so it only operates on non-movable things.
	- New Schema from Javier Santos. Is now able to validate flarge
	  and partsys fully. Not finished yet.
5-Dec-2002
	- Philip Wyett did the following:
	    - Updated msvc7_libs links.
	    - Eliminated crash at exit under MSVC/Windows (awsmain).
	    - Eliminated compiler warning (aws).
	    - Eliminated linker problem under MSVC 7 (netmtst).
	    - Hacked the world file to remove old token 'lmcache'.
	      Remember to use '-reclac' on first run to generate
	      lightmap data.
	- 'levtool' will now split all parts in seperate units. A unit
	  is defined as a set of polygons that are connected and that
	  doesn't connect with any other polygon from the same part.
	  This results in a much better object seperation for Dynavis.
	  Performance improves by doing this but is still not perfect.
	- Added a '-nosplit' commandline option to disable this new
	  feature so that the things are only split in parts.
	- Added '-nocompress' commandline option to levtool so that vertices
	  are not compressed and unused vertices are not removed. This
	  option implies '-nosplit'.
	- Javier Santos worked on the CS Schema definition for the map
	  format. Still incomplete but you can find it in scripts/xml.
	- Keith Fulton added support in the sequence manager for
	  dynamic ambient light.  New commands are <setambient> and
	  <fadeambient>.  See flarge world for examples of usage.
4-Dec-2002
	- Philip Wyett did the following:
	    - Eliminated struct vs. class warnings under MSVC 7 (netman.h).
	    - Removed stray IncRef() and DecRef(), fixing crash at exit
	      (isomesh.cpp).
	    - Added csperl5 project for testing.
	    - Removed csperl5 for time being. Many things need fixing.
	- Added iDocumentNode->Equals() to compare two nodes. Comparing
	  the pointers doesn't work because these are only wrappers
	  on top of the real nodes.
	- Fixed crash bug in bumptest.
	- 'levtool -dynavis' will now do a correct conversion from
	  old octree based culler to Dynavis. Here is what it does:
	      - Split all things into their 'parts'. So for this to work
		nicely you should make sure that you have logical
		objects in your original world and that these logical
		objects are named as <part> entries in the world file.
	      - Removes all <vistree /> statements.
	      - Replaces <culler>static</culler> with
	        <cullerp>crystalspace.culling.dynavis</cullerp>.
	      - Replaces <zfill /> with <zuse /> for all thing objects.
	      - Adds <settings><clearzbuf>yes</clearzbuf></settings> if
	        not already present.
	  This version of levtool does NOT yet split objects in smaller
	  objects (which would be nice for Dynavis). So if your objects
	  are not nicely defined then you will not get good performance.
	  I tried this version of levtool on dmburg and performance dropped
	  a great deal (four times slower for software renderer and about
	  two times slower for OpenGL) so this is certainly not optimal
	  yet. But don't worry :-)
3-Dec-2002
	- Fixed a bug in the engine where it would try to cache lightmaps
	  even if CS_ENGINE_CACHE_WRITE was not set (but if
	  CS_ENGINE_CACHE_NOUPDATE was not set).
2-Dec-2002
	- Charlls Al'Quarra did the following:
	  Fixed the prototype of CS_TYPEDEF_GROWING_ARRAY_EXT on 79: the
	  move must be of size length - n - 1 instead of limit - n - 1. 
	  Also added a Macro Extra called HANDLECHUNKS that allow to
	  handle segments of arrays in one insert/delete call.
	  I hope i didnt break something this time =^)
	- Daniel Duhprey did the following:
	    - Fix for SetPosition/GetPosition in ODE dynamics.
	    - Revert fix, and parameter fix as well.
	- Moved the dynamic ambient functions from iThingState to
	  iLightingInfo. That means dynamic ambient can now also be used
	  by other objects (i.e. like genmesh). Genmesh already implements
	  the interface but doesn't use it.
	- Optimization so that the iLightingInfo interface is remembered
	  with a mesh. That makes the loop to change dynamic ambient
	  in a sector considerably faster. There is now a new method:
	  iMeshWrapper->GetLightingInfo().
	- Optimization in dynamic lighting so that a query interface
	  call is avoided for every polygon that is hit by a dynamic light.
	- Optimization in polygon->GetParent(). This call was also doing
	  a query interface for nothing.
	- Optimization in csPortal->GetReferencedObject(). Removed unneeded
	  query interface.
	- Extended iVisibilityObject with GetMeshWrapper() function. This
	  avoids a lot of extra query interface calls in the engine and
	  visibility cullers.
	- Eric Sunshine fixed a quoting problem in python.cex synthesis
	  reported by Steven Geens <steven.geens@student.kuleuven.ac.be>.
1-Dec-2002
	- Norman Kramer did the following:
	  Submitted by Manju: There was a bug in which some files would
	  come up with negative numbered frames. That has been fixed.
	- Peter Amstutz did the following:
	  Fixed clipping bug in graph2d.cpp.
	- Fixed initialization plugin in the explosion mesh object. This
	  could cause crashes in some cases.
30-Nov-2002
	- Peter Amstutz did the following:
	    - ODE dynamics: does left handed -> right handed coord
	      transform for AttachColliderPlane.
	    - Fixes bug in SetPosition when object is static (need to
	      update the static joint using dJointSetFixed()).
	- Norman Kramer did the following:
	  Samplecount computation in wavfile.cpp didnt honor the channel
	  count.
	- Simplified the iLightingInfo interface. The concept of cache name
	  is now removed (it was totally unused). This also removes about 52
	  bytes of memory for every thing instance.
	- Also removed the id variable with ReadFromCache() and WriteToCache()
	  in iLightingInfo.
	- Removed the 'lmcache' keyword in the standard loader.
	- Genmesh now implements iShadowReceiver but the function is not
	  implemented yet. Part of the plan to implement shadows on
	  genmesh objects.
	- Genmesh now implements iLightingInfo but all functions are not
	  implemented yet.
	- Added the ability to enable shadow receiving for genmeshes.
	  At this moment this is not yet implemented but when it is
	  implemented you will be able to use the same lighting system
	  that is also present for things for genmeshes too. By default
	  genmeshes will behave like all other objects (besides thing) and
	  receive lighting information at runtime using
	  DeferUpdateLighting(). When I finish implementing this new
	  functionality you will be able to say that a genmesh should
	  receive lighting information during the lighting recalculation
	  phase. That also means that it will be able to support
	  shadows (i.e. not only shadow casting, but shadows on the genmesh
	  object itself).
	  New 'localshadows' keyword. New SetShadowReceiving() function.
	- Added new CS_ENGINE_CACHE_NOUPDATE flag for
	  engine->SetLightingCacheMode(). This flag is on by default and it
	  means that the lighting will not be updated when it is invalid
	  or missing. If this flag is off then lighting will always be
	  calculated even if CS_ENGINE_CACHE_WRITE is not set. This
	  flag means that if you forget to specify -relight or -recalc
	  on a level that doesn't have lighting you will simply get
	  black lightmaps and no length recalculation phase. The only
	  way to recalculate lighting is by using -relight or -recalc.
	- Implemented GenerateCacheName() in genmesh.
29-Nov-2002
	- Peter Amstutz did the following:
	    - Fixes planes in ODE plugin. Phystut works correctly now.
	    - The avatar (camera) is now represented by a dynamic object
	      as well :-)
	    - A bit more hacking; the box avatar now behaves more like the
	      way you'd want for a first person application.
	    - You don't need to compile ODE with any special flags any more.
	- Possibly fixed a bug in HardTransform for skeletal sprites. Instead
	  of transforming all vertices only the vertices in the root are
	  transformed and also the transforms of all children of the root.
	  This has not been tested though.
	- Implemented the missing feature for locating a mesh that is a child
	  of a hierarchical mesh parent (using the ':' notation). This worked
	  in the default case but not within regions.
	- Fixed autonormals in genmesh so it now ignores duplicate vertices
	  caused by vertices which have same coordinates but different
	  uv mapping. Before calculating normals it will first compress
	  the vertices (but ignoring uv mapping).
	- Added the ability to disable shadow casting for genmeshes.
	  New 'noshadows' keyword. New SetShadowCasting() function.
	- Fixed BugPlug so the screenshot key no longer shows the BugPlug
	  alert.
	- Added the new 3dsMax exporter that is being used by the PlaneShift
	  project to create their magnificant levels. Written by Luca Pancallo.
	  You can find the script in CS/scripts/max. Check out the documenation
	  html that is there.
28-Nov-2002
	- Eric Sunshine disabled the "experimental" render3d project by default
	  for MSVC users since its many compilation problems were causing
	  significant consternation for the masses.
	- Eric Sunshine fixed the makefiles so that the optional "local.mak" is
	  included at the appropriate place and time.  Also fixed several
	  targets which depend upon user.mak so that they also now depend upon
	  local.mak.
	- Eric Sunshine made the following changes to chkperl.sh:
	    - Fixed numerous portability problems which prevented the script
	      from functioning correctly on some platforms.
	    - Documented the imports and exports.
	    - Made aesthetic improvements.
	- Eric Sunshine fixed a slew of makefile bugs in csperl5.mak,
	  netman.mak, netmtst.mak, perl5tst.mak, and template.mak.
27-Nov-2002
	- Marten Svanfeldt did the following:
	    - Fixed some errors in shader stuff.
	    - Added shader to material.
	    - Implementation of iShaderRenderInterface.
	    - Added first shaderprogram-plugin, which is a OpenGL
	      ARB_*_program shaderplugin.
	- Mathew Sutcliffe did the following:
	  Added the network manager plugin and interface. It polls sockets
	  for data each frame, and posts csevNetwork events when data is
	  received.
	- Matthew made the perl build even nicer and added proper MSVC
	  support.
	- Philip Wyett did the following:
	    - Added newline to end of shader.h.
	    - Eliminated re-ordering (aws).
	    - Elimated bad return in netman.h.
	    - Eliminated const char* vs char* in netman.h.
	    - Eliminated a couple of warnings under MSVC 7 in lghtmap.cpp.
	- Keith Fulton added movement commands to viewmesh to allow testing
	  of displacement-based anims.
	- Jeremy Williams fixed a bug in the explosion particle system
	  which would cause crashes when firing missiles in walktest.
	- Fixed a similar bug in the snow, emit, fire, fountain, and spiral
	  particle systems. Only rain appeared to be ok for some reason.
	- Fixed a small type in the map2cs tutorial.
	- Fixed a small compile error in Blocks for compilers that complain
	  about unsigned char* being given to csPrintf.
	- Fixed a bug in terrfunc::HitBeamObject(). The variable 'st' was
	  not initialized. I now initialized this to 'start'. I hope that's
	  the right fix as I have no easy way to actually test this now.
26-Nov-2002
	- Fixed a bug in the software renderer when materials are used without
	  textures. Reported by groton.
	- Dynavis now only complains about open objects.
	- Fixed Dynavis and Frustvis so they now clean up properly after
	  destruction.
25-Nov-2002
	- Marten Svanfeldt fixed new renderer so that it compiles when
	  CS_USE_NEW_RENDER isn't defined.
	- Daniel Duhprey did the following:
	  Fixed ODE dynamics plugin for the dCollideBP problem.
	- Anders Stenberg did the following:
	    - Addition of vertex lighting in hardware if supported.
	- Marten Svanfeldt fixed problems created by dentoids
	  commit-problems.
	- Peter Amstutz did the following to ODE dynamics plugin:
	  Properly initializes contact joints, including the 
	  EXTREMELY important flag dContactSoftCFM, which is
	  necessary to avoid instability (phystut is stable now!)
	- Charlls Al'Quarra did the following:
	    - Small fix to csvector.cpp. Thanks Eric.
	- Added a new CS_POLY_VISCULL flag with which it is possible to
	  enable/disable visibility culling for individual polygons (thing
	  mesh only). By default this flag is enabled except in the following
	  cases:
	      - Polygon has an <alpha> keyword.
	      - Image associated with the texture of this polygon has
	        keycolor.
	      - Image associated with the texture of this polygon has
	        an alpha map.
	  Note that it is the polygon loader in syntax services that
	  actually provides these defaults. If you manually create polygons
	  with the API the default is always true.
	- Extended syntax services plugin with new <viscull> keyword that
	  you can use in a polygon to enable/disable visibility culling for
	  individual polygons. Similar to the <colldet> keyword.
	- Renamed iObjectModel->GetSmallerPolygonMesh() to
	  GetPolygonMeshViscull() as this more closely describes what the
	  purpose is of this polygon mesh.
	- Renamed iObjectModel->GetPolygonMesh() to GetPolygonMeshColldet().
24-Nov-2002
	- 'res' did the following:
	    - Devapi extracts static members as well now.
	    - SCF_VERSION isn't listed as a function in devapi now.
	    - Added some doxgen '\file' commands.
	    - Added a quirk to getopt.h so the word 'option' doesn't get
	      linked everywhere.
	- Charlls Al'Quarra did the following:
	  I suspect that i fixed some bugs on InsertChunk and DeleteChunk
	  pointed out by sunshineco. I'm not liable by any bugs introduced
	  in this fix =)
	- Thanks to groton I managed to fix the bug that newsky crashes
	  with recent versions of CS. The reason was that the default
	  visibility culler was not initialized.
23-Nov-2002
	- Charlls Al'Quarra fixed the bug in MSVC where cloth doesn't show
	  up. Now the cloth can be seen also compiled with MSVC.
	  Thanks to Groton for the remote debugging.
	- Removed the meta manager again. This is a totally unneeded
	  addition since it is already possible to attach name/value
	  data to any thing that supports iObject. Just use the following
	  syntax:
	  	<key name="editor_bla" value="whatever" />
22-Nov-2002
	- Philip Wyett did the following:
	    - Removed a couple of dead links and fixed the BisonFlex links
	      for those who use it.
	    - Removed link to ssh package on CS ftp, as SF have updated
	      their software and that version no longer works correctly.
	- Norman Kramer did the following:
	    - Added an "-include mk/local.mak" so developers can leave the
	      user.mak and <system>.mak unaltered.  ( I usually end up
	      removing the "<<<<<<" and ">>>>>>" after an update from cvs).
	- Mathew Sutcliffe did the following:
	    - Added Perl interpreter error reporting through iReporter.
	- Mike Handverger did the following:
 	    - Extended text box functionality (aws):
		- Left/right/home/end keys.
		- Inserting chars and delete key.
		- Selecting cursor pos with mouse.
	- All spr2d instances used to have their own local copy of
	  G3DPolygonDPFX. Since this structure is more than 4K big I decided
	  to move this to the factory so that all instances created from
	  a factory reuse the same structure. For particle systems this
	  is a huge memory improvement.
	- Added forgotten 'public' to some inheritance in frustvis and
	  dynavis. This caused a warning on MSVC.
	- Implemented the start for a new optimization to make recalculating
	  lighting on huge levels faster (a lot I hope). Not ready yet!
21-Nov-2002
	- 'res' did the following:
	    - Removed call to efed.pl after doxygen run; isn't needed
	      because a custom footer w/o date is used.
	    - Added some eyecandy to pubapi docs.
	    - Added some more doc modules.
	    - Tweaked the alphabetical index.
	    - Added some eyecandy to pubapi docs.
	    - Added csgeom headers to Geometry Utils doc module.
	    - Tweaked the doc stylesheet a bit.
	- Marten Svanfeldt did the following:
	    - Added shaders for the new renderer. A CS shader today is
	      a combination of vertex and fragment processing instructions.
	    - Added support for shaderprogram plugins.
	- Mathew Sutcliffe did the following:
	    - Added support for putting meta-data in map files, for
	      level editors and such.
	- Anders Stenberg did the following:
	    - Fixed a case where glShadeModel was called instead of
	      statecache->SetShadeModel, which broke the state caching
	      (in openglcommon).
	- Fixed CastShadows() implementation in Dynavis and Frustvis
	  so that it shadow casting is now correct (I hope).
20-Nov-2002
	- Mathew Sutcliffe did the following:
	    - Made same changes to libs/cssys/{next,win32}/*conf.sh
	      as I did to unixconf.sh for the Perl5 plugin.
	- Anders Stenberg did the following:
	    - Some changes to the new renderer API, and work on clipping.
	- Paul Garceau did the following:
	    - Minor cleanup -- eliminated comments re: "dllwrap" as
	      gcc -shared is now being used for plugin generation (.dlls)
	      instead of "dllwrap".
	- Mike Handverger did the following:
 	    - Initialized title_bar_height to 0 (aws) to stop randomly
	      sized title bars.
	- Philip Wyett did the following:
	    - Removed FTP mirror link until the machines relocation is
	      complete.
	    - Added test for csperl5 plugins existence in build to stop
	      the test app being built if it is not.
	- Fixed csVfsCacheManager so it no longer tries to use 'scope' if
	  that is NULL. This has an effect on 'precalc_info' which will now
	  be placed in that file instead of in '(null)'.
	- Use csRef for storing the images in the texture manager.
	- Fixed a pseudo-'memory leak' with images. After registering textures
	  the original source images are (usually) no longer needed. But CS
	  was keeping them in memory anyway. This resulted in a big overhead
	  since those textures can be very big. Now by default the original
	  image pointers (iImage instances) are removed after registering
	  a texture wrapper (iTextureWrapper->Register() will release it's
	  link and iTextureManager->FreeImages() will then release the link
	  in the renderer).
	- Added iTextureWrapper->SetKeepImage() and KeepImage() to control
	  this new behaviour. If you call SetKeepImage(true) then the
	  texture wrapper will keep a pointer to the image when Register()
	  is called.
	- Added <keepimage> option for textures so that you can indicate
	  in a map file that you want to keep the image.
19-Nov-2002
	- 'res' did the following:
	    - Octree and lm_precalc_info now use cache id ~0 as well.
	    - iCacheManager docs mention the possibility of using ~0 as ID.
	    - Added a line about the online FAQ in the Wiki.
	- Mathew Sutcliffe did the following:
	    - Added Perl v5 Scripting Plugin and Test Application.
	    - Furthermore: Changed private member csTimer::pause to
	      csTimer::pausetime to fix case-insensitive conflict with
	      iTimer::Pause(). Perl headers define macros that conflict
	      with names of some things in CS, so added #undef's to
	      ivaria/cs.i. Added a template internal-project sub-makefile.
	- 'genmesh' objects now also cast shadows (they don't receive
	  shadows yet). Generalized the shadow casting system in the engine
	  so that this is actually possible.
18-Nov-2002
	- Daniel Duhprey did the following:
	    - Brought ODE plugin up to date with latest ode cvs.
	- Norman Kramer did the following:
	    - if you build the latest ode library you have to set
	      ODE_OLD_COLLISION in ode/config/user-settings.
	- Fixed software renderer procedural textures in 16-bit display
	  mode. They worked fine in 32-bit display mode and that's why
	  I didn't notice the bug :-)
	- Implemented a new fundamental change in the lightmap format.
	  Due to some HUGE levels that the PlaneShift team is making
	  (with more than 230000 lightmap files!) I had to rethink the
	  way lightmaps are stored since ZIP files are limited to 65535
	  files. So I now group all lightmaps that belong to a single
	  object in one file. That greatly reduces the number of files
	  that need to be stored and also increases loading speed
	  considerably.
	- Changed csVfsCacheManager so that it will now use one less
	  directory level if the id == ~0.
17-Nov-2002
	- Fixed a huge memory leak in the XML loader. The main document
	  node was never cleaned up which resulted in the entire node
	  tree to remain in memory. For big levels this could result in
	  70-120 Megabyte leaks.
	- Changed NEW to NEW_PROC in prfire.cpp because NEW define
	  conflicts with the same define that is used if
	  CS_EXTENSIVE_MEMDEBUG is enabled.
15-Nov-2002
	- Eric Sunshine made the following changes:
	    - Augmented the project configuration phase so that it determines
	      automatically how to enable warnings (i.e. -Wall or -Wmost), and
	      how to disable warnings about unknown #pragmas.
	    - Removed hard-coded -Wall, -Wmost and -Wno-unknown-pragmas
	      directives from makefiles.
	    - Eliminated several compilation warnings from the project.
	- Added iEngine->CreateBlackTexture(). This function is similar
	  to iEngine->CreateTexture(). Instead of creating a texture from
	  a file it will create a black texture with the given dimensions.
	  This is mainly useful for procedural textures.
12-Nov-2002
	- Marten Svanfeldt did the following:
	    - Fixed infinite loop-problem in GetTopmostVariableID (efdef.h).
	    - Effectloading problem.
	- Norman Kramer did the following:
	    - Changed shielding define names of writer.h (they were used in
	      another include already).
	    - iEventCord now inherits from iBase again. Michael D. Long
	      changed that on Sun Oct 15 22:55:52 2000 but gave no reason.
	      Now you can do csRef<iEventCord> again.
	    - Added newline to end of awsdoc.h, some compiler actually do
	      care.
11-Nov-2002
	- Norman Kramer disabled default compilation of the new opengl
	  render3d implementation and the r3dtest program.
	- Norman also added render3d/opengl to list of targets to build for
	  nightly dsp creation.
	- Marten Svanfeldt did the following:
	    - Fixed ef1.xml so that it works with ARB_vertex_program.
	    - Deprecated ms.nvv and replaced by ms.avp
	    - Fix for Mingw in efdef.h.
	    - Fixed so that efserver.cpp compiles when CS_USE_NEW_RENDERER is
	      defined.
	- Peter Amstutz added the missing GetCanvas() method... although
	  shouldn't GetCanvas() return csRef?  Also I'm not 100% sure that
	  there is actually an iGraphics2D in iImage, but it seemed like
	  the most likely place... anyway it doesn't seem to break anything.
	- Paul Garceau eliminated dllwrap dependency. Now uses gcc -shared to
	  generate .dlls (plugins, etc.).
	- Genmesh factories now support HardTransform().
10-Nov-2002
	- Anders Stenberg did the following:
	    - Fixes for the new renderer...
	    - Updates for the new renderer. (Breaks it, fixes are to come...)
	    - SetRenderTarget worked straight out of the box. :) Added a
	      test for it to r3dtest.
	    - Small fix to stdrep for compiling with new renderer.
	    - Implemented clipping.
	- 'res' did the following:
	    - Fixes for cygwin.
	- Fixed genmesh so it no longer crashes when there are no vertices.
9-Nov-2002
	- Keith Fulton fixed a minor MSVC compile error.
8-Nov-2002
	- Norman Kramer did the following:
	    - News from manju: Here are the new md32spr files. The reading of
	      animation files and writing it into XML has been redone
	      completely.
	    - The animation ordering problem has been fixed.
	    - And more fixes to player model writing.
	- Christian Bayle added some icons for jngtest scene (Debian scripts).
	- Dynavis and Frustvis now make sure that their update callbacks
	  (for when the object or movable changes) are protected against
	  multiple updates. i.e. when the update is in progress the
	  callback is disabled until the update is finished again. This
	  prevents infinite loop when the call to get the object bounding
	  box from the object resulted in a call to the callback and so on.
7-Nov-2002
	- Removed a warning in Dynavis reported by valgrind. Was not
	  really harmful though.
	- Removed another warning in Dynavis reported by valgrind. Was
	  not correctly initializing the tiles in the tiled coverage
	  buffer.
	- Removed a warning in Bugplug reported by valgrind. Was
	  using 'delete' instead of 'delete[]' for a char array.
	- Slightly optimized csBox3::ProjectBox().
	- Enabled tiled culling again in Dynavis. This speed up culling
	  considerably and it seems to work fine now. However! The tiled
	  culler cannot cope will with polygons that are not coplanar
	  (i.e. a polygon of four or more vertices of which all vertices
	  are not exactly on the same plane). It is even possible to get
	  crashes in that case. You can check if your level contains
	  non-coplanar polygons by using levtool as follows:
	  	levtool -validate your_level.zip
	- Replaced the vector of textures in csProcTexture with a hash
	  set. This greatly increases speed of using procedural textures
	  when the same textures is visible multiple times at once (without
	  this fix every texture would be updated as many times as it
	  was visible).
6-Nov-2002
	- Keith Fulton fixed loading/saving of binary sprites with
	  displacement anims.
	- Keith also fixed bug in latest loader.  Existing v1.1 files will
	  still work, but now their normals will be correctly loaded.
	- 'res' fixed binary 3d sprite loader so that normals are now stored
	  in binary 3d sprite format. ("old" bsprs w/o normals should still
	  work as well).
	- Enabled tiled culling by default in Dynavis. This gives a big
	  improvement in fps and it seems to work properly.
	- Disabled tiled culling again as it seems to crash in some cases.
	- Fixed a small bug in tiled coverage buffer. I'm not convinced
	  the tiled coverage buffer is 100% ok yet since I'm still
	  experiencing crashes when I disable it. So there is some
	  memory corruption going on. That's why it is still disabled
	  by default. It does give a huge speed benefit though so if
	  you have BugPlug in memory you can enable it by pressing the
	  following keys one after the other:
	  	ctrl-d v ctrl-d 5 ctrl-d v
	- Added new 'toggle_ignoresmall' command to Dynavis (assigned
	  to '6' key in BugPlug) with which you can enable the feature
	  that small objects (less than 10x10 pixels on screen) are
	  not written to the coverage buffer. Since these small objects
	  are unlikely to contribute to culling it doesn't make sense
	  to write them to the coverage buffer. This feature only works
	  when the write queue is enabled (which is the case by default).
	  This feature is disabled by default.
5-Nov-2002
	- Matthias Braun fixed cs-config so that it includes LFLAGS.GENERAL
	  now and therefore adds -lpthread.
	- Norman Kramer did the following:
	    - manju writes: I have fixed some bugs in the md32spr.cpp and
	      moved the <key> tags to a new file. This way the model is now
	      "politically correct" CS wise. Also there was some error with
	      floating point values, now if the number is less than a small
	      threshold I make it 0. This was way the model behavious is
	      more consistent.
	    - Changed qsqrt to sqrt (in dmath.cpp) to get around those
	      numerical instabilities reported on the ML (or was it a bug in
	      qsqrt ?)
	- Daniel Duhprey fixed a bad memory access in ODE dynamics plugin.
	- Fixed an old bug in frustvis and dynavis with relation to frustum
	  culling. The cause of the bug was that the kdtree node bounding
	  boxes used very large values for the other area. I decreased this
	  value now and things appear to be working better already. There
	  are still culling errors in Dynavis (not Frustvis) but these
	  have nothing to do with frustum culling. Will have to investigate
	  those later.
	- Keith Fulton submitted a small fix for csFont length measurement
	  which was using the same width for all characters even in
	  proportional fonts.
	- Added a hack to Dynavis so it will detect objects that are not
	  closed (i.e. objects that have holes in them). Dynavis cannot
	  properly work with these kinds of objects so it is best to fix
	  them. When Dynavis encounters such objects it will switch
	  to a slower culling method (for those objects only).
4-Nov-2002
	- Daniel Duhprey made System and Body in ODE dynamics csObject's.
	- Norman Kramer fixed new render3d OpenGL so it compiles with
	  gcc3.2.
	- Paul Garceau did the following:
	    - Eliminated dependency on dllwrap.
	    - Eliminated dllwrapwrap.sh
	    - (DO.SHARED.PLUGINS) now uses "gcc -shared" to generate .dll
	      files.
	- Significantly optimized walking around in walktest in sectors
	  with a huge number of objects. Walktest was doing QUERY_INTERFACE
	  for EVERY object in the current sector every time the camera
	  moved. It was doing this only to test if there was a terrain
	  with which to do visibility testing. I optimized this by attaching
	  an object to the sector which contains this information.
	- Redesigned the way the VisTest() functions for spheres and boxes
	  work in iVisibilityCuller. Now they return an iterator instead
	  of just marking the objects. This is a LOT faster in levels
	  with a huge number of objects. Fixed Dynavis, Frustvis, and
	  old style octree based culler for this change.
	- Fixed iso engine for some recent changes to CS.
	- Applied another optimization to csSector::IntersectSegment().
	  This will now only check objects that are in the box defined
	  by start->end of the segment (if only portals is true).
	- Fixed a bad bug introcuded by the previous changes in the cullers.
	  This bug caused CD in walktest to go completely wrong. The reason
	  for this bug was the iterators for VisTest() were all sharing the
	  same vector but with different data. This fix does not completely
	  fix the issue though. Still have to investigate what's wrong.
	- Fixed the bug in IntersectSegment(). It was not calculating the
	  bounding box the right way.
	- Eric Sunshine eliminated several compilation warnings in
	  gl_varbufmgr.cpp, and also replaced assert() invocations with
	  CS_ASSERT().
	- Eric Sunshine fixed scripts/python/glextgen.py so that the
	  synthesized file is more preprocessor-friendly (that it, the change
	  eliminates thousands of warnings emitted by the preprocessor when
	  processing the synthesized file).
	- Eric Sunshine made the following documentation-related changes:
	    - Fixed mark-up problems in howto/envvar.txi.
	    - Added discussion of C-shell to howto/envvar.txi.
	    - Added MacOS/X-specific discussion to howto/envvar.txi.
	    - Updated dirhier.txi.  Removed obsolete entries.  Added missing
	      entries.
	    - Scaled down an EPS image in the "Cygwin build" instructions so
	      that it actually fits on a printed piece of paper.
	    - Added a new How-To from Andreas Busch <nobita@t-online.de> which
	      illustrates creation of external CS programs using KDevelop.
	    - Applied a couple minor typographical corrections pointed out by
	      Andreas Busch.
3-Nov-2002
	- Anders Stenberg did some updates to the new renderer.
	- Changed DynaVis to use the new movable and object model
	  listeners. This significantly speeds up rendering and walking
	  through huge levels already but we're not there yet.
	- Changed FrustVis to use the same new system as DynaVis.
	- Keith Fulton implemented distance displacement between keyframes
	  of a sprite3d animation.  New attribute "displacement" can be used
	  in place of "delay" on frame definitions to indicate this.  Delays
	  and displacements can be mixed in the same sprite and same anims if
	  desired.
	  See http://www.gamasutra.com/features/20021018/hansson_01.htm
	  for more info on how this eliminates the "skating" effect from
	  walking or running sprite meshes.
2-Nov-2002
	- Justin Miler added iRigidBody::AttachColliderPlane(csPlane3&,
	  float friction, float density, float elasticity) to Dynamics (ODE).
	  Implemented iRigidBody::AttachColliderPlane in odedynam. As doxygen
	  comment notes, ODE planes are globally transformed, immobile, and
	  infinitely dense (so 'density' is ignored).
	  Changed phystut to use plane colliders for walls instead of boxes.
	  This is more efficient, more stable, and cleaner.
	- Completed implementation of the new listener system in
	  iObjectModel. The next step will be to change the visibility
	  systems to actually use this new system.
1-Nov-2002
	- Daniel Duhprey did the following:
	    - Modified the order for the libs in enginep.mak so that all
	      symbols are defined correctly.
	    - Commit from Manju to check for null in md32spr.cpp.
	    - Added the physics loader.
	- Removed userdata from iMovableListener. It is not needed.
	- Added new iObjectModelListener so you can listen to changes in an
	  object model.  Implemented this partially in all iObjectModel
	  implementations (i.e.  all mesh objects).  The listeners are not yet
	  fired though.
	- Eric Sunshine fixed msvcgen.mak so that it no longer instructs the
	  user to type "cvs add -kb" when adding MSVC7 project files.  These
	  are plain text XML files which do not require the -kb flag.  The user
	  is still instructed to use -kb when adding MSVC6 and earlier project
	  files, however.
	- Zephie Greyvenstein <zephie.greyvenstein@btinternet.com> contributed
	  a patch to fix a crash in md32spr when a direct reference to a shader
	  function was used instead of a image file.  For instance if the
	  shader function "/blah/blah/steam" was requested(which in turn
	  created some effect using /blah/blah/steam1.tga and
	  /blah/blah/steam2.tga) then point would be NULL(since there was no .
	  extension).
	- Eric Sunshine fixed a crasher in csLoader::ParseImposterSettings()
	  reported by Don Lavelle <dll4@lehigh.edu>.
	- Eric Sunshine eliminated compilation warnings.
	- Eric Sunshine fixed problems with the gl_render3d.mak makefile.
	- Eric Sunshine eliminated several thousand preprocessor warnings
	  from glextmanager.h.
	- Eric Sunshine fixed a problem in glsysbufmgr.h where it was applying
	  delete[] to a void*.  This is a big No-No.
31-Oct-2002
	- Optimized frustvis and dynavis by removing some SCF_QUERY_INTERFACE
	  calls.
	- Changed the way that objects are marked as visible by the
	  visibility cullers. Using this way they no longer need to be
	  marked as invisible. Instead a global number is increased which
	  automatically marks all objects as invisible. This change is
	  already an optimization but it also preparation for a more
	  fundamental and significant optimization that will follow later.
30-Oct-2002
	- Keith Fulton did the following:
	    - Added imposter code to engine in csMeshWrapper.
	    - Commented out imposter tag until that code is working.
	- Replaced ReportError() with ReportWarning() when an image couldn't
	  be loaded in the main loader.
	- Fixed a very bad bug in the bounding box calculation of things.
	  In some cases this calculation could go totally wrong.
	  This had an effect on various subsystems in CS like Dynavis which
	  heavily depend on bounding boxes.
29-Oct-2002
	- Norman Kramer did the following:
	    - Fixed compiling issues of csartstest and in the .mak file
	      uncommented the actual requesting of the csartsproxy which
	      makes the renderer fail now, yippee.
	    - Added a quake3 model (md3) converter kindly provided by
	      Manjunath Sripadarao <msripada@evl.uic.edu>.
	- Eric Sunshine updated the MinGW build instructions in the user manual
	  to discuss the new preferred MinGW+MSYS procedure for building
	  Crystal Space.
	- Eric Sunshine eliminated some overfull- and underfull-hbox warnings
	  in the Texinfo files reported by TeX.
	- Eric Sunshine applied patches to documentation and tutorial programs
	  to correct simple typographical errors.  Thanks to Andreas Busch
	  <nobita@t-online.de> for the patches.
27-Oct-2002
	- 'res' did the following:
	    - GL texture bit depth can be specified through configs.
	    - Forcing a texture format didn't work.
	    - Moved code to prepare keycolored textures out of 
	      csTextureHandleOpenGL::FindFormatType() into its own
	      method.
	    - Small adjustment so keycolored textures are compressed as well.
	- Fixed a few bugs in iThingState::GetPolygon() as reported by Groton.
26-Oct-2002
	- 'res' did the following:
	    - Fixed disappearing textures when enabling compression.
	    - Added a function which checks for GL errors and optionally
	      reports them.
	    - Reenabled texture compression for GF.
	    - Enabled anisotropic filtering for GF.
	    - Windows GUI application now properly display a console window if
	      requested.
	    - Added OpenAL sound renderer to scf.cfg.
	    - Added MSVC libs to sndoal.mak.
	    - Changed inclusion of AL headers to better support the
	      Win 1.0 SDK.
	    - OpenAL plugin now uses event system to properly
	      initialize/shutdown.
	    - Fixed GL errors reported for wrong functions.
	    - Win-specific VFS vars work again.
	- Mike Handverger  did the following:
	    - Adding some methods to safely remove defs from awsPrefManager
	      Added awsKeyContainer::RemoveAll(), awsPrefManager::FindSkinDef(),
	      awsPrefManager::RemoveWeindowDef(),
	      awsPrefManager::RemoveSkinDef(),
	      awsPrefManager::RemoveAllWindowDefs(), and
	      awsPrefManager::RemoveAllSkinDefs()
	    - Added the above to public interfaces as well.
	- Norman Kramer made destructor in rndbuf.h virtual.
	- Norman also removed a few compilation warnings and errors in the
	  new OpenGL renderer.
	- Norman restarted work on arts sound renderer ... compiles again.
25-Oct-2002
	- Anders Stenberg did the following:
	    - Added support for textures in new renderer. (Most calls in
	      iRender3D only has temporary implementations. They will be
	      neater later.) Also added a #define CS_USE_NEW_RENDERER in
	      csdef.h, but this is disabled by default. Note that only
	      r3dtest, the libraries, the engine plugin and the new renderer
	      will compile correctly with this enabled. (Other things that
	      aren't connected to the renderer might compile too, but most
	      plugins will fail.)
	- Marten Svanfeldt did the following:
	    - Minior fixes to r3dtest.
	    - Added support for VAR (Vertex Array Range) on those cards which
	      support it.
	    - Changed the buffer-locking mechanism.
24-Oct-2002
	- 'res' did the following:
	    - Texture downsampling added again to OpenGL renderer.
	    - Fixed an uninitialized variable in OpenGL texture manager.
	    - Mipmapped textures are supported as render targets in OpenGL.
	    - Enabled all GL extensions in the config.
	    - Enabled texture compression for GeForces.
	    - Unfinished attempt to add rgb and alpha scaling to fx system.
	    - Glwin32 canvas correctly fills the pixel format.
	    - Fixed screenshots for 16-bit GL modes.
	    - Added support for anisotropic filtering.
	- Daniel Duhprey renamed the OpenAL sound files to avoid conflicts
	  with other sounds plugins.
	- Mathew Sutcliffe replaced false with NULL in a function that returns
	  a pointer, not a bool (csloader).
23-Oct-2002
	- 'res' did the following:
	    - Disabled frequent heap consistency checking in MSVC debug builds.
	      This fixes the small pauses experienced. Consistency checks
	      stay enabled when CS_EXTENSIVE_MEMDEBUG is defined.
	    - Also added a leak dump for MSVC debug builds when exiting an app.
	    - Replaced some occurances of http://crystal.linuxgames.com/ with
	      http://crystal.sf.net/.
	- Daniel Duhprey added an OpenAL plugin to CS.
22-Oct-2002
	- Matthias Braun did the following:
	    - Did a blind fix for cygwin threading...
	    - More cygwin fixes.
	- Justin Miler did some minor changes to bring phystut closer to
	  simple1.
	- Justin declared class csZBufMode in particle.h.
	- Mike Handverger Added GetDuration / GetLoopCount / GetLoopFlip to
	  iMotionTemplate for convenience.
21-Oct-2002
	- Matthias Braun did the following:
	    - Removed lexan from user.mak.
	    - Removed the cs syntax loader plugin, as noone was using this code.
	- Anders Stenberg did the following:
	    - Work on implementing new render3d. No output yet except from
	      the 2D-driver. :(
	    - Added R3DTest, which currently shows a rotating white cube with
	      the new renderer. Also changed renamed gl_softrbugmgr.* to
	      gl_sysbufmgr.*
	    - Fixed an erroneous path in the r3dtest makefile.
	- Norman Kramer did the following:
	    - Removed lexan.h from css.h.
	    - Matze accidently removed the wromg classid, cssynldr != cslexan.
	    - Made AudioDevice inner class to csSoundDriverOSS.
	      Fixed bug reported by  Mihai Ganea <miaig2@myrealbox.com>.
	    - Removed the real cslexan class entry.
	    - Weird character 0xA= in the file scf.cfg.
20-Oct-2002
	- Matt Reda fixed a crash on MacOS X (in the loader) (that could
	  potentially affect other platforms) in which the format string
	  passed to vsprintf expected 2 strings and 2 floats but was only
	  getting a string and 2 floats.
	- Charlls Al'Quarra added two methods to csBasicVector which could be
	  handy sometimes: DeleteChunk(int n, int size) and
	  InsertChunk(int n, int size, csSome Item).
	- Anders Stenberg worked on new OpenGL renderer (render3d):
	    - Added an GL Extension manager for the new renderer. (Generated
	      from a Python script and XML file, both located in
	      scripts/python.)
	    - Started test implementations of iRenderMesh, iRenderBuffer
	      and iRenderBufferManager.
	- Matthias Braun did the following:
	    - Added CS_GNUC_PRINTF flag to the Report declarations in the CS
	      loader, so that the gcc compiler will report format errors in
	      the future.
	     - Fixed a small format error detected in prseffect.cpp.
	     - Also added the GNUC_PRINTF flag to the Report functions in
	       include/imap/services.h.
	- Removed some old palette code from the software texture manager.
	- iGraphics2D::FindRGB() now works again in palette mode.
	- Added iGraphics2D::CreateOffscreenCanvas() to make a canvas that will
	  work in off-screen mode.
	- Added iTextureHandle::GetCanvas() which will return a canvas that can
	  be used to render on the given texture.
	- Implemented GetCanvas() correctly in the software renderer.  OpenGL
	  implementation doesn't work yet.
	- Modified simplept so it 'shimmers' the proc texture portal.  This
	  gives a water like effect.
	- From Jochen Moench: patch to iCamera::SetFovAngle().
19-Oct-2002
	- After my changes yesterday the NASM version of the software renderer
	  was totally broken.  After long debugging I found out why.  Seems
	  that in scan.ash there is a mirror of the scan.h include file but for
	  assembly.  I removed several fields in scan.h but I forgot to remove
	  them in scan.ash with the result that the two structures didn't
	  match.
18-Oct-2002
	- Marten Svanfeldt started yet another new OpenGL renderer in
	  plugins/video/render3d/opengl. This also starts with a completely
	  new render API. This will be a long process.
	- Marten: manual addition of projectfiles for Render3D OpenGL driver.
	  Do not use if you don't know what you do. Not to be included
	  in default makefiles.
	- Removed support for gamma setting in the renderers.  This was only
	  supported by the software renderer and then only working properly in
	  8-bit mode.
	- Added SetGamma/GetGamma to iGraphics2D where it belongs.  Gamma is a
	  canvas feature.  Note that currently there are no canvases that
	  support this.
	- Eric Sunshine eliminated compilation warnings from several modules.
	- Eric Sunshine fixed a compilation error in cspthrd.cpp for platforms
	  which do not publish sys_errlist[].
	- Changed the way that SetRenderTarget() in the software renderer
	  works. As soon as a texture is set as a target of rendering
	  it will be converted to use a standard 332 palette (8-bit truecolor
	  palette). This makes it a lot easier to convert the screen
	  data to the texture.
	- Procedural textures are now fully working in the software renderer
	  (only in truecolor modes!).
	- Completely removed 8-bit support from the software renderer.
	  If people want it back we can always make 8-bit emulation mode
	  (by rendering internally to 16-bit and then transforming to
	  8-bit in Print()).
	- Also removed 8-bit support from the internal AWS renderer
	  and from the null3d renderer. For some reason it doesn't look
	  like the null renderer needs 8-bit display support :-)
	- Removed 8-bit support from the line renderer.
	- Moved iTextureManager->FindRGB() to iGraphics2D where it belongs.
	- Additionally removed iTextureManager->SetPalette(), ResetPalette(),
	  and ReserveColor().
	- Renamed csColorQuantizer::RGB() to DoRGB() to avoid a conflict
	  with a define.
	- Fixed bug with software renderer and line_table which was initialized
	  too late in some cases.
	- Fixed iso engine so it correctly initializes the 'effect'
	  pointer to NULL. This makes it work again in OpenGL.
17-Oct-2002
	- Removed a few additional procedural texture functions from the
	  iGraphics3D/iGraphics2D interfaces.
	- Started work on software implementation of SetRenderTarget().
	  To support this added the ability to generate inverse palettes
	  in software renderer textures. An inverse palette basically
	  transforms a truecolor color (15 or 16 bit) to a palette index
	  which is suitable for that texture (in the software renderer
	  every texture has its own 8-bit palette).
	  Other than this the SetRenderTarget() is currently not yet
	  operational.
	- Put the csQuantizeBla() functions in a new csColorQuantizer
	  class. This ensures that it is now possible to use multiple
	  instances of the csColorQuantizer by eliminating the use
	  of global variables.
	- Eric Sunshine eliminated compilation warnings from the OpenGL
	  renderer.
	- Eric sunshine eliminated compilation warnings from the csSaver
	  plugin.
	- A few improvements to SetRenderTarget() for software renderer.
	  Still disabled because not working properly yet.
16-Oct-2002
	- Keith Fulton added definitions and initial implementations for
	  iSharedVariable, iSharedVariableList and iImposter.  iEngine now
	  keeps an iSharedVariableList, and csMeshWrapper implements iImposter,
 	  which uses iSharedVariable. See new flarge for examples of
	  definitions of both.
	- csProcTexture is now able to use the new SetRenderTarget() system.
	  And it seems to work fine. Converted all current proc textures
	  that inherit from csProcTexture to the new system.
	- Added 'persistent' flag to SetRenderTarget(). If that flag is given
	  then the original texture will be copied in BeginDraw() so that
	  the previous contents is preserved. If that flag is not given
	  then the previous contents is ignored and it is assumed you fully
	  update the texture yourselves.
	- simplept works nicer than ever with the new SetRenderTarget() system.
	- Completely removed the old procedural texture implementation from
	  both the software and OpenGL renderers.
	- Here is a summary on the status of the new procedural texture system.
	    - Software renderer procedural textures are TOTALLY broken. This
	      needs to be redone again.
	    - Simplept works VERY well in OpenGL (very fast and very nice
	      looking).
	    - The pixel drawing procedural textures (flame, plasma, dots,
	      water, ...) are slower in OpenGL then they were before.
	      The reason is that drawing a pixel in OpenGL is a LOT
	      slower than in software renderer. To solve this problem
	      I will add new API functions to either draw series of
	      pixels or else to blit memory areas to the screen (or
	      texture).
	    - For some reason I cannot render at vertical line 0.
	      i.e. a g2d->DrawPixel (i,0,color) will do nothing. That
	      means that one line of the procedural texture will remain
	      whatever contents the screen has at that moment.
	      I have no clue on how to solve this yet.
	- Fixed the bug with one line of the proc texture not rendering
	  properly.
	- Fixed the flame in flarge to be right orientation again.
	- Removed several more procedural texture related things.
	- Fixed aws for latest changes. AWS procedural texture support
	  will most likely be broken though.
	- Added iGraphics2D->DrawPixels() and Blit() which offer faster
	  ways to render pixels on a canvas. Especially for OpenGL.
	  Still not working properly though.
	- OpenGL version of Blit now works and is a LOT faster than
	  individual pixel drawing. Fixed fire and plasma procedural textures
	  to use the new Blit() routine.
15-Oct-2002
	- Keith Fulton did the following:
	    - Added support for iSharedVariables and iImposter.
	    - Added example <variables> list and <imposter> mesh.
	- Started work on the OpenGL implementation of SetRenderTarget().
	  Added code in BeginDraw() to copy the texture to the display.
	  Added code in FinishDraw() to copy the display back to the
	  texture. This is all untested for now.
	- Eric Sunshine made the following changes to the project configuration
	  phase and makefiles.
	    - Augmented chkpythn.sh so that it now also recognizes python99.lib
	      and libpython99.a, which are common names on Windows, in addition
	      to the standard libpython9.9.a Unix-style name.
	    - Configuration scripts, build scripts, and makefiles now try to be
	      more robust concerning whitespace in pathnames.  They now do a
	      better job, for example, of dealing with tools, headers, and
	      libraries which reside somewhere inside "Program Files" on
	      Windows.  While this handling still is not perfect, it is
	      considerably improved.
	    - Added function shellprotect() to confutil.sh.  This function is
	      used by client configuration scripts to protect special
	      characters, such as spaces and backslashes, from the shell.
	    - chktools.sh now exports the NASM.BIN makefile variable.
	    - Makefiles for Cygwin and Mingw now use -Wno-unknown-pragmas to
	      eliminate warnings about unknown pragmas which seem to crop up
	      often in headers intended primarily for MSVC.
	- Eric Sunshine created and released a new version of the
	  csmingwlibs_0.xx.exe archive.  The following changes were made:
	    - Fixed typographical error in header path ("inlucde" rather than
	      "include") which prevented headers from being found by the
	      C-preprocessor.
	    - Fixed so that only short pathnames are placed in environment
	      variables.  Previously, was using long names which potentially
	      contained spaces.  The spaces would wreak havoc with commands
	      invoked from makefiles rules.
	    - Restructured and significantly simplified the package hierarchy.
	      This restructuring also led to simplification of setupenv.sh
	      script.
	    - Added multiple-invocation protection to setupenv.sh.  This is
	      important because the uninstall phase does not "unedit" the Msys
	      "profile", and it is conceivable that someone could install
	      csmingwlibs several times.  It would be undesirable for
	      setupenv.sh to run multiple times since it would result in
	      unnecessary bloat of environment variables, thus the
	      multiple-invocation protection.
	    - Upgraded the tools and resources to the most recent versions
	      wherever possible.
	    - Simplified the library resources by providing simple statically
	      linked library archives, rather than cumbersome lib+dll
	      combinations.
	    - Cleaned up csmingwlibs.nsi and fixed some minor problems.  Also
	      now does a better job of preserving global register state for
	      function invocations and generally is more robust.
	    - Improved documentation.  Fixed comments in build script.
	    - The setupenv.sh script now sets the PYTHON_INC, PYTHON_LIB, and
	      PYTHONPATH environment variables.  The first two of these
	      variables are used by the CS/bin/chkpythn.sh script.  The final
	      variable is used by Python itself.
	    - Attemped to upgrade to Python 2.2 from Python 1.5 but, even after
	      several days' of attempts, failed to create a usable static link
	      library with Mingw.  Consequently, resorted to continued use of
	      Python 1.5 from deprecated cs_mingw_0.xxx.exe package.
	    - Converted README to use CRLF terminators rather than LF so that
	      Notepad.exe users will be able to read the file.
	    - Moved the generated setupenv.sh script from the root csmingwlibs
	      directory to csmingwlibs/bin.
14-Oct-2002
	- Added SetRenderTarget() and GetRenderTarget() to the
	  iGraphics3D API. Also added default (empty) implementations
	  to all renderers. This will be used for the new procedural
	  texture design.
	- Eric Sunshine worked around bug in MSVC6/7 compilers where they
	  experienced "internal compiler error" when encountering function
	  CreateSystem() in walktest.cpp which was both a local function and
	  declared "extern".
	- 'make clean' no longer deletes all .txt files.
	- Eric Sunshine worked around a Mingw gcc 3.2 optimization bug which
	  afflicted makedep and caused it to crash.  The problem would occur at
	  any optimization level above -O in remove_dotdot() which was
	  allocating about 4.5 kilobytes on the stack.  Allocating via the heap
	  rather than the stack worked around the problem.
13-Oct-2002
	- Norman Kramer did the following:
	    - Fixed long standing bug in the sound renderer where non looping
	      static sounds were never removed.
	    - Directsound3d renderer had the wrong class id.
	    - Cleaned up the embedded interface mess.
	    - ds3d now actually works.
	    - Added ZLIBS.FLAGS to map2cs.mak.
	- Fixed OpenGL/backbuffer implementation of the procedural
	  textures so that it at least doesn't crash anymore. It also
	  seems to work mostly except that the rendering of a procedural
	  texture also causes the proc texture to be rendered on the
	  main screen.
	- Eric Sunshine corrected some outdated references to the old makefile
	  variables MAKEDEP.INSTALLED and NASM.INSTALLED to reflect the new
	  names MAKEDEP.AVAILABLE and NASM.AVAILABLE, respectively.
	- Eric Sunshine made the following changes to winconf.bat:
	    - Now sets the CC, CXX, and LINK variables in config.mak since they
	      are no longer set by the makefile.
	    - Now adds -fvtable-thunks to CFLAGS.SYSTEM since this is no longer
	      done by the makefile.  Unfortunately, with gcc 3.x, this option
	      is deprecated and produces a harmless warning, but it is still
	      required for earlier releases of gcc, so we take the safe route
	      and use it.  (Note that this only affects Mingw users who are not
	      using Msys.)
	    - Now checks if the linker flag -lmingwex is required.  This flag
	      is needed by some interim Mingw releases.
	- Eric Sunshine removed the -fno-rtti check from djgpp/dosconf.bat
	  since CS should no longer employ that flag.  (The Unix and Unix-like
	  ports stopped using it quite some time ago.)
	- Eric Sunshine added CS_STRUCT_ALIGN_4BYTE_BEGIN and
	  CS_STRUCT_ALIGN_4BYTE_END to cssysdef.h to support strict packing of
	  structures.  This is needed on some platforms (such as Sparc) for a
	  couple structures used by the project.  Augmented csRGBcolor and
	  csRGBpixel to employ the 4-byte packing macros.  Thanks to Ferris
	  McCormick <fmccor@inforead.com> for reporting the packing problem
	  afflicting Sparc.
	- Eric Sunshine fixed aws.mak so that it no longer reports an error
	  about missing "plugins/aws/slp.cpp.h".
	- Eric Sunshine made the following changes to the project configuration
	  phase and makefiles:
	    - Libraries zlib, libpng, and libjpeg are now auto-detected.
	    - CFLAGS and LFLAGS for zlib, libpng, and libjpeg are now
	      determined automatically.
	    - In addition to the default paths (/usr/include, /usr/local/lib,
	      etc.), auto-detection will now check the CS/libs directory and
	      the /sw directory which is the default package installation
	      location of Fink, the MacOS/X package management facility.
	    - Auto-detection now works correctly even if directory names are
	      decorated with version numbers (for example,
	      CS/libs/libpng-1.2.4).  For libjpeg, auto-detection will
	      recognize both CS/libs/libjpeg* and CS/libs/jpeg* (which matches
	      the "jpeg-6b" directory into which the standard libjpeg archive
	      unpacks).
	    - Removed hard-coded CFLAGS and LFLAGS from platform-specific
	      makefiles.
	    - Fixed client makefiles to use the new auto-detected CFLAGS and
	      LFLAGS.
	    - zlib -I, -L, and -l directives are now used only where needed
	      rather than globally throughout the project.  In particular, they
	      are used for the vfs, pngldr, and jngldr plugins, and for csutil
	      (which contains csArchive).
	    - Worked around a bizarre bug in the Mingw/Msys "mkdir" command
	      which caused the check for "mkdir -p" in chktools.sh to fail.
	      Specifically, given the path "mkdir -p mkdtest/mkdtest/mkdtest",
	      it would mysteriously fail (creating only the topmost directory).
	- Eric Sunshine eliminated a slew of compilation warnings throughout
	  the project.
	- Eric Sunshine modified the makefiles so that, on Unix platforms,
	  the X11-related plugins are built only if the configuration phase
	  discovered the presence of X11, and the OpenGL-related plugins are
	  built only if the configuration phase discovered OpenGL.
	- Eric Sunshine eliminated several warnings issued during invocation of
	  "make depend".
12-Oct-2002
	- Norman Kramer did the following:
	    - csMutex::LockTry always returned false.
	    - MixerFunction now runs in a thread if the loaded sounddriver is
	      threadaware (currently oss driver only).
	    - Oss driver no longer implements a timer but relies on the
	      sound renderer.
	    - Added temporary ThreadAware method which returns false for all
	      but the oss driver.
	- Jonathan Tarbox eliminated some MSVC warnings from the opcode plugin.
11-Oct-2002
	- Some more cleanups in the OpenGL renderer.
10-Oct-2002
	- Fixed a bug in the OpenGL canvases where a glEnd() was called
	  (when writing text) without a corresponding glBegin().
	  Thanks to Mihai Ganea <miaig2@myrealbox.com> for spotting and
	  fixing this bug.
	- Fixed a bug in dynamic lighting where it would cause bad shadows
	  if some object enclosed another. Added an additional test to see
	  if a polygon is really covering another to avoid this.
	- Fixed a bug in the engine. When creating a dynamic light it would
	  have one reference too much. This also fixes the problem of
	  dynamic lights not deleting in walktest.
	- Fixed a few other similar bugs where a csRef was returned as
	  a csPtr and it was assumed that a DecRef() would happen in that
	  case (which no longer occurs since there is a constructor
	  from csRef to csPtr).
	- Eric Sunshine made the following changes to TiXmlString:
	    - Major optimization to methods which append and access strings and
	      characters, and which access length.  Problem was that the class
	      did not have an instance variable recording the string's length.
	      This resulted in two types of major slow down.  First, anytime it
	      needed to know its own length (which it did quite frequently --
	      even when accessing a single character with operator[], and when
	      appending), it had to scan the entire string with strlen().
	      Second, in order to append anything (even a single character), it
	      used strcat() or strncat() which resulted in yet another complete
	      string scan.  Considering that the XML parser appends characters
	      one at a time, this meant that every single character appended
	      was accompanied by at minimum two complete string scans.  For
	      large strings built up character by character, this overhead was
	      a killer.
	    - Fixed each of the comparison operators (==, <, >).  Each returned
	      incorrect results for the boundary cases.
	    - Folded out a small amount of redundant code (but in reality, the
	      bulk of the code implementing this class is redundant and should
	      be folded out).
	- Fixed a bug in lighting in combination with DrawPolygonMesh (fastmesh)
	  things. Apparently the super lightmaps were not marked as dirty.
	- Eric Sunshine eliminated several compilation warnings from the OpenGL
	  renderer.
9-Oct-2002
	- Matthias Braun converted the error defines for threads to an
	  anonymous enum, this makes it nicer looking.
	- Marten Svanfeldt did the following:
	    - ARB_vertex_program testscript. Used by ef1.xml and simplevp.
	    - Added support for ARB_vertex_program.
	- For some reason include/cssys/win32/csosdefs.h was full of
	  ^M (carriage return) characters. This failed the compilation.
	- Fixed other ^M chars in other thread related files.
	- Greatly cleaned up OpenGL renderer again (super lightmap cache).
	- Eric Sunshine made the following changes related to the CS threading
	  API, implementation, and configuration:
	    - Additional cleanup of the API.  Also added and updated comments.
	    - Eliminated the csRefCounted class from cssys/thread.h.  Instead,
	      now uses the existing csRefCount class from csutil/refcount.h.
	    - Renamed iRunnable to csRunnable and derived it from csRefCount
	      rather than iBase.  The rationale for this change is that
	      threading can be considered lower-level than SCF, therefore it
	      should not rely upon SCF.  It is conceivable, for example, that
	      SCF itself could benefit from the threading-related API in order
	      to become thread-aware, thus we do not want a circular
	      dependency.
	    - Updated the API to return csRef's rather than csPtr's since csPtr
	      is a dangerous backward-compatibility hack.  In particular, csPtr
	      will leak the resource if the caller of a function returning the
	      csPtr ignores the returned value.  As a general rule, use csRef
	      for all new API.
	    - Eliminated the CS_SAFE_LOCKWAIT() and CS_SAFE_RELEASE() macros
	      since it proved difficult to support this functionality in an
	      abstract and portable way without resorting to extreme ugliness.
	      In particular, on many platforms, the pthread implementation of
	      these "functions" is performed with macros which must be used in
	      pairs within the same scope, thus it was not possible to
	      encapsulate them in abstract methods.
	    - Moved cspthrd.h from include/cssys to libs/cssys/general, and
	      winthread.h from include/cssys/win32 to libs/cssys/win32 since
	      these files are no longer included by the public
	      include/cssys/thread.h on account of removal of
	      CS_SAFE_LOCKWAIT() and CS_SAFE_RELEASE().
	    - Added new generic makefile variables CSTHREAD.SRC, CSTHREAD.INC,
	      CSTHREAD.CFLAGS, and CSTHREAD.LFLAGS.
	    - Augmented mk/unix.mak and mk/dos.mak to choose the proper
	      threading implementation based upon the platform's configuration.
	    - Upgraded all of the platform-specific makefiles to use the
	      threading facilities if available.
	    - Eliminated the now unused CS_THREAD and CS_THREAD.INC makefile
	      variables.  Eliminated the now unused CS_THREAD and CS_THREAD_INC
	      volatile.h defines.
	    - Fixed line-termination problem in cspthrd.cpp where it contained
	      an extra carriage return on each line.
	- Eric Sunshine fixed bug in cs.mak where the "clean" target would
	  invoke "rm -f" without any filenames.
	- Eric Sunshine made the following additional changes to the CS
	  threading API:
	    - Merged csThread::Stop() and Kill() since it was not possible to
	      reliably support both methods of killing a thread (semi-dirty and
	      completely-dirty, respectively).  For instance, Windows only
	      supports Kill()-style functionality via TerminateThread(),
	      whereas many pthread implementations only support Stop()-style
	      functionality via pthread_cancel(), though a few also support
	      Kill()-style via pthread_kill().
	    - Changed csRunnable so that it no longer inherits from csRefCount,
	      nor from any other class.  It now declares abstract IncRef() and
	      DecRef() methods itself.  This is an interim solution for the
	      problem of an SCF class wanting to also implement csRunnable,
	      until we provide more comprehensive support for multiple
	      reference-counted interfaces per class without having to resort
	      to SCF.  (That is, csRefCount should support more flexible usage
	      in the future.)
	- Fixed a bug in the OpenGL renderer which caused all levels that
	  didn't use DPM (DrawPolygonMesh) to render incorrectly (no
	  lightmaps).
8-Oct-2002
	- Norman Kramer did the following:
	    - Threading related classes now inherit from a csRefCounter struct.
	    - The static Create method now return a csPtr.
	    - All the above mean objects of these classes can now be
	      reference counted with the csRef template.
	    - Added virtual destructor to the csRefCounter baseclass so the
	      right destructor in DecRef is called.
	    - Windows implementation for CS threading API.
	- Eric Sunshine made the following changes:
	    - Added the new makefile variable MKDIRS which, given a path
	      representing a directory, creates that directory as well as any
	      missing parent directories.  This complements the existing MKDIR
	      variable.
	    - Augmented the project configuration phase so that, for Unix and
	      Unix-like environments (including Cygwin and Mingw/Msys), it
	      automatically discovers the appropriate command for creating a
	      directory including missing parents.  Currently recognizes "mkdir
	      -p" and the old "mkdirs" commands.
	    - Created mkdirs.bat for Windows/DOS users who are not using a Unix
	      emulation shell.  This batch file emulates "mkdir -p" using only
	      DOS commands.
	- Eric Sunshine made the following changes to the "install" makefile
	  target:
	    - Fixed bugs in install.mak which prevented it from copying all of
	      the images from the CS/docs/html directory and subdirectories.
	    - Simplified some of the operations in install.mak to ease future
	      maintenance (though, this file could use a lot more work).
	    - Augmented install.mak so that it is now capable of copying files
	      into the installation directory at an arbitrary directory depth.
	    - Using the above enhancement, flarge, partsys, and isomap are now
	      copied into appropriate subdirectories of ${INSTALL_DIR}/data.
	      Although these demonstration files are not required for
	      development (that is, they do not belong in the SDK), it is now
	      deemed important that they should be present in order to reduce
	      problem reports from novice users.  As an example, if a novice
	      user installed the project and then double-clicked on WalkTest to
	      launch it, WalkTest would terminate immediately on account of its
	      inability to find its "default" map file (which is typically
	      "flarge").  This was not only confusing for novice users, but it
	      also made Crystal Space appear fragile (since the user might
	      think that it had merely crashed).  On the other hand, with the
	      map files installed, even a novice user can double-click on
	      WalkTest and successfully interact with it.
	    - Fixed a number of makefiles throughout the project which failed
	      to specify their configuration and data files for installation.
	      Also fixed a few makefiles which placed their configuration and
	      script files in the wrong locations.
	- Greatly cleaned up the OpenGL polygon buffer implementation.
	  Also reduced memory usage (removed unused colors array) and
	  fixed a memory leak.
	- Again reduced memory usage in the OpenGL renderer by
	  removing several unneeded growing arrays. More cleanups.
	- Fixed a bug in OpenGL renderer which I introduced a few moments ago.
	- Eric Sunshine fixed a bug in csArchive where it was incapable of
	  correctly reading Zip archive directories, and where it corrupted
	  Zip archives on 64-bit hardware.
	- Eric Sunshine made the following changes to support platforms for
	  which "ranlib" must be run against newly installed libraries:
	    - Augmented the project configuration phase so that it discovers
	      the "ranlib" command.  If present, it sets the CMD.RANLIB
	      makefile variable.
	    - Augmented install.mak so that it runs "ranlib" on the installed
	      static library archives.
7-Oct-2002
	- Norman Kramer added next iteration of cs threading classes.
	- Removed some obsolete texmem.{cpp|h} files in the 3D renderer
	  directories.
	- Eric Sunshine made the following documentation-related changes:
	    - Fixed Texinfo error reported by makeinfo.
	    - Made aesthetic improvements to FAQ.
	    - Worked around problem in Texinfo files where some versions of
	      makeinfo are pickier than others and dislike @xref{} references
	      which span multiple lines.
	    - Updated the Apple/NeXT build and platform-internal documentation
	      to reflect fact that it is now possible to launch applications by
	      double-clicking on them from the Finder or Workspace.
	    - Greatly expanded the discussion of CrystalSpaceRoot for the
	      Apple/NeXT platforms and gave it a more prominent position in the
	      documentation since it is important for people to set it if they
	      wish to launch applications from the Finder or Workspace.
	    - Apple/NeXT build instructions now talk about the makefile
	      "install" target, as well as INSTALL_DIR.
6-Oct-2002
	- Norman Kramer did the following:
	    - Added matrix3 includes in OpenGL_ext.
	    - Made classinterface for threading.
	    - Renamed THREAD.INC to CS_THREAD.INC.
	- 'res' did the following:
	    - Replaced some EPS files w/ versions without 
	      %%BeginBinary / %%EndBinary 
	    - Removed '% -*-texinfo-*-' which appeared on the first page.
	    - Removed .vcproj and .sln files form .cvsignore.
	- Eric Sunshine upgraded CS/docs/texinfo/texinfo.tex to the most recent
	  version.
	- Eric Sunshine enabled automated MSVC7 project file generation.
4-Oct-2002
        - Jonathan Tarbox added a SquaredNorm() member function to the
          csDVector class
	- Eric Sunshine eliminated volumes of compilation warnings throughout
	  the project.
	- Updated faq related to smart pointers and added new entry about
	  plugin loading.
	- Eliminated CS/data/tex/arial9.csf since it is considered unnecessary.
	- Fixed both engine and DrawPolygonMesh implementations so they
	  correctly work on non-lit polygons.
	- Eric Sunshine made the following changes to the Apple/NeXT port:
	    - Moved libs/cssys/next/openstep/instpath.cpp to
	      libs/cssys/next/shared/NeXTInstallPath.cpp since it is
	      sufficiently generic to be shared among the Apple/NeXT platforms.
	    - Added libs/cssys/next/shared/NeXTInstallPath.h.
	    - Cleaned up the code comprising the Apple/NeXT csGetInstallPath()
	      and NeXTInstallPath().
	- Eric Sunshine added new csGetUsername() to cssys/sysfunc.h which
	  returns the name of the user running the application.  Added
	  implementations of csGetUsername() for Unix, Windows, MacOS/X,
	  MacOS/X Server (Rhapsody), OpenStep, and NextStep.
	- Eric Sunshine added an iFile::Flush() method.
	- Eric Sunshine made the following changes the the stdrep plugin:
	    - Works with VFS paths rather than physical paths.
	    - Creates the "debug" file in the VFS temporary directory (/tmp)
	      rather than the current working directory.
	    - The debug log file name now contains the owner's username if the
	      username can be determined.  Rather than the old "debug.txt", the
	      name is now "csdebug-username.txt" (or "csdebug.txt" if the
	      username is unknown).
3-Oct-2002
	- Matthias Braun fixed a global object that caused trouble with glibc.
	- Anders Stenberg cleaned up DrawPolygonMesh in the old OpenGL
	  renderer. This breaks fog and is a bit slower. But this will
	  hopefully get fixed soon.
	- Charlls Al'Quarra fixed the indentation in cloth plugin. Some
	  cleanups.
	- Finalized the implementation of the indexed operations in the engine
	  sequence manager.
	- Started work on actually being able to pass parameters to sequences.
	- Made sure sequences and triggers are always parsed at the end even if
	  they are not specified at the end.
	- Added parsing of <params> blocks with sequences.
	- Completely changed the way parameters are fetched in the engine
	  sequence manager.  Added new iParameterESM interface which is a
	  parameter resolver.  Removed all indexed operation versions.
	- Parameters in sequences now seem to work.  Flarge has an example.
	  There are still a few limitations left:
	      - When running one sequence from another running sequence it is
	        not possible to give parameters to that other sequence.  It is
	        only possible to give parameters from within a trigger.  When a
	        sequence fires another sequence the parameters from that
	        sequence are given to the other sequence.  This is potentially
	        dangerous and I will fix this.
	      - Some of the operations will not work properly with parameters.
	        More importantly the fade, move, and rotate type of operations
	        (the ones that cause a timed operation will not work properly).
	- Eric Sunshine eliminated compilation warnings.
	- Changed the way that timed operations are created in the
	  engine sequence manager. They are now much more optimal (only
	  query for the object on which they operate once instead of
	  every frame) and they also work properly with parameters now.
	- Changes <params> to <args> and <par> to <arg> for engine
	  sequence manager parsing.
	- Improved Doxygen documentation of engine sequence manager.
	- Eric Sunshine upgraded the build process so that the Apple/NeXT ports
	  now create application wrappers for generated GUI programs.  The new
	  script CS/libs/cssys/next/appwrap.sh knows how to wrap applications
	  for MacOS/X, MacOS/X Server (Rhapsody), OpenStep, and NextStep.
	  Support files appropriate to each platform, such as Info.plist, are
	  inserted into the wrapper.  Added .icns and .tiff application icons.
	  These are also copied into the wrapper and referenced from the
	  synthesized .plist files.  There are a couple important reasons for
	  creating appication wrappers for the CS programs:
	    - It allows programs to be launched from the Finder/Workspace.
	      Without application wrappers, programs can only be launched from
	      the command-line.  Note that you must set the user default
	      CrystalSpaceRoot to point at the Crystal Space directory (either
	      the installed or development directory) in order for this to work
	      since Crystal Space programs need to be able to find their
	      resources.
	    - Presumably this will solve the problem on MacOS/X where CS
	      programs can not obtain keyboard input.  Apparently, Cocoa
	      considers programs not contained within app wrappers to be
	      "background" programs, thus they are never allowed to have
	      keyboard focus.  A properly formed application wrapper is
	      reported to cure this problem.
	- Removed a very old hack in the engine (camera_hack).
	- Eric Sunshine fixed compilation errors in engseq and csparser.
	- Eric Sunshine fixed a resource leak in the OpenGL procedural texture
	  renderer.  It was leaking a csOpenGLProcBackBuffer2D object.
2-Oct-2002
	- Toni added a small fix to simplevp so that false is returned if
	  vfs cannot be loaded.
	- Cleaned up new thing smoothing code (code style, please people
	  a tab == 8 spaces but indentation MUST be with 2 spaces!!!).
	- Optimized thing smoothing a little bit.
	- Added a few <smooth /> options in flarge.
	- Removed several bad IncRef() calls in csimage.
	- Fixed 'bugplug' console command in walktest.
	- Added iMeshObject functions: SetColor(), GetColor(),
	  SetMaterialWrapper(), and GetMaterialWrapper(). These functions
	  are conveniance functions so that it is easier to change
	  color/material for all objects without having to query
	  for the state interface. Not all mesh objects implement
	  those functions though. For example, a thing mesh object
	  doesn't implement either of them since it doesn't have a single
	  color or material (every polygon has its own color/material).
	- The change above greatly simplifies the engine sequence manager
	  functions to set color and material.
	- Started implementing the indexed versions of the operations in the
	  engine sequence manager.
	- More implementation of the indexed versions of the operations in the
	  engine sequence manager.
	- Fixed csdemo to refer to the cs096 dir instead of cs094 for
	  demodata.zip.
1-Oct-2002
	- Philip Wyett did the following:
	    - Added a couple of fake returns to OpenGL_ext to stop MSVC
	      erroring until the final implementation is in place.
	    - Commented out assert on 'num_sides', now it has been commented
	      out of function input params (haze).
	    - Changed engseq to allow correct access and prevent crasher
	      under Windows.
	- Toni added a patch from Oriol Esteve: add Smoothing for things...
	  to enable it just set the <smooth /> in the params section of the
	  thing. It takes a bit more to recalc the lights, but i think it it
	  worth it. This code is stable but experimental, but feel free to play.
	- Added the notion of parameters to the base sequence manager.
	  A parameter is a generic iBase* parameter which can be any
	  SCF interface internally.
	- Fixed csdemo and the engine sequence manager for the changes
	  above.
	- Eric Sunshine made CS/bin/arch.sh more robust.  It now correctly
	  handles the case on Linux where the user does not have permission to
	  read /proc/cpuinfo.
	- Eric Sunshine updated jobber.pl so that it now fakes up CC and CXX
	  using `false' rather than `true' for the SourceForge shell machine.
	  Using `false' allows the makefile configuration phase to complete
	  successfully, whereas `true' caused some tests to fail.
	- Eric Sunshine fixed CS/docs/support/devapi.dox so that it no longer
	  refers to the obsolete CS/support directory.
	- Eric Sunshine re-enabled the devapi documentation build and publish
	  task in jobber.pl since it appears that the new SF shell server is
	  capable of building this documentation set.
	- Eric Sunshine eliminated numerous compilation warnings throughout the
	  project.
	- Added the ability for the engine sequence manager to accept
	  parameters. This isn't finished yet so it will not work.
	  The idea is that you will be able to define sequences that can
	  work with different sets of objects (i.e. a sequence to open a
	  door that you can reuse for several doors).
	- Fixed a bug recently introduced in the sequence manager.
30-Sep-2002
	- Matthias Braun added a comment to graph2d.h describing what is part
	  of the clipping rectangle.
	- Norman Kramer modified chkxfree.sh so that it also checks for
	  libXxf86vm.a (SuSE8.0 only comes with the .a).
	- Norman Kramer fixed cs2xml so that: LIBRARY 'blah' () is now
	  tranformed into <library>blah</library>.
	- Reverted a downscaling fix in OpenGL renderer for 2D images.
	- Fixed simplept so it works again. Basically there was a problem
	  with timing of asking for the 3D interface. Still doesn't work
	  with OpenGL for some reason.
	- Added an assert in OpenGL to check for a case that should
	  never happen but which apparently occurs on some systems (texture
	  dimensions 0).
	- Eric Sunshine made the following changes to the project configuration
	  mechanism:
	    - Dynamic configuration is now verbose.  The user is notified as to
	      which checks are being performed, as well as the result of each
	      check.
	    - Added CS/bin/confutil.sh which provides configuration utility
	      functions.  These functions are used by all of the other dynamic
	      checks.  This script publishes the following functions.
		- msg_checking()
		    Reports that a check is in progress.
		- msg_result()
		    Reports the result of a check.
		- msg_inform()
		    Provides an informational message to the user.
		- precondition()
		    Asserts that the specified condition is true upon entry to
		    a block.
		- postcondition()
		    Asserts that the specified condition is true upon exit from
		    a block.
		- checkprog()
		    Checks for the presence of a program in the PATH.
		- checktool()
		    Same as checkprog(), but also reports its results to the
		    user.
	    - The precondition() and postcondition() functions are now employed
	      by many of the configuration scripts to ensure that the scripts
	      are run in the correct order.  For example, chkheadr.sh relies
	      upon CXX being properly defined, so it specifies that requirement
	      as a precondition.  If the precondition assertion ever fails,
	      this means that someone forgot to run comptest.sh first -- or
	      they forgot to manually provide a value for CXX.
	    - Removed CS/bin/checkprog.sh since its functionality was
	      incorporated into confutil.sh and enhanced.
	    - Renamed CS/bin/haspythn.sh to chkpythn.sh and greatly enhanced
	      its functionality.  In addition to locating the Python header and
	      library directories, it now recognizes corrupt/incomplete Python
	      installations (such as the MacOS/X Jaguar installation which is
	      missing the static link library), and discovers the exact
	      compiler and linker flags needed to build a Python program or
	      plugin.  The dynamically-determined compiler and linker flags are
	      now published to the makefile system, thus relieving the
	      makefiles of the duty of determining this information on their
	      own, and freeing the user from having to manually edit the
	      makefiles when things go wrong.
	    - Added CS/bin/chkpthrd.sh which determines if pthread support is
	      available, and figures out necessary compiler and linker flags.
	      This is used by chkpythn.sh, for instance, since some Python
	      builds require pthread.
	    - Added CS/bin/chkrdlin.sh which determines if readline/history
	      support is available, and figures out the necessary compiler and
	      linker flags.  This is used by chkpythn.sh since some Python
	      builds require readline/history.
	    - Made the qint() check in comptest.sh more robust to avoid the
	      problem that, on some platforms, the test program would simply
	      crash with a bus error.  Also, in the case of cross-compilation,
	      the test program would fail to run.  These cases were difficult
	      to catch, and they messed up the output from the configuration
	      scripts.  The new approach properly handles both classes of
	      problems.
	    - Augmented CS/bin/arch.sh so that it handles the following
	      additional cases:
		- Recgonizes the apparent inverted `uname -m' and `uname -p'
		  output from MacOS/X.
		- Now recognizes both upper- and lower-case, instead of only
		  lower-case, for the the following CPU types: ppc, ix86,
		  i86pc, m68k.
		- Now recognizes CPU type "powerpc" (in addition to "ppc" which
		  it already recognized).
	    - Merged cygconf.sh and msysconf.sh into win32conf.sh.  Generalized
	      win32conf.sh so that it is suitable for both environments.
	    - Augmented chkxfree.sh so that it is no longer a fatal
	      configuration error if X11 is missing.  It is conceivable that a
	      user might have only SVGA installed, rather than X11, so it
	      doesn't make sense to bomb out if X11 is absent.  It is further
	      conceivable that a user might simply want to build some of the
	      libraries and non-GUI programs, therefore it is insensible to
	      penalize a user for lack of X11.
	    - Simplified cspython.mak considerably since chkpythn.sh now
	      determines necessary compiler and linker flags automatically and
	      dynamically, thus this is no longer the responsibility of
	      cspython.mak.
	    - Added copious documentation to all of the configuration scripts.
	- Eric Sunshine eliminated several compilation warnings throughout the
	  project.
29-Sep-2002
	 - Norman Kramer fixed OpenGL_ext so it compiles again.
28-Sep-2002
	- Philipp Aumayr worked a bit more on OpenGL_ext.
	- Fixed a new bug with iSector->HitBeam() in octree based
	  levels.
	- Added new set material operation to the engine
	  sequence manager. Also added the appropriate command
	  to the sequence parser. This new command is able to
	  change the material of genmesh, ball, sprite3d, cloth,
	  and particle systems.
	- Extended new material operation so you can set a material
	  for an individual polygon too.
	- Cleaned up all unimplemented functions (can always add them
	  later while implementing them) and also removed all warnings
	  in engine sequence manager.
27-Sep-2002
	- 'res' did the following:
	    - Changed the lighting code in ball and genmesh; now it is assumed
	      that distance light-object in object space is equal to the
	      distance in world space; this is wrong with "soft" scaling.
	- Norman Kramer fixed the spr2d loader: V token was not registered.
	- Added new set and fade color operations to the engine
	  sequence manager. Also added the appropriate commands
	  to the sequence parser. These new commands are able to
	  change the color of genmesh, ball, sprite3d, cloth,
	  terrfunc, stars, and particle systems.
	- Eric Sunshine added appropriate PNG/MNG makefile definitions to
	  next.mak.
26-Sep-2002
	- 'res' did the following:
	    - Fixed a division by 0 in UpdateLighting() under some
	      circumstances (genmesh and ball).
	- Norman Kramer did the following:
	    - Uvanimation is now recognized by cs2xml.
	    - Renamed ANIMATE's "type" node to "timing" node.
	    - Added missing break in a case case (cs2xml).
	    - Empty nodes with names now also get their own "name" attribute
	      (cs2xml).
	- Matthias Braun added a missing #include "csutil/ref.h".
	- Keith Fulton added optimization at Jorrit's request which
	  uses integer add for non-overflow addition of pixels
	  instead of per component addition in dynamic ambient lighting.
	- Engine sequence manager is now registered to the object
	  registry when it is loaded by the main loader (it will also
	  first check if it is already in the registry and then use that).
	- The engine will now also try to find and load the engine
	  sequence manager. It will also feed the current camera to it
	  every frame.
	- Implemented 'onclick' trigger condition in the engine
	  sequence manager so you can now listen to clicks on meshes.
	  Untested...
	- Onclick seems to work mostly but HitBeam() is not accurate
	  enough. More work later...
	- Replaced most 'entity_...' stuff in flarge with new sequencer
	  operations.
	- Removed support for most entity related stuff in walktest.
	  A few still remain.
	- Fixed several memory leaks with functions returning
	  a csPtr casted from csRef and which still assumed that a
	  DecRef() would happen (which it doesn't now because there
	  is a constructor for csPtr from csRef which does an IncRef).
	- Added the ability to start a trigger disabled in the trigger
	  loader.
	- Started working on cleaning up the sector HitBeam() routines
	  and also making them more accurate. Unfinished so still unused
	  at this moment.
	- Implemented iMeshObject::HitBeamOutline() and HitBeamObject()
	  for things.
	- Fixed bad csRef handling of font in Dynavis.
	- Fixed frustvis and dynavis handling of IntersectSegment().
	  This fixes several problems with iSector->HitBeam() not working
	  properly in all cases.
	- Changed the API of iVisibilityCuller->IntersectSegment() to
	  make it possible to use it for non-thing meshes too.
	- Fixed implementation of frustvis and dynavis IntersectSegment()
	  to also return hits with non-thing meshes. Octree culler is
	  not fixed for this.
	- Cleaned up iSector->HitBeam() considerably.
25-Sep-2002
	- Philipp Aumayr splitted up polygon buffer to multiple files
	  (OpenGL_ext).
	- Sequence manager (the old one) can now cope with null trueSequence
	  and falseSequence in the condition.
	- Added the ability to validate triggers from within a sequence.  Using
	  this I added the ability for the door in flarge to close again once
	  the camera moves away from the door.  Disabled for now due to bugs...
	- Eric Sunshine fixed spoofdir.php so that it synthesizes valid URLs
	  for pathnames containing embedded spaces and other special
	  characters.
	- Eric Sunshine changed the Mingw port so that the CC and CXX compiler
	  settings are determined dynamically via the comptest.sh script,
	  rather than being hard-coded in the makefile.
	- Eric Sunshine augmented the Mingw port so that it determines
	  dynamically if the -fvtable-thunks compiler option should be used,
	  rather than hard-coding it into the makefile.  Although this option
	  was recommended for earlier versions of Mingw, in the most recent
	  Mingw (gcc 3.2) it is deprecated.
	- Eric Sunshine eliminated compilation warning in ddraw and ddraw8
	  canvases regarding promotion of bool to int when passed through
	  vararg (...).
	- Finally got the door in flarge correctly opening AND closing.  Go to
	  the door to let it open.  Then go away again and it will close.  This
	  required a lot of tweaking in the engine sequencer to get right.
	- Cleaned up the syntax of the sequences and triggers considerably by
	  using shorter keywords and more attributes.
	- Eric Sunshine added a new option to spoofdir.php which allows clients
	  to control whether or not spoofdir allows browsers to recurse into
	  subdirectories.
24-Sep-2002
	- Charlls Al'Quarra implemented the iMeshObject::HitBeam() family
	  of methods for cloth plugin.
	- 'res' did the following:
	    - Fixed PATH=(null) bug (win32).
	    - Added downsampling of all textures to GL renderer.
	    - Created a new MSVC7 build configuration for ext. memory
	      debugging.
	    - Fixed wrong messages in csloader.
	- Relaxed the sequence and trigger loader so that you can now refer to
	  triggers and sequences that haven't been defined yet.
	- Added support for rotating along three axii in the 'rotate' sequence
	  operation.  Also added support for an additional offset to the
	  rotation.
	- Fixed a bad bug in csRefArray which manifested the first time the
	  thresshold size was exceeded.
	- Implemented relative move with duration.
	- Flarge now has a nice animating model using these new sequence
	  features.
	- Relaxed the bad uv mapping test a bit (SMALL_EPSILON instead of
	  EPSILON).
	- Extended levtool with a -validate commandline option.  This will
	  validate the level.  At this moment it will only test if all polygons
	  with more than three vertices are well-formed in the sense that all
	  vertices of the polygon must be on the same plane.
	- Cleaned up the timed operations code in the engine sequencer a bit.
	  Also made it more efficient by not requiring as much object creation.
	- Engine sequence manager: added support for testing if camera is in a
	  sector.  In addition you can also test if the camera is in a box or
	  sphere in that sector at the same time.  Extended the <sectorvis>
	  trigger so you can specify <insideonly> tag (to test if camera is in
	  sector instead of the sector being visible alone).  Also added <box>
	  and <sphere>.
	- Modified flarge so that the only door flarge has, finally opens when
	  you come near it :-)  Expect it to close too in a later commit.
	- Eric Sunshine made the following configuration-time changes:
	    - Added libs/cssys/next/nextconf.sh which replaces the individual
	      invocations of various configuration shell scripts by the
	      makefile.  Hopefully, people making configuration-phase changes
	      will remember to update this script along with the other "conf"
	      scripts, so the Apple/NeXT ports won't lag behind.
	    - Merged libs/cssys/next/macosx.sh into nextconf.sh.
	    - Fixed bug: bin/comptest.sh failed to set the LINK shell variable,
	      thus scripts run subsequent to comptest.sh would fail if they
	      tried using LINK.
	    - Values for CC, CXX, OBJC, and OBJCXX makefile variables are now
	      determined dynamically by comptest.sh and nextconf.sh at
	      configuration time, rather than being hard-coded in the
	      makefiles.
	    - Added Objective-C++ compilation support to next.mak.
	      Objective-C++ source files should use the customary .mm
	      extension.  (As usual, Objective-C files should continue using
	      the .m extension.)
	    - Fixed incorrect comment in bin/checkprog.sh.
	- Eric Sunshine eliminated the unmaintained BeOS port.  Prior to
	  removing this port, all of the port-specific files were tagged in CVS
	  as "BEOS_OBSOLETE" in order to make it simple to recover these files
	  when/if needed.  The following directories and files were tagged and
	  removed:
	    docs/texinfo/build/platform/beos.txi
	    include/cssys/be*
	    libs/cssys/be/*
	    plugins/video/canvas/be/*
	    plugins/video/canvas/openglbe/*
	- Eric Sunshine eliminated a plethora of compilation warnings recently
	  introduced into lghtmap.cpp.
	- Eric Sunshine removed the remaining obsoleted
	  CS_SYSDEF_PROVIDE_ALLOCA from the project.
	- Eric Sunshine worked around a problem in
	  CTextureFile::SetOriginalData() where a static csRef resulted in
	  "undefined reference to `atexit'" error on some platforms.
	- Eric Sunshine eliminated compilation warnings in prsseq.cpp.
	- Eric Sunshine eliminated unused functions from syntxldr.cpp,
	  gmeshldr.cpp, spr2dldr.cpp, spr3dldr.cpp, thingldr.cpp.
	- Eric Sunshine eliminated an enormous number of compilation warnings
	  from the cloth plugin.
23-Sep-2002
	- Charlls Al'Quarra did some fixes on the cloth plugin. Fixed the
	  shear system.
	- Charlls removed the deprecated ClothIntegrator class from the source.
	  now there are two separate classes: Cloth  and Integrator.
	- Charlls added a static-constraint code branch.
	- Brandon Ehle did the following:
	    - Added a unittest data file (for saving).
	    - Add unittest to vfs.cfg.
	    - Add csSaver to scf.cfg.
	    - Add make check to the makefile system.
	    - Add unittest to the make check target.
	    - Add bool flag to iMaterial::GetFlatColor to not return
	      the texture mean color.
	    - Add iImage **image to the loader.h definition to return the image
	      pointer so that we can store this value in the iTextureWrapper
	      correctly.
	    - Add CS_REQUEST_NULL3D and CS_REQUEST_LEVELSAVER to
	      csInitializer.
	    - Fix the iso engine for GetFlatColor() changes.
	    - Fix some link errors with linex2d.
	    - First revision of csSaver committed, only support Material
	      and Texture writing for now.
	- Added new iEngineSequenceManager API. This is going to be used
	  for an engine sequence manager. More info on this new feature
	  later.
	- Added csRefArray<T> which is a templated array for csRef's.
	  It has most of the functionality of a csVector (but not all yet).
	- Added new engine sequence manager plugin (plugins/engseq). This
	  sequence manager enhances the normal sequence manager with engine
	  specific operations (like triggers, light diming, moving
	  of objects, fog, ...).
	- At this moment only the 'setfog' and 'fadefog' commands
	  are implemented.
	- Extended the standard map loader with the ability to load
	  triggers and sequences. Now you can have <sequences> and
	  <triggers> blocks in both world and library files.
	- Added a small demo of a trigger and sequences in flarge.
	  When you go to the basement (through the hole in the floor
	  in flarge) one of the corridors will start having fluctuating
	  fog as soon as you first look at that corridor.
	- Fixed a bug with metaballs which didn't work properly in fog
	  (OpenGL only).
	- Implemented 'setlight' and 'fadelight' in engine sequence
	  manager and loader. Also added enabletrigger and disabletrigger
	  commands.
	- Modified the pseudo-dynamic light in flarge to work using
	  the new sequence system instead of the Walktest specific stuff.
	- Fixed a bug in the engine sequence manager. When timed operations
	  are done they will ALWAYS be called with time==1. That ensures
	  that the end result of a timed operation is well defined.
	- Added rotation command to the engine sequence manager and modified
	  flarge to use it.
	- Added the ability for iMeshList->FindByName() to look for children
	  in mesh objects too. Use the : notation for this like:
	  	name1:name2:name3:...
	  Doesn't work for region/name1:name2... yet.
	- Some new sequence stuff in flarge. Unfinished.
22-Sep-2002
	- Mathew Sutcliffe (Oktal) added a missing space to cygconf.sh which
	  was causing it not to work at all. Also added a missing forward
	  declaration of iSector.
	- Modified iMeshWrapper->SetDrawCallback() so that multiple
	  callbacks are now supported. Added RemoveDrawCallback() and
	  GetDrawCallbackCount(). Also modified GetDrawCallback() so that
	  there is an additional index parameter.
	- Modified iPortal->SetMissingSectorCallback() and
	  iPortal->SetPortalCallback() in a similar way (as SetDrawCallback()).
	  Also added the appropriate functions to remove and get
	  all callbacks.
	- The missing sector callback that is used in the loader is now
	  self-cleaning.
	- Added iSector->SetSectorCallback() and other appropriate functions.
	  This callback will be called whenever the sector is traversed
	  for lighting or renering.
	- Added a new null mesh. This mesh does not draw or do anything at
	  all. It represents a sphere of a certain radius which is handled
	  by the engine and visibility culler in all normal aspects but
	  otherwise has no influence on screen. This object is useful in
	  combination with the callbacks mentioned above. You can then
	  define triggers that activate when a certain area of space
	  becomes visible or is entered. More on triggers in later commits...
21-Sep-2002
	- Matthias Braun included windows.h in all files where directx
	  headers are used - this is needed for latest mingw. Also fixed
	  some csRef errors in ddraw8 canvas and enabled as default for
	  mingw again.
	- Matthias also included bugplug in walkall target and enabled it by
	  default for walktest.
	- Matthias removed the need for the which command in the configure
	  part. Added the checkprog function instead which I found in
	  configure scripts.
	- Charlls Al'Quarra reorganized the cloth plugin a little.
	- Keith Fulton added optimization to dynamic lightmap recalculation
	  to use tighter loops when overflow protection is not necessary.  These
	  faster loops get called about 96% of the time in flarge, so dynamic
	  and pseudo-dynamic lighting should be noticeably faster.
20-Sep-2002
	- Matthias Braun did the following:
	    - Worked around quoting problem in msys and some others fixes
	      for latest mingw.
	    - Changed plugin linking to use g++ instead of gcc.
	    - Removed braces from descriptive name of simplevp as these have
	      given another quoting problem on msys.
	    - Removed CS_SYSDEF_PROVIDE_ALLOCA and enable the ALLOC_STACK_ARRAY
	      by default. Note that direct usage of alloca is forbidden now
	      because latest mingw doesn't have it anymore.
	    - Removed all #define CS_SYSDEF_PROVIDE_ALLOCA from libs,
	      plugins and some apps.
	    - svgalib2d compiles now.
	- Keith Fulton added Dynamic Ambient Lighting capability to all Things.
	- Keith also added sector convenience function to set Dyn Ambient
	  for all things in sector.
	- Fixed XML parsing for <scale> and <shift> for material layers.
	  Thanks to Brandon for spotting this.
	- Fixed cs2xml for texture layer scale. It was incorrectly outputting
	  x,y attributes instead of u,v attributes.
	- Fixed flarge/world for scale.
	- Added 'scrshot' command to BugPlug to take a screenshot (similar
	  to old f12 command in walktest). Assigned this command to
	  'f12' key.
	- Added 'fps' command to BugPlug to show fps. By default on.
	  Assigned this command to 'p' key.
	- Removed screenshot capability from walktest.
	- Removed fps viewer from walktest.
	- Greatly simplified the OpenGL renderer at the expense of some speed
	  loss. This is only temporary until DrawPolygonMesh starts
	  operating at full efficiency. Then we can start using that
	  function a lot more. Here is what I did:
	    - DrawPolygon no longer uses any of the polygon, lightmap, or fog
	      queues and is fully stand alone.  This makes it slower but easier
	      to seperate from the rest.
	    - The fog queue has been removed and merged with the polygon queue.
	      DrawPolygonFX is now the only function that uses the polygon
	      queue.
	    - DrawPolygonMesh is the only function using the super lightmap
	      queues.
	- Changed iLoader->LoadTexture() so that there is now an additional
	  parameter which indicates if you want the default material
	  to be created or not. In the past LoadTexture() automatically
	  created a material with the same name as the just loaded texture.
	  This is still true by default but you can now disable this
	  behaviour. The standard map file loader now calls this function
	  with this parameter set at 'false' so the automatic define
	  of the materials no longer happens.
	- Eric Sunshine renamed PROC_NEEDS_STRICT_ALIGNMENT to
	  CS_STRICT_ALIGNMENT.  Also moved CS_STRICT_ALIGNMENT to cssysdef.h
	  from csendian.h so that it is available to all clients (just like the
	  CS_FOO_ENDIAN macros), rather than only to those importing
	  csendian.h.  Note that in the future, CS_STRICT_ALIGNMENT should be
	  moved to volatile.h and be determined at configuration time.
19-Sep-2002
	- 'res' did the following:
	    - On Win32, the platform-provided path expansion API
	      is used by csExpandName().
	- Daniel Duhprey did the following:
	    - Updated tbtut to reflect the changes to TerrBigState.
	    - Added new version of terrbig.
	    - Added Scale and Error settings.
	    - Fixed terrbig for lighting, speed and error correction a bit.
	- Philip Wyett did the following:
	    - Start of a code cleanup for both CS style and readablilty
	      (OPCODE plugin).
	    - Removed include in terrbig to 'sys/time.h'.
	    - Added LGPL headers to awstest.
	- Fixed some memory leaks in csInitializer.
	- Several enhancements to levtool. By default it now lists the
	  contents of the world file. It also has commandline help
	  (-help option).
	- Completely removed support for the old format from CS.  All is XML
	  now.  The csParser class has also been removed from csutil library
	  and is now in cs2xml tool only.
	- Eric Sunshine renamed the mesh loaders from "classic" to "standard"
	  since the classic format is no longer supported.
	- Eric Sunshine eliminated compilation warnings from g2dtest.cpp and
	  walkcmd.cpp reported by gcc 3.1.
	- Eric Sunshine fixed an access-beyond-end-of-string crasher in
	  NeXTGetInstallPath().
18-Sep-2002
	- 'res' did a SW_SHOWNORMAL fix.
	- Philipp Aumayr continued implementing OpenGL_ext. Slowly getting
	  somewhere :)
	- Fixed several memory leaks in CS introduced by the new csPtr(csRef)
	  constructor added yesterday.
	- Added 'explicit' to the csPtr(csRef) constructor. This avoids
	  implicit cast from csRef to T* and then from T* to csPtr.
	- Added copy constructor for csPtr even in optimize mode.
	- The copy constructor from csRef to csPtr is now templated so that
	  you can assign csRef<T2> to csPtr<T> with T2 and T different
	  (but compatible) types.
	- Eric Sunshine changed next.mak so that it discovers zlib, libpng, and
	  libjpeg libraries within CS/libs even if those directory names
	  contain version numbers.  (Previously, it assumed that the directory
	  names were not decorated with version numbers.) Also now recognizes
	  CS/libs/jpeg in addition to CS/libs/libjpeg, since the shorter form
	  is how the directory unpacks from official archives.
	- Eric Sunshine fixed next.mak so that applications and plugins link
	  correctly on the new Jaguar MacOS/X release.  It now explicitly
	  invokes "c++" on this platform, rather than "cc" when compiling and
	  linking C++ programs, thus ensuring that they link with libstdc++,
	  which is apparently needed with Jaguar.
	- Eric Sunshine fixed token pasting in CS_HEADER_GLOBAL() and
	  CS_HEADER_LOCAL() from cssysdef.h so that they work with newer, more
	  restrictive preprocessors.  This allows the OpenGL renderer and
	  canvas to build correctly with Jaguar MacOS/X.
	- Eric Sunshine fixed a bug he introduced into cs2xml yesterday.
	  ParseGeneral() was not recognizing all known tokens.
	- Fixed UVEC, VVEC, and UV_SHIFT conversion in cs2xml.
	- Fixed UVEC and VVEC handling in XML loader (syntax services).
	- Eric Sunshine made the following changes to the Texinfo documents:
	    - Fixed a slew of Texinfo markup syntax error and warnings.
	    - Eliminated all of the overfull and underfull `hbox' warnings
	      reported by TeX.
	- Eric Sunshine elaborated the message in docs.mak which instructs
	  users to check the log file after a DVI build in order to make it
	  seem less like an error message.
	- Eric Sunshine updated the Apple/NeXT build instructions to reflect
	  present day conditions.
	- Eric Sunshine updated the "external libraries" section in the
	  documentation.
	- Eric Sunshine updated the "internal implementation detail"
	  documentation for the Apple/NeXT ports to reflect present day
	  conditions.
	- Eric Sunshine fixed a bad crasher in the new csPtr(csRef&)
	  constructor where it failed to check against NULL before applying
	  IncRef().
17-Sep-2002
	- Clarified some iMovable Doxygen comments.
	- Fixed a serious bug in the csRef assignment operator for
	  csRef and normal pointers. It would first DecRef() the old
	  pointer and then IncRef() the new one. This can cause crashes.
	- Due to a problem with VFS leaking cs2xml doesn't properly
	  work anymore because the archive writes are not done. Temporarily
	  fixed this by adding a manual vfs->Sync().
	- Optimization in cs2xml so that 'cache' dir is not considered.
	- Fix a bug in iEngine->SetCacheManager().
	- Thanks to the XML format I now managed to get a first
	  semi-operational version of levtool. This version manages to
	  parse a world generated by map2cs and splits the thing into
	  multiple parts.
	- Eric Sunshine broke apart the mother-of-all-switch-statements in
	  cs2xml into smaller functions.  This was necessary for a couple
	  reasons:
	    - In optimize mode, some compilers, such as MSVC would take an
	      enormous amount of time to compile the file (>20 minutes on even
	      fast machines, we are told).
	    - There is a limitation with the MacOS/X assembler where it is
	      unable to deal with such large jump offsets.  The assembler
	      expects such offsets to fit within 16-bits, but these offsets did
	      not, and there appears to be no way to instruct the assembler to
	      use 32-bit offsets.
	- Fixed python plugin for csPtr changes with some functions
	  that return iImage.
	- Eric Sunshine made csRef/csPtr corrections to the JNG plugin.
	- Eric Sunshine added csPtr(csRef const&) constructor to csPtr.  This
	  is a convenience for those cases where one used to do:
	    csPtr<iFoo> func() {
	      csRef<iFoo> foo = ...;
	      foo->IncRef();
	      return csPtr<iFoo>(foo);
	    }
	  Now one can use the more direct approach:
	    csPtr<iFoo> func() {
	      csRef<iFoo> foo = ...;
	      return foo;
	    }
	- Eric Sunshine updated iEventQueue to return csPtr when appropriate.
	  Modified callers of event queue methods as needed.
	- Eric Sunshine updated a number of canvases to fix some obvious
	  csRef/csPtr problems.  These changes should help these canvases to
	  compile more cleanly, but whether or not they actually compile is
	  unknown.  Someone who uses the various canvases will have to test
	  them.
	- Eric Sunshine upgraded the MacOS/X port to work with strict
	  csRef/csPtr.  This port is once again buildable.
	- Eric Sunshine did further work on cs2xml to make it buildable on
	  MacOS/X.  Had to further break apart the
	  mother-of-all-switch-statements in order to appease the assembler's
	  16-bit jump offset limitation.
	- Eric Sunshine eliminated compilation warnings from perftest.
16-Sep-2002
	- Charlls Al'Quarra changed the NextFrame updating in the cloth
	  plugin.
	- Matthias Braun fixed iImageIO for STRICT_SMARTIES.
	- Fixed a DecRef() problem with the g2d plugin (ddraw). Please
	  people! When replacing a normal pointer with a csRef you
	  must ALSO take care to remove the DecRef()!!! Don't blindly
	  fix things so they compile.
	- Fixed more DecRef() related problems with other plugins.
	- Reverted initapp changes which were very dangerous.
	- Fixed cs2xml so it can correctly convert isometric maps.
	- Few fixes in iso loader (XML).
15-Sep-2002
	- Daniel Duhprey did the following:
	    - Cosmetic changes to tbtut.
	    - New changes to the file structure.
	    - Fixed some of the display glitches in terrbig. Put some lighting
	      code in place, but its very poor quality.
	- 'res' did the following:
	    - Moved CS_IMPLEMENT_STATIC_CLASSVAR to top of file as a strange
	      fix for an internal compiler error on msvc7.
	    - Added shell32.lib to MSVC6 projects.
	    - CS_STRICT_SMART_POINTERS defined for MSVC.
	- Norman Kramer added the first version of the CS threading API and a
	  pthread implementation of it.
	- Norman added typedefs for pthread/CS threading API.
	- Norman added image.h include to bumptest app.
	- Norman fixed linux joystick driver so it compiles again (csRef
	  changes).
	- Norman added threading implementation to linux files to compile.
	  Also added detectino of pthreads in unixconf.sh.
	- Norman moved pthread specific typedef into separate header and
	  added definition of CS_THREADS.
	- Philip Wyett did the following:
	    - Fixed up some MSVC projects for csPtr/csRef
	      CS_STRICT_SMART_POINTERS.
	    - Eliminated struct vs. class warnings  in cloth plugin.
	    - Fixed crashers on execute under MSVC - CS_STRICT_SMART_POINTER
	      related. Still issues to be overcome - Work in progress.
	    - Fixed a few more CS_STRICT_SMART_POINTER related crashers.
	      Note: There are still problems. If you find something please
	      report it.
	    - Added shellstuff.h to project files.
	    - Removed a call to csReport () in simplecloth which was called
	      without any type of check for success or failure aka in normal
	      execution space.
	    - Fixed motion.lib so that the correct spark file is loaded.
	    - Removed DecRef() in ddraw plugin.
	- Several csPtr/csRef related changes.
	- Fixed a potential crash bug in AWS. An SCF_DEC_REF
	  was called on aws_fileinputvfs but that variable was
	  never initialized to anything.
	- Fixed a bug in the effect loader. It was calling
	  DecRef() on ldr_context.
	- Fixed decref bug in odedynam. Don't do DecRef() on
	  csRef's! (collidesys in this case).
	- Enabled STRICT_SMART_POINTERS by default. If you want to disable
	  this (for compatibility reasons) then edit mk/user.mak or
	  else do 'make <platform> STRICT_SMART_POINTERS=no'.
	- Several csPtr/csRef related changes.
	- iVertexBufferManager->CreateBuffer() now returns a csPtr.
	- Fixed crash bug in x2d canvas plugin (caused by wrong
	  csPtr changes).
	- Iso loader should now be able to load XML files for iso
	  engine (untested). Note that cs2xml doesn't support these
	  kinds of files yet and also note that data/isomap/world
	  hasn't been converted to XML yet.
14-Sep-2002
	- Matthias Braun: more renamings needed for the Create_Interface
	  declarations. It's Interface_Create now.
	- Charlls Al'Quarra fixed the time issue in the cloth plugin.
	- 'res' did the following:
	    - Moved platform vfs var stuff into a separate cpp file.
	    - On Win32, "homedir" vfs var is translated to My Docs dir.
	    - Changed csGetInstallPath() for Win32 a bit:
		- Both HKCU and HKLM are checked when looking into registry.
		- The value type is checked for REG_SZ or REG_EXPAND_SZ.
		- Added a missing RegCloseKey().
		- In addition to hardcoded c:\Program Files\Crystal path the
		  system- specific Program Files dir is checked as well.
	- Fixed a ref counting bug in picview.
	- Fixed the bug in the OpenGL state cache (canvas). It was not
	  calling SCF_CONSTRUCT_IBASE() in the constructor.
13-Sep-2002
	- Philip Wyett did the following:
	    - Various fixes to some of the video plugins.
	- Steven Geens changed milk2spr so it converts to XML.
	- Steven also fixed mottest.cpp: the name of the motion in
	  motion.lib should be motion.
	- Brandon Ehle fixed engine.cpp: set region = NULL in contructer of
	  csEngine.
	- Matthias Braun did the following:
	    - Renamed the scfGetID_Interfacename and VERSION_Interfacename
	      macros in scf.h to Intefacename_scfGetID and
	      Interfacename_VERSION. This was needed to make constructs with
	      namespaces like this possible:
		SCF_QUERY_INTERFACE (objreg, cows::iWindowSystem)
	    - Another fix was needed to initapp.cpp.
	- Reverted sound fix from Norman since that doesn't work
	  with STRICT_SMART_POINTERS enabled. Also it seems wrong.
	  Need to investigate further.
	- Norman Kramer had a fight with Jorrit with regards to a reference
	  counting problem in loadsnd.cpp. In the end Jorrit declared
	  a victory :-)
	- Fixed the real sound bug which was in the RegisterSound()
	  function of the software sound renderer.
	- Reverted Norman's revert on my reversion again :-)
	- Fixed cspython.mak for swig again.
	- Fixed python plugin for csPtr usage.
	- Fixed bug in old style parser for lights.
	- Eric Sunshine fixed the Opcode plugin so that it builds on platforms
	  where sizeof(bool) != 1.
	- Eric Sunshine fixed formatting of help message in several new
	  makefiles.
	- Eric Sunshine fixed next.mak so that it also runs the support scripts
	  chkheadr.sh and chktools.sh at configuration time.
	- Eric Sunshine eliminated a number of compilation warnings in the
	  OpenGL renderer.
	- Fixed a bug in parsing of attenuation for XML.
	- Fixed several CreateMeshWrapper() and CreateMeshFactory() functions
	  in iEngine so that they set the logical parent of the created
	  mesh object and factory correctly.
	- Fixed another bug in attenuation parsing.
	- Keith Fulton added the ability for rain drops to do collision
	  detection (this is an optional feature that is off by default
	  since it slows down).
	- I added new <colldet> flag in rain loader to enable this.
	- Eric Sunshine fixed haspythn.sh so that it does a better job of
	  locating Python even when Python is installed in a non-standard
	  location.
	- Eric Sunshine patched cspython.mak for MacOS/X.
	- Eric Sunshine patched haspythn.sh and cspython.mak so that cspython
	  plugin only tries linking with Python's libutil.a if that library
	  actually exists.  (It seems to have existed in Python 2.0, but went
	  away for 2.1.)
	- Eric Sunshine eliminated a slew of compilation warnings from the
	  cloth plugin.
	- Eric Sunshine fixed an infinite loop bug in
	  csEffectDefinition::GetTopmostVariableID().
	- Eric Sunshine worked around an assembler limitation on MacOS/X where
	  it was unable to deal with a large switch() statement in blocks.cpp
	  since it couldn't encode the jump offset in 16-bits.  (There appears
	  to be no way to instruct the assembler to use 32-bit offsets.)
12-Sep-2002
	- Fixed a crash at exit bug in Blocks.
	- Fixed stupid bug in star loader that crashed csdemo.
	- Fixed a crash at exit bug in cswstest.
	- Fixed XML parsing of <forward> and <farplane> in
	  <start> sectrion.
	- Andrew Craig reported a bug in the AWS menu factory.
	  The constants 'signalClicked' and 'signalSelected' were not
	  registered.
	- Added a howto on smart pointers.
	- More csPtr/csRef changes.
	- Replaced strcmp with strcasecmp in efserver.cpp.
	- Fixed some memory leaks in odedynamics.
	- More csPtr/csRef changes.
	- Fixed a bug in csTypedObjectIterator::FetchObject().
	- Fixed docs for smart pointers.
11-Sep-2002
	- Anders Stenberg disabled temporarily the usage of effects for
	  CS_FX_ALPHA, since this didn't work.
	- Marten Svanfeldt did the following:
	    - First example of effect to load from file.
	    - Added effectsystem loader
	    - Changed example so that it uses a effect from file instead of
	      hardcoded effect.
	    - Some minior changes to efserver to allow easier loading.
	    - Cleanup in the effectinterface.
	- Charlls Al'Quarra did some small changes to the cloth plugin.
	- Charlls also fixed a syntax error in efserver.cpp: stricmp
	  instead of strcmp.
	- Further csPtr/csRef cleanups by removing the cast operator.
	- Added a new STRICT_SMART_POINTERS flag in mk/user.mak. If this
	  is set to 'yes' then smart pointers are strict which means
	  that a csPtr can ONLY be assigned to a csRef. All other usage
	  will be marked as invalid. So setting this flag to yes is a good
	  way to see if your code is correctly using smart pointers.
	  In addition, when you are in debug mode and the strict smart
	  pointer flag is set, CS will also (at runtime) test if you are
	  actually assigning the csPtr result to a csRef. If not you have
	  a memory leak and this will cause an assert error.
	- Fixed several bugs in the standard loader with regards
	  to ldr_context.
	- Fixed ref counting bugs in iEngine->CreateMeshFactory(). The engine
	  forgot to do IncRef().
	- Fixed similar bug in CreateMeshWrapper().
	- Further csPtr/csRef cleanups by removing the cast operator.
	- Fixed the void return test in csPtr a bit. Also made it
	  binary compatible.
	- Fixed handling of dynamic lights (CreateDynLight()) in the engine.
	  The engine now also keeps a reference as it should.
	- Eric Sunshine added cfg2xml.pl to the project.  This is a script
	  which automates the task of converting flat configuration file
	  property lists (*.cfg) of the form "key.subkey.subsubkey = value"
	  into XML documents.
10-Sep-2002
	- Philipp Aumayr started implementing vertex buffers in OpenGL_ext.
	- Matthias Braun did the following:
	    - Changed CreateXORPattern to use csPtr.
	    - Merged cygosdefs.h into csosdefs.h.
	    - Removed all the smart stuff from LoadImage, no checks for
	      different filenames anymore, the CheckPattern in case of
	      failer has been moved to LoadTexture.
	- Charlls Al'Quarra moved UpdateMesh from DrawTest() to NextFrame()
	  (cloth plugin).
	- iLoaderPlugin and iBinaryLoaderPlugin->Parse() now return a
	  csPtr.
	- iThingEnvironment->CreateBezierTemplate() and CreatePolyTxtPlane()
	  now return a csPtr and IncRef() the returned pointer (which
	  they didn't do in the past).
	- Fixed a ref count leak in the plugin loader.
	- Fixed ref count leaks with layout manager in aws.
	  Also iAwsLayoutManager was not inheriting from iBase.
	- Fixed some other ref leaks in aws.
	- Fixed some other ref leaks in csparser.
	- Fixed iLoader->LoadTexture(char*, char*) so that it returns
	  a normal pointer again. This function was not returning a
	  pointer that required DecRef().
	- Temporarily removed the T* cast operator from csPtr. This ensures
	  that it is ONLY possible to assign csPtr's to csRef's (which is
	  the intended use in a full smart-pointer API). With this operator
	  removed I fixed a large part of CS (but not all) to work cleanly.
	  Then I enabled the T* cast again.
	- Replaced csPtr<iBla> (NULL) with NULL everywhere since that is
	  cleaner and works just as well.
	- Further csPtr/csRef cleanups by removing the cast operator.
9-Sep-2002
	- Philip Wyett fixed OpenGL-ext to latest buffer changes.
	- Philip also fixed m2s_md2.cpp.
	- Matthias Braun changed vector to vec in util.h.
	- Charlls Al'Quarra did the following:
	    - Added cloth mesh plugin.
	    - Added simplecloth application.
	    - Added declarations to new methods in the iCollideSystem for box
	      and sphere primitives.
	    - Added plugin entry to cloth mesh object plugin.
	- Matthias Braun did the following:
	    - Added a check for luaswig.
	    - Added == operator to csRect.
	- Philip Wyett did the following:
	    - Changed from 0.5 too 0.5f (in cloth plugin) to indicate a
	      float for the benefit 'csVector3' and eliminated the operator
	      overloading ambiguity.
	- Philipp Aumayr continued working on OpenGL_ext.
	- iTextureManager->RegisterTexture() and RegisterMaterial()
	  now return csPtr. This also fixes several ref counting bugs
	  throughout CS with regards to this.
	- Fixed iso engine so it now incref()'s the given texture
	  handle in an iso material.
	- Engine material and texture wrappers now use csRef's to keep
	  track of their internal image/handle/texture references.
	- Modified a few relevant functions in iDebugHelper to return
	  csPtr.
	- Changed iCollideSystem->CreateCollider() to return csPtr.
	- Removed unittest.h app header. It is not needed.
	- Fixed unit tester of syntax services.
	- Removed lots (but far from all) DecRef() calls from entire
	  CS. Replaced with csRef usage.
8-Sep-2002
	- Marten Svanfeldt did the following:
	    - Some code cleanup in simplevp. (again)
	    - Changed to use the new way of passing variables to effectsystem.
	    - Created a new way to pass variables to effects.
	- Philip Wyett did the following:
	    - Added newlines again.
	- Anders Stenberg did the following:
	    - Updated simplevp for changed syntax in effect system.
	    - Added support for user arrays to renderers.
	    - Fixed some bugs related to texture coordinates in OpenGL
	      renderer.
	- Changed iModelConverter->Load() to return csPtr.
	- Changed iModelConverter->Save() to return csPtr.
	- Fixed a lot of uses of iDataBuffer in CS to work with csRef.
	- Changed iCacheManager->ReadCache() to return csPtr.
	- Changed csSpriteBuilderFile->Build() to return csPtr.
	- Changed usage of SoundLoader->LoadSound() with regards to
	  references.
	- iSoundRender->RegisterSound() now returns a csPtr.
	- iSoundHandle->CreateSource() now returns a csPtr.
	- iSoundHandle->Play() now returns a csPtr.
	- iObjectModel->CreateLowerDetailPolygonMesh() now returns a
	  csPtr.
	- iFile->GetAllData() now returns a csPtr.
7-Sep-2002
	- Philip Wyett did the following:
	    - Eliminated a couple of compiler warnings in software renderer
	      and commented additions as such.
	    - Fixed mdltest.mak makefile. Will no longer re-link, when
	      there is nothing to be done.
	    - Added some newlines at end of some files and made some
	      destructors virtual (new renderer).
	    - Added some spurious returns to fix compile errors under MSVC
	      for OpenGL-ext. These should just be removed when real code is
	      inserted.
	    - Moved to using 'csPrintf()' as against'printf()' (in blocks),
	      this eliminates a warning under release builds with GCC 3.2.
	- Philipp Aumayr did the following:
	    - Started implementing the Polygonbuffer in OpenGL-ext.
	- Norman Kramer fixed OpenGL-ext so it compiles.
	- Changed all config related Enumerate() calls to return csPtr.
	- Changed iImageIO->Load() to return csPtr.
	- Changed iImageIO->Save() to return csPtr.
6-Sep-2002
	- Philip Wyett did the following:
	    - Resolved all constructor re-ordering I believe (OPCODE).
	    - Added terrbig to default build.
	- Daniel Duhprey fixed cs2xml: length needs to be 1 bigger to
	  account for the '\0'.
	- Matthias Braun added a short description line to some applications.
	- Matthias also changed the name of parser.h to loader.h because it
	  contains iLoader and not iParser. Added a parser.h for backward
	  compatibility.
	- Christian Bayle rolled back latest changes to Debian scripts.
	- Philipp Aumayr did the following:
	    - Some changes to the clipper (to allow other clippers besides
	      stencil) (OpenGL_ext).
	    - Coding style corrections.
	    - forgot LGPL License header.
	- Philip Wyett did the following:
	    - m2s_md2.cpp: casted away of signed against unsigned warning.
	    - Added newline at end of some files.
	- Fixed cs2xml so it correctly translates AMBIENT inside
	  SETTINGS (while still keeping support for AMBIENT
	  inside MATERIAL).
	- Fixed cs2xml for UP, FORWARD, and FARPLANE inside START.
	- Added notification warnings to csloader plugin whenever
	  it detects that the old format is still used.
	- Changed iMeshObjectFactory->NewInstance() to return a csPtr.
	- Changed iMeshObjectType->NewFactory() to return a csPtr.
	- Fixed a bug in walktest (SetConfigOption) with missing
	  curly braces.
	- Eliminated a lot of DecRef()'s in walktest by using
	  csRef.
	- iEngine->CreateDynLight() returns a csPtr now.
	- Removed all calls to DecRef() in Blocks application. Uses
	  csRef now.
	- Removed (almost) all calls to DecRef() in csdemo.
	- Removed all calls to DecRef() in vsh.
	- Removed all calls to DecRef() in simpcd tutorial.
	- Removed a few more DecRef() calls in some other apps.
	- Changed iObject->GetIterator() to return a csPtr.
	- Fixed DecRef memory leak in csTypedObjectIterator when
	  the iterator was not used to the end.
	- Removed a few csPtr casts for LoadFont(). LoadFont() already
	  returns a csPtr.
	- Made csTypedObjectIterator::FetchObject() none recursive
	  (and faster). Thanks to Dave Ray for suggesting this.
5-Sep-2002
	- Daniel Duhprey did the following:
	    - Fixed some returns of void functions in terrbig.
	    - Commented out terrbig from the general CVS until its more stable.
	    - Changed iMaterialHandle to iMaterialWrapper.
	    - Texture mapping only, no lighting.
	    - Added /data/terrain under /lev/terrain.
	    - Pointing to the heightmap for texture mapping.
	- Christopher Nelson did the following:
	    - Fixed a couple of minor compile problems in terrbig where a
	      struct was declared and later referred to as a class.
	- 'res' did the following:
	    - Moved platform memory mapping from include/cssys to libs/cssys.
	    - csMemoryMappedIO can now fall back to emulation if platform mmap
	     fails.
	    - Some documentation fixes.
	    - Turned some of getopt.h's comment into doxygen comments.
	- Philipp Aumayr started working on the new OpenGL renderer.
	- Philip Wyett did the following:
	    - Eliminated class vs. struct warnings under MSVC (xmltiny.h).
	    - Casted away a few compiler warnings in OPCODE plugin - tons to go.
	    - Eliminated a few compiler warnings and a no newline at end of file
	      of effect plugin.
	    - Fixed constructor ordering in OPCODE plugin.
	- Fixed a very subtle bug in the csRef assignement operators.
	  It is very important FIRST to assign the new value to the
	  internal 'obj' pointer of csRef before doing the DecRef().
	  Otherwise it is easy to get in an infinite loop with
	  constructs like 'ref = NULL' if 'ref = NULL' causes a
	  destructor to be fired which checks on the value of 'ref'
	  again.
	- Fixed a bug in the TinyXml loader by making sure that
	  nodes also have a real reference to the system (for the pool).
	- Fixed a few compile problems in effects system.
4-Sep-2002
	- Philip Wyett fixed a constructor ordering problem in OPCODE
	  plugin and eliminated a no newline at the end of one file.
	- Charlls Al-Quarra fixed OPCODE plugin: updated Pierre changes to
	  the INIT_QUANTIZATION macro for dealing with divisions by 0.
	- Steven Geens made an addition to Slerp (in csgeom):
	  It now detects if the axices are pointing in roughly the same
	  direction. So that the the interpolation generates the smallest
	  rotation.
	- Marten Svanfeldt did the following:
	    - Added example of working vertex-programs. See notes in beginning
	      of simplevp.cpp.
	    - Sprite and vertex-program used by examples of vertex-programing.
	    - Special four entrie-vector (x,y,z,w or rgba) used internally in
	      the effectsystem.
	    - Changed to effect system to use new Set/GetRenderData and
	      Vector4 properties.
	    - Changed effectsystem so it can use vertex-programs.
	    - Added strings for vertex-programs.
	    - Rewritten DrawTriangeMesh to move out effectsystem ifs to
	      Validate. Also added support for vertex-programs.
	    - Added some errorchecking to simplevp.
	    - Changing format of realpath string to mount.
	- Daniel Duhprey did the following:
	    - Added terrbig build to mk/user.mak.
	    - Changed how the file stores.
	    - Mostly fixed the LOD and some other problem involving smart
	      culling for terrbig plugin.
	- Philip Wyett fixed vpath in simplevp.
	- Converted exploldr to XML.
	- Converted bcterrldr to XML.
	- Fixed cs2xml for exploldr and bcterrldr.
	- Fixed a bad bug in csString::ExpandIfNeeded(). MaxSize starts
	  at 0. And if GrowExponentially is true then MaxSize was
	  simply multiplied with 2. 0*2 is still 0. This bug caused
	  cs2xml to hang.
	- Attempted to optimized tinyxml parser by caching nodes.
	  For some reason this doesn't work so I commit the code
	  disabled so that I can debug this later.
	- Fixed a bug in XML version of spr3dldr. It would not correctly
	  load the names of the limbs. This prevent the motion manager
	  from working. Thanks to Steven Geens for finding this bug.
	- Found the bug in the tinyxml node pool optimization. The optimization
	  is now enabled.
	- Significantly optimized the GetAttribute() and similar routines
	  in the tinyxml implementation.
3-Sep-2002
	- Charlls Al-Quarra did a few fixes to the OPCODE plugin.
	- Charlls renormalized the pair of csReversibleTransform with the
	  *trans1 / *trans2 trick.
	- Daniel Duhprey fixed some reference counting issues in ODE
	  dynamics plugin.
	- Daniel also modified mmapio.h: fixed the parameters into mmap
	  (should have *something* in the flags. MAP_PRIVATE seems most
	  appriopriate). Added some error checking to the index.
	- Converted several functions in iEngine to return a csPtr instead
	  of a normal pointer. This means that you can now safely assign
	  the result of these functions to a csRef and no longer have to
	  worry about DecRef(). Assigning to a normal pointer still works
	  but in that case you still have to do the DecRef() on your own
	  later.
	- Converted several functions in iLoader to return csPtr as well.
	  For LoadSound() which returns iSoundWrapper this is actually
	  a change as it will now return an increffed pointer (it didn't
	  before).
	- Eric Sunshine eliminated a problem introduced yesterday into
	  next/csosdefs.h.
	- Eric Sunshine re-wrote each of the platform-specific implementations
	  of MemoryMapFile() in order to eliminate potential resource leakage
	  problems.
	- Eric Sunshine eliminated several compilation warnings.
	- Eric Sunshine added the missing csEvent(csEvent const*) constructor
	  which csKeyboardAccelerator::PostHandleEvent() expects to exist.
	- Fixed a few warnings in opcode plugin. Also replace fabsf() with
	  fabs() for more portability.
2-Sep-2002
	- Daniel Duhprey did the following:
	    - Modified scf.cfg to recognize terrbig plugin.
	    - Terrbig specific mesh information.
	    - Added workable/compilable copy of terrbig.
	    - Added a new tbconv tool to convert grayscale images into
	      heightmap data readable by terrbig.
	    - Added data used by the tbtut program.
	    - Added tutorial/test program for terrbig.
	- Charlls Al-Quarra implemented the growable stack of csCollisionPair
	  for each Collide call (OPCODE plugin).
	- Matthias Braun did the following:
	    - Removed UPPERCASE and LOWERCASE macros from cssysdef.h, you
	      can use toupper and tolower from ctype.h instead.
	    - Small change for defining socklen_t.
	    - Removed CSSYSDEF_PROVIDE_PATH from cssysdef.h, the APPEND_SLASH
	      macro has been removed and the MAXPATHLEN and PATH_SEPARATOR has
	      been moved to the platform specific files and enabled by
	      default.
	    - Added a check for swig so that cspython makefile only uses it
	      if it is really present.
	    - Marked CS_SYSDEF_PROVIDE_SOCKETS as deprecated and created a
	      new cssys/sockets.h.
	- Norman Kramer fixed PATH_SEPARATOR redefinition in makedep.
	- Norman als added include of cssys/sockets.h to socket.h.
	- 'res' did the following:
	    - Removed signal stuff from simpmap.
	    - Added win32 specific stuff to sockets.h (basically c'n'p from
	      csosdefs.h).
	    - Changed tbconv target to tbconvert.
	    - Removed another signal thingie in simpmap.
	    - Added cssys/sockets.h to css.h.
	- Philip Wyett did the following:
	    - Fixed tbconv makefile.
	    - infinite renderer: changed unfinished variable name i.e.
	      changed from 'ismipma' to 'ismipmap' and then clipped the
	      compiler warning associated with it. Really where function
	      params are not used we should start removing them and cleaning
	      up the code where possible.
	    - Removed signal.h and unistd.h includes from simpmap. These are
	      not needed for Linux here and that unistd.h is the 'Unix
	      Standard' header and thus MSVC does not have it, so should
	      never be included in non platform specific portions of CS.
	- A bad XML token again results in an error as it should.
	- Converted motion loader so that it loads XML too. The support
	  for 'file' is removed since that is already supported by
	  'addon' in the main loader.
	- Added support for 'EULER' (motion loader) in cs2xml.
1-Sep-2002
	- 'res' did the following:
	    - Cosmetic documentation changes.
	    - Added a "#define CSMASK_FrameProcess CSMASK_Nothing" for
	      event masks, as the name 'Nothing' seemed to confuse some people.
	    - Fixed crash after message box while in fs.
	    - Fixed a grouping error in evdevs.h.
	    - Added FindTexture() to iLoaderContext.
	    - Cosmetic changes in SyntaxService node path output.
	    - Cosmetic changes in message box display.
	    - A bad XML token emits now a warning, not an error.
	    - ParseMixmode() is smarter; it detects when more than 1 exclusive 
	      mode is specified.
	    - Removed gl3d-ext from msvcgen required.mak.
	    - Commented out "#error disable exceptions" in opcode.
	- Eric Sunshine changed csVFS::MountRoot() so that it normalizes each
	  physical path it mounts so that the path ends with only a single
	  slash.  This fixes a problem on Win9x where the mount would fail with
	  a path such as "C:\\" since Win9x can not correctly handle the double
	  slashes.  Note, however, that WinNT, Win2000, and (presumably) WinXP
	  deal gracefully with the double slash, so this was not a problem on
	  those platforms.  On Unix-like platforms, MountRoot() will now mount
	  "/" rather than "//", though semantically there is no difference
	  since, internally, Unix correctly treats "//" as "/" anyhow.
31-Aug-2002
	- Norman Kramer added missing GetDescent & GetAscent to linex2d
	  plugin and changed return type of LoadFont.
	- Received two small fixes from Jochen Moench
	  <jochen.moench@de.thalesgroup.com>:
	    - Fixed some flickering when playing a sprite animation once.
	    - Converting from md2 files to spr concatenated all death
	      sequences (Fixed in m2s_md2.cpp).
30-Aug-2002
	- Philip Wyett did the following:
	    - Fixed redefinitions in for loops in freefnt2.cpp, which cause
	      compile errors under MSVC 6.
	- Charlls Al-Quarra added licensing stuff to the new OPCODE plugin.
	- Charlls also did some minor inner opcode options changes
	  (s/SPLIT_BESTAXIS/SPLIT_GEOMCENTER).
	- 'res' changed the win32 PATH hack a bit to be more robust.
	- Matthias Braun fixed dependency of cstool in cs-config (needed
	  csgfx lib).
	- Daniel Duhprey added proper reference handling for csODEBodyGroup
	  in the ODE dynamics plugin.
	- Fixed several memory leaks in the odedynamics plugin. It had the
	  following problems:
	      - collidesys wasn't initialized so calling DecRef() on that
	        could cause crashes.
	      - CreateSystem() required DecRef() later but CreateBody() and
	        similar didn't. Now all require DecRef() and have been changed
		to return csPtr (also CreateGroup() and CreateLink()).
	      - Bodies and links had a reference (increased) to dynamics
	        system. And dynamics system had a reference to bodies and
		links. This is circular and prevents cleanup.
	  Note that these changes mean that the ODE dynamics plugin now
	  actually tries to clean up properly. Unfortunatelly this triggers
	  a crash while trying to delete an internal object of ODE itself.
	  Needs more investigation.
	- Fixed a bad bug in csPlatformStartup() for windows. In some cases
	  (for example when CRYSTAL is not set) this code would loop forever.
29-Aug-2002
	- Charlls Al-Quarra added a new collision detection plugin
	  based on OPCODE.
	- Charlls fixed OPCODE plugin: I thought that BOOL, FALSE and TRUE in
	  uppercase stuff worked for MSVC, but seems not, so i changed it.
	- 'res' did the following:
	    - Freefnt2 now supports antialiasing.
	    - Freefnt2: the DPI value used to compute pixel from point size
	      is now 96 instead of 72 dpi.
	    - Added GetAscend() and GetDescend() routines to iFont.
	    - Changed some comments.
	    - Fixed the CSWS input to accept chars produced by Ctrl+Alt+Key.
	    - Added a minimum line gap to simpcon plugin (so fonts with small
	      line descends.
	    - Updated csfgen to use freefnt2 are better readable, but lines
	      w/ fonts with higher descends aren't too far apart).
	    - Slight change of failure report when iWin32Assistant couldn't be
	      registered.
	- Daniel Duhprey fixed terrfldr.cpp to change csPtr<iFile> to the
	  more correct csPtr<iImage>.
	- Matthias Braun did the following:
	    - Converted soundloader to use the new csPtr.
	    - Updated FontServer for csPtr and bumped versions of
	      the interfaces.
	- Added csPtr class. This is a simple encapsulator of normal
	  pointers. The only place where this should be used is when
	  you have a function that returns a pointer to an already
	  IncRef()'ed object. When csPtr's are assigned to normal pointers
	  you are then responsible for doing DecRef() yourselves later (which
	  corresponds to old API usage). When csPtr's are assigned to
	  csRef's, it behaves like Take(). In that case the csRef inherits
	  the reference and will clean it up later.
	- Changed iVFS->FindFiles() to return csPtr instead of csRef.
	  This makes this function again API compatible.
	- Changed SCF_QUERY_INTERFACE, SCF_QUERY_INTERFACE_FAST,
	  CS_QUERY_REGISTRY, CS_QUERY_REGISTRY_TAG,
	  CS_QUERY_REGISTRY_TAG_INTERFACE, CS_LOAD_PLUGIN,
	  CS_LOAD_PLUGIN_ALWAYS, CS_QUERY_PLUGIN_CLASS, CS_GET_CHILD_OBJECT,
	  CS_GET_NAMED_CHILD_OBJECT, and CS_GET_FIRST_NAMED_CHILD_OBJECT
	  to return csPtr. This means that you no longer have to use Take()
	  to put the returns of these values into a csRef.
	- Removed csRef::Take(). There are still some cases where the
	  functionality of Take() is needed. In that case use csPtr to
	  first wrap your pointer and then assign that to the csRef.
	  For example. Old code:
	      csRef<iBla> bla;
	      bla.Take (new csBla());
	  New code:
	      csRef<iBla> bla (csPtr<iBla> (new csBla()));
	- Changed iVFS->Open(), iVFS->ReadFile(), iVFS->ExpandPath(), and
	  iVFS->GetRealPath() to return csPtr. This means that VFS is now
	  fully csRef clean.
	- Did several fixes to the new OPCODE CD plugin from Charlls Al-Quarra.
28-Aug-2002
	- 'res' did the following:
	    - Corrected a wrong comment in csver.h.
	    - On Win32 the application path is considered when looking for
	      the CS dir.
	    - On Win32 the CS dir is added to the PATH environment var.
	      (so DLLs like libpng can be found by Windows).
	- Added iPolygonMesh implementation for genmesh so it now works
	  with collision detection.
	- Eric Sunshine made the following changes:
	    - Changed csFindSystemRoots() so that it returns csRef<iStrVector>
	      instead of a string buffer (which the caller had to free) filled
	      with null terminated strings plus a final null terminator.  The
	      old return value was far too low-level.  Rewrote all
	      csFindSystemRoots() implementations.
	    - iVFS::MountRoot() now returns csRef<iStrVector> rather than
	      iStrVector*.  For consistency, iVFS::FindFiles() also now returns
	      csRef<iStrVector> rather than iStrVector*.
	    - Fixed double-delete problem affecting all strings placed in the
	      iStrVector returned by iVFS::MountRoot().
	    - Changed the behavior of iVFS::MountRoot() so that it now
	      normalizes mounted "roots" rather than mounting them in native
	      form.  For example, in vsh on Windows, we now have /native/c/,
	      /native/d/, etc. rather than /native/C:/, /native/D:/, etc.
	- Eric Sunshine made the following string class/interface-related
	  changes:
	    - Eliminated the very ugly iString::SetFastGrowing() and
	      csString::SetFastGrowing() hacks.
	    - Replaced with more flexible and generic "grows by" and "grows
	      exponentially" options.  With "grows by", the client can set the
	      capacity growth increment directly.  With "grows exponentially",
	      the string capacity grows exponentially.
	    - Eliminated the ugly grows_a_lot hack from csString::SetCapacity()
	      since that was the incorrect place to implement incremental or
	      exponential growth and interferred with clients which needed to
	      set the capacity precisely.
	    - Added a new private csString::ExpandIfNeeded() which respects the
	      "grows by" and "grows exponentially" settings and is used by
	      other methods which need to ensure proper capacity.
	    - Added iString::GetCapacity() and csString::GetCapacity() to
	      complement existing SetCapacity().
27-Aug-2002
	- 'res' did the following:
	    - In  jng.cpp: quick fix for "'char' gefolgt von 'int' ist
	      unzulaessig" error
	    - glwin32 canvas now disables vsync (if supported).
	    - glwin32 canvas reports a warning if graphics aren't accelerated.
	    - Documentation.
	- Norman Kramer removed the MP3 plugin from CS because of the
	  recent licensing restrictions placed upon MP3 readers.
	- Eric Sunshine simplified the task of extracting version numbers and
	  release date from csver.h by external tools.  Also simplified the
	  actual sed commands used to perform the extractions.  Hopefully,
	  these changes will fix remaining problems (specifically, bizarre
	  quoting problems of make/shell/sed) with cs-config synthesis which
	  someone (Jorrit) was experiencing.
26-Aug-2002
	- Norman Kramer did the following:
	    - Moved inclusion of extstat.h into ogl_initext.h.
	- Matthias Braun did several fixes and cleanups of crystal.m4.
	- 'res' did the following:
	    - Documentation updates for various headers.
	    - Typo fix in graph3d.h.
	    - Recomitted tweaked set of windows includes.
	    - Fixed related compilation problems of some plugins.
	    - Jpeg loader now reports errors.
	    - In glwin32 canvas actual display color depth is retrieved again.
	- Removed some debug stuff from OpenGL canvas code which used iostream.
	- Added support for proper conversion of HEIGHTGEN keyword (and
	  everything that goes with that) to XML in Cs2Xml.
	- Added support for proper conversion of terrfunc keywords in
	  Cs2Xml.
	- Converted the terrfunc loader to XML.
	- Added support for UVA in cs2xml.
	- Added support for UV and COLOR loading in the syntax services.
	- Fixed a bug in Cs2Xml and 'uv' specification in 'texmap'.
	- Fixed a bug in the parsing of <uv> in <texmap> in the syntax
	  services.
	- Fixed handling of SPEED again in Cs2Xml. It was broken since
	  adding support for SPEED in sequences.
	- Fixed support for emitcylinder in Cs2Xml.
	- Removed support for flarge.zip and partsys.zip from vfs.cfg.
	- Made a few fixes to flarge and partsys.
24-Aug-2002
	- Philip Wyett replaced use of 'endl' with '\n" where 'iostream.h'
	  is not included nor really should be. This allows now successful
	  compilation of CS with GCC 3.2 in Red Hat 8.0 Beta 3 (null)
	  - Though my testing ability is slightly knackered due to the fact
	  that nVidia has yet todo any GCC 3.2 compiled drivers for kernels
	  compiled with this new compiler. :(
23-Aug-2002
	- Philip Wyett updated linex2d.h to latest font changes.
	- 'res' added file descriptions to nulcache.h and vfscache.h.
	- Cs2Xml now supports old-style START keyword.
	- Fixed Cs2Xml so that it only adds the name attribute to some node
	  if it is actually different from the empty string.
	- Fixed a few compilation issues in csloader after changes from res.
	- Added iBinaryLoaderPlugin. This new interface will be for loader
	  plugins that are interested in parsing binary data and not
	  XML tree data.
	- The main loader will transparently handle both types of
	  loader plugins (iLoaderPlugin and iBinaryLoaderPlugin) and
	  switch behaviour accordingly. Of course binary loader plugins
	  can only be used with the <paramsfile> tag.
	- The binary sprite loader now implements iBinaryLoaderPlugin instead
	  of iLoaderPlugin.
	- <addon> will now fail if the plugin parser fails.
	- <addon> now also supports <paramsfile>.
	- All <paramsfile> options (and even the old PARAMSFILE) will now
	  detect if the file that is being load is XML and switch accordingly.
	- Added example usage of <paramsfile> to flarge. Also added a
	  new 'sprite3' in standard.zip which only contains the <params> block
	  so it can be used with <paramsfile>.
	- Applied a patch from Mendrak <mendrak@worldnet.att.net> which
	  does the following:
	      - Added csFindSystemRoots() global function to find all
	        system roots.
	      - Add MountRoot() to iVFS so that you can mount the system
	        dependend roots on a VFS path.
	      - Extended vsh tool to mount the system roots on 'native'.
	      - Enhanced default font server so that it can optionally take
	        an alpha map that defines anti-aliasing information for
		a font.
	      - Walktest will now by default use a new font 'arial9.csf'
	        which you can find in data/tex.
	      - Added howto on custom fonts.
	- Added support to Cs2Xml for converting tokens from sequences
	  (csdemo).
	- Implemented MAXCOLOR and BASECOLOR support in Cs2Xml.
	- Note that Cs2Xml can only convert old style PARAMSFILE files if
	  you manually add PARAMS (...) to those files. Otherwise it cannot
	  detect this. The same goes for paths defined for the sequence
	  manager. These need an additional PATH (...).
	- Csdemo now parses sequences and paths as XML data. Demodata.zip
	  is now fully XML. Note that saving of paths is not yet in XML
	  format!
	- Implemented XML version of the starldr.
	- Fixed a crash bug in 3ds2lev with sprites if the 3ds file doesn't
	  have texture mapping information.
	- Eric Sunshine started fixing problems caused by the introduction of
	  csFindSystemRoots().  The implementation broke linkage on several
	  platforms as a result of incorrect organization and makefile
	  modifications.  Fixes for other problems will be forthcoming.  Other
	  problems include an apparent double-delete of allocated strings,
	  unnecessary code inefficiencies, and poor API.
22-Aug-2002
	- 'res' did the following:
	    - Added custom CSS stylesheet for docs.
	    - Added a new doc module Engine/Lighting.
	    - Fixed typo in aws.h.
	    - Added paragraph about problems w/ non-latin chars in CS path
	      to MSVC docs.
	    - More documentation modules.
	    - Fixed a bug in csComponent::do_handle_event where a 
	      crash occured after a child component destroyed itself 
	      inside HandleEvent().
	    - Removed '#include "imap/services.h"' from initapp.cpp.
	    - When csLoader::LoadImage() doesn't find a file it now tries
	      various different extensions an cases.
	    - StdLoaderContext::FindMaterial() now also tries to load a
	      texture with the material name if one couldn't be found.
	    - When a material in a list couldn't be parsed this isn't fatal
	      any more.
	    - Added a 'null' cache. (does nothing)
	    - Viewmesh uses this null cache now.
	    - Viewmesh ChDir()s to the sprite's directory before loading it.
	    - Added some of Report*() flavors to csLoader.
	    - In include/cssys/win32/csosdefs.h <windows.h> isn't included
	      any more, but a set of very basic required includes. this
	      speeds up compiling of some files.
	    - <windows.h> is included in a few places where it's needed.
	    - Added same changes to cygosdef.h, but disabled, as they aren't
	      tested yet.
	- Matthias Braun did the following:
	    - Fixed deps of csws in cs-config.
	- Mathew Sutcliffe (Oktal) added 'conf' command to vsh to load another
	  VFS config file.
	- Philip Wyett reverted the removal/move of Windows.h for a minor
	  compilation improvement. It broke certain plugins which is
	  un-acceptable.
	- Fixed Cs2Xml for DURATION and FRAME commands in motion loader.
	- Cs2Xml now supports the normal notation for vertices in 3D
	  sprites (i.e. V (x,y,z:u,v:nx,ny,nz)).
	- When you give a zip file as argument to Cs2Xml it will now
	  convert all CS files it can find in that zip file (including
	  subdirectories). In addition it will make backups of all the
	  files that it converts (.bak extension).
	- iLoader::LoadLibraryFile() now detects XML and switches accordingly.
	- iLoader::LoadMeshObjectFactory() now detects XML and switches
	  accordingly.
	- iLoader::LoadMeshObject() now detects XML and switches
	  accordingly.
	- Improved error handling in the standard loader again (using
	  more of the new syntax services ReportError() and ReportBadToken()).
	- Fixed a bad bug in cs2xml. The created backup file was corrupt
	  because it was already being treated by the old CS parser which
	  overwrites the string that was read.
	- Fixed another related bug in cs2xml.
	- Converted standard.zip to XML.
	- Added support for ROT and Q (quaternions) in cs2xml.
	- Converted blocks.zip to XML.
21-Aug-2002
	- Today Peter Amstutz reports: 'whee'.
	- Implemented XML version of the spiral loader.
	- Fixed a bug in cs2xml with parsing of the RADIUS
	  keyword. This RADIUS can be used for single radius (lights)
	  or vectors.
	- Fixed a similar bug with SCALE which can be used with
	  two or one parameter.
	- Converted partsys to XML. Seems to be working fine now.
	- Fixed a fundamental problem in the csPluginLoader class. Plugins
	  used to query for other components in their 'Initialize' routine.
	  However csPluginLoader calls load+initialize for every plugin
	  and only registers a plugin after it has been loaded AND
	  initialized. This means that during the call to Initialize() it
	  is possible (and even likely) that some other component cannot
	  yet be found because it wasn't yet loaded and registered. This
	  bug caused the reporter to be ignored in apps like walktest
	  and so on. The fix for this is to delay initialization of a
	  plugin until ALL plugins are loaded and registered. I had to
	  extend iPluginManager::LoadPlugin() with a new optional parameter
	  which indicates that no initialization is required.
	- Greatly improved error reporting in syntax services. There is now
	  a new ReportError() function there which takes a message id, a
	  message, and the node that causes the error. From that node it
	  will construct a path with type of the node and the optional
	  'name' attribute so that it is easier to locate the error. This
	  feature is very useful especially since there are no line numbers
	  to depend on in XML.
	- Also added ReportBadToken() to syntax services.
	- All new XML loader plugins now use the new ReportError() and
	  ReportBadToken() functions.
	- Csparser no longer reports error that it cannot load a mesh object
	  factory or mesh object. It is assumed that the mesh object loader
	  will have reported its own error already.
	- Added mention of csRef to the faq.
	- Added explanation to faq of how Z-buffer initialization works in CS.
20-Aug-2002
	- Implemented XML version of the spr2d mesh object loader.
	- Added new ParseBox() in syntax services (for XML).
	- Implemented XML version of the gtreeldr.
	- Implemented XML version of the gmeshldr.
	- Implemented XML version of the meta ball loader.
	- Implemented XML version of the emit loader.
	- Implemented XML version of the fountain loader.
	- Implemented XML version of the snow loader.
	- Implemented XML version of the fire loader.
	- In most of those loaders the error handling is also better now (in
	  some it was simply non-existant before conversion).
	- In addition I made the error handling a little bit cleaner by
	  using csRef smart pointers.
	- Implemented proper conversion of PRIORITY in cs2xml.
	- Implemented proper conversion of PLUGIN in cs2xml.
	- Fixed a bug in XML parsing of render priorities in main loader.
	- Cs2xml will remove underscores in tokens now. This fixes a lot
	  of loader issues.
	- Cs2xml correctly converts NUM(x,y) for genmesh.
	- Cs2xml correctly converts VERTICES for spr2d and genmesh.
	- Cs2xml correctly converts UV for polygons and spr2d.
	- Cs2xml correctly converts TRIANGLES in genmesh.
	- Cs2xml correctly converts F inside ACTION for 3d sprites.
	- Cs2xml correctly converts EMITBOX, EMITFIXED, AGING,
	  and RECTPARTICLES (emit particle system).
	- Cs2Xml correctly converts DROPSIZE, BOX and ORIGINBOX.
	- Fixed a bug in cs2xml with converting of old style lights.
	- Cs2Xml will now translate POLYGON to 'p' and work correctly
	  in case 'P' is used.
	- Fixed a bug in the bezier loader addon.
	- Cs2Xml correctly converts KEY.
	- Cs2Xml correctly converts RADIUS.
	- Fixed a bug in cs2xml where it would not properly recognize strings
	  if they have no quotes.
	- Cs2Xml correctly converts COLORS for spr2d.
	- Cs2Xml correctly converts W for warp.
	- Fixed a few bugs in the syntax services for parsing of polygons.
	- Cs2Xml correctly converts FOG.
	- Cs2Xml correctly converts HALO.
	- Cs2Xml correctly converts CURVECONTROL and CURVECENTER.
	- These changes are sufficient to fully convert /data/flarge/world
	  to XML. Consequently I also commited the XML version of 'world'.
	  Note that ONLY stuff that is used in flarge is guaranteed to
	  work. Nothing else has been tested and some mesh object plugins
	  are not even converted. This is true both for cs2xml and for
	  the XML loading itself. The XML loader seems a little bit slower
	  compared to the old lower although the difference isn't much.
	  There is still a lot of room for optimization though.
	- Cs2Xml correctly converts EMITSPHERE, EMITCYLINDER, EMITLINE, and
	  EMITCYLINDERTANGENT.
	- Cs2Xml correctly converts REGULARPARTICLES.
	- Cs2Xml correctly converts DIRECTION and DIRECTIONAL.
	- Cs2Xml correctly converts SOURCE.
	- Cs2Xml correctly converts HAZEBOX and HAZECONE.
	- Implemented XML version of the haze loader.
	- Cs2Xml now considers '-' as a valid token in a string without
	  quotes.
	- Fixed an error in the new XML loading stuff. Thanks to
	  MatzeB for finding this using valgrind.
	- Implemented XML version of the rain loader.
19-Aug-2002
	- Matthias Braun did the following:
	    - Removed default -lcsengine output when no libs where specified
	      from cs-config.
	    - Removed csws default as well.
	- Philip Wyett did the following:
	    - Minor fix to MSVC project file generation.
	    - Updated project to take account of CS'es dynamic nature.
	      Changed C/C++ directive /MT and /MTd too /MD and /MDd. This
	      fixes all wonky unresolved externals at link time for external
	      projects. Make the change in projects like Pinball etc and you
	      will get successful compilation again.
	    - Brought release build upto date.
	    - Fixed MSVC/Windows runtime problems or possible problems in CS
	      apps and plugins. CS no longer requires or uses the:
	      /nodefaultlib:"libname"
	      anymore under MSVC6. Chances are now if you get a conflict it
	      is at app level or another lib you are using with your project.
	      :)
	    - Removed divx plugin from MSVC project until it is fixed.
	- Implemented XML version of the ball mesh object loader.
	- Fixed a memory leak in SKELETON statement of spr3d loader.
	- Converted the 3D sprite loader to XML.
17-Aug-2002
	- Better error message is a texture could not be loaded in
	  the loader.
	- Implemented XML loading for PROCTEX in the csparser plugin.
	- Implemented HALO parsing in XML for lights.
	- cs2xml will now correctly export lights in old and new
	  syntax. Halos are not yet properly supported.
16-Aug-2002
	- Implemented XML loading in the csparser plugin for the following
	  items:
	    - Library (LIBRARY)
	    - Sounds (SOUNDS and SOUND)
	    - Lod control (LOD)
	    - Mesh factory (MESHFACT)
	    - Mesh object from factory (MESHREF)
	    - Add-on (ADDON)
	    - Settings (SETTINGS)
	    - Render priorities (PRIORITIES)
	    - Collections (COLLECTION)
	    - Start (START)
	    - Keys (KEY)
	    - Nodes (NODE)
	- Additionally implemented:
	    - Texture generation (HEIGHTGEN)
15-Aug-2002
	- Eric Sunshine changed next.mak so that it only uses the CFLAGS
	  -Ilibs/zlib, -Ilibs/libpng, -Ilibs/libjpeg and the LFLAGS
	  -Llibs/zlib, -Llibs/libpng, -Llibs/libjpeg if those directories
	  actually exist, rather than using the flags unconditionally.  This
	  change will eliminate the annoying MacOS/X (Apple/NeXT) linker
	  warnings about non-existent directories.
	- Eric Sunshine eliminated a number of compilation warnings in csutil.
	- Eric Sunshine fixed csconf.mak so that it only executes the sed
	  commands when the top-level `csconfig' target is invoked, rather than
	  when _any_ target is invoked.
14-Aug-2002
	- Peter Amstutz did the following:
	    - Replaces ClipLine() (in common canvas code) with a simpler,
	      more efficient and less buggy algorithm.
	    - More fixes to Debian scripts.
	- Removed CreateElement(), CreateText(), and CreateComment() again.
	  Will do this differently.
	- Added iDocumentNode::CreateNodeBefore() to create nodes before
	  the given node (or at end if given node is NULL).
	- Renamed csXmlNodeType to csDocumentNodeType. Also renamed
	  the CS_XMLNODE_... constants to CS_NODE_....
	- Fixed unittest of syntax services. It was performing a bad
	  test with the 'scale' token.
	- Added iString::Format() and FormatV() (similar to csString versions).
	- Renamed ParseXML() and WriteXML() to Parse() and Write() in iDocument.
	- Implemented a VERY dirty hack in the TinyXML source code. We would
	  like to avoid modifying those sources too much (to make it easier
	  to upgrade if that is needed). However I needed a function to write
	  out XML to iString as opposed to FILE*. So I just redefined FILE
	  and all FILE related routines (fprintf, ...) to work on iString :-)
	  Of course, this hack is local to the TinyXml sources.
	- Added version of Write() that takes a VFS filename.
	- Implemented three versions of Write() to write out document files.
	- Removed all CreateAttribute... and MoveAttribute... functions
	  from iDocumentNode. Instead there is only SetAttribute() which is
	  now implemented.
	- Added SetValueAsInt() and SetValueAsFloat() for iDocumentNode.
	- Added iString, csString, and scfString versions of SetFastGrowing().
	  Use this new flag if you have a string that grows a lot (i.e. lot
	  of Append() calls). It will consume more memory but it is a LOT
	  faster. If you don't plan on doing a lot of Append() calls then
	  do not use this.
	- The TinyXml output now uses this option for writing out XML to
	  an iString. This GREATLY speeds up XML writing (from a minute to
	  about a second :-)
	- cs2xml now uses XML writing with TinyXML. Still not 100% operational.
	- Added a warning in mk/user.mak with regards to the usage of
	  USE_SHARED_LIBS.
	- cs2xml now does a very good job of converting flarge to XML. I
	  think it is nearly perfect now. It also translates TEXTURE to
	  'texmap' (in case we're in a polygon) and it combines PORTAL
	  and WARP keywords into 'portal' section.
13-Aug-2002
	- Philip Wyett did the following:
	    - Removed: CS_EXTENSIVE_MEMDEBUG at this time. This causes
	      problems with CalTocs and in other areas.
	    - Added section to MSVC documentation to make sure the user
	      realizes they need to add the 'include' and 'libs' directories
	      into MSVC so that the compiler can see them for the build.
	    - Updated links in docs to reflect a new msvc_libs  for v6 release.
	      This release fixes a problem with Freetype2 and halves the lib
	      size. This is work ongoing as contact with the Freetype team is
	      difficult when they don't reply to emails.
	    - Removed an include to now removed awsclip.h.
	- Matthias Braun did the following:
	    - Fixed a warning that sometimes happens in crystal.m4.
	    - Removed unused file awsclip.h and awsclip.cpp.
	- Peter Amstutz fixed Debian scripts to make thing compile more
	  nicely with recent CS.
	- Implemented XML versions of LoadMap() and LoadSector() in the
	  main loader.
	- Added XML version of ParseColor() to syntax services.
	- Added XML version of ParseStatLight() to the loader.
	- Implemented XML parsing of textures and materials in loader (things
	  like procedural textures and heightmap texture generation tools are
	  not yet converted).
	- Implemented XML parsing of 'plugins' block.
	- Implemented XML parsing of 'meshobj'.
	- Modified LoadMap() in the main parser so that it will automatically
	  switch to XML loading if the first non-blank character in the
	  read buffer is equal to '<'.
	- LoadMap() will also see if it can find an iXmlSystem in the object
	  registry. If not it will use the tinyxml parser. Using that it is
	  possible to make your own implementations of iXmlSystem using another
	  XML parser.
	- Fixed cs2xml so that it makes an XML world file that can almost be
	  read by the current loader (still need to fix a few things manually
	  but I will not continue writing cs2xml like this anyway. The plan is
	  to let cs2xml generate a node tree and output that using the XML
	  system). By doing this I could confirm that XML map loading works
	  for very simple levels now (sectors, textures, materials, lights,
	  and thing mesh objects). This is a very nice step indeed.
	- Did the following renames:
	    iXmlSystem -> iDocumentSystem
	    iXmlNode -> iDocumentNode
	    iXmlAttribute -> iDocumentAttribute
	    iXmlDocument -> iDocument
	    iXmlAttributeIterator -> iDocumentAttributeIterator
	    iXmlNodeIterator -> iDocumentNodeIterator
	    csTinyXmlSystem -> csTinyDocumentSystem
	- Renamed iutil/xml.h to iutil/document.h.
	- Added CreateElement(), CreateComment(), and CreateText() to
	  iDocument. Use these functions to create unlinked nodes. Later
	  you can add them to a parent node.
	- Removed iDocumentNode->Create...() functions.
12-Aug-2002
	- Renamed the XML version of ParseTexture() to ParseTextureMapping()
	  as that more accuratelly reflects what happens (in syntax
	  services).
	- Renamed the XML version of ParseWarp() to ParsePortal() and
	  also added parsing of the destination sector there (syntax
	  services).
	- Implemented ParsePortal() in syntax services.
	- Removed XML version of ParseShading() in syntax services. It
	  isn't that useful to keep as a seperate routine.
	- Added XML version of ParseBool() to syntax services.
	- Partially implemented XML version of ParsePoly3d() for syntax
	  services. This means that syntax services nearly completely
	  supports XML now.
	- Implemented XML thing loading. This includes plane and
	  bezier addon-loaders.
11-Aug-2002
	- Philip Wyett fixed compile error under MSVC 6 for msmodel.cpp.
9-Aug-2002
	- Matthias Braun fixed registration of aws component factories.
	- Added conveniance functions to get a value from a node (iXmlNode).
	  This will basically search for the first TEXT child in the node and
	  return the value of that child.
	- Changed GetType()/SetType() to GetValue()/SetValue() in iXmlNode.
	  Added GetType() which returns the type of the node.
	- Implemented ParseMatrix() in syntax services for XML.
	- The OpenGL renderer will now register the effects server with
	  the object registry after loading it.
	- Added (empty) unittest implementation for csutil. More specifically
	  for the XML parsing tools.
	- Added unittest implementation for syntax services to test the
	  new XML functions. ParseVector() already seems to work but there
	  are still a few problems.
	- Extended unittest app to call the new unittests.
	- Fixed a stupid bug in iXmlNode::GetAttribute() (for TinyXML parser).
	- Fixed a bug in iObjectRegistry::Register() where it would accidently
	  increase the ref count on the object with a given tag if that tag
	  was already defined.
	- Matrices and Vectors now parse nicely with the new XML parser.
	  The syntax loader unit test now succeeds.
	- Eric Sunshine fixed the cslexan makefile, which was recently broken,
	  so that it once again produces a plugin.
	- Implemented XML parsing for mixmodes in syntax services.
	- Implemented XML parsing for texture specifications in syntax
	  services.
	- Removed scalex, scaley, and scalez. There is now only 'scale' which
	  has four optional arguments (x, y, z, and all).
	- Added a VERY short and incomplete Schema for the CS map file format.
	  This is very much work in progress as I'm still learning Schema.
	  Look in scripts/xml.
	- Eric Sunshine fixed numerous problems introduced recently into
	  csconf.mak, including garbled sed commands, many improper quoting
	  issues, and invalid expansion of makefile variables by the shell when
	  the shell synthesized the makefile fragment in response to
	  --makevars.
	- Eric Sunshine changed csconf.mak so that cs-config now has real
	  dependencies, which means that it will be rebuilt only when its
	  dependencies change, rather than being rebuilt each time the target
	  is invoked.  The current dependencies are config.mak, mk/user.mak,
	  and the currently configured platform-specific makefile (i.e.
	  linux.mak).
8-Aug-2002
	- 'res' did the following:
	    - Changed some clean targets to be same name as the build
	      targets (eg walkclean -> walktestclean).
	    - Reactivated plugin resource stuff.
	    - Documentation stuff. added some include file descriptions and
	      a new module, '3D Engine'.
	    - Minor changes in documentation (some doxygen stuff, no 
	      content changed).
	- Philip Wyett did the following:
	    - Fixed include in ms2spr.cpp for the 3rd and LAST time!!!
	- Daniel Duhprey added MeshCylinder collisions to the ODE dynamics
	  plugin.
	- Removed support/doom2cs again. This doom2cs utility can now be
	  found at ftp://sunsite.dk/projects/crystal/contrib/doom2cs.zip
	- Ryan Surkamp applied a fix to the bcterr landscape engine.
	- Removed support/gnu/bison.sim file. As far as I could see this file
	  is not used in CS. If it appears I looked wrong then we can always
	  put it back.
	- Removed the old memory debugger in support/debug. There are
	  better tools out there now (valgrind for example) and I'm not even
	  sure this system still works.
	- Moved fpu80x86.h to include/csutil.
	- Completely removed the 'support' directory from CS since it is now
	  empty.
	- Implemented basic reading of XML. You can now read an XML document
	  and parse of nodes and attributes. Writing of XML is not supported
	  yet. And not all operations for reading are supported either.
	  i.e. use the iterators. Nothing else works.
	- Added xmltest application to dump the contents of an XML file.
	- Fixed an error in mergeres.h by quoting the quotes.
	- Steven Geens fixed the motion manager plugin. Motions will now
	  work correctly if no key frame is defined for timeframe 0.
	- Extended iLoaderPlugin with a new version of Parse() that accepts
	  an iXmlNode instead of a string. This new version is not yet used.
	  Put empty implementations of this Parse() in all mesh loaders. This
	  function will provide the upgrade path to the new XML format. Once
	  the upgrade is complete the old version will be removed.
	- Internally extended the main loader plugin with new functions to
	  parse from iXmlNode instead of char*. All these new functions are
	  still empty and will be gradually implemented.
	- Extended iSyntaxService with new functions that load from XML
	  data instead of char* data. Some of these functions are actually
	  implemented and should work. This is untested though.
	- Added a few functions to iXmlNode and also changed the names
	  which refered to 'children' so that they now specify 'nodes'.
	  You can now access nodes by type and attributes by name more
	  easily.
	- Also added conveniance functions to iXmlAttribute to set values
	  as int and float.
	- Steven Geens added a motion test program. With this program you can
	  see the motion manager in action.
	- Steven Geens also fixed bugs in the Milkshape 2 CS convertor.
	- Added new csStringHash class. This is a simple hash of strings
	  where you can assign unique id's to strings. The old csStringSet
	  (which differs because it automatically assigns id's) now uses
	  this new csStringHash.
7-Aug-2002
	- Matthias Braun did the following:
	    - More improvements to crystal.m4, also removed some comments
	      from diablo like "damn damnit shell".
	    - Fixed an error in cs-config I introduced with my latest changes.
	    - Removed now obsolete genscript.sh file.
	    - More fixes for cs-config.
	- 'res' did the following:
	    - Added information about changed make targets to api modification
	      doc.
	    - Fixed an off-by-one error csGraphics2DGLCommon::GetPixelAt()
	      which sometimes caused a crash when making a screenie.
	    - Made csSpriteBuilder::Build() 'smarter': instead of making an
	      output vertex of every point of every polygon it now only
	      outputs vertices with a unique point/normal/texture coord. combo 
	    - Changed default texture corrdinates for files without them
	      to a planar mapping.
	    - Added some support for normals to the 3d sprite loader 
	      (optional; appear behind a texcoords [V(x,y,z:u,v:nx,ny,nz)],
	      default to zero so they are calculated by 
	      csSprite3DMeshObjectFactory::ComputeNormals() when not
	      specified).
	    - csSprite3DMeshObjectFactory::ComputeNormals() now only calculates
	      normals when they are already zero and leaves non-zero
	      normals alone.
	    - Changed the new DrawTriangleMesh() so that it calls
	      OldDrawTriangleMesh() all the time. imho better for the
	      time it's not complete yet.
	    - Changed a few of bit phil's latest changes (in
	      csGraphics3DOGLCommon::PerfTest(): buf is now char[4] instead of
	      char[3]; moved config->SetStr()s out of the for loops).
	    - Added doom2cs to CVS.
	- Philip Wyett did the following:
	    - A little code clean up in OpenGL renderer, moving some array
	      allocation into for loops.
	- Eric Sunshine fixed a couple problems with csconf.mak.  First, it was
	  using " instead of $".  It was using the hardcoded path "out/"
	  instead of $(OUT).
	- Eric Sunshine (hopefully) worked around a problem caused by buggy
	  stat() on Win9x and WinME where a bogus result is returned if the
	  path has a trailing slash.  This causes problems with the makefile
	  dependency rules which depend upon $(OUTBASE), $(OUTOS), $(OUTPROC),
	  or $(OUT), all of which end with a slash, since make thinks that
	  those directories don't exist even when they are present.
	  Consequently, make tries invoking $(MKDIR) on already-present
	  directories.  The work-around was to redefine these variable so
	  without the trailing slash.  Also updated all makefiles throughout
	  the project to take into account that these variables are no longer
	  defined with a trailing slash.
	- Eric Sunshine removed the unmaintained and obsolete csphyziks library
	  and phyztest programs.
	- Eric Sunshine fixed bug in crystal.m4: enable_cstext versus
	  enable_cstest.
6-Aug-2002
	- Philip Wyett did the following:
	    - Using zlib again under MSVC.
	- Charles Al-Quarra moved unmaintained blender scripts to
	  'scripts/blender/unmaint' and reorganized the directory
	  in general.
	- 'res' did the following:
	    - Added a bit of information on the rc merger script expects
	      rc files to be shaped.
	    - Deactivated resource stuff for plugins again, there are 
	      still problems.
	    - Small changes to calculation of glyph bitmap height and my
	      workaround for miscalculated sizes. fonts are rendered a bit 
	      better now.
	- Philip Wyett did the following:
	    - Fixed compile error in cs2xml.
	    - Png plugin now links again with png.lib in msvc_libs for time
	      being.
	    - Removed debug on copyto step, now issue is fixed.
	    - Fixed void functions trying todo returns (effects plugin).
	    - Back to using freetype2.lib for a while.
	- Extended iXmlNode with functions to create and move nodes
	  and attributes. Added iXmlDocument as a representation of a document.
	  Added iXmlSystem which represents the XML system in general.
	- Removed JNG image target from walkall. It is not an essential
	  target to have.
	- More work on cs2xml.
	- Started work on integrating TinyXml XML parser into CS. Currently
	  we integrated the TinyXml sources in csutil. Please do not start
	  modifying those sources unless needed to fix warnings or errors.
	  The TinyXml include files are not in include/csutil because they
	  are not public. To use TinyXml parser you must instantiate an
	  instance of class csTinyXmlSystem and start from there.
	- Eric Sunshine fixed a problem with libs/cssys/win32/mergeres.sh where
	  it was outputting ICON lines with a leading, but no trailing
	  quotation mark.  Also fixed this script so that it works with older
	  versions of sed which do not understand alternation (`|').
	- Eric Sunshine fixed several problems with dddraw.mak after recent
	  changes caused it to stop working.
	- Eric Sunshine fixed the "clean" target so that it removes all of
	  those annoying debug .txt files.
	- Eric Sunshine merged msys.mak into win32gcc.mak in order to reduce
	  future maintenance headaches.  msys.mak kept lagging behind
	  win32gcc.mak.
	- Eric Sunshine fixed the following problems with the Texinfo
	  documentation:
	    - Syntax error in mapfmt.txi.
	    - Fixed to work with makeinfo program from the Mingw/MSYS
	      distribution which complains if @ref{} and cousins are split over
	      multiple lines.  The following files were affected: rain.txi,
	      snow.txi, 3dsprite.txi, internal/platform/next.txi.
5-Aug-2002
	- Philip Wyett did the following:
	    - Some documentation updates (link updating).
	    - Fixed redefinition of i spotted by groton (in OpenGL).
	- 'res' did the following:
	    - Changed the make targets of all applications to the name of the
	      resulting binary the way Eric Sunshine suggested. e.g. 'walk'
	      becomes 'walktest'.
	    - Did the same for all plugins.
	    - In some cases, the MSVC project differed from the name for all
	      other platforms, changed those.
	    - Flipped the order of the include directories for MSVC resource
	      compiler so the right 'volatile.h' is used.
	    - Added include dirs for resource compiler to msvc7 projects.
	    - Changed imgplex so that initialization will not fail when no
	      image loading plugins are present. this avoids a crash in this
	      case.
	    - Fixed problem with make depend.
	    - Added 'mergeres.sh'. takes a couple of .rc files and
	      merges them, also fixing paths to external files (currently
	      just icons...)
	    - Killed compres.sh
	    - Mergeres is now used by msvcgen and the mingw build process.
	- Peter Amstutz added default aws data files to the debian
	  distribution.
	- Removed CS_GNUC_PRINTF macros with iGraphics2D->PerformExtension()
	  since this doesn't make sense. PerformExtension() doesn't follow
	  printf formatting rules.
	- Avoided several warnings in ogl_g3dcom.cpp.
	- Fixed DrawTriangleMesh() in OpenGL renderer so it no longer crashes
	  if no material is given.
	- Fixed csParser so it will now also copy the token to
	  GetUnknownToken() even if the token is not known.
	- First attempt at making a conversion tool to convert the old
	  style world files to a new XML format. This is unfinished though.
	- Eric Sunshine made these additional changes to msvcgen.mak:
	    - Fixed problem where generated project files were referring to .rc
	      resource in CS/out/mk directory, rather than CS/mk/visualc[7].
	    - Fixed problems with the top-level msvcgen install and clean
	      targets where the MSVCGEN_VERSION was not being correctly set on
	      Unix.  (It probably worked on Windows, though, because shell
	      variables have a different scope on Windows than in Unix.)
	    - Folded out a bunch of common code in the root targets makefile
	      section.  This will reduce future maintenance headaches.
	    - Fixed the global "clean" target so that it works correctly with
	      the merged (msvc + msvc7) msvcgen makefile.
	- Eric Sunshine added apps/import/caltocs to msvcgen/required.mak.
	- Eric Sunshine fixed msvcgen templates so that they provide the
	  resource compiler with sufficient information so that the headers
	  #included by the .rc files can be found.
	- Eric Sunshine fixed mk/msvcgen/win32.mak so that the libcssys project
	  file is once again created correctly following the replacement of
	  DSP.PROJECT.RESOURCES with $(PROJECT.EXE).WINRSRC.
	- Eric Sunshine temporarily disabled msvcgen.mak's use of
	  $(PROJECT.EXE).WINRSRC since it causes problems at build time.  The
	  exact problem is that when WINRSRC points at
	  CS/libs/cssys/win32/rsrc/cs1.rc, the .res file is created in the same
	  directory.  However, at link time, MSVC expects to find the .res file
	  in the buid directory (CS/mk/visualc/csdebug/temp/walktest, for
	  example).  We need to devise a reasonable solution for this problem.
	- Eric Sunshine temporarily disabled use of $(PROJECT.EXE).WINRSRC in
	  win32gcc.mak since it was causing problems for users.  In particular,
	  the Mingw resource compiler wants to know the path to the cs1.ico
	  file from the CS root directory, rather than just the relative path
	  from the CS/libs/cssys/win32/rsrc directory.  This problem is in
	  some fasion related to the problem experienced by MSVC users.  We
	  need a proper solution.
	- Added iXmlNode and iXmlAttribute. These are proposals for the
	  XML interfaces we're going to use in CS.
4-Aug-2002
	- Matthias Braun did the following:
	    - Changed m4 macro name from AM_PATH_CS to AC_PATH_CS to indicate
	      that this macro has nothing to do with automake but only with
	      autoconf.
	    - Gave m4 macro a uniform naming crystal which is more clear.
	- 'res' did the following:
	    - Forgot to commit an OpenGL header.
	    - Temporary fix to msvcgen. disabled .rc generation until we
	      find out how to properly fix it.
	    - Found a reason for the crash of the new DrawTriangleMesh(). 
	      it always passed the pointer of the original triangle data to 
	      glDrawElements() which caused problems when the mesh is clipped
	      and the resulting mesh had less triangles than the original. now
	      it crashes less but isn't bug-free yet. check the sydney level:
	      walk into a sydney and look around.
	    - Merged msvcgen.mak and msvc7gen.mak into one file.
	      Upon msvcgen/msvc7gen the envvar MSVCGEN_VERSION is set
	      to either 6 or 7 and the makefile behaves accordingly.
	    - Added *.rc to .cvsignore.
	    - Added 'nice' descriptions for version info
	      and fixed some makefiles to properly support this (msvcgen).
	- Philip Wyett did the following:
	    - Implemented Effects additions iMaterial here in iso engine.
	- Eric Sunshine made the following changes to mk/msvcgen/msvcgen.mak
	  and msvc7gen.mak:
	    - Fixed numerous bugs in the .rc file generation support code which
	      was recently added.
	    - Once again works with older versions of GNU make.  No longer uses
	      recently added features of GNU make, such as $(if ...).
	    - Now invokes .rc creation shell scripts with $(RUN_SCRIPT) to
	      ensure that it finds the correct shell.  This allows it to once
	      again run on Unix.  (The problem was that the shell scripts do
	      not have execute permission enabled in the CVS repository.  This
	      fix works around that problem.)
	    - Once again works with older versions of sed.  No longer uses
	      advanced sed features.
	    - Fixed comments which became outdated after recent changes.
	    - The "clean" target now cleans only files and directories related
	      to the particular makefile, rather than blasting the entire
	      CS/out/mk directory.
	- Eric Sunshine made the following changes to mk/msvcgen/msvcgen.pl:
	    - Fixed create_project() so that the so-called "dummy file" ends
	      with a line terminator.
	- Eric Sunshine made the following changes to libs/win32/mkverres.sh:
	    - Fixed the composition of FILEVERSION which seemed to be bonked.
	    - Fixed so that it works with older sed programs which do not
	      understand [:digit:].
	    - Fixed quoting problems in sed rules.
	    - Simplified composition of the output .rc file.
	    - Added missing line terminator at end of file.
	- Eric Sunshine made the following changes to libs/win32/compres.sh:
	    - Fixed so that it works with older sed programs which do not
	      understand [:alnum:].
	    - Added missing line terminator at end of file.
3-Aug-2002
	- Matthias Braun did the following:
	    - AWS: fixed EnterKeyPressed signal for AwsTextbox.
	    - Really fixed the aws key problem now, it was needed to have
	      KeyCode and Char in Keyboard events.
	    - Removed debug code I left in awstextcomponent.
	- 'res' did the following:
	    - Version information is generated for MSVC projects.
	    - Small fixes for other version info stuff.
	    - Fixed weird linebreaks in csglext.h.
	    - Changed the way GL exts are detected.
	      Instead of iterating through Video.OpenGL.UseExtension now the
	      extension list from the driver is compared with an internal
	      list of supported extensions. That has the advantage that not
	      only explicitly activated exts are reported, but also supported
	      but deactivated ones.
	    - Changed the way GL exts are initialized.
	      Instead of having a single routine with lots of conditionals
	      a combination of macros and generated source files is used. so
	      instead of having to add/change code in several places it's
	      now sufficient to add a line in a single file and run a script
	      when adding support for a new extension.
	- Philip Wyett fixed something which he shouldn't have had to fix
	  in milk2spr.
	- Philip Wyett implemented fix submitted by Angel Lucas Gonzalez
	  Martinez, which elimenates a possible stack overflow.
	  Added some memory checking to backup the fix (oglg2d.cpp).
	- Added effects system plugin from Anders Stenberg.  Since I have
	  crashes with the OpenGL patches to actually use this system I am not
	  commiting those.  So at this moment the 'effects' plugin is
	  completely unused and unusable until I manage to fix the problem.  I
	  will add more documentaiton about this new system later.
	- I found out what routine is crashing.  It is the new version of
	  DrawTriangleMesh() which seems to give problems in some cases.  As a
	  workaround I just call OldDrawTriangleMesh().  This basically means
	  that the effect system is not yet functional although it is now fully
	  in CVS.  Still have to debug what's wrong with the new implementation
	  of DrawTriangleMesh().  Documentation and extensions to the current
	  loader for the new effects will be added soon.
	- In addition to effects the patch from Anders also adds an OpenGL
	  state cache to the OpenGL canvases.  That should optimize state
	  changes and speed up a little more.
2-Aug-2002
	- Philip Wyett added cslua plugin. Not in build by default.
	- 'res' did the following:
	    - Merged the msvc project generators.
	    - Changed a few msvc6 project options to match their msvc7 cousins:
	      all projects use runtime dll
	      CS_EXTENSIVE_MEMDEBUG defined
	    - Windows resource files are now specified w/ <project>.WINRSRC
	      instead in DSP.<project>.RESOURCES
	    - Fixed some issues w/ ddraw palettes (g2d.cpp).
	    - Changed syntax for use of windows resources again; makefile var
	      is now "$(<project>.EXE).WINRSRC"
	    - Resource files are now used on mingw.
	    - On mingw version information for the dlls/exes is generated.
	- Philip Wyett did the following:
	    - Preparing for a fixed Freetype lib.
	    - Fixed compile errors under MSVC 6 (msmodel.cpp).
	    - Revert of above change with freetype. Will force this fix
	      inside Freetype.
	- Eric Sunshine eliminated several unnecessary, and inadvertently
	  inserted, event dispatch loops from csEventQueue::Process().
	- Steven Geens updated the milk2spr convertor so it also converts
	  the motions (for the motion manager). This works mostly but there
	  are still a few bugs. For example, sometimes there is a 360
	  degree rotation and sometimes it mirrors the model along Y-axis.
1-Aug-2002
	- Philip Wyett made constructor and destructor names match class name
	  (gl-ext).
	- Added == and != operators to compare csRef& and T* instances.
31-Jul-2002
	- Matthias Braun did the following:
	    - Changed Assign function of csRef. It now IncRefes the pointer
	      that it gets.
	     - Added Take function to csRef that takes an already IncReffed
	       object.
	     - Fixed simple1 and simple2 for new API
	- Christopher Nelson added a new function called "CreateSlot()" to
	  the SinkManager. You can use this to create embeddable slots.
	- Thomas H. Hendrick added initial revisions of the vertex manager
	  files (for gl-ext), which are just sketches of vertex buffes
	  that can be used to form triangle strips.
	- Eric Sunshine performed the following tasks.
	    - Changed csutil/ref.h and the csRef smart pointer template as
	      follows:
		o Added a `transfer_ownership' argument to the existing
		  Assign() method which tells Assign() whether or not
		  IncRef() has already been invoked upon the the incoming
		  pointer.  This defaults to false for convenience.
		o Eliminated the Set() method since Assign()'s new
		  transfer_ownership argument made Set() redundant.
		o Added a second Assign() method which accepts a csRef
		  reference. The presence of this method will smooth the
		  path for future API upgrades. For example, if
		  iSector::GetCow() currently returns a pointer to an iCow,
		  then code such as `ref.Assign(sector->GetCow())' will be
		  API-compatible even after GetCow() is upgraded to return a
		  csRef<iCow>.
		o Added an IsValid() method for checking if the referenced
		  object is valid (non-null).  This is semantically equivalent
		  to the existing boolean cast operator, but more explicit.
		o Fixed the boolean cast operator so that it works with
		  compilers which do not have a built-in bool type.
		  Specifically, it now returns (obj != 0), rather than
		  returning (obj).
		o Fixed incorrect include protection macros.
		o Improved class documentation.
	      For all of the curious folk out there, the csRef template _does_
	      work with the NextStep compiler, as predicted.
	    - Fixed incorrect header include protection macros in
	      csutil/refcount.h and improved the class comments.
	- Fixed behaviour of csRef::Assign(). By default it will now
	  transfer owner ship (for pointers) as was intended in the first
	  place.
	- Converted simple2 tutorial to use smart pointers.
	- Fixed csRef::Assign() so it now correctly tests for NULL pointers.
	- Got Yet Another Blender export script from Krishnan Shrikumar
	  <krish@urbyte.com>. This one exports entire levels. You can find
	  it in scripts/blender/sectorexport.
	- Added 'explicit' keyword to csRef constructor which takes a normal
	  pointer so that you cannot misuse the assign anymore.
	- Removed the 'bool' cast for csRef because this was
	  ambigious.
	- Eric Sunshine added csRef::operator=(T*).  Eliminated all Assign()
	  methods since they were subsumed by the equivalent functionality of
	  the assignment operators.  Fixed reference-counting bug in
	  csRef::Take().
	- Added patch from Jochen Moench <jochen.moench@de.thalesgroup.com>
	  to allow SetAction() which will stop the animation after the
	  action has completed. This also modifies iSprite3DState.
	  It is now also possible to include a speed factor for animation.
	- Changed csRef again so that the T* constructor now does IncRef().
	  This means that 'Take()' is the ONLY safe way to convert an
	  old style pointer that has already be IncRef()'ed into a csRef.
30-Jul-2002
	- Matthias Braun did the following:
	    - Even more Cleanups of awsmgr.cpp and awsslot.cpp.
	    - Fixed several memory leaks in aws.
	    - Fixed several refcount errors in aws.
	    - In the end removing windows and Sinks should work cleanly now.
	    - More leak fixes in the aws parser.
	- Daniel Duhprey fixed blender2cs.py so it can export to quads
	  if possible.
	- Philip Wyett did the following:
	    - Fixed dialog window sizes in aws, so things display correctly.
	    - Removed delete, fixing seg fault in simpvs (aws).
	    - Fixed operator ! ambiguity error under MSVC 7.
	      Example...
	        if (!engine) {}
	      replaced with:
	        if (engine == NULL) {}
	    - Plugged 2 memory leaks in demosky.
	- Added simple csRefCount class which does reference counting
	  without the need for iBase.
	- Added csRef class which is a smart pointer class that works
	  with both iBase and csRefCount pointers. Still in testing
	  phase! Thanks to Matze Braun for helping to write this.
	- Converted simple1 tutorial to use smart pointers. Note that I
	  only converted the code and not the documentation.
29-Jul-2002
	- Philip Wyett did the following:
	    - Fixed a bugfix in thing.cpp.
	    - Re-introduced custom memcpy() to fix errors under MSVC 6.
	    - Silenced compiler warning in map2cs.
	- Matthias Braun did the following:
	    - Made aws not crash if it can't find a sink while loading a
	      def file.
	    - Cleaned awsManager a little bit up and fixed a memory leak
	      and a RefCount error.
	    - Added abiltiy to unregisters Sinks from Sink Manager.
	    - Fixed aws compiling under linux: friend bla needs to be friend
	      class bla. Also Removed an unneeded g3d->FinishDraw in the
	      manager.
	- Christopher Nelson committed the patch from Mike Handverger
	  that allows programmatically creating connection nodes in aws.
	- Fixed a memory leak in csThing::PreparePolygonBuffer().
28-Jul-2002
	- Philip Wyett did the following:
	    - Commented and silenced some compiler warnings in various
	      files.
	    - qsqrt () and qisqrt () undefined warnings eliminated.
	      Moved include to qsqrt.h to below include to cssysdef.h
	      (meta.cpp).
	    - Fixed an #if / #elif in gtreeldr.cpp.
27-Jul-2002
	- Philip Wyett Fixed a leak in Blocks during destruction.
	- Added a new blender export script (blender2cs.py) written by
	  John Harger. This one exports to thing mesh factories and puts
	  those in a seperate library.
26-Jul-2002
	- Eric Sunshine fixed problem reported by Reed Hedges
	  <reed@zerohour.net> where aws.mak neglected to install awsdef.zip.
	- Philip Wyett fixed in walktest: In CollisionDetect (); Added
	  DecRef on 'objit', fixing memory leak.
25-Jul-2002
	- Fixed a bug in FORWARD/UPWARD (START command in map files) so
	  that this now actually works. Keep in mind that both FORWARD
	  and UPWARD are relative.
	- Philip Wyett did the following:
	    - Eric helped cull more CS warnings under MSVC via pragma
	      and better do this. This involves reverts of previous fixes
	      and adding cssysdef.h with some new pragmas.
	    - Further to MSVC 7 whining removal.
	    - Added line to required.mak for 'opengl-ext' plugin, so even
	      when 'msvcgen' is run on a windows machine the project file
	      will be generated.
	    - Moved #include "cssysdef.h" to allow it to cull warnings
	      under MSVC 6 (caltocs).
	    - Code cleanup while familiarizing myself with code (glx2d.cpp).
	- Ryan Surkamp created HitBeamOutline functions, should work except
	  for the fact that the object code doesn't do anything to float
	  *pr.  Mainly due to the fact that I don't know what it is.  
	  Left on my todo list is a code cleanup, maybe a debug helper, and
	  lighting (bcterr).
	- Ryan removed box / linesegment test. Worked on hit beams.
	  Still need to do normal creation. Might add a GetInclineNormal
	  for actual collision usage (bcterr). Also fixed a design flaw in
	  csBCTerrObject::FlattenSides ().
	- Ryan made outline object find nearest intersection, not tested
	  (bcterr).
	- Eric Sunshine made the following changes to the MingW/MSYS platform
	  configuration (msys.make and msysconf.sh):
	    - msysconf.sh is now run only once at configuration time, rather
	      than twice.
	    - msysconf.sh now determines whether or not executables and plugins
	      must be linked explicitly against libmingwex.a, which is a new
	      library containing functions such as opendir() (which used to be
	      in libmingw32.a).  Newer interim versions of MingW do not link
	      automatically against this library, so we must do so explicitly.
	    - Fixed problem with msysconf.sh configuration where CC and CXX
	      were not defined, thus all of the tests invoked by this script
	      which required a compiler would fail.
	    - msys.mak will now utilize CS/libs/zlib, CS/libs/libpng, and
	      CS/libs/libjpeg, if present.
	- Eric Sunshine eliminated compilation warnings in ensocket/inet.cpp
	  and wodrv.cpp.
24-Jul-2002
	- Philip Wyett did the following:
	    - Added test for those using pre of GCC 3.1 under Cygwin and  if
	      true will remove -fvtable-thunks which is no longer supported
	      and emits a warning.
	    - Removed MSVC 5 documents. The MSVC 5 compiler is now NOT
	      supported for Crystal Space.
	    - Culled alot of compiler warnings under MSVC 7., some MSVC
	      specific required casts. These are yet to be tested on MSVC 6
	      or other compilers.
	    - Fixed no type compiler error under GCC (bcterr).
	    - Ecapsulated TargetPath with "". Mathew Caspersons indicated
	      as a problem with paths which had whitespace. Manual update
	      of MSVC project files.
	- Daniel Duhprey made csVector3 -> const csVector3& for speed
	  (ODE dynamics plugin).
	- 'res' did the following:
	    - <memory.h> is included for MSVC (to fix unresolved external
	      fast_mem_copy)
	    - Changed slightly the implementation of OS-special VFS vars
	      for Windows.
	- Eric Sunshine corrected the formatting of some makefile help
	  messages.
	- Eric Sunshine introduced the new variable RUN_SCRIPT into the
	  makefile system.  This variable is used to run Bourne-style (Bash)
	  scripts.  Typically, its value is the same as SHELL, but some
	  platforms may need to change it.  For example, on Windows, if SHELL
	  is COMMAND.COM or CMD.EXE, then RUN_SCRIPT may be set to "bash".
	- Philip Wyett updated MSVC_libs to naming of other msvc_libs.
	  This version also features latest Freetype 2.1.2.
	- Ryan Surkamp extended bcterr with some functions for level editors.
	  Changed system lod usage. Fixed materials->IncRef() and DecRef().
	  Added support to change control points at runtime.
23-Jul-2002
	- Both walktest and cslight now support the 'cache:' keyword
	  on the commandline. If this keyword is given then the lightmap
	  and other caches will go to that file instead of the usual
	  map file. This is very useful in combination with multiple
	  levels. You can now say:
	  	walktest flarge room cache:test.zip -recalc
	  which will load flarge and room and then place all cached
	  lightmaps in test.zip. Similar for cslight.
	- The engine will now store 'precalc_info' in the cache manager
	  instead of VFS (as it should have done a long time ago).
	  It is also now called 'lm_precalc_info'.
	- Matthias Braun fixed a warning in aws and disabled RectRegionDebug
	  class because it only gives unresolved symbols on linux.
	- Noah Falk removed background drawing from the bitmap style in AWS.
	- Ryan Surkamp added CorrectSeams support and control point
	  manipulation (to bcterr). Untested until he creates a sample level.
22-Jul-2002
	- Also extended cslight tool with the ability to load multiple
	  maps and thus calculate lighting for all maps together. Note that
	  lightmaps will go to the cache of the last specified level for now.
	- David M. Asbell updated 3D sprites so they look in the direction
	  of the normal associated with the triangle specified in the sprite
	  socket that it is attached to. Also removed some test code and
	  extra csMatrix3 that was not needed.
	- Daniel Duhprey fixed ogl_g3dext.cpp to point to right .h.
	- 'res' did the following:
	    - When doing CS_EXTENSIVE_MEMDEBUG w/ MSVC the crt's
	      built-in memory debugging support for filename/line is used.
	    - CS_EXTENSIVE_MEMDEBUG defined for MSVC 7 debug builds by
	      default.
	    - Fixed a very stupid typo that disbaled the whole MSVC debug
	      stuff (duh!)
	    - Fix so that memdebug.cpp w/ CS_EXTENSIVE_MEMDEBUG actually
	      compiles.
	    - When using MSVC w/ ext. memdebug malloc() will record
	      filename/line as well.
	    - Changed header inclusion in gl-ext so it compiles with MSVC.
	    - MSVC debug: calloc records filename/line now as well.
	    - Fixed a few line endings in caltocs.
	- Ryan Surkamp added a feature to groupmaterial (bcterr).
	- Ryan finally fixed material coordinate bug on edges in bcterr.
	- Ryan also fixed the cpu limiter and edited HeightTestExt.
	- Philip Wyett fixed the gl-ext makefile so it no longer wildcards
	  for .hpp files.
21-Jul-2002
	- Renamed new ogl_g3dext.hpp to ogl_g3dext.h.
	- Added a new feature to walktest. You can now say:
	    walktest room maze sydney
	  and walktest will load all specified levels in memory.
	  Sectors with the same name will be merged (so objects from
	  same-named sectors in different map files will be joined in one
	  sector). You can also define world files that connect to sectors
	  in other world files.  Using this technique you can easily make
	  huge worlds from smaller zip files (easier for artists to manage).
	  One problem at this moment: CS will try to find and recalculate
	  all lightmap information from the last level given on the commandline.
	  So if you do:
	    walktest flarge room
	  it will not be able to load lights from flarge cache but only the
	  lights from room. I will try to find a solution for this later.
	- Thomas H. Hendrick <thomash@users.sourceforge.net> started work
	  on the new OpenGL_ext renderer.
	- Philip Wyett fixed the clean target of the new OpenGL_ext
	  renderer.
	- Noah Falk changed all the awsKey and KeyContainer classes over
	  to use an iXXX equivalent for the public API. This should fix the
	  build problems with awsecomp.h on external apps. Also I fixed
	  awstest to properly set up the engine view component. Finally I
	  added the csRectRegionDebug class and used it to fully debug
	  csRectRegion which had bugs in both Include() and Exclude(). As
	  best I can tell it is now bug-free.
	- Ryan Surkamp added iTerrFunc, and iPolygonMesh (to bcterr). Will be
	  creating a sample level, cleanup code, and get shared lod working
	  correctly again(design change). Still need to create a way to
	  determin max_LOD and use max_LOD. Still not lit. Edited draw
	  function, will be rewriting it soon. Will also be adding visibility
	  culling into the quadtree?
	- 'res' fixed DLLWRAPWRAP under cmd.
20-Jul-2002
	- 'res' added workarounds for crash & weird artifacts with
	  freefont 2.1.2 (maybe someone with a little more knowledge 
	  about freetype than I have should find out the real cause).
	- Philip Wyett encapsulated the recently added crtdbg.h (msvc only
	  header) so it is only read into MSVC compiles (for freefnt2).
	- Philip did a minor fix to make line to invoke FreeType 2 font
	  server correct (data/config/walktest.cfg).
	- Philip updated links to msvc_libs (updated for FreeType 2.1.2).
	- Ryan Surkamp fixed texture coordinates to work with height
	  generated textures. The seems are still bugged but that isn't
	  my plugins fault (bcterr).
	- Ryan also added high level interface for bcterr. Will also be adding
	  iTerrFunc soon to work with Walktest.
	- Ryan added material group support to bcterr and also a feww more
	  collision interfaces.
	- 'res removed the include of crtdbg.h completely (leftover from some
	  debugging I did).
	- Philip Wyett re-ordered close of GLX 2d canvas. This fixes a bug when
	  quitting walktest from fullscreen. This involved the NVidia driver
	  freaking out re-probing and returning you back to the Linux login
	  screen.
19-Jul-2002
	- Got a new tutorial from Hariharan Bhasker. This tutorial
	  shows how to use the csPath class in csgeom to smoothly move
	  an object along a path. This class is also used in csdemo
	  to achieve the smooth movements of the ships in the space
	  demo. In addition to the position of the object, the forward
	  and up vectors are also interpolated by csPath. The tree
	  resulting vectors can then be used with SetOrigin() and
	  LookAt(). The tutorial is also speed independent so that
	  the object will move at the same speed on all hardware.
	- Got a new landscape engine (based on bezier curves) from
	  Ryan Surkamp <deathatsight@yahoo.com>. This engine is still
	  work in progress though but as I have seen the author seems
	  very fast in his development :-)  The new landscape engine
	  can be found in plugins/mesh/bcterr.
	- Fixed a new memory leak in iPluginManager::LoadPlugin() when
	  it would load the same plugin a second time.
	- Philip Wyett fixed include in milk2spr after filename change.
	  Additionally fixed some other compile errors there.
	- Philip also updated .cvsignore to add mng headers from latest
	  msvc_libs.
	- Philip fixed a type and addes tests of new gcvs beta for -m bug
	  fix (documentation).
	- 'res' added .cvsignore for vc7 project files.
	- 'res' fixed an error in the caltocs documentation found by
	  Scott DC <beuja@iinet.net.au>.
	- Ryan Surkamp added collision detection using quadtrees to
	  the bcterr landscape engine (currently unsupported by all apps).
	- Ryan also added HeightTest() function to bcterr interface.
	- Philip Wyett removed entry for 'ggi' canvas from linux.mak.
18-Jul-2002
	- Steven Geens fixed a bad bug in the RAPID collision detection
	  plugin. It now seems to work properly in all cases regardless
	  of the transforms that are given.
	- Jonathan Tarbox suggested a minor optimization in
	  csGraphics2DGLCommon::Write().
	- Added iTerrFuncState::GetHeightFunction() and GetNormalFunction()
	  so that you can retrieve the functions used by the landscape
	  engine.
	- Philip Wyett added jng plugin to MSVC port.
	- 'res' activated dllwrapwrap (to work around that dllwrap bug
	  that symbols in libs aren't exported properly). tested it
	  on win2k with both cmd and bash as shell, works for me.
	- Daniel Duhprey added new group handling to ODE dynamics.
17-Jul-2002
	- Added unittest for RAPID plugin. Extended unittest app so that it
	  calls this unittest. This test now fails but I don't know why.
	  Some help would be helpful here.
	- Added a new version of CreateMeshWrapper() to iEngine. This version
	  is an easy way to make a mesh wrapper directly from the type
	  class id. It will first create a factory and if that factory
	  implements iMeshObject it will return that (useful for things).
	  If that factory doesn't implement iMeshObject it will call
	  NewInstance() and return that new mesh object instead.
	- Added iEngine::CreateThingMesh() which is a conveniance function
	  that will create a thing mesh, place it in a sector, set ZUSE
	  z-buffer mode, and 'object' render priority. It is very similar
	  to CreateSectorWallsMesh() but that will use ZFILL and 'wall'
	  instead.
	- Michael O'Shea suggested a modification in csparser which makes
	  it possible to define a sector in pieces. So if you say SECTOR 'xxx'
	  with 'xxx' a sector that was previously defined you will just
	  add objects to that sector without affecting the previous contents.
	- Changed an snprintf to sprintf in caltocs.
	- Added a new MilkShape to CS/3D sprite convertor to CS. This convertor
	  is actually able to convert skeletal information! It has not been
	  tested a lot though. Thanks to Steven Geens <old_belge@hotmail.com>
	  for making this.
	- Norman Kramer renamed msModel.h to msmodel.h (milk2spr).
	- Daniel Duhprey fixed ODE dynamics plugin to optimize statics
	  so they don't collide (no reason to check it since they will
	  not respond to collision anyway).
16-Jul-2002
	- Brandon Ehle fixed caltocs so it only writes texture coordinates
	  if they are available.
15-Jul-2002
	- Fixed a compiler error in spr3d by rearranging the code a little
	  bit.
	- Temporary fix to frustvis so that all objects are marked visible.
	  This fixes a problem in levels with moving objects. Apparently
	  the kd-tree is not updated correctly. This fix will just mark
	  all objects as visible. Dynavis has the same bug but this hack-fix
	  has not been applied to Dynavis.
	- Reverted all changes to graph2d.cpp made by Noah Falk and
	  Matt Reda. These changes break procedural textures. If you looked
	  at the textured rotating cube in walktest/flarge (main room on
	  the right) then you would see that the procedural texture was
	  not mapped correctly. Please only reapply the clipping changes
	  to graph2d with a correctly functional procedural texture
	  clipping. Side note: last (buggy) revision in CVS was 1.84.
	  I reverted back to version 1.81.
	- Reverted my own reversion of graph2d.cpp. Don't know why it didn't
	  work at first.
	- Philip Wyett fixed a compile error under Linux (SDL).
	- Philip Wyett messed a bit with the star plugin.
	- Daniel Duhprey fixed ODE dynamics plugin to use the grouping
	  advantage of ODE for speedups.
14-Jul-2002
	- David M. Asbell <dasbell@users.sourceforge.net> added support
	  for SpriteSockets, a mechanism for attaching sprites to specific
	  places on other sprites. Also added support for reading and writing
	  sprite sockets in ASCII loader.
	- Daniel Duhprey added a fix to the line collision from John
	  Jarger (ODE dynamics plugin).
	- Matt Reda fixed OpenGL clipping in DrawPixel (for general OpenGL
	  canvas code).
	- Matt also fixed an instance where the clip rect was still being
	  set to (0,0,Width,Height) instead of (0,0,Width-1,Height-1) in
	  common/graph2d.cpp.
	- Peter Amstutz fixed a bug in instantiating a second copy of a textbox
	  in AWS.
	- Noah Falk made fixes to aws embedded components. They should now
	  be usable again. Also added a sample embedded component to awstest
	  to make future testing easier and as a very simple instructive sample.
	- Matt Reda reverted his earlier changes to the clipping rect, but also
	  fixed the calls in csGraphics2D::Resize().
	- Matt fixed two clipping calls in OpenGL's Resize() function.
13-Jul-2002
	- 'res' fixed broken loading of some images in png loader.
	- 'res' also fixed a bug when stripping alpha from paletted images.
12-Jul-2002
	- csPluginManager::LoadPlugin() is now a bit smarter. If a plugin
	  is already on the plugin list it will not add it anymore. So you
	  can now safely do CS_LOAD_PLUGIN multiple times to create multiple
	  instances of the same plugin.
	- 'res' fixed PNG image loader to have better handling of tRNS.
	- Matthias Braun changed Execute prototype in AWS and temporarily
	  added GetThisNode() to iAwsKeyFactory because it is needed for
	  creating external components.
11-Jul-2002
	- Mathew Sutcliffe caused csTime to become useful outside of CSWS
	  by overloading the constructor to allow its parent to be
	  an iEventHandler or an iEventQueue.
	- Daniel Duhprey fixed ODE dynamics plugin to have more robust
	  handling for sharp corners.
	- Noah Falk changed the common canvas clipping code and added some
	  tests to g2dtest. Also made small bug fixes to AWS including
	  frame property, embedded components, some graphical changes
	  for fsBitmap, and making labels not pressable.
10-Jul-2002
	- Further work on levtool.
	- Peter Amstutz added support for converting quaternions to matrices.
	  Fixed bug in matrix to quaternion code, and added methods to convert
	  to/from axis-angle representation from quaternions.
	- Peter also fixed bugs in Normalize(), added Invert() and prototypes
	  for converting to a matrix, and to/from axis-angle representation
	  (quaternions).
	- 'res' did the following:
	    - Added requirement for missing JPEG libs to jngio.mak.
	    - Some fixes to makefiles (jng).
	    - Turned off CMS use in jng.
	    - Vertex normals are now calculated from the 3ds smoothing
	      information. (however this information is not honored. vertex
	      normals are unnecessarily recalculated at a later point.
	      Need to investigate a bit more).
9-Jul-2002
	- DynaVis now correctly does frustum culling in mirrored sectors.
	  Apparently the fix that I did yesterday for FrustVis has the
	  wrong effect for DynaVis. I have no clue why but for the moment
	  Dynavis seems to work for mirrored sectors.
	- Added support for unknown tokens in csParser. If you construct
	  csParser with allow_unknown_tokens equal to true then the parser
	  will no longer consider an unknown token as an error.
	- Optimized csParser by precalculating the length of the strings
	  in the token table. This avoids strlen() at various points during
	  the parsing process. It also avoids actually trying to compare
	  tokens that are not equal. So this could avoid a lot of compares.
	- Started work on a new 'levtool' application. One of the main
	  purposes of this application will be a tool to convert an old-style
	  octree level to Dynavis. But more features will also be
	  added like world file validation and things like that. At this
	  moment this tool doesn't do much.
8-Jul-2002
	- Implemented CastShadows() in Dynavis. Not fully optimal yet
	  (i.e. no culling is actually done except for frustum culling).
	- Removed SupportsShadowCasting() from iVisibilityCuller. Shadow
	  casting is no longer an optional feature. It must be supported
	  by the culler.
	- Fixed a refcount leak on plugin manager in
	  csSector::UseCullerPlugin().
	- The crystalspace.culling.frustvis visibility culler is now the
	  default visibility culler in all cases. This means that a sector
	  will ALWAYS have a visibility culler now.
	- Fixed a bug in the frustum visibility culler. It would not mark
	  an object as visible if you were in the bounding box of that
	  object.
	- There is now better error checking when loading a culling
	  plugin for a sector.
	- Fixed a bug in the sector drawing code when used in combination
	  with a visibility culler and a space-warping portal. In such a
	  case the traversal of the portal could cause the previously
	  calculated vis culling results to be wrong. This is now solved
	  by storing an array of visible objects BEFORE drawing them.
	- The bugfix above also also fixes a bug in the sector drawing code
	  related to the alpha render priority (which will sort objects
	  back to front internally) and the use of space-warping (or mirror)
	  portals. In that case the traversal through the portal would resort
	  the objects on that priority which would mess up the order in the
	  previous recursion level.
	- The bugfix mentioned above involves changing the way the render
	  priority queue works. Now all is sorted at once and then put
	  in one big list.
	- Fixed a bug in FrustVis and DynaVis with regards to frustum
	  culling in case the sector is mirrored (i.e. looking through
	  a mirroring portal). The frustum planes need to be reversed in
	  that case. Seems that DynaVis still has some problems though.
	- Removed csSector::GetVisibleObjects() since that is no longer
	  needed (there is always a culler to do this work now).
	- Brandon Ehle did the following in caltocs:
	    - Fixed a bug regarding windows and mac text .cfg files.
	    - Fixed a bug with GCC that does not include stdc++ by default.
	- Chrisopher Nelson did the following:
	    - Committed fix for an error that was found by Craig Ching.
	    - Committed the changes posted by Andrew Craig. Also fixed
	      my previous fix from Craig Ching.
	    - Added a comment which notes the possible problem noted by
	      Craig Ching and Peter Amstutz.
	- 'res' did the following:
	    - Jng plugin can now save as well.
	    - Gfxtest crashed when image saver plugin returned NULL.
	    - Gfxtest: output filename when saving is now optional.
	    - csMemFile::GetAllData() created a databuffer with the buffer just
	      freed.
	    - Small change in one of the png plugin comments.
7-Jul-2002
	- csSector::GetVisibleObjects() now uses the efficient
	  csIntersect3::BoxFrustum() routine. This also fixes a bug
	  because the old code was actually not always correct.
	- 'res' added image loader for JNG format (JPEG with alpha channel).
	  This uses libmng.
6-Jul-2002
	- Removed -fno-rtti from comptest.sh. So this option will no
	  longer be used from the moment you do 'make linux' again.
4-Jul-2002
	- Received a binary sprite loader/saver from David Asbell
	  <dasbell@yahoo.com>. This sprite 3D loader is roughly equivalent
	  to the ASCII loader but it saves to a binary format instead.
	  Load times using the binary format are a LOT better.
	- David Asbell also extended the viewmesh application so that it
	  can now save 3D sprites to the binary format.
	- Fixed a very weird construction in AWS where the destructor
	  of the superclass was called explicitely like this:
	  	this->super::~super().
	  This causes problems on some compilers and I don't see the
	  need for this either.
	- Added a 3dsMax script for converting 3dsMax levels to Crystal
	  Space. This script is written for 3dsMax version 4 but it may
	  also work with lower versions. This convertor is specifically
	  designed with Dynavis in mind so it will export seperate objects
	  in 3dsMax as seperate objects in CS. Thanks to Luca Pancallo for
	  creating this very useful script!
	- Daniel Duhprey fixed some problems with the mesh colliders in the
	  ODE dynamics plugin.
	- 'res' did the following:
	    - Fixed a crash in CSWS when it was attempting to display
	      empty directories.
	    - When parsing fails (in csParser::GetObject()) *name and
	      *data become NULL (was assumed in some places).
	    - Name and data can be NULL in ase this information is not
	      wanted.
3-Jul-2002
	- Added non-functional iEngine->GetVisibleObjects(). The purpose
	  of this routine will be to return all potentially visible objects
	  from a given position. At this moment this function returns NULL.
	  It still has to be implemented. There are two versions: one accepts
	  a single point and computes visibility in a full 360 degree around
	  that point. The other has a frustum to restrict visibility.
	- Updated the documentation with regards to the SCF _FAST macros
	  that are now removed.
	- Significantly updated the map format documentation. Now it should
	  be about 95% up-to-date. However! Keep in mind that this is ONLY
	  the documentation for the basic map format. It does NOT contain
	  documentation for the loader plugins. This means that everything
	  that is INSIDE a PARAMS block is not documented by this documentation.
	- Matze did some aws cleanups:
		- Reindented some stuff
		- Rewrote some parts of the parser
		- Changed some char* into const char*
		- Changed lots of stuff that used iString* before, but since
		  everyone was using iString* without care (LEAKS!)
		  I changed most of this stuff to const char*
		- Fixed a bug in connection parsing.
	- Daniel Duhprey added a collision callback mechanism to the
	  ODE dynamics plugin.
	- 'res' fixed two parameters of awsParser. They had the same name.
2-Jul-2002
	- Removed an obsolete feature to show the c-buffer in walktest.
	- Removed db_cbuffer console command in walktest.
	- Added iLight->GetFlags().
	- Moved a lot of the Doxygen documentation and also a few
	  constants from the private csLight to iLight.
	- Added iEngine->GetLightIterator() to iterate over all static
	  and pseudo-dynamic lights of the engine (for a given region
	  optionally). Added iLightIterator.
	- Added iEngine->GetFirstDynLight().
	- Removed the old cludgy iEngine->GetCsEngine(). Modified walktest
	  so it no longer needs it (by using the newly added functions
	  above).
	- Fixed a bug in iDynLight->GetNext(). It would actually try to
	  get the iDynLight from a NULL csDynLight pointer.
	- Removed isoldr.h from the plugins dir.
	- Toni reports:
	    Little optimization for DPM.
	    With previous implementation all the lightmap in a FASTMESH
	    superlightmap were recalculated (because a dynamic light could
	    affect the mesh). Now the mesh polybuffer is marked as lightmaps
	    dirty and only when the mesh has dirty lightmaps recalculates the
	    superlightmap.
1-Jul-2002
	- Extended both iShadowCaster and iShadowReceiver with iMovable
	  parameter.
	- Enabled the use of iShadowReceiver instead of iThingState
	  by the lighting routines. csThing now implements iShadowReceiver.
	- Removed RegisterShadowReceiver() (and unregister) from
	  iVisibilityCuller. The culling system will have to detect this
	  on its own by doing SCF_QUERY_INTERFACE.
	- Updated a comment in iPolygon3D::SetMaterial() to indicate a
	  potential problem.
	- Fixed a bug in the octree version of VisTest(box/sphere). It
	  would use the object space bounding box instead of the world
	  space bounding box for testing.
	- Removed the following macros:
	     SCF_QUERY_INTERFACE_FAST
	     CS_GET_CHILD_OBJECT_FAST
	     CS_GET_NAMED_CHILD_OBJECT_FAST
	     CS_GET_FIRST_NAMED_CHILD_OBJECT_FAST
	     SCF_DECLARE_FAST_INTERFACE
	  All SCF macros are now declared automatically as the FAST
	  version (inside SCF_VERSION). So just remove the _FAST
	  and it will be ok.
	  CS_QUERY_REGISTRY and CS_QUERY_REGISTRY_TAG will also benefit
	  from this optimization.
	- Updated apimod96.txi for this change.
	- Mathew Sutcliffe added info on how to implement sliding along
	  walls to the collision detection howto.
30-Jun-2002
	- Thing mesh objects now implement iShadowCaster.
	  csSector::CheckFrustum() will now use that instead of directly
	  going to the thing.
	- Further work on using iShadowCaster instead of iThingState.
	  Also fixed a bug with checking of the flags for enabling
	  and disabling shadows.
	- Philip Wyett did the following:
	    - Added user.cfg to distclean.
	    - Added a line which will expand MSVC post build macros in
	      apps and plugins and copy them to
	      'CS\mk\visualc\post_build_debug.txt'. Could people who are
	      having failures in the post build step copy to 'CS\' root
	      directory please do a debug build and then send me the file
	      'post_build_debug.txt' attached to an email to
	      philipwyett@dsl.pipex.com.
	- Removed user.cfg from distclean again.
	- Norman Kramer reports:
	    Ok, I feel better now 6 hours after the 0:2 defeat to Brazil.
	    Although the german team delivered their best performance Brazil
	    proved how important are the genial soloist. Congrats.
	    Oh btw, I fixed a circular ref counting problem with uv
	    animations.
	- Norman also fixed another missing DecRef() in the loader if the
	  crossbuilder is used and also fixed incref/decref of the window-
	  manager inside the embedded component factory.
29-Jun-2002
	- Removed the dependency on iSector from iShadowBlock and
	  iShadowBlockList. This means that it is now easier to use
	  iShadowBlock outside the engine (i.e. from within Dynavis soon).
28-Jun-2002
	- 'res' made some Doxygen grouping changes and also some changes
	  to the MSVC7 project file generation.
	- 'res' did some changes to compile CS with gcc 3.1:
	    - Replaced alloca()'s with ALLOC_STACK_ARRAY.
	    - Added a typecast in win32 loadlib.cpp.
	- Christopher Nelson did the following:
	    - Button was not hiding properly.
	    - Frame styles were not registered.
	    - Fixed def file to have more pleasing results.
	    - Added a new type "Opaque" to the flexible parameter list.
	- Daniel Duhprey fixed a couple joint issues (looks at rotConstraint
	  for hinges now). Implemented MeshBox and MeshSphere collisions
	  (odedynamics plugin).
27-Jun-2002
	- Eric Sunshine fixed a significant number of problems in the Texinfo
	  source files.  Also eliminated all TeX overfull and underfull 'hbox'
	  warnings.
	- Christopher Nelson committed a huge patch to AWS from Noah Falk.
	  He tried to make sure that the API is mostly the same but there
	  were some modifications that may break code. Specifically the
	  3dengineview is now it's own component. Here is a list of all
	  changes:
	    - awsComponent
		- Added Move, Resize funcs and protected frame. Then dredged
		  through all the other components and (I think) updated all
		  code relating to moving or resizing components.
		- Added all the necessary code to handle being a top level
		  component.
		- Changed component storage from array to linked list like
		  windows.
		- Components have a depth ordering now, needed for things like
		  child windows and even with the array depth was still
		  implicit.
		- Added a few new handlers where I needed to be alerted of
		  certain things.
	    - childHide/childShow/childMove
		- Added window flag which signifies that a component should be
		  treated like a window (so far that just means that the
		  background texture aligns to it, and windows use it to
		  determine if another component with that flag is on top of
		  them to see if they are active). The Window() func now
		  searches using that flag or returns the top level component
		  if it didn't find one.
		- Added non-client flag and client frame. components without
		  the non-client flag are clipped to the client frame while
		  components with it are clipped to the Frame().
		- Gained some stray functionality that only windows use to
		  have like Maximize and FindChild. I'm not sure if maximize
		  really belongs but it has been convenient for the being.
	    - awsPanel
		- Added this class which supports some basic drawing things
		  that many of the components were duplicating code for. It
		  handles backgrounds, styles,overlays, alpha levels, insets,
		  and child clipping. I went through many of the existing
		  widgets and overhauled their drawing code to use panel
		  instead.
	    - aws3dFrame
		- Reworked alot of the code into seperate per-style functions
		  rather than one massive block. I also added some more
		  styles, and some extra versions of the draw function
		  for convenience. It also can make use of a rectRegion now
		  for more optimized drawing.
		- Fixed all the frames to draw according to the def given in
		  csRect which says that lines x = xmax and y=ymax are not
		  part of the rect area.
		- Makes a crude attempt at having a pallete, but at the moment
		  you can set your background drawing color. you could set the
		  others too but I haven't needed to yet so I haven't written
		  the setXXX funcs for them. In the end a nicer pallete
		  approach would be better I think.
	    - awsManager
		- Reworked the draw code, it clips properly at least on the
		  screen canvas. Again the clip rects are set to not include
		  x = Frame().xmax and y =Frame().ymax. Unfortunately due to
		  some discrepancies in the 2d and 3d software clip code lines
		  and pixels are clipped to the inclusive clip region while
		  boxes/pixmaps do not include y = ymax / x = xmax. So right
		  now there are some small gaps where a box or pixmap should
		  be clipped one pixel less. Disabling/enabling the always
		  redraw seems to work properly when I no longer draw the
		  engine in the background. Erasing however is better than it
		  was but I suspect there still might be some lingering errors
		  in the rectRegion code.
		- Reworked all the functions which previously required top
		  level windows, now they work with components.
		- Re-did the event handling routines.
		- Mouse events now go to the lowest level visible component
		  and then proceed up through the parent hierarchy.
		- Mouse focus now cannot go from one component to another
		  without hitting every intermediate component in the tree
		  between them.
		- You can capture the mouse in response to losing mouse
		  focus in which case you don't lose it, focus does not
		  travel further, and the would-be focused component does
		  not get to handle the event. This was very useful for the
		  popup-menus where now the popups can capture focus if the
		  mouse leaves the frame, but still have mouse events
		  delivered normally when the mouse is inside a child
		  component.
		- Keyboard events just go to the keyboard focus, something a
		  little more interesting is probably desirable but I haven't
		  messed around with it yet.
	    - awsPrefMgr
		- Added an extra background fill color to the pallete. This is
		  the color components paint their background (might be
		  different from the fill color but that is what it defaults
		  to if not specified).
	    - awsWindow
		- Stripped away ALOT, all the top level component code went
		  to component. Much of the drawing code has gone to panel
		  and 3dframe.
		- Implemented the controls using actual non-client cmd buttons
		  rather than doing it all inside of window.
		- The title bar displays a bit more nicely now when you
		  shrink the window.
		- The minimum size is a bit more intelligent for resize.
		- You can draw the a gradient title bar if you want by setting
		  a 2nd titlebar color (ala windows).
		- Engine view is now a seperate component.
		- Messed around with the draw code alot so im not sure all
		  the styles/option combinations work exactly like they used
		  to. I have stopped drawing the grip for the time being as
		  it looked funny always getting overdrawn by the interior
		  components (you either have to move the client frame
		  inwards alot to include it or components over-draw it).
		- iAwsWindow is eliminated.
	    - awsTabCtrl
		- This is a more general version of the notebook button bar.
		  You provide captions and it returns sources from the tabs
		  that you can hook up to see when the tabs are gettings
		  pressed.
		- Reworked the notebook to use this tab ctrl instead.
		- I think that has made the notebook button bar obsolete.
	    - awsNotebook
		- While I am thinking of it, I think the deaf flag was only
		  used here but I think is now obsolete as well because of
		  the changes I made in the managers event handling. I can't
		  remember whether I actually removed the SetDeaf() calls
		  though.
	    - awsEngineView
		- Simple little class with a view property, you just set it
		  and thats about it.
	    - awsControlBar
		- A base class that I used to make menu and popups from. You
		  could also use it for toolbars and just about it any other
		  simple layout of components in a row. It can do various
		  things with sizing the children and itself and their are
		  some alignment options.
	    - awsMenu. awsMenuBar, awsPopupMenu, awsMenuEntry, awsMenuBarEntry
		- Bunch of classes for menus. I tried to design the menus so
		  that the actual items which you put in them are minimally
		  restrained. The defaults right now are a bit simplistic but
		  should look nicer with a little more work. Through a little
		  fudging it will work properly if you make a menu bar have
		  children which are menu bar entries, which have children
		  which are popups, which have children which are popup
		  entries, which may then recursively have popup children. I
		  included an example (I think its PopupMenuTest.def) that
		  crudely shows what can be done. The menus still lack a lot
		  of programatic access and support though. The code will also
		  work for standalone popups but you can't create them
		  properly from definitions yet.
	    - Grid bag layout:
		- Changed it so that it would only layout the components that
		  were added as opposed to all children of the owner.
	    - CmdButton:
		- I think I changed the toolbar style to more of what I
		  wanted the toolbar style to look like. The menu bar
		  entries are toolbar style buttons.
		- You can now set state as well as query it.
	    - imageView
		- You can set a color to be drawn, which I used to help me
		  see the system pallete colors. It seems like it would be
		  useful in a color picker too.
	- Christopher did some various fixes later resulting from the huge
	  AWS patch.
	- Duhprey fixed some \r\n problems with the new AWS code.
	- Norman Kramer added default implementations for the new methods
	  in iAwsComponent.
	- Christopher Nelson fixed a few compile problems pointed out by
	  Reed Hedges.
	- Christopher added debug guards so that the mouse status messages
	  don't appear unless you tyrn on the debug flags DEBUG_MANAGER and
	  AWS_COMP_DEBUG in aswcomp.cpp and awsmgr.cpp inversely respective.
	- Norman Kramer fixed odedynam.h: "ode/ode.h" -> <ode/ode.h>
	- Norman replaced SetEnvineView() with SetProperty("view", wview)
	  in awstest.cpp.
	- Norman replaced the NASM flag "-f aoutb CWITH_UNDERSCORE" with
	  the more likely flag "-f elf".
	- Chris Forno updated the Unix platform build instructions.
	- Chris also updated Justin Miller's contributions.
26-Jun-2002
	- Fixed Dynavis so that the 'freeze' visibility feature works
	  again.
	- Justin Miller did a CS-local workaround to prevent int8, uint8,
	  int32, and uint32 conflicts with ODE. Thanks to Eric Sunshine
	  for suggesting the solution.
	- Res did the following:
	    - docs: removed a couple of '\internal's.
	    - docs: added some more grouping.
25-Jun-2002
	- Added howto for a very simple map.
	- Optimized csOBB code a bit and fixed a huge number of rather
	  big memory leaks there. There is still a big bug in OBB code
	  somewhere though. It sometimes crashes with division by zero.
	- Added an (untested) frustum view culler. This culler is a simpler
	  version of Dynavis that will be used as the default culler in
	  the future for all sectors.
	- Added 'frustvis' target to walkall.
	- Added new simple csIndPrint class in csutil which can be used
	  for indented printing.
	- Added temporary debugging code to csOBB to help find a problem
	  there.
	- Found the reason for the csOBB bug but not the correct fix yet.
	  Working around the bug right now seems to work reasonably well.
	- Philip Wyett removed reference to Code Warrior from sysreq.txi
	  as there is no longer a Code Warrior port.
	- Res did some documentation updates.
	- Duhprey fixed obb.cpp for the case where length == 0. This
	  fixes a logic error in the OBB creation.
	- Norman Kramer removed incref/decref of the wmgr in the
	  awsembeddedcomponentfactory since this creates circular
	  dependencies (the factories are increffed and stored by the
	  mgr upon registration).
	- Res fixed plugin.tpl (MSVC7 project file generation): %lflags%
	  and %libs% was swapped in one place.
	- Chris Forno did some documentation updates:
	    - Unified some naming conventions.
	    - Fixed printed output in the first 34 pages of the manual.
	    - Updated documentation contributor list (added myself!).
	    - Removed ambiguous references to 'I' and 'me' in the contributor
	      list.
	- Res did more work on documentation (Doxygen documentation).
24-Jun-2002
	- Mathew Sutcliffe fixed Doxygen comments so iImageIO shows up in
	  pubapi docs.
	- Res did the following:
	    - Attempt to add some missing API documentation.
	    - Moved csEvBind from binder.h to binder.cpp.
	    - Added a pair of parentheses to defintion of CS_ALLOC_STACK_ARRAY.
	    - Moved csEvBind from binder.h to binder.cpp.
	- Chris Forno fixed a broken link in the system requirements
	  documentation.
23-Jun-2002
	- Added csIntersect3::BoxSphere() function which tests intersection
	  between a box and a sphere.
	- Extended iVisibilityCuller interface with two new VisTest()
	  variants that take a bounding box and bounding sphere. These
	  functions will mark all objects visible that intersect
	  with those bounding objects.
	- Implemented Dynavis version of these functions.
	- Implemented octree version of these functions. This implementation
	  is very naive though. It will not use the octree and instead
	  just traverses all objects to test them with the bounding
	  box or sphere.
	- Changed iEngine->GetNearbyObjects() so that it will use the
	  new VisTest(sphere) function if there is a visibility culler.
	  That way GetNearbyObjects() will actually become a lot more
	  useful and faster if a culler is used.
	- Completely rewrote the object iterator in the engine. It was
	  hard to understand and very buggy. The current one is a lot
	  more robust. GetNearbyObjects() now uses this.
	- Walktest collision detection now uses GetNearbyObjects() for
	  a LOT faster moving around now. Especially in large levels that
	  have lots of mesh objects.
	- GetNearbyObjects() now correctly supports portals (it will
	  check if the portal is in the given radius) and then
	  traverse the portal if needed. This does not (yet) work
	  for space warping portals though! This finally fixes the bug
	  when you walk around in the flarge street and you sink through
	  the floor :-)
	- Removed the old csObjectIt class. csObjectListIt replaces it
	  (used by the updated GetNearbyObjects() function).
	- Norman Kramer did the following to AWS:
	    - Windows and their child components are now destroyed if
	      awsmanager goes down.
	    - Fixed bug in slot connection where the sink was not increfed.
	    - Fixed bugs in notebookbuttonbar and scrollbar destructors
	      where some child components were decref'ed twice.
	    - Rewrote awstimer a bit to avoid keeping a reference to the
	      eventqueue which caused some nasty circular rererencing.
22-Jun-2002
	- Fixed a small bug in the adding of operations to a tiled
	  coverage buffer.
	- Fixed a bug with Dynavis: it would crash if an object
	  didn't support a polygon mesh. Fixed this by using AABB
	  instead of OBB in that case.
	- Fixed a bug in Dynavis::IntersectSegment(). The intersection
	  point was not correctly passed to the caller.
	- Fixed a severe memory overwrite bug caused by out of bounds
	  line drawing in the DrawLine function of the tiled
	  coverage buffer.
	- Small changes to Dynavis.
	- Justin Miller fixed FRAME() output generated with 3ds2lev -3.
	- Norman Kramer added an entry for the ODE physics plugin
	  (commented out) to user.mak.
	- Norman added comment where to get ode lib, what version is needed
	  and what changes to the config have to be done.
21-Jun-2002
	- Fixed a bug in csSector::IntersectSegment() (which is used
	  in HitBeam() and other functions like that). Apparently if an
	  octree was used it would test all non-octree objects twice.
	- Added iThingState::IntersectSegment().
	- Implemented IntersectSegment() in Dynavis. It is a fairly
	  optimal implementation that will use the kd-tree for rough
	  front-to-back sorting and it will also test the segment
	  against the bounding box of the kdtree nodes and objects.
	- For reasons totally unknown to me the FindOBB routine suddenly
	  started crashing. So for Dynavis I have no switched to
	  FindOBBAccurate(). This function is slower but it only happens
	  once so that's not a big problem usually. Will investigate later
	  to see what's going on.
	- csSector::IntersectSegment() now uses the culler in general
	  and not only if it is an octree culler. That way all routines
	  that use csSector::IntersectSegment() are now speed up by
	  Dynavis.
	- Some optimizations to Dynavis again.
	- Switched back to FindOBB()... Weird...
	- Mathew Sutcliffe added workaround for freopen() problems in
	  Cygwin.
	- Chris Forno updated more of the directory hierarchy documentation.
	- Chris also updated system requirements documentation.
20-Jun-2002
	- Considerably optimized AppendWriteQueue() in Dynavis. Profiling
	  showed that this is now the function that does most work.
	  The optimization I did makes this function a LOT faster but
	  less accurate meaning that the benefit of the write queue
	  will be less. In future we need to use the OBB instead of the
	  AABB to transform to camera space. That will improve accuracy
	  again without much additional performance cost.
	- Added csOBB class to csgeom. This is a subclass of csBox3
	  representing an oriented bounding box (OBB). Thanks to Daniel
	  Duhprey for making this.
	- Added csOBBFrozen which is a frozen (more optimal) version of
	  csOBB. It will do the transformation once and cache them.
	- Dynavis now uses OBB instead of AABB for the write queue
	  and for test object visibility (TestRectangle). This improves
	  the culling ability of Dynavis considerably.
	- Added csOBBFrozen::ProjectOBB() to project an OBB to a
	  screen space box (similar to csBox3::ProjectBox()).
	- Started work on csVisibilityObjectHistory class. This class
	  contains all history-related visibility information for an
	  object (and in the future also kdtree node). The reason
	  for this seperation is to make it easier later on to redesign
	  this to support multiple camera positions.
	- csVisibilityObjectHistory is now an SCF class so that it can
	  be embedded more generally in the csKDTree.
	- Every tree node also has a history object now. This way history
	  based culling (i.e. marking a node as visible if it was visible
	  previous frame) is now possible. In future this can also be
	  used for VTP (Visible Point Tracking). This optimization improved
	  Dynavis a bit again :-)
	- Increased the time objects are considered visible (for history
	  culling).
	- Justin Miller applied a hinge patch by Duhprey (ODE dynamics).
	- Justin rearranged declarations of index variables in csOBB.
	- Chris Forno updated the resources section of documentation.
	- Justin Miller reports:
	    - Added iDynamicsMoveCallback,
	      iDynamicSystem::CreateDefaultMoveCallback(), and
	      iRigidBody::SetMoveCallback(). The application can now decide how
	      to move body attachments after a dynamics step. Updated physics
	      tutorial to use these.
	    - iDynamicSystem now has a default move callback member instead of
	      CreateDefaultMoveCallback(), and it gives this to all bodies when
	      creating them. The default can be retrieved with
	      GetDefaultMoveCallback().
	    - Updated physics tutorial.
	- Chris Forno updated the feedback section of the documentation.
	- Chris revised the feature set layout and updated some of the
	  directory hierarchy listing.
	- Philip Wyett added C4514 warning to be squashed and hidden by
	  MSVC 6.
19-Jun-2002
	- Clarified an API comment to indicate that the OFTEN moving
	  option for things doesn't work yet.
	- Added 'toggle_freeze' command to Dynavis (assigned to alt-f
	  in BugPlug). This will freeze the current visibility status
	  of all objects. No further visibility testing will occur. If
	  the camera moves the visibility information valid at some
	  point will be unchanged so you can walk around the level
	  and see what is visible and not.
	- Added 'exact_freeze' command to Dynavis (assigned to ctrl-f
	  in BugPlug). This will first compute exact visibility with
	  the (slow) exact visibility culler. Then it will freeze
	  that result. This will give the theoretical maximum performance
	  that a hypothetical zero-cost visibility culler could give.
	  This is the upper limit for Dynavis. Dynavis cannot get faster
	  than that. In order to improve speed further rendering optimizations
	  have to be done like DrawPolygonMesh and so on.
	- Fixed the exact visibility culler in Dynavis so that it actually
	  correctly clips polygons that go out of screen and out of
	  the Z=0 plane. Without this fix the results of the exact
	  visibility culler were actually not relevant.
	- Added an entry to the FAQ about states and mesh wrappers.
	- Added an entry to the FAQ to clarify reference counting.
	- Fixed a bug in the TestRectangle of the tiled coverage buffer. This
	  bug would accidently mark some rectangles as visible even if they
	  were not.
	- Optimized TestRectangle for Dynavis. Profiling shows that the
	  test of rectangle visibility is currently the function that
	  takes most time to calculate.
	- Several additional optimizations on the tiled coverage buffer.
	- Norman Kramer changed fd_mask to fd_maskset due to type naming
	  clash on freebsd (ensocket plugin).
	- Justin Miller added a patch to cspyhton.mak by technorama.
	- Justin added Duhprey's AttachColliderCylinder() to ODE dynamics
	  plugin.
18-Jun-2002
	- Extended iBugPlug interface with functions to setup a debug
	  view. This is a 2D view on which you can render one general
	  object (provided by application or plugin, this is done by
	  implementing iBugPlugRenderObject) and then a set of points
	  and lines.
	- Added 'debugview' command to BugPlug to switch to this view.
	  Assigned alt-s key to this command.
	- Added new 'setup_debugview' Dynavis command which setups the
	  debug view for testing of the tiled coverage buffer. Assigned
	  this command to the 's' key. This command will setup the
	  debug view with three outlines that are rendered on the tiled
	  coverage buffer. It also shows a box which does TestRectangle().
	  If the box is visible you see a small red box in the top-left
	  corner of the display.
	- Extended BugPlug so that you can now drag the points.
	- Implemented the graphical dump of the tiled coverage buffer.
	  This is now used in the setup_debugview command.
	- Optimized the tiled coverage buffer by improving the check
	  if a tile can is full.
	- Fixed a bug where tiles which are full where not marked as
	  dirty even though they have to be marked.
	- Fixed TestRectangle() so it does a smarter test now.
	- Tiled coverage culling starts to work now. Time to optimize
	  a bit :-)
	- Philip Wyett did some mysterious changes to the win32gcc
	  documentation.
	- Justin Miller applied a new patch by Duhprey to allow
	  setting of parameters before attaching body (for iJoin/ODE
	  dynamics plugin). Justin patched physics tutorial so that
	  'j' adds a jointed body.
	- Chris Forno started working on the documentation. He did the
	  first initial updates.
17-Jun-2002
	- Worked further on the tiled coverage buffer in Dynavis.
	- Fixed bug in handling of 'analyze_vis' command in Dynavis.
	- Tiled coverage buffer is still not working properly. Work
	  in progress.
	- Justin Miller added a new feature from GoGi: csString::FormatV()
	  which also takes a va_list.
	- Justin applied a new patch from Duhprey: iJoint interface and
	  implementation.
16-Jun-2002
	- Fixed a bug in csTiledCoverageBuffer::Debug_Dump().
	- Fixed a bug in the tiled coverage buffer. The operations
	  were cleared at the wrong time.
	- While still not completely correct, tiled coverage buffer
	  is starting to work a bit now.
	- Made BugPlug a little bit more friendly by showing a message
	  when it is waiting for a key.
14-Jun-2002
	- Upto now BugPlug has always been a plugin with no own interface.
	  So there was no way to talk with BugPlug. This has now changed.
	  I added the iBugPlug interface. With this interface it will be
	  possible to control various features of BugPlug.
	- Added several commands to enable a new 'debug sector' feature
	  in BugPlug. With this feature a plugin or application can
	  create a sector filled with boxes and triangles. This can be
	  used for debugging purposes. Not all features in this inteface
	  are already implemented. Currently only filled boxes and
	  triangles.
	- Added new 'debugsector' to BugPlug to enable the debug
	  sector view. Assigned to shift-s key. As soon is this mode
	  is active you don't have to press ctrl-d anymore for BugPlug
	  commands. So shift-s is sufficient to exit.
	- Added several 'ds_...' commands to move in the debug sector.
	  Assigned to arrow keys and shift-arrow keys for strafe.
	- Extended Dynavis with a new 'setup_debugsector' command. This
	  command will use BugPlug to set up a debug sector with boxes
	  for all objects. The boxes are colored according to the last
	  visibility result:
	    white=visible
	    green=out frustum
	    dark-gray=invisible because parent kd-tree node is invisible
	    dark-red=invisible because culled with coverage buffer
	  While this mode is active Dynavis will mark all objects as
	  invisible. That means that this mode can run at full speed.
	- In addition to the boxes the view frustum is also shown with
	  transparent colored triangles that fade in the distance.
	- Assigned 'setup_debugsector' to shift-3 key in BugPlug.
	- Some more debugging in Dynavis.
	- Philip Wyett updated links to msvc_libs for MSVC7 to latest
	  version 0.94e.
	- Res did the following:
	    - Removed workaround for bug in mipmap_0... 
	    - Reincarnated the glwin32 window z order hack... but not that
	      ugly anymore.
	    - Added support for image output options. Currently supported by
	      png ang jpg plugins. Options are a comma-separated list and can
	      be either 'option' or 'option=value'.
	      supported options:
		compress=# - image compression, 0..100 higher values give
		smaller files, but take longer to encode or give uglier results.
		progressive - progressive(jpg)/interlaced(png) output.
	      examples:
		compress=50
		progressive,compress=30
	    - Updated gfxtest to support this feature.
	- Justin Miller did an elasticity tweak to the physics tutorial.
13-Jun-2002
	- Fixed ode plugin so that it now calls DeferUpdateLighting()
	  when the object moves so that lighting is calculated. This is
	  not good though. ODE plugin should not move objects on its
	  own but instead call a callback from the application saying
	  to move the object. The application can then choose to
	  decide how exactly to move the object. This includes lighting,
	  moving through another system (i.e. pcmovable in CEL), or
	  even sending movement information over a network.
	- Changed lights in phystut a bit.
	- Further fixes on Dynavis. Doesn't crash now but culls incorrectly.
	- Enabled more plugins in win32gcc.mak since mingw installation
	  now has the needed libraries (or soon will have at least).
	- Started implementing unit tester in the tiled coverage buffer.
	- Implemented TestPoint() in the tiled coverage buffer, doesn't work
	  properly yet. So the unit tester will fail now.
	- Fixed a bug in the tiled coverage buffer.
	- Justin Miller added a simple physics application using iDynamics.
	- Justin tweaked sphere sizes in physics tutorial. Space key creates
	  random objects now.
	- Justin added a time step loop (from Duhprey). Greatly improves
	  the accuracy of the simulation (physics tutorial).
	- Justin fixed/changed: gravity amount, starting position,
	  object velocities, box collider dimensions, collider friction and
	  elasticity values (physics tutorial).
	- Justin then added another less brutal stepping algorithm to
	  physics tutorial.
	- Philip Wyett updated documentation to reflect a new msvc_libs
	  release (version 0.94d).
12-Jun-2002
	- Enabled stencil again in opengl.cfg. For some reason it
	  was disabled.
	- Added first implementation of tiled coverage buffer in Dynavis.
	  Doesn't work at all at the moment so it is disabled by default.
	  If you like segmentation faults you can enable it with the
	  new 'toggle_tiled' command in Dynavis (assigned to '5' in bugplug).
	- A few further fixes on Dynavis. Not enough to avoid crashes.
	- Justin Miller fixed ODE dynamics plugin so that mesh transforms
	  are better set.
11-Jun-2002
	- Philip Wyett added Dynavis back into default build.
	- Justin Miller applied Duhprey's fixed to MakeStatic(). Also
	  inlined GetID() (ODE dynamics plugin).
10-Jun-2002
	- Added an entry to the faq.
9-Jun-2002
	- Eric Sunshine fixed bug reported by Noah Falk <nsf@andrew.cmu.edu>.
	  In the case where csRectRegion::ClipTo() clipped a rectangle
	  completely out of existence, it then failed to clip the immediately
	  following rectangle.  Furthermore, it would access non-existent
	  elements beyond the end of the region list.
	- Matze Braun fixed csrectrg.cpp: someone forgot to declare a
	  variable.
8-Jun-2002
	- Philip Wyett did the following:
	    - Removed Dynavis from CS build until a missing file is
	      committed.
7-Jun-2002
	- Added several entries to the faq.
	- Added new 'analyze_vis' command to Dynavis. This command
	  will first run a new exact visibility culler (a very slow one)
	  and compare the results with the visibility testing of Dynavis.
	  That way the quality of culling (and correctness) can be
	  calculated. Assigned alt-a to this command in BugPlug.
	- Philip Wyett did the following:
	    - Added checkes for GL 1.1. Compilation will stop if
	      'GL_VERSION_1_1' is not defined in gl.h.
6-Jun-2002
	- Changed 'double' to 'float' in OpenGL renderer texture cache.
	- Added 'toggle_queue' command to Dynavis. Assigned this command
	  to '4' in BugPlug.
	- Added csBox2::TestIntersect() and csBox3::TestIntersect(). These
	  functions test if two boxes have an intersection without
	  actually computing the intersection. So it complements the
	  *= operator in csBox2 and csBox3 which actually computes the
	  intersection.
	- Made the first implementation of the write queue in Dynavis. This
	  queue will prevent occlusion writes (which are expensive) unless
	  they are really needed. This seems to work rather well and gives
	  a noticable speed increase.
	- Updated faq.txi with some technical questions and answers.
	- Fixed an error in the collision detection howto.
	- Added new 'origin_z' command to Dynavis. With this command you can
	  change the distance at which the origin is rendered in the debug
	  view. By default this is 50. origin_z can have the following
	  parameters:
	  	origin_z +	(add 1 to z)
		origin_z ++	(add 10 to z)
		origin_z -	(subtract 1 from z)
		origin_z --	(subtract 10 from z)
		origin_z 30.3	(set z to 30.3)
	  Assigned shift-1 to origin_z -- and shift-2 to origin_z ++ in
	  BugPlug.
	- Philip Wyett did the following:
	    - Eliminated some uninitialized variable warnings under MSVC
	      (Dynavis).
5-Jun-2002
	- Thanks to the extensive research and coding efforts of Toni
	  I managed to fix up static lighting so that it gives more correct
	  shadows in most cases.
	- Justin Miller applied Duhprey's MakeStatic()/MakeDynamic() patches
	  to the ODE dynamics plugin.
	- Christopher Nelson added CreateEmbeddableComponentFrom to AWS.
	- Christopher also added some suggestions from Barry R for
	  AWS textbox.
	- Matze Braun replaced the strange aws.log with normal CS reporter.
updated3-Jun-2002
	- Justin Miller updated scf.cfg for ODE dynamics plugin.
2-Jun-2002
	- Justin Miller changed export name of odedynam.cpp to match the
	  plugin name.
1-Jun-2002
	- Res did the following changes to the MSVC7 project files:
	    - All projects now use the runtime dll (apps, libs used the static
	      rt).
	    - Removed unused appgui template.
31-May-2002
	- Implemented a new CLEARSCREEN option in the SETTINGS block. Using
	  this you can force clearing of the screen every frame (this is
	  not done by default). There is also a iEngine::SetClearScreen()
	  function and equivalent. And an Engine.ClearScreen config option.
	- Justin Miller did some fixes on the ODE dynamic plugin:
	  iRigidBody: Added GetProperties(), typo fix in Attach methods.
	- Philip Wyett updated links for msvc_libs for MSVC 5 and 6 which
	  contains a fixed ode.lib. The new version is 0.94c.
30-May-2002
	- Removed support for the XOR buffer in the engine. The XOR buffer
	  is still used in Dynavis. Also removed 'toggle_xorbuf' command
	  in the engine.
	- Unittest application will no longer link statically with engine
	  since the XOR buffer test is removed.
	- Added new iMaterialEngine interface. The material definition of
	  the engine implements this interface (in addition to iMaterial).
	  You can use this to query for the iTextureWrapper's that are used
	  by the material. Keep in mind that not all iMaterial implementations
	  may implement this additional interface.
	- I did a quick run of all annotations that were added to the
	  user documentation and public API reference manual, and I
	  incorporated all useful suggestions, corrections, and clarifications
	  into the real manual.
	- Updated part of the Map2CS documentation that was still using
	  old syntax for map2cs.cfg config file.
	- Philip Wyett did the following:
	    - Updated links to the latest version of msvc_libs.
	    - Added Cygwin build documentation.
	    - Updated msvc_libs links for new 0.94b release.
	    - Added plugins line for new odedynam (physics plugin).
	    - Fixed link problems with GCC compilers. The makefile did
	      not have any knowledge of libode.a or any ode static library.
	    - Removed ugly CS_DEBUG hack for -fs mode. This is not advisable
	      having such code which redefines the z-order in the win32 API.
	      The IDE is visible via ALT + TAB on XP if their is an instance
	      where it is not can people mail me with this instance so I can
	      test.
	    - Minor Fix in oglg2d.cpp. Changed order From:
		ShowWindow();
		UpdateWindow();
	      to more correct:
		UpdateWindow();
		ShowWindow();
29-May-2002
	- Implemented history culling in Dynavis. This means that if an
	  object is visible then it will be kept as visible for a few
	  frames (random). This will avoid testing objects that are most
	  likely visible too much.
	- Added a new 'toggle_history' command in Dynavis to enable/disable
	  this new feature. Assigned to the '3' key in BugPlug.
	- Added a new outline debugging mode. This will render all outlines
	  on screen so you can examine if they are allright. You can go to this
	  mode with BugPlug key shift-v. Note that only the outlines of
	  visible objects are shown.
	- Added several CS_ASSERT's to csgeom and Dynavis to help debugging.
	- Added first version of the ODE based dynamics plugin to CS. This
	  plugin was made by Anders Stenberg. Source code for this plugin
	  can be found in plugins/physics/odedynam. The interface header
	  is in include/ivaria/dynamics.h. Note that there is no makefile
	  yet (and no MSVC project files). I didn't have time to actually
	  make those.
	- Fixed a severe memory overwrite bug in the coverage buffer
	  (InitializePolygonBuffer() function).
	- Fixed a newly introduced bug in the coverage buffer.
	- Corrected line-drawing in the coverage buffer of Dynavis a little.
	- Fixed a significant bug in the outline coverage buffer updating
	  which could cause severe performance degradation in some cases.
	  The problem was that the bounding box used for outline rendering
	  was using uninitialized vertices and so could result in a bounding
	  box that was too big.
	- Res added a makefile for the ode dynamics plugin (untested).
	- Christopher Nelson applied a patch submitted by Marc Haisenko
	  which fixes a bug in radio buttons not being able to tell
	  which one received the click notification.
	- Christopher added two new signals to awsRadioButton:
	  signalRadButtonTurnedOff and signalRadButtonTurnedOn. Now you can
	  easily find out if a radio button is on or off without polling.
	  Simply register for one or both of these signals. Also, these
	  signals ONLY get sent by the radiobutton losing it's on state, and
	  the radio button gaining the on state.
	- Res fixed path for polymesh.h in ODE dynamics plugin.
28-May-2002
	- Fixed visibility culling in Dynavis when the camera was inside
	  the bounding box of an object.
	- Optimized outline visibility writing a bit by avoiding unneeded
	  storage of transformed z coordinate.
	- Changed csPolygonMeshTools::CalculateOutline() so that it returns
	  the used vertices with a bool array instead of the old method.
	  This is more efficient for Dynavis.
	- There seems to be a bug in the KD-tree traversal in some
	  special cases... Need to investigate.
	- Toni reports: Oriol Esteve has done some hacks to try to avoid the
	  opengl shadow bug (lightmaps were misaligned). This code is
	  experimental though. It has been tested in some levels and seems to
	  place the lightmaps correctly and doesn't crash (and well, that's
	  important :). It seems stable, but is still under observation.
	- Res did some fixes to OpenGL/windows and ddraw canvases:
	    - In fullscreen mode glwin32 canvas now behaves the same as 
	      ddraw canvas when the window is deactivated (through alt+tab 
	      or win key).
	    - Window isn't always on top now. there's a method to explicitly
	      cover the task bar mentioned in the Windows Shell docs. Works
	      fine on win2000, what about the other ones?
	    - Added small hack to glwin32 debug build to work around 
	      the problem that in fs mode the app window covers the IDE while
	      debugging.
	    - glwin32 and ddraw canvas now try to set the fs video mode with
	      a display frequency specified in the Video.DisplayFrequency
	      cfgvar. If the modeswitch fails the first time or the
	      cfgvar == 0 the default frequency is used.
	    - Added an #ifdef so the latest ddraw.h isn't needed 
	      (display frequency frequency req. dd7; won't be enabled
	      w/ older with headers).
	- Christopher Nelson added 'State' to SetProperty() for the checkbox
	  and radio-button.
27-May-2002
	- Fixed IsZero() from Toni by using a 'float' precision instead
	  of 'double'.
	- Fixed a bug in the coverage buffer of Dynavis in case the outline
	  has a lot of vertices. Now it automatically adapts the array
	  of vertices.
	- Simplified the coverage buffer a bit by removing support for
	  left/right lines.
	- Polygon insertion into coverage buffer is now also more robust
	  and faster because it doesn't care about left/right lines anymore.
	- Implemented a work-around for csImageFile::MipMap() in case steps
	  is 0 and width or height is 1.
	- Norman Kramer added some (void)funcname to reduce the amount of
	  warnings under MSVC.
	- Res improved level 0 mipmapping of 1 pixel wide images.
26-May-2002
	- Fixed a bug in the KD-tree of Dynavis. It was possible for
	  a split axis to be outside the node bounding box.
	- Made the test on outline radius > instead >=. Otherwise it could
	  happen that the outline was recalculated every frame if radius
	  happened to be 0.
	- Extended the unittest of csKDTree in Dynavis.
	- Philip Wyett eliminated a warning in csimage.cpp (under MSVC).
25-May-2002
	- Fixed a bug in KD-tree of Dynavis which could cause infinite
	  recursion while traversing the tree. Also enabled normal Dynavis
	  processing again.
	- Extended Dynavis 'toggle_coverage' command so that it now has
	  three modes: None, Polygon, and Outline.
	- Norman Kramer added patch submitted by malverian@lockless.dyndns.org
	  (Philip Walls) : Added software cursor drawing, which is available
	  to other canvases (and now svga2d canvas) via the
	  Video.SystemMouseCursor option.
	- Philip Wyett added freefnt2 plugin back into default MSVC build.
24-May-2002
	- Fixed a bug in the handling of the polygon mesh instances in a thing.
	  If they were queried too early they could hold invalid date and
	  the vis system would not know about it.
	- This fix means that Dynavis outline culling finally works :-)
	- Added lots of debug info to Dynavis (making it totally unusable
	  for mere mortals) to help me debug a crash.
	- Toni fixed a little bug in fector3.h: IsZero method compared the
	  components of the vector with 0. Now it has a default float
	  parameter named "precision". Its default value is SMALL_EPSILON
	  (0.000001f), but other values can be passed. As a precondition
	  precision value should be > 0, the test done is
	     ABS(x) < precision && ABS(y) < precision && ABS(z) < precision
	  so if precision value is negative this will return always true.
	  It could be solved typing ABS(precision) but this is not needed if
	  we're careful.
	- Philip Wyett removed SDL canvas and FreeType2 plugins from default
	  MSVC build.
23-May-2002
	- Put back the fflush() in engine.cpp. An fflush() can NEVER
	  cause crashes unless your environment is screwed up a lot.
	- Changed csPolygonMeshTools::CalculateOutline() so that it returns
	  the output edges as sets of vertex indices instead of edge
	  indices.
	- Extended the unit tester for CalculateOutline().
	- Replaced the normals with planes in the csObjectModelManager from
	  Dynavis.
	- Fixed a bug in CS which caused problems with portals that go
	  between sectors that contain static polygon trees. The c-buffer
	  was not cleared properly when the portal was on a mesh that itself
	  doesn't have the static tree.
	- Added support for calculating position dependend outlines in the
	  model manager of Dynavis. As long as the position doesn't move
	  too much with relation to the original model then the outline will
	  also be reused from previous frame.
	- Added support for rendering outlines in the coverage buffer of
	  Dynavis. No support for unit testing yet.
	- Added first version of outline rendering support in Dynavis.
	  Currently not working properly yet.
	- Philip Wyett fixes in OpenGL windows canvas:
	  Removed association between Depth and pfd.cColorBits. This is the
	  most likely cause of corruption some are seeing, because it is
	  ignored by us in setup. This also forced Windows to use the depth of
	  the desktop and stopped setting of depth via config files.
22-May-2002
	- Updated apimod96 for new csParser class.
	- Some minor code cleanup in the new csParser class. It was already
	  formatted rather well though.
	- Fixed python plugin.
	- Added csPolygonMeshTools::CalculateEdges() which will calculate a
	  table of edges for the mesh. Also added a unit tester for this
	  routine to the csgeom unit tester.
	- Added csPolygonMeshTools::CalculatePlanes() function to calculate
	  planes for the mesh.
	- Added csPolygonMeshTools::CheckActiveEdges() function to calculate
	  the activity state of all edges.
	- Added csPolygonMeshTools::CalculateOutline() to create an outline
	  (expressed in 3D) for the given set of edges and planes. Added
	  a unit test to the csgeom unit tester.
	- Res did the following:
	    - Added a missing newline at end of win32.cpp.
	    - Removed an fflush() from engine.cpp which caused crashes.
	    - Removed redundant functions ParseMixmode() from a couple of
	      loaders; iSyntaxService is used instead.
	- Philip Wyett reports:
	    - Added support for MSYS from the MinGW project.
	      To build with MSYS do "make msys MODE=debug" in place of your
	      old method.
	    - Fixed mkdir command in CS so msys can deal with directory
	      creation. Note: This is very hacked and early support and is
	      subject to change.
	- Philip also fixed a link problem in freefnt2. This requires you update
	  to latest msvc_libs 0.94a.
21-May-2002
	- Added include/igeom/polymesh.h to css.h.
	- Fixed bug with csEvCord not calling SCF_CONSTRUCT_IBASE in
	  constructor.
	- Added new iObjectModel interface. This interface represents a
	  generic way to look at some geometry in object space. This
	  is the most generic way to look at a mesh object.
	- Added iMeshObject::GetObjectModel() and added this to all
	  mesh object implementations...
	- Removed iMeshObject::GetShapeNumber(), GetRadius(),
	  GetObjectBoundingBox(), and GetWriteObject() since these are now in
	  GetObjectModel().
	- Removed iVisibilityObject::GetShapeNumber(), GetBoundingBox(),
	  and GetWriteObject(). Replaced with GetObjectModel().
	- Added a new csObjectModelManager to Dynavis. This manager is
	  responsible for managing iObjectModel instances that are registered
	  to it from the engine. The model manager will detect (using a
	  hashmap) that two different objects in the visibility system use
	  the same model and in that case be able to optimize a lot of the
	  calculations (in future the calculation of the OBB and outline
	  can be cached per model instead of per object). At this moment
	  no objects in the engine actually support sharing models yet but
	  this is planned.
	- Added new csPolygonMeshTools class in csgeom. This class will
	  contain functions to work with iPolygonMesh instances. Currently
	  it only contains the CalculateNormals() function which will calculate
	  the normals of all polygons in the mesh.
	- Optimized csPoly3D::ComputeNormal() a bit.
	- csPolyPlane contained a virtual destructor for no particular reason.
	- Polygon perspective projection was doing an additional transform
	  of the camera plane for no particular reason.
	- Implemented backface culling for writing out objects to the
	  coverage buffer in Dynavis.
	- I discovered that meshes rendered with DrawPolygonMesh were
	  still transforming all the vertices to camera space in the engine.
	  This is totally unneeded so I removed that. This should make
	  DPM meshes a little faster again.
	- Philip Wyett added #include "igeom/objmodel.h" to metagen.h
	  for CS_BBOX_NORMAL.
	- Res added msvc7gen to jobber.
	- Res did the following:
	    - Stuffed the parser functions in csutil/parser.h into a class
	      csParser.
	    - Added method csParser* GetParser() to iLoaderContext.
	    - Parse* methods in iSyntaxService require now a csParser*.
	    - Updated loaders.
20-May-2002
	- csThing now implements GetWriteObject(). Currently it will
	  just return the full detail version of the thing. A lower
	  detail version is planned.
	- Dynavis no longer uses iThingState. Instead it uses the
	  write object which is more general.
	- Removed the construct trans1 * trans2.GetInverse() with
	  trans1 / trans2 at various places in the engine and other
	  plugins. This is a considerable implementation as the
	  latter is a lot faster.
	- Philip Wyett added (but disabled until next cs mingw release)
	  "ie3ds" and "freefnt2" (Freetype 2 plugin), these libs are fully
	  supported in the release. Yes, I'm adding these as I go to keep
	  track of what is yet to support. :)
	- Philip Wyett removed Freetype 1 plugin and added Freetype 2
	  plugin to default MSVC build.
	- Norman Kramer replaced freefont with freefont2 and fixed various
	  issues related to this.
	- Res did the following changes:
	    - Changed MSVC project name to 'freefnt2'.
	    - Added command line help for win32 -[no]console.
	    - Window icon is tried to be loaded from <excutable>.ico.
	    - glwin32 supports specification of depth buffer bits through 
	      Video.OpenGL.DepthBits cfgvar.
	    - Added support for AlertV() to win32 canvases (displays a 
	      message box).
	    - g2dtest didn't set the window title.
	- Philip Wyett changed scf.cfg so original odivx plugin is default
	  again for pre 4 content. This is due to the fact it is this plugin
	  which is the only one that consistently works correctly under
	  Windows i.e.  MSVC and yes MinGW. :)
	- Philip added (but disabled until release of new cs mingw) 'csavi'
	  and 'odivx' plugins.
19-May-2002
	- Also added GetWriteObject() function to iMeshObject. The
	  same function in iVisibilityObject will pass control to the
	  GetWriteObject() of iMeshObject. Implementation note: it is
	  possible that two different mesh object instances will return
	  the same polygon mesh. In this case the visibility system
	  can use that to share shape related visibility information
	  for those different mesh objects. One way to implement
	  this from the perspective of the mesh object is to let
	  the factory be responsible for the geometry.
	- Implemented GetWriteObject() in all mesh objects. Current
	  implementation just returns NULL.
	- Implemented GetShapeNumber() in csThing mesh object. This
	  number will be incremented as soon as the geometry of
	  the thing changes.
	- Added PolyMeshHelper class for csThing and put the old
	  iPolygonMesh implementation there.
	- Moved iPolygonMesh interface from include/ivaria to include/igeom.
	- New apimod96 document.
	- Res did the following:
	    - Cleaned up mipmap code a bit:
	      Now there is only 'native' support for level 0 (blurring) and
	      level 1, level 2 and 3 generation weren't used by anything but
	      gfxtest anyway. Mipmap levels >1 are now generated by creating a
	      level 1 mipmap repeatedly. 
	    - Fixed incorrect handling of 1-row/column mipmaps.
	    - Added iImage::Sharpen() and csImageFile::Sharpen().
	    - Software and GL have now options to sharpen mipmaps.
	    - Updated gfxtest.
	- Philip Wyett did the following:
	    - Removed include to now removed "ivaria/polymesh.h"
18-May-2002
	- Fixed a bug in csCoverageBuffer::TestRectangle() with very
	  large boxes that exceed integer accuracy.
	- Extended iVisibilityObject with a GetWriteObject() function
	  which will be used to write the occlusion buffer. Currently
	  not implemented.
	- Philip Wyett did the following:
	    - Removed code files from MVSC howto zip.
	    - Removed redefinitions of ABS and SMALL_EPSILON.
	    - Enabled Minimal Rebuild "/Gm" in MSVC7 project files.
	    - Enabled Browse Information "/FR", under debug builds.
17-May-2002
	- Added csBox3::CalculatePointSegment() which calculates the
	  segment (between 0 and 27) of a point relative to the box.
	- Added csBox3::ProjectBox() which projects a 3D box to 2D
	  given a transform.
	- The Dynavis ProjectBBox routine is now replaced with the new
	  ProjectBox() function. We should look in the rest of CS to
	  see if we can replace it there too...
	- Added new blender export script (scripts/blender/csexp223.py).
	  Thanks to Yvon Tanguy <tanguy13@bst.bsf.alcatel.fr>.
	- Res did the following changes:
	    - Ambient color can now be specified in a world file's SETTINGS
	      block.
	    - Very dark lightmaps are now possible.
	    - Enhanced csLoader::ParseColor(): can now accept 1 or 3 input
	      values.
	    - Added version of csLoader::ParseColor() which returns csColor.
	    - Fixed wrong resetting of ambient color.
	    - MAXLIGHTMAPSIZE can now have either 1 or 2 parameters.
16-May-2002
	- Added a very efficient AABB/frustum intersection tester which
	  has an associated clipmask to avoid testing planes that are no
	  longer active. Thanks to Ville Miettinen from Hybrid Graphics
	  for giving this algorithm to me. The routine is
	  csIntersect3::BoxFrustum().
	- Implemented frustum culling in Dynavis with BoxFrustum().
	- Also enabled frustum culling for individual objects.
	- Added timing statistics to the debug view of Dynavis so that
	  we can see how many time is spent in the culling part versus
	  the rendering part.
	- Dynavis now implements the 'toggle_frustum' command so you can
	  toggle on/off frustum culling. The '1' key in Bugplug is
	  assigned to that command by default.
	- Dynavis now implements 'cycle_view' command so you can cycle
	  between different debug views. Currently two views are supported:
	  statistics only or statistics + outline overlay. By default
	  shift-v is assigned to this command in Bugplug.
	- Added a new view mode for cycle_view (Dynavis) which clears
	  the screen first.
	- Dynavis now implements the 'toggle_coverage' command so you can
	  toggle on/off coverage culling (not implemented yet). The '2' key
	  in Bugplug is assigned to that command by default.
	- Dynavis now implements 'clear_stats' command to clear all statistics.
	  The ctrl-v command in bugplug is assigned to that command by default.
	- Implement the first primitive and slow version of coverage culling.
	- Dynavis now implements 'dump_state' command to dump all vis
	  culling operations that happen during the next frame. This flag
	  will immediatelly be cleared again after one dump.
	  The alt-v command in bugplug is assigned to that command by default.
	- Coverage buffer in Dynavis now also supports a textual dump of
	  the current coverage tree content.
	- Fixed a bug in csCoverageBuffer::TestRectangle() which caused
	  problems with boxes partially outside the view.
	- Dynavis basically works now. However enabling it currently slows
	  down as compared to not doing visibility culling. This is
	  totally expected as the current way to update the coverage buffer
	  is VERY bad (individual polygons) and defeats the entire purpose
	  of culling. Here is where the real work starts :-)
	- Res fixed incorrect handling of lightmaps with cell size <8
	  (software renderer).
	- Res fixed visual artifacts occuring on very dark lightmaps
	  (software renderer).
	- Philip Wyett removed cfg related stuff from the unittest makefile
	  as this application has no config files and it is causing
	  make install problems.
15-May-2002
	- Fixed a bad bug in csKDTree::Front2Back().
	- Fixed a bug in the bounding box insertion in the KD-tree.
	  The bounding boxes were not transformed correctly to world space.
	- This fixes view frustum culling in Dynavis.
	- Fixed the graphical debug view of Dynavis again.
14-May-2002
	- Improved the visual debugger for Dynavis.
	- Started work on actually implementing frustum culling in Dynavis.
	- Norman Kramer changed aws: for windows he added BackgroundSubrect
	  and OverlaySubrect to specify a subrectangle of the texture to use
	  for drawing if window has fsBitmap style.
	- Wyatt Miler fixed plugin.txi.
13-May-2002
	- Fixed a bug in the csCoverageBuffer.
	- Small optimization to csCoverageBuffer::TestRectangle().
	- Added notion of parent to csKDTree nodes.
	- Using that parent I optimized csKDTree so that when moving
	  an object the object is moved upwards in the tree to the best
	  fitting node (so that it can later be distributed downwards
	  again).
	- Dynavis also supports graphical dump now (using iDebugHelper).
	- Enhanced Bugplug with two new commands: visculview and visculcmd.
	  The first command will enable/disable tracking of a visibility
	  culler in the current sector. With the second command you can
	  send commands to the specific visibility culler. By default
	  the 'v' key is assigned to 'visculview'.
	- Fixed a bug in Dynavis::RegisterVisObject(). It was not correctly
	  adding the visibility object to its internal list.
	- Implemented unfinished support for graphical dumping in
	  Dynavis.
	- Matze Braun fixed case of GL includes in OpenGL windows canvas.
	- Matze Braun added hack to walktest to solve the collision detection
	  problems. We just don't allow being in a wall after a move now.
	- Res updated some comments in the msvc7gen.mak makefile. Also
	  changed name of output directories.
	- Res did a couple of changes ot MSVC7 project file generation so the
	  projects better match their MSVC6 counterparts.
	- Res fixed a grammatical error in csloader.cpp.
	- Res changed redirection when disabling console output from
	  "debug.txt" to "<application name>.txt" (ie "walktest.txt").
	- Christian Bayle added support for HPPA and M68K in arch.sh.
	- Christian also updated the Debian scripts.
12-May-2002
	- Res fixed MSVC project file generator for version MSVC7.
	- Res also did:
	    - Couple of fixes for HTML Help support.
	    - Added new make target 'chmsupp'.
	    - Added a short text how to create documentation in HTML
	      Help format.
11-May-2002
	- Norman Kramer did the following:
	    - Removed include of strvec.h and util.h from several
	      mesh loader plugins, both were no longer needed - thanks to
	      j5t who spotted this.
	    - Added Jorrit's plugin howto from the mailing list.
	- Res added MSVC project file generator for version MSVC7.
10-May-2002
	- Matze Braun added a unix/linux section on 'howto setting CRYSTAL var'.
	- Philip Wyett updated links to ssh in the wincvs documentation.
	- Philip added ddraw.lib to it's makefile and removed refs to
	  ddraw.lib and zlib.lib from the MSVC project file templates. Now it
	  will not appear that projects like vfs.dll link with these two
	  libs. :)
9-May-2002
	- Philip Wyett added a HOWTO on creating the CRYSTAL enviroment
	  variable at the request of other CS developers as some folks don't
	  seem to know howto do it. I have done the Windows ones. Others may
	  wish to fill in the currently blank sections for Linux and Mac OSX? ;)
8-May-2002
	- Fixed a few bugs in csCoverageBuffer::TestPolygon() and
	  InsertPolygon(). Added a few additional tests to the unit tester.
	- Implemented csCoverageBuffer::TestRectangle() and added
	  extensive tests for that routine to the unit tester.
	- Implemented csCoverageBuffer::TestPoint() and added
	  extensive tests for that routine to the unit tester.
	- The Dynavis now implements VERY basic visibility culling.
	  It used the kdtree for traversal and will cull octree nodes
	  against the view frustum. But that's all for now. This is also
	  untested.
	- Added new CULLERP command in a sector. With this command you can
	  associate to a sector a visibility culler from a plugin instead
	  of from a mesh (with the CULLER command).
7-May-2002
	- Implemented csKDTree::RemoveObject().
	- Added lazy obj_bbox calculation in csKDTree. This is useful
	  so that we don't immediatelly have to recalculate the
	  obj_bbox when objects are removed.
	- Fixed a bad bug in the existing low-level csKDTree::RemoveObject().
	- Implemented an efficient csKDTree::MoveObject(). This function
	  only does RemoveObject/AddObject if it cannot resolve the move
	  more efficiently (by checking if it remains in the current
	  leafs after moving).
	- Changed the meaning of obj_bbox (and csKDTree::GetObjectBBox()).
	  It now represents only the bounding box of all objects in this
	  node and not the children.
	- Added csDepthBuffer class to the Dynavis plugin. This will
	  implement the depth buffer. The Dynavis unit tester will also
	  call UnitTest on the depth buffer. The depth buffer is not
	  yet functional though.
	- Added csCoverageBuffer class to the Dynavis plugin. This is a
	  full copy of the current csXORBuffer which is in the engine.
	  In addition the csCoverageBuffer will also maintain a maximum
	  depth value for every 8x8 pixels.
	  This will replace the csDepthBuffer that hasn't even been
	  finished yet :-)
	- Removed csDepthBuffer class again. csCoverageBuffer is not finished
	  yet.
6-May-2002
	- Added csBox2::SetMin/SetMax and csBox3::SetMin/SetMax functions.
	- Renamed csKDTree::tree_bbox to obj_bbox and added a node_bbox
	  member too. So now for every node we have a bounding box of
	  all objects that are in the node (this bbox may exceed actual
	  node dimensions because objects are not clipped by the tree),
	  and we also have a bounding box of the node itself which is
	  made by cutting an infinite box at the root with all the axis
	  planes during tree creation.
	- Fixed the comment with csIntersect3::BoxSegment().
	- Added csGeomDebugHelper class in csgeom library. This class
	  implements iDebugHelper and is responsible for unit testing in
	  the csgeom library. Unittest app will also call UnitTest() on it.
	  Currently this unit tester only contains a few tests for
	  csIntersect3::BoxSegment().
	- Fixed a bad bug in the csKDTree again. In some cases it would
	  generate an infinite tree (memory allowing :-)
	- Added more extensive unit testing for Front2Back() in csKDTree
	  implementation. Now UnitTest() tries to test that Front2Back()
	  is really front 2 back.
	- Implemented Benchmark() in iDebugHelper implementation
	  of csKDTree and Dynavis plugin.
	- Norman Kramer did the following to AWS:
	    - Update AWS documentation (added doc for notebook, ...).
	    - Added stylesheet to convert designer 2.0 output (from QT3)
	      to aws.
	    - Changed the property values for barcharts framestyle slightly
	      bcsXXX now is bcfsXXX. This brings naming in line with other
	      controls framestyle values.
	    - Added the wrong qt3aws xsl file and even there I included
	      another bug :)
	    - Added comment on when to use qt2aws.xsl and qt3aws.xsl.
5-May-2002
	- Matze Braun fixed a mistmatching new/free in moddata.h.
	- Matze changed Normans name a bit to make my xslt processor more
	  happy. Probably the correct fix would be choosing the right
	  language but I have no idea how to do that.
	- Norman Kramer did the following to AWS:
	    - Added description for awsImageView, awsMultilineEdit,
	      awsScrollBar, awsTextBox. Extended description of the other
	      controls.
	    - Two methods were void but still tried to return the value of
	      another void method, which some compilers seem to dislike a bit.
	    - Prefixed all attributes with 'me'.
	    - Added QTextView translation to Multiline Edit.
4-May-2002
	- Norman Kramer did the following to AWS:
	    - Added a multi-line edit control for AWS.
	    - Added two new actions to multi line edit control: GetText
	      and SetText.
	    - Removed a few structures from awsmled.h which were meant for
	      another control.
3-May-2002
	- Implemented delayed processing in the KD-tree. This means that
	  when objects are added they are not automatically distributed
	  to lower levels then. This happens later when really needed. This
	  greatly increases efficiency of the generated tree as more
	  information is available at the time you really want the tree
	  to be generated. It is also more optimal as tree generation
	  will be done less and more gradually as needed.
	- Added a way to print statistics of the generated tree in
	  the textual dump of the KD-tree.
	- Extended the UnitTest() function of the KD-tree to print
	  statistics about various stages of the process.
	- Made adding objects to a KD-tree node more efficient by
	  increasing growth rate of internal vector for storing objects.
	- Uses 'int' instead of 'float' for calculating quality for the
	  KD-tree splitting algorithm.
	- Implemented Front2Back() traversal of the tree.
	- Matze Braun fixed compile error on ia64 (ensocket).
	- Matze also fixed a wrong delete in oss sound driver.
	- Matze fixed uninitialized memory reported by valgrind.
	- Matze did some preparation for my oss driver fix: removed some
	  unneeded global variables.
2-May-2002
	- Removed a warning in win32.cpp.
	- Enabled console in debug mode again for Windows. I think that
	  when you are debugging you certainly want to have that console.
	- Added iDebugHelper implementation of Dynavis plugin.
	- Added new csKDTree class to the Dynavis plugin. This class will
	  manage the geometrical distribution of objects in 3D space.
	  At this moment the class only supports adding objects. It will
	  not try to reorganize the tree if the quality of the tree starts
	  degrading.
	- Added UnitTest() implementation of csKDTree for the current
	  supported operations.
	- csKDTree also supports textual dump and state test. Also
	  changed Dynavis plugin to prepare for the situation in the future
	  where it will delegate textual dump and state test to the
	  csKDTree instance it is maintaining.
	- Christian Bayle added comments in package description of Debian
	  scripts.
1-May-2002
	- Philip Wyett changed MAX_SCANCODE so it can at least read Num Lock
	  out 0x5a (90). Removed Jorrits temp fix. Apps should now not
	  crash when built with MingW which was the only way I could
	  reproduce the bug. Note: Some work needs to be done with keys and
	  remapping under Windows as there are some Virtual Key issues which
          not harmful but need addressing.
	- Philip did some fixes to win32.cpp.
	- Res added quotes around textures and filenames in world file
	  (map2cs).
30-Apr-2002
	- Added a new iDebugHelper interface in iutil. This interface defines
	  a consistant interface for debugging CS modules. It has the following
	  features (all features are optional so some module doesn't have
	  to implement them all):
	    - Unit testing: this is basically an extensive test of the module
	      to ensure it is working properly.
	    - State testing: this is a consistency check that can be used
	      at run-time to ensure the current state of the object is
	      consistent.
	    - Benchmark: runs a benchmark for this module.
	    - Text dump: allows for a text-based dump of the internal
	      state of the object.
	    - Graphical dump: allows for a single-frame graphical dump
	      of the internal state of the object.
	    - Sending specific debug commands to a module. This way a
	      module can implement additional commands (string based) to
	      enable or otherwise perform additional debugging operations.
	- Implemented iDebugHelper in csXORBuffer. The debug helper of
	  csXORBuffer implements unit testing, benchmarking, and
	  graphical dump.
	- Cleaned up the unittest application a bit. It also uses the
	  new iDebugHelper interface now.
	- The unit tester is already useful. It showed a bug with certain
	  kinds of polygons in the XOR buffer. Fixed now.
	- Fixed a crash bug in the XOR buffer with polygons that are
	  completely out of bounds of the buffer.
	- Modified the engine to implement iDebugHelper and removed
	  the ad-hoc iEngine::DebugCommand(). The debug helper of the engine
	  currently only supports DebugCommand() though.
	- Fixed BugPlug for the DebugCommand() change in the engine.
	- Added new 'enginestate' command to BugPlug. This will call the
	  iDebugHelper::StateTest() function of the engine and report
	  the results. Assigned shift-e to this command by default.
	- Applied a patch from Peter Amstutz <amstutz@cs.umass.edu> so that
	  the 3DS importer correctly honors the double-sided triangle flag.
	  In that case the CS model will have double triangles (one for
	  every side).
	- Thanks to the debugging help of Toni Asco Gonzalez I managed to fix
	  a rather big bug in the lighting routines (more specifically
	  in iSector::CheckFrustum()). The problem was csShadowIterator
	  which is supposed to iterate over all shadows. Every seperate thing
	  will cause a seperate shadow block in the shadow list. The
	  shadow iterator will iterate over these shadows in the shadow block
	  list. To do that it will internally iterate over shadow blocks.
	  However it could happen that a block containing no shadows
	  got added to the shadow list. The iterator would fail in this case
	  because it would stop processing further shadow blocks.
	- Fixed a bad bug in the Windows key processing routines. Pressing
	  numpad keys (most frequently '7') could cause CS to crash
	  horribly. This happens in ALL CS apps. At this moment I only
	  avoided the crash by adding a test for this but I'm not sure if
	  this is the good patch actually. The problem is at line 781 of
	  libs/cssys/win32/win32.cpp.
	- Added empty skeleton of the new 'dynavis' plugin. This plugin
	  will contain the implementation of the new dynamic visibility
	  system.
	- Fixed CS_DBGHELP_UNITTTEST and removed one 'T' :-)
	- unittest app will also call UnitTest() on engine (not supported
	  right now) and new dynavis plugin (also not supported).
	- Philip Wyett reports:
	    - Debug console now not shown by default in MSVC debug builds. To
	      see debug console use "-console" commandline switch. You will
	      now notice if you do this from the commandline i.e. "command"
	      or "cmd" output will be now fed back to the calling console and
	      not generate a new console window anymore.
	    - Now use only use "appcon" in makefiles for "DSP.APP_NAME.TYPE = ".
	      Use of "appgui" is now deprecated for MSVC project files.
	      Note: "appgui" "appcon" should be removed from MVSC project file
	      generation and replaced with just "app" as a generic option.
	    - Manually modified MSVC project files.
	    - Updated MSVC external project HOWTO.
	  It is advised MSVC do a clean build after updating from cvs.
29-Apr-2002
	- Eric Sunshine renamed OSXDelegate2D_CGBLit.h to
	  OSXDelegate2D_CGBlit.h (notice the case distinction) so that #include
	  "OSXDelegate2D_CGBlit.h" will work correctly on UFS filesystems which
	  are case-sensitive.  (This was not an issue for HFS+ filesystems
	  since they are case-insensitive.)
28-Apr-2002
	- Fixed another initialization bug in the OpenGL renderer found
	  by valgrind.
	- Fixed an initialization bug in csThing::IntersectSegmentFull()
	  which could cause crashes with a bit of bad luck.
	- Norman Kamer added Robs patch for unbreaking unlooped streamed sound.
27-Apr-2002
	- Worked around a bug in the mipmapping code in csImage. When
	  mipmapping is called for one dimension equal to 1 the routine
	  reads to unallocated memory. I don't really understand
	  mipmap.inc very well so I currently just worked around this
	  bug. This needs more investigation. Thanks to Matze's valgrind
	  debugging for discovering this bug.
	- Fixed a few bugs in the OpenGL renderer where some queue variables
	  were not initialized. Thanks to Matze's valgrind debugging
	  for discovering this bug.
	- Philip Wyett fixed unittest MSVC project file. This file was being
	  generated into a Win32 GUI app rather than the correct Win32 Console
	  app.
	- Philip changed links which pointed to old "linuxgames.com" site and
	  pointed them to the new homepage at SourceForge (SF).
	  Thanks to Jim Sager for spotting this error in the docs.
26-Apr-2002
	- Fixed a bad bug in the XOR buffer which could cause memory
	  overwrites. A nice side effect of fixing this bug is that it is
	  now also more optimal :-)
	- Fixed another bug in the XOR buffer.
	- Added a csXORBuffer::Debug_UnitTest() function which tries to do
	  a full test of the XOR buffer to see that it is working to
	  expectations.
	- Added a new 'unittest' application. The purpose of this application
	  is to contain tests that are useful to be repeated at any time
	  in the future too. i.e. these tests serve to test importants
	  part of CS. If a test ever fails something went wrong so we can
	  quickly detect that. At this moment this test program is non
	  graphical and only calls csXORBuffer::Debug_UnitTest().
	- Added a few more test to csXORBuffer::Debug_UnitTest().
	- Again improved performance of the XOR buffer by only clearing
	  the part of the polygon buffer that will actually be needed.
	  This optimization brings the performance of the XOR buffer
	  rather close to the c-buffer now.
	- Modified 3ds2lev so that the triangle combiner is more robust.
	  It now detects better if two triangles are on same plane
	  and also checks if resulting polygon is convex.
	- Philip Wyett fixed a bug in awstex.h: changed the second 'key_r'
	  value to 'key_b'.
	- Matze Braun added a new option to 3ds2lev that let's you choose
	  between nice looking and fast loading maps.
25-Apr-2002
	- Removed the 'togglecull' and 'togglexor' commands from BugPlug.
	  Instead added the ability to have arguments with bugplug commands
	  and added the more general 'enginecmd' command. The first argument
	  after 'enginecmd' will be given to engine->DebugCommand().
	  In data/config/bugplug.cfg defined x as 'enginecmd toggle_xorbuf'
	  and ctrl-c as 'enginecmd toggle_cullstat'.
	- 'toggle_cullstat' will now show the percentage of the complete
	  octree bounding box that is visible.
	- Extended XOR buffer so it will now make inserted polygons a little
	  bit wider while tested polygons are original size. This increases
	  chance of good culling.
	- XOR buffer will now also correctly render the last row of the
	  polygon. It was not doing that before which caused visibility
	  culling to ignore many good opportunities.
	- Optimized the XOR buffer to use the 2D bounding box of the polygon
	  for doing the XOR sweep. This gives a big boost in speed. Still
	  slower compared to c-buffer.
	- Norman Kramer did the following to aws:
	    - Added "Image" key to imageview, which has a vfs path to an image
	      as argument.
	    - Added "KeyColor" key to imageview, which defines a key color
	      for the "Image"
	    - Added fsScaled, fsTiled and fsFixed as styles to imageview,
	      which define if the image is scaled,tiled or at its fixed size
	      inside the imageview.
	    - Extended the bison file to make components aware of RGB entries.
	    - Added GetTexture (..., r,g,b) to iAwsPrefManager that
	      additionally gives keycolors.
24-Apr-2002
	- Norman disabled output of 'Texture: ""' for the pixmap button since
	  the path isnt stored in the ui file (theres the actual bitmap data
	  stored instead. To get the name of the texture in the output write
	  'l:Texture: "blah"' in the whatsThis property.
	- Norman added awsImageView to the registration of common components.
	  Doh, and i was wondering why it never showed up.
23-Apr-2002
	- Fixed parsing of FILE keyword in texture parsing so it also
	  works with quotes.
	- csScanStr() also accepts '-' for %s now (if no quotes are given).
	- Continued work on XOR buffer. It now seems to work properly.
	  I added several debugging utilities. One of those is
	  Debug_ExtensiveTest() which randomly generates triangles and fills
	  them in the XOR buffer. It then checks if the resulting buffer
	  has values in the last column. If all goes well this should never
	  happen unless the polygon drawer has leaks. After 10000000 random
	  triangles it failed to find a single leak.
	  So csXORBuffer::DrawPolygon() now correctly implements polygon
	  drawing in both directions (clockwise/anti-clockwise) and clipping.
	  There is still much room for optimization. I will first get things
	  working.
	- Implemented InsertPolygon() and TestPolygon() in XOR buffer.
	- Started supporting XOR buffer in engine. Now we'll be able to test
	  performance and see if the XOR buffer is a suitable replacement
	  for the c-buffer.
	- Added iEngine::DebugCommand(). With this new method debugging
	  commands can be performed in the engine. BugPlug can use this to
	  perform certain debug options. At this moment the only supported
	  command is 'toggle_xorbuf' which will toggle between c-buffer
	  and XOR buffer.
	- Bugplug now supports new 'togglexor' command (by default assigned
	  to 'x' key).
	- First performance results indicate that the c-buffer is still
	  a lot faster. However, there is still considerable room for
	  optimizations in the XOR buffer. Also keep in mind that even if
	  the XOR buffer turns out to be slower I still will need it for
	  the real dynamic PVS algorithms because the c-buffer cannot
	  cope with non-convex outlines.
	- Added support for printing out culling efficiency (polygons,
	  nodes, and objects). Only enabled in debug mode.
	- Added 'toggle_cullstat' command (for iEngine::DebugCommand())
	  to toggle the printing of this culling statistics.
	- Added new 'togglecull' command to bugplug which will execute
	  the toggle_cullstat command. Assigned to ctrl-c key.
	- Added csXORBuffer::IsFull() which checks if the entire screen
	  buffer is full and nothing can be visible now. Always returns
	  false at the moment.
	- Implemented csXORBuffer::IsFull(). Also added an optimization
	  to ignore completely full rows in InsertPolygon() and TestPolygon().
	  This significantly improves performance of the XOR buffer but
	  still not as good as the c-buffer.
	- Matze Braun fixed 3ds2lev, it wasn't putting '' around
	  texturefilenames which leaded to corrupted maps if the filename
	  contained special chars.
	- Norman Kramer added a param member to awsListItem. Here you can
	  store additional information you do not want to display but connect
	  with that item like record ids for instance or pointers etc. You
	  transfer them via the param%d entries in the awsParmList.
22-Apr-2002
	- Norman Kramer did the following for aws:
	    - Removed the implementation of awsEmbeddedComponents HandleEvent
	      and replaced it with a call to the embedded components
	      HandleEvent. If you build a new control from ground up using
	      this embedding component technique you can now look up the
	      component factory of awsComponent and that you let create an
	      awsComponent which you can embedd (this implements exactly the
	      HandleEvent which was implemented here before).
	    - Filled the formerly empty Create method of awsComponentFactory
	      to create an awsComponent.
	    - Registered the awsComponentFactory with awsManager.
	    - Ok, so calling the handleevent of the embedded component was
	      a stupid move, why does nobody complain ? :)
	      Put back in the original plus the handling of OnFrameStart as
	      an "excuse me".
21-Apr-2002
	- Norman Kramer did the following for aws:
	    - Aws listbox: the already present 'selectable' property of
	      listrows is now respected when rows are selected.
	    - Added support for declaring use of your own aws controls.
	    - Added documentation on how to use your own control classes
	      and still laying them out in QT designer.
	    - Moved the class type modifier from the tooltip/comment into
	      whatsThis property where the connect and literal special effects
	      already are. Class type token identifier is 't'.
	    - On Initialization the embedded component is now IncRef'ed since
	      it's DecRef'ed at destruction (only decref what you incref).
	    - Added all the missing methods since iAwsComponent has changed a
	      lot.
	    - Made the wmgr in the factory protected, so subclasses can use it.
	    - Removed the pure virtualization of the OnBlah methods and added
	      default implementations (calling the method on the embedded
	      component) - this makes it easy for instance to embedd an
	      awsLabel object in your instance of a derived class of
	      awsEmbeddedComponent and just override the methods you need.
20-Apr-2002
	- Norman Kramer did the following for aws:
	    - Fixes for awsListBox:
		- GetSelectedItem now checks if theres any selected item
		  at all .
		- DeleteItem updates selection if the deleted item was also
		  the selected one.
		- DoFindItem now looks up the iString with FindKey, previously
		  the call to Find compared the iString with a awsListRow.
	    - awsListRowVector:
		- The Compare and CompareKey methods now call strcmp instead
		  of iString::Compare, because iString::Compare returns a
		  bool (if they were not equal false would be returned and
		  with false defined as 0, the "not equal" would be
		  reinterpreted as equal for the csVector's Find algorithm).
	    - Added signals for windows being Zoomed, Minimized, Closed and
	      the broadcasting of these signals.
	    - Added GetItems method to aws listbox for requesting selected
	      data from a specific row. This is now used by GetSelectedItem
	      and a new GetItem method.
19-Apr-2002
	- Philip Wyett temporarily removed the use of precompiled headers
	  for MSVC compile.
18-Apr-2002
	- Norman Kramer reports: components received mouseentry/exit messages
	  even if they was deaf. this caused the problems with controls in
	  notebook pages (for instance buttons never broadcasted
	  signalCmdButtonClicked signals) (aws).
17-Apr-2002
	- Started working on new XOR buffer which *might* (if all goes
	  well) replace the c-buffer. Nothing functional yet though.
	- Continued the work. The basic polygon filler (based on XOR
	  fill) appears to work now.
	- Philip Wyett updated the ensocket plugin with patches from Erik
	  Namtvedt (removed Set(), added doxygen comments, general cleanup).
16-Apr-2002
	- Minor fix to inet.h: friend csNetworkSocket2 is now
	  'friend class csNetworkSocket2'.
	- Christian Bayle fixed a stupid mistake in the Debian scripts.
	- Norman Kramer says: Richard Liu reported compilation failure
	  since solaris has munmap declared slightly different. I added
	  #ifdef OS_SOLARIS to get around that (mmiounix.h).
	- Philip Wyett added LGPL copyrights and did some minor code
	  cleaning (ensocket plugin).
15-Apr-2002
	- Disabled the use of DrawPolygonMultiTexture() in OpenGL renderer
	  even if multi-texture is enabled. DrawPolygonMultiTexture() is
	  obsolete and cannot correctly support super lightmaps. It should
	  never be used. I leave the code in cvs for now as a reference
	  for future multi-texture implementations.
	- Enabled multi-texture again in GeForce specific OpenGL configuration.
	- Removed the fix in csTextureTrans::compute_texture_space() I added
	  yesterday. Instead uses __volatile__ keyword with the asm
	  statements for qsqrt() and qisqrt(). This forces the compiler to
	  keep the code intact which seems to avoid the bug with
	  qisqrt() reported yesterday. I also did a small benchmark to see
	  if adding __volatile__ has a bad effect and I didn't notice an
	  obvious speed decrease. Thanks to Matt Reda for suggesting
	  the __volatile__ keyword.
	- Norman Kramer replaced two new occurences of static csClipInfo
	  blah[100] with the CS_STATIC_* macros and magically it does no
	  longer segfault at exit in walktest (OpenGL renderer).
	- Christopher Nelson added GetError() for awsSink so that you can
	  tell if the last operation caused an error. Also updated
	  definitions with new error codes and added GetError() to the
	  interface.
	- Matt Reda added __volatile__ to PowerPC asm stuff and changed
	  asm to __asm__.
14-Apr-2002
	- In one version of csTextureTrans::compute_texture_space()
	  there were two calls to qisqrt() (equivalent to 1/sqrt()).
	  With gcc 2.96 on linux and optimize -O2 compile the second
	  qisqrt() would fail unless the first one is replaced with
	  1/qsqrt() (debug mode and -O are fine). I have no idea
	  why this is. For now I just replaced the first qisqrt()
	  with 1/qsqrt() but this needs further investigation.
	- Philip Wyett improved MSVC memcpy replacement to handle 'short'
	  more efficiently.
	- Philip also eliminated some minor MSVC compiler warnings in
	  3ds2lev.
	- Matze Braun updated 3ds2lev so that it doesn't crash anymore
	  for empty objects and outputs starting points.
	- Res did the following:
	    - Lightmap mean lighting now includes pseudo-dynamic lights.
	    - OpenGL: translucent polygons are lit by dynamic lights in
	      single-texture mode.
	- Christian Bayle changed size_t in socklen_t (for inet.h) to
	  allow compile on ia64 and s390.
	- Christian also did some changes to the debian files.
	- Norman Kramer fixed aws: lookup for window definition looped
	  forever if def is not present. The double linked list is a
	  circular list.
13-Apr-2002
	- Reverted my csconfig fix again. It fails to generate a correct
	  csconfig file.
	- Philip Wyett fixed bug in win32 GL canvas. Our canvas was not being
	  set topmost, which allowed the desktop/taskbar to leak through and
	  become viewable while GL test were being performed and making things
	  look not too good at all.
	- Res changed OpenGL windows canvas to only set topmost in
	  fullscreen mode.
	- Matze Braun updated todo_1.0.txt.
	- Philip Wyett did the following for OpenGL windows canvas:
	    - Reorganized how/where window styles are handled.
	    - Also cleaned up the code a bit. Bringing it back into line with
	      CS coding standard.
12-Apr-2002
	- Added a fix to 'make csconfig' so that it also works on Win98
	  now. The problem was that redirecting to out/csconfig.tmp works
	  on Win2K and higher but not on Win98 (forward slashes).
	- Fixed a small waste of memory in an internal array of the
	  OpenGL renderer.
	- Philip Wyett fixed ensocket plugin so that it compiles with Win32
	  GCC.
	- Res added a comment about GetArray() in garray.h.
	- Res additionally made some OpenGL related changes:
	    - Disabled multitexturing in glnvgf.cfg.
	    - Fixed garbled metablobs.
	    - Fixed some transparency issues.
	    - A couple of visual errors w/ multitexturing magically
	      disappeared after adding a 'glEnable (GL_TEXTURE_2D)' ...
	    - Queues are flushed before drawing a multitex'ed poly; eliminates
	      some errors, too.
	- Res also fixed software renderer to avoid unwanted holes on
	  keycolored textures and dark lightmap.
11-Apr-2002
	- Replaced /bin/sh to sh in the csconf.mak makefile. Many mingw
	  installations don't have /bin/sh. So using 'sh' is preferable.
	- Reverted my change above. It is not THAT easy.
	- Philip Wyett added "ensocket" network plugin, docs and test
	  app submitted by Erik Namtvedt.
		This is a System independent network driver. This driver
		implements a tcp/ip networking interface. The network driver
		and socket driver currently support BSD compliant calls.
	  Note: Some operating systems may not support all the functions of
	  this plugin.
	- Norman fixed the net ensocket plugin a bit.
	- Philip fixed an 8.3 filename issue pointed out by Norman.
	- Res did the following on Map2CS:
	    - Added "png" to the list of extensions searched in zips.
	    - Default RENDERPRIORITIES() are written to world.
	    - Added facility to set a thing's priority: add an entity
	      property "priority", value: <renderpriority>
	    - Added facility to manually specify files for texures: add a
	      map property "filename_<texture>", value: <vfs path>
	    - When a texture from a wad3 has a name starting with '{' its
	      keycolor is set to blue.
	- Res also modified flarge:
	    - Added two 2d sprites, one with alpha transparency.
	    - Added alpha transparency snow.
	- Res made some changes to OpenGL windows canvas. SetMouseCursor()
	  now uses iWin32Assistant's SetCursor() (like ddraw dir). This
	  fixes the 'always visible mouse cursor' issue in gl. Res then
	  updated walktest so that mouse cursor is hidden in freelook mode.
	- Norman replaced stricmp with strcasecmp.
	- Norman renamed nettut target to netut to avoid circular makefile
	  dependency on unix/linux.
	- Christian Bayle modified arch.sh to add support for s390.
	- Christian did some changes to the debian files.
	- Norman Kramer indented the netut, joylins, ensocket, freefnt2, and
	  odivx4 helplines in the makefile.
10-Apr-2002
	- Philip Wyett fixed a compile error under CodeWarrior 5 for
	  awsscrbr.h.
9-Apr-2002
	- Toni did some modifications to allow DrawPolygonMesh (OpenGL version)
	  to render non-lit meshes.
	- Res tweaked displaying of keycolored textures a bit in OpenGL
	  renderer.
	- Res also did:
	    - Maximum lightmap size can be changed by user.
	    - Added iEngine::ResetWorldSpecificSettings() which reset a subset
	      of flags/settings (which may differ from one world/map to
	      another) to its defaults.
	    - Added functions to get default values for above subset of
	      flags/settings.
	    - When loading a map:
		- Engine->ResetWorldSpecificSettings() is called.
		- map.cfg isn't read any more.
		- Added to SETTINGS():
		    - LIGHTMAPCELLSIZE
		    - MAXLIGHTMAPSIZE
	- Norman Kramer fixed scrollbar knob size calculation in AWS. Also
	  the value of the knob now is between 0 and max-amntvis.
	- Norman removed setting of max value for scrollbar from the listbox'
	  OnDraw method - scrollbars idea of Max value is the count of items,
	  not the Max value its "value" member can have - this is something I
	  could clear later on :)
	- Matze Braun added an != operator to csString.
8-Apr-2002
	- Release of CS 0.94.
	- Philip Wyett updated links to latest 0.94 msvc_libs.
	- Res did the following change:
	  lightmap size check, once more:
	    - Lightmap size can not exceed a (for now) hardcoded limit of
	      256x256. If it does, lighting is disabled for the poly.
	    - Renderer is asked if it can handle this lightmap. if not,
	      poly will be rendered unlit, but lighting is still calculated.
	    - In both cases, notifications are emitted as well.
	- Christopher Nelson fixed awsecomp.h so that it is valid again.
	  Also made some fixes to support the awsecomp.h update.
7-Apr-2002
	- Norman Kramer fixed OpenGL renderer because
	  clipped_lightmap_fog_texel was accessed wrong.
	- Philip Wyett added MSVC #pragma to remove warning C4390 on
	  DEBUG_BREAK. Also added newer msvc_libs files to cvsignore.
	- Philip also updated AWS documentation as follows:
	  Removed aws->SetDefaultContext(engine, myG3D->GetTextureManager());
	  and replaced with the correct canvas creation code, which I cannot
	  be bothered nor have the time to list. :)
	  Thanks to "vrm" from #CrystalSpace for reporting the error this
	  problem created.
5-Apr-2002
	- Andon M. Coleman patched 3ds2lev so it works correctly for
	  non-texture mapped 3DS objects.
4-Apr-2002
	- Cleaned up lots of engine/csgeom comments.
	- Removed lots of exit() calls from all over CS. A module in CS
	  should almost never do exit but instead return an appropriate
	  error to the caller (using the reporter and a return code for
	  example).
	- Philip Wyett did the following:
	    - Fixed precedance under MSVC (lexan.cpp).
	    - Phyztest: Removed Text which prompts for <ENTER> to add an
	      Impulse Spring object as the object does not exist.
	    - Phyztest: Changed <DEL> to <DELETE> in text for adding chain
	      object. It is not the num pad <DEL> which creates the object and
	      was confusing. Well it initially confused me anyway. :)
	    - Code format cleanup in demosky.cpp.
3-Apr-2002
	- Added a texture-less material (green_color) to flarge so that
	  we can easily see if this still works or not. The skeletal
	  spiny tree uses this color.
	- Implemented caching of sprite normals (using SMOOTH()) option.
	  This greatly speeds up load time of a sprite when the cached
	  data is present.
	- 'res' fixed a bug in the OpenGL renderer where sometimes
	  textures where multiplied with texture mean color. This caused
	  color seams.
2-Apr-2002
	- Eric Sunshine fixed a problem which caused a host of HTML pages in
	  the user manual to be blank.  The culprit was a missing closing brace
	  '}' for an @emph directive in msdos.txi.
	- Eric Sunshine fixed formatting of the help message for memory.mak and
	  isoload.mak.
	- Eric Sunshine fixed chkogl.sh so that it no longer yells at people if
	  they don't have OpenGL installed.  There is no valid reason for
	  yelling at and confusing people just because an optional component is
	  absent.
	- Fixed curved surfaces so that they render again after Norman
	  removed the call to GetBezierCache().
	- Eric Sunshine eliminated several overfull and underfull `hbox'
	  warnings reported by TeX for msdos.txi and qtaws.txi.
	- Temporarily disabled the experimental quaddiv in the landscape
	  engine again because there seem to be some problems with it.
	- Changed csBezier2 constructor to a static 'Initialize()' function.
	- MD5 name generation for lightmaps/cache now uses the name
	  of the mesh wrapper and containing sector to guarantee more
	  uniqueness. Previously the name of the csThing itself was used
	  but this is almost always NULL.
	- Fixed description of -n in 3ds2lev so it is now correct.
	- Optimized the MergeNormals() code of 3D sprites (SMOOTH option).
	- Wouter Wijngaards added a ReplaceAge() function in the
	  emitter particle system API.
31-Mar-2002
	- Christian Bayle added $MACHINE error message for not found arch.
30-Mar-2002
	- Matze Braun fixed a bug that prevented going to edit mode in
	  csdemo...
	- Norman Kramer did the following:
	    - Fixed a crasher - in DrawPolygonSingleTexture was a case
	      where lm_queue was not checked to own the data (reproducable
	      crasher by running few times through the fountain in flarge).
	    - Removed a printf ("dang\n") in gl extensions detection routine.
	    - Fixed destruction of csSuperLightMap.
29-Mar-2002
	- Norman Kramer reports: csEmitFixed now exposes the implemented
	  iEmitFixed interface, hinted by Florian Vielhauer <FloViel@web.de>.
	- Norman extended the static variable declaration macros with an
	  _ARRAY version that differs in the destruction process only (that
	  caused the opengl renderer to crash at exit - at least this was one
	  reason).
	- Norman extended OpenGL renderer so it uses the new _ARRAY static
	  var declaration macro.
	- Norman fixed several warnings in the OpenGL renderer.
	- Wouter Wijngaards reports: Optimized terrfunc quaddiv tree drawing;
	  for me it is now more than twice as fast as it was. It is still
	  slower than the terrfunc original, as it does not cache the normals
	  generated.
	- Wouter also reports: This commit has quaddiv_enabled=true; so that
	  the new quadtree based terrain LOD is enabled by default. The FPS
	  is now the same as the fps with it disabled, for me.
	- Philip Wyett reports:
	  Fixed Windows Procedure callbacks which were causing initial
	  crasher of simpvs under Windows. The Window(s) will now
	  successfully create however there are still many issues to be
	  resolved i.e.
	    - Two windows - No destruction of parent.
	    - GL not rendering textures corectly under simpvs under Windows.
	    - Linux lockup issues.
	  Work is progressing... ;)
28-Mar-2002
	- Reverted part of 'res' changes to the lightmap checker because
	  they cause big problems.
	- Toni Asco Gonzalez commited a big patch to a new version of
	  DrawPolygonMesh for OpenGL:
	  To use DrawPolygonMesh just type FASTMESH() inside PARAMS section
	  of a thing. This will use a faster way to render a thing. This
	  optimization is especially good for high polygon models that
	  are not too big (in 3D dimensions). At this moment it is not
	  possible to combine FASTMESH() with VISTREE(). i.e. the thing
	  that is responsible for visibility culling cannot use FASTMESH().
	  Keep in mind also that clipping these objects is expensive. That's
	  why they should be as small as possible (but with high number
	  of polygons).
	  Another limitation is that FASTMESH() currently only works on
	  lit objects (i.e. with lightmaps).
	- Fixed the software version of DrawPolygonMesh() so it correctly
	  sets do_fullbright to false before calling DrawPolygon. This
	  bug would cause the stairs in flarge sometimes to be full
	  bright.
	- Applied a patch from Loic Dachary for improved diagnostics
	  when loading plugins (findlib.cpp).
	- Norman Kramer updated Dos port again. Also updated build
	  instructions.
27-Mar-2002
	- Preparation for release 0.94. Updated version numbers.
	- Norman Kramer reports: awsSource and awsSlot were never
	  SCF_CONSTRUCT'ed. This caused the crash in awsTimer for
	  instance (by clicking the scrollbar handle twice).
	- Norman Kramer reports: slparse.cpp.h is now named slp.hpp. This is
	  because on dos slparse.cpp.h would be too long and not valid due to
	  the two "." in the filename. Beside this djgpp version of bison
	  creates a .hpp file. If you have a better idea how to come around
	  this (some magic bison options ?) let me know.
	- Norman removed debug output from awsTimer.
	- Norman added djgpp versions for csGetTicks and csSleep.
	- Norman fixed the embedded eventhandler in the djgpp port so that
	  it is now constructed. simple1 and simpcd work now compiled
	  in static mode.
	- 'res' fixed crash bug when relighting polygons with lightmaps
	  the renderer can't handle.
	- 'res' also made sure that lighting for a polygon is always
	  calculated even if the renderer can't handle the lightmap.
	- 'res' fixed an infinite recursion in null2d canvas.
	- Matze fixed 3ds2lev optimization so it works better now.
26-Mar-2002
	- Matze added a farplane command to walktest. This command set's a
	  farplane to the camera (surprise, surprise).
	- Norman Kramer renamed multiplex to iplex due to filename limits.
25-Mar-2002
	- Matze Braun let the parser return -1 for now. This is still
	  better than bogus values.
	- Matze changed lib loading to display errors returned by the OS
	  again.
	- Christian Bayle did various changes to the Debian scripts.
24-Mar-2002
	- Matze checked in some of his 3ds2lev changes in, the face
	  optimisation is disabled by default because it still fails on
	  some levels... I hope I can find the bug that causes this soon...
	- Matze made the syntax loader outputting the name of the polygon in
	  error cases...  The real problem I have here is that the line
	  numbers are totally wrong because the parser keeps them as a static
	  variable (that isn't shared cross plugins of course), so the real
	  solution is to rewrite the parser as an object (and eventually add
	  support for compiled tokens to it to make it faster...).
	- Matze did a very small optimization for key parsing (suggested
	  by Vengeance <keith@paqrat.com>).
	- Norman Kramer did the following:
	    - The 'relevant' member in csShadowFrustum was used
	      uninitialized.
	    - 'lighted_particles' in fountain was used uninitialized.
	    - csHazeLayers were not freed.
	    - Closed leak in debug.cpp.
	    - csSprite3DMeshObject's lod_level_config was used uninitialized
	      and is now set to its factory value when SetFactory() is
	      called.
	    - Metaballs num_mesh_vertices was used uninitialized.
	    - csSkelLimbStates 'name' was not freed at destruction.
	    - 'output_connectors' in gtreeldr.cpp was destructed in the
	      constructor. I just moved it into the destructor.
	    - Software renderer protex3d.cpp: decref'ed image used for
	      palette synchronization.
	    - simplept: added missing decref of the image used for the proc
	      texture.
	    - Set cam_move_src in blocks to 0,0,0. It was used uninitialized.
	    - csCommandLineOptionVector did not free its content at
	      destruction.
	    - Walktest: plugin_mgr was not decref'ed.
	    - Walktest: added some more decref'ing.
	    - Input console: lines array was not freed.
	- 'res' fixed three small texinfo syntax errors.
23-Mar-2002
	- Fixed a bug in the patch from Loic which prevented CS
	  from properly working if CRYSTAL var is unset and if
	  so files from current dir are being loaded (linux).
	- Additionally removed the 'stat' test completely for finding
	  out if a library can be loaded. 'stat' and 'csLoadLibrary'
	  are not compatible so 'stat' cannot be used to test if
	  'csLoadLibrary' will work or not.
22-Mar-2002
	- Fixed a bug in the calculation of LOD for sprites. This
	  bug could cause crashes due to an array access at -1.
	  Thanks to Norman for reporting this.
	- Added a patch from Loic Dachary <loic@gnu.org> to give more
	  detailed error messages when plugins can't be loaded. This
	  way it is easier to see what is wrong.
	- Replaced DLERROR with WARNING while loading a plugin because
	  failure to load a plugin is not always an error (for example
	  for the sound and image multiplexers).
	- 'res' added function to iGraphics3D so that the engine can
	  check if a renderer can handle a lightmap. Provided implementation
	  in OpenGL/Software versions.
	- 'res' modified engine so it now checks if the renderer can handle
	  the lightmap.
	- 'res' also replaced some printfs() in the engine with Report().
	- Christopher Nelson did the following to terrbig:
	    - Small update to allow public setting of materials list.
	    - Made another modification to the materials list. Now it makes a
	      copy of the list, rather than just assuming control of the
	      passed in pointer.
	    - Started adding in mapping and material list functions.
	    - Moved RGBVector to it's own file in include/csutil (csRGBVector).
	    - Modified the materials list location, turned the map into
	      a sorted vector vs. an unsorted one for fast searching during
	      the map build process.
	- Norman Kramer added dummy implementation of IsLightmapOk to
	  aws iGraphics3D implementation.
	- Mathew Sutcliffe created reversible form of csHashMap which can
	  find a key from a value as well as the value from a key.
21-Mar-2002
	- Norman Kramer fixed simpcd so that the csColliderWrapper is now
	  released.
	- Norman also initialized color in partgen to black. It was
	  used uninitialized.
20-Mar-2002
	- Philip Wyett did an update to the MSVC documentation:
	  Update to msvc_libs:
	  Note: This is for developers building the bleeding edge cvs code
	  or recent cvs snapshots with either MSVC 5, 6 or 7.
	- 'res' did some changes to the software renderer: added some
	  scanprocs for alpha/keycolor and alpha/alphamap combos. Also
	  fixed two alpha-related crash bugs.
	- Mathew Sutcliffe did a little docs fix to binder.h.
	- Matze Braun fixed a small bug in the key definition parser.
19-Mar-2002
	- Decreased maximum size of lightmaps for software renderer
	  again. 16mil is WAY too much as that will not fit in the
	  texture cache. Now it is set to 2mil which is still two times
	  as big as it was before.
	- Matze Braun improved the 3ds2lev writer.
	- Matze did 3ds2lev optimization part one: removing double vertices.
	- Matze moved mmap functions outside csosdefs.h into mmiounix.h.
	- 'res' reverted his own alpha changes from yesterday.
	- Christopher Nelson did a small fix to mmapio.h that can cause
	  strange linking problems when all the software mmapio is not
	  included, but the header is.
	- Christopher created default and convenience constructor for
	  csTriangle. This makes code much prettier and less onerious when
	  using CS_GROWABLE_ARRAYS.
	- Christopher made a bunch of modifications to terrbig that should
	  let the system render to a 3D mesh much easier. Additionally,
	  texture coordinates are now generated, built factory for the object,
	  and added some necessary member variables to get the factory to
	  work.
	- Christopher Nelson additionally did the following to terrbig:
	    - Created triangle queues so that, for each material there is
	      a set of triangles that pertain to that material. Textures are
	      mapped on block level, so if sub-blocks have different textures
	      the texture will be ignored unless that sub-block is expanded
	      to it's full resolution. This occurs recursively for all blocks.  
  	    - Created sets of meshes in case I have to setup different
	      properties for each material. For the moment all meshes are
	      equivalent except for their triangle list.  
	      Note: I still haven't figured out how to tell the engine what
	      material I want drawn on the triangles. G3dTriangleMesh doesn't
	      appear to have the ability to do this, so I'll keep
	      investigating. Also, if someone who knows what they're doing
	      better than me can look at the draw pipeline in
	      csBigTerrainObject::Draw and see if I even have the right idea,
	      that would be great.
	    - Discovered where to set the material.
	- 'res' added render priority for explosion particles in walktest.
	- 'res' increased upper limit for lit textures in software renderer.
	- 'res' fixed alpha transparency for OpenGL again. Also fixed
	  disappearing of halos behind walls.
	- Wouter Wijngaards did further work on the terrfunc terrain engine.
	  Works nicely now but totally unoptimized so very slow.
	- Matt Reda fixed some of the mmap stuff to compile again (on
	  MacOS/X). I didn't test my changes because I'm not sure what exactly
	  uses the mmap stuff. Also did some testing with QInt() on PowerPC.
	  It works, but on PowerPC it is actually slower than a simple cast
	  (in my simple tests). So we'll leave it off for now.
18-Mar-2002
	- Fixed a bug in the octree cacher. The name used for loading
	  the cache could be different from the name used to writing the
	  cache (more specifically the name generated by the MD5 hash).
	- Fixed a bug in the octree cache. It was using *(char**)memfile
	  to get to the data. This is incorrect and has been
	  changed to (char*)memfile.GetData ().
	- Fixed yet another bug in the octree cache. It appeared that
	  debug/optimize cache could have some differences. This is probably
	  related to small changes in floating point calculations and
	  the polygon splitting routine is very sensitive to that.
	  This has now been fixed by saving additional information to the
	  octree cache. This means the octree cache is now bigger but
	  more robust on different platforms/debug/optimize mode.
	- 'res' fixed a bug found by <lemkef@charter.net> in the bmp
	  loader by removing the check for biClrUsed.
	- Mathew Sutcliffe fixed a problem with deciding whether to use
	  event.Key.Code or .Char.
	- Norman Kramer did the following:
	    - Renamed awslistbx to awslstbx to comply with the 8.3 filename
	      rule.
	    - AWS: Added AWSF_CMP_DEAF flag for components that do not wish
	      to receive any event.
	    - Added AWSF_CMP_DEAF flag, use it through cmp->IsDeaf()
	      and cmp->SetDeaf().
	    - The event distribution code in awsmgr now checks for this flag.
	    - Made invisible tabs in a notebook deaf.
	- Christopher Nelson fixed a compile bug in inpnames.cpp so that
	  MSVC won't complain that the case statements skip it's
	  initialization by including it in it's own {} block.
	- Matze Braun applied a patch from Loic Dachary <loic@gnu.org>
	  that makes using cs-config with autoconf easier.
	- Matze fixed unix csosdefs.h to compoile at least again. But I
	  think the mmapio functions shouldn't go to that header at all.
	- 'res' fixed alpha transparency (full transparent in OpenGL was
	  fully opaque in software and vice versa).
	- Christian Bayle added more dependencies to the debian scripts.
	  Several other smaller changes.
	- Mathew Sutcliffe modified the comments for binder.h. Added a main
	  comment so it will show in the online docs.
17-Mar-2002
	- Norman Kramer did the following:
	    - Fixed scf for static compilation (USE_PLUGINS=no).
	    - Renamed genmesh/csTriangleVertices to csGenTriangleVertices to
	      prevent name clash with terrfunc's csTriangleVertices (if
	      compiled static).
	    - Made csTriangleVertex an inner class of csTriangleVertices to
	      prevent name clash with genmesh's csTriangleVertex (if compiled
	      static).
	    - Added removal of SRC.LIBREF to the DIR.LIBREF target (otherwise
	      no new cslibref will be created if you made it once and then add
	      a plugin and do a "make recache blah")
	    - Removed the ";" from the LIBREF.BODY because
	      SCF_REGISTER_STATIC_LIBRARY already has it (and additionally
	      djgpp gives up there with an error).
	    - ogg: made callback structure public so VC will like it too.
	    - aws: less whining by VC now.
	    - aws: fixed textbox drawing routines potential use of
	      uninitialized variable.
	    - ogl_polybuf.cpp: fixed potential use of uninitialized var.
	    - thing.cpp: poor gcc for Solaris seems to have problems selecting
	      the right convert_endian routine. So I thought I help a bit by
	      casting the input parameter.
	    - Added chkogl.sh script to detect the existance of
	      glXGetProcAddressARB. Script is called from unixconf.sh.
	    - Additionally adds CSGL_EXT_STATIC_ASSERTION to volatile.h
	      if needed.
	    - OpenGL: added define of SGIS_genmerate_mipmap.
	    - OpenGL: made all defines commented out by default, so if your
	      GL implementation does not feature glXGetProcAddressARB no
	      extension is enabled either - you have to go here and enable by
	      hand (or provide an extended chkogl.sh that detects all the
	      nitty and maybe even the gritty).
	- 'res' added ARB_texture_env_combine to config. Changed 3dfx config.
	  Added GeForce config.
	- Richard Uren added HEIGHTMAP token to isoloader to enable heightmap
	  calculation when tiling. HEIGHTMAP lives in a TILE2D definition
	  and defaults to false/off/no.
16-Mar-2002
	- Wouter Wijngaards did further work on terrfunc. Dynamic lod and
	  seamless within one block.
	- Norman Kramer did the following:
	    - Modified the macros for globals so MSVC will (hopefully) not
	      barf.
	    - Gone through plugins to replace the globals with the cs macros.
	    - cswstest: fixed crash in layout example.
	    - Removed unused vars in various plugins and apps.
	    - Fixed pointer to scalar assignment in isoload.cpp.
15-Mar-2002
	- Wouter Wijngaards did some further work on terrfunc: still not
	  operational (the old terrfunc still works though).
	- Christian Bayle did some package correction on the Debian scripts.
	  Also added a dependency on xlibmesa. Added some mini shot used for
	  48x48 and 32x32 gifs.
	- Mathew Sutcliffe added CS_IS_INPUT_EVENT(e) macro.
	- Norman Kramer did the following:
	    - Modified the variables declared with CS_DECLARE_GROWING_ARRAY
	      so they use the new cs macros for static/global objects.
	    - Globals in aws, iso, emit, and rapid are now used via cs macros.
	    - Made the generated destruction function static.
	    - In the CLASSVAR case the class vars were never set but
	      shadowed by another variable.
14-Mar-2002
	- Norman Kramer did some fixes on the DOS port.
	- Norman fixes scf so that it again unloads unused shared libraries
	  on request only.
	- Matze Braun fixed a bug in csString when appending zero length
	  strings. Also added a comment.
	- Wouter Wijngaards did some experimental work on the landscape
	  engine (terrfunc):
	    - Removed the line RDS NOTE: Is this the same as DrawTest?
	      after the TestVisibility function.
	      Answer: No.
	      Long Answer: TestVisibility does quadtree visibility culling,
	      where parts of the terrain occlude other parts of the terrain.
	      This can and will never result in occluding the *entire*
	      terrain. Thus, it is not the same as DrawTest.
	    - Added terrain quad divisor class and terrfunc can enable this
	      (default on false). Placeholder code for now.
	    - Tiles show up, texture coordinates work for terrquaddivisor.
	- Christian Bayle did some cleanup for rules and createmenus in the
	  Debian scripts.
13-Mar-2002
	- Fixed mdl2spr so that it now correctly generates a MESHFACT
	  keyword instead of MESHOBJ.
	- csdemo will now show a list of all demo data files that it can
	  find in the current directory and the data dir if you start it
	  without commandline. In that case you can click and select the
	  data file that you want to run.
	- When you don't use LMCACHE keyword CS will now automatically
	  assign a name to every thing. Currently this name is based
	  on an MD5 checksum of the following information:
	      - Bounding box of the thing.
	      - Number of vertices
	      - Number of polygons/curves
	      - Name
	  This should guarantee sufficient uniqueness. If not we can always
	  add more data to this MD5 generation. This MD5 key will be
	  converted to a 32-byte name which is then used for caching
	  lightmaps and octree. This will make it easier to dynamically
	  load levels even when other parts of the level are already loaded
	  without the user having to manually specify LMCACHE.
	- Matze Braun added --includes to cs-config.
	- Norman Kramer did the following:
	    - Destruction functions are now called in reverse order of
	      registration.
	    - Dynamic libs are now correctly (hopefully) csUnloadLibrary'ed
	      by scf, note that this triggers a segmentation fault (at least
	      on linux (suse 7.3 - gcc 2.95.3 and binutils 2.11.90.0.29))
	      that is caused by gcc/libc's handling of static/global objects
	      in shared libraries. I will now begin to employ the new cs
	      macros to get around this.
	    - Changed a few of the static/global objects in csgeom and
	      csengine to be declared/implemented with the new CS_ macros
	      ("scfreg engine.so" no longer segfaults - that was why I started
	      all this, the guy who asked on irc why it segfaults be cursed :)
	    - Added a CS_..._REF in cssysdef that returns a reference to the
	      static object.
	    - In cssysdef.h moved forward declaration of cleanup function out
	      of extern "C" {} construct.
	- Christian Bayle did some more changes to versioning for the Debian
	  scripts.
12-Mar-2002
	- Made the lightmap cache for pseudo-dynamic lightmaps (shadow
	  maps) a bit more robust. Previously changing pseudo-dynamic
	  lights could cause the map to become unloadable because
	  old cached dynamic lightmap files made things crash.
	- Cleaned up pol2d.cpp source code which seems to have been
	  badly formatted by the C++ 'beautifier' :-)
	- Fixed a bad bug in pseudo-dynamic lights. Due to a wrong test
	  in the lighting code polygons that were fully lit by a
	  pseudo-dynamic light would not get lit at all.
	- CS demo now gives information about where to get demodata.zip
	  if you run it without demodata given on the commandline.
	- Removed the ad-hoc mount to demodata.zip from vfs.cfg.
	- csdemo now only accepts real filesystem path for the demo zip
	  or directory. So run csdemo with 'csdemo data/demodata.zip'
	  for example.
	- csdemo will no longer fail if there is no library in the demo
	  archive.
	- csdemo will now correctly move objects and camera so that they end
	  up in the correct sector if they go through a portal.
	- Changed iSaverPlugin::WriteDown() to accept iFile instead
	  of iStrVector. This will make it possible to write binary data.
	  Changed all implementations of this interface for the new
	  method signature.
	- Christian Bayle did some changes to the Debian script rules.
	- Christion added versioning/added export on tag for the Debian
	  scripts.
	- Norman Kramer did the following:
	    - Further changes to the CS_* macros to provide static/global
	      objects in shared libraries.
	    - Now everything should be in place and ready to be used (that
	      will follow in the coming days).
	- Philip Wyett added include <winsock.h> to csosdefs.h for windows.
11-Mar-2002
	- Fixed a bug in csScanStr when presented with an empty string
	  as input. This prevented the proper scanning of the format
	  string and thus also prevented some stuff that needs to happen
	  even if input is empty (like setting count variables to 0 for
	  lists like %D and %F).
	- Fixed a bug in the parsing of SMOOTH (spr3dldr) which would
	  use '%s' for a numeric parameter if an error occured. This
	  causes crashes. Additionally also fixed the error message
	  that occurs in this case.
	- Wouter Wijngaards added trailing endofline to isomap/isomap.h file.
	- Philip Wyett removed odivx4 plugin from default MSVC build.
	- Norman Kramer did the following:
	    - Added macros for declaring/implementing static/global
	      variables that can be used inside shared libraries.
	    - A Libname_scfFinalize function is called for shared libraries.
	    - The cleanup function for the main application is called in
	      DestroyApplication.
10-Mar-2002
	- Norman Kramer did the following:
	    - Changed SCF_EXPORT_FUNCTION to CS_EXPORTED_FUNCTION.
	    - Changed SCF_EXPORTED_NAME to CS_EXPORTED_NAME.
	    - Moved default definitions of both into cssysdef.h (out of scf.h).
	    - Renamed the SCF_EXPORT_FUNCTIONS in the other system dependent
	      csosdefs.h files.
	    - Declared cs_static_var_cleanup in cssysdef.h as
	      CS_EXPORTED_FUNCTION (that should fix the compiler warnings on
	      win32).
	- 'res' renamed csCreateXORPatternImage() parameter 'patsize' to
	  clearer 'recdepth'. Changed comment a bit.
	- 'res' fixed rle.mak for wrong output file name under MSVC (now
	  rlecodec instead of rle).
	- Philip Wyett removed 'byte' from xorpat.cpp, which is not always
	  known for unsigned char.
	- Philip fixed a bug in the video app: an attempt to centre the
	  video also resulted in the video being halved in size.
	- Philip also reports:
	    - Removed code used in odivx4 plugin which is not part of odivx
	      for Windows. You can see all the affected lines by looking for
	      lines commented out with "// PSW".
	    - Updated msvc_libs (all version) adding odivx4 support.
	      Note: The decore.h now in msvc_libs is a custom version as the
	      one one officially released is missing some definitions and also
	      one which causes crashes. :/
	    - Left all old divx headers and libs etc in for the time being.
	      I will remove later.
	    - Added divx4 plugin to default MSVC build.
	    - Updated docs in cvs ready for when we can get the new versions
	      of msvc_libs onto ftp.
9-Mar-2002
	- Norman Kramer did the following:
	   - In the OpenDivX plugin: removed FOURCC divx, which is now
	     assigned to divx4.
	   - Added new divx4 codec.
	   - In the csosdefs.h files changed CS_IMPLEMENT_PLUGIN to
	     CS_IMPLEMENT_PLATFORM_PLUGIN and CS_IMPLEMENT_APPLICATION to
	     CS_IMPLEMENT_PLATFORM_APPLICATION.
	   - Added CS_IMPLEMENT_STATIC_VARIABLE_CLEANUP and
	     CS_STATIC_VAR_DESTRUCTION_REGISTRAR_FUNCTION in cssysdef.h.
	   - CS_IMPLEMENT_PLUGIN and CS_IMPLEMENT_APPLICATION is now made
	     from CS_IMPLEMENT_STATIC_VARIABLE_CLEANUP and
	     CS_IMPLEMENT_PLATFORM_*.
	- Philip Wyett fixed all the warnings caused by the changes to
	  CS_IMPLEMENT_APPLICATION and CS_IMPLEMENT_PLUGIN. Also changed
	  lib name which MSVC will use for new divx for plugon to eliminate
	  conflicts.
	- Philip then proceeded to revert the massive commit he did a few
	  minutes ago :-)
	- Norman reverted on additional file that Philip forgot to revert.
	- 'res' did some changes to procedural textures (plasma, fire, dots):
	  changed texflags, removed nomipmaps on plasma/fire, added
	  persistent on dots.
	- 'res' fixed the OpenGL backbuffer procedural texture implementation
	  so that up is now up and down is down.
8-Mar-2002
	- Peter Amstutz <tetron@student.umass.edu> gave a patch which
	  does the following:
	    - garray.h will not shrink the allocated size when SetLength() is
	      called (SetLimit() can still shrink the array). He did not change
	      the allocation policy (it still allocates +8 elements at a time).
	    - In mdltest.ccp/csSingleIndexVertexSet::Add() he commented out
	      the n-factorial linear search which he believes is supposed to
	      optimize vertices, but in practice does nothing (except suck
	      up a LOT of runtime).
	    - In sprbuild.cpp/csSpriteBuilder::Build() he added code to count
	      the number of vertices in the imported model and preallocate
	      the required memory in the vertex arrays.
	    - In sprtri.cpp/csTriangleMesh2::AddTriangle() he changed the
	      resize policy from allocating +8 elements at a time to doubling
	      the array size.
	- Jorrit additionally modified the following on this patch:
	    - garray.h will still shrink the allocated size when
	      SetLength() is called which will result in a limit that
	      is 1000 (CS_GARRAY_SHRINKLIMIT) units smaller than the old
	      limit. This means that arrays will still shrink by calling
	      SetLength() if the new length is sufficiently smaller than
	      the old one.
	    - The default grow limit is now set to 16 (CS_GARRAY_GROWSTEP)
	      instead of 8.
	    - Instead of doubling the number of triangles in the spr3d
	      plugin the triangles are doubled with a maximum of 1000
	      triangles at a time. This ensures that not too much memory
	      is wasted.
7-Mar-2002
	- Matt Reda fixed an endian-related bug in the OpenGL screenshot
	  code.
	- Fixed another occurance of an initializer in a cpp file.
	  This is not legal.
	- The cache manager is no longer registered with the object
	  registry. Instead I added iEngine::GetCacheManager() and
	  SetCacheManager(). This is a more explicit and easier way
	  to handle this. So if you want to cache something in the
	  context of the engine just ask the cache manager from the
	  engine. If you don't use SetCacheManager() then the engine
	  will still use the vfs cache manager by default.
	- Octree is now also saved on the cache manager.
	- Fixed a memory leak in csOctree::ReadFromCache().
	- Fixed a big problem in csOctree::ReadFromCache() which could
	  cause memory corruption.
	- Brandon Ehle did some fixes in caltocs for memory corruption.
	- Christian Bayle did an initial addition to build daily Debian
	  package (scripts/debian).
6-Mar-2002
	- Matt Reda made the iso engine explicitly remove all mesh factories 
	  at iso engine destruction for clarity.
	- Matt Reda removed extra assignment where g3dpolyfx.mixmode was 
	  being assigned the same value twice for isometric sprites
	- Matt Reda removed extra screen to world calculation in iso views
	- Matt Reda added support for splitting walktest into two views. 
	  Shift-S splits to 2 views, Shift-T toggles between the two views
	  (allowing the user to navigate the level in the two views), and
	  Shift-U returns to a single view (the currently active one).
	- Added iCacheManager interface (include/iutil/cache.h). This is
	  a generic interface to describe a cache mechanism. It can be used
	  for storing data that is hard to calculate and doesn't change
	  often. Since this is an interface you can create various
	  implemetations that read/write cached items from several sources.
	  Even a networked implementation could be possible.
	- Added csVfsCacheManager implementation of iCacheManager
	  (include/csutil/vfscache.h). This is an implementation of
	  iCacheManager that will store cached items on VFS (file system).
	- The engine will now find a cache manager in the object registry
	  with the tag 'crystalspace.engine.cachemgr'. If this doesn't
	  exist it will create an instance of csVfsCacheManager and
	  register that (cache will be placed in 'cache' dir). By registering
	  your own implementation of iCacheManager to that tag you can
	  force the engine into using a different cache.
	- Extended iLightingInfo interface with a iCacheManager* parameter.
	- Lightmaps are already cached using the new system. Octree and
	  bsp tree are still a todo.
	- Philip Wyett moved the isometric map loader to plugins/isoldr
	  instead of its original location inside plugins/engine/iso.
	- Philip fixed all redefinition errors in inpnames.cpp. Note: when
	  allocating a default value to a variable in a function definition,
	  please could folks do it in the header file only and not in both the
	  .h and .cpp.
	- Richard Uren removed some debug comments from the iso loader.
	- Richard also did some changes to allow the creation of mesh wrappers
	  without a class id for the iso engine. The CLASS directive in the
	  iso map files are no longer needed.
	- Matze Braun added a missing cache.h include to polygon.cpp.
	- Matze also added declarations for iEvent and csEvent again in
	  inpnames.h. Please don't remove them again. They are needed.
	- Matze then did a small bugfix for keyparsing.
	- 'res' changed VFS so that when a file is opened for reading the
	  directories are not automatically created.
	- 'res' did the following changes to lightmaps:
	    - Changed the way lightmap is stored on disk: 
	      the 4th byte was 0x80 all the time, and the comment on line
	      159 in lghtmap.cpp says it wasn't even known why :) now the
	      4th byte is stripped when writing the lightmap and readded when
	      reading. 
	    - Changed lightmap file magic.
	    - Changed lmversion.
	- Mathew Sutcliffe added csInputBinder: an auxilliary support class.
	- Christopher Nelson published FindComponentFactory interface and
	  made several modifications to the interface to accomodate this.
5-Mar-2002
	- Mathew Sutcliffe (Oktal) added new csParseInputDef and
	  csGetInputDesc functions which replace the old functions in
	  cskeys.h. With these functions you can parse a key/mouse/joystick
	  event into a csEvent or vice versa.
	- Mathew added backward compatibility with cskeys and extra.
	- Fixed the csParseInputDef and csGetInputDesc so that they now
	  return bool on success/failure of conversion.
	- Richard Uren added a new loader for the isometric engine.
	- Matze Braun did the following:
            - Small fix from Rene Dudfied <illumen@yahoo.com> to make
	      fpu80x86.h compiling with gcc >= 3.0.4.
            - Matze added some declarations to inpnames.h.
	- Philip Wyett fixed a few issues in the new iso plugin makefiles.
	- Philip also fixed all the conflicts of having two plugins in the
	  same dir and wildcarding all the files in that dir. Isomap now
	  successfully compiles and runs under MSVC.
	- Matze Braun fixed the isomap makefile so that the target name
	  is now different from the executable name.
	- Matze additionally removed double CS_IMPLEMENT_PLUGIN, this results
	  in two main functions in linux.
	- Matze then proceeded to add the CS_IMPLEMENT_PLUGIN again. These
	  really are two plugins.
4-Mar-2002
	- Fixed the tutorials in the docs so that they are up-to-date with
	  regards to changes that happened a long time ago in csInitializer.
	- Philip Wyett implemented a strncmpi() function so MSVC can compile
	  again.
	- Matze Braun fixed inpnames.cpp for unix. Stricmp is MSVC only.
	- Jonathan Tarbox reports: while in most systems returning false
	  as a pointer will evaluate to 0, it does not within BeOS.
	  Fixed a problem in csloader.cpp related to this.
3-Mar-2002
	- Norman Kramer did the following:
	    - csRegisteredString never freed the memory assigned to its
	      String member.
	    - With much help from Matze Braun I have figured what causes
	      the segfault after engine.so gets unloaded: it's the _fini from
	      crti.o that is linked in with the link command that is issued
	      when linking with g++.
	      Why this causes a crash is still unknown, but we can avoid
	      linking this in by adding -nostdlib -lgcc to the g++ link
	      command. This is what i've changed in linux.mak (funny enough we
	      used that already back then when we used gcc instead of g++).
	    - Reverted my changes since now the static objects in engine.so
	      are no longer initialized (well, they are 0 - for instance
	      the csPoly2DFactory in csPoly2DPool).
	- Matze Braun added support for 'free()' to csMemFile (in addition
	  to not deleting and 'delete[]').
	- Matze fixed the indentation/coding style of the sound renderer
	  and also fixed a bug in the destructor.
	- Matze fixed cspython.mak to remove python.cex in pythonclean target.
2-Mar-2002
	- Norman Kramer did the following:
	  Text in the "whatsThis" property of controls are now evaluated.
	  Currently text in the form of: "c:a1,b1,a2,b2[,...]" is recognized
	  and translated into:
		connect
		{
		  a1 -> b1
		  a2 -> b2
		     ...
		}
	  so if you write in the whatsThis property of a pushbutton:
	  c:signalClicked,mysink::Login you'll get:
		connect
		{
		  signalClicked -> mySink::Login
		}
	- Norman also added recognition of literals in whatsThis property.
	  It is of the form "l:literal text". <literal text> will be placed
	  in the output.  "c:" and "l:" tokens have to separated by "|"
	- Norman updated the qtaws.txi documentation.
	- Norman fixed the following:
	    - Thing was not initialized in polygon constructor.
	    - xwindow.cpp: graphics context was not freed.
	    - xexstshm: XImage was leaked, moved destructor of xshmt in x2d
	      around so it happens before xwin is destroyed (xshm also
	      uses dpy variable). NOTE: If you use valgrind (memory checker)
	      you will note that it crashes if the shared memory if
	      shmdt'ed - this seems to be a bug in valgrind.
1-Mar-2002
	- Norman Kramer did the following:
	    - Made joystick code produce "old" events - that is (x,y) pairs
	      for the first 2 axis only.
	    - The keys read from joystick.cfg are now composed as
	      Device.Joystick.<Platform>.<Compiler Name>.*
	      This will possible implementations for other platforms let share
	      this config file.
	- Christopher Nelson fixed some bugs with the transition out code,
	  and modified visibility processing to make transition resets work
	  right without flicker.
	- Wyatt Miler fixed @em -> @emph in apimod94.txi.
28-Feb-2002
	- Norman Kramer did the following:
	    - Cleaned up crysball.cpp a bit.
	    - Replaced a long if-snake with a for loop.
27-Feb-2002
	- Matze changed oss sound driver to nonblocking mode while opening, so
	  if the soundcard is already used it fails now instead of
	  waiting for the sound card to become free.
	- Norman Kramer did the following:
	    - Cleaned up SCF_DECLARE_IBASE in the components, which was not
	      needed (and wrong) since they all inherit from awsComponent
	      which implements iAwsComponent already.
	    - Made awsComponentFactory a full implementation of
	      iAwsComponentFactory (that is I provided a dummy implementation
	      of Create ()).
	    - Removed all the SCF_DECLARE_IBASE stuff for ComponentFactories
	      too.
	- Christopher Nelson did the following:
	    - Made out transitions automatically Hide and Reset the window
	      frame for the in transition.
	    - Made awsStandardSink contain triggers for all out transitions.
	    - Fixed a bug in the status bar that would cause draw pixmap to
	      segfault.
	    - Added new window function: FindChild. This allows you to find a
	      child of a window by name. You must make sure and have the exact
	      same name, though, otherwise the child will not be found. Case
	      IS sensitive.
26-Feb-2002
	- Norman Kramer did the following:
	    - The styleshhet now recognizes QTabWidget which are transformed
	      into awsNotebook.
	    - Fixed bug that created layouting data even if there were none.
	    - Fixed the case where notebook pages have no caption, it now
	      correctly creates dummy captions synthesized from "Tab " + #Tabs.
	- Brandon Ehle implemented the PLUGINS section for libraries in the
	  loader.
	- Matze added a missing csPlane3 forward declaration to campos.h.
	- Christopher Nelson added window transitions for sliding in and out
	  left, right, up and down.  Note that transitions will cause
	  segfaulting if used with a proctexture, because CS proctextures do
	  not provide proper clipping.
	- Norman Kramer fixed DoButton and DoMotion of the joystickdriver
	  (for one the range checking was screwed and now joystick number is
	  in range [0, maxjoy-1] as the comment in iEventPlug suggests.
	- Norman implemented a joystick eventplug for linux that conforms to
	  the Linux Joystick API. Enable it CS/libs/cssys/unix/*.mak. There
	  is also a joystick.cfg.
25-Feb-2002
	- Michael O'Shea found a bug in iLoader::LoadMeshObject(char*fname).
	  This function was totally broken :-)
	- Matze Braun removed an assert from the standard reporter to allow
	  users to define their own severities.
	- Norman Kramer did the following to aws:
	    - Added notebook component.
	    - Events are now only broadcasted to windows that are not hidden.
	    - Added sample for notebook.
23-Feb-2002
	- Matt Reda changed size of uv array in ogl_polybuf.cpp. Array was
	  declared with size 2 but 3 elements where being accessed,
	  overwriting some of the other local variables. Adjusted size to 3
	  until someone with more insight can determine whether that is
	  correct, or if it should only be accessing 2 elements.
	- Philip Wyett fixed compiler error under MinGW Norman Kramer mailed
	  to me. This error was that ENUM_CURRENT_SETTINGS is not part of
	  the win32 api of MinGW whilst it is under MSVC. I have added a nice
	  little define to include it for those which don't have it.
	- Philip did a quick hack to get the LUA plugin to compile.
	- Philip removed include csutil/zip.h from css.h.
22-Feb-2002
	- Added iLoaderContext interface (include/imap/ldrctxt.h). This
	  new interface gives loader plugins a way to find out about
	  sectors, materials, mesh objects, and mesh factory wrappers.
	  The interface supports the notion of region-qualified names (i.e.
	  'regionname/objectname') or just normal object names.
	  Implementations of loader contexts should not be modifiable since
	  sometimes a context is stored for delayed loading.
	- Removed iLoader::FindMaterial(), FindSector(), and
	  ResolveCurrentRegionOnly() since now the loader context has
	  to be used.
	- Changed iLoaderPlugin to use the iLoaderContext instead of
	  material and factory list.
	- The standard loader now supports an iLoaderContext and gives
	  it to the loader plugins.
	- Modified all the loader plugins to use the new context object.
	- Extended iSyntaxService::ParsePoly3d() with a new
	  iLoaderContext* parameter.
	- Added iEngine::CreateLoaderContext(). With this function you can
	  create a loader context that will operate on the engine lists.
	  It also has an optional region parameter with which
	  you can get a loader context that will only search in that
	  region. You can use this function for giving it to loader plugins
	  directly.
	- Changed the new iEngine::FindBla() functions I added yesterday
	  so that they accept an optional region parameter instead of
	  a bool ResolveCurrentRegion.
	- Fixed a bug in iEngine::CreateMeshFactory(). If a factory with
	  the same name already existed it would not create a new factory.
	  This is wrong since different factories with the same name
	  are perfectly legal. It is possible for the factory to be in
	  another region for example.
	- Fixed the python plugin for the changes yesterday.
	- Added the ability to use '*' as the region name when using the
	  'regionname/objectname' syntax. i.e. you can now say:
	    MATERIAL ('*/stone')
	  This syntax forces a global search (i.e. ignoring all regions)
	  for the material 'stone' EVEN if the current loader context
	  says that only one region should be used.
	- Brendan Burns <bburns@genet.cs.umass.edu> and Peter Amstutz made
	  a memory canvas which will render to a memory buffer (and not open
	  a window). This can be useful in applications that want to save
	  a rendering to some file without having to open a window. This is
	  for the software renderer alone. Use the Screenshot() function to
	  get the image.
	- Removed 'required' from BisonFlex in msvc documentation as it is
	  no longer required.
	- Changed iTerrFuncState::LoadMaterialGroup() to use iLoaderContext
	  instead of iMaterialList. This fixes a compilation error.
	- Fixed iLoader::LoadMeshObjectFactory(char* filename) so that it
	  resets the 'ResolveOnlyRegion' to false.
	- Christopher Nelson did the following to AWS:
	    - Added new component, "Status Bar"
	    - Fixed anothe bug in the bar chart.
	    - Added component "Status Bar" to the manager.
	      Status Bar takes the following keys:
	        Status: <integer between 0 and 100 (inclusive)>
	        Style: <typical frame styles, sbBump. sbSimple, etc.>
	        BarTexture: <a text string that is the path to the image>
	        BarTextureAlpha: <an integer between 0 and 255 (inclusive)>
	    - Fixed key bug in status bar.
	    - Fixed insets in status bar to look right.
	    - Fixed command button: mouse over, bitmap issue,
	      getprefferedsize when it's a bitmap.
	    - Fixed barchart: zero barwidth issue, dies when no items.
	    - Fixed textbox: if it was too small text would be truncated
	      to zero and strlen would choke.
	    - Fixed window: if a child had a layout, but the window did not,
	      it would not function right.
	    - Added BackgroundAlpha and OverlayAlpha to window.
	    - Other fixes that I can't remember now.
	- 'res' fixed the Windows OpenGL canvas so that the depth now contains
	  the actual instead of the wanted color depth.
	- 'res' fixed a typo in jobber.pl ('Inovking' instead of 'Invoking').
21-Feb-2002
	- Peter Amstutz <tetron@student.umass.edu> added a patch to CS
	  to add two additional broadcast events:
	    cscmdCanvasExposed
	    cscmdCanvasHidden
	  these events are sent when the canvas becomes exposed/hidden
	  (i.e. iconify for example). Currently only the XWindow canvas
	  will actually send these!
	- Disabled default building of LUA for mingw port.
	- Added FindMaterial(), FindTexture(), FindSector(), FindCollection(),
	  FindCameraPosition(), FindMeshObject(), and FindMeshFactory()
	  to iEngine. All these functions have two parameters: the
	  name to look for and a flag which indicates if the search
	  should be restricted to current region (default false). The name
	  can take two forms: either it is a simple name of the object in
	  which case it will work as explained above, or else it uses
	  the form 'regionname/objectname'. In that case it will ignore
	  the extra flag and look for the object in the specified region.
	- The loader now uses FindMaterial() and FindTexture() from above
	  so you can now specify materials with the form 'region/matname'
	  if you want.
	- Portal loading now works differently. Previously it worked by
	  creating dummy sectors for every portal. These dummy sectors would
	  then later be resolved after the loading pass. This was a bit
	  clumsy and has been a source of bugs in the past. So I changed this
	  with a callback on the portal that is called when a sector is
	  missing. So this means that all portals are by default null-portals
	  unless it is a portal to a sector that was already defined
	  previously. The null-portal will have a callback associated with
	  it that will try to find the destination sector as soon as the
	  portal is first used. This means that worlds that have portal
	  to non-existing sectors will now work except that the portal itself
	  will not be operational (a texture will show).
	- Removed the ugly ResolvePortalSectors() function in the parser.
	  This is no longer needed with the technique above.
	- It is now possible to use the 'regionname/sectorname' notation
	  with the PORTAL command too. So you can specify portals to sectors
	  from other regions.
	- Added iLoader::ResolveCurrentRegionOnly() function to return the
	  current value of the ResolveCurrentRegion flag in the loader.
	- Removed the 'link' parameter from iEngine::CreateSector(). Since
	  this hack is no longer needed sectors are now always linked
	  to the engine as they should.
	- Matze did the following:
	    - Changed csString to handle 0ptrs correctly (a null pointer is
	      returned if a null pointer has been assigned).
	    - Changed cast operator of iString to return const char* instead
	      of char* (if you really need char* which is dangereous use
	      GetData).
	- 'res' fixed a @ref in the next documentation.
	- 'res' fixed description on how to make a sky brush (skybox.txi).
	- 'res' adds support for cscmdCanvasExposed/cscmdCanvasHidden for
	  Windows.
	- 'res' also adds cscmdCanvasExposed support to Walktest.
	- 'res' reports that textures sizes in memory (OpenGL) were calculated
	  wrong in some cases. Also disabled mipmapping for procedural
	  textures.
	- 'res' added support for GL_SGIS_generate_mipmap which allows
	  automagical creation of mipmaps for procedural textures.
	- Christopher Nelson fixed a dumb bug in bar chart that was making
	  display inverted.
20-Feb-2002
	- Added SetMaximumSectorVisit() and GetMaximumSectorVisit() functions
	  to iPortal. With this you can control how many times the same
	  portal can visit the same sector during one recursion level. This
	  is mainly useful for space warping portals that warp back in
	  space so that the portal can be seen from the portal itself :-)
	  By default this limit is set to 5.
	- Added MAXVISIT keyword that you can use inside a WARP() statement
	  for a polygon. This will call SetMaximumSectorVisit().
	- Added new 'entity_WavePortal' command for WalkTest. With this
	  command you can let a space warping portal 'wave' a little bit.
	  flarge contains an example of an infinite room with waving
	  portals. This is only a small illustration of what space warping
	  can do. It is not an example of nice code :-)
	  It also demonstrates a bug where the distance polygons are
	  drawing wrong for some reason.
	- Norman Kramer did the following in the glx2d canvas:
	    - Xvis, cmap and active_GLContext were not set in case the first
	      glXChooseVisual failed.
	    - Also added a test for generic RGBA+Doublebuffer+DEPTH
	      with help from Christophe Cavalaria.
	- Wyatt Miler updated libpng version that is available in documentation.
19-Feb-2002
	- Toni Asco' Gonzalez implemented a faster version of DrawPolygonMesh()
	  for OpenGL. This code is still experimental but it seems to work.
	  Fog is not yet correct though. To enable this use the FASTMESH()
	  option inside the PARAMS() block of a thing mesh object.
	  The speed increase will be mostly visible on small objects with
	  a high polygon count. Don't use it on an entire level because
	  then the mesh will have to be clipped and this degrades performance
	  again.
	- Optimized the new DrawPolygonMesh() a little.
	- It is now possible to also add mesh objects to libraries.
	  Previously only mesh factory could be added. This means that you can
	  now say MESHOBJ or MESHREF from within a LIBRARY. The meaning of
	  this is a bit special. What will happen is that the mesh objects
	  are created like they would have been created inside a sector. But
	  they are not added to any sector. They are only added to the engine
	  list of meshes (engine->GetMeshes()).
	- Added a new keyword 'MESHLIB' that can be used in a sector to
	  refer to a mesh object from a library. What this will do is try
	  to find a mesh object with the given name from a previously loaded
	  library. Then it will link that mesh object to that sector.
	  Note that you can not duplicate objects this way. There is still
	  only one mesh object and after you used MESHLIB to link it to a
	  sector it is in use. Inside MESHLIB you can do everything that
	  you can do in a MESHOBJ statement. So you can specify the MOVE
	  or HARDMOVE for example. PARAMS and PLUGIN are also possible but
	  should not be used as the mesh object is already defined in
	  the library.
	  This new feature is useful for creating worlds that are made
	  from multiple libraries. For example, you can have a library for
	  every building in your world and then make one world file that
	  combines them all. This would look something like this:
	    WORLD (
	      ...
	      LIBRARY '/lib/gamedata/building1' ()
	      SECTOR 'building1Sector' (
	        MESHLIB 'building1Obj' (
		  HARDMOVE (...)
		)
	      )
	      LIBRARY '/lib/gamedata/building2' ()
	      SECTOR 'building2Sector' (
	        MESHLIB 'building2ObjPart1' (
		  HARDMOVE (...)
		)
	        MESHLIB 'building2ObjPart2' (
		  HARDMOVE (...)
		)
	      )
	      ...
	    )
	  In this example we have two libraries for two buildings. The
	  first library contains a MESHOBJ with name 'building1Obj'.
	  The sector that is defined after that will pick up that mesh object
	  by using MESHLIB and then use HARDMOVE to position it elsewhere.
	  The second library contains two mesh objects which are then put
	  in the next sector.
	- Christopher Nelson did the following:
	    - Created new component called "Bar Chart". The bar chart
	      recognizes vertical and horizontal specifications, and it can
	      display both rolling charts and static charts.
	      (A rolling chart must be updated by your application, but the
	      component handles all the dirty work). Bar Chart has these
	      options:
		Options: bcoRolling bcoRollRight bcoRollLeft
			 bcoVertGridLines bcoHorzGridLines bcoVerticalChart
		InnerStyle: ... same as style, only for the inner frame that
			contains the bars ...
		XLegend: "Legend Name"
		YLegend: "Legend Name"
		MaxItems: 10 ... or any other reasonable integer, this is
			only used for the rolling chart ...
		Caption: "Chart Legend"
	    - Added bar chart to common components list.
	    - Added new function FindColor to preferences manager. It looks
	      for the specified RGB triplet using AWS's built-in texture
	      manager.
	    - Made some fixes to bar chart so that the vertical stuff works
	      right, and also so that the options are added in as constants.
	    - Updated test app to fill up bar chart with some sample values.
	    - Updated bar chart so that it displays a proper numerical legend
	      on the left when NOT using bcoVerticalChart.
	    - Fixed divide by zero bug. Also added new signal:
	      signalBarChartTimer which can be controlled by UpdateInterval.
	      This signal is sent every UpdateInterval milliseconds and can
	      be trapped, but ONLY if the bar chart is rolling. Otherwise the
	      signal is not mapped.
	    - Added notion of Icons that can be shown left, right, above or
	      below the text of a command button.
	      Example:
		component "East" is "Command Button"
		{
		  Caption: "East"
		  Icon: "/aws/zoom.png"
		  IconAlign: biaLeft
		}
18-Feb-2002
	- Added experimental code to allow video mode selection using
	  AWS. This does not work yet and the API is subject to change
	  so I don't recommend using this yet. Also add a 'simpvs'
	  application that uses this feature.
	- Removed dependency on AWS to libflex (for MSVC). This is not
	  required.
	- Wouter Wijngaards fixed the layout bug Patrick spotted in csmod
	  and csogg makefiles.
	- Matze fixed annotation time to be really UTC.
	- Norman reports: gridlayout is now translated into aws GridBag
	  layout (this has still some issues). Norman also added description
	  on how to use the qt2aws.xsl stylesheet.
	- 'res' reports: fontplex now breaks loading of font servers after 2
	  consecutive failures (instead after the first failure).
16-Feb-2002
	- Philip Wyett eliminated 'no newline' warnings in some aws source
	  files.
	- Norman Kramer did the following:
	    - Modified csRectRegion::Include.
	    - This solves the flickering problem in aws.
	    - I'm sure Christopher dislikes my solution since it always splits
	      the rectangle if it partly covers the new to be included
	      rectangle, so the case where n>1 already existing rectangles
	      cover the newly to be included rectangle is ignored.
	- Philip Wyett made modification, which can be seen on cs-main.
	  changed:
		n = ((n + threshold - 1) / threshold) * threshold;
	  to:
 		n = n + threshold - 1;
	  This bug was found by Shawn Carroll and publised to the list
	  by Patrick McFarland the creator of m4 for CS.
	- Reverted Philip's change since for integers n/a*a is not always
	  equal to n.
15-Feb-2002
	- Reverted 'res' change to win32gcc.mak since it breaks compile of
	  ddraw plugin. The problem is that the -lddraw library link command
	  is added after the command so it is added after the 'rm'. This is
	  obviously wrong.
	- Fixed a compile error in aws. You cannot say 'virtual Func ()'.
	  You have to specify a return type or 'void'.
	- Little code reformatting of libs/csutil/cfgmgr.cpp.
	- Reverted 'res' change to enginep.mak since it breaks loading
	  of the engine plugin on MingW at least.
	- 'res' added an alternative workaround for dllwrap on MingW (but
	  not activated by default).
	- Completely reformatted the AWS source code using the GC utility.
	  Now the source of AWS finally conforms to CS coding style rules.
	- Completely reformatted the engine source code using the GC utility.
	- Completely reformatted the csgeom source code using the GC utility.
	- Fixed memory leaks in AWS related to the canvas. Changed
	  behaviour of GetCanvas() so that it no longer increases ref count
	  of returned canvas.
	- Added iConfigManager::CleanUp(). This will flush all removed
	  config files and also clean up all loaded domains.
	- Removed iConfigManager::CleanUp() again. This is not the right
	  way to do this.
	- Matt Reda fixed bug in OSX canvases. Window title never switched
	  back after being unpaused.
	- Wouter Wijngaards added a check to the new halo fading (which looks
	  good!) so that it is only done if the flare component is CS_FX_ADD.
	  Other mixmodes would be colored black, which would not be nice.
	- Jonathan Tarbox added comments on how to enable NASM for CS
	  under BeOS.
	- Christopher Nelson did the following:
	    - Renamed awslayot.cpp to awsgbl.cpp.
	    - Added BorderLayout. Should work pretty much like the Java one,
	      with the exception that it ignores "BEFORE_FIRST_LINE" and
	      similar because that has no meaning in AWS. In order to specify
	      the anchor point for children use Anchor: blNorth, blSouth,
	      blEast, blWest, and blCenter.
	    - Added BorderLayout constants to preference manager.
	    - Fixed a couple of bugs in the BorderLayout. Now functional and
	      works like the book says it should.
	    - Fixed horizontal and vertical gap in border layout. Wasn't
	      working quite right. NOW everything works just like the book
	      says it should.
	    - Updated the awstest.def definition file to include a group
	      frame in a layout WITH a layout (BorderLayout) and five kids
	      in their respective position with gap.
	    - Fixed Group Frame so that it returns insets. This lets layout
	      managers work correctly with it.
	    - Added a new flag called AWSF_CMP_INVISIBLE which means that a
	      component cannot be seen because it's too small. This keeps
	      certain errors fram happening during resizing.
	    - Fixed the two layouts to use this flag when components get too
	      small. There is still the odd refresh issue that I don't
	      understand, and there needs to be a way to lock windows into a
	      minimum frame size. If a window gets sized too small then
	      certain components will freak out. Plus, since clipping still
	      does not work correctly in most of Crystal Space's canvases,
	      something needs to be done about clipping components to a
	      specific area. I'm unsure how to proceed on that one as of
	      yet. Probably I'll wait until someone cares enough to mention
	      it, then we can have a decent discussion.
	    - Updated label to make it work right with layouts.
	- Norman Kramer added the missing AWSF_CMP_INVISIBLE flag.
	- Matt Reda fixed a copy-and-paste error he made last night.
14-Feb-2002
	- Fixed new gridbag constraints in AWS so that it is an enum
	  (static const int is not legal in C++) and also renamed
	  the constants so that they start with GBS_... Several of the
	  constants were defined in windows include files (i.e. RELATIVE
	  in wingdi.h).
	- Fixed another bug in AWS. The 'layout' field in iAwsComponent
	  was not initialized which means it might crash depending
	  on 'luck'.
	- Eric Sunshine removed the outdated and broken classic Macintosh port,
	  as well as the incomplete and unsupported PS2 port.
	- Philip Wyett eliminated a warning with MSVC and starldr.cpp.
	- Christopher Nelson did the following:
 	    - Fixed some ugly bugs in awsGridBagLayout.
	    - Added constants in for GridBagConstraints (gbcCenter,
	      gbcWeightX, etc.)
	    - Enabled layouts in the window manager.
	    - Modified windows to resize using the layout if its there,
	      otherwise revert to old behavior.
	    - There are still some odd problems with layout-enabled windows.
	      I'm not entirely sure why, but they seem to have some bizarre
	      redraw problems that cause blinking during refresh. I don't
	      think that this is related to recalculating the layout, because
	      layouts are only refreshed during a resize and when a window is
	      created.  
	    - GridBagLayout has a bug which may be related to that, but I'm
	      unsure. As it is, layouts work, although GridBagLayout is the
	      only one that exists and it doesn't behave quite right.
	    - Fixed the GridBagLayout bug. Assigning ymax to xmax is not
	      good :-)
	    - Fixed yet another dumb bug related to layouts. They weren't
	      getting the right settings node, so they weren't finding any
	      settings!
	    - Finally fixed all of the layout bugs. The strange refresh
	      problem still exists, trying to discover what that issue is
	      all about.
	    - Updated test app to use layouts.
	    - Fixed the zoom bug for windows and layouts. Only need to adjust
	      by inset, since layouts automatically assume zero space.
	    - Fixed additional bugs related to ScrollBar and ListBox because
	      of layouts.
	    - Slight re-adjustment of space for scrollbar so it doesn't overlap.
	- 'res' added ugly workaround to mingw dllwrap bug (functions with
	  _declspec(dllexport) are not auto-exported from libraries).
	- 'res' modified lens flares so that they fade away.
	- Norman Kramer added inclusion of unistd.h to cssysdef.h. Somehow
	  recent changes broke compilation of socket plugin.
	- Norman did some changes to qt2aws.xsl: pretty indenting. Top level
	  widget is no longer handled in /UI but in a widget matching template.
13-Feb-2002
	- Added new tutorial app in apps/tutorial/awstut. This is a small
	  AWS using application that demonstrates how to open and use
	  one simple window. So it is easier to follow than awstest.
	- Added /tmp mount path to vfs (vfs.cfg) which should point to the
	  system dependent location of a temporary directory. This works
	  for unix and windows now. On windows it will first try
	  $(TEMP), if that doesn't exist it will try $(TMP). Otherwise it
	  will use the temp dir in the Windows directory.
	- Added fflush (stdout) to vshell so that it works on mingw correctly.
	- Matze changed map2cs to support angle in info_player_start.
	- Matze removed hugeroom from walktest and cleaned small other things.
	- Matze changed walktest to load camera position AND direction at
	  startup.
	- Matze eleminated angle vector in walktest which fixes the walking
          through space warping portal bug.
	- Fixed several cases in AWS where SCF implementations were not
	  calling SCF_CONSTRUCT_IBASE() from the constructor. This is BAD.
	- Fixed a memory leak in aws on the font server.
	- Philip Wyett did a hack to allow compilation of linex2d. This needs
	  to be looked at in relation to recent changes with FreeType and
	  others.
	- Matt Reda added a flag that controls whether the runloop continues
	  processing events when the window loses focus (the default is NO)
	  on NeXT-derived platforms. This behavior can be toggled from a
	  config file (System.RunWhenNotFocused) and command line
	  (--alwaysruns).
	- Matt Reda fixed the next2d canvas so that it doesn't display
	  [Paused] in the title bar if the run loop is set to never pause.
	- 'res' added missing $/ at the end of VFS.Win32.TTF_PATH. Changed
	  / to $/ in VFS.CP/M.TMP.
	- Norman Kramer removed the GetDimensions() version Philip added
	  since it is not needed (fontserv.h).
	- Christopher Nelson did the following:
	    - Fixed bug which causes awstxtbx.cpp to crash when setting a
	      string that is shorter than the previous string, and when start
	      and cursor are greater than the length, especially in the
	      case of the notorius empty string.
	    - Added:
		1. getPreferredSize and getMininumSize to support layouts.
		2. design change fixing sill SetProperty behaviour.
	    - Update to resolve empty string issue, while keeping memory
	      consumption minimal. If a user attempts to set a caption to an
	      empty string, the SetProperty method detects it and instead sets
	      the caption to a NULL string. It does not keep track of the
	      empty string, which will most likely go away as soon as the
	      user DecRef's it.
	    - Added the awsGridBagLayout class which supports the Java
	      AWT/Swing GridBaglayout exactly as the definition lists.
	    - Added the beginnings of an awsBorderLayout.
	    - Added the base class for all layouts.
	- Philip Wyett fixed unknown M_PI and unitialized angle.
	- Norman Kramer did the following (AWS):
	    - For scrollbars Min, Max, Value and PageSize are now recognized
	      in the .def file.
	    - For scrollbars changed name "Style" to "Orientation" and valid
	      values from fsHorizontal to sboHorizontal and fsVertical to
	      sboVertical.
	    - Added recognition of QSlider which maps to awsScrollbar.
	    - Now also for QWidget some code is generated.
	    - Added the missing translation from QLineEdit to Text Box.
	    - If caption is empty then the whole caption entry is omitted.
	- Matt Reda reports: A constant is declared/defined as "RELATIVE_"
	  but used as "RELATIVE" - changed to declare/define "RELATIVE" so
	  code compiles (aws).
12-Feb-2002
	- Matt Reda moved the event-handling code in the OSX canvases 
	  from the delegate to a new NSView-derived class.  The old code 
	  wasn't detecting right button clicks for some odd reason, but 
	  it works now.  Events are passed back through the delegate.
	- Matt Reda updated the OSX canvases so that when entering/exiting 
	  fullscreen mode, both canvases now fade in/out.
	- Fixed iLoader::LoadLibraryFile() so that it now reports an error
	  when the engine cannot be found.
	- Discovered that iEngine::LoadMeshFactory() and LoadMeshWrapper()
	  don't actually need the classId parameter. They only need the
	  loaderClassId parameter. So I removed that parameter.
	- Added new 'PARAMSFILE' keyword to the loader for mesh factories
	  and objects. This is similar to 'PARAMS' except that the
	  parameters are read from the given file.
	- Added support for HARDMOVE for mesh factories (in loader).
	- Loader will now check if HARDMOVE is allowed for the given mesh
	  object or factory. If not an error is given.
	- The csdemo app now loads materials and factories from a library
	  instead of hardcoding this in the code. This makes it a little
	  bit more general (but still not general enough).
	- Added loader plugin for loading mesh objects of type 'stars'.
	- Generalized csdemo a bit more. It now loads a file called 'world'
	  in demodata.zip which setups the sector and all objects.
	- Norman Kramer added indentation to the output of qt2aws.xsl. Also
	  QListBox and QListView are now recognized. QListBox will map to
	  an AWS listbox with Type ctList and a single column with generic
	  header "Column0".
	- Norman added recognition of QFrame which maps to an awsGroupFrame.
11-Feb-2002
	- Added csMath3::SpherePosition() which calculates the position
	  on a unit sphere given two angles.
	- Matt Reda fixed a bug in the explosion plugin which would cause
	  the dynamic light that is created by it not to be deleted at
	  destruction time.
	- Philip Wyett did a quick hack to make freefont 1 plugin compile
	  while in transition.
	- Wouter added from Rene Dudfield:
	  A preprocessor for header files to be used for swig. See README
	  for more details including a TODO.
	- Wouter Wijngaards added command line options for swig to make
	  doc strings for the python wrapper.
	- Norman Kramer added fsNone style for frames and extended the
	  controls already using frame styles with fsNone (and fsFlat that
	  was missing in some cases). Also added frame styles and image view.
10-Feb-2002
	- Philip Wyett updated freefont 2 plugin makefile for successful
	  compilation with MSVC. Also updated msvc_libs adding FreeType 2.0.8.
	  Note: This version of FreeType2 is a mod version from the official
	  Freetype 2.0.8 distro. This is due to the poor quality of MSVC
	  project file maintenance where the output filename does not match
	  the distro release number (2.0.6 is outputted and not 2.0.8 as it
	  should be. Fixed by me).
	  Also the Freetype project uses an absolutley stupid method for
	  #include which MSVC really does not like. In certain circumstances I
	  have worked around this in the Free Font 2 MSVC project file and
	  in some cases by hardcoded includes.
	- Norman Kramer did the following:
	    - Added notion of baseline (which happen to be 1 for all the
	      standard fixed fonts :)
	    - This makes csfont prepared for using with WriteBaseline.
	    - Note I leave the xfont thing in linex2d untouched since it only
	      uses a single hardcoded font (or maybe this should be made a
	      more general fontserver and placed in plugins/font ?)
	    - Added warning about using freefont/freetype1 in a commercial
	      product.
	    - Added first version of an extensible stylesheet to transform
	      QT designers .ui files to aws .def files.
9-Feb-2002
	- Norman Kramer did the following:
	    - Added WriteBaseline () to iGraphics2D. This will come in handy
	      for writing with differently sized fonts having all letters on
	      a baseline.
	    - Currently only freefont2 is prepared for being used with
	      WriteBaseline (and with the old Write), gonna prepare the others
	      tomorrow.
	    - Added new versions of GetGlyphSize, GetGlyphBitmap and
	      GetDimension to the iFont interface which return information
	      about offsets of the glyphbitmaps upper left point to a
	      penposition (which sits on the baseline).
	    - Changed major version of iFont to 2.
	    - Extended csfont and the xfont (in linex).
	    - Extended protex iGraph2d in the opengl renderer with
	      WriteBaseline.
	    - Added dummies for the new iFont interface (to freefont plugin).
8-Feb-2002
	- Matt Reda added support for displaying on any monitor on OSX
	  systems with more than one monitor.  Also added small
	  performance improvement to the OSX software canvas.
	- Matt Reda changed the pixel formats used by the base OpenGL canvas
	  to correspond to the pixel formats used by the software renderer.
	- Matt updated the OSX canvases to support being placed on a specific
	  screen for machines with more than one monitor/videocard. This can
	  be controlled with the "--screen" command line switch or
	  "Video.ScreenNumber" in video.cfg.
	  This is untested as I only have one monitor
	- Matze fixed a bug in csHashIterator - it was returning already
	  deleted elements in some special cases.
	- Philip Wyett did the following:
	    - Fixed bug described by Paul Berg "-fs under 16bpp" on CS Main
	      Mailing list (ddraw canvas).
	    - Also took the opportunity to restructure HDC to use member
	      variable rather than having many local versions.
	- Christopher Nelson added the proper stuff to AWS for fsBitmap style
	  windows. This code is tested and works fine. Note that if you specify
	  a window as fsBitmap, it currently does not try to be an engine
	  view. That's pretty easy to fix though.
	- Christopher fixed it so that Bitmap windows draw an engine view if
	  they are engine windows. This can let you make neat looking engine
	  views: there is a background bitmap, then the engine is drawn over
	  that, then there is an overlay bitmap.
7-Feb-2002
	- Christopher Nelson reports that the bigterrain mesh object now
	  compiles with no errors. But it still doesn't work.
	- Christian Bayle added the directory CS/scripts/debian.
6-Feb-2002
	- Matt Reda fixed a bug in the OpenGL renderer which caused
	  fades (F5 in walktest and fade effect in csdemo) not to work
	  correctly anymore.
	- Fixed a bug in iRenderView::TestBSphere(). This bug was fixed
	  some time ago in iRenderView::ClipBSphere() but I forgot
	  to fix TestBSphere() too.
	- Fixed a bug which affected visibility testing of objects in a
	  sector using octree which was seen through a mirror. The
	  mirror caused culling to be wrong. This means that mirrors now
	  work properly if included with the culler object (i.e. the object
	  using VISTREE() setting).
	- Fixed a stupid bug in the engine which prevented Blocks from
	  working properly.
	- When traversing a portal that is located in a sector using
	  c-buffer visibility culling then we have to clear the c-buffer
	  for the area of the portal. This used to be done in the portal
	  class but the problem is that we do it all the time then even
	  if the sector doesn't use c-buffer (i.e. we do it as soon as
	  the c-buffer is used globally). I moved this code to the polygon
	  drawer because then we can do it only when it is really needed.
	- Philip Wyett removed Squawk and all associated files.
	- 'res' changed some settings for freetype2 plugin.
	- 'res' swapped some pixel layouts in csOpenGLProcSoftware::Prepare().
	  Software renderer proctexes seem to work now (at least for me).
5-Feb-2002
	- Matt Reda update Next makefile to support new method of locating
	  CS installation. OpenStep and MacOS X versions no longer use
	  $CRYSTAL environment variable to locate CS installation directory.
	  It now uses the 'defaults' database value CrystalSpaceRoot
	- Matt fixed OSX so that if it does not find CrystalSpaceRoot in the
	  defaults, it will check the CRYSTAL environment variable.
	- 'res did a few small fixes to OpenGL renderer.
	- Norman Kramer added a font server plugin for the FreeType2 engine.
	  It is not yet enabled by default (edit mk/user.mak).
4-Feb-2002
	- Matt Reda fixed leaking ball mesh factory in demosky2.
	- Matt also reports: In csProcSky::GetSkyBlue(), started by fixing
	  some of the typecasts to int then switched to storing intermediate
	  values as floats and rounding the final value. This should give
	  more accurate result than the old method, which truncated the
	  calculated value to an int after every calculation. 
	- Norman Kramer did the following:
	    - Made the cursor in the AWS textbox to blink.
	    - Ok, since christopher didn't reply to my mail I go ahead and
	      change the mousehandling for the captured mouse case the way I
	      think it should be. I only let the capturing component work the
	      event since no other component should be able to do it (that was
	      the reason the component captured the mouse in the first
	      place) - this solves the magic following of the scrollbar knob.
	    - Awstimer now only hooks itself onto the eventqueue when its
	      Start()'ed and removes itself if Stop()'ed. Otherwise the amount
	      of timers idling in the eventqueue can easily add up.
	    - Fixed dragging knob which sometimes didn't get to the min/max
	      value.
	- 'res' did the following:
	    - Software proctex renderer works again (but flawed).
	    - Backbuffer proctex renderer works again (but flawed).
	- Christopher Nelson added the beginning of implementation for the
	  bigterrain mesh object.
3-Feb-2002
	- Philip Wyett eliminated more truncation and conversion between
	  types warnings under MSVC. Note: MSVC does not like float values
	  being expressed as '.0' or '0.' and always likes you to
	  use a trailing 'f' if you are allocating a value to the float type.
	- Philip also moved some code to user qsqrt() instead of sqrt()
	  where appropriate.
	- Philip fixed performance warning (forcing int to bool).
	- Philip fixed qsqrt() for MSVC adding a COMP_VC specific portion
	  and eliminating all the double to float conversion warnings the
	  old code generated.
	- Began fixing inconsistencies of float and double in physics library.
	- Matze fixed a 'no newline at end of file' warning (mmapio.h).
	- Norman Kramer made the following changes to AWS:
	    - Made the properties in awsCmdButton protected (instead of
	      private) so the new awsSliderButton can access them (well I
	      could have add accessor methods but I prefer it that way - feel
	      free to change it).
	    - Added a new descendend of awsCmdButton, the awsSliderButton
	      which fires signals every n Ticks which can be configured via
	      SetProperty.
	    - awsScrollBar class now uses awsSliderButton controls for the
	      dec/inc handle and the knob - which mean you can keep them
	      pressed (and the knob can be moved around) and they'll send
	      out signalChanged signals. Also the area where the knob moves
	      reacts to button pressed events now.
2-Feb-2002
	- Toxe fixed a brand new bug in csMeshWrapper::HitBeam().
	- Philip Wyett eliminated ATOM to bool warning while registering
	  class (win32.cpp). Net method leaves no need for assertion on
	  bResult, this this has been removed.
	- Philip fixed several files to stop MSVC complaining about
	  assignment inside evaluation expression and maintained execution
	  order.
	- Philip fixed a few truncations from double to float (mainly in
	  csgeom and csengine).
	- Norman Kramer set the initial value of 'stopped' to true (for
	  awstimer), so that after first call to SetTimer() you must
	  call Start() to get going.
	- Wouter Wijngaards reports: the haze.h include file was using
	  CS_SPRITE2D as the header #define. Changed it so the two no longer
	  conflict.
	- Philip fixed class access violation under MSVC 6 (bitary2d.h).
1-Feb-2002
	- Tobias Brueckner (Toxe) fixed a bug in the OpenGL 3D renderer that
	  caused it to crash when rendering materials that only had an
	  assigned flat color and no texture.
31-Jan-2002
	- Fixed a long-standing annoyance in WalkTest. WalkTest was able
	  to load levels in the following cases:
	    - If the level was mounted in vfs.cfg you would just say
	      walktest mounted_name
	    - If the level was not mounted but it was either in the current
	      directory, the data directory or the data directory of the
	      parent, WalkTest would automatically mount it. However you
	      could not use the '.zip' extension then.
	  I extended the last feature so that you can now also use the
	  full filename with extension. If WalkTest finds there is already
	  an extension included it will not try to add its own extension.
	  In addition you can now give a full pathname so walktest can load
	  levels from everywhere without requiring a mount in vfs.cfg.
	- Wouter Wijngaards modified the "Queen of all CS includes" (css.h)
	  to now include everything in CS that an app can use. (Not platform
	  specific stuff). Using #defines some parts can be left out if
	  desired.  Note this file should only be used by projects external
	  to CS.
	- Philip Wyett fixed forward declaration errors and variable
	  redefinition errors in the MSVC port.
	- Philip eliminated a couple of unitialized variable warnings.
	  One is a very MSVC specific complaint.
	- Philip removed various other warnings (MSVC specific).
	- Philip eliminated the assignments within conditional expression
	  warnings under MSVC and also cleaned up some code.
30-Jan-2002
	- Added iEngine::FindLight().
	- Improved comment with iCamera::GetHit().
	- Further work on tree loader. Still not completely functional.
	- Christopher Nelson added alpha version of the large terrain
	  renderer's implementation to the mesh directory. Currently it's just
	  the simple header file that contains all the implementation code.
	  I still have to connect it to the genmesh plugin somehow and do some
	  tests on it. Also, it has no provision for texturing at the moment.
29-Jan-2002
	- Jorge Acereda changed the MD2 importer so that it recognizes 
	  sprite actions. Also, scaling and axis conventions are now
	  coherent with mdl2spr. I hope nobody was using it :-)
	- Jorge also fixed frame timing.
	- Some further experiments with tree generation. Unfinished.
	- Further work on tree. At this moment it doesn't even resemble
	  a tree :-) I'm still debugging. Added texture mapping.
        - Matze added a null canvas for the null 3d renderer, this makes it
          possible to use CS on dedicated servers that can't display
	  anything.
	- Matze fixed destruction (memory leak) of null 3d renderer.
28-Jan-2002
	- Seperated geometry and rule in the tree generator. This will make
	  it easier to setup better rules.
	- Matze changed annotation to include a link to the page in the e-mail
	  and mangles e-mail adress.
	- Matze finally fixed all issues with sky in map2cs (well it works
	  although it could be improved a bit).
	- Matze fixed a sky issue in map2cs.
	- Christopher Nelson did the following:
	    - Added new function: AllWindowsHidden(), which returns true if
	      all windows in the system are currently hidden.
	    - Added new parameter for CaptureMouse which lets you specify the
	      component that wishes to capture the mouse. Note that only this
	      component or it's children will recieve messages until release
	      is called.  
	    - Fixed previously broken functionality where moving from a
	      component to the window wouldn't send out MouseEnter/Exit
	      messages. There was a slight bug in awsTextBox that was
	      breaking this. For future note:  if you want to get focus
	      messages and keep them, you must override all the mouse events
	      to return true. Otherwise the window will take back the focus
	      because it assumes that the component has not handled and does
	      not want focus.
	- Philip Wyett added AUTHORS and COPYING to .cvsignore.
27-Jan-2002
	- Norman Kramer added GetObjectRegistry() to iAws interface. Components
	  didn't have a chance to get their hands on the registry otherwise.
	- Norman also added a timer class to AWS to give pulses for cases no
	  new event is generated but actions should happen (think: keeping the
	  mouse pressed on a scrollbar button).
26-Jan-2002
	- Matze fixed skybox generation in map2cs
	- Added missing initialization of do_manual_colors to genmesh
	  object. This could cause wrong colors in some cases.
25-Jan-2002
	- Added a new GenerateBox() to iGeneralFactoryState. With this you
	  can automatically generate a box for a general mesh.
	- Extended the standard general mesh loader with a new BOX keyword
	  (for factories).
	- Added Get/SetMaterialWrapper() to iGeneralFactoryState. It is now
	  possible to set a material for the factory. When the mesh object
	  itself will not have a material it will use the one from the
	  factory.
	- Added MATERIAL keyword for the general mesh loader (for factories).
	- Completely removed the cube mesh object plugin and also its
	  associated loader. The functionality provided in the cube plugin
	  can be emulated completely with the genmesh plugin.
	  Keep in mind to call CalculateNormals() or use AUTONORMALS()
	  for genmesh so that the normals are calculated automatically.
	- Completely removed the surface mesh object plugin and also its
	  associated loader. Use genmesh.
	- Improved shape of the tree.
	- Eric Sunshine fixed campos.cpp so that it compiles on NextStep.
	- Eric Sunshine eliminated a compiler warning from rview.cpp.
	- Eric Sunshine eliminated compiler warnings from walkcmd.cpp.
	- Eric Sunshine fixed gtreeldr.cpp so that it now compiles on NextStep.
	- Eric Sunshine fixed a problem where both the engine and the Thing
	  mesh plugin were publishing the crystalspace.mesh.object.thing class,
	  which caused linking errors when attempting to load the plugin.
	- Matze hacked map2cs, because it had a problem: It was using CS
	  config files without loading vfs plugins etc...
	  This hack doesn't use vfs files anymore now, but reads CRYSTAL var
	  itself and composes $CRYSTAL/data/config/map2cs.cfg as config
          path...
	- Matze fixed map2cs skybox export by addiong MOVEABLE() to PARAMS
	  section, still the texture mapping seems incorrect
	- Brandon Ehle did various doc fixes with hbox and item bugs.
	- 'res' split the Windows Help files into two projects: docs and api.
	  Also added a script to create pretty TOCs/indices.
	- Christopher Nelson did the following:
	    - Made the system specializations more friendly. Now they exist
	      inside of the csosdef.h file for each platform. In order for an
	      implementation file to see them they should define
	      CS_SYSDEF_PROVIDE_HARDWARE_MMIO before the cssysdef.h include.
	      This will provide a structure called mmioInfo, and two
	      	functions: MemoryMapFile and UnMemoryMapFile.
	      These are platform dependent. mmioINfo is semi-opaque, meaning
	      that data and file_size members should ALWAYS be defined as they
	      are. It may contain as much additional information as the
	      platform requires.
	    - Modified the software demand pager so that it conforms to the
	      same template as the hardware one. Removed all the system
	      defines from the mmapio.h and mmapio.cpp files.
	    - Moved a couple more items around, moved all software portions
	      so that they won't be generated for hardware compiles.
	    - Moved the includes specific for mmap into the #ifdef so that
	      they'll only be included for modules that want them.
	    - Added definitions for the Mac.
	    - Made the inline function really inline.
	    - Fixed some silly bugs in the software demand pager: lack of
	      initializations, inverse check error, bad bit-field length
	      calculation, bad checks.
	    - Made a couple of fixes, and added hits and misses to the
	      software cache set so that you can tweak it.
	    - Killed the mods out of the classic Mac port.
	    - Added the mods into the next port, since that also works with
	      OS X stuff.
	    - Update, fixed a couple of dumb bugs: cache size was not
	      initialized before trying to allocate memory of
	      block_size * cache_block_size, so it was attempting allcoate
	      way too much RAM.
	    - Fixed Windows hardware memory-mapped I/O code. I was under the
	      impression that I should use one function when, in reality, I
	      needed to use another. Instead of simply using OpenFileMapping,
	      you must CreateFile(), then CreateMapping(), then MapViewOfFile().
	      This code has been tested and works.
24-Jan-2002
	- Jorge Acereda relaxed a limit in 3ds2lev that made it crash
	  with scenes with more than 100 textures.
	- Made general mesh factory a bit safer so that you can now
	  safely set the number of triangles after initializing the
	  vertices. Previously setting another number of triangles
	  would clear whatever was set in the vertex arrays before that.
	- Added experimental tree generator. This is basically an alternative
	  loader for the new genmesh mesh object. Instead of creating a
	  genmesh the usual way it will generate a tree instead. At this
	  moment this code is very experimental and not meant to be used.
	- Brandon Ehle added cal3d to CS tutorial.
	- Christopher Nelson did the following:
	    - Added headers for the new memory-mapped I/O stuff.
	      Note that it looks for some bogus defines. The only one I'm
	      pretty sure of right now is the WIN32 define.  
	      Note also, that there currently is no _HAS_MEMORY_MAPPED_IO_ in
	      the build, so that code will never compile, which means that
	      right now everything falls back to software. The hardware code
	      is in place, but I don't know if it will even compile because
	      I haven't tested it yet.
	      The mmio.cpp file compiles under MSVC, but I haven't tested it
	      under any other platforms.
	      Hopefully it doesn't cause any serious problems!  Note that the
	      code isn't quite complete yet.
	    - Added the implementation for memory mapped i/o.
	    - Filled in demand paging section for reading the cache. Uses
	        1. Old, inactive blocks.
		2. New block if we have space.
		3. Least-used block in bucket.
	    - Finished software demand pager.
	    - Removed inactive blocks list since it was unused.
	    - Simplified the cache system slightly, which removed one
	      additional indirection. This should result in a slightly faster
	      implementation.
	    - Modified the code slightly to include LookupIndex right inside
	      GetPointer. This will probably increase it's chances of being
	      inlined, and remove an additional function setup/teardown even
	      if it doesn't.
23-Jan-2002 
        - Jorge Acereda fixed LoadCamera() (crashed if the sector
	  wasn't found). Rewrote it to be more robust and coherent
	  (either loads all parameters or none).
	- Renamed all BOX_ constants in box.h to CS_BOX_. This includes
	  BOX_CORNER_..., BOX_EDGE_..., and BOX_SIDE_...
	- Renamed POL_FRONT, POL_BACK, POL_SAME_PLANE, and POL_SPLIT_NEEDED
	  so that they also start with CS_.
	- Renamed DECLARE_TYPED_QUEUE to CS_DECLARE_TYPED_QUEUE.
	- Created a new general mesh object. This is simply a static mesh
	  rendered with DrawTriangleMesh(). It doesn't support animation
	  except that you can directly alter the vertices in the mesh
	  if you want. For static objects that don't require any special
	  features like animation or such this is a good alternative to
	  3D sprites. The factory of this object contains the geometry
	  so it is very efficient to make multiple instances of this object
	  (just like 3D sprites).
	- Added a loader for the new general mesh objects. Added an example
	  to flarge so you can see how it works.
	- Added the ability to automatically generate normals for
	  the general mesh object.
22-Jan-2002
	- Created a crystal-docs mailing list. The doc annotation script
	  will now send mail to that mailing list.
	- Jonathan Tarbox updated the BeOS port so that it works again.
	- Matze fixed quoted slashes and makes e-mail unreadable for search
	  engines (avoid spammers) (for annotation).
	- Matze also added IP and user agent logging in the XML files.
	  Format of time has been modified.
	- Matze added a comment about circular list in doxygen comment
	  of csdllist.h.
21-Jan-2002
	- Tobias Brueckner suggested a fix for OpenGL with materials
	  that have no associated texture. The fix was incomplete
	  so I tried to complete it. At this moment the OpenGL renderer
	  no longer crashes but the color is still not used. Have
	  to investigate further.
	- Fixed a bug in the engine which caused crashes if a material
	  was defined without a texture.
	- Fixed the OpenGL renderer so that it now properly combines
	  the color defined in the mesh with the color specified in the
	  material (for materials which have no texture). This way it
	  behaves like the software renderer. Note that this is only
	  for DrawTriangleMesh for now.
	- Reformatted some new code in genmaze a little bit.
	- Fixed a bug in the engine in relation with materials without texture
	  in combination with mixmode settings different from CS_FX_COPY.
	- Eric Sunshine fixed spoofdir.php so that it now correctly interprets
	  PHP files within the virtual directories, rather than sending those
	  files back to the client's browser as raw text.
	- Eric Sunshine upgraded jobber.pl so that it can now run an optional
	  post-processing step on files generated for online browsing.  In
	  particular, it now runs a script which sets up the User's Manual and
	  the API reference to accept user-annotation.
	- Made csPortal::SetFilter() safer.
	- FINALLY fixed CAMERA objects for real. CAMERA objects will now
	  at last mirror correctly :-)
	  I fixed the problem by moving the object instead of the camera.
	  This is actually more logical and a lot easier. No more
	  transformation magic.
	- Eric Sunshine augmented spoofdir.php so that it now sends all global
	  variables to PHP files requested by the client; ensures that all
	  elements of the URI query-string are made available to the requested
	  PHP script; and ensures that $PHP_SELF is correctly set for the
	  requested script.  These modifications should now allow PHP scripts
	  requested via spoofdir to operate normally.
	- Eric Sunshine fixed the HTML tables which were being constructed by
	  CS/docs/support/annotate/annotate.php to display the annotations.
	  They were totally bonked; were not closed with </table>, and in some
	  cases, the rows were not introduced with <tr>.  Also fixed the colors
	  so that the text can be read.  Finally, made some formatting
	  improvements.
	- Eric Sunshine augmented annotate.php so that it now stores and
	  displays the date/time of annotations.
	- Matze did the following:
	    - Made output of annotate.php a little bit nicer.
	    - Removed the unneeded "click here to view your new entry".
	- Philip Wyett updated 3ds2lev.mak to add new msvc_libs info and
	  links. Also for msvc documentation.
20-Jan-2002
	- Tobias Brueckner did the following:
	    - Fixed a potential initialization bug in the GLX OpenGL
	      canvas (for Unix).
	    - Fixed a crash bug in the terrain mesh object when
	      BLOCKS(4,4) and GRID(4,4) was used (same values).
	- Matze added iSector::GetName().
	- Removed iSector::GetName() again after Matze added this.
	  Please use sector->QueryObject()->GetName().
	- Philip Wyett added initial documentation for successfully building
	  Crystal Space with Visual C++ .NET (MSVC 7) due to be released to
	  the public on the 13th, Febuary. The docs include a link to the new
	  msvc7_libs which is solely for users of MSVC 7.
	- Matt Reda did the following:
	    - Fixed memory leak and small error where simplept was reporting
	      itself as simple1.
	    - Moved pixel format #defines (CS_24BIT_PIXEL_LAYOUT) out of
	      pixtype.inc and into their own header (pixfmt.h). This was
	      necessary because the constants are also needed in the OpenGL
	      renderer (for procedural textures).
	    - Modified OpenGL proctexes to use the same framebuffer order
	      constants (CS_24BIT_PIXEL_LAYOUT) as the software renderer.
	    - Added new file to define CS_24BIT_PIXEL_LAYOUT for platforms
	      that do not explicitly define it. The values are assigned based
	      on endianness in order to maintain the old behavior.
	    - Changed CFLAGS.SOFT3D.PIXEL_LAYOUT to CFLAGS.PIXEL_LAYOUT since
	      these flags are now also used for the OpenGL renderer.
19-Jan-2002
	- Richard Uren made the following changes to isotest app:
	    - The code that was in isotest.cpp which looped through each
	      (x,y) pair was cleaned up and moved to
	      csGenMaze::ActualSolid.  csGenMaze::ActualSolid(x,y) returns
	      true if a cell is solid or false if it is empty - makes it
	      simple to render a maze.
	    - It adds csGenMaze::PrintMaze() which prints a random maze in
	      ascii. Maze debug code removed from isotest.cpp
	    - It adds csGenMaze::ActualWidth() & csGenMaze::ActualHeight()
	      which both return either the width or height of the maze
	      with walls taken into account.
	    - AddWall() in isotest.cpp had a few fixes to render walls
	      correctly.
	- Diablo-D3 (unknown@panax.com) rewrote the autoconf macro from 
	  scratch. The code is now cleaner, has more standard naming and
	  can even check for a minimum CS version number.
18-Jan-2002
	- Greatly enhanced and clarified the comments for the
	  csTransform, csReversibleTransform, and csOrthoTransform classes
	  in the reference manual.
	- Enhanced the reference manual documentation for csPlane3.
	- Changed the default behaviour of csPlane3::ClipPolygon(). It will
	  now by default clip the polygon on the negative side of the plane
	  (as opposed to positive before). You can still get the old behaviour
	  back by using reversed=true as the third parameter.
	- Added a static version of csPoly3D::Classify().
	- Changed the far-plane handling code to use Classify() instead
	  of ClipPolygon(). This means that polygons will no longer be
	  clipped to the far plane (which is inefficient anyway) but only
	  rejected/accepted. If a polygon is fully behind the far plane
	  it will be rejected.
	- Added SetFarPlane(), ClearFarPlane() and GetFarPlane() to
	  iCameraPosition. With this you can set the far plane for cameras
	  initialized from the camera position.
	- Added FARPLANE(a,b,c,d) keyword while parsing START() block in map
	  files. With this keyword you can now set the far plane in a
	  map file.
	- Removed the old csBeing references in walktest.
	- Reformatted crysbal.cpp a bit.
	- Updated apimod94.txi.
	- Slight code cleanup: removed all trailing spaces and tabs from
	  all lines in all source and make files throughout the entire project.
	  Note that this will most likely not result in a significant
	  FPS increase :-)
	- Matze added a first version of the annotated user manual hack.
	- Matze fixed GNUC_PRINTF in reporter.h.
	- 'res' fixed a single-line comment containing line-continuation
	  character.
17-Jan-2002
	- Jorge Acereda made the following changes:
	    - Added a comment to iGraphics2D::Write() to document the
	      fact that a negative background color will not draw
	      background.
	    - Fixed a bug in the MDL/MD2 converter. Short values where
	      incorrectly promoted to int when calling convert_endian().
	    - Changed some type definitions on things intended to be
              saved to disk to make them 64bit-friendly.
	- Removed the iCamera::SetUnmirroredCameraPos() function again
	  (and fixed iso engine for this). This turned out not to be the good
	  way to solve the bug of mirroring CS_ENTITY_CAMERA objects.
	- Added iRenderView::GetOriginalCamera(). This will return the original
	  camera before any space warping transformation occured.
	- Using the above new function it is now possible to correctly
	  render mesh objects with the CS_ENTITY_CAMERA flag set even through
	  space warping portals.
	- Matt Reda uncommented a DecRef() in CreateMipmaps() that was leaking
	  an iImage.
	- Philip Wyett removed a #warning for a comment (isoview.h) as it is
	  causing a fatal error in MSVC port.
	- Philip also reverted the change of 'res' yesterday as it was
	  forcing fullscreen by default. Later Philip re-implemented the code
	  with one fix and a minor alteration.
	- Philip fixed a typo in the msvc documentation pointed out by RobEG.
16-Jan-2002
	- Matt Reda fixed a memory leak in csIsoEngine::CreateMeshFactory().
	- Fixed a bug in iRenderView::ClipBSphere() in combination
	  with mirroring and a portal that clips geometry.
	- I discovered that there is a bug when a CAMERA object
	  (CS_ENTITY_CAMERA keyword, like a sky-box or sky-dome) is
	  mirrored. The position will then not be correct in the
	  mirror. To try to solve this bug I extended the iCamera
	  interface with SetUnmirroredCameraPos(). At this moment
	  the bug is still not fixed though.
	- Switched ball plugin to use ClipBSphere instead of ClipBBox.
	- Implemented slightly better edge drawing capabilities in
	  OpenGL renderer. This time the real edges of the triangles
	  are shown instead of what the OpenGL renderer will render
	  with glDrawElements. This is only for DrawTriangleMesh() at
	  the moment.
	- Philip Wyett fixed some msvc docs. Fixes pointed out by Wyatt Miler.
	- Andrew Zabolotny did an attempt to fix qsqrt() for gcc 3.0.3 and
	  later. If it causes qsqrt() to not work with gcc 2.95.2 and earlier,
	  it should be reverted back (although I don't believe the changes
	  will break it with earlier compilers).
	- Jorge Acereda did the following:
	    - Fixed a bug in the MDL/MD2 converter. Short values where
	      incorrectly promoted to int when calling convert_endian().
	    - Changed some type definitions on things intended to be saved
	      to disk to make them 64bit-friendly.
	    - Fixed building of iso engine after a few new methods were
	      added to iCamera.
	- 'res' fixed some window/fullscreen and palette issues in the ddraw
	  canvas.
15-Jan-2002
	- Changed iIsoEngine::CreateMeshFactory() to return
	  iMeshFactoryWrapper instead of iMeshObjectFactory.
	  It also no longer does an incref on the returned factory if
	  the factory already existed.
	- Added iEngine::SetClearZBuf() and GetClearZBuf(). With these
	  functions you can let GetBeginDrawFlags() return that the Z-buffer
	  has to be cleared every frame.
	- Added a new SETTINGS section in the map loader. This block will
	  be used to contain level specific settings for the engine and
	  other plugins. At this moment this block can only contain the
	  CLEARZBUF(yes/no) keyword which will call SetClearZBuf() with
	  the given parameter. Using this new keyword it is now possible
	  to make levels that don't have any other way to initialize the
	  Z-buffer. Normal CS levels should initialize the Z-buffer themselves
	  by making sure that the outer polygons of the level are rendered
	  with ZFILL mode. Sometimes this is not possible, or sometimes it
	  would be more efficient to let the hardware clear the Z-buffer
	  in one go and then use the Z-buffer (i.e. for space type levels).
	  That's why this flag is useful.
	- Matze fixed a serious bug in csMemFile: It wasn't increasing file
	  postion while reading. (Seems like no one ever used this...)
14-Jan-2002
	- Matt Reda added 3 OSX drivers (2 canvases and an audio driver)
	  and updated various Makefiles to support these changes.
	- 'res' changed error handling in the waveoutsd sound driver.
	- Fixed a bug in the OpenGL renderer which 'res' introduced
	  by forgetting to test if txt_mm is non-NULL in FlushDrawPolygon().
	- Eric Sunshine committed the following changes on behalf of Matthew
	  Reda <mreda@mac.com>:
	    - Augmented csosdefs.h, macosx.mak, NeXTFrameBuffer32.cpp,
	      next.mak, pixtype.inc, scf.cfg, and sof3d.mak in preparation for
	      brand new OpenGL, CoreGraphics, and CoreAudio drivers Matthew
	      wrote for MacOS/X.
	    - Added CS_SOFT3D_24BIT_PIXEL_LAYOUT which allows platforms to
	      manually specify the pixel layout used by the software renderer,
	      rather than making the decision based upon endianess.  Platforms
	      which do not specify this fallback to the old behavior of pixel
	      layout being determined by endianess.  Apple/NeXT uses this new
	      capability to specify a uniform pixel layout regardless of
	      architecture.  This change allows a nice speed increase in the
	      CoreGraphics driver by eliminating the need to post-process the
	      pixel data.
	    - Added PowerPC-specific versions of qsqrt() and qisqrt() for use
	      by Macintosh (and any other PowerPC-based computers).
	- Eric Sunshine fixed csThing::SetCacheName() so that it once again
	  compiles successfully on NextStep.
	- Eric Sunshine fixed csLightPatchPool::Free() so that it now compiles
	  on NextStep.  Compiler was making apparently bogus complaint about
	  invocation of Free() in the parent class' parent class.
	- Eric Sunshine fixed the next2d canvas so that it once again displays
	  the correct colors in 32-bit mode following changes by Matthew Reda.
	- Philip Wyett added a few of the newer msvc_libs files to .cvsignore.
13-Jan-2002
	- Matze changed cs-config --version to only output major number, the
	  --longversion outputs all.
	- Philip Wyett updated docs to reflect new release of msvc_libs
	  (0.92d).
11-Jan-2002
	- Matze removed DEBUG_BREAK_MSG again :) csString is using CS_ASSERT
	  now.
	- 'res' replaced CRASH macro with DEBUG_BREAK.
	- 'res' modifed the standard reporter to have a different default
	  behaviour in debug mode (CS_DEBUG).
	- 'res' fixed a missing ';' for csstring.h. Compiles with MSVC again.
	- 'res' changed _control87 to csControl80x87 after Matt Reda pointed
	  it out.
10-Jan-2002
	- Matze added an autoconf macro for CS to scripts/cs-config, no
	  documentation on usage yet, but I think it should be clear how to use
	  it if you know autoconf.
	- Matze fixed a strange compiler warning in csobject.cpp (I had to add
	  a iObject() to the initializer list in the copy constructor, anyone
	  knows why this is needed?)
	- Matze also fixed a few warnings.
	- Andrew Zabolotny fixed the OS/2 port of CS. Also renamed the
	  _control80x87 debugging function to csControl80x87 to avoid
	  conflicts with same name routine from emx libc.
	- RedEye Entertainment added #defines to walktest and squawk
	  to make MSVC ignore the csControl80x87 changes of Andrew.
	- 'res' made map2cs tutorial use a little bit less disk space.
	- Philip Wyett fixed new DEBUG_BREAK_MSG and added define so MSVC
	  can compile without errors.
	- 'res' fixed csControl80x87 so that it works again with MSVC. 'res'
	  then removed the MSVC specific #ifdef's from walktest and squawk.
	- 'res' added DEBUG_BREAK macro and removed #define DEBUG_BREAK_MSG.
	- Philip Wyett added 'required' to the msvc documentation for the
	  BisonFlex library as it is needed for successful linking.
9-Jan-2002
	- RedEye Entertainment fixed make errors introduced by Andrew yesterday.
	- Eric Sunshine applied a much saner patch to the makefiles to combat
	  the breakage caused by AndyZ's makefile change.  Reverted a patch
	  which Philip Wyett made to cygwin.mak since the new saner patch
	  should make the cygwin.mak patch unnecessary.
	- Matze added DEBUG_BREAK_MSG macro to cssysdef.h in order to avoid the
	  STR_FATAL macro in csstring.h (perhaps this will also useful for
	  other apps). Problem here is win32 as I had to use printf (or is
	  there a way to access the reporter wihtout having a pointer to
	  iObjectRegistry?).
	- Matze added operator == const char* to csString.
	- Matze added operator = for various types to csString.
	- Smaller cleanups for csString - there's still MUCH room for
	  optimisation.
8-Jan-2002
	- Reverted a change to the png loader plugin (in the saving part)
	  that 'res' made some time ago. It caused quality degradation when
	  writing a big bunch of thumbnails using gfxtest.
	- Eric Sunshine fixed a problem introduced by AndyZ when he modified
	  os2gcc.mak.  His change unconditionally set the makefile SHELL
	  variable to the empty string for all platforms except OS/2, thus
	  resulting in the "make: -c: Command not found" error message
	  experienced by non-OS/2 ports.
	- Eric Sunshine fixed the next2d canvas so that it once again builds
	  successfully.  It broke on 2001/12/27.
	- Eric Sunshined changed the next2d canvas so that it no longer bothers
	  to register the iEventHandler implementor with the event queue in
	  NeXTDriver2D::Initialize(), since its superclass'
	  csGraphics2D::Initialize() already does so.  (No need to register the
	  same event handler twice.)
	- Eric Sunshine eliminated several compilation warnings from AWS.
	- 'res' did a fix to the png image loader.
	- Andrew Zabolotny fixed os2gcc.mak so that it always overrides
	  SHELL with $(COMSPEC) to avoid a problem with Unix shells.
7-Jan-2002
	- Corrected the includes in the collision detection howto.
	- Extended iLoader::LoadTexture() with a 'register' parameter which
	  is default false. When set to true the loader will register and
	  prepare the texture and material automatically. This is only
	  for the version of LoadTexture() that accepts a 'name' and
	  'filename'.
	- Modified the simple2 tutorial for the above change (i.e.
	  simplified it).
	- Renamed VEC_FORWARD and other similar defines to CS_VEC_FORWARD
	  (i.e. follow CS conventions). Also updated apimod94.txi for this
	  change.
	- Renamed DEFAULT_LIGHT_LEVEL to CS_DEFAULT_LIGHT_LEVEL.
	- Renamed NORMAL_LIGHT_LEVEL to CS_NORMAL_LIGHT_LEVEL.
	- Removed CS_ENTITY_BACK2FRONT as this flag is obsolete and now
	  handled by the render priority system. It was not implemented
	  anyway.
	- Deleted obsolete include/iengine/terrain.h include file. This
	  was apparantly forgotten a long time ago.
	- Rationalized many of the engine Doxygen comments. i.e. added
	  more documentation for possible CS_... values where they can
	  be used. Also updated some out-dated documentation and also
	  added missing entries.
	- Updated docs so that it no longer says CS only works with
	  Python 1.5.2.
	- Matze changed aws to use bison/flex if present.
	- Matze included a hacked flex skeleton file to avoid an msvc error,
  	  where it can't find unistd.h.
	- Philip Wyett updated links in msvc documentation to correspond
	  with location of latest msvc_libs.
	- Philip also added necessary instructions for building CS Python
	  plugin with versions of Python above 1.5.2.
	- Additionally Philip reports:
	    - Removed *.flx and *.bsn files showing up in the AWS MSVC project.
	      This is no longer needed after MatzeB adding of flex skeleton and
	      no longer needed for custom build step within MSVC.
	    - Updated docs to take account of AWS/Flex changes made by MatzeB
	      and added instructions for re-generating sllex.cpp etc. from the
	      command line rather than from inside MSVC.
	  This makes dealing with AWS and MSVC alot easier - Thanks Matze. :-)
	- Philip also added info about Creative EAX 2.0 to MSVC build docs
	  with link to Creative developers website from where the SDK can
	  be obtained.
5-Jan-2002
	- Fixed a bug with the OpenGL renderer where it was trying to
	  store a value of 0, 1, or 2 in a boolean :-)
	  The result of this bug was that portals which required clipping
	  (like for the console portal command) didn't actually clip at
	  all.
4-Jan-2002
	- Eric Sunshine fixed a bad booboo from some time ago which clobbered
	  csTimer by mutating it into csTicksr.
	- Matze added python.cex to 'make install'.
	- Wouter Wijngaards fixed a spelling error in python.cin.
3-Jan-2002
	- Fixed a bug with the portal console command so that the
	  portal back to the original level is now correct.
2-Jan-2002
	- Fixed software renderer after 'res' broke it.
	- Fixed csparser after 'res' broke it.
	- Fixed OpenGL renderer after 'res' broke it.
	- After fixing the csgfx makefile so that it actually uses all
	  .cpp files in the dir I reenabled the csCreateXORImage() in
	  software, OpenGL, and csparser.
	- Added initialization of 'radius' to partgen.cpp.
	- Fixed partgen/GetRadius() to first call SetupObject(). This will
	  make sure the radius returned by iMeshObject->GetRadius() is correct
	  even before the particle system is first drawn.
	- Fixed iMeshWrapper::PlaceMesh() so that it correctly transforms
	  the bounding sphere of the object it is trying to place. Previously
	  it was doing the inverse transform instead.
	- Further fixed PlaceMesh() so that it finally works as intended.
	- Optimized PlaceMesh() so it first checks if the sector has already
	  been added before doing all the calculations.
	- Changed iMeshWrapper::GetRadius() to also consider potential
	  children. In that case it will calculate the union of all the
	  bounding spheres of the children. As a consequence this means that
	  PlaceMesh() will now also consider children.
	- Fixed a bug in the iRenderView::ClipBSphere() and ClipBBox()
	  routines. They both would handle the portal clip plane inverted
	  which means that objects were culled wrong. The best place to
	  see this bug was to do 'portal sydney' in the console of WalkTest.
	- Matze did a small hack to cspython.mak so it links with -util if
	  python lib matches python2%.
	- 'res' did the following on the OpenGL renderer:
	    - When using keycolored textures, z buffer is only used for
	      non-transparent pixels.
	    - Slight visual improvement of keycolored textures w/ bilinear
	      filtering.
	    - Fixed bug "Using software renderer proctexes with OpenGL causes
	      a crash".
1-Jan-2002
	- Fixed bug [497461] from sf.net. This bug prevented joystick
	  button handling to work properly. Reported by J.F. Miller.
	- Eric Sunshine fixed the following documentation-related problems:
	    - Texinfo mark-up errors (misplaced @end itemize and mistyped
	      @nonterm).
	    - Overfull and underfull `hbox' warnings from TeX.
	    - Invalid use of @c comment on first line of cs-unix.txi,
	      cs-mac.txi, and cs-dos.txi.
	- 'res' updated a few places in CS so that a default image is used
	  when an image file cannot be loaded:
	    - An image file can't be loaded.
	    - A NULL image is registered with the software and OpenGL texture
	      managers.

Please see "history.old" for less recent historical entries.
