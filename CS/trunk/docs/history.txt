The history order has been reversed so that new features are at the top.
30-Jul-2000
	- Samuel Humphreys did the following:
            - Little re-organisation of dtsimple, improved comments
            - Updated comments in dtsimp.cfg
            - Added ability to create csTextureHandles from preprepared
              iTextureHandles (in preparation for something new).
            - Updated comments in csengine.cpp with regards multi-context support.
            - Added a conditional to the delete [] Scan.GlobalCMap to prevent
              destruction if this resource is shared in the software renderer
              texture manager.
	    - Added a new function to the software texture cache which removes
              all cached_textures dependent on a texture handle
            - Commented out last reference to proc textures within soft3dcom.cpp 
	      as now protex3d.cpp takes care of uncaching and only when the proc 
              texture is updated. Dtsimple suffers slight performance degradation,
              ..perhaps add another proc_texture flag
              i.e. CS_TEXTURE_PROC_UNCACHE_ALWAYS.. or would this be an unwanted
              complication? An app which utilises and benefits from this is 
              forthcoming.
28-Jul-2000
	- Norman Kramer fixes the x2d canvas so that the title is set
	  to the right window.
	- Added csPoly3D::ComputeNormal() and ComputePlane() as static
	  functions with the polygon given as a parameter.
	- Fixed a big bug in the lighting routines which could cause
	  some polygons not to be reached by a light even though they
	  should have been affected. Turned out the distance between the
	  light and the polygon was not computed right.
	- Fixed another severe bug in CheckFrustum which affects both
	  lighting and radiosity. It appeared that back-face culling
	  of polygons was done too late with the effect that even
	  invisible polygons would fill up the c-buffer (c-buffer does
	  not care about orientation of polygons). This bugfix seems
	  to remove the last lighting errors from dmburg. There are still
	  a few black borders here and there but I see no more real
	  lighting errors.
	- Norman Kramer added csFrustum::BatchClassify() which is meant
	  to be used if you plan to do a number of classifies with the
	  same frustum. It is faster that way.
	- Andrew Zabolotny did the following changes:
	    - Added detection of XFree86/OS2. Now softx driver compiles
	      and works well on OS/2 with shm and vidmode extensions! :-)
	    - Added a command-line option: "-canvas=xxx" will tell the
	      renderer which canvas plugin to use. If "xxx" does not
	      contain dots (e.g. something like "x2d", "dive" and so on)
	      "crystalspace.graphics2d." is prepended.
	    - Fixed a bug in softx driver related to fullscreen extensions.
	      Close() calls LeaveFullScreen() but if we close the driver
	      due to a failed initialization dpy and window variables were
	      not initialized.
	    - Removed GetVFS method from iSystem. Use QUERY_PLUGIN_ID instead.
	      I have fixed all drivers to use QUERY_PLUGIN_ID.
	    - Removed iUnixSystem interface. Moved the functionality needed
	      to decide whenever to use shm, simdepth etc to the respective
	      X11 drivers (moved to a new file video/canvas/common/x11comm.cpp
	      which is included in all X11 drivers that really need it). In
	      general, system-dependent part of csSystemDriver becomes thinner
	      and thinner. This is good :-)
	      Due to extensive changes through many canvas plugins some may
	      encounter syntax errors during compilation. Use the softx
	      driver for reference, which compiles and works fine.
	    - Fixed the linex2d driver (it wasn't working properly after
	      the last fullscreen change).
	    - Changed TEX_2D, TEX_3D and TEX_2D3D into FOR_2D(yes|no)
	      FOR3D(yes|no). Using these two keywords you can achieve same
	      effect as with older three. Besides, csstdldr plugin supports
	      them for a long time.
	- Fixed two bugs for compiling in Unix after Andrew's changes.
	- Fixed embedded iPolygonMesh classes for both csPolygonSet
	  and csSprite3D so that they are correctly specified now.
27-Jul-2000
	- Martin Geisse converted some more docs to texinfo format
	  (including the much asked for worldfmt.tex file).
	- Added TEX2D keyword to parsing of textures in world file.
	  So you can mark textures as being 2D only.
	- Added TEX3D and TEX2D3D keywords to complete the functionality.
	- Added a missing menu to the world format texinfo documentation
	  file.
	- Alex Pfaffe fixed visibility determination for CS in the terrain
	  engine.
	- Fixed sndsoft.mak makefile after Paul Garceau broke it
	  yesterday.
	- Martin Geisse fixed a compiler warning in polyset.h.
26-Jul-2000
	- Paul Garceau fixed sndsoft.mak makefile for Win32/MingW.
	- Started completing support for the rapid collision detection
	  plugin and also completing support for the interfaces needed
	  to do good collision detection. As soon as this is finished
	  the old colldet dir in csengine will be removed.
	- csPolygonSet and csSprite3D also implement (through embedding)
	  iPolygonMesh now so that they can be used with the CD system.
	- Norman Kramer fixed Yet Another csFrustum::Classify(). This
	  function must hold the record for one of the most difficult
	  ones to get right :-)
	- Norman Kramer updated the name of the glide 3d target drivers.
	- Thomas Hieber did another update to map2cs:
	    - Now it will properly detect wrong plane definitions in
	      the map file and eliminate these. (Workaround for problems
	      in the editor!)
	    - Significant speedup when removal of hidden surfaces
	      is wanted. (using bounding boxes for brushes and polygons)
	    - Skyboxes are now being written using the CAMERA() modifier,
	      so they don't move any more, while walking.
25-Jul-2000
	- Thomas Hieber did a small maintainance release to Map2CS
	  (labeled 0.82):
	    - Unique names for entities, if no explicit name has been given.
	    - Manual sectors will now use the name of the entity instead of
	      "s" plus a number.
	    - If the entity has not been assigned a name, it will be called
	      "e" plus a number.
	    - Skybox now uses the new keyword "SKY". The result is
	      already  better than the previous version, which used things,
	      but sky is still being moved  (which shouldn't happen
	      any more). The problem probably is,  that skyboxes from
	      map2cs are usually being looked at through a portal, and
	      maybe that code in the engine is still broken.
	    - Cleaned up and reformatted some odd code I came across.
	- Norman Kramer did another fix to csFrustum::Classify().
	- Engine plugin is now working!
	- Extended iWorld with a few functions from csWorld.
	- Extended simplep app with more functionality. Still doesn't show
	  any 3D yet.
	- Scott Bowden continued work on the Unreal convertor (t3d2cs).
	  The following changes have been made:
	    - Added the friend function 'dMsg(char *message)'
	      to all classes in t3d2cs. It is used to print a
	      debug message, and can be disabled.
	    - Rearranged the internal data representation used
	      in most of the classes in t3d2cs. Mainly this was
	      a mass rename of a lot of variables to d_[var] to
	      specify that it is internal data. This allows me,
	      for example, to have a public function in tLocation
	      called .x() to get the x value without causing confusion.
	    - Added the tRotation class [tRtation.h]. Should work
	      fine.
	    - Add the tPolygon and tPolyList classes [tPolygon.h /
	      tPolyLst.h ]. They do not fully work yet. I am aware
	      of this fact :)
	    - Added in the tLcation [tLocation (8.3, grr!)] class to
	      handle brush locations. I have also moved setFloatVal
	      to setDoubleVal and changed the handling of precision
	      variables accordingly to doubles instead of floats.
	- Big update to csphyziks from Michael Ewert. Two changes:
	    - First are joint angle constraints.  So you can say a
	      joint only swings between 0 and 180 degrees, like an
	      elbow.
	    - Second is connecting a jointed body to a kinematically
	      controled entity, that moves however the user
	      specifies.  This is used to attach a jointed body to
	      other game-world objects that are not controlled by
	      physics, like a character or door or whatever.  The
	      correct physical behavior will still result even
	      though one entity isn't in the physics engine.
	- Fixes from Mike Bond to linex2d and glx2d canvas plugins
	  related to his latest changes. These fixes restore keyboard
	  focus when the window pops up.
24-Jul-2000
	- Started work on new engine plugin. This plugin will link statically
	  with csengine but will itself be a plugin that can be used
	  by apps instead of linking to csengine directly. This method
	  serves as the future prefered base for working with CS and it
	  also allows to dynamically load the (large) engine plugin into
	  memory. This engine plugin also makes it easier to conform to
	  the LGPL. Not working yet.
	- Added new 'simplep' application which will eventually be similar
	  to 'simple' except that it will use the engine plugin instead
	  of statically linking to 'csengine'.
	- Added csWorld parameter to csPolygonSet (and thus to csThing
	  and csSector as well) to help the removal of the current_world
	  static variable.
	- Removed the iostream dependency in t3d2cs app because I don't
	  have the C++ libraries here.
	- In WalkTest console: bound 'd' to 'emode front2back' which will
	  mainly make sure that it behaves like it used to in the past
	  except that it doesn't toggle. Bound 'shift-d' to 'emode
	  back2front' which is the prefered engine mode for portal worlds.
	  Bound 'alt-d' to the new 'emode zbuffer' mode. Bound 'ctrl-d'
	  to 'culler next' to switch between the various cullers (cbuffer,
	  quad3d, and covtree).
	- Added new CS_POLY_SPLIT flag to csPolygon3D which is set for
	  a polygon that is split by a BSP split. Previously the flag
	  CS_POLY_NO_DRAW was used for that but this is now used for what
	  it is actually ment: i.e. to indicate a polygon that should not
	  be drawn. This fixes the new CS_ENGINE_ZBUFFER engine mode.
	- Got an updated doc to csPhyziks from Michael Ewert.
	- Andrew Zabolotny did the following changes:
	    - Added dynamic loader support for DJGPP. Added required
	      detection routines to bin/dosconf.bat. If you have libdl
	      installed (available from Crystal Space ftp site, and in
	      near future from ftp.simtel.net) it will set
	      USE_SHARED_PLUGINS to yes, otherwise to no.
	      Also you may want to use shared versions of libpng, zlib,
	      libjpeg. The dosconf.bat script looks for these libraries,
	      and if available turns on the usage of shared version of
	      respective libraries. You may have as well just one library
	      in shared version, and other twos - in static version,
	      each one is detected individually.
	    - Removed someone's #ifndef YY_NO_NULLIFY_YYVAL from
	      support/gnu/bison.sim. This is a very incorrect change since
	      YYVAL is not always an int, in my case (csstdldr) it is a
	      structure, and as such cannot be assigned NULL.
	      A better approach would be to do:
		#ifdef YYVAL_ZERO
		  yyval = YYVAL_ZERO;
		#endif
	      but in any case I don't see the need for it - I don't get
	      any warnings about uninitialized variables, at least with
	      pgcc 2.95.2 in optimize mode.
	    - Further work on the new loader.
	    - Fixed a warning in csFrustum::Classify().
23-Jul-2000
	- Cleaned up some coverage mask tree statictics.
	- Added csWorld::SetEngineMode() with which you can control how
	  the engine will render the world. The setting is there but
	  actual engine functionality is still lacking. There is also
	  an auto-detect mode (which is default) which will try to detect
	  the best engine mode for the loaded world.
	- Implemented the three engine modes now.
	- Cleaned up csWorld::Draw() and csWorld::DrawFunc() (added new
	  StartDraw()).
	- IMPORTANT change! csWorld now has a function GetBeginDrawFlags()
	  which returns flags that the engine requires for G3D->BeginDraw().
	  Since BeginDraw() is called by the application it is now the
	  responsibility of the application to actually call this function
	  and or the returned flags with the flags the application wants to
	  use. This is used because some engine modes require the Z buffer
	  to be initialized when BeginDraw() is called.
	- Added csWorld::SetCuller() to set the 2D/3D culler to use. This
	  replaces the functions EnableQuad3D, EnableCovTree, and
	  EnableCBuffer. c-buffer is now default but will only be used
	  when the engine mode is equal to CS_ENGINE_FRONT2BACK. And this
	  depends on the loaded level.
	- Removed console commands 'cbuffer', 'quad3d', and 'covtree'
	  and replaced with 'culler' command.
	- Added console command 'emode' to switch between the different
	  engine modes. Options are 'auto', 'back2front', 'front2back',
	  and 'zbuffer'.
	- In an effor to minimize the use of the global current_world
	  variable from csWorld I added a world pointer to csRenderView.
	- Gary Haussmann added code (for OpenGL renderer) to try and
	  determine the proper lightmap blend mode automatically.
	  With the blend mode set to 'auto' the code will draw polys in both
	  the SRC*DST and 2*SRC*DST blend mode, comparing the two and
	  picking the more appropriate one for use in drawing lightmaps.
	  Also added extension detection #ifdef's to assume Mesa-style
	  extension detection on Linux with GCC, even if the MESA_*
	  macros are not defined.
	- Gary Haussmann added some info the the lightmap blend mode comment
	  in opengl.cfg. Now the comment includes the newly supported
	  'auto' lightmap blend code.
	- Gary removed superfluous diagnostic messages from glx2d.
	  With the addition of autodetect for lightmap blends, the OpenGL
	  code is starting to spew out a lot of initialization diagnostic
	  messages :)
	- Norman Kramer removed the empty destructor in cssfxldr.
	  The same problem like the one in the graphics loader lib.
	  If the lib is bound to a plugin then it crashes on program exit
	  (class destructor is called in atexit).
22-Jul-2000
	- New 'txt' map mode nearly works. Texture mapping is not ok
	  though.
	- Changed clear color for 'fclear' command. Now it is the same
	  color on all systems.
	- Scott Bowden added the first version of t3d2cs which is an
	  app that will read Unreal t3d files and produce CS files.
	- Scott Bowden put back the entry.t3d file so that people can
	  work on it for the t3d2cs convertor.
21-Jul-2000
	- Added an extra 'txt' map mode to do an orthographic texture
	  mapping map. Not functioning yet.
	- Alex Pfaffe removed the ddgHistogram dependency for CS. This
	  fixes the problem with the file that could not be found.
	- Wouter Wijngaards enabled terrain again after Alex fixed
	  the missing file problem.
	- Wyatt Miler updated the Mac project files.
	- Wyatt also added a couple of comma's to the dungeon plugin so
	  the mac compiler doesn't die. Check lines 116 and 119. I'm not
	  sure how this was supposed to work anyway.
20-Jul-2000
	- Alex Pfaffe did an update to the terrain engine. Should now
	  be faster since less vertices are sent to the 3D rasterizer.
	- Because Alex forgot to commit some files I disabled the terrain
	  engine for now.
	- Wouter Wijngaards improved the csQuadTree3D code. Faster and
	  more reliable for TestPolygon.
	- Norman Kramer fixed csFrustum::Classify(): corrected the
	  CS_FRUST_PART, still in #if 0 - i guess jorrit want to double
	  check this :) 
	- Fixed csFrustrum::Classify() again!!
	- Changed lightmap caching to make it more robust and system
	  independent. This means that the format has changed completely.
	  If you don't do -relight or -recalc CS will simply ignore
	  the old lightmaps (i.e. everything becomes black).
	- Added csSector/csWorld::FindLight() with CS_ID as a parameter.
	  This can be used to locate a light with a given id.
	  This is mainly useful for the lightmap cache.
	- Added back face culling to the test for csQuadTree3D. Still
	  doesn't solve the culling bugs though.
	- Solved a very old bug (in data/config/autoexec.cfg) where movement
	  keys didn't autorepeat in 3d-move and map mode.
19-Jul-2000
	- Updated 'simple' tutorial and 'simple' application a little bit.
	- Extended 'simple' application to load a 'sprite1' template from
	  standard.zip and show it. Also added a new tutorial 'simple2.txi'
	  to show how this sprite stuff works.
	- Removed some non-existing functions from
	  include/csparser/csloader.h.
	- Added csLoader::LoadSpriteTemplate() function to load a sprite
	  template from a file.
	- Reverted Norman Kramers patch to csFrustum::Classify() because
	  it seems to be wrong.
	- Wyatt Miler enabled TGA image format for Mac as some levels now
	  are using it, and it works.
	- Wyatt also updated the Macintosh project files.
	- Wouter Wijngaards disabled some debug prints in csQuadTree3D.
	- Wouter also set radiosity.stoppriority from 25.0 to 0.1 now,
	  since radiosity is fixed by the Classify changes.
	- Added support for orthographic projection in the csWireFrame
	  class. This is going to be used for three types of orthographic
	  maps (X, Y, and Z). These maps are going to be used for debugging
	  mainly (i.e. PVS).
	- Added 'mapproj' console command to change the projection mode
	  for the 'map' command to either persp (default), x, y, or z.
18-Jul-2000
	- Did an optimization in csFrustum::Classify() as suggested
	  by Norman Kramer.
	- Fixed another bug in csFrustum::Classify() where it would
	  misclassify adjacent frustum/polygon as covered instead of
	  outside.
	- Fixed another bug in csFrustum::Classify() where it would
	  misclassify overlapping frustum/polygon as outside instead
	  of partial. In this case the bug was that the edges either
	  fully cover each other or intersect at corners.
	- Renamed cmd_Door to entity_Door in WalkTest.
	- Added entity_Light and entity_Rotate entities. With entity_Light
	  you can control the animation for a light at activation time.
	  With entity_Rotate you can have an object that rotates all
	  the time or one that rotates at activation time.
	  entity_Rotate has the following syntax:
	  	KEY ("entity_Rotate", "x,y,z")
	  (with x,y,z the x, y, and z angles in degrees).
	  These angles represent the rotation in one second.
	  entity_Light has the following syntax:
	  	KEY ("entity_Light", "sector,light,r1,g1,b1,r2,g2,b2,time")
	  Sector and light are the name of the sector and light to find
	  the light that is controlled by this entity. The two given
	  colors are the start and end color (start is at activation time).
	  'time' is the time (in miliseconds) to go from start to end.
	- Fixed explosion bounding box (partsys) so that it isn't updated
	  every frame. This makes it faster but slightly less accurate.
	  It is possible (but not very likely) that the partsys will
	  not be drawn even if it is visible.
	- Added a bounding box to csPolyTreeObject. This bounding box
	  is used to fix a bug that when the camera is inside the bounding
	  box of a dynamic object, the object cannot be seen.
	- Moved updating of the dynamic object to csPolyTreeBBox.
	  Makes the code for csSprite, csThing, and csParticleSystem simpler.
	  Note that visibility culling for particle systems still doesn't
	  work correctly at the moment. I'm investigating.
	- Removed support for LIGHTX in worlds. The parser will still
	  recognize the keyword and say that it is obsolete.
	- Removed support for SCRIPT, ACTIVATE, and TRIGGER in the world file
	  (keywords still recognized). The scripting system is now obsolete
	  and replaced with the new entity system in WalkTest.
	- Added support for named lights in the world file parser.
	- Completely removed support for the obsolete csscript from CS.
	  This is a significant change with lots of small effects at various
	  places.
	- 'activate' console command is now completely obsolete and
	  doesn't work anymore. Use 'action' instead which fires the
	  new entity system.
	- Fixed a bug in csengine which caused the new csQuadTree3D
	  optimization not to work at all. Note that this optimization
	  still doesn't work at the moment.
	- Removed an assert in map2cs to make converting some badly
	  formed levels easier :-)
	- Frank O' Connor updated the VC project files for the removal
	  of csScript.
	- Wouter Wijngaards commited code made by Mike Bond
	  <mbond@cox.rr.com>. It enables fullscreen mode for the line X
	  2d driver, the opengl X 2d driver, and the software X 2D driver.
	  I have verified that software mode now runs fullscreen OK
	  (Xfree86 4.0, 32 bpp, 640x480). Also, the border of funny pixels
	  at the edge of the screen is not caused by this commit.
	  Note that the line USE_XFREE86VM = yes should be added to
	  config.mak before compiling this, if you have XFree86
	  (most people running linux use XFree86).
	  Use alt-enter or 'fullscreen' console command to switch between
	  fullscreen and not.
17-Jul-2000
	- Added LGPL notice to a few .inc files.
	- Change to OpenGL renderer so that lightmaps are only cached
	  when lighting is enabled. This speeds up rendering considerably
	  when you disable lighting. This speed increase suggests that
	  sending over new lightmaps to the hardware is slow. So combining
	  lightmaps makes sense probably.
	- Samuel Humphreys did the following changes:
	    - Fixed perftest so that it exits after finishing tests.
	    - dtmesh.cpp (I think) didnt take into account
	      mesh.use_vertex_color = false; and so segfaulted into
	      perftest..I have fixed it I think :)
	- Extended the fix from Samuel (to dtmesh.cpp) to some other
	  places in the same code.
	- Paul Garceau modified mingw.mak to fully accomodate Working
	  Static Library Build.
	- Fixed a bug in the parser with SKY and SKYDOME commands.
	- Fixed two bugs in csFrustum::Classify. Fixing these bugs has
	  the unfortunate side-effect of breaking lighting a bit (not
	  completely, but shadow calculation has more errors now). But
	  we will fix those later.
	- Fixed a third bug in csFrustum::Classify which fixes lighting
	  again :-)
	- Added visibility culling system to particle systems. This
	  will make them visible even if you turn on the c-buffer.
	  Note that this will probably not work in all cases now because
	  the bbox calculation in particle systems is not completely
	  ok at the moment.
	- The limitation of 1000000 texels for lighting has now moved
	  from the engine to the software renderer. This means that for
	  OpenGL, D3D, and Glide, this limitation is gone and you can have
	  bigger lighted polygons. Note that there is still a limitation
	  though. If the lightmap is bigger than 256x256 it will not
	  be used. This is to avoid problems with some cards that have
	  this texture size limitation.
	- Wouter Wijngaards completed bounding box support for particle
	  systems.
16-Jul-2000
	- Samuel Humphreys did the following changes..
            - Added two new procedural textures to dtsimple. This is to complete
              dtsimple as a test suite for all the current procedural texture 
              implementations and flags. If you enable both test1 and test2 then
              all the procedural textures get printed to the screen with DrawPixmap
              as this uses a different rendering pathway than DrawPixmap to the 
              texture. These changes highlighted a fundamental bug in the 
              implementations within the software driver.
            - Fixed all known bugs in the software and opengl implementations of
              procedural textures. Cleaned up the code, things are looking much
              better now, and I don't anticipate needing any further overhauls.
              Three features remain to be done: mip mapping and the ability to 
              update sub rectangles of the texture buffer. These changes will be
              propagated up into the mip map as subrectangles also. Lastly the
              flag CS_TEXTURE_PROC_MIPMAP_ON_SYNC needs to be implemented.
	      Then a few optimisations...
            - Changed the metaball texture so instead of clearing the screen, it
              prints the bot_view texture as a background...this gives an 
              unexpected but IMHO seriously cool effect. Check it out :)
            - Removed the opengl 16bit procedural texture pathway for now. As its
              very slow on my machine.
	    - Added some emacs fontification friendly comments to .inc files
15-Jul-2000
	- Wyatt Miler updated the Macintosh project files.
14-Jul-2000
	- Brandon Ehle restarted work on Crystal Script (python).
	  New layout is interface based, which allos for more dynamicism
	  and lower runtime memory requirements.
	- Tried to use csQuadTree3D for doing 3D visibility culling
	  (in contrast with c-buffer which does 2D culling). It doesn't
	  work yet though.
	- Added 'quad3d' console command to enable the new culling system.
	- Extended the Dumper class with a set of Memory() functions that
	  are useful to estimate how much memory some geometry uses.
	  It only calculates the static memory (i.e. no runtime information
	  like light patches, or transformed coordinates, ...). And it
	  only gives an estimate.
	- Extended csHashSet so that you can give the size of the hashmap
	  that is used. Also added a few example primes that can be used
	  for good sizes.
	- The number of estimated bytes for all world geometry and all
	  bsp/octrees is calculated and displayed at startup.
	  In addition the number of texels (not bytes) of all loaded
	  textures is also displayed.
	- Optimized csRAPIDCollider so that it only considers unsplit
	  polygons (i.e. the original polygon and not the ones that are
	  caused by a BSP or octree split). This speeds up CD init, speeds
	  up CD itself and also reduces memory consumption somewhat.
	  For the large level that I'm creating this reduced the number
	  of triangles in the CD data from 47871 to 19294.
	- Got a networking update to Blocks from Rene Dudfield.
	    - New Server=yes/no option in blocks.cfg.
	    - Blocks can now be either a server or a client.
	    - Check out apps/blocks/todo.txt for more information.
	  Note that this is work in progress. Currently you cannot really
	  do a network game yet.
	- Wouter Wijngaards improved the spiral particle system. It
	  looks a little nicer but not yet very good.
13-Jul-2000
	- Removed 'solidbsp' command from documentation.
	- Added SetMainFrustum to csQuadTree3D to change the frustum for an
	  already created csQuadTree3D.
	- Started work on using csQuadTree3D as a 3D visibility culler.
	  Not finished.
	- Added csCamera::Perspective() which calculates the perspective
	  projection for a 3D point given a camera.
	- Added csCamera::InvPerspective() which calculates the inverse
	  perspective projection for a 2D point (with a given Z).
	- Removed the csPolygon2D::AddPerspective... versions that take x,y,z
	  parameter and only kept the csVector3 ones.
	- Added PROCEDURAL and PERSISTENT keywords to textures in the world
	  file. With these you can make a texture procedural. If you make a
	  texture PERSISTENT as well as PROCEDURAL you can render on parts
	  of the texture and the previous contents will still be there.
	- Wouter Wijngaards added csMaterial class. Is now used by polygons.
	  The API is backwards compatible though, only resulting in a
	  seperate material for each polygon if used the old way.
	- Wouter added bumpmap class, it will store a bumpmap in different
	  formats given a source image.
	- Wouter improved fountain command. Now uses spark
	  texture and has 400 particles, nice color and rotation; which
	  looks nice.
	- Wouter also fixed rain so that the texture should no longer be
	  upside down, snow had the same problem and should be fixed too.
12-Jul-2000
	- Added new csHashSet class. This is a class that you can use
	  to add objects and to test if some object is already in the
	  set. It uses csHashMap so it should be fairly quick.
	- Use the new thing visibility system for lighting too. This
	  should speed up the calculation of static lighting a lot
	  (and dynamic lighting if things cast shadows). This new system
	  uses the csHashSet class from above.
	- Greatly cleaned up the csSector::RealCheckFrustum() code and
	  added some comments.
	- Fixed a small bug in engine/Dumper where it crashes for polygons
	  having no name.
11-Jul-2000
	- Paul Garceau did an update to the Mingw makefile.
	- Andrew Zabolotny did some fixes to dos configuration batch
	  files.
	- Seth Galbraith fixed one of the files that Andrew fixed.
	- Changed csPolygonSet::GetBoundingBox() to fill in a csBox3
	  instead of two vectors.
	- Implemented support for dynamic bounding boxes in polygon trees
	  (octrees and BSP trees) for moveable and detail things.
	- Added is_visible flag for a thing.
	- Addd GetNumSkyThings() and GetNumThings() to csSector to get
	  the number of sky and normal things.
	- Removed 'home' and 'other' pointers in csThing because they
	  were not used and obsolete.
	- Detail and moveable things are now only drawn when visible
	  through the c-buffer. This greatly speeds up rendering big
	  levels with lots of small detail objects.
	- Removed support for 'solidbsp' for rendering. It wasn't properly
	  working in any case. Also removed 'solidbsp' console command.
	- The 'thing' toggle to render things (console command) now doesn't
	  affect the static thing anymore. This means that on a level using
	  an octree only detail and moveable things will not be rendered
	  when this flag is set.
	- Cleaned up the very important csSector::Draw() a little and added
	  more comments to make it clearer.
	- Fixed a bug in the derived iterator change from yesterday (in
	  csObject). It was not actually iterating over derived types
	  but doing something completely bogus instead. This fixes the
	  crash bug that I had in the new WalkTest entity system.
	- Renamed csBusyList to csEntityList.
	- Fixed a bug with flat-shading. This could cause crashes
	  with for example funky.zip (recent bug).
	- Made csPolygonSet::GetBoundingBox() more efficient.
	- Fixed csPolygonSet::GetBoundingBox() and CreateBoundingBox()
	  for polygon sets that contained nothing but curved surfaces.
	  These fixes visibility algorithm using c-buffer and curved
	  surfaces.
	- Samuel Humphreys did the following changes:
	    - Fixed bug in software drivers where if the viewing rectangle was
              set to the window co-ordinates, polys where being unnecessarily
              clipped. When the clipper clips to x=0,y=0 double precision
              calculations on occasion gave slight negative values. The software
              drivers silently rejected these polys. I have added an EPSILON
              fuzz so vertex +/- EPSILON is tested instead. I notice that the 
              draw fog polygon member doesnt test at all for the cases where
              vertices exceed screen dimensions, perhaps its safe now to do away
              with these tests altogether?
10-Jul-2000
	- Samuel Humphreys did the following changes:
            - Added messages to distinguish between backbuffer and software GL
              implementations
            - Cleared out debugging junk I left in.
            - Adjusted Zbuffer clear...
            - Added new Clear (RGBPixel &colour) function to csImageMemory. This 
              clears the image to the specified colour.
	    - Implemented new procedural texture flag: CS_TEXTURE_PROC_PERSISTENT
              This has been implemented for opengl backbuffer & software versions
	      aswell as the pure software drivers...see documentation for further
              details. Only mip-mapping to deal with now.
            - Fixed the software 32bit RGB transpositions problem, I think :)
              32bit software procedural colours should now be correct. Please 
              people on big endian machines check this!!
            - Optimised the GL back buffer implementation so it now clears Zbuffer
              and/or screen with QUADS rather than the whole screen ;).
            - Fixed the garbling which occured on the first frame in opengl.
            - Various changes to dtsimple. Currently the meta balls texture is 
              set to be persistent over the top of the squawk background, so the 
              metaballs smear over the texture rather than being cleared each frame
	- Extended csObject::GetIterator() with a new parameter that indicates
	  if you want to iterate over derived objects as well. Normally
	  the iterator that is returned only iterates over the objects of
	  exactly that type. The parameter is defaulted to false so normally
	  no code should be modified for this change.
	- Added a new entity model to WalkTest. csWalkEntity is the main
	  abstract superclass. You can attach a csWalkEntity subclass to
	  any sector or thing in CS. In WalkTest there is a function
	  called ActivateObject() which will activate all entities that
	  are attached to some object. The main WalkTest loop (NextFrame)
	  will also call NextFrame() on all 'busy' entities. By default
	  entities are not busy but an entity can push itself on that list
	  at activation time (and release itself later when it is no longer
	  active).
	- Added 'action' command to WalkTest which will replace the old
	  'activate' command (for the obsolete scripting system). This
	  'action' command will trigger ActivateObject() in the parent
	  of the first polygon it can find in front of the camera (less
	  than 3 units away). Bound 'a' to this new command (meaning
	  'activate' is unbound now). WARNING! This new system is not
	  operational yet and crashes still.
	- Added first subclass of csWalkEntity: csDoor. This entity
	  represents a door that can be opened or closed. To use
	  this in world files add a key/value KEY ("cmd_Door", "X,Y,Z") to
	  the thing that you want to let act as a door. The x,y,z location
	  is the location of the hinge.
8-Jul-2000
        - Samuel Humphreys did the following changes:
            - Fixed the opengl back buffer procedural texture so it now displays
              curves and sprites non-inverted. The back buffer uses an inverted
              orthographic projection matrix, which was being overwritten by the
              DrawTriangleMesh routine.
            - Added emacs friendly comments that these .inc files are really C++
              files.
            - Fixed a bug in the shared initialisation and open routines in the 
              opengl renderer, the backbuffer proc texture looks much better.
            - Cleaned up a little the shared initialisation and open routines
              in the software renderer
            - Upped the res on the level_texture, and changed the start position 
              to look at it
            - The shared open code in the software driver now properly sets the 
              z_buf_mode variable
            - Cleaned out all the csCamera->SetPerspective calls from the engine..
              its now the app writers responsibility to update the camera on
              context resize events.
            - Added preliminary documentation for the procedural texture subsystem.
            - Small corrections to some txi files.
            - Added new flags to itxtmgr which I have written documentation for.
              Now all I need to do is write the code for it :)
	- Seth Galbraith did some fixes to some of the DOS setup scripts.
7-Jul-2000
	- Moved alpha setting from portals to polygons. In most cases this
	  setting only makes sense for portals but you can use it on a thing
	  as well (and for a second skybox for example). Extended
	  csPortal::CheckFrustum() so that it has the alpha as a parameter
	  now because it needs it.
	- Fixed Map2CS so that it works on big endian machines and also
	  works on processors that don't allow writing short/long on
	  odd addresses.
	- Norman Kramer fixes glide canvas so that it now intercepts
	  WM_WINDOW_CLOSE messages from X.
6-Jul-2000
	- Samuel Humphreys did the following changes:
            - Removed indentation from bin/dosupd.bat..hope the unix eol stuff
              doesnt break it entirely.
            - Added the last procedural texture. Now you can watch levels on the 
              wall. Just execute 'dtsimple flarge' to see flarge. To navigate
              hold down the control key while cursoring around.
            - Added a method to LanguageLayer to allow delaying of setting of 
              camera. This will also allow one to change the camera.
            - #ifdefed with OPENGL_1_2 the GL_UNSIGNED_SHORT_5_6_5 data type,
              which Mesa supports but windows doesn't. The native 16bit display
              path for procedural textures now works again.
            - Added a temporary box to the top left corner of dtsimple which should
              be the same colour which proc textures clear to...this is for 
              testing...
            - Clumsily fixed the problem with the 32bit software procedural 
              textures. From canvas/common/protex2d.cpp:197 I have added byte
              shuffle code which probably isn't the best way to do it, and 
              probably not correct for all endianness and frame buffer pixel types.
              Hopefully Eric or AndyZ will take a look and do it properly :)
            - The portal procedural texture now correctly appears.
            - Cleaned up proc texture detection in sftcom3d.cpp.
            - Added more comments to remind myself what Ive done.
	- Added csPortal::CompleteSector() as a virtual function. This
	  function is responsible for creating a new destination sector
	  if this sector would be NULL. It can be used by subclasses of
	  csPortal to dynamically create sectors.
	- Added csPortal::Warp() to warp one vector.
	- Simplified csPortal by removing IntersectSphere and FollowSegment.
	  Those functions are now specific to csSector.
	- Added CS_ENTITY_CAMERA flag for csThings. With this flag set
	  things will only be rotated to the camera and not translated.
	  This is useful for skyboxes and skydomes.
	- Added SetMixMode and GetMixMode to csGouraudShaded so that you
	  can now render a gouraud shaded polygon with another mixmode.
	  This can be used to create transparent things and so on.
	  Note that the engine needs a little better support to actually
	  support transparent things in a good way (i.e. sort them the
	  right way).
	- Added CAMERA() keyword to the world file format for csThings.
	- Added MIXMODE() keyword to the world file format for polygons.
	- Added additional support for 'sky' objects in a sector. These
	  are basicly just things like the others but you have the guarantee
	  that they will be drawn first with Z fill before anything else
	  is drawn.
	- Added functions AddSky(), RemoveSky(), GetFirstSky(), and GetSky()
	  to csSector to manage sky objects.
	- Added support for SKY() keyword in 'ROOM' and 'SECTOR'. This
	  keyword behaves EXACTLY the same as a normal THING except that
	  it will be added as a sky object.
	- Added new support for sector commands in WalkTest. If you add
	  something like KEY ("cmd_whatever", "...") to a sector in the
	  world file then WalkTest will recognize it as a command to
	  execute. Other apps will ignore the keyword. There is currently
	  only one command: KEY ("cmd_AnimateSky",
	  "<thing-name>,<dir>,<speed>"). When this command is present
	  WalkTest will animate the sky object indicated with <thing-name>.
	  The rotation <dir> will be 'x', 'y', or 'z'. The speed will
	  be relative to 1 meaning one full rotation in 1 second.
	- Norman Kramer made some glide fixes: not only was the hardware
	  framebuffer deleted in the derived class (which was stupid already)
	  - we (read "i") did it here again :) when the doublebufferstate
	  is changed we now call FinishDraw until the framebuffer is
	  unlocked (this is important if DoubleBuffer() is called
	  between BeginDraw()/FinishDraw()) - this will ensure the
	  framebuffer is relocked upon next LFB access and points to the
	  right buffer.
	- Norman also removed deleting of hardwareframebuffer at exit, wonder
	  why it did not segfaulted earlier - weird (for glidex2d).
5-Jul-2000
	- Samuel Humphreys did the following changes:
	    - Rearranged iGraphics2D/3D so that related functions are
	      grouped... ;)
	    - Fixed transparent images in dtsimple which showed up with
	      the opengl backbuffer proc texture.
	    - Fixed text rendering on the backbuffer proc textures.
	    - Fixed an omission from my last commit.
	    - Simple optimization in the gl font server gives a 12.5x
	      speed up for font rasterization :)
	    - Also skips rasterizing spaces.
	- Travis McIntosh added curve radiosity support as well as an
	  updated interface into the Bezier math.
	- Travis did a quick bug fix in radiosity (SetKeyColor -> GetKeyColor).
	- Norman Kramer fixed memory leak in csTree, now treenodes delete
	  their children from last to first because csVector::Delete shifts
	  the contents of the vector.
	- Norman also added cscmdTreeRemoveAll to remove all treeitems
	  (for csTree in CSWS).
	- Received new halo code from FragDance for OpenGL. Cleans up a
	  little but otherwise works the same.
4-Jul-2000
	- Samuel Humphreys did the following changes:
	    - Backbuffer now works without being inverted. Re-reversed the
	      orthographic projection from its default setting of reversed,
	      for the duration of rendering to the back buffer.... this
	      seems strange that the opengl driver has this setting.
	    - Sets glviewport in the back buffer 3d driver within the
	      begin/finish draw calls.
	- Eric Sunshine fixed csQuadTree3D so that it compiles on NextStep.
	  The embedded node_pos_info class was triggering a compiler bug (for
	  some reason).  Also added some missing 'const' qualifiers and
	  cleaned up the files.
	- Eric Sunshine hacked Squawk to keep it from depositing precalc_info
	  files where they are not wanted.
	- Norman Kramer removed const qualifier from GetCorner, now
	  compiles again (csQuadTree3D).
3-Jul-2000
	- Seth Galbraith cut skybox in half to save 200 KB for Squawk.
	- Andrew Zabolotny did the following changes:
	    - Renamed everywhere the term "transparent" to the correct
	      term "keycolor". It was a misunderstanding because the term
	      "transparent" is related to both alpha transparency and key
	      color. Now "transparent" is used only where alpha
	      transparency is involved.
	    - Changed naming convention of csScan_X_draw_scanline_xxx
	      routines. I tried to make the names shorter and at the same
	      time add the information of what the routine actually does
	      into its name.
	    - Added a lot of new scanline routines:
		- Textured Gouraud-shaded polygons with key color
		  transparency.
		- Textured flat-shaded polygons with key color transparency.
		- Textured flat-shaded polygons with table-driven effects (FX).
		- Flat-color flat-shaded polygons with table-driven
		  effects (FX).
		- Flat-color Gouraud-shaded polygons with table-driven
		  effects (FX).
	      The routines were added for all supported modes (8, 15, 16,
	      32 bits). Note that not all of them were tested (time for a
	      G3D test app?) thus some may be buggy. If you find bugs, tell
	      me and I will fix them.
	    - Added support for 15-bits modes to MGL 2D driver.
	    - Fixed 8-bit fog. There was a strange error in there (strange
	      because it was in its initial state (nobody has changed
	      anything) and still gcc generated wrong code (unsigned shift
	      instead of signed)). I wonder how it worked when I initially
	      wrote it.
	    - Implemented alpha-mapped textures support. Preliminary though,
	      several details about how the Z-buffer is to be filled are
	      unclear for now. The routines work surprisingly fast, and were
	      implemented for all supported modes (8, 15, 16, 32 bits).
	      The following drawing modes support per-pixel alpha-blending:
		  - DrawPolygon() with Z-fill and Z-use modes.
		    This means you may use alpha-mapped textures for walls and
		    things; the engine does not support this too well for now.
		  - DrawPolygonFX() supports just flat-shaded alpha-mapped
		    textures. That is, if the texture has an alpha channel,
		    the blending modes and Gouraud shading flag are ignored
		    for now.
	      Usage is pretty simple: no changes to world file is required
	      for this. Simply create a texture with alpha-channel and save
	      it to a format that supports alpha channel (I have used .PNG).
	      Then use it as a regular texture; anywhere you use it (walls,
	      things and sprites) it should work.
	- Andrew also replaced REGISTER_STATIC_CLASS with REGISTER_STATIC_LIB
	  which is shorter (in CSWS).
	- Andrew removed REGISTER_STATIC_CLASS (csVFS) from cswssys.
	  Note that things like this should be done ONLY from applications.
	  No library should register static SCF classes and/or plugins because
	  several libraries may require same class, and the class will be
	  registered several times in the best case.
	- Andrew fixed dnapp to link as a console executable (vs. GUI).
	  Also replaced all Sys->Printf() with regular printf's. There
	  is no much sense in using Sys->Printf from console apps.
	- Norman Kramer added missing CheckAlpha() calls to various parts
	  in the CS project (which Andrew forgot to do).
	- Norman also copied GetAlphaMap() to csTextureMM from
	  csTextureManager and renamed GetAlphaMap to GetAlphaMapData since
	  it clashed with the new GetAlphaMap from iTextureHandle.
2-Jul-2000
	- Samuel Humphreys did the following fixes to dtsimple:
	    - Thanks to AndyZ's mem debugger, plugged all the memory leaks
	      I'd introduced :) From (cough) ~1.5k to 0.
	    - Also fixed a couple of memory leaks in the software texture
	      manager while in 8bit.
	    - Fixed the crasher in dtsimple in 8bit software mode.
	    - Context close messages now sent on procedural texture canvas
	      destruction.
	    - Fixed various comments.
	- Cleaned up the code to load and save a recording. The format
	  is now endian correct and somewhat shorter.
	- Added 'clrrec' command to clear the recording in memory.
	  Multiple recording sessions will otherwise just be appended to
	  each other.
	- Made the size of the saved recording smaller again by not
	  repeating the sector name if it is the same as the previous
	  entry.
1-Jul-2000
	- Added a primitive recording function for LinuxTag. Will clean
	  it up for general use later (in WalkTest).
	- Added 'loadrec' and 'saverec' commands to load and save
	  a recording. VERY primitive now...
	- Wouter Wijngaards improved the snow texture.
	- Wouter also worked on the 3D quadtree (which is possibly
	  going to be used for fast visibility).
	- I decreased the snow particle size from 1 to .7.
30-Jun-2000
	- Andrew Zabolotny fixed class tree a little in CSWS.
29-Jun-2000
	- Added csOctree::GetLeaf() function that calculates the leaf where
	  the given position is in.
	- Added db_curleaf console command to WalkTest. This command
	  shows the dimensions of the current octree leaf you are in. This
	  command only works if the current sector has an octree.
	- Fixed a severe bug with the octree. The vertices were not correctly
	  transformed to camera space anymore!
	- Continued further debugging work on the PVS.
	- Samuel Humphreys did several changes to dtsimple. Mostly
	  rearrangements for aesthetic reasons. Big improvement in software
	  but still problems with OpenGL.
	- Andrew Zabolotny added support for statically linking NULL 3D
	  renderer.
	- Andrew reverted back a recent change from Thomas which
	  breaks SCF. Unused static variables are simply not included
	  with GCC.
	- Andrew also removed unneeded inclusion of math2d.h.
	- Andrew fixed a serious bug in the DOS rawvideo driver that
	  caused CS to crash on many videocards in many videomodes.
	- Andrew fixed a BigBug{tm} in the line and null renderers. inv_cmap
	  wasn't initialized to NULL.
	- Andrew added support for dithered textures to the NULL 3D
	  renderer.
	- Robert Bate added 'class' after the friend declaration in
	  csHashMap so that the file will compile with CW Pro5.
	- Robert also did some changes so that some files will compile
	  on both CW Pro5 and Pro5.
	- Paul Garceau added the latest version of mingw.mak.
28-Jun-2000
	- Norman Kramer fixed FindFirstSelectedItem and FindAllSelectedItems
	  in CSWS.
	- Rene Dudfield <illumen@yahoo.com> contributed a set of Python
	  scripts for Blender to convert Blender entities to CS objects.
	  You can find them in CS/scripts/blender. There is also a README
	  there which explains how to use the scripts in Blender.
	- Fixed a severe crash bug with dynamic lights and room.zip. The
	  fix is not very satisfactory because I simply worked around the
	  bug. When I have a little more time this needs to be investigated
	  better.
	- Eric Sunshine removed obsolete reference to CS/newdocs from subs.mak.
	- Eric Sunshine changed the location of specification of the null,
	  infinite, and line renderers in the makefiles.  Compilation of these
	  renderers is now controlled by user.mak since they are platform-
	  independent.  They are no longer controlled by platform-dependent
	  makefiles.
	- Eric Sunshine eliminated a few compilation warnings in wscs3d, and
	  a linking problem on NextStep caused by (unnecessarily) including
	  the simple.h header.
	- Samuel Humphreys resolved texture mapping for the mirror stand
	  in dtsimple.
27-Jun-2000
	- Samuel Humphreys fixed dtsimple:
	    - Fixed the portal...it was the gouraud shading which broke it,
	      turned it into a mirror for the time being.
	    - Fixed non-coplanar wall.
	    - Re-organised the lighting, added a stand for the view screen.
	    - Added a vector texture space method to csPolygon3D.
	    - some other trivialities :)
	- Andrew Zabolotny fixed wscs app so that it will not create two
	  instances of 3D and 2D drivers (and will not crash at exit due
	  to this) and it will also refresh the screen correctly (implemented
	  missing support for that in CSWS).
	- Andrew also changed ForceFullRedraw() into a more flexible
	  pplInvalidate() call which allows for invalidating a random screen
	  rectangle instead of entire screen.
	- Andrew fixed OS/2 video driver so that BeginDraw/EndDraw can be
	  called multiple times before doing Print() in double-buffered mode.
	- Andrew fixed common graphics class so that it can be Close()'d
	  without being Open'ed and so that it won't crash if we just create
	  it and destroy instantaneously.
	- Wyatt Miler updates the Mac project files.
	- Fixed the bug when that could cause severe problems when
	  loading a world for which the octree isn't valid anymore. The
	  partially loaded octree was not cleaned up properly.
	- Fixed a compile bug in DDraw61::GetClipper().
	- As from a suggestion from Terrence Stewart I implemented
	  csPolygon2D::FillZBuf() which will fill the Z buffer for
	  that polygon (and not do texture mapping). This is now used
	  after drawing a portal so that sprites drawn in the same
	  sector as the portal cannot accidently go inside the portal
	  contents (Z buffer cannot be used in case of floating portals
	  for example). This z filling for portals is optional though.
	  It is a (slight) overhead and it is not needed for many
	  kinds of portals (like outgoing portals on sector walls).
	  WARNING! Currently only the software renderer supports this
	  Z-buffer filling.
	  WARNING! If you enable this option it requires sprites to
	  be correctly placed in all the sectors that you want the sprite
	  to be visible in. If you don't do that and you use a ZFIL portal
	  then you'll get the effect that the sprite will be clipped to
	  the portal.
	- Removed a number of 'bool' settings in csPortal and replaced them
	  with a single public 'flags' field. Also removed a lot of the API
	  calls to set those flags. All access should be through the 'flags'
	  field instead. A portal now accepts the following flags:
	  	CS_PORTAL_CLIPDEST:	clip geometry in destination sector.
		CS_PORTAL_ZFILL:	do z-fill after rendering portal.
		CS_PORTAL_WARP:		warp space (set with SetWarp()).
		CS_PORTAL_MIRROR:	mirror space (automatically set).
		CS_PORTAL_STATICDEST:	static destination for portal.
	- Added support for new ZFILL keyword in world files. This can
	  be used inside a WARP statement (which is actually a bit badly
	  named but this describes various portal settings).
	- Moved CLIP from polygon to WARP because it belongs with the other
	  portal settings. This will break the 'room.zip' level but it
	  is easy to fix.
	- Added csFlags::SetBool(unsigned,bool) to set all values in a mask
	  to either 1 or 0 depending on the bool value.
	- Eric Sunshine adjusted the 'clean' target in the dnapp makefile.
	- Eric Sunshine implemented support for CSKEY_PADPLUS, CSKEY_PADMINUS,
	  CSKEY_PADMULT, and CSKEY_PADDIV in the OpenStep port.  Andrew
	  recently added these constants to csevent.h.
	- Eric Sunshine fixed a couple copy/paste errors in NeXTDelegate.cpp
	  for NextStep.
	- Thomas Hieber made REGISTER_STATIC_CLASS really static (removes a
	  linker warning on msvc).
	- Thomas moved HINSTANCE to win32 instead of having it in exeentry/
	  dllentry. This removes a warning on the linking of libAll. Anyway
	  it looks better that way too. Maybe we should eliminate exeentry
	  and dllentry completly. These files seem pretty redundant to me
	  (it could all be done by win32.cpp IMHO).
	- Thomas also did a few minor cleanups here and there and a few
	  minor changes to VC project files.
	- Norman Kramer fixed CSWS (cstree) so that it compiles on Windows
	  now.
	- Norman added support for ZFILL_ONLY in glide renderer.
	- Martin Geisse cleaned up the code of the wave-out sound driver.
26-Jun-2000
	- Fixed memory leak while building BSP/octree.
	- Eric Sunshine eliminated a slew of compilation warning in cstree.cpp
	  and cswstest.cpp.
	- Eric Sunshine fixed several broken comments in sft3dcom.h.
	- Eric Sunshine worked around an OpenStep compiler bug triggered by
	  cstreend.h where unlinkable code is generated when an inline method
	  calls a second inline before the compiler has seen a declaration of
	  the second method.
	- Eric Sunshine implemented support for CSKEY_PADPLUS, CSKEY_PADMINUS,
	  CSKEY_PADMULT, and CSKEY_PADDIV in the NextStep port.  Andrew
	  recently added these constants to csevent.h.
	- Eric Sunshine brought simple.txi (the Simple tutorial) up to date.
	- Eric Sunshine fixed several problems in the CrystalClear tutorial
	  document.
	- Release of 0.16r001.
	- Andrew Zabolotny removed the ugly inclusion of iworld.h and
	  isector.h from icmdmgr.h which in turn means that cssys depended
	  on csengine.
	- Andrew also removed the unneeded inclusion of lightdef.h from
	  3D renderers. lightdef.h should go into include/csengine in the
	  end.
	- Andrew added a small NULL 3D renderer for use with simple CSWS
	  programs. It contains a full-featured texture manager and
	  displays only 2D pixmaps, the DrawPoly* functions are empty.
	  It is very small and is useful if you want to statically link
	  in a small project that makes use of CSWS.
	- Norman Kramer did a coding style change to csTreeNode.
	- Norman fixed glide renderer after Jorrit broke it yesterday.
	- Norman added ForceFullRedraw() to CSWS for integration of CSWS
	  into usual 3D programs.
	- Norman added wscs3d app to demonstrate how to combine CSWS
	  with the 3D engine. Press 'd' when running this app to open
	  a CSWS dialog.
25-Jun-2000
	- New tree control in CSWS from Norman Kramer.
	- Did an experiment for speeding up OpenGL by putting the setup
	  commands for DrawPolygon in a display list. Did not seem to
	  help much though.
	- Added CALLBACK_MESH in the engine to support edge drawing for
	  meshes.
	- Added iGraphics3D->GetObjectToCamera(), GetClipper(),
	  GetPerspectiveCenter(), and GetPerspectiveAspect() to
	  fetch those respective entries from G3D.
	- Implemented mesh drawing for DrawTriangleMesh in WalkTest.
	  This means that when you press 'e' (to enable edges) you'll
	  see the edges of all rendered triangles for terrain, curved
	  surfaces, and 3D sprites in green.
	- Eric Sunshine fixed a bug in the 'depend' target of the BeOS
	  OpenGL makefile.
	- Eric Sunshine eliminated some compilation warnings in the OpenGL
	  renderer.
24-Jun-2000
	- Received another lighting patch from Travis McIntosh.
	  Dynamic lighting on curves should be better now with no
	  artifacts.
	- Disabled multi-texture extension support again. At the moment
	  it is not given much performance benefits (at least for me)
	  and there are some bugs (i.e. disabling texture mapping doesn't
	  work and blending mode isn't correct).
	- OpenGL::DrawPolygon was doing some unneeded work. I removed
	  it so this should speed it up a little.
	- Moved scaling of lightmap from OpenGL::DrawPolygon to the
	  lightmap cache so that this doesn't have to be repeated
	  every time.
23-Jun-2000
	- Made tweening default again for sprites. Also added missing
	  initialization of the tween setting in sprite templates.
	- Received a new patch from Travis McIntosh to speed up dynamic
	  lighting for curved surfaces.
	- Eric Sunshine made another fix to Dungeon plug-in in response to a
	  fix by Martin to Eric's fix to Martin's fix. :-)  Martin's most
	  recent change triggered an internal NextStep compiler error again.
	  *Hopefully* this fix will be acceptable to all compilers.
	- Wouter Wijngaards added the start for a bounding box implementation
	  for particle systems that will help for visibility culling of them.
	- Eric Sunshine fixed a bug in map2cs where it failed to assign unique
	  names to the Things which represent curved surfaces.  This had the
	  unfortunate side-effect of causing the engine to cache several
	  lightmaps in the zip file with the same name.  For instance, in
	  Nicholas Blumire's funky.zip map, the lightmap name "room__c2_0"
	  appeared nine times.  This, in turn caused csArchive to to fail to
	  write the zip file when changes were made to it following the
	  initial lightmap creation (for instance, if -revis was used later).
	  In fact, once the archive was marked as dirty, csArchive would
	  attempt and fail to write it out each time an entry, such as a
	  lightmap, was read from it.  Since there are nearly 4,400 lightmaps
	  in funky.zip, this meant that csArchive tried and failed to write
	  out funky.zip nearly 4,400 times during a single run of WalkTest!
	- Eric Sunshine fixed a few compilation problems with vfs.cpp which
	  manifested when VFS_DEBUG was defined.
	- Eric Sunshine added a new class to csUtil named csMemFile.  This
	  class represents a raw memory buffer which implements the iFile
	  interface.
	- Eric Sunshine reworked the code which caches PVS information in the
	  zip file so that it now works via the new csMemFile class rather
	  than working directly with VFS.  This change had the remarkable (and
	  intended) effect of reducing time taken to cache PVS information
	  from nearly 25 minutes to less than 1 second!
	- Eric Sunshine reworked the code which caches Octree information in
	  the zip file so that it also works through the new csMemFile class.
22-Jun-2000
	- Got a new patch from Travis McIntosh.  This patch finished
	  dynamic lighting for curved surfaces. Still a bit slow but it
	  works very well already. WARNING! Please do -relight or -recalc
	  on levels that have curved surfaces! The lightmap format has
	  changed (lightmap got bigger).
	- I discovered that sprite tweening is enabled by default. Because
	  this makes things slower I disabled it by default and added a
	  function csSprite3D::EnableTweening() with which you can enable
	  it again. I also added csSpriteTemplate::EnableTweening() and
	  provided support for a new TWEEN keyword in the world file for
	  both sprites and templates.
	- csPolygonSet::GetBoundingBox() will now try to create the bounding
	  box if it doesn't exist.
	- Rene Dudfield experienced a strange crash in WalkTest which seemed
	  to have been caused by using 'fabs'. I replaced most occurances
	  of 'fabs' with the 'ABS' macro throughout the source to avoid this
	  problem. Maybe this problem is cyrix related? (Rene has a cyrix
	  processor).
	- Eric Sunshine made the definition of the explicitly sized types
	  int8, uint8, int16, uint16, int32, and uint32 optional in
	  cstypes.h.  Definition of these types is now controlled by makefile
	  and C-preprocessor variables named CS_BUILTIN_SIZED_TYPES.  This
	  change was necessary in order to support BeOS since the BeOS system
	  headers already define these types.
	- Wouter Wijngaards fixed rain and snow so that particles will not
	  disappear on slower systems.
	- Eric Sunshine eliminated a compilation warning in the Dungeon
	  plug-in which was reported by BeOS compiler.
	- Eric Sunshine eliminated a couple compilation warnings in the
	  OpenGL renderer.
	- Eric Sunshine fixed a typographical error in cssysdef.h
	  (OS_BEOS --> OS_BE) to allow the networking code to compile on
	  BeOS.
21-Jun-2000
	- Norman Kramer added new SetViewArea for gridviews to retsrict the
	  area they can show.
	- Added 'colors' to the tesselated version of a curve so that
	  drawing curves will be much more optimal. This means that we'll
	  have to update this whenever the lightmap or tesselation changes
	  of course.
	- Use DrawTriangleMesh now for drawing curved surfaces. Still not
	  complete though. I need to implement correct clipping (currently
	  the curve will always be clipped which means you'll get the
	  non hardware accelerated version of DrawTriangleMesh) and vertex
	  fog is also not implemented. Note it should already be somewhat
	  faster since lighting is now cached with the tesselated curve
	  and is only recalculated when either lighting or the tesselation
	  changes.
	- Removed AddBoundingPolygons from csCurve because it is obsolete
	  and needs to be implemented otherwise.
	- Added GetObjectBoundingBox(), GetCameraBoundingBox(), and
	  GetScreenBoundingBox() to csCurve. This is now used to cull
	  away curved surfaces that are off-screen or off-portal and
	  to indicate if they should be clipped. This should greatly
	  speed up curved surfaces now and use DrawTriangleMesh to its
	  (current) fullest potential.
	- Implemented vertex fog for curved surfaces too.
	- Eric Sunshine repaired the Dungeon plug-in following Martin's fix
	  to Eric's fix.  Martin's fix triggered an internal compiler error on
	  NextStep, so Eric re-fixed it in a manner which should suit everyone.
	- Eric Sunshine eliminated a "signed vs. unsigned comparison"
	  compilation warning in Blocks which was reported by MacOS/X Server.
	- Fixed the alpha test in perftest which stated that it would
	  do texture mapping while it didn't.
	- Added a patch from Thomas Krug to enable perspective correct
	  texture mapping for OpenGL DrawPolygonFX. The patch is disabled
	  though becuase it is slower (does a divide) and also not consistant
	  with how DrawTriangleMesh behaves. I think this is a feature
	  that needs to be optional.
	- Norman Kramer did a dramatic speed increase in the glide renderer.
	  Performance went up with 0.1 FPS!!! :-)
	- Eric Sunshine eliminated a warning about 'yyval' possibly being used
	  uninitialized in support/gnu/bison.sim.
	- Eric Sunshine made the following changes to the Dungeon plug-in:
	    - Eliminated 65 apparently bogus compilation warnings about 'this'
	      (or 'a' in some cases) possibly being used uninitialized.  This
	      warning appeared each time a parser rule assigned to $$ and then
	      used $$ in a following expression.  The warning appears to have
	      been completely bogus since it's obvious from simple inspection
	      that $$ had a valid value before being used in the subsequent
	      expression.  This warning was issued by at least three different
	      versions of the GNU C++ compiler which I used.
	    - Modified the makefile so that it automatically recreates
	      dnp_tab.cpp and dnp_tab.h from dnp.y if they are missing or out
	      of date.
	    - Modified the makefile so that it uses CS's support/gnu/bison.sim
	      to generate the parser in dnp_tab.cpp since our own bison.sim
	      has been fixed to eliminate the warning about 'yyval' being used
	      uninitialized.
20-Jun-2000
	- Changed csDynLight::SetColor() so that it will work without
	  having to call Setup() later. This is MUCH more efficient if you
	  have a dynamic light that doesn't move but only changes color.
	  It is also more consistant.
	- Changed default halo parameters a bit to more resemble a cross.
	- Added SNOW, RAIN, FIRE, and FOUNTAIN keywords to the world
	  file format.  For a simple fountain use:
		FOUNTAIN 'fount1' (ORIGIN (x,y,z) TEXTURE ('green.gif'))
	  For snow use:
		SNOW 'snow' (BOX (x1,y1,z1,x2,y2,z2) TEXTURE ('snow.jpg'))
	  There are many more options.  See docs/incoming/worldfmt.tex for a
	  list.
	- Wouter Wijngaards added a fountain particle system.
	- Added 'fountain' console command to create a fountain.  The first
	  argument is the texture (default is 'green.gif' until we find a
	  better splash texture).  The second argument is the number of
	  particles (default is 50).
	- Wouter added a fire particle system.
	- Added 'flame' console command to create a flame.  The first
	  parameter is the texture (default is 'raindrop.png'). The
	  second argument is the number of particles (default is 50).
	- Enabled extensions in OpenGL renderer.
	- Disabled the experimental optimization in DrawPolygon for OpenGL.
	  It had a bad effect on performance.
	- Provided a default extension detection code for operating systems
	  other than Windows and Unix (with Mesa). Also made the extension
	  detection safe so that extensions are not used if you have
	  Mesa 3.0 or older.
	- Extend makefies for OpenGL so that OPENGL_PATH is used if USE_MESA=0
	  (similar to MESA_PATH).
	- Eric Sunshine made the following changes to the Blocks game:
	    - Fixed a nasty memory corruption bug.  HandleLoweringPlanes() was
	      writing one past the end of the States::filled_planes[] array
	      and clobbering the States::encodedData variable which followed
	      it.  This bug occurred at all times, but only manifested itself
	      when the network plug-in was available since encodedData is only
	      used by the networking code.
	    - Fixed a really bone-headed error where States::Init_game_cube()
	      was accessing 'zone_dim' before it had been initialized, thus it
	      failed to initialize the playing field in a meaninful manner.
	      This resulted in all sorts of bizarre problems on platforms where
	      'game_cube' isn't filled with NULL by default (and by accident).
	    - Fixed some memory leaks.
	    - Cleaned up the source and header files and removed a bunch of
	      dead code.
	    - Updated comments for Doc++ compatibility.
	    - Fixed the makefile's 'clean' target.
	- Eric Sunshine made the following changes to csBitSet:
	    - Constructor no longer attempts to allocate zero bytes from heap.
	    - Bits are now 'false' by default in new bitsets as a convenience.
	      Same applies to bits added when a bitset is grown with Resize().
	    - Resize() no longer tries to allocate zero bytes.
	    - Resize() no longer calls realloc() with a null pointer since
	      doing so crashes on some systems though it works on others.
	    - Resize() now frees byte array if resized down to zero.
	- Eric Sunshine repaired the Dungeon plug-in so that it once again
	  builds with the NextStep compiler.  A recent, large update to the
	  plug-in triggered several particularly rare NextStep compiler bugs.
	  This is almost certainly a new record for number of severe compiler
	  bugs triggered by a single update to a single module.  :-)
	- Eric Sunshine eliminated a few compilation warnings in the Dungeon
	  plug-in which were reported by George Yohng <cspace@mmts.nsys.by>,
	  though the bulk of them had already been fixed by Eric even before
	  receiving the problem report.
	- Changed curve system so that tesselated vertices are kept in a more
	  DrawTriangleMesh friendly format.
	- Did first attempt to use DrawTriangleMesh for curved surfaces. Not
	  enabled now because it doesn't work very optimal due to the way
	  lightmaps and lighting for curves work. We need to find a solution for
	  this. Maybe putting lighting in the tesselated curve might help.
	- Eric Sunshine made a pass through the makefiles for all plug-in
	  modules to ensure that every plug-in defines an SCL_* flag and
	  defines the correct parameters for use with static linking.
	- Eric Sunshine made a pass through the makefiles for all applications
	  to ensure that each one which uses plug-in modules also links with
	  static.cpp.
	- Eric Sunshine added a lot of missing entries to static.cpp.  All
	  plug-in modules which can be built with the CS makefile system now
	  have entries in static.cpp.  Also fixed several incorrect or out-of-
	  date entries.
	- Eric Sunshine fixed the 'clean' target in all application and
	  plug-in makefiles.  He also fixed several other errors and problems
	  found throughout the makefile system.
	- Thomas Hieber removed a problem for Map2CS on a map created by
	  Nicolas Blumire using q3radiant. Also some other minor fixes.
	- Thomas also did a small adjustment to the VC project files.
	- Andrew Zabolotny added pplBeginDraw() to CSWS for apps that need
	  low-level access to the CS plugins.
	- Martin Geisse fixed more compiler warnings.
	- Frank O'Connor fixed ext_w32.cpp so that it compiles on VC.
	  It was including cssysdef.h which is not legal for a file that
	  is being included (although technically it is a cpp file).
19-Jun-2000
	- Martin Geisse fixed a number of compiler warnings all over
	  the place.
	- Wouter Wijngaards added a new snow particle system.
	- Added 'snow' console command that works almost the same as the
	  'rain' console command.
	- Wouter also fixed a bug in csQuadTree as reported by Martin
	  Geisse.
	- Fixed a bug in 'rain' and 'snow' commands with speeds other than the
	  default.  Also made raindrop.png and snow.jpg default so you can
	  type just 'rain' or 'snow'.  Default number of particles is now 500.
	- Tried an experimental change to OpenGL to minimize the amount of
	  processing between glBegin/glEnd.  There is an OpenGL performance
	  FAQ which says you should do almost nothing except
	  glVertex,glNormal, glTexCoords, ...  calls between glBegin/glEnd.
	  So I changed DrawPolygon so that it first calculates and copies the
	  results in a few arrays.
	- Did another optimization in addition to the above one by using
	  glVertex4fv instead of glVertex4f (similar to glTexCoord2). According
	  to the same FAQ this should also improve matters.
	- Did another optimization but this is more a quick hack. In order
	  to avoid unneeded glBindTexture calls I now created a csglBindTexture
	  which remembers the old glBindTexture. I'm not sure that this
	  approach is totally safe and it is not tested well. Also it might
	  not work well with multi-texture extension. This is something
	  we need to test. I let it in for now so that it will actually
	  get tested :-)
	- Fixed a bug in csString as reported by George Yohng
	  <yohng@drivex.dosware.8m.com>.
	- Got a new patch from Travis McIntosh.  This patch finished
	  pseudo-dynamic lighting for curved surfaces.  Works nicely now.
	- Update from Andrew Zabolotny:
	    - Fixed the titlebar title that someone had broken for software
	      renderer (the window heading used to be empty last week).
	    - (Finally! :-) fixed the polygon clipper routines so that 2D
	      sprites (and 3D sprites as well) are clipped in 2D correctly.
	      The problem was not with the CS_VERTEX_INSIDE case, but with the
	      fact that sometimes for some CS_VERTEX_ONEDGE vertices it used
	      to generate incorrectly the 't' parametric value.  More
	      specifically, it happened when an edge was clipped more than
	      once (against several clipper edges).
	    - Fixed a bug in software renderer - all polygons were drawn one
	      pixel up.  E.g.  with the default renderer view with a 2 pixel
	      border on each side it worked like 3 pixels border at bottom and
	      1 pixel border at top.
	    - Implemented polygon drawing (clipped against other windows!) in
	      CSWS.  This is the first step towards implementing the solid
	      view window.
	    - Implemented a little bit of solid view window in MazeD.  It is
	      very limited and buggy for now, but thats a start.  Texture
	      mapping doesn't work (all vertices get u/v == 0) thus you will
	      see strange colors for textured polygons.  Flat-shaded polygons
	      work.
	    - Added a new random number generator class to csutil library.
	      Currently it is unused but I'm going to use it in future,
	      besides we can switch existing code from rand() to it.
	- Eric Sunshine worked around OpenStep problem where run-time
	  construction of global BSP-polygon pool was being botched.
	- Eric Sunshine eliminated several compilation warnings throughout the
	  project which were flagged by the OpenStep compiler.
	- Eric Sunshine eliminated several compilation warnings in the
	  Dungeon plug-in.
	- Eric Sunshine fixed a couple bugs in the Dungeon plug-in:
	    - Was applying delete[] to the middle rather than the beginning of
	      a character array in yywrap().
	    - Was leaking the 'filename' string of an included dungeon file.
	- Eric Sunshine csRandomGen so that it works with compilers which do
	  not provide a native 'bool' type.
18-Jun-2000
	- Norman Kramer fixed Squawk and csgame following the recent
	  modifications in sprite creation.
	- Martin Geisse removed another compiler warning in dungeon plugin.
	- Added two new tests to 'perftest' to test how grouping of textures
	  in the 3D rasterizer might benefit performance.  It seems that this
	  would give a great benefit indeed.
	- Got a new patch from Travis McIntosh to start work for supporting
	  pseudo-dynamic lights and curved surfaces.  Not finished yet.
	- Eric Sunshine made the following changes to the Crystal Space
	  documentation:
	    - Repaired all of the errors and warnings reported by 'makeinfo'
	      after recent changes to the Texinfo source documents.
	    - Repaired all of the TeX formatting problems which cropped up
	      with recent changes to the documentation source files.  Mostly
	      these problems involved overfull and underfull hboxes.
	    - Overhauled portals.txi.  Performed a much more thorough Texino
	      conversion on it.  Replaced the ASCII-art with real images.
	      This looks much nicer in the printed and HTML output.
	    - Cleaned up the win32.txi build documentation following some
	      recent changes to it.  Fixed several mark-up problems and also
	      re-wrapped source file to 80-column width.  Added a slew of
	      missing cross references.
	    - Performed a more thorough Texinfo conversion on memdgb.txi and
	      also renamed it to memdebug.txi.  Fixed several Texinfo mark-up
	      problems as well.
	    - Created a new section (portable.txi) which discusses portability
	      issues when writing code and creating resources for Crystal
	      Space.  Most of the content of this section actually comes from
	      the older coding.txi file which now contains only Coding Style
	      guidelines instead of a mixture of both.  Also expanded the
	      portability guidelines and added a lot of missing discussion.
	      Corrected some mis-information which was recently added to these
	      discussions.
	    - Overhauled lighting.txi.  Cleaned up much of the Texinfo mark-up
	      and also rewrote sections of the document.  Replaced the
	      ASCII-art with real images.
	    - Removed the mipmap.txi and texcache.txi files which Martin
	      recently converted since they were excessively out of date,
	      meaningless, and confusing to the reader (since they didn't
	      reflect reality).
	    - Added missing Texinfo mark-up to viscull.txi.
	- Eric Sunshine syncrhonized the contributor lists on the Crystal
	  Space web page and the one in the Crystal Space manual
	  (intro/contrib.txi).  This involved adding contributors to each
	  document which appeared in only one or the other document, and in
	  some cases neither.
	- Eric Sunshine repaired the particle system so that it once again
	  works on NextStep.  Recent changes to the class hierarchy managed to
	  trigger a NextStep multiple-inheritance compiler bug which caused
	  particle systems to crash.
17-Jun-2000
	- Wouter Wijngaards changed quadtree so that the potentially confusing
	  up and down terms are gone (trees were apparently upside down in the
	  Netherlands).
	- Fundamental change in how the particle systems work.
	  A particle system now also inherits from csSprite and
	  is controlled like other sprites. So for the engine as
	  such a particle system behaves just like any other sprite.
	  In addition a particle system will now control its own
	  children. So sprites inside a particle system will not be
	  added to the entire world anymore but will be local to
	  the particle system. This will make optimizations (i.e.
	  DrawTriangleMesh) and visibility for the entire particle
	  system easier to manage. A particle system of 1000
	  particles would cause 1000 visibility checks in the engine.
	  Now the entire particle system can be handled with one check.
	- csSprite now expects a new 'parent' csObject which can currently
	  be either csWorld or csParticleSystem. This is an important
	  change which will require changes in potentially all applications
	  using CS. csSpriteTemplate::NewSprite() also has the new
	  parent parameter.
	- Norman Kramer added a new grid and slider (splitter handle) class
	  and a WindowToClient method for csWindow (for CSWS).
	  Norman also added this new csGrid dialog to cswstest.
	- Martin Geisse removed some warnings in dungeon plugin and
	  removed a non-useful feature. In addition he added some new
	  features.
16-Jun-2000
	- Improved the 'rain' console command in WalkTest so that it
	  adds rain to the entire current sector. There are now three
	  parameters: 'rain raindrop.png,100,2'. 100 is the number of
	  particles. Use more particles for bigger sectors. 2 is the
	  speed in meters per second.
	- Fixed a pretty severe memory leak in the c-buffer. This leak
	  could trigger in any use of the c-buffer but it was most
	  obvious when doing lighting or radiosity.
	- Fixed another bug with 'rain' command in sectors that have
	  no polygons.
	- Martin Geisse fixed a small compilation error in mdl2spr.
	- Martin also removed cleanup() call from Win32 system driver.
	- Martin did a minor bugfix to dungeon plugin.
	- Eric Sunshine fixed an error in MazeD.cfg.
	- Wouter Wijngaards did some fixes on csQuadTree again to make
	  it easier to grok by other compilers.
	  Wouter also added a rediculously fast TestRectangle routine
	  to csQuadTree :-)
	- Robert Bate updated the Mac project files.
15-Jun-2000
	- Cleaned up some debugging stuff for c-buffer from WalkTest.
	- Moved csOjbectStuffFactory::Initialize to csObjectStub.
	- Moved csPolyTreeObject::RemoveData to csObjectStub.
	- Added new classes csSphereStub, csSphereStubFactory, and
	  csSphereTreeObject. These will be used for adding bounding
	  spheres to a polygon tree. The implementation of these classes
	  is not finished though.
	- Moved glViewport() from OpenGL 3D renderer to the 2D canvas
	  drivers for OpenGL. The reason for this is that some specific
	  canvas (used for embedding for example) may want another
	  viewport.
	- Cleaned up debug_dump() and cleanup() junk from all apps.
	  WalkTest now does this on its own with code inside
	  #ifdef OS_UNIX. This isn't pretty but it is debugging stuff
	  anyway and at least it doesn't contaminate other apps that
	  don't need this.
	- Wouter Wijngaards added new csRainParticleSystem to simulate
	  rain.
	- Added 'rain' console command to create a new rain particle
	  system. Experimental right now. Doesn't work perfectly yet.
	- Martin Geisse added new features to dungeon plugin.
14-Jun-2000
	- Added new command 'db_frustum' to debug the CheckFrustum routine.
	  This function expects an integer parameter and will draw an outline
	  around the first 'num' polygons that are reached by CheckFrustum.
	- Changed csFrustum constructor to accept a 'const' parameter.
	- Did the same fix to csCBuffer::TestPolygon() as was done with
	  csCBuffer::InsertPolygon() a few days ago.
	- Fixed a small bug in CheckFrustum which could cause different
	  results in different runs. i.e. it made the result of CheckFrustum
	  a bit unpredictable in some cases.
	- FINALLY fixed a very severe bug in the c-buffer which really
	  triggered only in VERY rare cases indeed. This bug caused errors
	  in lighting, PVS, rendering (in some cases), radiosity, ... (you
	  name it :-)
	- Got the first patch from Travis McIntosh
	  <Travis.McIntosh@student.oc.edu>. He changed the dynamic lighting
	  system to work on lightmaps instead of polygons. This is the
	  first step towards getting dynamic lights working with curves
	  too.
	- Andrew Zabolotny added a new CS_ZBUF_FILLONLY mode for
	  DrawPolygon() to be able to draw non-textured polygons with
	  Z-Fill mode. The hardware guys still need to implement it.
	- Norman Kramer fixed a warning about unused parameter in
	  freefont.cpp.
	- Norman also cleaned up some of the changes that Samuel did to the
	  glide port.
	- Martin Geisse converted more docs to TexInfo.
	- Thomas Hieber fixed CSWS so that it compiles with MSVC again.
	  Thomas also updated some VC project files and removed a few
	  warnings in dungeon plugin and software renderer.
13-Jun-2000
       - Samuel verbosely has been busy with the now called procedural textures:
           - Changed names from dynamic textures to the more correct term
             procedural textures.
           - The iGraphics3D method CreateOffScreenRenderer is now gone. All
             drivers are updated.
           - The software drivers procedural textures are now more memory
             efficient.
           - By default the software procedural textures use the main
	     renderers texture manager, which makes it more consistent
	     with the glide and back buffer opengl implementations. Within
	     this mode the engine can render to the texture.
           - The CS_TEXTURE_DYNAMIC_SHARE_HINT is now gone. In its place is a
             new hint CS_TEXTURE_PROC_ALONE. When this flag is selected the
             software procedural textures run internally at 8bit, they share
	     and utilise their own 8bit texture manager. (Before each
	     procedural texture had its own texture manager and cache..
	     this is no longer the case :). The engine cannot render to the
	     texture in this mode.
           - The iTextureHandle->TextureDynamicSyncPalette is now gone. This
	     is no longer needed, and makes the interface more consistent
	     across implementations. In its place is ProcTextureSync (),
	     which currently is an empty method, but is in preparation for
	     fine grained control of mip-mapping. The software texture
	     manager now keeps a single linked list of all 8bit canvases
	     it services.
           - Rewritten the opengl software procedural texture implementation.
             So that it can be rendered to by the engine.
           - Added a force32bitsoftware additional flag to opengl.cfg, which
             performs better with mesa and 16bit displays with a voodoo2.
             However, the problem with the transposition of red and
	     blue returns, this is probably a bug in Mesa3.3beta.
           - This is how it now works: csOpenGLProcSoftware now wraps an
	     instance of csSoftProcTexture3D. This instance is created via
	     a new interface iSoftProcTexture. csSoftProcTexture3D creates
	     its own texture manager and canvas. Subsequent software
	     procedural textures share this texture manager. Each
	     procedural texture registers itself with the software texture
	     manager, and passes its handle back to the
	     csOpenglProcSoftware class which stores it in a vector along
	     with its opengl texture handle. The app writer registers and
	     prepares all textures with the opengl texture manager, and then
	     starts rendering. Each texture handle not already present
	     within the vector is registered and prepared with the software
	     texture manager and its handle stored with its opengl
	     counterpart in a vector. Each iGraphics3D call which utilises
	     a texture is intercepted and the opengl texture handle
	     swapped for its software counterpart. On Print (csRect) the
	     opengl texture is updated with the new procedural texture
	     state, and also its software counterpart.
           - This change has required modifying the software drivers so
	     that the texture handle is not referred to within the
	     iPolygonTexture structure.
           - The CS_TEXTURE_PROC_ALONE_HINT has the effect of disabling the
             updating of the software texture managers versions of the
	     procedural textures, which improves performance but disallows
	     the engine from rendering to any procedural textures. For
	     this mode to operate all textures need to possess this flag
	     otherwise it'll revert to the slower mode.
           - Fixed the colours on the opengl back buffer implementation.
	     Voodoo2 owners now need Mesa beta3.3 from cvs for this to work.
	     Unfortunately glCopySubTexImage2D is now broken in cvs so I
	     cant implement this optimisation. The texture probably still
	     renders inverted, it does on the voodoo2. I dont think there
	     is an opengl trick to reinvert the texture, but I could be
	     wrong. Possible solutions are to intercept every draw call
	     and invert these or to copy over from the framebuffer
             to the texture line by line. The latter way is going to be
	     *slow*, the former would involve modifying transformation
	     matrices (i.e.  rotating by 180 degrees the world to camera
	     matrix about the lookat vector) within the driver and
	     inverting all vertices which are in screen co-ordinates.
             I wait for a better suggestion :).
            - Lastly Ive destroyed the performance of the opengl procedural
             textures, oops, need to investigate this :( Used to get about
	     70fps with the astext texture alone, this is now down to 10ish
	     with software textures. This might be Mesa3.3beta.
            - dtsimple is updated to demonstrate how to do things with the
              cleaner, more consistent interface.
            - Added new constructor for csImageMemory
            - Fixed typo in memdbg.sh
	- Added csPoly2D::Random() to generate a random convex polygon
	  (triangles only right now). This is going to be used for
	  debugging the c-buffer.
	- Cleaned up all compressed vertex/normal/texel stuff in csSprite3D.
	  This cleans up sprite code considerably. If this funcationality
	  needs to go back we'll have to implement it again in a cleaner
	  way.
	- Added csCBuffer::TestPoint() to test a single point in the
	  c-buffer.
	- Fixed LOD for 3D sprites. Looks as ugly as before but at least
	  it works again :-)
	- Wouter Wijngaards did some changes on csQuadTree again.
	  Now uses a more transparent storage ordering. Untested code,
	  but functionality for full culling should be present. Print()
	  method should work now (for debug). Perhaps I have removed
	  K. Robert Bate's mac port fix. But that fix provably breaks theu
	  VC port.... Anyway, perhaps I should look up the correct syntax
	  somewhere?
	- Andrew Zabolotny did the following changes:
	    - Fixed my fix regarding Eric's fix regarding halos yet again :)
	      2*SRC lighting did not work for halos.
	    - Fixed csFrustum::Classify(). Now it seems to work okay.
	    - Removed delaying of draw operations in CSWS. From now
	      on graphics pipeline always draws at the time the draw
	      routine is called. This both reduces memory usage by CSWS
	      programs (by ~500K) and removes the limit on the
	      number of graphics primitives that can be painted in one frame
	      (this was seen as uncomplete redraws when loading complex 3D
	      models in MazeD). Also it should be a little faster now.
	    - Fixed an old-standing bug that caused wrong window resizes
	      when switching MazeD screen resolution.
	- Andrew also updated the dimensions of the player in WalkTest
	  to be more realistic.
	- Frank O' Connor fixed a VerticesAreCompressed() call which Jorrit
	  forgot to remove in MazeD.
	- Frank also updated some of the VC project files.
	- Frank fixed a bunch of redefinition errors caused by defaults
	  in both the header and implementation (from Samuels large patch),
	  and removed the cases that resulted in the use of the
	  GL_UNSIGNED_SHORT_5_6_5. This is undefined on win32 GL.
12-Jun-2000
	- Thomas Hieber added basic support for WC3 (WorldCraft) file
	  format to Map2CS.
	- Robert Bate made a few fixes to csQuadtree so that it will
	  compile on Macintosh. Robert also added 'alloca.h' include
	  to cssys/mac/malloc.h.
	- Robert updated the Mac project files.
	- Frank O' Connor updated the VC project files for the dungeon
	  plugin changes that Martin did.
10-Jun-2000
	- Started a reasonably big redesign of the dynamic object system.
	  csObjectStub and csPolyTreeObject don't care about polygons
	  anymore. They are now simply objects and stubs that can be placed
	  in an octree (bsp tree). Specific subclasses (csPolygonStub
	  and csDetailedPolyTreeObject for example) can add the functionality
	  needed for splitting polygons for a bounding box of a sprite.
	  This allows easier and lighter versions of those classes as well
	  which don't split polygons but only store the nods where they
	  are visible.
	- 3D sprites now use the new design. 2D sprites haven't been
	  updated yet so they are still not visible with c-buffer enabled.
	  There is also a pure virtual function call at exit right now which
	  needs to be solved.
	- New db_dumpstubs console command to dump the stubs of the current
	  octree and the last added sprite to the world.
	- Fixed bug in BSP traversal with polygon stubs. 3D sprites could
	  sometimes disappear because of this bug.
	- Added csCBuffer::GfxDump() to debug the c-buffer.
	- New db_cbuffer console command to debug the c-buffer contents.
	  It will show the c-buffer online (all empty spans will be blue and
	  a small red line will be put in front of every completely full line).
	- Fixed a serious bug in the c-buffer. This bug could cause some
	  polygons to be span converted completely wrong in the c-buffer.
	  This could an occasional error in rendering (rather rare) and is
	  probably also the reason for various lighting errors using
	  the c-buffer cube (enabled yesterday) and visibility errors with
	  PVS.
	- Martin Geisse committed a huge update to the dungeon plugin.
9-Jun-2000
	- Moved a lot of PVS algorithm code into csPVSAlgo. That cleans
	  up csOctree a little.
	- Created new db_osolid debug command. This command will create
	  things for all solid space boundaries in an octree node.
	- Implemented bbox/octree visibility culling for 2D sprites. This
	  is probably a bit overkill (maybe we should only cull groups
	  like particle systems instead) but it will fix the bug that
	  2D sprites are not visible with c-buffer enabled.
	- Switched to C-buffer cube for lighting. This improves lighting
	  speed for dmburg from 30 seconds to about 8 seconds and it
	  seems to work reasonably well. This also improves speed of dynamic
	  lighting with about the same factor. Radiosity will also improve
	  by this.
	- Thomas Hieber fixed some of the VC project files and removed a
	  warning in the metaballs plugin.
8-Jun-2000
	- In an effort to completly fix PVS and make sure that everything is
	  ok I started adding extensive comments everywhere.
	- Changed the eight frustums in PVS to only one. This is more
	  efficient because we only need to clip the occluder polygon once
	  in that case.
	- Further work on csQuadtree from Wouter Wijngaards.
	- Wouter also made csBox2::Intersect() a const routine.
	- Did a very significant bug fix in PVS. This seems to improve
	  quality ENOURMOUSLY. It also results in a few errors but I'll have
	  to debug these seperately. This looks very promising indeed.
	- Fix for OpenGL 8 bit mode and palette from Thomas Krug
	  <thomas.krug@assix.de>.
	- Thomas Hieber fixed csQuadtree to make it compile on VC again.
	  MSVC was complaining about the various function pointer operators.
7-Jun-2000
	- Paul Garceau added RMDIR equivalent to mingw.mak for cross platform
	  compatibility.
	- Gary Haussmann added support for RGBA (transparent meshes) to
	  DrawTriangleMesh.
	- Fixed a serious bug in csPoly3D::CutToPlane(). It was completely
	  messed up.
	- Fixed a potential bug in PVS. Some of the routines didn't clear
	  the polygon as they should.
	- Fixed a bug in the frustum calculation of PVS. The planes were
	  computed completely wrong.
	- Restored body dimensions and disabled radiosity. The body
	  dimensions were changed to make flarge look more natural. But it
	  is flarge that should be fixed.
	- Made csloader more robust. It now detects planes which are badly
	  specified.
	- Wouter Wijngaards reimplemented the quadtree. It is likely
	  that this is going to be used for the PVS as well.
	- Fixed another bug in PVS.
	- Did a new optimization for PVS. If all children of a node are
	  not visible then the node itself will not be visible as well.
	- Wouter Wijngaards further worked on the new csQuadTree code.
6-Jun-2000
	- Fixed OpenGL GLX driver (2D driver for OpenGL/X Windows).
	  It was trying to find a visual with AUX buffers.
	- Wouter Wijngaards fixed a bad nested if construct in
	  libs/csengine/polygon/polytext.cpp that could cause compile
	  errors in some cases.
	- Wouter did some further improvements on radiosity.
	- Added csPoly3D::CutToPlane() to cut a polygon with a plane
	  and only keep the front side.
	- Added csPlane3::Set() to initialize a plane given three vectors.
	- Some work on PVS again. Tried to fix a serious bug with shadow
	  projection. Not sure that I actually fixed it. Will have to do
	  some more tests.
5-Jun-2000
	- Added a few const methods to csPoly2D as well.
	- Added a speed improvement to PVS. Before considering an
	  occluder (octree node) and the contents of that occluder we
	  first cast a shadow from that occluder on the plane. If the
	  shadow is non-existant (i.e. the plane is too far away from the
	  node) then the node will not be considered as a potential
	  occluder. If the shadow does exist then CS will also first test
	  it against the c-buffer on the plane to see if that part of
	  the c-buffer still contains unshadowed parts. If not then it
	  makes no sense to consider this occluder either.
	- Robert Bate updated the Mac project files and changed
	  max_texture_size from int to GLint so things will compile with
	  CW.
4-Jun-2000
	- Fixed serious bug with csPoly2D::Intersect() and csPoly2D::
	  ClipPlane() that could cause clipping errors in some cases.
	  This bug probably caused the bugs in the solid 2D BSP tree
	  that I never managed to find in the past.
	- Did an optimization reported to me by Norman Kramer with
	  regards to backface culling polygons. This happens throughout
	  CS and should increase performance a tiny bit (maybe not
	  noticable).
	- Removed a few unneeded methods in csPolyPlane. These methods
	  are only shortcuts to csPlane3 and are a little confusing
	  to have. Removed csPolyPlane::VisibleFromPoint(),
	  csPolyPlane::Classify() and csPolyPlane::Distance().
	- Concluded implementation of csPoly2D::ExtendConvex().
	- Further work on adjacent polygon merging for PVS. Not
	  finished.
	- Samuel Humphreys has been busy with the opengl drivers:
            - Rewrote the ogl backbuffer dynamic texture implementation, it now
              inherits from csGraphics3DOGLCommon and implements a dummy
              iGraphics2D which transforms vertex info to lower bottom left
              subregion of back buffer, and reports correctly width and height
              information. This has required splitting the old ogl_g3d.* into
              ogl_g3dcom.* and ogl_g3d.* Also two new private functions are
              added SharedInitialize and SharedOpen which have the same
              functionality as those in the software drivers.
              The engine now renders to backbuffer textures, but they are
	      still inverted and have corrupt colour information.
            - Added verbose visual information reporting to glx. Now reports
              about auxiliary buffers and properly fills in pfmt.
            - The ogl texture manager now detects and deals with maximum
	      texture constraints i.e. my voodoo2's 256x256 :)
            - Removed old software dynamic texture implementation.
            - Small fixes for canvas/common & dtsimple.
	- Wouter Wijngaards contributed newest radiosity version. Works
	  for portal levels. Now source patch size can be specified, say at
	  16x16 lumels. It allows radiosity to work in 16x16 lightmapsize
	  mode. Default is 2x2 lumels, but cryst.cfg has a 16x16 lumels.
	  Note that the destination patch size is still 1x1 lumel, thus
	  shadows are perfect, and lightmaps smooth.
	- Gary Haussmann added a line to bin/unixconf.sh to compile on
	  Linux/ia-64 platform.  Currently maps the ia64 to "PROC = UNKNOWN".
3-Jun-2000
	- Reworked the hashmap iterators. They didn't work that well in
	  all circumstances.
	- Added new csPolygonEdges class that takes a list of polygons
	  and creates a set of indexed edges.
	- Added 'const' to two csPolyIndexed methods.
	- Split octree.cpp into octree.cpp and pvs.cpp.
	- Added csPoly2D::ClipPlane() to clip a 2D polygon to a 2D
	  plane (i.e. line) and return the right side of that polygon.
	- Added csPoly2D::ExtendConvex() to extend a convex polygon
	  with another polygon while keeping the resulting polygon convex
	  again. This function is not fully implemented yet.
	- Started work on optimization for PVS that will try to merge
	  adjacent convex polygons into bigger occluders. Not finished
	  yet.
	- Burton Radonsxi commented out all traces of Unix in the allegro
	  driver and added in the "main" symbol defragilator.
2-Jun-2000
	- Samuel Humphreys added some further options to dtsimple and fixed
	  cleaning up. Dynamic textures clean up after themselves properly now.
	- Samuel also did some changes which gets the metaballs texture working.
	  Mainly to do with many iGraphics3D refering to one iGraphics2D
	    - The engine now keys of iGraphics3D rather than iGraphics2D,
	      to determine whether it needs to swap states.
	    - Metaball plugin now queries iGraphics3D for width and height of
	      context.
	    - Opengl: Converted back buffer dynamic texture vertex co-ordinates
              to render to the upper left subregion of the backbuffer.
	- Samuel added some keys in dtsimple so that you can play with
	  the warp transformation on the fly.
	    ',' & '.' vary the x component of the before vector.
	    'b' & 'n' vary the x component of the after vector.
	    'v' flips the transformation matrix on the x-axis.
	    The value of these parameters are reported on screen on the LHS.
	    Added a frame around the portal to make things easier to see.
	- Gary Haussmann added a workaround to allow Mac users to see text;
	  apparently the current Mac drivers do not support a pure GL_ALPHA
	  texture, so for the OS_MACOS platform we use GL_LUMENENCE textures
	  instead.  This means that text is not shaped (all letters are on
	  a black background instead of showing the picture behind them) but
	  at least you can see the text!
	- Made almost all variables in csCamera private and added some
	  accessor functions.
	- Made csCamera::SetFOV() virtual and override it in
	  csRenderView::SetFOV() so that we can calculate the angle of the
	  FOV in degrees there. This is needed for the terrain engine.
	- Use the new angle for FOV in terrain engine.
	- Fixed terrain engine so that the correct forward facing vector
	  is used.
	- Fixed terrain engine so that it will run correctly on software
	  renderer. This will make the OpenGL version slower so this is
	  a temporary fix until we implement a better solution.
	- Eric Sunshine fixed the CS_ASSERT() macro so that it now works as
	  expected; that is, it "asserts" that some condition is true.
	  Previously, the logical sense of the conditional test was reversed.
	- Eric Sunshine enhanced CS_ASSERT() so that it now prints a useful
	  error message before breaking into the debugger or crashing the
	  application, instead of dying silently.
	- Added csCamera::GetDefaultInvFOV() too. Fixed MazeD and csgame
	  for the csCamera changes.
	- Changed csPolygon3D::Covers() to csPolygon3D::Overlaps() as
	  this is actually what the function is calculating (and needs
	  to calculate). Suggested by Norman Kramer.
	- Added new csHashMap class to csutil. This is the first version of
	  a new hashtable class that can be used for several things.
	  This is untested code right now.
	- Fixed a bug in the iterator code of the new csHashMap class.
	- Norman Kramer changed config for Glide to access Glide section
	  instead of Glide2x.
	- Split octree.h into octree.h and pvs.h. Was getting a bit big.
	- Fixed bug 106203 on SF. Test for coplanar polygons at startup
	  was wrong. Should be ok now.
	- Eric Sunshine fixed a crasher in csSystemDriver::Initialize() where
	  it would try to dereference the null pointer when loading plugins.
	- David Durant removed myapp functions in WalkTest and replaced them
	  by chopping up several functions into finer details and making
	  them virtual.
	- Alex Pfaffe now clips blocks in terrain engine as needed. This
	  speeds up terrain considerably for OpenGL (still not fully
	  optimal but it is a lot better already).
	- Alex also added top level visibility info for bintree.
1-Jun-2000
	- Experiment with new octree generation method. Instead of only
	  favoring a center with few splits I also try to favor centers which
	  cause may polygons to fall exactly on the boundaries. This
	  could improve occlusion. However, this doesn't seem to improve
	  at all so it is disabled right now.
	- Samuel Humphreys did various updates to dtsimple. He added another
	  dynamic texture, this time with a portal. Unfortunately he hasn't
	  worked out the warp transform yet so the animation is disabled.
	- Samuel also did various fixes to some of the X 2D canvas drivers:
	  migrated the 'behave well under cantankerous window managers code'
	  into glx and linex. Also fixed a bug he introduced into metademo.
	- Alex Pfaffe added new terrain.zip for the new terrain engine
	  (with low-res textures).
	- Alex also fixed the terrain engine for software rendering and
	  reenabled fixed frustum clipping for Crystal Space.
	- Eric Sunshine eliminated several compilation warning in the terrain
	  library.
	- Eric Sunshine eliminated several compilation problems throughout the
	  project.
	- Eric Sunshine worked around a NextStep compiler shortcoming where it
	  failed to grok subclasses of csFrustumView::CleanupAction.
	- Eric Sunshine fixed a nasty bug where VFS was being created and
	  destroyed twice in applications which requested VFS explicitly with
	  RequestPlugin().  In addition to other problems caused by double
	  instantiation, this had the particularly undesirable effect of
	  creating and destroying VFS's global ArchiveCache twice, thus
	  resulting in a crash on some platforms.
	- Eric Sunshine fixed the 'clean' makefile target for Simple.
	- Robert Bate added rview.cpp to the Mac project files.
31-May-2000
	- Added a new allegro canvas driver from Burton Radonsxi
	  <loth@pacificcoast.net>.  This allegro driver is developed on Linux
	  and should work on Linux.  It will probably not replace dosalleg yet
	  since the new one depends on iunix.h.  We're looking into that.
	- Paul Garceau did another change to mingw.mak to accomodate auto-gen
	  of include\volatile.h for Mingw.mak.
	- Patch from Andrew Zabolotny:
	    - Removed the unneeded VFS->IncRef in systemdriver::initialize.
	      This removes the "1 unreleased instances" error at cleanup.
	    - Fixed the vshell plugin (it was creating a second instance of
	      VFS although VFS plugin is written such that it allows just one
	      instance).
	    - Slightly improved csFlags class.  WARNING: The former Set(int)
	      method is renamed to SetAll(int) now, Set(int) has a different
	      meaning!
	    - Moved bool csPolygon3D::dont_draw and bool
	      csPolygon3D::delete_portal to csPolygon3D::flags.  Another 8
	      byte win for csPolygon3D.
	    - Added macro CS_ASSERT for system-independent assertions.  It
	      will fire a debug breakpoint if the assertion fails (rather than
	      printing a error message which is useless in CS for many
	      platforms).
	    - There is also a DEBUG_BREAK macro (which is empty for non-debug
	      mode).  You can use it if you want to fire a debug breakpoint
	      under some complex conditions (for simple conditions you may use
	      CS_ASSERT).  Currently it is defined only for x86 processor.
	    - Found and fixed a bug (that maybe the one reported by Jorrit in
	      past) with VFS creating invalid archives.  The problem was that
	      the contents of "lazy" array were simply appended to "dir" array
	      (after csArchive::Flush) while they should be InsertSort'ed.
	    - Removed csFrustum::Intersect and csFrustum::IntersectFull
	      methods.  Added instead csFrustum::Classify() which is faster
	      and less buggy.  There is still a bug somewhere but its already
	      better than the old one.
	    - Caught and fixed a bug in software halo drawer introduced by
	      Eric.
	    - Many other small changes I don't remember now.
	- Added csBox2 and csBox3::Contains() functions to test if some box
	  contains another one.
	- Fixed PVS test with adjacent nodes.  It was not correctly testing if
	  one box contained the other.
	- Eric Sunshine fixed compilation errors on some platforms in
	  soft_txt.cpp where it was trying to implicitly cast void* to
	  RGBPixel*.
	- Eric Sunshine eliminated a compilatioin warning in polytext.cpp and
	  also made it work with the buggy OpenStep compiler.
	- Eric Sunshine eliminated more linkage problems caused by
	  inconsistent use of 'inline' in csterrain library.
	- Eric Sunshine fixed software renderer halos (again) for big-endian
	  32-bit NeXT machines following Andrew's change which broke them.
	- Eric Sunshine fixed out-of-date key names in several configuration
	  files (in data/config) following renaming which Andrew performed in
	  the source code.
	- Eric Sunshine fixed the 'clean' target for ndrvdem.
	- Eric Sunshine reverted Andrew's changes to csVector's Find() and
	  FindKey() since they broke other parts of the system.  He changed
	  the functions so that they search the vector from tail to head
	  rather than head to tail.  Unfortunately, other parts of the system
	  (even Andrew's own code) rely on the head to tail order.  An example
	  of this is csSystemDriver::GetOptionCL(), which broke after Andrew's
	  change.
	- Martin Geisse fixed a VC5 specific compilation error.
	- Frank O'Connor updated VC project files for new MetaBall plugin
	  and some other stuff.
	- Norman Kramer fixed a bug in CreateOffScreenRenderer for Glide
	  that someone introduced, now compiles again.
30-May-2000
	- Alex Pfaffe did some minor fixes and cleanup in the terrain
	  engine. Alex also fixed a bug w.r.t. vertex reuse in buffers.
	- Fixed an inline problem in DDG terrain engine and a small other
	  fix.
	- Added a number of 'const' declarations to members in csPoly3D.
	- Fixed a number of warnings in the WalkTest changes from David
	  Durant.
	- Still show the warning when RAPID plugin cannot be loaded by
	  WalkTest but doesn't fail anymore.
	- Extended BSP tree traversal with an extra flag 'same_plane' so
	  that the BSP traversal routines know if all given polygons are
	  on the same plane or not. This could be used for optimizations.
	- Changed BSP building so that it better detects the case where
	  all polygons are coplanar and indicates that in the node.
	- Added csPolygon3D::IntersectRayPlane() to intersect a ray
	  with the plane of a polygon.
	- Wyatt Miler did a few fixes to terrain engine as well.
	- Debugging version of radiosity from Wouter Wijngaards.
	- Got a large patch from Samuel Humphreys with the following changes:
	    - Adds a couple of new walls, bots and another dynamic texture
	      to dtsimple. The new dynamic texture is rendered by the engine
	      as the bots point of view, or as a manually configurable view
	      from (0,0,0). Only works with the software drivers currently
	      in 8, 16 & 32 bit modes. The opengl software texture version
	      will not work...it will crash. The backbuffer opengl version
	      will not work, but won't crash. I think the glide version will
	      work, can't test this though.
	    - Added new flag to iTextureManager: CS_DYNAMIC_TEXTURE_SHARE_HINT.
	      See explanation there.
	    - Added many more keys to fiddle with in dtsimple.
	    - Added another software dynamic texture implementation to the
	      software drivers. This implementation shares the texture manager
	      with the parent context. This allows you to render to it with
	      textures that you have already registered with the parent
	      context i.e. a map view courtesy of the engine.
	    - In pursuit of this added functions to the software 3d drivers
	      which allows the initialisation and opening of the driver
	      according to another driver while sharing resources. The
	      sharing software dynamic texture utilises these functions.
	      This is also in preparation for the window manager...coming
	      soon!
	    - Pluggified metaballs and updated metademo and dtsimple as
	      appropriate.
	    - Added more parameters to vary to see what happens in metademo.
	    - Added a couple more functions to iSystem, which are implemented
	      in system.h/cpp, so shouldnt break anything. These are queuing
	      functions for two new windows messages.
	    - Added two new windows messages. ..ContextResize and
	      ..ContextClose.
	    - Updated the engine to deal with new messages
	    - 'Multiplexed' the engine. Added new function
	      csWorld->SetContext(iGraphics3D *g3d). This allows the engine
	      to swap states according to g3d. The new dynamic texture
	      demonstrates this.
	    - Fixed the annoying bug in the Xlib software drivers where on a
	      fresh Xserver session the window placement wouldn't behave for
	      the first three or four times. Borrowed the trick from gdk :).
	      Much more window manager friendly now...i.e. Crystal Space is
	      beginnning to behave politely!
	    - Migrated XLib changes into the line drivers.
	    - Added resizing to the line drivers.
	    - Got rid of a static file scope variable in the software
	      texture manager.
	    - Small makefile fixes for blocks and csauth.
	- Did a fix to dump(csPolygon3D*) for polygons with no name.
	- Eric Sunshine removed the Crystal Space-specific includes and macros
	  which had been added to ddgutil.cpp.  In general, we want to keep
	  the terrain files as free of CS stuff as possible so that the same
	  code works well for Alex in DDG.  The typical place to put CS code
	  is in ddg.h, and only within a __CRYSTAL_SPACE__ block.
	- Eric Sunshine eliminated several compilation errors and warnings in
	  the terrain library.
	- Fixed terrain engine so that it renders triangles again. Still
	  have to work a bit on speed and other issues.
	- 'Probably' fixed the solid space calculation for real now :-)
	- Now that solid space calculation works I fixed PVS to use it
	  in a safe way. Solid space for node boundaries is not reflexive.
	  Even if node A cannot see B it is still possible that B can see A.
	- Eric Sunshine worked around NextStep compiler multiple-inheritance
	  problem in dtsimple's Bot code where it called SetPosition() and
	  crashing the application.
	- For debugging: control precisely what parts of PVS are done
	  and what not.
	- Added 'bool cd' parameter to csCamera::Move and MoveWorld to
	  allow moving around the world without collision detection to
	  sector walls and vice versa. Portals are still checked though.
	- Fixed collision detection option in WalkTest so that it now
	  also works for STATBSP levels (i.e. you can walk through
	  things).
	- Fixed db_octree console command in WalkTest so that you can
	  actually use db_octree -1 to show the leaves.
	- Fixed a serious bug in PVS again. The solid boundary optimization
	  was in fact used completely wrong. Unfortunatelly this decreases
	  PVS quality a bit. PVS is still not completely right though.
	- Changed PVS building so that first pass is now the solid space
	  PVS pass and second pass is full PVS. This improves speed and
	  quality a bit.
	- Changed solid space point tester so that it now requires a
	  number of directions for which the solid space test succeeds.
	  This decreases the chance of an error cause by bad polygons
	  in the input data.
	- Extended dump of octree nodes with the values of the calculated
	  solid masks for the six directions.
	- Updates to Macintosh projects from Robert Bate.
	- Samuel Humphreys added some comments to the x2d.cpp code.
29-May-2000
	- Alex Pfaffe did some fixes on terrain engine. He also resynced
	  with DDG. Various bug fixes and optimizations.
	- Small fix to terrain engine (removal of bogus 'inline').
	- Found a serious bug in PVS (more exactly the calculation of solid
	  space between nodes). Note that I didn't fix the bug yet :-)
	- Added more debugging information when dumping the octree/bsp tree.
	- David Durant started reworking myapp functionality in WalkTest
	  using proper subclassing.
	- Eric Sunshine eliminated a compilation warning about multi-line '//'
	  comment in ddgbtree.cpp.
	- Eric Sunshine fixed several warnings throughout the project reported
	  by EGCS 1.1.2.
	- Eric Sunshine added a lot of missing 'const' qualifiers to csrect.
	- Eric Sunshine fixed the 'clean' target in mazed.mak.
28-May-2000
	- Changed the way csPolyTree::ClassifyPoint() works. Instead
	  of assuming space is open and testing six directions to prove
	  it is solid (all six directions must be solid) we now
	  assume space is solid if we find only one direction for
	  which space is solid.
	- Added csPoly3D::GetCenter() which computes the center of the
	  polygon and returns it.
	- Improved the solid space generator so that it is now much more
	  likely to say that a node boundary is solid. This should improve
	  PVS considerably.
	- Added patch from Michael Ewert on csphyzik library. Here is his
	  comment:
	    "I made some good progress on csphysiks. I've got collision
	    response working for articulated bodies quite nicely.
	    This is an important milestone for me, and adds some
	    very cool functionality.  One of the more common
	    things that game developers get excited about when
	    talking about physics packages is realistic response
	    of characters to being shot or being hit with a 2x4,
	    or other equally pleaseant events :)  Anyways, thats
	    what I've got working now.
	    I will update documentation and add a decent test app
	    sometime in the near ( or not so near ) future, so
	    other people can actually use this stuff."
	- David Durant added myapp hook functionality.
27-May-2000
	- Worked a bit more on 'perftest'.
26-May-2000
	- Fixed bug in PVS building. The selection of the plane for the
	  c-buffer could fail with nodes that are close together.
	- Added csBox3::GetVisibleSides() to return all visible sides of
	  a box as seen from a point in space.
	- Added csIntersect3::BoxSegment() routine to test if a segment
	  intersects with a box. This routine will also return the
	  intersection point.
	- Greatly optimized csSector::HitBeam() so that it is now LOTS
	  faster. It now uses the octree node hierarchy to avoid traversing
	  nodes that the beam doesn't intersect with.
	- Added iPolygonMesh interface so that the engine can communicate
	  3D geometry to other plugins. This will be used by the collision
	  detection system plugin. iPolygonMesh is not implemented yet
	  though.
	- Added iCollider and iCollideSystem interfaces. iCollideSystem
	  is an SCF plugin that implements a particular collision
	  detection algorithm. Further work will be to make the current
	  RAPID CD system a plugin implementing this interface.
	- Added implementation for RAPID CD plugin (UNTESTED). This
	  should be our current implementation of RAPID CD.
	- WalkTest now loads the iCollideSystem plugin at startup.
	- Implemented csPluginCollider inside the engine which encapsulates
	  a collider using the plugin system. This is temporary until
	  the plugin CD system has been debugged. After that engine will
	  only work through plugins.
	- Did various cleanups on the include/i*.h files. Many files are
	  missing Doc++ comments and some were missing LGPL header.
	- Paul Garceau did some changes to terrain renderer to set default
	  for P-III to zero (for the SIMD code that is in the terrain engine).
	- Wouter Wijngaards did some further debugging on radiosity.
	- Created new 'perftest' application to test the performance
	  of a 3D renderer. This application will try various tests to
	  see how fast the 3D renderer is.
	- Eric Sunshine reverted Paul's change to ddgUtil::DetectSIMD() since
	  it broke Alex's DDG.  Re-implemented it in a fashion which should
	  work for everyone.
	- Eric Sunshine reverted Paul's change to the #includes of ddgutil.cpp
	  since they broke the terrain library for all other Windows compilers.
	  Reimplemented his change in a way which won't break other stuff.
	- Eric Sunshine reverted Paul's change to ddg.h since it unnecessarily
	  complicated the already complicated conditional compilation
	  controls.  Re-implemented Paul's change in a much simpler fashion
	  and also simplified the rest of the conditional compilation controls
	  at the same time.
	- Eric Sunshine reverted Paul's changes to the volatile.h generation
	  code in the makefiles for several reasons:
	    o He changed the semantic meaning of MAKE_VOLATILE_H, making it
	      less flexible, order dependent, and less robust.  That is, after
	      his change, one had to be very careful about the context in
	      which MAKE_VOLATILE_H was used, whereas previously no such
	      restriction applied.
	    o He added a large section of copy/paste code to mingw.mak which
	      unnecessarily increased maintenance costs and fragility.
	    o Most of the changes were simply unnecessary.  It appears that
	      much of the trouble was caused by a misplaced definition of $".
	  My fixes were twofold.  Fist I corrected the $" problem so that it
	  is in scope in the proper contexts.  Second, I further generalized
	  and abstracted the actual emission of volatile.h so that
	  platform-specific makefiles can intercede at all points of the
	  process, if necessary.  Having accomplished this, I added very
	  simple special-case code to mingw.mak to perform the transformations
	  on volatile.h which Paul required.  This allowed me to eliminate all
	  the copy/paste code which he had added while still retaining
	  flexibility.
	- Eric Sunshine updated documentation to reflect fact that WalkTest
	  now requires that new "rapid" plug-in exist at run-time.
	- Eric Sunshine finished the task of renaming "font renderer" to "font
	  server" by renaming all classes, files, variables, and interfaces.
	- Frank O'Connor did some fixes to MSVC project files and added new
	  RAPID plugin.
	- Frank also removed a few warnings in OpenGL dynamic texture
	  implementation.
25-May-2000
	- Moved initialization of 2D culler cube into CheckFrustum.
	  This fixes radiosity. As it was now it simply could not work
	  correctly because of this bug.
	- Fixed another bug in radiosity with handling of the light
	  frustum.
	- Extended csSector::HitBeam() with an extra parameter that returns
	  the intersection point with the polygon that is hit.
	- Added csOctree::BoxCanSeeOccludeeSuperSlow() function. This function
	  tests if two nodes can see each other. It is very very slow and
	  will actually NEVER return if the nodes cannot see each other.
	  So the only expected result of this function is 'true' or
	  else infinite loop. This function is for debugging only.
	- Fixed the huge room so that it no longer crashes (-huge option
	  for WalkTest).
	- Wouter Wijngaards fixed various other problems in radiosity
	  based on the fixes from Jorrit.
24-May-2000
	- Some changes to terrain engine from Alex Pfaffe.
	- Fixed another problem in octree building which could cause
	  differences in the octree on various problems. This is not really
	  a bug but I like to have the generated octree the same on all
	  platforms to easy debugging and make bugs more reproducable.
	- Received a patch from Samuel Humphreys for dynamic textures:
	    - Seperates metademo into reusable chunks and cleans up some stuff.
	    - dtSimple now has two animated textures. The second is the
	      metaballs.
	    - Use F1 to toggle on/off first texture animation; F2 for other.
	    - INS/DEL/BS/HOME/END/TAB to control MetaBalls.
	- Eric Sunshine fixed a bug in the 'depend' target of csfont.mak and
	  freefont.mak which prevented dependencies from being computed.
	- Eric Sunshine performed phase one of the renamed of "font renderer"
	  to "font server".  This phase involved the physical rename of the
	  directory in the CS/plugins hiearchy as well as patching of the
	  makefiles.  (Still To-Do: Must rename font renderer to server in
	  source code, configuration files, etc.)
	- Eric Sunshine clarified documentation in user.mak.
23-May-2000
	- Fixed a small potential problem with the polygon Covers function.
	  It compared a float to 0 which seems to be a little system
	  dependent.  I made the test more robust.  The effect of this bug was
	  that the generated octree could be different on various platforms.
	- Wouter Wijngaards fixed a bug in radiosity.  Portals are traversed
	  now.  Slower, but looks great.  More array bound errors, though.
	  Perhaps the frustum code is buggy.  Radiosity can also handle
	  portals without lightmaps now.
	- More debugging on octree/PVS stuff.
	- Added a patch from Samuel Humphreys with the following changes for
	  dynamic textures.
	    - OpenGL renderer now employs software renderer through its SCF
	      interface rather than linking with it directly.
	    - Add a back buffer style implementation for opengl based on
	      Normans implementation.  However on my system, it runs at half
	      the speed as the software version, and it renders flipped in the
	      x-axis, I've tried lots of stuff to get it working properly, but
	      to no avail.  Need other people to have a go at this.  Also with
	      mesa and voodoo2 the texture shifts into the blue spectrum,
	      whereas it doesnt with software opengl...Im investigating this.
	    - Added further configuration stuff to opengl.cfg, so you can
	      choose dynamic texture implementation.  See comments there.
	    - Implemented some outstanding methods to the opengl driver:
	      SaveArea, RestoreArea
	    - Fixed bug in DrawPixmap, it now correctly renders sub region of
	      textures whose size has been modified.  This was highlighted by
	      cswstest.
	    - Modified glx2d.cpp so that it'll give a single buffer for CSWS.
	      An outstanding issue with paletted mode, i.e.  the glx drivers
	      will not work in paletted mode, but it wouldn't have done before
	      my modifications anyway....a todo!
	    - Small modification to csws so it requests a single buffer before
	      opening the graphics drivers.
	    - Change of signature to iGraphics3D->CreateOffScreenRenderer,
	      have attempted to update all drivers, but I may of missed
	      something.
	    - Promoted default implementation of
	      iGraphics2D::CreateOffScreenCanvas to csGraphics2D (as Eric
	      suggested), updated all other drivers too.
	    - oglglide now compiles again.
	- Eric Sunshine made the following changes to the recent Texinfo
	  conversions from Martin Geisse:
	    - Fixed quite a few warnings and errors reported by 'makeinfo'.
	    - Performed a much more thorough Texinfo conversion.
	    - Fixed all the formatting problems reported by TeX (mostly
	      involving overfull and underfull hbox's.
	    - Major overhaul of camera.txi, warping.txi, and texmap.txi so
	      that mathematical formulas and variables are correctly (and
	      nicely) typeset; especially when formatted with TeX.  This was a
	      big job, but it looks *very* nice, indeed.  :-)
	    - Removed appendix/resource.txi since the type of information it
	      presented was more-or-less the same as intro/resource.txi.  Also
	      much of it was extremely out-of-date.  However, I did add the
	      IRC reference to intro/resource.txi.
	    - Upgraded the documentation for mdl2spr.  Added a lot of missing
	      filler.
	    - Completely removed miscnote.txi since its contents were
	      incredibly out of date and mostly (if not entirely) meaningless
	      at this point in time.  The only thing I saved from this file
	      was the discussion of dynamic worlds and lighting which I placed
	      in a new file named dynworld.txi.
	    - Completely removed tcache.txi since it was 100% out-of-date and
	      inaccurate.  It no longer reflected reality.
	- Eric Sunshine eliminated compilation warning about */ appearing
	    outside of comment from many of the files which Samuel patched.
	- Eric Sunshine fixed a signed-vs-unsigned compilation warning in
	  the terrain library.
	- Eric Sunshine added a note to version.h instructing anyone updating
	  CS_VERSION and CS_RELEASE that they should also update
	  docs/texinfo/version.txi.
	- Frank O'Connor did the following changes:
	    - Added windows.h to csosdef.h
	    - Removed windows.h from other places.
	    - Removed scattered undef's that related to this file.
	    - Fix misc bugs resulting in this inclusion.
	    - Updated win32 opengl drivers with latest dynamic texture code.
	    - Misc fixes/cleanup.
	    - Initialize GfxPpl to null in CSWS. Prevents crash when a
	      video plugin is unavailable.
	    - Made GraphicsPipeline call G3D->FinishDraw before Print (in
	      CSWS). This allows the DDraw plugin to work correctly now.
	    - Fixes to VC project files.
22-May-2000
	- Added csPoly2D::GetSignedArea() and csPoly3D::GetSignedArea() to
	  calculate the signed area of a polygon.
	- Fixed another small bug in PVS building.
	- Added a new function to csFrustumView that is called for every
	  octree node that is visited.
	- Use CheckFrustum to optimize PVS building.  Added a QAD PVS that is
	  not correct but very fast to build.  It is not correct in the sense
	  that it will incorrectly mark nodes as invisible even if they are
	  visible.  But all nodes marked visible are SURE to be visible and
	  this is important.  This means that we can use the PVS in the first
	  place to debug the other PVS.  The real PVS should never cull nodes
	  that are marked visible by the QAD PVS.  Later we can use this QAD
	  PVS to optimize building the real PVS because nodes marked visible
	  by the QAD PVS do not need to be tested.
	- Martin Geisse added Texinfo conversions for tcache.txi, texmap.txi,
	  and csws.txi.  He also moved phyziks.txi into a new texinfo/libs
	  chapter.
	- Added Dumper::dump() for csOctree.
	- Norman Kramer adjusted vpath for oss.mak so that it compiles again.
21-May-2000
	- Performance optimizations to terrain engine from Alex Pfaffe.
	- Fixed big bug in PVS building which could cause significant
	  amounts of nodes NOT to be culled.
	- Eric Sunshine made the following changes to the terrain library.
	    - Fixed quite a few additional compilation warnings and errors,
	      some of which were introduced with Alex's latest changes; some
	      earlier.
	    - Ported to OpenStep by working around a compiler problem where it
	      generates unlinkable code when an inline method calls a second
	      inline method before the compiler has seen the second method.
	      Working around this problem is as simple as textually reordering
	      the file.
	- Eric Sunshine once again renamed instance variable Protocol to
	  NetProtocol in NSMGR to avoid name collision with Objective-C class
	  of same name.  Apparently Thomas Riemer reverted this change after
	  the last time the patch was applied.
	- Eric Sunshine fixed a couple typographical errors in cvs.txi and
	  updated anatomy/chapter.txi.
	- Eric Sunshine made the following changes to the NSTP plugin and its
	  interfaces:
	    - Cleaned up the relationship between iNetCmd and csNetCmd.  Many
	      places in the code made the potentially dangerous assumption
	      that iNetCmd was always implemented by csNetCmd.  This is no
	      longer the case.  Access to this type of object is now performed
	      via the iNetCmd interface exclusively except for actual creation
	      (at which time it is necessary to interact directly with
	      csNetCmd).
	    - Cleaned up ownership issues (to some extent).  Now invokes
	      IncRef() and DecRef() as appropriate.
	    - Added a lot of missing 'const' qualifiers.
	    - Published methods in the SCF interface for creating objects of
	      type iNetCmd.
	    - Fixed several instances where CONSTRUCT_IBASE() was not being
	      invoked, or not being invoked for all execution paths.
	    - Added CS_NETCMD_* variations to csNetCmd for all of the
	      represented types.  No longer makes dangerous assumptions about
	      when it is safe to access or free the string pointer 'sval'.
	    - Fixed memory leaks of strings and other objects.
	    - Now uses 'delete[]' where appropriate rather than 'delete'.
	    - Implemented all the missing cases of csNetCmd::Stringify().
	- Eric Sunshine made the following changes to the NSMGR plugin:
	    - Fixed it so that it is now completely self-contained.  No longer
	      directly accesses classes (such as csNetCmd) from the NSTP
	      plugin.  Now access to NSTP (and iNetCmd) is done strictly
	      through the published SCF interfaces (some of which I had to
	      augment in order to allow this type of proper abstraction).
	    - No longer makes the potentially dangerous assumption that
	      iNetCmd is always implemented by csNetCmd.
	    - Removed the special-case hack from the makefile which forcibly
	      linked NSTP object files into the NSMGR plugin (which was
	      required because NSMGR was incorrectly accessing NSTP objects
	      directly rather than through an SCF interface).
	    - Now access engine objects indirectly through their published SCF
	      interfaces iWorld and iSector rather than referencing them
	      directly via csWorld and csSector.
	    - Cleaned up ownership issues (to some extent).  Now invokes
	      IncRef() and DecRef() as appropriate.
	    - Fixed several instances where CONSTRUCT_IBASE() was not being
	      invoked.
	    - Fixed memory leaks of strings and other objects.
	    - Now uses 'delete[]' where appropriate rather than 'delete'.
	- Eric Sunshine fixed the csClear plugin so that it is now entirely
	  self-contained (linkage-wise) by patching the makefile to link the
	  plugin against all libraries which it references.
	- Eric Sunshine was finally able to remove the special-case NeXT-
	  specific makefile hack from scfreg.mak which was needed because some
	  plugins (specifically csclear and csnsmgr) were not self-contained.
	- Eric Sunshine patched bin/makefile.py so that it tries just a little
	  bit harder to keep the generated makefile under 80 columns.
	- Eric Sunshine performed the Texinfo conversion on the VFS
	  documentation and merged it into the CS manual.
	- Martin Geisse performed Texinfo conversions on camera.tex,
	  mdl2spr.txi, miscnote.tex, render.tex, resource.tex, sound.html,
	  and warping.tex.
19-May-2000
	- Alex Pfaffe did various changes to terrain engine again.
	- Various small changes to csTerrain to help Alex integrate his
	  engine again.
	- Frank O'Connor fixed Win32 release build.
	- Andrew Zabolotny added int8, uint8, int16, uint16, int32,
	  uint32 types. They are supposed to replace UShort, ULong and so
	  on in the future.
	- Fixed cstypes.h to remove the unportable #ifdef __32BIT__.
	- Some improvements to PVS statistics for debugging it better.
	- Changed csBox3::Adjacent() to return the side of the box that
	  it is adjacent with.
	- PVS now also works for adjacent nodes. If two nodes are adjacent
	  then the solid mask on the border will be checked.
	- Eric Sunshine eliminated some compilation warnings in the terrain
	  library.
	- Eric Sunshine added a brand new section to the detailed "anatomy"
	  portion of the documentation for the MacOS/X Server, OpenStep, and
	  NextStep ports describing how dynamic linking of plug-in modules
	  now emulates the model used by other platforms.
	- Eric Sunshine eliminated 'underfull hbox' warnings in the detailed
	  "anatomy" portion of the documentation for the BeOS port.
	- Eric Sunshine eliminated compilation warnings about */ used outside
	  of comment in the network manager source code.
18-May-2000
	- Frank O'Connor added __CRYSTAL_SPACE__ define to VC project file.
	- Another small terrain update from Alex Pfaffe.
	- Started work on multiple passes in PVS.
	- Small optimization on PVS building speed.
	- Added csBox3::ManhattanDistance.
	- Implemented first version of multi-pass PVS calculation.
	  It is not yet very useful though because quality isn't high
	  enough right now.
	- Eric Sunshine fixed many additional compilation warnings in the
	  terrain library; mostly reported by MSVC.
	- Eric Sunshine fixed many warnings throughout the project which were
	  reported by MSVC.
	- Eric Sunshine added YY_NEVER_INTERACTIVE to the Dungeon plugin in
	  order to resolve the isatty() warning under MSVC.
	- Eric Sunshine had to re-add some special case code to scfreg.mak in
	  order to allow all plugins to register correctly on NeXT.  In
	  particular, csclear and csnsmgr were having difficulty.
	- Wouter Wijngaards fixed an array bounds bug in radiosity.
	- Norman Kramer fixed a non-const with rvalue assignment.
	- Added csPoly3D::ComputePlane() and csPoly3D::ComputeNormal().
	- Further work on PVS solid boundary optimization. This optimization
	  seems to work very well. Quality of PVS improved considerably
	  (still not enough!).
17-May-2000
	- Thomas Riemer added scaffolding functions to allow loading world
	  into NetSpace world.
	- Paul Garceau updated jpgimage.cpp for Win32/GCC.
	- Added csPolygon3D::PointOnPolygon to test if a point is on a
	  polygon.
	- Added csBox3::GetSide() with corresponding BOX_SIDE_??? defines to
	  get the side of a box as a 2D box.
	- Added csBspNode/csOctreeNode::CountPolygons() that will be used to
	  gather statistics about the quality of the generated PVS.
	- Added and printed additional statistics gathering for the PVS.  You
	  can now see the percentage of polygons culled.
	- Did a few compile fixes on terrain engine.
	- Paul Garceau did a few additional fixes on terrain engine.
	- Reverted a few problematic changes from Paul Garceau (mk/user.mak
	  and terrain engine).
	- Wouter Wijngaards fixed the depend target of the terrain engine.
	- Eric Sunshine reverted more problematic changes and fixed errors or
	  potential problems which Paul Garceau introduced.
	- Changed a fix from Eric to octree.cpp to make it a bit more
	  readable.
	- Eric Sunshine changed the NeXT ports so that they utilize the
	  makefile's $(OUTDLL) facility to locate dynamic load libraries in a
	  subdirectory ("components") rather than polluting the root CS
	  directory with them.
	- Eric Sunshine made the following changes to the network interfaces,
	  socket driver, and network manager.
	    - Removed socket-specific functionality from inetdrv.h which was
	      added when NetSpace was introduced into the project and which
	      completely corrupted the abstract nature of the interface.
	    - Removed all the junk which was unnecessarily added to the socket
	      driver when NetSpace was introduced.
	    - Moved (almost) all of the platform-specific socket configuration
	      and select()-configuration information out of socket.cpp and
	      into platform-specific csosdef.h files where it belongs by
	      expanding the meaning of SYSDEF_SOCKETS.
	    - Added a new SYSDEF_SELECT to cssysdef.h which is used by
	      implementations to indicate that they require select() and the
	      FD_* file-descriptor macros.  Added appropriate configuration
	      information to platform-specific csosdefs.h files where
	      necessary.
	    - Added (potentially temporary) iNetworkSocket interface which
	      represents an abstract socket-based connection or listener.
	      This interface provides a clean way for the network manager to
	      deal with file-descriptor sets and select() without having to
	      corrupt the pure and abstract inetdrv.h.  I expect this
	      interface to disappear once the networking system is upgraded to
	      allow select()-style functionality in a completely generalized
	      fashion, however in the meantime, this provides a clean solution
	      to the problem of the network manager wanting to have inside
	      information about socket-driver specifics.
	    - Reworked Thomas Riemer's network manager just enough so that it
	      works via the new iNetworkSocket interface instead of relying
	      upon the corruption of inetdrv.h (which has been removed).
16-May-2000
	- Alex Pfaffe did some minor changes/cleanup to the terrain engine.
	- Removed a few warnings in terrain.cpp.
	- Added csOctree::ClassifyRectangle() that will be used for PVS
	  calculation.  This function calculates a 4x4 bitmap representing the
	  solid space in some rectangle.
	- At octree calculation time the solid masks are precalculated for
	  every node.  The octree cache format version has been bumped up so
	  that recalculation of the octree is automatic.
	- Modified db_octree command so that it will show all leaves
	  (disregarding depth) if -1 is given as an argument.
	- Added csPolygon3D::IntersectRayNoBackFace() which does the same as
	  csPolygon3D::IntersectRay() but without back-face culling.
	- Wouter Wijngaards made a small quality increase in radiosity.
	- Fixed csPolygonTree::ClassifyPoint().
	- Fixed solid mask calculation to make it more correct and
	  faster.
	- Made solid polygon iterator which is going to be used by PVS.
	- Disabled the new routine to calculate the solid mask because it is
	  too slow.  I need to make this faster.
	- Eric Sunshine and Jorrit performed repair work on the new terrain
	  library merge, bringing the makefile and source code into shape.
	  Eliminated compilation warnings and errors.
	- Eric Sunshine eliminated all the remaining build-time problems
	  with the new terrain library.
	    - Eliminated all the remaining compilation errors and warnings in
	      the new terrain library.  This mostly involved missing I/O
	      streams, lack of bool type (on some platforms), implicit
	      conversion from float to integer, etc.
	    - The terrain makefile now defines __CRYSTAL_SPACE__ when building
	      for Crystal Space.  Currently this define is used to control
	      whether or not cssysdef.h and cstypes.h are included.
	    - Enabled all the code in csengine/terrain.cpp which was protected
	      within DDG_FIXME blocks.
	    - Updated makefile so that Crystal Space applications once again
	      link against the terrain library.
	- Eric Sunshine worked around a problem with the NextStep compiler in
	  octree.cpp where it failed to correctly create an array of csPoly3D
	  objects.
	- Frank O'Connor did a small fix to ddgcolor.cpp as well.
	- Frank also update VC project files for csterr.
15-May-2000
	- Added const version of csPoly3D::operator[].
	- Added csPoly3D::SplitWithPlaneXYZ().
	- Implemented csPolygonTree::ClassifyPoint() and csBspTree/
	  csOctree::ClassifyPolygon. This functions respectively test a
	  point/polygon against the tree. The test returns wether or not
	  the object is in solid space.
	- Wouter Wijngaards added a temporary bugfix for radiosity. This
	  fix only avoids the bug but does not really solve it. It makes
	  radiosity (and lighting) a bit slower but at least it doesn't
	  crash anymore.
	- Eric Sunshine cobbled things back together just enough so that the
	  project can once again be built on Unix following phase one of
	  Alex's merge of the new terrain code.  For now terrain functionality
	  is completely disabled.  For Windows, the project file maintainer
	  will probably need to adjust include paths in the csparser and
	  csengine projects to refer to libs/csterr.
	- Eric Sunshine eliminated compilation warnings in octree.cpp.
	- Eric Sunshine renamed the following files and fixed references to
	  them throughout the project:
	      def.h        --> csdef.h
	      sysdef.h     --> cssysdef.h
	      types.h      --> cstypes.h
	      frustrum.h   --> frustum.h
	      frustrum.cpp --> frustum.cpp
	- Eric Sunshine eliminated compilation warnings from csnsmgr.cpp.
	- Eric Sunshine eliminated compilation warnings from octree.cpp,
	  polytree.cpp and bsp.cpp.
	- Implemented new 'TEXTURE' keyword for upcoming terrain engine.
	  With this keyword you set the basename for all the textures
	  used by the terrain. The base should be something like
	  'MyTexture%d.jpg'. %d will be replaced with 0 to 127 for example.
	- Thomas Riemer added stubs for AddWorld and AddSector.
	- Frank O'Connor fixed a few files which were incorrectly modified
	  by Eric Sunshine for his large rename of some include files.
	  More in particular: many files in Blocks and CCTest were empty.
	- Frank did a few minor updates to the VC project files.
	- Norman Kramer added a missing cssysdef include to cspython/swig.
14-May-2000
	- Added csPoly3D::ClassifyXYZ() routines.
	- Started work on new optimization for PVS.
	- Eric Sunshine fixed rendering of fog by software renderer in 32-bit
	  mode on NeXT for both big- and little-endian.  There were several
	  problems:
	    - Inconsistent interpretation of TOP8BITS_R8G8B8_USED.  When
	      Andrew first introduced TOP8BITS_R8G8B8_USED it was interpreted
	      as meaning that the display driver might _possibly_ use the high
	      byte of a 4-byte pixel value.  However, in some of his more
	      recent code, it was interpreted as meaning that the high byte
	      was _positively_ used.  As a consequence, DrawFogPolygon() chose
	      completely incorrect values for csScanSetup's FogR, FogG, and
	      FogB values on little-endian machines.
	    - Inconsistent interpretation of csScanSetup's FogR, FogG, and
	      FogB values.  In some cases, the fog scanline functions expected
	      these values to be normalized to 0x00RRGGBB (note that the high
	      byte is unused), but DrawFogPolygon() initialized these values
	      without normalizing them.  Furthermore, even the scanline
	      functions were inconsistent in their expectation of these
	      values.  In particular, the calculation of 'fog_pix' neglected
	      to take normalization into account.
	    - Incorrect definition of PIXEL_PREPROC() and PIXEL_POSTPROC().
	      For instance, PIXEL_POSTPROC() was defined as "x << 8".  When
	      invoked with PIXEL_POSTPROC(r|g|b) this had the unfortunate
	      side-effect of only shifting the blue color rather than the
	      composite value, since it expanded to the equivalent of
	      (r|g|(b<<8)).  The correct definition should have been
	      "(x) << 8", which would expand to ((r|g|b)<<8) as desired.
	    - Signed rather than unsigned values in several places, including
	      the scanline routines as well as csScanSetup's RGB values.
	      During right-shift operations, this could result in unwanted
	      sign-extension.
	- Eric Sunshine fixed a bug in the software renderer's fog scanline
	  drawing routines where they failed to clamp the blue color to
	  0x000000ff when recomposing the 'destination' pixel.  (Note that the
	  red and green colors were correctly clamped to 0x00ff0000 and
	  0x0000ff00, respectively.)
	- Eric Sunshine fixed rendering of halos by software renderer in
	  32-bit mode on NeXT for big-endian machines.  There were several
	  problems:
	    - Overflow during computation of a halo color component, which led
	      to corrupt composite color.  The problem was that
	      csSoftHalo::Draw() was computing color values based upon color
	      masks using the formula "(int)(C * pfmt.mask + 0.5)" where C is
	      a floating point number.  On big-endian NeXT machines, where the
	      red mask is 0xff000000 this formula overflows (even in the
	      obvious case when C is 1.0).
	    - Inconsistent interpretation of csScanSetup's FogR, FogG, and
	      FogB values.  The halo scanline functions expected these values
	      to be normalized to 0x00RRGGBB (note that the high byte is
	      unused), but csSoftHalo::Draw() initialized these values without
	      normalizing them.
	    - Signed rather than unsigned values in several places, which
	      could have resulted in unwanted sign-extension.
	- Eric Sunshine fixed trilinear filtering in the software renderer for
	  32-bit big- and little-endian on NeXT.  The problem was that the
	  32-bit 'filt2' routines neglected to apply PIXEL_POSTPROC() to the
	  composed pixel value.
	- Thomas Riemer added lock functions to skeleton (iAuth).
	  Add CmdList - change NetProtocol variable to Protocol.
	- Paul Garceau did an update for Mingw/NT4/Win98.
	  user.mak commented to ignore PLUGINS reference.  PLUGINS are
	  determined by Mingw.mak, win32vc.mak, unix.mak, etc.  If you
	  require that PLUGINS be referenced in user.mak,  then
	  uncomment PLUGINS references in user.mak, etc.
	- Eric Sunshine reverted several of the files which Paul committed
	  since he forgot to commit several supporting files and also
	  accidentally blasted many useful default values and replaced them
	  with his own custom settings.
	- Eric Sunshine removed more obsolete CHK() and CHKB() references.
	- Big update of terrain engine from Alex Pfaffe. Currently broken
	  though.
13-May-2000
	- Did some fixes on PVS again. For the very first time PVS seems
	  to be doing what it is supposed to do: cull invisible nodes :-)
	  Quality of the PVS is still bad (too few invisible nodes) but
	  Wouter and me discussed various techniques to solve that.
	  Note that polygons are not yet included in PVS. This is only
	  the node -> node PVS part.
	- Added PVS optimization suggested by Wouter Wijngaards which
	  treats nodes that cannot see an occludee as completely solid.
	  This both makes PVS creation faster and increases the quality
	  of the PVS as well. This is still not the full set of quality
	  improvements that is planned.
	- Frank O'Connor changed main signature of mdl2spr for Win32/CSsys
	  compatibility.
	- Frank O'Connor did part 2 of the big MSVC/win32 overhaul.
	    - Split cspace into multiple smaller libs, more like the make
	      file system.
	    - Removed all unused libs from projects. Projects attempt
	      to link to things the explictly need only.
	    - New naming scheme for projects. Groups them by their function
		plg* = plugin
		lib* = libaray
		grp = project use for grouping only
		app = application
	    - Converted a few more apps they didn't have MSVC projects
	      built for them.
	- Norman Kramer fixed csview which Wouter accidently broke.
	- Paul Garceay modified ddraw.mak to once again allow for all
	  required source files in plugins/video/canvas/common.
	  Extended vpath to include plugins/video/canvas/common.
12-May-2000
	- Michael Dale Long did some bug fixes to csConsole. No longer has
	  crashes when editing history items.
	- Added 'freezepvs' command to freeze the PVS at some position. This
	  is useful to debug the PVS. After freezing the PVS you can walk
	  around and examine what is visible and what not.
	- Added 'pvsonly' command so that you can force visibility culling
	  to operate ONLY with the PVS and not use any other culling
	  mechanisms (like c-buffer).
	- Worked a bit more on PVS. Still not working :-)
	- Made PVS caching more robust.
	- Updated the 'help' in WalkTest so that commands are grouped
	  logically.
	- Andrew Zabolotny fixed the Software renderer makefile that
	  Paul broke a little.
	- Eric Sunshine fixed a bug in iNetCmd.  The Push() method was not
	  declared abstract.
	- Eric Sunshine added a very ugly patch to the csnsmgr makefile to
	  allow it to link.  For some reason, this plugin is including files
	  from the nstp plugin and uses its classes directly instead of
	  going through the SCF interface.
	- Eric Sunshine fixed a bug in the 'depend' target of for BeOS OpenGL.
	- Andrew Zabolotny added a new CSWS component: notebook control
	  AKA "property shit". Only used in cswstest for now. Going to be
	  used in MazeD.
	- Removed all CHK and CHKB from the code. That memory debugger
	  is now obsolete.
	- Fixed bug in OpenGL makefile. The inclusion of the software
	  renderer caused problems if the CS version of NASM was present.
	  The NASM asm files were not included in the OpenGL makefile
	  causing undefined symbols in the included software renderer.
	- Fixed bug in PVS. Correctly does backface culling now.
	- ProjectAxisPlane() in csgeom now returns a boolean to indicate
	  if the projection was possible.
	- Eric Sunshine eliminated a compilation warning in csnotebk.cpp.
	- Eric Sunshine moved declaration and definition of cspExtDialog
	  outside of the function within which it was defined since the BeOS
	  compiler was generating unlinkable code.
	- Eric Sunshine added dynamic-texture support to BeOS software and
	  OpenGL 2D drivers.
	- Eric Sunshine modified the BeOS system driver so that it now
	  automatically changes the current working directory to path the
	  which contains the executable.  This allows CS applications to find
	  their resources even when launched via double-click from the Tracker
	  application.
	- Wouter Wijngaards added SetLastFrustumId(int) public routine
	  to csLightMap. He needs it for radiosity.
	- Wouter cleaned up the radiosity code a lot and removed various
	  unused routines. Should be somewhat faster. Ambient and
	  priority are calculated better (better formulas). Extra fixes
	  for bound check overflow.
11-May-2000
	- Changes from Michael Dale Long:
	    - Added a CHK_DECREF() macro to cctest.h that checks if an
	      object is not NULL and performs a DecRef() on it if so.
	      Should be used only used when it is _possible_ for a SCF
	      interface to be NULL (i.e. aborted init).
	    - Rewrote iPawn interface (include/csclear/ipawn.h). I plan
	      to begin implementing it soon.
	- Frank O'Connor added dtSimple to application build list.
	- Frank updated VC project files for dynamic textures (OpenGL).
	- Paul Garceau did a modification for software renderer makefile.
	  Changed vpath to consider plugins/video/renderer/common
	  as well as plugins/video/renderer/software.
	- Finished caching of PVS. Also added dummy PVS calculator that
	  is used for now and just creates a PVS that says that everything
	  is visible :-)
	- Added quick and dirty memory debugger in WalkTest that's a bit
	  easier to setup than the one from Andrew and also works immediatelly
	  in a debugger. Just go to the end of WalkTest and change #if 1
	  to #if 0. It catches memory overwrites, double deletes, and
	  allocs with 0 bytes.
	  It will also catch mismatches in new[]/delete[] and new/delete.
	- Fixed a bug in radiosity. It was calling 'delete' on an array
	  allocated with 'new[]'.
	- Changed calloc/free in polytext.h (csCoverageMatrix) to
	  new[]/delete[] in order to help debugging it (memory debugger
	  only works on C++ memory allocators).
	- Added 'pvs' command to toggle pvs usage (note that PVS is still
	  not working properly).
	- Norman Kramer added a method to iGraphics2D to set the font
	  size.
	- Norman changed CSWS so that components can now draw with their
	  own fontsize.
	- Norman merged the two glide2 and glide3 renderers into one
	  glide renderer.
	- Norman fixed a bug in the freefont plugin. The font was closed
	  twice at closing time.
	- Wouter almost fixed a bug in radiosity:
	    "Now, the bug is almost fixed. And I know why it happens.
	     The light frustum given to GetCoverage must be clipped to
	     responsability rect, and this was not done yet.
	     csPolyTexture::GetLightmapBounds will need some small
	     change to work with this (the frustum_id check / code
	     must go back to csPolygon I think.)"
10-May-2000
	- Michael Dale Long did a major update for CrystalClear.  A lot of
	  work has been done on iActor.  The main thing was adding multiple
	  velocity support.  A lot of other bugfixes and other things I can't
	  remember right now, too.
	- Frank O'Connor updated VC project files for new dynamic texture
	  system.
	- Modified makefile system to add an extra 'dyn' or 'stat' in the
	  'out' directory to differentiate between dynamic or static linking.
	- Fixed an internal compiler error for gcc 2.7.2 in the Crystal Clear
	  code.
	- Andrew Zabolotny did a few code style fixes for csfont plugin and
	  misc fixes for OS/2 DIVE canvas.
	- Eric Sunshine added dynamic-texture support to the NeXT ports.  He
	  also removed unused junk from dyntex2d.
	- Samuel Humphreys sent me a new patch to clean up his dynamic
	  textures and also implement them for OpenGL.
	- Eric Sunshine eliminated symbolic naming conflict in several of the
	  NetSpace sources where a variable named "Protocol" conflicted with
	  the Objective-C class of same name.
	- Eric Sunshine fixed a bug in csFont where it incorrectly computed
	  FontCount (as one too large).  This could have been responsible for
	  the crasher in OpenGL AddFont().
	- Norman Kramer removed the explicit IncRef of VFS that caused the
	  warning about unreleased instance of kernel.vfs.
	- Eric Sunshine overhauled the approach used for dynamic (plug-in)
	  linking on MacOS/X Server, OpenStep, and NextStep ports.
	    - These ports now do a fairly good job of emulating dynamic
	      linking as it is done on most other platforms in which symbols
	      within a plug-in are private unless explicitly exported.
	      Historically, with the NeXT ports, all symbols were
	      automatically public.  This naturally leads to severe symbolic
	      conflicts since many plug-ins link with the same static
	      libraries.  As a consequence, in the past I had to devise
	      elaborate mechanisms to work around these conflicts.
	    - The NextStep port emulates private plug-in symbols by actually
	      stripping all public (resolved) symbols, except for the SCF
	      GetClassTable() hook, from the plug-in module at build time.
	      This technique provides fairly decent insurance against symbolic
	      conflicts at plug-in load time even when multiple plug-ins have
	      linked against the same static libraries.  The only big drawback
	      to this approach is that it makes symbolic debugging impossible.
	      I had tried the alternate approach of parsing the error stream
	      from RLD and calling rld_forget_symbol() for symbolic conflicts,
	      and then attempting a reload, but the RLD run-time is
	      sufficiently buggy that it would actually crash within
	      rld_forget_symbol().
	    - The MacOS/X Server and OpenStep ports emulate private plug-in
	      symbols by taking advantage of DYLD's NSLinkEditErrorHandlers
	      which allows the loader to ignore duplicate symbols at load
	      time, thus there is no need to strip them away at build time.
	      This approach has the advantage that symbolic debugging
	      capability is retained.  I had attempted to use the same
	      approach as I used for the NextStep port (that of stripping
	      aways symbols at build time), but discovered that the
	      Objective-C run-time is more picky in OpenStep than NextStep.
	      In particular, it couldn't deal with the fact that symbolic
	      references to Objective-C classes defined locally in the plug-in
	      had been stripped away.  It would be possible to manually
	      instruct the 'strip' utility to retain certain symbols, but
	      doing so would have introduced a potential maintanence headache
	      as future changes are made to the code.
	    - Eliminated all the special-case hacks which had been placed in
	      various applications to force symbolic references in the
	      executable itself so that the symbols would be available for
	      dynamically loaded plug-in modules.  Since plug-in modules now
	      link with all the libraries which they, themselves, require, the
	      application no longer needs to do so.
	    - Eliminated special-case makefile hacks which forced applications
	      to link with extra libraries required by plug-in modules which
	      they might end up loading.  In particular, scfreg makefile was
	      considerably simplified.
	- Frank O'Connor switched dtsimple to use cryst.cfg.
	- Robert Bate updated the Mac port and project files again.
	  He fixed up access paths and runtime libraries and added a
	  shared library target.
	  He also moved projects that make plugins to the new
	  MakePlugins.mcp project.
	- Norman Kramer added dynamic texture rendering support for Glide.
	  His support does not use the software renderer but native hardware
	  rendering.
	- Frank O'Connor added a check to the OpenGL texture manager before
	  calling DecRef in destructor.
9-May-2000
	- -revis commandline option will now work to force recalculation
	  of the octree. -norevis will not work for this as CS cannot
	  live with an octree that is invalid. If the octree is found
	  not to match with the level it HAS to be recalculated.
	  This is different with the PVS. When we cache this then
	  -norevis will be useful there.
	- Frank O'Connor changed directory and naming scheme of normans
	  font plugins to maintain consistency among the new plugins.
	- Frank also fixed bug in blocks where current menu item was not
	  visible on win32. This was because of improper intialization.
	- Norman Kramer added FontRender entries to all the config files.
	- Norman also added FUNC_ID for fontrenderer to isystem.h.
	- Norman disabled freetype engine plugin to prevent default
	  compilation, user should enable it itself.
	- Norman added missing methods for dynamic textures (still dummies).
	- Thomas Riemer did a minor fix for initialization of name for
	  command for NetSpace.
	- Frank O'Connor did some fixes with regards to the new font
	  renderer plugin.
	- Norman Kramer changed program name to avoid naming conflicts
	  between rule and program name on unix systems.
	- Norman fixed gfxtest to change %ld to %d.  Eric Sunshine then fixed
	  this fix to be more portable regardless of how size_t is defined on
	  any particular platform.
	- Norman removed various unused variables.
	- Norman Kramer fixed mixup of glxclean and glx2dclean rules in
	  makefile.
	- Eric Sunshine fixed the formatting of the help message for csfont.
	- Eric Sunshine fixed pytest.mak so that it only adds its target if
	  Python was detected on the system.
	- Eric Sunshine made dnapp more Unix-friendly.  It now uses -h for
	  help rather than -?.  The problem with -? is that '?' is a filename
	  wildcard to the Unix shell.  (Renamed the old -h option to -q.)
	- Received a patch from Samuel Humphreys which allows you to render
	  on texture dynamically. Currently this only works for the software
	  renderer. Support for the other renderers will have to be added.
	  There is also a new 'dtsimple' demo app to show of the new
	  feature.
	- Paul Garceau modified win32/volatile.h to enable user to decide
	  whether or not Trocchus' DO_DINPUT_KEYBOARD should be enabled.
	- Paul also did some Mingw specific modifications. He added an option
	  to decide which processor you want to use (default is i386).
	  If you wish to use another Intel processor you will need to modify
	  CFLAGS.GENERAL.
	- Eric Sunshine fixed several compilation problems throughout the
	  project.
	- Eric Sunshine updated next.txi and beos.txi to make reference to new
	  csfont plugin.
	- Eric Sunshine eliminated an apparently bogus warning from the
	  OpenStep compiler in inifile.cpp.
8-May-2000
	- Eric Sunshine re-enabled -kb flag and re-added CRLF line terminators
	  for all .dsp files so that they will work even from CVS snapshot
	  which is created on a Unix machine.
	- Eric Sunshine made the following configuration file-related changes:
	    - All Crystal Space application and plug-in configuration files
	      are now loaded from virtual filesystems via VFS rather than the
	      physical filesystem, with the exception of scf.cfg and vfs.cfg
	      which can not be loaded from VFS for (hopefully) obvious
	      reasons.  (scf.cfg is needed to initialize SCF which is used to
	      load the VFS plug-in, and vfs.cfg is used to actually define the
	      VFS volumes.)
	    - Moved all configuration files onto the VFS volume /config which
	      happens to be mounted at physical location CS/data/config.  Note
	      that using the /config volume is a convenience, rather than a
	      requirement.  Programs written using Crystal Space can choose to
	      locate their own configuration files anywhere they like; even on
	      a physical filesystem, if desired (though this is frowned upon).
	- Eric Sunshine modified WalkTest so that script files which it
	  executes are now loaded from VFS rather than from a physical
	  filesystem.
	- Eric Sunshine fixed a lot more 'const' problems throughout the
	  project.  Most of these involved changing (char*) to (const char*).
	- Eric Sunshine added 'bool' variations of the Append() method, and
	  operator+= and operator<< to csString.
	- Eric Sunshine made the following changes to ScanStr():
	    - Fixed bug: Wasn't able to parse strings which used only
	      whitespace as delimiters, such as "%f %f %f".  In this case, it
	      would only scan the first "%f" and skip the remainder of the
	      string.  (It has always been able to parse strings which use
	      non-whitespace delimiters, such as "%f,%f,%f".)
	    - Is now much more tolerant of Macintosh and Windows/DOS line
	      terminators (CR and CRLF).
	- Eric Sunshine made the following changes to WalkTest's 'coord' file
	  handling:
	    - WalkTest now saves and loads 'coord' files via VFS rather than
	      via a physical filesystem.
	    - The format of the 'coord' file has changed slightly.  The stored
	      sector name is now quoted (with double-quotes) rather than bare.
	- Eric Sunshine worked around a limitation of Wouter's Solaris
	  compiler which could not grok the 64,000 byte "Data" buffer built
	  into dnFileBuffer.  Therefore, the Data buffer is now allocated from
	  heap.
	- Thomas Riemer added auth interface/plugin and NetCmd interface.
	  Change icmdmgr.h and iproto.h to use NetCmd interface.
	  Added first nstp implementation documentation.
	  Upgrade nstp client demo - now it allows login to server.
	- More work on saving/loading octree. The octree save/load
	  now seems to work perfectly. PVS is not cached yet.
	  The cached octree format contains a few consistency checks
	  to make sure that the octree is really valid for the current
	  level. If it fails then the octree will be recalculated
	  again.
	- Martin Geisse changed standard textures in dungeon plugin from
	  GIF to JPG. Martin also fixed a bug in the dungeon sample input
	  files.
	- Frank O'Connor changed csAll.dsw to binary.
	- Frank also removed very outdated glide projects for Win32.
	- Frank also redid some of cspace project to put all interfaces
	  under one logic group.
	- Frank also did various other VC project file changes.
	- Frank converted legacy SysPrintf to m_piSystem->Printf.
	- Eric Sunshine fixed several compilation warnings throughout the
	  project.
7-May-2000
	- More work on PVS. Still not working properly though.
	- Started working on saving and loading of octree and PVS.
	  This will help debugging this thing as computing it is
	  time consuming.
	- Frank O'Connor added the ability to change dynamically
	  between window/fullscreen. This is implemented via iGraph2D::
	  PerformExtension() (called 'fullscreen'). Currently only
	  DirectDraw2d handles this. Added new 'fullscreen' console
	  command to use this extension.
	- Frank also rewrote a lot of DirectDraw. Work on unifying all
	  DirectDraw drivers into one.
	- Gary Haussmann added patch submitted by
	  samuel@metalog.softnet.co.uk, to fix segfaults when using
	  Voodoo/glide based X server.
	- Eric Sunshine pored through the project several times to correct
	  problems caused by relocation of 2D, 3D, and sound drivers from
	  CS/libs to CS/plugins.  He updated source, headers, makefiles,
	  scripts, and documentation.  The directories which were relocated at
	  this time were:
	      libs/cs2d --> plugins/video/canvas
	      libs/cs3d --> plugins/video/renderer
	      libs/cssnddrv --> plugins/sound/driver
	      libs/cssndrdr --> plugins/sound/renderer
	- Eric Sunshine fixed csnetman.mak so that it properly classifies
	  itself as a plug-in module rather than driver.
	- Eric Sunshine fixed several additional compilation warnings which
	  were recently introduced into the project.
	- Eric Sunshine fixed an error in the mingw.mak makefile.
6-May-2000
	- Fixed several bugs in PVS and routines used by PVS. It finally
	  starts to resemble doing PVS work for real.
	- Norman Kramer changed DRIVERS into PLUGINS for the linux
	  makefile.
	- Norman also changed all references to the old directories
	  cs2d and cs3d.
	- Eric Sunshine fixed a bug in the 'depend' target of openglx/glide.
	- Eric Sunshine added ugly debug_dump() and cleanup() to scfreg.cpp
	  for glooky Linux system driver.
5-May-2000
	- Andrew Zabolotny removed some relatively expensive unneeded
	  code from lighting routines which should make lighting (both
	  static and dynamic) work faster :-)
	- Andrew split FillLightMap routine into two: GetCoverageMatrix
	  and FillLightMap. The first one can be used to get the coverage
	  matrix for any frustum projected on the polygon lightmap.
	  Wouter is going to use it for radiosity.
	- Frank O'Connor fixed post-build copy macro for VC project files.
	- Frank also fixed bug where DirectDraw 2d plugin was exporting
	  a class name that did not synch with SCF.CFG or the MSVC output
	  name. The (default) directdraw 2d class is now named csddraw. The
	  ddraw.mak and static.cpp have been updated as well.
	- Fixed bug in csIntersect2::Planes(). It always returned false
	  even if there was an intersection.
	- Paul Garceau modified mingw.mak to accomodate static lib builds
	  for COMP_GCC. Added libdinput.a link reference.
	- Paul also forced scf to use Dx3 for Windows NT4 under COMP_GCC.
	- Fixed a fix by Eric to radiosity (suggested by Wouter Wijngaards).
	- Fixed memory leak in new lighting code from Andrew.
	- Further debug work on PVS. Still not working properly though.
	- Wouter Wijngaards updated radiosity. It is still buggy though.
	- Fixed bug in csPoly3D::ProjectXPlane (and Y/Z).
	- Eric Sunshine fixed a bug in cs2d/common/scrshot.cpp where it was
	  applying an incorrect cast to the abstract "Data" which it was about
	  to delete[].  But was pointed out by samuel@metalang.softnet.co.uk.
	- Eric Sunshine eliminated several newly introduced compilation
	  warnings from the project.
	- Eric Sunshine performed the (hopefully) final unification and
	  correction of the DDraw naming problems/conflicts.  To summarize:
	    - Unified on name "csddraw" everywhere.
	    - Removed old duplicate, legacy names from g3d and scf.cfg which
	      referred to same driver by multiple names.
	    - Makes proper use of SOFTWARE_2D_DRIVER everywhere.
4-May-2000
	- Chris Bruner did some various cleanups in some files.
	- Borland Ehle did an attempt to unify makefile for all Win32
	  compilers.
	- Frank O'Connor did a big win32 project overhaul to standardize
	  (re-standardize) the settings, defines, paths whic the projects
	  use. Defined debug/ and release/ directories, added a macro for
	  copying output to root directory. Prevents clutter from debug
	  info, browse files, ilk's and other files that MSVC makes.
	- Martin Geisse did some update and clean-up work for dungeon
	  plugin.
	- Andrew Zabolotny fixed another lighting bug. Now every light
	  frustum has a unique numeric ID which can be used to uniquely
	  identify that frustum. This is used to avoid duplicate lighting
	  of same shared lightmap by same light.
	- Eric Sunshine fixed a slew of compilation problems throughout the
	  project.
	- Eric Sunshine fixed a bug in the Dungeon plugin in which virtual
	  base classes were not used for multiple-inheritance even though it
	  was required.  In particular, these objects were cast to type csBase
	  even though they inherited from csBase multiple times, thus the
	  compiler was (correctly) unable to choose which csBase parent to use.
	  Now csBase is a virtual parent, so there is only one instance of it
	  per derived child.
	- Eric Sunshine made the following changes to csMD5:
	    - Fixed bug: MD5 algorithm wasn't taking endianess into account at
	      all.  (The original MD5 implementation by the author -- Peter
	      Deutsch -- did take endianess into account, but somehow this
	      code was omitted from the MD5 implementation which ended up in
	      csutil/csmd5.)
	    - Performed a complete overhaul of csMD5.  (What else did you
	      expect from me?)  Not only does this simplify usage but also
	      exposes Peter Deutsch's original API for people who want super-
	      fine control over the process.  (The old csMD5 implementation
	      did not allow access to the original API and was less flexible,
	      as a result.)
	    - Fixed bug in Michael Long's GetReducedHash() function.  It
	      wasn't taking endianess into account.  I also moved this
	      function to cctest (which is the only place it was used) since
	      it is inappropriate for a general MD5 class, IMHO.
	- Robert Bate made some more InputSprocket changes.
	- Robert also updated the Mac project files.
3-May-2000
	- Fixed bug in Blocks which caused the menu not to work
	  properly (left/right arrows were gone).
	- Andrew Zabolotny did a large update:
	    - Removed all stuff related to the old way to do high-quality
	      lightmaps. Removed csPolygon3D::ScaleLightmaps2X,
	      csPolygon3D::UpdateLightmapSize, csLightMap::Scale2X.
	      Removed all stuff required to support 2x lightmaps from csWorld.
	    - Implemented a totally new way to do high quality lightmaps.
	      It is supposed to produce more high quality lightmaps. Last
	      but not least the new algorithm removes both infamous Black
	      Borders {tm} problem as well as the old White Borders {tm}
	      problem (WB were resolved in the previous implementation,
	      but my new approach allows to resolve WBs even for dynamic
	      lightmaps! Not done yet though...). My measurements also
	      shows it is a lot faster... maybe it is a result of some bugs
	      that are still left. dmburg level -recalc's with the old
	      algorithm on my machine for 118 seconds, with the new
	      algorithm it takes just 49 seconds. This could be due to bugs
	      that are still existing though (very likely).
	    - Fixed typo: frustrum replaced with frustum. There were
	      thousands of such errors. The only thing left is to rename
	      frustrum.cpp and frustrum.h.
	    - "fclear on" in walktest now will clear zbuffer on every frame.
	    - Separated the "antialiased polygon" code from polytext.cpp
	      into a separate file in libs/csgeom. Now it is useable from
	      any application/library.
	- Eric Sunshine changed the CVS snapshot script (bin/snapshot.py) so
	  that it now uses /tmp as its working directory rather than polluting
	  the snapshot directory with temporary files.
	- Eric Sunshine made the following additional changes to csIniFile:
	    - Completed the list of Save() methods so that they now complement
	      the Load() methods.  In particular, Save(iVFS,path) was
	      conspicuously absent.
	    - Added Load(csString) for convenience.
	    - Renamed TextualRepresentation() to Save(), thus making it just
	      another one of the Save() methods (which returns a textual
	      representation of the INI as a csString, in this case).
	      This complements Load(csString).
	    - There is now a distinction between Save() methods which check
	      and affect the 'dirty' flag, and those which do not.  Previously,
	      Save() methods would only actually save the INI if it was dirty.
	      This made it impossible to save the INI to a new file if you
	      hadn't made any changes to it.  In other words, the following
	      sequence would fail to emit a new INI file ("b.cfg"):
	          cfg.Load("a.cfg"); cfg.Save("b.cfg");
	    - Added IsDirty() and ClearDirty() for finer control by client.
	- Andrew Zabolotny fixed the first of the many lighting bugs that
	  are left after his changes.
	- Andrew Zabolotny fixed the second of the many lighting bugs that
	  are left after his changes.
	- Andrew Zabolotny fixed the third of the many lighting bugs that
	  are left after his changes. It is a theoretical bug though,
	  nobody has seen it in action yet :-)
	- Fixed a memory leak in csClipper. The destructor was not virtual.
	- Some further fixes on PVS.
	- Frank O'Connor did some various bug fixes.
	- Wouter Wijngaards did various changes to radiosity:
	    - Fixed ambient, use standard ambient values again.
	    - Slightly faster.
	    - Can do specular gloss.
	    - Options configurable in config.
2-May-2000
	- Added csPoly3D::ProjectAxisPlane() which is similar to
	  ProjectXPlane() but for a general axis aligned plane.
	- Added assignment operator for csPoly2D.
	- Some further work on PVS.
	- Frank O'Connor defaulted DO_DINPUT_KEYBOARD in Win32 built.
	- Frank also fixed hardware cursor problem for DDraw.
	- Frank also did several VC project file changes.
	- Paul Garceau modified ddraw makefile to accomodate generic ddraw
	  make.  Added ifdefs to accomodate Borland, COMP_GCC, and COMP_VC.
	- Gary Haussmann corrected bad transform in DrawTriangleMesh.
	- Gary added detection of other extensions
	  (GL_EXT_compiled_vertex_array and GLX_ARB_get_proc_address).
	- Gary disabled code to detect opengl extensions, as this will break
	  compiles on some platforms.
	- Martin Geisse fixed a bug in dungeon plugin.
	- Eric Sunshine fixed several compilation warnings and problems
	  throughout the project.
1-May-2000
	- Norman Kramer added CSSTA_CHARWRAP and CSSTA_WORDWRAP to show
	  text in a static text control that is longer than the control
	  (csws).
	- Added csBox2 and csBox3 Min() and Max() functions that accept
	  a component index (x=0, y=1, z=2).
	- Added csIntersect3::PlaneXPlane(), PlaneYPlane(), PlaneZPlane()
	  and PlaneAxisPlane() to intersect a general plane with an
	  axis aligned plane. The result is a 2D plane.
	- Added csIntersect2::Planes() (but unimplemented right now)
	  to calculate the intersection between to 2D planes (i.e. lines).
	- Further work on PVS. Made the realization that it is better
	  to work with a single 2D culler plane instead of a cube.
	  This simplifies the code a bit.
	- Eric Sunshine fixed several build problems with the Dungeon plug-in
	  which showed up with the introduction of Bison and Lex.
	- Eric Sunshine eliminated several compilation warnings and problems
	  throughout the project.
	- Eric Sunshine repaired the project enough that it builds on NextStep
	  once again.  Most of the programs even run, though some suffer from
	  link problems when loading plug-in modules.
	- Eric Sunshine made NeXTFrameBuffer15 more robust and tolerant of
	  bugs elsewhere in Crystal Space.  The 15-to-16 bit lookup table
	  which is used to convert CS format 15-bit RGB to NeXT format 16-bit
	  RGBA is now allocated twice as large as necessary since CS does not
	  always respect the request for 15-bit colors.  By allocating the
	  table twice as large as necessary for 15 bits, errant 16-bit values
	  will no longer access memory beyond the end of table (potentially
	  causing a segmentation fault).  This problem has arisen when CS's
	  software renderer incorrectly paints polygons from garbage memory
	  rather than using properly prepared 15-bit textures.  (This is a bug
	  in the software renderer.)  It is also possible for poorly written
	  programs to use hard-coded 16-bit color values in a 15-bit
	  environment.  Thus the NeXT 2D driver now tolerate such buggy
	  behavior.
	- Eric Sunshine added automatic detection of socklen_t to unixconf.sh.
	  If absent, defines DO_FAKE_SOCKLEN_T in config.mak and volatile.h,
	  and fakes up socklen_t with int.  Hopefully this will resolve (at
	  least one) problem with compiling network socket driver on Solaris.
	- Eric Sunshine renamed NEED_FAKE_BOOL/NO_BOOL_TYPE to DO_FAKE_BOOL in
	  booltest.sh, volatile.mak, and types.h for consistency's sake.
	- Eric Sunshine made the following changes to the engine's command-
	  line options:
	    - Renamed the -recalc and -inhrecalc options to -relight and
	      -norelight, respectively.  This was done in preparation of
	      caching of other types of information per level (such as
	      visibility data), at which time it will be important to be able
	      to selectively distinguish between which portions of cached
	      information should be recalculated.
	    - Added -revis and -norevis options which force and inhibit
	      recalculation of cached visibility data, respectively.  (Note:
	      This information is not yet cached.)
	    - Added (new) -recalc and -norecalc options which perform the
	      composite operations of forcing and inhibiting, respectively,
	      recalculation of all cached information (such as visibility and
	      lighting data).
	- Robert Bate added class keyword to a friend declaration so that
	  CWPro5 is happy.
	- Norman Kramer did a small fix in pixmap clipcode for glide.
	- Eric Sunshine made the following changes to csString:
	    - Added variations of Append() and operator+= for all of the basic
	      types (including signed and unsigned).
	    - Added handy left shift operators for all of the basic types.
	      These operators provide a way to compose string in a simple,
	      convenient, and completely type-safe fashion.  For example:
	          str << "Hi " << name << ".  Your age is: " << age << '\n';
	    - Fixed a bug in SetSize() where the resultant string size was one
	      byte larger than requested.  Thus, when Clear() called
	      SetSize(0), the string actually ended up with a length of one.
	    - Renamed SetSize() to SetCapacity() for clarity.
	    - Added Truncate() which shortens a string without freeing the
	      storage.  (You can still call Reclaim() to free storage.)
	    - Clear() now calls Truncate(0) for fast-and-dirty operation.
	      For the old behaviour where storage was freed, call Reclaim()
	      after Clear().
	- Eric Sunshine cleaned up the implementation of scfString and iString.
	- Eric Sunshine performed another partial overhaul of csIniFile.  The
	  following changes were made:
	    - Completely generalized and unified composition and decomposition
	      of INI files regardless of input or output medium (physical
	      filesystem, VFS, iFile, etc.).
	    - Entirely eliminated all the special-case code (without any loss
	      of functionality) which was added to csIniFile so that it could
	      deal with abstract iFile.  The removal of this code _grealy_
	      simplified the implementation.
	    - Now uses iVFS rather than csVFS, thus no longer tied to any
	      particular implementation.
	- Eric Sunshine fixed a compilation error in math2d.cpp and a
	  compilation warning in octree.cpp and csstatic.cpp.

Please see "history.old" for less recent historical entries.
