The history order has been reversed so that new features are at the top.

30-Oct-2000
	- Andrew Zabolotny did the following changes:
	    - Fixed a bug in default window theme that caused
	      background texture to not be drawn if the window is not
	      semi-transparent.
	    - Fixed (I hope this is the last fix) clipping so that in
	      very complex window configurations CheckDirtyTD and
	      CheckDirtyBU are called as much times as required (until
	      nothing changes).
	    - Added gradient backgrounds! In general background for all
	      skins is now one csBackground object which accepts one of
	      the following modes: textured, gradient, flat-color, none
	      (default flat color from CSWS). Gradients can be horizontal
	      (two rgb values), vertical (two rgb values) and four-corner
	      (four rgb values).
	    - Fixed DrawPolygonFX in software renderer which works
	      incorrectly for more than three-vertex polygons (it did not
	      take into account neither z,u,v,r,g,b values for the fourth,
	      fifth, ... vertices of the polygon). It is a bit more costly
	      now (one division per scanline) but that's the price we have
	      to pay for correct drawing...
	    - Modified cswstest to be able to change skins at runtime. You
	      can either set the [CSWS] Skin.Variant = ... option in main
	      config file, or use the "-skin=..." command line option.
	      The skin variants themself are defined in csws.zip file; for
	      example use -skin=Colorful for a demonstration of gradient
	      background textures; -skin=Marble for a
	      marble-texture-background skin variant.
	    - Fixed back the awful behaviour introduced by someone: when a
	      drop-down submenu is visible, and the parent menu hides,
	      the submenu stays visible.
	    - Re-formatted and commented (doc++ style) the csGrid class.
	    - Re-implemented font server interface from scratch. Added the
	      iFont interface. Any font is an iFont object now. You pass
	      the iFont object to iGraphics2D for drawing characters. The
	      font server is not anymore a class private to the canvas
	      driver; it is a public plugin like most others. You can
	      avoid using a font server at all, if you aren't going to type
	      text through iGraphics2D::Write().
    	      This implies some need for rewriting code outside CVS that
	      deals with fonts. The basic rules are:
    		(*) Instead of using csFontCourier, csFontTiny etc you
		    should `load' the font first. You can do it this way:
        		iFontServer *fs = G2D->GetFontServer ();
        		iFont *courier = fs->LoadFont (CSFONT_COURIER);
        		iFont *police = fs->LoadFont (CSFONT_LARGE);
        		iFont *italic = fs->LoadFont (CSFONT_ITALIC);
        		iFont *tiny = fs->LoadFont (CSFONT_SMALL);
    	      	    Note the new names for the fonts (you can find them in
	      	    ifontsrv.h).
    		(*) Then you use the iFont object to query text width,
		    height etc:
        		int fw, fh;
        		font->GetDimensions ("Hello world", fw, fh);
        		font->GetMaxSize (fw, fh);
        		...
    		(*) The only method in G2D that accepts an iFont object is
		    Write():
        		G2D->Write (font, x, y, fg, bg, "Hello world!");
		    All other font-related methods (e.g. SetFontID,
		    GetFontID, GetTextWidth and so on) are gone (mostly
		    moved to iFont).
	    - Changes in CSWS due to above font server change:
		(*) TextWidth() and TextHeight() are gone. Instead there is
		    a new method called int GetTextSize(char *, int *) which
		    returns the width of given text and possibly height (if
		    second argument is not NULL).
    		(*) Added a new csComponent method - int GetTextChars(char *,
		    int) which will return how much characters if written
		    with current font will fit in given width.
	    - Added "floating hints" capability to CSWS. These hints can be
	      attached to absolutely any csComponent's; if the mouse stays
	      unmoved over such an component for more than three seconds
	      (adjustable) a new csHint object is created. As soon as you
	      touch mouse or keyboard (or joystick :-) the hint will vanish.
	      These hints helped to find a lot of errors in clipping
	      algorithm related to clipping of foreign "clip childs"; this
	      was not tested very good because of limited use of "clip
	      childs". csHint objects are direct childs of the objects the
	      hint is attached to, but they are "clip childs" of the csApp
	      to avoid being clipped by parent object. Not complete yet
	      (the size for hints is arbitrary right now :-)
	    - Added some debug capabilities to SCF. You can add
	      #define SCF_DEBUG at the top of certain SCF module and you will
	      see (via printf()) all the IncRef's, DecRef's, class
	      initializations and so on. On GCC > 2.8.0 it also types the
	      address the methods were called from, use GDB's "l *address"
	      command to find out what file/line/function corresponds to
	      given address.
	    - Added to VFS the ability to translate VFS paths into real
	      filesystem paths. This works only for non-archive files. This
	      is means as a last-resort for libraries that can't handle
	      VFS directly (e.g. freetype can load fonts only from
	      real-world files). If the VFS path refers to multiple paths,
	      all of them will be searched for the existence of given path
	      or filename. If the file is non-existent, the first one will
	      be returned.
	    - Ooops. Fixed a "bug", or rather an unimplemented yet feature.
	      For some reason I was under impression that VFS understands
	      expressions like: $(VAR:text), e.g. "get the value of VAR, if
	      it is not defined, use the "text". It did not, now it does.
	      It even should understand very complex things like:
	      $(VAR1:VAR2:VAR3:sometext$(VAR4:plaintext)othertext)
	    - Removed the last traces of the old memory debugger from
	      makefiles and support/debug/memory,(h|cpp)
	    - Added correct window resize support to GLX canvas.
	      Re-implemented font support in GLX driver; now it will work
	      even if you load fonts at runtime (old "glfontserver" code
	      was able to display only fonts that are available at program
	      startup, e.g. built-in fonts from font server). Now there is
	      a "font cache" object which loads and frees fonts on demand.
	    - Added runtime full-screen switching via Alt+Enter for the
	      following X11 drivers: x2d, linex2d, glx.
	    - Fixed "double-backbuffer" support in OpenGL canvases. All
	      OpenGL canvases do NOT support double backbuffer mode. Note
	      that "double backbuffer" is NOT the same as "double buffer",
	      these are completely different things. All CS canvases should
	      support double-buffering for smooth animation, while they may
	      or may not support double-backbuffer mode, mainly for
	      performance reasons.
28-Oct-2000
	- Changed iCollideSystem::Collide to accept 'const' transform
	  pointers.
27-Oct-2000
	- Added GetSector(idx) to the swig interface file (cs.i) so that
	  Python scripts can use it.
	- Eric Sunshine made the following changes to efed.pl:
	    - Fixed bug: Was ignoring files mentioned on the command-line and
	      only processing directories.
	    - Addressed shortcoming: Was not applying --rename patterns to
	      directory names.
	    - Added filename suffix convenience to --rename.  Now
	      automatically translates 'old=new' or 'old:new' to the
	      expression 's/\.old$/\.new/' to change the filename's suffix
	      from '.old' to '.new'.
	    - Added --quiet option.
	    - Worked around differences between Perl versions in
	      File::Basename::fileparse().  Some versions return the directory
	      portion of a path as '.', whereas others return './' for a path
	      containing only a filename.
26-Oct-2000
	- Norman Kramer made these changes to the CSWS layout managers:
	    - Added suggestsize to inputline and listbox.
	    - Fixed disappearing elements in gridbaglayout.
	    - Now uses the original size of the component and not the one
	      after last resize.
25-Oct-2000
	- Brandon Ehle disabled console printing for the python script plugin.
24-Oct-2000
	- Philip Wyett eliminated a compiler warning in
	  csFlowLayout::SuggestSize().
	- Andrew Zabolotny did the following change:
	    Made the csArchive::Write() method a lot faster in the case when
	    you did not specify the max file size when you opened the
	    file for writing, by the following means:
		- The buffer size is increased in 1K blocks rather than
		  adding just the size of appended block. This means the
		  memory will be allocated just once per many calls (in the
		  case you're writing in small chunks) rather than doing
		  one memory allocation per call (which is VERY slow).
		- Using realloc() instead of new[] and memcpy() which also
		  should increase the speed a lot on platforms with properly
		  implemented realloc().
	    Now writing files into archives in small chunks (e.g. PVS) should
	    work a lot faster (same speed as csMemFile).
23-Oct-2000
	- Norman Kramer added various layout managers for CSWS.
	- Norman Kramer added an example for the layoutmanager to cswstest.
20-Oct-2000
	- Andrew Zabolotny reverted his previous change to vfs.mak. Instead
	  he has fixed win32gcc.mak. DO.SHARED.PLUGIN should contain
	  a reference to $(LIBS). This was not the case for win32gcc.
	- Andrew Zabolotny fixed the dependency file name from "waveout.dep"
	  to "wos.dep".
	- Set minimum canvas size for X to 32x32 instead of 320x200.
	- Eric Sunshine made the following changes to the installation target:
	    - csengine.mak is no longer responsible for vfs.cfg and scf.cfg.
	    - Installation of vfs.cfg is now controlled by vfs.mak.
	    - Installation of scf.cfg is now controlled by csutil.mak (since
	      SCF is currently part of csutil).
18-Oct-2000
	- Thomas Hieber did some fixes to cctest for MSVC.
	- Andrew Zabolotny did the following changes:
	    - Fixed a small bug in csRect::Exclude() that was there for a
	      very long time. Effectively it caused CSWS to do some extra
	      work when resizing windows by dragging their bottom margin.
	    - Fixed a bug in iG2D::DrawPixmap() when drawing
	      alpha-transparent non-tiled textures.
	    - Found and eliminated a clash between ex-cscmdRedraw and
	      cscmdAreYouDefault. Ooops. I believe this caused a lot of
	      unneeded redraws before.
	    - Changed substantially the clipping subsystem in CSWS. Now it
	      could be even faster, besides it allows now semi-transparent
	      windows to be repainted correctly. Previously it did not care
	      how many times the window redraws; not it allows every dirty
	      window to repaint exactly once, thus excluding visual artifacts
	      that existed before with semitransparent components.
	      The current clipping algorithm is much more sophisticated
	      and tries hardly to minimize the number of dirty regions;
	      it tests for much more complex cases (e.g. a opaque button
	      in a transparent window inserted into another component
	      covering, say, a button inserted into desktop will completely
	      avoid redrawing the desktop button).
	    - Fixed all the X11 drivers so that the "csmcNone" mouse cursor
	      is really empty. Previously it was an uninitialized 1x1
	      pixmap, which sometimes was visible like a black pixel.
	    - Had a flash about making clipped drawing in CSWS a lot
	      faster. Now before every Draw() method being called, the
	      Redraw() method caches a "visible region" which is
	      effectively just a set of rectangles. Then every draw
	      operations just clips against this set of rectangles (if
	      we're lucky, we'll have just one rectangle in the visible
	      region (e.g. for top windows), thus doing just one
	      clip-against-rectangle operation) rather than clipping every
	      graphic primitive against all childs, neightbours, parent's
	      neighbours and so on in the window hierarchy. MazeD should
	      gain a lot from this since for complex models it performs a
	      lot of line and pixel drawing.
	      As a side effect any drawing outside the ::Draw() method will
	      not work (it will be "clipped away" because the visible
	      region cache will be empty at that time). This is not a
	      problem, and if turns to be so it could be solved (but I
	      would prefer not to).
17-Oct-2000
	- Andrew Zabolotny fixed a rather inserious bug which caused
	  out-of-bounds values to be accessed from the "shadows" array.
	  However, the retrieved value was not used (when it's out of
	  bounds). This was caught by recent addition of CS_ASSERT into
	  csVector::Get().
16-Oct-2000
	- Martin Geisse fixed some compiler warnings.
	- Martin updated the MSVC project files.
	- Changed the meaning of csBox3::GetEdge so that it more conforms to
	  the new indices defined in GetEdgeInfo().  Added a second variant of
	  GetEdge which fills in a given csSegment3 structure.
	- Also did similar things to csBox2 (i.e. add GetEdgeInfo(), GetEdge(),
	  ...).
	- Fixed 3ds2lev texture mapping. I think it now works correctly.
	- Eric Sunshine fixed a Texinfo error in beos.txi which was reported
	  by 'makeinfo'.
	- Eric Sunshine fixed some out-of-date information and discussion in
	  simple.txi.
	- Eric Sunshine fixed a number of mark-up problems and other errors in
	  csws.txi.  Also eliminated 'overfull hbox' errors reported by TeX.
	- Eric Sunshine fixed an out-of-date URL in the map2cs tutorial.
	- Eric Sunshine fixed out-of-date URLs for Win32 resources in
	  extlibs.txi.
15-Oct-2000
	- Added csBox3::GetEdgeInfo() and GetFaceEdges() which can be
	  used to extract winged-edge information from a csBox3.
	- Michael Dale Long did a big CrystalClear update. Most of it is
	  related to moving CC away from impulses and towards using csEvent.
	  csEventCords is in this update as well. cctest input changes
	  are in this commit as well.
	- Norman Kramer solved the walktest problem with the 12 remaining
	  instances of colldet at exit.  When a thing deletes its attached
	  objects it calls their destructors, wentity destructor itself
	  removed  _this_ object from parent and shifted others down.
	- Norman added a curve_templates member to the world. Parser
	  now saves the loaded templates there (until now it forgot about
	  it and never freed memory for them).
	- Norman closed three memory leaks in sector.cpp and particle systems.
	- Norman added a proper DecRef to iSoundData in csparser.
14-Oct-2000
	- Norman Kramer added initialization of BackTex member in csws, now
	  cswstest works again (window background look good).
	- Further work on leaf BSP builder in LevTool. Finished BSP
	  builder and started work on portalizer.
13-Oct-2000
	- Martin Geisse improved the sound loading function of csparser.
	- Martin also updated the MSVC project files.
	- Eric Sunshine made the following maintenance changes to the BeOS
	  port:
	    - Repaired so that it once again compiles and works following the
	      many core-level changes to the project over the last three months
	      when this port was idle.  Now works with BeOS 5.
	    - Worked around a compiler optimization bug caused by
	      'schedule-insns2' which resulted in QInt() returning completely
	      bogus values when called from csGraphics2D::DrawLine().  This bug
	      crashed any program which drew lines, such as g2dtest, but was
	      particularly damaging to CSWS.
	    - Eliminated iBeLibSystemDriver (icsbe.h) interface.  BeOS system
	      driver now implements iSystem::SystemExtension() instead.  All
	      communication from plug-in modules is now done via
	      SystemExtension() rather than iBeLibSystemDriver.
	    - Works with new iEventPlug/iEventOutlet mechanism.  Implements
	      iSystem::GetPotentiallyConflictingEvents() and
	      QueryEventPriority().  The system driver now instantiates an
	      iEventOutlet specifically for keyboard and mouse events generated
	      by the canvasses.  These events are handed to the system driver
	      from canvasses via SystemExtension().
	    - Rewrote keyboard handling to work with Andrew's new
	      "International Keyboard Encoding" support.
	    - Added the new findlib.cpp and the newly mutated getopt.cpp from
	      libs/general/cssys to SRC.SYS_CSSYS in beos.mak.
	- Eric Sunshine performed another semi-major overhaul of the BeOS port:
	    - Re-organized the threading model.  Previously, Crystal Space
	      would run in the main thread until the first time iSystem::Loop()
	      was called.  At that point, the BeOS application loop began
	      running in the main thread, and Crystal Space was shuffled over
	      to a sub-thread.  This was a somewhat complex model.  Under the
	      new implementation, Crystal Space always inhabits the main thread
	      and the BeOS application loop runs in the sub-thread.
	    - Furthermore, the BeOS application thread is now spawned and
	      BApplication::Run() invoked much earlier.  Previously this task
	      occurred when iSystem::Loop() was first called.  Now the
	      application thread is spawned and run as soon as the first window
	      is created.  This allows the application and window to begin
	      responding to events, such as window-exposed events, even before
	      Crystal Space has entered its own run-loop.  Canvasses now
	      request a "BeginUI" extension via iSystem::SystemExtension() to
	      trigger the invocation of the BeOS application's run-loop.
	    - Access to the Crystal Space event queue is now entirely
	      thread-safe.  Previously, the event queue was accessed from both
	      the Crystal Space thread and the BeOS application thread.  All
	      messages which are generated by the BeOS application thread are
	      now placed into a thread-safe message queue which is processed by
	      the Crystal Space thread in SysSystemDriver::NextFrame().  This
	      applies to mouse and keyboard events as well as other
	      pseudo-events such as those generated by the closing of a window
	      or an application termination request.
	    - Eliminated the custom BApplication subclass (CrystApp).  All
	      functionality which was previously handled by CrystApp is now
	      handled directly by SysSystemDriver.  The system driver now also
	      inherits from BHandler and registers itself as the BApplication's
	      preferred message handler.  This allows the system driver to
	      receive and act upon the standard BeOS messages without having to
	      employ a custom BApplication subclass.
	    - SysSystemDriver now only instantiates a BApplication if one has
	      not already been instantiated.  Along with the obsolescence of
	      CrystApp, this allows BeOS-specific Crystal Space clients to
	      easily employ custom BApplication subclasses rather than being
	      locked into CrystApp, which was entirely private.
	    - Fixed the BeOS 2D canvas and Glide canvas so that they implement
	      BView::Draw().  This gives them the ability to redraw any portion
	      of the window when requested by BApplication, such as on a
	      'expose' event when a portion of the window which was occluded
	      becomes exposed.  The OpenGL canvas always had this capability.
	    - Canvasses now respect the 'area' argument passed to
	      iGraphics2D::Print().
	    - BeOS-specific csosdefs.h now manually works around problem with
	      redefinition of MAX() and MIN() in <sys/param.h> rather than
	      relying on source code to include headers in proper order.  This
	      was needed on account of csbe.h now including BeOS headers since
	      the BeOS system driver inherits from BHandler and directly embeds
	      a BMessageQueue.
	    - Removed the BeOS-specific "anatomy" discussion from the Crystal
	      Space Manual (anatomy/platform/beos.txi).  This document was
	      originally written by David Huen to explain some of the
	      operations of the BeOS system driver and the BApplication
	      subclass CrystApp.  However, following the current overhaul, the
	      document was no longer accurate in any way.  In fact, its
	      accuracy had slowly eroded over time, anyhow.  Moved the Bugs and
	      To-Do lists from this document into the BeOS installation
	      document (build/platform/beos.txi).
	- Eric Sunshine made the following changes to the BeOS Glide driver:
	    - Finally brought the BeOS Glide 2D driver (canvas) up to speed (as
	      much as possible).  This driver has languished in a completely
	      broken state for a very long time, and has certainly been broken
	      since my original major overhaul of the BeOS port some time ago.
	      The driver is untested since I do not have the proper hardware,
	      but it does compile.
	    - Fixed several problems with the BeOS Glide canvas makefile.  Also
	      fixed the 'depend' target.  Fixed the BeOS system makefile to
	      automatically configure Glide if present on the development
	      system.
	    - Unified the SCF name of BeOS Glide canvas to match the format of
	      names of other Glide canvasses.  Added 'glidebe2d' to scf.cfg.
	    - Updated documentation to reflect that the Glide driver now
	      compiles but is untested.  Previously, documentation only stated
	      that it was entirely broken.
	- Eric Sunshine made the following changes to the shared Glide
	  implementation:
	    - Eliminated compilation warnings in glide/glcache.cpp and
	      glide/glhalo.cpp about variables used uninitialized.
	    - Fixed Glide renderer makefiles so that it is possible to specify
	      an alternate Glide library.  This feature is used by the BeOS
	      port.
	    - Fixed Glide renderer makefiles so that they take the makefile
	      variable $(OUTDLL) into account when computing the DLL name.
	    - Fixed out of date Glide entries in scf.cfg.  Added missing Glide3
	      2D entry.
	    - Removed BeOS-specific garbage from the common Glide canvas
	      implementation.
	- Eric Sunshine fixed the 'clean --> cleandoc' chain rule in docs.mak
	  which broke on September 29, 2000.
12-Oct-2000
	- Thomas Hieber fnished implementing the attribute System, including
	  all container classes specified in icsgame (untested).
	- Improved the leafy BSP tree builder in LevTool.
	- Disabled a new CS_ASSERT that was put in csVector::Get(). The
	  problem was that some code in CS assumes that Get() also extends
	  the array. It is a bit too complicated to fix this now (I'm busy
	  fixing another problem and don't want to get sidetracked).
	- Renamed csWorld::PrepareParticleSystems() to PrepareSprites() and
	  also changed the routine so that it updates all sprites and not
	  only particle systems.
	- Fixed a bug as reported by Samuel Humphreys. Sprites that are
	  in nodes containing no geometry (i.e. no polygons) are not correctly
	  marked visible. The reason is that there is no bsp tree for those
	  nodes and the bsp tree is needed to hold the visibility stubs for
	  sprites. I solved this by creating a dummy bsp tree (empty) at
	  those nodes. Note that this will require a -recalc of levels
	  using STATBSP. This also holds for particle systems.
	- Samuel also reported an additional bug. Sprites that are outside
	  the entire octree are never reported as visible. The reason is
	  similar, there is no bsp tree there to hold the visibility stubs.
	  The solution in this case is not so simple so for now I suggest
	  a workaround: just add dummy small polygons to the bounds of the
	  world where you want sprites to be visible. This will make the
	  octree larger.
	- Andrew Zabolotny did the following changes:
	    - Renamed csPixmap::DrawTiledShifted into DrawTiled. There is
	      no need to use long clumsy names like
	      DrawARoundBoxWithALittleRedDotInLeftUpperCorner ().
	    - I have extended iGraphics3D::DrawPixmap() method with one
	      argument - uint8 alpha, and also enhanced the function a lot
	      in software renderer.  Now if the tx,ty,tw,th rectangle
	      exceeds texture size, texture is tiled across the screen
	      rectangle. The alpha is from 0 to 255 and defines the
	      transparency of the pixmap, 0 being opaque and 255 full
	      transparency.
	    - Semi-transparent windows in CSWS! (cswstest -> Theme button).
	      This is a bit buggy though because sometimes the window gets
	      repainted twice, with alpha-blended textures this results in
	      visual artifacts :-( Will take a look at this later.
	      Both windows and dialogs are allowed to be transparent now.
	      Also simple non-transparent textured backgrounds (which are
	      faster of course) are allowed for both windows and dialogs.
	      Note that if you insert a dialog into a window, and set both
	      to semi-transparent, their textures will overlap, and thus
	      you will see the desktop (and the windows behind) through
	      *two* transparent textures. In general it is recommended that
	      if you insert a semi-transparent dialog into a window, you
	      set that window's alpha to 255 (e.g. fully transparent).
	    - Removed the NULL_SOFTWARE_2D_DRIVER macros from null3d renderer.
	      The NULL3D renderer is not a NULL renderer, it is a *NULL 3D*
	      renderer, that is, it does not have any 3D primitives
	      implemented (e.g. polygons) - everything other is like in
	      the "normal" renderer, thus it uses same default canvas like
	      the normal renderer. NULL3D renderer is mainly an alternative
	      renderer for those CSWS applications that do not need any
	      3D drawing. Now it supports semi-transparent and tiled textures
	      as well.
	    - Fixed other renderers in order to be able to compile. I
	      believe tiling will work with at least the OpenGL driver
	      without any change; alpha is not implemented yet but its
	      easy to implement.
	- Eric Sunshine reverted Jorrit's change to csVector::Get().  I (Eric)
	  had already removed the offending CS_ASSERT() call in the previous
	  revision of csvector.h.  Jorrit actually removed the wrong one.  It
	  could not have been the source of the problem he was experiencing
	  since Get() is a 'const' method and does not alter the array at all.
	  If Jorrit's code was indeed using this 'const' method to access
	  beyond the end of the array, then that represents an actual bug in
	  the calling code, and needs to be fixed.  The Get() method has never
	  automatically extended the array for out-of-bounds indexes; only the
	  non-const version of operator[] does so.
	- Eric Sunshine updated the class comments in csvector.h.
11-Oct-2000
	- Thomas Hieber did the first preliminary integrated of the XML
	  parser for the gamecore library.
	- Norman Kramer fixed the glx2d canvas so that the xwindow is
	  now destroyed after gl context is destroyed (other way around
	  resulted in crash).
	- Some small changes from Michael Robellard <miker@vetechno.com>:
	    - New SetValue in csKeyValuePair.
	    - Added 'const' to csMovable::Transform.
	- Philip Wyett fixed a bug in csapp.cpp. He removed 'const'
	  from 'const char* filename'.
	- Philip also updated the VC project files to conform to recent
	  commits (ltbsp.cpp and ltbsp.h, and also the new motion
	  stuff from Brandon).
	- Brandon Ehle did the following changes:
	    There are some issues with frames where no interpolation
	    occurs, but Quaternion based skeletal animation is in and
	    amazingly fast even before attempting to optimize.  Matrix
	    mode animation is supported, but no interpolation code exists
	    yet.  Tons of changes to the csQuaternion class as it appears
	    that nobody has used it yet and one function added to
	    csMatrix3 to support Quaternion initialization.  Also
	    revamped the iMotion interfaces a bit, and added a hacky SCF
	    implementation for the csSkeleton classes until someone with
	    better knowledge can fix them so they are correct.
	- Cleaned up the formatting in the commits from Brandon.
	- Removed some unneeded dependency stuff from unixconf.sh.
	- Further work on leafy BSP generator in levtool.
	- Eric Sunshine fixed several compilation errors in MazeD following
	  Andrew's changes from yesterday.
10-Oct-2000
	- Norman Kramer did some fixes after Andrew's changes.
	- Andrew Zabolotny renamed fontserver to fontplex.
	- Andrew Zabolotny did the following changes:
	    - Fixed makedep so that it will work unde Unix (well, at
	      least under Linux :-) Added autodetection of system include
	      directories to unixconf.sh.  You will have to re-configure
	      in order "make depend" to work.  Added a new AWK script
	      bin/includes.awk which parses the output of "gcc -H" and
	      outputs a line like this:
     		MAKEDEP.INCLUDES=-I/usr/include;/usr/local/include
	      Maybe I'll enable later this script for mingw32 port as well,
	      since mingw32 needs these includes too; currently you have to
	      specify them as "C_INCLUDE_PATH" environment variable.
	    - Changed Unix makefile so that makedep is used now on Unix
	      for dependency generation. This is about five times faster
	      (a random evaluation though :-)
	    - Re-implemented former `themes' from scratch. It was a nice
	      try, but did not fit well with CSWS concept; besides they
	      involved too much overhead.
	      They are called now "skins". A "skin" is a collection of
	      "skin slices", every "slice" is responsible for a certain
	      class of components, e.g.  buttons, titlebars and so on. When
	      a component is created or when the skin is changed the
	      component queries the skin for the slice it wants and
	      remembers it; then it uses it for miscelaneous operations
	      such as drawing and so on.
	      There are three skinnable components right now: buttons,
	      windows and dialogs. There is just one (default) scheme
	      right now thus you won't notice any difference :-) The code
	      for exterior look of these components is completely separated
	      (and can be replaced by other code, e.g. Motif, Windoze,
	      OS/2 look (um... the default look is quite close to OS/2
	      already :-) etc).
	    - Changed CSWS configuration file format. Now it use csIniFile.
	      This is a preparation so that themes could be easier configured
	      through config file in future.
	    - Updated CSWS docs so that it can be used to gather basic
	      information about CSWS. All beginner CSWS users are highly
	      recommended that; I have tried to respond to the most
	      frequently asked questions on the mailing list there.
	    - Renamed csApp::InitialSetup() into csApp::Initialize(const
	      char *iConfigName) for uniformity (all other classes uses
	      Initialize()). I have fixed the applications in CVS, for
	      applications outside CVS this have to be done yet. The
	      iConfigName passed is the name of CSWS configuration file
	      (usually "/csws/csws.cfg"). This allows to create CSWS
	      applications without having a system configuration file
	      (previously CSWS config name was read from the [CSWS] section
	      of system config file).
	    - Added the notion of "color schemes". There is a function
	      called csSetColorScheme() which in fact applies a (tricky)
	      function onto the entire application palette (in HLS space).
	      There are just too many colors in all palettes to enumerate
	      them separately; I would prefer some automatic way to
	      process all colors in the palette; I'm not sure the method
	      that is currently implemented is flexible enough (I'm going
	      to finish the "Theme" window in cswstest in order to see
	      schemes in action dynamically).
	    - Fixed a small bug in CSWS that caused transparent windows
	      to leave visible traces on neightbour's child components.
	      The solution was simple and elegant - just a single line
	      change! :-) Now you can even drag a window *below* the
	      transparent window (e.g. try to drag the "CSS_TOPSELECT"
	      window under the "Theme test" window in cswstest!). This
	      looks cool, although it will look much better when I will
	      implement support for alpha backgrounds! :-)
	    - Removed the #ifdef MSC_VER from csapp.cpp. Grrrr.... such
	      things make me angry.
9-Oct-2000
	- Brandon Ehle fixed some compile errors in imotion.h and
	  also restructured the API a bit.
	- Brandon also added CS_ASSERT to some calls in csVector.
	- Further work on leafy BSP generator in levtool. Added a 'bsp'
	  button to test it. Select a sector from the list below and it
	  will take the static thing (if present, else the sector polygons)
	  to make a bsp. Not useful yet at the moment.
	- Eric Sunshine made the following changes:
	    - Added csHashCompute(char const*) to hashmap.{h|cpp} which
	      quickly and effectively computes a hash key from a string.
	    - Eliminated the bogus and broken GetReducedHash() which Brandon
	      added to csMD5.  Brandon was using this as a bizarre form of
	      very expensive string hashing.  To say that this was overkill is
	      an understatement.  It was like using a sledge-hammer to kill an
	      ant.  Furthermore, GetReducedHash() was buggy and failed to be
	      endian-correct.
	    - Modified Brandon's motion.cpp to use the inexpensive
	      csHashCompute() rather than the overkill and bogus
	      GetReducedHash().  Also reformatted motion.cpp to follow CS
	      formatting guidelines.  (Brandon, please use tab size 8!)
	    - Fixed a memory corruption bug in motion.cpp.  Was writing past
	      the end of an allocated buffer when copying a string.
	    - Removed garbage which brandon left in motion.mak.
	    - Added Motion plugin to user.mak and static.cpp since Brandon
	      forgot to do so.
	    - Removed one of the CS_ASSERT() calls which Brandon inserted into
	      csBasicVector since it fundamentally changed the behaviour of
	      the class, even though he neglected to modify the rest of CS to
	      take this fundamental behavioral change into account.  (Brandon,
	      if you make fundamental behavioral changes like this, then you
	      must also fix every place in the project which is affected by
	      such changes.  Do not expect other people to keep cleaning up
	      after you.)
8-Oct-2000
	- Brandon Ehle added the motion interface for sprites to the CVS tree.
	  The SCF interfaces & the loader are 90% done, but the plugin and
	  rendering loop still need to be implemented.
7-Oct-2000
	- Martin Geisse also updated the VC project files.
6-Oct-2000
	- Thomas Hieber added a macro for safe ADD_REF and DEC_REF
	  to scf.h.
	- Thomas also fixed a few warnings in CSWS and updated the VC
	  project files.
	- Thomas did some small changes to the gamecore plugin.
	- Wouter Wijngaards fixed a bug in the image loader:
	  Sometimes imgloaders were registered twice (double linking?),
	  and the list of loaders becomes a ring. And if loading fails it
	  gets into an infinite loop. I fixed the problem by having Register
	  check if the loader is already present.
	- Andrew Zabolotny added a check for empty scf.cfg file so that
	  it will not bomb out.
	- Wouter Wijngaards added scripts/python/*.py for installation.
	  Expensive operations are guarded.
	- Philip Wyett fixed a compile error in csfont plugin.
	- Eric Sunshine made the following changes to csVector:
	    - No longer tries to malloc() zero bytes, as that will crash on
	      some platforms.
	    - No longer tries to realloc() a null pointer, as that will crash
	      on some platforms (rather than performing malloc as documented).
	    - Now checks for null pointer before calling free().
	    - Now enforces valid values for 'ilimit' and 'ithreshold'.
	- Eric Sunshine made the following changes to the csFont plugin:
	    - Fixed bug: Was leaking a VFS reference.
	    - Fixed bug: The destructor was leaking every csFontDef record
	      added by LoadFont().  The contents of the records were being
	      freed, but the records themselves were not.
	    - Fixed a really significant number of memory leaks in
	      ReadFntFile() which would occur on error conditions.  It's
	      currently using a 'goto' (yuck!) to handle such conditions.  In
	      the future, this code should be reorganized to avoid having to
	      use 'goto' at all.
	    - ReadFntFile() now ensures that the font metrics are valid
	      before trying to read the font file contents.  In particular,
	      it asserts that the width, height, and bytes-per-char have
	      valid values.
	    - Performed a number of very obvious optimizations.
	    - Simplified and cleaned up a lot of the code; but ReadFntFile()
	      still needs a reorganization (as noted earlier with regard to
	      'goto').
	    - Downgraded severity level of diagnostic messages from FATAL to
	      WARNING.
	- Started work on leafy BSP builder in levtool. This will eventually
	  be used for PVS.
	- Fixed a bad bug in lighting. It was doing delete [] data
	  instead of data->DecRef ().
5-Oct-2000
	- Samuel Humphreys fixed particle systems in STATBSP worlds. Their
	  bsp bounding boxes would otherwise remain uninitialized and so
	  always invisible. The loaders call to Movable.UpdateMove() has
	  no effect as the sectors are not yet prepared.
	- Norman Kramer did some fixes to icsgame.h and gamecore plugin so
	  that it compiles on GNU/Linux. Norman also added a makefile.
	- Wyatt Miler fixed campos.h so that it compiles on Mac.
	- Wyatt also updated the Mac project files:
	    - Added VFS plugin to MakeShared
	    - Removed the Glide renderer from MakePlugins.
	- Extended iPolygon3D interface with one of the SetTextureSpace
	  functions so that I can get the python script pysimp.py working.
	- Added iMaterialWrapper interface so that there is now an SCF
	  interface for csMaterialWrapper.
	- Added iWorld::FindMaterial() to look for a loaded material.
	- Fixed iPolygon3D::GetVertex (and the W/C versions). They were
	  completely broken.
	- Updated cs.i input file for SWIG so that it is more up-to-date
	  with regards to the current state in CS. The interface is far
	  from complete. First we need more and better defined SCF interfaces
	  for the engine itself and second we need to extend cs.i to actually
	  use all those interfaces. At this moment cs.i is extended
	  just enough so that I could get pysimp.py working.
	- The pysimple test application now behaves almost exactly like
	  simple (without the sprite though) but the geometry of the
	  room is created in python instead of C++. Check out
	  scripts/python/pysimp.py to see how this works.
	- SWIG generates a file called cs_wrap.doc. I also added this file
	  to CVS since it is useful to read and not everybody has SWIG.
	- cspython plugin now also looks at the install path with
	  iSystem->GetInstallPath() to see where it should load the standard
	  CS Python support scripts (i.e. in scripts/python). So this means
	  that it is easier to use Python from external applications (games
	  outside of the CS directory structure).
4-Oct-2000
	- Norman Kramer updated config access in freefont plugin according
	  to Andrew's latest changes.
	- Philip Wyett did some small changes to the VC project files.
	- Added a change from Luca Pancallo to 3ds2lev so that floating
	  point values near zero are better printed.
	- Added '-l' option to 3ds2lev. If you use that option the
	  LIGHTING(no) will not be added.
	- Made cspython plugin a real plugin (i.e. let it inherit from
	  iPlugIn).
	- Fixed a bug in the cspython plugin which would initialize
	  System to NULL. I have no idea why that code was there.
	- Some experimentation with pysimple. Tried to update it so that
	  it works more like the normal simple but instead it creates
	  part of the geometry in python. However it does not work yet.
	- Eric Sunshine removed the unused, unfinished, and broken Macintosh
	  Glide canvas.  By all accounts, it appears that this driver has
	  never worked.  Most of the content of these source files is actually
	  old code left over from X-windows and Win32.
	- Andrew Zabolotny did a few remaining fixes so that all the
	  apps compile again.
	- Wouter Wijngaards added a LoadFont(name,file) method to G2D.
	  It returns the new fontid or -1 on failure. Use this to load
	  fonts.
	- Thomas Hieber continued work on the gamecore plugin.
3-Oct-2000
	- Fixed a bug in the 3dslev convertor where it would accidently
	  remove small polygons.
	- Fixed two bugs in the new UV coordinate setter. The new code
	  was actually just ignored.
	- Eric Sunshine replaced out-of-date crystalspace.console.stdout
	  references in several programs (nstp, perfest, ttffnt) with new
	  crystalspace.console.output.standard.
	- Andrew Zabolotny fixed vshell so that it compiles again after his
	  latest changes.
	- Andrew also fixes system so that it is allowed to have apps with
	  no config files. This fixes the crash bug in simple.
	- Fixed a crash bug in lighting if precalc_info was missing.
	  This bug was caused by Andrew's changes.
	- Eric Sunshine disabled shooter.mak since the csgame library is now
	  defunct.
	- Eric Sunshine eliminated a slew of compilation warnings in 3ds2lev.
	- Eric Sunshine fixed a problem following Andrew's config-file change
	  of yesterday where several plugins modules were applying 'delete'
	  to iConfigFile rather than DecRef().  Also fixed one plugin which
	  was leaking an iConfigFile reference.
	- Eric Sunshine added documentation for 'make all' to the "pseudo
	  targets" help section of the makefile.
	- Eric Sunshine eliminated a compilation warning in vsh.cpp
	- Eric Sunshine fixed compilation errors in these files following
	  Andrew's big changes: blocks.cpp, inputcmd.cpp, map.cpp,
	  metasys.cpp, perftest.cpp.
	- Thomas Hieber did further changes to icsgame.h and the gamecore
	  plugin.
	- Thomas Hieber removed Crystal Shooter project file.
	- Wouter Wijngaards fixed radiosity when there are no polygons
	  to light.
2-Oct-2000
	- Andrew Zabolotny did the following changes to CS:
	    - Overhauled the csIniFile class. There is now a new
	      iConfigFile interface which is implemented by csIniFile. It
	      is highly recommended all libraries and plugins to work
	      through this interface rather than using csIniFile
	      directly. Removed some exotic csIniFile methods such as
	      saving and loading the config file to/from a csString,
	      overhauled the iterators (they are exposed through
	      interfaces now as well).
	      This is a preparation to excluding csIniFile usage from
	      plugins. The iSystem interface will expose a method to
	      create iConfigFile objects, this will avoid duplicate code
	      in main executable and plugins. Also the ConfigGetXXX
	      methods will go away from iSystem, instead there will be
	      an GetConfig() method to retrieve the basic iConfigFile object.
	    - Implemented a new interface iDataBuffer which is meant as an
	      extremely lightweight data container (as opposed to
	      csString). The interface is meant for exchanging abstract
	      data between plugins. For example:
		... iVFS *vfs;
		iDataBuffer *data = vfs->ReadFile (filename);
		... data->GetData ();
		... data->GetSize ();
		data->DecRef ();
	      Another example:
		iDataBuffer *path = vfs->ExpandPath ("../test");
		printf ("Expanded path: %s\n", **path);
		path->DecRef ();
	    - Added minimal locale support to Unix systemdriver
	      (setlocale (LC_XXX, "")) because without that XFree4.0 won't
	      (always) display national characters. If your specific Unix
	      doesn't have <locale.h> see the instructions in unix.cpp...
	      basically if we find that there are such systems we rather
	      should add detection of setlocale to unixconf.sh.
	    - Added Xsetlocale() to all X11 canvas drivers. I don't know
	      whenever this is really required but it won't hurt in any
	      case, and for some languages this could help.
	    - I did all said above related to iConfigFile. Namely the
	      iSystem interface has been changed: removed all the
	      GetConfigXXX() methods; instead (the simplest but dirty way)
	      you can just use GetConfig()->GetXXX() instead of older
	      GetConfigXXX(); a better way is to first store the GetConfig()
	      aside, then use the variable multiple times to query all the
	      needed values. All the plugins and applications have been
	      updated to accomodate this new change; of course I maybe
	      forgot something so if you get compilation errors you have
	      to check first if the old GetConfigXXX method is used (and
	      proceed as above if so) and second check if the "icfgfile.h"
	      file is included at the top of source file.
	- Fixed compile bug in Blocks that I caused by a change yesterday.
	- Fixed similar compile bug in dtsimple.
	- Fixed engine plugin so that it is again enginep.so.
	- Added new conversion utility to convert 3DS files to CS world
	  files. This is only a very primitive first version. It converts
	  geometry in a 3DS file to one big sector. The polygons and
	  vertices are correct but there is no texture or lighting
	  information yet.
	- Added new csPolygon3D::SetTextureSpace() function which accepts
	  three vertices and three uv coordinates and extracts the
	  texture matrix from that information. This is sometimes easier
	  to handle as many formats actually give uv coordinates for every
	  vertex.
	- I also extended csloader with a new format for the texture mapping
	  specification. You can now say:
	  	POLYGON 'p' (
			VERTICES (1,4,2,5)
			TEXTURE (
				UV (0,.5,.5,1,0,1,2,.9,.9)
			)
		)
	  The format is as follows:
	  	UV (i1,u1,v1, i2,u2,v2, i3,u3,v3)
	  i1, i2, and i3 are the local indices of vertices in the polygon
	  (so i1==0 corresponds to vertex 1 from the set).
	  ux,vx are uv coordinates for that vertex.
	- Added support for UV coordinates in 3ds2lev convertor by using
	  the above new feature.
	- Eric Sunshine fixed some compilation warnings in wave.cpp.
	- Eric Sunshine fixed potential memory leak in memfile.cpp which was
	  introduced by Andrew's Big Change(tm) today.
	- Thomas Hieber did some fixes on various apps and libraries after
	  Andrew's changes.
	- Thomas added first real code for the gamecore plugin. Thomas
	  also added project files for this plugin.
	- Thomas did some fixes to the VC project files.
	- Robert Bate updated the Mac project files.
1-Oct-2000
	- Since Martin fixed a bug in the sound code Blocks sound is now
	  working so I enabled it by default.
	- Fixed bug with adding of SIXFACE templates.
	- Fixed bug with deletion of sky things.
	- Fixed bug with thing templates containing curved surfaces. This
	  bug could cause walktest to crash at exit (for flarge).
	- Wouter Wijngaards made ttf2fnt more robust. Fixed a big
	  memory leak in reading binary fnt files.
	- Philip Wyett fixed some compile errors in appLevTool.dsp related
	  to ltsave. Philip also fixed some problems with plgVFS.dsp.
	- Martin Geisse committed a fix to the MSVC project files from
	  Adam Bailey.
30-Sep-2000
	- Martin Geisse updated the MSVC project files.
	- Martin also fixed a bug in the sound system.
	- Eric Sunshine fixed nasty bug in csHashMap/csHashSet where it would
	  happily access negative array elements.
	- Eric Sunshine fixed bug in csHashMap::DeleteAll(csHashKey) where it
	  was deleting a non-existent element beyond the end of the bucket
	  array.
	- Eric Sunshine fixed a memory leak and compiler warnings in
	  ddgcntxt.cpp and ddgchull.cpp.
	- Eric Sunshine reintroduced code into support/gnu/bison.sim to clear
	  yyval before its first use.  Without this code, at least four of the
	  compilers I use complain that yyval is used uninitialized.  I had
	  added this code in the past, but Andrew misunderstood its
	  implementation and removed it.  (It was specifically engineered to
	  gracefully handle the case for which he thought it failed.)  The new
	  implementation is even simpler and more flexible.
	- Eric Sunshine fixed a problem in dtsimple.cpp.  It was passing NULL
	  to csThing::MergeTemplate where it should have been passing 'false'.
	- Eric Sunshine eliminated a compilation warning in levtool.cpp.
	- Eric Sunshine fixed problems in simple.cpp and scf.cfg which
	  prevented the 'simple' application from loading the console.
	- Wouter Wijngaards added -binary flag to ttf2fnt, that will create
	  a binary .fnt file. Not usable for #include, but csfont can
	  read it very quickly.
	- Wouter changed csfont server. It not only serves the preloaded
	  fonts now, but it also serves dynamically added fonts (use
	  ttf2fnt to make those .fnt files, read them from VFS).
	- Thomas Hieber added interfaces for animated 3D objects to
	  icsgame.h. Thomas also added definition of the collider selected
	  classes interface and added basic network interface declaration.
29-Sep-2000
	- Philip Wyett removed references to dynlight.cpp/.h and
	  thingtpl.cpp/.h from the VC project files.
	- Wouter Wijngaards changed the file format of ttf2fnt output so
	  that crucial information is added as comments starting with
	  //XX. This makes the file readable at runtime.
	- Eric Sunshine made the following changes to install.mak and the
	  installation-related makefile targets:
	    - Consolidated all of the installation-related makefile goop into
	      install.mak rather than having it spread around Makefile,
	      cs.mak, and install.mak.  This is a much cleaner approach.
	    - Now only performs the very expensive $(wildcard) operations when
	      'install' is invoked, rather than performing them for _all_
	      build targets project-wide.  This helps to reduce the lengthy
	      pause and excessive disk-thrashing which occur between the time
	      when the banner is displayed and the time when actual
	      compilation commences (for non-install targets).
	    - install.mak is now a 'standard' CS makefile in every sense.  It
	      now employs the standard MAKESECTIONS and ROOTCONFIG mechanisms.
	    - The INSTALL_DIR setting is now persistent (it gets written to
	      config.mak).  This means that it can be specified at makefile
	      configuration time (i.e. 'make INSTALL_DIR=/usr/local/crystal
	      linux'), and will be remembered and used automatically by the
	      'install' target.
	    - INSTALL_DIR now has a default value (/usr/local/crystal).  The
	      user can override this value at configuration or installation
	      time if desired.
	    - The configuration summary printed by the 'help' target now
	      indicates the value of INSTALL_DIR along with the other standard
	      settings such as USE_SHARED_PLUGINS, MODE, etc.
	- Eric Sunshine made the following changes to docs.mak:
	    - Now only performs the expensive $(wildcard) operations when
	      documentation targets are invoked, rather than performing them
	      for _all_ build targets project-wide.
	    - Removed some variables which became obsolete with the
	      introduction of efed.pl.
	- Eric Sunshine fixed formatting of the help message in
	  fontmanager.mak.
	- Martin Geisse cleaned up sound code a bit.
	- Thomas Hieber added interfaces for movement control to iccsgame.h.
	  He also cleaned up some interfaces to make everything more
	  consistent.
28-Sep-2000
	- Philip Wyett updated a few VC project files.
	- Thomas Hieber did a very small update to icsgame.h.
	- Added a single stepper for radiosity. This is mainly useful
	  for debugging. To use it you first need to enable radiosity
	  in cryst.cfg. Then at startup you use the -radstep option.
	  This will initialize the radiosity process but not start it yet.
	  Using the console command db_radstep you can single step radiosity
	  one iteration at a time (or more if you give an argument). This
	  command is assigned to 'shift-r'. Before doing this you can also
	  hilight the polygon that is going to be used next for radiosity.
	  This is with the db_radhi command (assigned to 'alt-r').
	  There is also the db_radtodo command which toggles between showing
	  the current static lightmaps and the delta maps. This is useful
	  for showing what radiosity is going to use next. Note that
	  this toggle will be safely restored if you continue radiosity
	  with 'db_radstep'. This command is assigned to 'ctrl-r'.
	  Some notes. If you start walktest using this setup all lightmaps
	  will initially be black. This is because the radiosity algorithm
	  starts by removing all lighting info from the lightmaps and
	  putting it in 'todo' lightmaps. If you continue the iterations
	  the lighting info will gradually reappear.
	  WARNING! This feature only works correctly with the software
	  renderer. The problem is that the radiosity algorithm assumed
	  the lightmaps are in original format but for OpenGL/D3D the
	  lightmaps are converted to power-of-two format later.
	- Added csWorld::InvalidateLightmaps() which can be used after
	  changing the static lightmaps so that the changes will take
	  effect. This is a slow function though! It is used by the
	  radiosity debugger.
27-Sep-2000
	- Fixed bug in csparser which would cause things defined with
	  the SIXFACE command to be added twice to the sector. This was
	  apparant in flarge.zip.
	- Cleaned up some old remnants of csThingTemplate in csparser.
	- Optimized csPolygon3D::MarkRelevantShadowFrustums by letting
	  it use csFrustum::BatchClassify instead of csFrustum::Classify.
	  This should improve the speed of radiosity and lighting somewhat.
	- Continued work on levtool. Now saving of things and templates
	  for things works better again.
	- Levtool saved world file is now also less verbose by using
	  %g instead of %f for floating point format output.
	- Wouter Wijngaards and Jorrit Tyberghein did a lot of debugging
	  and improvement of the radiosity code. At this moment it seems
	  to be working reasonably well now.
	- Wouter fixed sourcepatchsizes above 1 for radiosity.
	- Michael Dale Long integrated a patch to input in cctest from
	  admin@wwwconsulting.com to improve input under Windows.
	- Michael also added inverted mouse option to cctest.cfg.
	- Fixes to csphyzik from Michael Ewert.
	- Thomas Hieber did some cosmetic updates to icsgame.h.
	- Further cosmetic changes to icsgame.h. I also added Doxygen
	  comments to the methods.
26-Sep-2000
	- Jerry A. Segler Jr did the following changes to theme code:
	    - Added different size font test on the theme window.
	    - Added Set5 to the freetype.cfg (X Windows TTF fonts)
	      Did not change default from Set1 (windows TTF fonts).
	    - Added font manager plugin. This allows csfont and freetype
	      to be used simultaneously. Technically any number of font
	      servers but we only have 2 at the moment.
	    - Fix: cstheme was using the wrong pallet entries for borders.
	- Did a few small fixes to the makefiles and csgame so that the apps
	  link again after Andrew's changes.
	- Added thing saving to levtool.
	- Andrew Zabolotny did the following changes:
	  - Made VFS a separate plug-in. This involves some minor changes
	    in programs that use Crystal Space outside of CVS (all the
	    sources in CVS have been updated): you have to remove all lines:
		  REGISTER_STATIC_PLUGIN (vfs)
	    from main source file; also you have to replace
		  #include "csutil/vfs.h"
	    with
		  #include "ivfs.h"
	    if you didn't this before (in any case VFS is always used through
	    the SCF interface, so it is not likely there is any code left that
	    makes use of the csVFS class directly).
	  - Fixed a bug in perfstat plugin that sometimes leads to "0.00"
	    being steady displayed instead of FPS.
	  - Added the ability to determine file size without opening the
	    file on VFS.
	  - Changed walktest to maximal theoretical FPS of 100. Previously
	    walktest never would *move* faster than at 40FPS. That is, the
	    refresh rate can be even 500 FPS but you will never see anything
	    moving faster than 100FPS. This should make the motion more
	    smooth on powerful videocards.
	  - Added acceleration ("run") to walktest by pressing SHIFT key.
	    I have moved all "immediate move" commands (i_up, i_left and so
	    on) to ctrl+# key bindings; that is, what previously has been
	    achieved with shift+up you will get now by pressing
	    ctrl+shift+up and so on. These commands are for debugging
	    mostly anyway, and they conflict (they were conflicting before
	    as well) with normal motion.
25-Sep-2000
	- Optimized radiosity inner loop a bit. This could give a
	  significant speedup.
	- Andrew fixed the modifications from Jerry with regards to
	  CSWS themes to conform more to CS coding style.
24-Sep-2000
	- Eric Sunshine worked around namespace collisions in csUtil/Parser
	  and csLoader caused by Microsoft Windows' namespace pollution.  All
	  macros and identifiers defined by csUtil/Parser are now prefixed
	  with "CS_".  All functions are now prefixed with "cs".  Now
	  publishes csGetParserLine() and csResetParserLine() instead of
	  global "parser_line" variable.
	- Jerry A. Segler Jr did further changes to Theme code.
23-Sep-2000
	- Jerry A. Segler Jr continued work on theme code.
	- Fixed a bug in csPolygonSet::IntersectSegment introduced yesterday.
	  This bug could cause crashes in some cases.
	- Integrated new simple terrain engine from Roland Reckel
	  <luxx@yahoo.com>. Jorrit made csTerrain a virtual abstract base
	  class for all types of terrain engines. Made new csDDGTerrain
	  which is the old csTerrain that implements the terrain engine
	  from the DDG toolkit. Added csLODTerrain from Roland.
	  There is now a new keyword 'TYPE (lod)' that you can use in the
	  world file (in a TERRAIN statement) to use the new terrain type.
	  Note that you cannot just switch as such because the LOD
	  terrain engine expects a TGA file as input for the height field
	  while the DDG terrain engine expects a .ter file. Also note
	  that currently the LOD terrain engine only supports one
	  texture.
22-Sep-2000
	- Fixed csPolygonSet::IntersectSegment so that it actually
	  returns the first polygon. This also fixes csSector::HitBeam.
	- Fixed a bad bug in the creation of the octree. On average
	  half of the things that should be used for the octree were
	  just deleted and ignored.
	- Improved memory usage a lot by just removing the PVS for now.
	  It is unfinished anyway and needs to be rewritten in any case.
	  For one big level this improved memory usage from 80Megs to
	  30Megs.
	- WalkTest doesn't use g3d->GetZBufValue anymore to calculate
	  the selected polygon (right mouse click) but only uses engine
	  information.
	- The bsp trees are a little bit more memory efficient (not much).
21-Sep-2000
         - Eric Sunshine created a new tool, efed.pl (Eric's File Editor),
           which is a regular-expression-based, batch-oriented file editor.
           This tool resides in the CS/bin directory.  It can rename files and
           apply a series of edit operations.
         - Eric Sunshine modified the Public and Developer's API documentation
           generation makefile targets in docs.mak so that they now invoke
           'efed' in order to post-process the HTML files generated by Doxygen.
           Using 'efed' instead of 'sed' speeds up documentation generation
           significantly.  For example, post-processing of the developer's API
           took almost one minute on crystal.sourceforge.net using 'sed'.  With
           'efed', on the other hand, it takes just under three seconds!
20-Sep-2000
	- Jerry A. Segler Jr added initial CSWS Theme support.
19-Sep-2000
	- Andrew fixed a small bug in csws/cscomp.cpp.
	- Andrew updated csComponent comment to reflect the fact that
	  components can be partially transparent.
	- Andrew fixed a bug in csArchive which would trigger when
	  the archive contains directories that have no files.
18-Sep-2000
	- Jerry A. Segler Jr fixed linux compilation problem in cs_pyth.cpp
	  on new GCC's.
17-Sep-2000
	- Seth Galbraith did the following to docs:
	    - Removed section on seperate vertex, texel, and normal arrays
	      (which didn't work out very well :-)
	    - Added ideas for smoothing unwanted shading edges
	      (by interfering with vertex normal calculation).
	- Finished csThing::MergeTemplate(csThing*).
	- Removed the obsolete CLights class (uniform dynamic lighting,
	  it wasn't working anyway).
	- Made csPolygon3D::ComputeNormal() public.
	- Removed csThingTemplate completely. Instead of csThingTemplate
	  you can now make a copy of a normal csThing (using
	  csThing::MergeTemplate). It is still possible to push csThing
	  instances on the csWorld::thing_templates list. Things that
	  are on that list are only for template use.
	  Note that one other implication of this is that csPolygonTemplate
	  is also removed. 90% of the work of fixing your applications
	  is done by just replacing csThingTemplate with csThing. The other
	  10% boils down to replacing the old API from csThingTemplate
	  with the mostly similar API from csThing.
	- Fixed (or tried to fix) most of the apps with regards to this.
	  I think this worked out well except for MazeD. MazeD compiles
	  but I cannot give any other guarantees. I didn't fix shooter
	  nor csgame.
16-Sep-2000
	- Martin Geisse added the interface for music support.
	- Started the first work towards removing csThingTemplate. This
	  involves changing the way that curves are loaded. Now it is possible
	  to define a curve in a thing. Previously it was only possible to
	  define curves in thing templates. This also allows curves
	  to be defined in a sector but this will currently be ignored by
	  the engine. Note that internally csBezierTemplate and csCurveTemplate
	  are still used even if a curve is defined in a thing (without
	  thing template). Basicly a curve template is the definition
	  of the geometry.
	- Start work on csThing::MergeTemplate which works with csThing
	  instead of csThingTemplate. This is also with the removal
	  of csThingTemplate in mind. This function is not finished yet.
15-Sep-2000
	- Wouter Wijngaards removed several less useful files from install.
14-Sep-2000
	- Wouter Wijngaards made the following change to the install
	  procedure:
	    Now also copies the great pubapi docs (.htm .gif and .css files).
	    And copies docs/README.htm as well. docs/html is now copied to
	    a install/docs/html dir too.
	    Only the history.txt, history.old and incoming/ links do not
	    work in README.htm now. But these I feel not to be essential.
13-Sep-2000
	- Wyatt Miler added perfstat plugin to the shared lib project file.
	  Updated cspython, however, it still doesn't link.
	- Martin Geisse updated the msvc project files.
	- Implemented csSprite3D::HardTransform similar to csPolygonSet.
	  With this you can move all sprite vertices so that (for example)
	  the origin is at another place.
11-Sep-2000
	- Eric Sunshine made the following changes to worlfmt.txi, the Crystal
	  Space World File Format description documentation:
	    - *Major* typesetting and formatting overhaul.  This section now
	      looks *much* nicer in the printed manual, and quite a bit better
	      in the HTML and Info translations as well.
	    - Eliminated the overfull 'hbox' warnings reported by TeX.
	    - Added discussion about world loading semantics.
	    - Added section explaining grammar of world file syntax.  Added
	      grammar examples, as well.
	- Eric Sunshine upgraded texi2html to version 1.64.
	- Eric Sunshine moved texi2html.init configuration file from CS/bin to
	  CS/docs/support.  Adjusted makefile, docs.mak, appropriately.
	- Eric Sunshine made the following changes to texi2html 1.64.  Also
	  sent patches to its maintainer so that these changes become
	  permanant (hopefully).  These changes were necessary to make
	  texi2html handle the newly re-formatted worldfmt.txi file.  Without
	  these changes, texi2html would crash and burn on that file.
	    - Fixed severe bug in macro expansion logic.  Macro argument
	      parsing code did not handle nested braces ('{' and '}')
	      at all, thus valid macro invocations such as
	      "@mymacro{Hello @emph{there} @strong{world}.}" would fail.
	      Prior to this fix, @mymacro would be handed the argument
	      "Hello @emph{there", which is clearly incorrect.  Now @mymacro
	      correctly receives "Hello @emph{there} @strong{world}." as its
	      argument.  This fix also deals properly with the protected brace
	      sequences \{, \}, @{, and @}.
	    - Fixed severe macro expansion bug.  Macro argument parsing code
	      did not handle arguments split over multiple, such as
	      "@mymacro{Hello \n world.}".  Now it correctly handles macro
	      invocations split across any number of lines, and properly flags
	      an error at the correct location if the user forgets the closing
	      brace '}'.
	    - Fixed formatting errors in expansions of @SPACE, @TAB, and @NL
	      (where SPACE, TAB, and NL represent the actual space, tab, and
	      newline characters).  The Texinfo manual explicitly states that
	      each of these sequences should expand to a "printable" space in
	      the [rendered] output.  The example given in the manual
	      shows that "Spacey@ @ @ @ example" should expand to
	      "Spacey    example".  However, texi2html was only emitting
	      the insignificant whitespace ' ' and '\n' into the HTML
	      output which did not properly preserve the hard spaces in
	      "Spacey    example".  Now each of these directives expands to
	      '&nbsp;' instead.
	    - Made aesthetic improvement to the output of @file{}, @option{},
	      and @samp{}.  The argument string is now quoted with ` and '
	      _after_ the style has been applied.  For instance, @samp{perl}
	      now expands to "`<samp>perl</samp>'", whereas it used to expand
	      to "<samp>`perl'</samp>".  In my tests, this change results in
	      more aesthetically pleasing rendered output on various browsers.
	- Eric Sunshine modified docs.mak to disable verbose output from TeX
	  and dvips.  The output from these commands (particularly from TeX)
	  was far too excessive to be of use in a terminal session.  Now the
	  output of TeX is maintained in out/docs/dvi/cs-unix.log, instead.
	  You should check the log file for under- and overfull 'hbox'
	  warnings and other errors (usually denoted by '!') instead of
	  relying on terminal output.
	- Eric Sunshine modified cs.txi so that @value{TITLE} now expands to
	  just "Crystal Space" rather than "Crytal Space" plus the version
	  number.
	- Andrew Zabolotny improved, yet again, text drawing speed both with
	  transparent and filled background from 340.000 & 345.000 characters
	  per second to respectively ~380.000 and ~520.000 characters per
	  second (11% and 50% speed increase without and with transparent
	  background respectively).
	- Andrew Zabolotny fixed a bug in text clipping introduced by previous
	  batch of improvements to the canvas plugins that resulted in text
	  caret moving sometimes twice for one character (this was seen as
	  misplaced menu text in MazeD for example).
	- Andrew Zabolotny made the following changes to MazeD:
	    - Changed the term "modification axis" into more correct
	      "modification origin" everywhere.
	    - The "Slide view" mode now allows to position the depth position
	      of the "camera target" point.  This is done by entering the
	      "slide view" mode (by clicking the "oblique arrow surrounded by
	      a square" button on lower toolbar) and by holding down left
	      mouse button in the target view; then move it with SHIFT key
	      pressed to change the depth of the point that camera is looking
	      at.  This does not change the position of the view, but changes
	      the behaviour when you rotate around it (for example with arrow
	      keys).  Same applies to "modification origin define" mode (e.g.
	      SHIFT key allows to modify the depth rather than shifting origin
	      in the view plane).
	    - Fixed a bug with cloning an already cloned light (SIGSEGV).
	    - World save is back.  I have reorganized saving to allow future
	      extensions for saving to different file formats.
	- Eric Sunshine reverted the change to dnparse.h which Wyatt Miler
	  made on 7 July 2000, since it introduced incorrect and buggy
	  behavior.  Applied a different patch which should be acceptable even
	  to his compiler.  String-constant concatenation is a standard
	  feature of all ANSI-C compilers.  If the Macintosh compiler he is
	  using can not deal with it, then that represents a bug in the
	  compiler.  Note, also, that this type of string concatentation is
	  used at many other places within the project.
9-Sep-2000
	- Added support for thing and polygon templates in the levtool
	  world saver.
8-Sep-2000
	- Eric Sunshine renamed several classes from the NetSpace suite which
	  only differed from other classes in the case of the name.  This was
	  a problem for documentation generated by Doxygen on platforms which
	  have case-insensitive filesystems.  Doxygen generates HTML filenames
	  using the class name so, for instance, it would generate files such
	  as class-iCmdMgr.htm and class-iCMDMGR.htm.  These filenames result
	  in CVS conflicts on platforms with case-insensitive filesystems.
	  Renamed the following classes:
	      csNSMGR --> csNetSpaceManager
	      iPROTO --> iNetSpaceProtocol
	      iCMDMGR --> iCommandManager
	      csNSTP --> csNetSpaceTransportProto
	- Received patched VC project files from Philip Wyett
	  <philipwyett@leedsalumni.org.uk>.
	- Eric Sunshine fixed quite a few formatting problems reported by TeX
	  when building the Crystal Space manual from the Texinfo files for
	  printed output.  Also fixed several errors in apimod17.txi which
	  prevented TeX from building the manual at all.  (The only formatting
	  problems not yet fixed are those in worldfmt.txi.  This document
	  contains several hundred formatting problems and is going to require
	  a significant effort to fix correctly.)
	- Eric Sunshine modified several of the Texinfo documents which
	  contain instructions for building Crystal Space on various platforms
	  so that they now direct the user to use "make -k" (rather than
	  "make") when building compound targets such as "all" and "drivers".
	- Eric Sunshine upgraded the NeXT documentation Texinfo files in
	  several ways:
	    - Upgraded out-of-date URLs.
	    - Added links to the zlib, jpeg, and png libraries at LinuxGames.
	    - Added instructions for building new required plug-in modules.
	    - Upgraded and clarified instructions for finer control over build
	      process.
	    - Added special note about having to run applications from the
	      command line rather than by double-clicking on them from the
	      file viewer.
	- Eric Sunshine overhauled README.htm.  Added a large number of
	  missing links.  Made aesthetic improvements.
	- Eric Sunshine fixed several Texinfo mark-up problems in
	  worldcmp.txi.  Also cleaned up and rewrote some of the discussion.
7-Sep-2000
	- Continued work on saver in levtool.  The saved world file works very
	  well already.  But a few important things are still missing (like
	  things, sprites, etc.).
	- Eric Sunshine updated the documentation-related URLs in the User's
	  Manual Texinfo files.  Also added several new links to resource.txi.
	- Eric Sunshine fixed a really significant number of Texinfo mark-up
	  errors in msdos.txi, win32gcc.txi, general.txi, simple2.txi,
	  worlfmt.txi, phyziks.txi, apimod17.txi.
	- Eric Sunshine eliminated todo.txi.  Use the To-Do facility on Source
	  Forge instead.  Also eliminated (the unused) history.txi.
6-Sep-2000
	- Patch from Mark Welch to fix a compile error on MSVC.
	- Small fix to OpenGL canvas from Nicholas Blumire.
	- Removed an assertion error from curve.cpp
	- Started work on world saver for levtool.
	- Eric Sunshine made the following changes to the API documentation
	  generation procedure:
	    - Changed the 'pubapi' and 'devapi' makefile targets to use
	      Doxygen rather than Doc++.  Doc++ is so excessively buggy that I
	      could not conscientiously support its use.  Doxygen is a far
	      superior tool.  It puts Doc++ to shame in almost every way
	      imaginable.
	    - Added docs/support directory which contains support files needed
	      for building documentation.
	    - Added pubapi.dox and devapi.dox which are Doxygen configuration
	      files for building the Public API Reference and Developer's API
	      Reference, respectively.
	    - Added apifoot.htm which is a custom HTML footer used when
	      generating the API reference manuals via Doxygen.  A custom
	      footer is needed since the default footer displays the date/time
	      when Doxygen was run.  The date/time on each HTML document is
	      undesirable because it would cause the automated API building
	      script to consider the documents as having been modified even if
	      no actual content had changed.
	- Eric Sunshine made the following additional changes to the API
	  documentation generation targets:
	    - Makefile targets 'pubapi' and 'devapi' now perform special post-
	      processing of HTML files generated by Doxygen.  Unfortunately,
	      Doxygen unconditionally embeds a hidden generation-date string
	      in each file.  This string plays havoc with the daily automated
	      API building job since it makes the file appear modified even
	      when no content has changed.
	    - Worked around Doxygen limitation where it unconditionally
	      generates files with an .html extension.  Makefile now does
	      special post- processing to rename files to .htm.
	- Eric Sunshine made even futher changes to the API documentation
	  generation targets:
	    - Now transforms .html to .htm within each HTML file as well, thus
	      allowing embedded relative links to work correctly.
	    - Cut in half the number of commands invoked during the
	      post-processing step.  This reduces the number of commands from
	      about 2800 to 1400 for 'pubapi', for instance.
	- Eric Sunshine committed new CS/docs/pubapi directory to CVS
	  repository.
	- Eric Sunshine made the following changes to docproc.pl:
	    - Now builds the 'pubapi' and 'devapi' makefile targets.
	    - Automatically updates CS/docs/pubapi in the CVS repository if
	      any documents have changed.
	    - Now makes docs/pubapi and docs/devapi available for online
	      browsing.
	    - Now makes 'pubapi' and 'devapi' packages available for
	      downloading in various formats (gzip, bzip2, zip).
	    - Building, updating CVS, and online publishing tasks are now
	      table driven (new @TARGETS array).
	    - Modification summary is now more clearly delimited (not so
	      easily lost in output).
	    - Upgraded usage statement which was rather out of date even prior
	      to these changes.
	    - Added special case to work around fact that Doxygen is not
	      installed on SourceForge machine.  Uses local copy instead.
	- Eric Sunshine added link for CS/docs/pubapi to README.htm.
	- Eric Sunshine added links to the jump-start page
	  (http://crystal.sourceforge.net/) pointing at the new browseable and
	  downloadable 'pubapi' and 'devapi' resources.
	- Eric Sunshine updated the annotated directory listings (via
	  spoofdir.info files) to reflect fact that 'pubapi' and 'docapi'
	  resources are now available online.
	- Eric Sunshine modified the automated documentation and CVS snapshot
	  generation jobs so that they now send mail to the CVS mailing list
	  instead of only to Eric.  Also the scripts for these jobs have moved
	  from his home directory to /home/groups/crystal/bin.  Hopefully,
	  this way if problems arise with the automated tasks, other people
	  may be able to address the problems in the event that Eric is
	  unavilable.
5-Sep-2000
	- Norman Kramer corrected writestring function signature in glide
	  canvas.
	- Eric Sunshine made the following changes to spoofdir.php:
	    - The $indexfile[] array is now specified as a set of regular-
	      expressions rather than a fixed set of filenames.
	    - Case-sensitivity can now be specified individually for each
	      regular-expression in the configuration section rather than
	      always being assumed case-sensitive.  Currently applies to
	      $ignore[] and $indexfile[] arrays.
	    - Now much more strict about canonicalization of filenames prior
	      to matching.
	- Eric Sunshine made the following changes to the CS Jump Start page
	  at http://crystal.sourceforge.net/.
	    - Added link for online CVS browsing.
	    - Aesthetic improvements.
	- Brandon Ehle did some enhancements to Python scripting.
	- Eric Sunshine made the following changes to the automated
	  documentation building process:
	    - docproc.pl now places downloadable documentation package files
	      in the FTP area rather than the HTTP area.
	    - Modified spoofdir.cfg to access FTP space instead of HTTP space
	      in order to satisfy HTTP requests for documentation.
	    - Documentation packages can now be downloaded via HTTP or FTP
	      rather than being restricted only to HTTP.
	    - Updated the Jump Start page (http://crystal.sourceforge.net/) to
	      reflect fact that documentation packages can now be downloaded
	      via HTTP and FTP.
	    - Updated documentation directory annotations (in spoofdir.info
	      files) appropriately.
	- Fixed a bug in loader so that collision detection is now also
	  enabled for mirror surfaces in the ROOM syntax.
	- Fixed an init bug in csPolygon3D with regards to materials.
	- Added /lib/stdtex to VFS. This new archive contains a bunch of
	  textures that are used by most CS levels (stdtex.zip).
	- Andrew Zabolotny did the following:
	    - Added to win32conf.bat display a note about which packages
	      you should have installed. This depends upon which compiler
	      you use (e.g. it displays slightly different help depending
	      on whenever you use msvc or mingw32).
	    - Enhanced the configure help for DJGPP.
	    - Fixed both dosconf.bat and win32conf.bat (very old bug) to
	      detect correctly whenever makedep is installed. Earlier it
	      considered makedep to be always installed.
	    - Added `walkall' target to compile just the plugins that are
	      needed for walktest. Currently `make walkall' is equivalent to:
		make walk soft csfont simpcon perfstat rapid
	    - Fixed DOS/DJGPP build in debug mode with shared libraries.
	      Added functions that are usually inlined (e.g. strcmp, memcmp,
	      strcpy) to the list of exported functions in djgpp/loadlib.cpp.
	      Fixed a bug in dosraw driver related to the fact that transfer
	      buffer is overwritten by printf() (which is used in debug
	      mode to print some videocard information). So, in overall,
	      DOS port now works in both static/dynamic and optimize/debug
	      modes.
	    - Added perfstat plugin to static.cpp if SCL_PERFSTAT macro is
	      defined. Effectively this adds FPS display for static mode
	      build.
	    - Enhanced (fixed) linex2d driver: now it uses "helvetica" font
	      and GetTextWidth/Height are implemented properly. Also
	      DrawText() works properly now (previously it painted text
	      shifted up by some amount).
	    - Added DrawBox() method to linex2d driver. Also I have fixed
	      Clear() which were not clearing one pixel horizontally and
	      vertically.
	    - Added AllowContextResize(bool) method to iGraphics2D. By default
	      context resizing is *disallowed*. This is because most
	      applications won't handle the cscmdContextResize broadcast
	      correctly, and will misbehave.  Applications which handles
	      this broadcast correctly should issue AllowContextResize
	      (true). Note that engine already does this (since engine
	      handles context resizes) thus you should do this only for
	      applications that don't use the engine.
	    - Fixed x2d driver to allow width and height only in steps of 2.
	      The reason is to not allow odd window width, because in some
	      cases XFree86 (?) does not like that (every scanline is
	      shifted by one pixel). I don't think this is a limitation,
	      but if somebody don't like this, it should limit at least
	      width to be even.
	    - Moved glMatrixMode(), glOrtho(), glViewport() to 2D common
	      OpenGL driver. This was done to allow 2D driver to function
	      standalone (without 3D).
	    - Added (not replaced) a new gl2d_font2.cpp, another OpenGL
	      font "server". I have used glBitmap() to draw font, which
	      will help on platforms with buggy OpenGL support for
	      alpha-mapped textures (such as OS/2 and MacOS). We still
	      have to see how compatible this approach is; but it at least
	      works with OS/2 software OpenGL 1.0 (previous font rendering
	      did not). Maybe we should make this a runtime option in
	      opengl.cfg, I'm not sure. Also I have implemented text
	      clipping. Vertical clipping seems to work, horizontal
	      clipping should also work but I cannot fully test it due
	      to non-implemented "xorig" parameter in glBitmap() in OS/2
	      OpenGL.
	    - Implemented runtime context resizing for the OS/2 OpenGL
	      canvas. Also it respects AllowContextResize(bool).
	    - Added a new test application: G2DTEST. As you may conclude
	      from his name, this small application is meant to test most
	      aspects of 2D graphics canvas plugins. Also it is a curious
	      example of a application which uses just the graphics canvas
	      plugin (without 3D renderer).
	    - Fixed line drawing in graph2d.cpp (this affects most canvas
	      plug-ins). Now line drawing is absolutely perfect,
	      floating-point coordinates are correctly used. Even OS/2
	      OpenGL shows little errors with line drawing, compared to
	      graph2d.cpp (and OS/2 OpenGL is known to be accurate).
	      This effectively broke CSWS which was designed for the
	      "incorrect" line drawing behaviour :)
	    - Fixed a bug in csOpenGLCommon2D::SaveArea which caused a shift
	      to the area which is going to be saved.
	    - Fixed CSWS after last changes to line draw routines. Now
	      CSWS works with OpenGL, at least on OS/2.
	    - Added PerformExtension ("flush") to OpenGL common graphics
	      canvas. This can be used to do performance measurements.
	    - Improved software line drawing performance from ~5.5
	      MegaPixels/sec to approximatively ~15.8 MP/sec on Celeron/433.
	      I think the assembly line drawing routine (which is used only
	      in Win32/MSVC) should be removed since first of all I think
	      it is slower, and secondly I doubt it is accurate (e.g. I'm
	      sure it fails most of the accuracy tests in g2dtest). (for
	      comparison: OS/2 OpenGL canvas gives just 3MP/sec, XFree86
	      linex2d driver gives 7.3MP/sec :-). Hurray, we have the
	      fastest-and-most-accurate line drawing routine in the world! :-)
	    - Removed the WriteChar() routine from iGraphics2D interface.
	    - Slightly improved software text drawing speed fom ~300000
	      characters/sec to ~330000 characters/sec. For comparison:
	      OS/2 software OpenGL gives ~26000 characters/sec and linex2d
	      driver gives about ~241000 characters/sec.
	    - Moved some OpenGL initialization stuff (realted to OpenGL
	      start-up settings) from 3D driver to the 2D (canvas) driver
	      (to the common part), to make possible to use OpenGL 2D
	      driver without the 3D driver.
	    - Added a note about C_INCLUDE_PATH needed to be set up correctly
	      before you do "make depend" to the win32gcc.txi file.
	- Release of 0.17r001.
	- Eric Sunshine made the following documentation-related changes:
	    - Renamed documentation targets: apidoc --> pubapi, devdoc -->
	      devapi.
	    - Worked around obnoxious bug in DOC++ 3.4.2 where it accidentally
	      creates hidden output files.  (Maybe we should move to Doxygen,
	      as DOC++ seems excessively buggy.)
	    - Minor modifications to scf.h and dungeon/dnfnodes.h to pacify
	      DOC++.
4-Sep-2000
	- Brandon Ehle did some maintenance to the Python scripting stuff.
	  Need to wait for next SWIG release for everything to fall in place.
	- Added more information to the object list of levtool app.
	- Added a detail window to show the individual polygons and curves of
	  a thing or sector.
	- 'Levtool' recalculated lighting every time a new level was loaded.
	  No longer does so.
	- Eric Sunshine made several changes to the PHP script which allows
	  browsing of the FTP space from HTTP space.
	    - Major overhaul.
	    - Renamed from cvssnap.php to spoofdir.php.
	    - Now very general in nature, highly configurable, and generates
	      much more aesthetically pleasing directory listings.
	    - Now capable of providing virtual HTTP access to any directory
	      within or outside of the web space.  No longer tied to _only_
	      spoofing 'cvs-snapshots' directory from FTP space into HTTP
	      space.
	    - Directory listings can now be annotated.  The annotation is
	      displayed along with the directory listing and can be used to
	      describe the directory contents in human-readable terms.  See
		http://crystal.sourceforge.net/cvs-snapshots/
	      and
		http://crystal.sourceforge.net/docs/
	      and any of their subdirectories for an example of how this works
	      and how useful it can be.
	    - Overhauled index.php at http://crystal.sourceforge.net/.  Added
	      many missing links; particularly for documentation.
	    - Eliminated old dirlist.php which vended the docs/download
	      directory.  spoofdir.php now handles this functionality plus
	      much more.
	    - Eliminated Frank's 'build_fake' and cousins since spoofdir.php
	      can now handle this functionality as well.
2-Sep-2000
	- Fixed bug in csWorld::Clear() where that function would forget
	  to clear the texture cache in G3D. This could result in crashes
	  when reloading a world in OpenGL for example.
	- Added a test in OpenGL to prevent ClearCache() from crashing
	  when it was called at destruction time.
	- Changed fatal error 'Light 'xxx' not found' into a warning.
	  This makes sure that old levels that still use the old
	  collection syntax will work (but without the light in the
	  collection).
	- Added ObjectView window to levtool. This contains all objects
	  in the world in a csTree component. Currently this list is only
	  a subset. It will be completed later.
	- Martin Geisse added a patch to the VC project files from Mark
	  Welch.
1-Sep-2000
	- Robert Bate updated the Mac port projects a little.
	- Fixed a bug in the WalkTest entity system which could cause
	  crashes at exit (especially with flarge).
	- Made csEntityList a csVector. It appears that csPObject's can
	  only safely have one parent.
	- Updated apimod17.txi documentation.
	- Fixed 'new view' in levtool app.
31-Aug-2000
	- Martin Geisse fixed two compiler warnings.
	- Added csView::SetWorld() to change the world that is used
	  for the view. This is useful for programs that reload the world
	  later.
	- Extended csTransformationManager so that you can initialize
	  it again. Then call this initialize from csWorld::Clear().
	  This means that it is now safe to clear the world and reload
	  it.
	- Added the ability to load levels in levtool. Now you just can
	  use the 'Load Level' button and select a ZIP file using the
	  archive. This will load the level in all available engine views.
	- Added the first useful feature to 'levtool'. A 'cleanup' button
	  that will remove all lightmaps and PVS info from a level archive.
	- Added 'New View' button to add a new engine view window.
	- Made the Control Window in levtool dragable.
	- Found a bad bug in the loader (related to the recent changes
	  with things) which caused things to be added twice to the sector
	  list. This caused crashes when loading levels which had things
	  with portals, caused things to be lit too much, and also caused
	  things to be drawn too much.
	- Removed some comment from Andrew about a
	  csPolygonClipper::ClassifyBox which was wrong according to
	  Andrew. But it isn't. The function is correct.
	- Fixed a bug in WalkTest with regards to particle systems. The
	  new GetMovable().UpdateMove() function was not called which
	  resulted in the particle systems not being visible in STATBSP
	  levels.
	- Added csMovable/iMovable GetFullTransform() which will return
	  the full transformation with regards to hierarchical
	  transformations (i.e. it will combine the local transform
	  with the one from the parents).
	- Added csWorld::FindLight(char*name) to find a named light.
	- Changed collection syntax in loader to only allow adding
	  lights based on the name of the light and not on the sector/index.
	- Added support for adding sprites to collections in the loader.
	- Removed csWorld::GetThing since that can now be done by using
	  the 'things' and 'skies' public vectors
	  (i.e. world->things.FindByName(name)).
	- Removed csWorld::NewSector since this is obsoleted by the
	  newer csWorld::CreateSector or csWorld::CreateCsSector.
	- Things and skies are now also added to the world by the
	  loader.
	- Updated apimod17.txi.
	- Fixed WalkTest so that collision detection with moving things
	  is now ok.
	- Fixed a bad bug with STATBSP level caused by recent changes.
	  The static thing could get corrupted in some cases. Also I forgot
	  to add the static thing to the world.
	- Andrew Zabolotny did the following:
	    - Fixed all textures in MazeD and csws to be power of two.
	      This includes notebook textures. Previous csws.zip had some
	      strange dithering applied, and color wheel was broken (it
	      was designed to be 129x129, and it was resized to 128x128
	      which caused one scanline of garbage below the color wheel).
	      Also the csws.zip archive is almost twice smaller now (all
	      pngs were saved as truecolor, while 256 color format suffice
	      for most PNGs except wheel).
	    - Fixed an almost unnoticeable bug in csws listboxes which
	      leads to directory listbox sometimes to have two focused
	      items (when you switch directories).
	    - Re-generated the color wheel bitmap to size 128x128 rather
	      than 129x129. This leaded to small changes in code as well.
	    - Added error reporting for OS/2 loadlib.cpp.
	    - Some fixes for OpenGL canvases. CSWS now looks better
	      but still bad.
	- Increased CS version number to 0.17r001 to indicate the new
	  release which is going to happen soon.
	- Put back the double buffer stuff in openglcommon which Andrew
	  removed.
30-Aug-2000
     	- Andrew Zabolotny:
	    - Some fixes to MazeD. Now it works, but is unusabled due to
	      some #if 0's I had to insert here and there. There are lots
	      of changes to be done before MazeD will become useable again.
	    - Transformed LibPath vector back into a static variable.
	      I think the problem with unix/loadlib.cpp is solved now,
	      I have removed the *real* source of problems, I believe. I
	      hate half-solutions.
	    - Fixed the problem with multiple similar errors popping up
	      when a shared library is missing. I have added the
	      csPrintLibraryError() function which prints dlerror() or
	      whatever. It is invoked once at the end of csFindLoadLibrary,
	      if library loading has failed.
	    - Added csHalo::Get/SetIntensity methods. To change halo
	      intensity, do light->Halo->Set/GetIntensity (float).
	- Removed csSprite::GetSector and GetSectors since that is now
	  part of the csMovable. Forgot to do that yesterday.
	- iCamera::GetAspect and GetInvAspect returned the wrong values
	  (GetAspect returned inv_aspect and vice versa).
	- Moved calculation of the FOV angle to csCamera. This makes
	  the engine a bit more efficient since this was now done every
	  time a portal was traversed. This saves four divides, five
	  multiplies, an acos, and an sqrt for every portal every frame.
	- Added csCamera::SetFOVAngle() to set the FOV using an angle
	  in degrees.
	- Added a 'width' parameter to csCamera::SetDefaultFOV() and
	  csCamera::SetFOV() so that the FOV in angles can be computed.
	- Added 'fovangle' console command to get/set the FOV with degrees
	  as a parameter.
	- Added support for csMovable in csCollection too. The plan is
	  to support hierarchical animation with this technique. Not
	  done yet.
	- Added a vector of collections in csSector. This way collections
	  work similar to sprites and things.
	- Removed csWorld::GetSpriteTemplate and GetThingTemplate since
	  this can easily be done on the public vectors instead.
	- Added csWorld parameter to csCollection constructor.
	- Fixed a bug in csWorld::RemoveSky.
	- Added csWorld::UnlinkCollection and csWorld::RemoveCollection.
	- Fixed the apps in CS due to the latest changes (forgot to do that).
	- Eric Sunshine worked around an instruction scheduling optimization
	  bug in the MacOS/X Server compiler for PowerPC (Macintosh hardware).
	  This bug was triggered by code in edgeclip.inc and would cause the
	  compiler, itself, to hang indefinitely while compiling polyclip.cpp.
29-Aug-2000
	- Integrated a new SDL canvas made by George Yohng
	  <cspace@mmts.nsys.by>.
	- Fixed default HALO parsing. If a NOVA halo was used in a level
	  all following halo's would be NOVA too.
	- Fixed a bug in csSector::RemoveThing. This function didn't
	  delete the thing in the past but it did now. I changed it back
	  to the old behaviour. This fixes Blocks again.
	- Added two new vectors 'things' and 'skies' to csWorld. The plan
	  is to make things and skies have almost exactly the same API with
	  regards to movement and placement in sectors. The move to csMovable
	  is one step. But this list is another one.
	- Removed csSector::RemoveThing/RemoveSky since that happens the
	  same way as with sprites now. Added csThing::RemoveFromSectors()
	  and csThing::MoveToSector().
	- Added csMovable and iMovable::UpdateMove(). Made RemoveFromSectors(),
	  MoveToSector(), and UpdateMove in csThing and csSprite private
	  since this will now be called by the csMovable. This means
	  that when you did:
	    sprite->UpdateMove ()
	  you have to change this to:
	    sprite->GetMovable ().UpdateMove ();
	  Also instead of calling RemoveFromSectors() you now need to
	  call GetMovable ().ClearSectors() and instead of calling
	  MoveToSector() you need to call GetMovable ().SetSector().
	  And don't forget the UpdateMove()!
	- The change above allow application developers to make movement
	  routines based only on a csMovable without having to care about
	  what object is being moved (csThing or csSprite).
	- Made MoveToSector, UpdateMove, and RemoveFromSectors in
	  csSprite and csThing virtual so that subclasses can override
	  them. This happens for csParticle for example. It overrides
	  MoveToSector for its specific purposes.
	- Added is_sky parameter to the csThing constructor so that a
	  thing knows it is a sky object or a normal thing.
	- Fixed all the apps with regards to the above changes.
	- Update the apidoc17.txi documentation with regards to the above
	  changes.
	- Update simple.txi and simple2.txi tutorials.
	- Norman updated worldfmt.txi for TEX_SET_* to MAT_SET_* change.
	- Did various other updates to the worldfmt.txi to reflect recent
	  changes with materials, shading, ...
28-Aug-2000
	- Martin Geisse added movable.cpp to the MSVC project files.
	- Norman Kramer added a 'const' modifier to csMovable.
	- Norman changed TEX_SET_* to MAT_SET_*, tex set was broken after
	  recent changes.
	- Norman fixed another instance of thing First/NextThing calls
	  which Jorrit forgot to update.
	- Update from Brandon Ehle to the PS2 port:
	  PS2 completely compiles in static mode, need to fix the
	  unresolved externals now.
	- Added GetPosition() to csMovable and iMovable.
	- Fixed a bad bug in sprites. When a sprite was deleted it
	  could potentially delete it's parent sector with it. Not very
	  good :-)  I fixed this by changing the csNamedObjVector of
	  sectors to a normal csVector.
	- Removed csSprite3D::GetW2TTranslation(). This function is obsolete
	  and exactly the same as csSprite3D::GetPosition().
	- Similarly removed csSprite3D::GetW2T() and GetT2W() and replaced
	  with the more general GetTransform().
	- Removed csSprite3D::SetPositionSector() since this function
	  needs to be implemented in csMovable and using a better
	  algorithm. It wasn't used anyway.
	- Fixed documentation for csCamera::LookAt() a little.
	- Added csMovable to csSprite. Added GetMovable() and UpdateMove().
	  Similar to how it works with things.
	- Removed SetPosition, MovePosition, GetTransform, and GetPosition
	  from csSprite since that is now in csMovable. IMPORTANT NOTE! You
	  should now call sprite->UpdateMove() after updating the position
	  in the csMovable returned by GetMovable(). If you don't do this
	  then important information in the sprite structure may not be
	  updated. Note that this change makes movement of sprites more
	  efficient since UpdateMove() has some cost. In the past it was
	  called on every movement/transformation call which means it was
	  called too often sometimes.
	- Fixed all the CS apps for the new csMovable change for sprites.
	- Changed csSprite2D to use the position from csMovable.
	- Added csMovable/iMovable SetPosition() with only a position
	  as a parameter.
	- Added csMovable SetParent() and GetParent() which are going
	  to be used for hierarchical transformations later. This is
	  not done yet though.
	- Changed the list of sprites in a sector from csNamedObjVector
	  to csVector. This is a big bug. If a sprite got deleted it
	  could delete its parent sector with it.
	- Made the list of things and sky objects a csVector instead of
	  a double linked list. Also removed the GetFirstSky()
	  and GetFirstThing() calls from csSector (and GetNumSkyThings(),
	  GetNumThings(), AddThing(), and AddSky()).
	- Also removed GetParent/SetParent and GetNext/SetNext for polygon
	  sets since that is no longer needed now.
	- Note that Blocks is broken now (crashes when you return to menu).
	  I will fix this later.
	- Andrew Zabolotny did the following:
	    - Fixed unlighted textures in 32 bit videomodes.
	    - Fixed halo drawing in 32-bit modes. Halos with R > 1 used
	      to overflow because the highest of the 32 bits is used for
	      sign. Now halos are limited to R [0..2] G [0..2] B [0..2].
	    - Changed HALO() keyword a bit; the old syntax is supported
	      for backward compatibility still. The new syntax is:
		HALO (halo_type, ...)
	      The arguments after halo_type depends of the halo type.
	      Currently there are two types of halo supported:
		CROSS, the old halo type. Two arguments are expected:
			halo intensity (float) and "cross-factor" (float).
		NOVA, a new halo type (stolen from GIMP). Three arguments
			are expected: initial random seed (integer), number
			of spokes (integer) and roundness (float).
	      Nova halo looks best if used with bright whitish lights
	      (e.g. R||G||B > 1).  Example: LIGHT (CENTER (xx,xx,xx)
	      RADIUS (xx) COLOR (1,1.2,1.4) HALO (NOVA))
	    - Changed a bit the loader: added the FindMaterial(char*)
	      routine which tries to find a material with given name; if
	      not found it tries to find a texture with this name; if it
	      is found a material is created from it.
	      This way it is compatible with old worlds, and with new
	      worlds as well.
	    - Changed the loader so that polygons with portals and with
	      alpha == 0 (e.g. absolutely transparent) will get the
	      POLYTXT_NONE shading type. If you are going to change the
	      alpha value later (e.g. to make a portal dynamically
	      appear/disappear) you should call poly->SetTextureType ()
	      manually. This conserves quite a bit of memory which is
	      normally not used. For example, with flarge.zip this reduces
	      the size of lightmaps from 415K to 312K.
	    - Cleaned up the opengl makefiles a little.
	- Added MATERIALS support to LIBRARY keyword.
	- Fixed standard.zip to the changes from Andrew (i.e. added a
	  MATERIALS section to standard.zip).
	- Fixed apps to refer to the right materials now.
27-Aug-2000
	- Made new iMovable interface and let csMovable implement it (through
	  embedding).
	- Changed csThing to use the new csMovable. This has the following
	  implecations with regards to the API for moving things: the
	  functions, SetSector(sector), GetSector(), SetPosition(),
	  SetTransform(), GetTransform(), MovePosition(), And Transform(matrix)
  	  are all gone and have moved to the csMovable. This means that
	  for example:
	    thing->SetSector(sector);
	  becomes:
	    thing->GetMovable ().SetSector (sector);
	  In addition Transform() itself has been renamed to UpdateMove().
	  You must call UpdateMove() after doing a change to the csMovable
	  so that internal data structures are updated correctly.
	  Note: GetSector() now has an index parameter telling which sector
	  to take. To get the old behaviour just use 0 as index.
	- Changed iThing to use the new iMovable.
	- changed csNamedObjVector to csVector (in csMovable) because
	  csNamedObjVector deletes the children at destruction.
26-Aug-2000
	- Added a new csMovable class which encapsulates moving entities.
	  It does not hold geometry but everything needed to do the
	  object to world transformation and move that around.
	  Class is not yet used but preparation work for the usage
	  of this class has started. The main benefit of this class will
	  be to make sure that the API for moving sprites and things
	  is the same by putting that API in a seperate class.
	- Removed strange 'sector' pointer from csPolygonSet and put it
	  in csThing instead. Sectors don't have a need for a 'sector'
	  pointer as this is equal to 'this'. Also this will make it easier
	  to use the new csMovable.
	- Removed 'sector' pointer from csPolygon3D because it is unused
	  and dangerous (redundant) to keep it there since this information
	  is implicit in the parent of the polygon (which can move to another
	  sector). (note: this also removed SetSector() and GetSector()
	  calls). This removal had lots of repercusions in the entire
	  engine so several things have been slightly rewritten.
	- csRenderView now contains a this_sector and previous_sector pointer
	  (also triggered by the removal of csPolygon3D::sector).
	- Martin Geisse added some safety checks to 2d animations.
	- Norman Kramer added missing rootdefines section to sndload.mak,
	  fresh rebuilds ("make linux" for instance) lost information what
	  sound decoders to build, which then resulted in "sound file ...
	  corrupt" upon loading.
25-Aug-2000
	- Brandon Ehle added fixes to python to get it to compile again.
	- Brandon Ehle started check in of Playstation 2 port.
	  Don't get too excited just yet, may not be able to check in
	  the platform specific code.
	- Andrew Zabolotny implemented the following for levtool:
	  - Implemented the per-window key handling.
	  - Implemented multiple views. Right now there are two engine views
	    created upon startup.
	- Andrew changed TEXTURING into SHADING.
	- Andrew added a check for NT's CMD.EXE to win32gcc.mak.
	- Andrew: now PLUGINS.DYNAMIC will compile if USE_SHARED_LIBS=yes.
	  It used to be broken after my yesterday change.
	- Andrew Moved <stdarg.h> to be before <stdio.h>. Please always
	  put <stdarg.h> before any other system includes as on OS/2
	  this gives compilation errors.
	- Martin Geisse added a missing include in csutil/halogen2.cpp.
24-Aug-2000
	- Wouter Wijngaards did a few optimizations on the makefiles
	  so that compilation should be somewhat faster.
	- Andrew Zabolotny did the following:
	    - Now for builds with enabled shared libraries all cross-platform
	      plugins will be built by default. For static builds only
	      the most needed plugins are built (and linked against every
	      executable).
	    - Documented the -fs/-nofs switch in help (fullscreen toggle).
	    - Fixed the 32-bit unlighted texture drawing bug (long-standing).
	- Fixed the WaveOut sound driver makefile so that the description
	  is correctly showed.
	- Enabled the WaveOut sound driver in the win32gcc.mak makefile
	  because it works fine.
	- Fixed the win32gcc.mak file so that it works better on Windows
	  NT (replaced '/' with '\' in two places).
	- Fixed the d3ddx6.mak file so that it's description is aligned
	  correctly with 'make help'.
	- Fixed ddraw61.mak so that the description is a little shorter.
	- Fixed Makefile so that it correctly displays help for the install
	  target with win32gcc.mak.
	- Added the first (VERY primitive) version of the new 'levtool'
	  application. This will be a CSWS based application (and also
	  commandline based) with which you will be able to do various things
	  on levels. Here are a few uses that I see:
	  	- Recalculating lighting with graphical dialog for
		  controlling the lighting optionsl (radiosity, ambient, ...)
		- Recalculating PVS.
		- Portalizing a level.
		- Deportalizing a level.
		- Extracting entities and objects.
		- Adding entities and objects.
		- ...
	  It will have a 3D preview of the level too.
	  Current version is just a version of csws3d that is modified
	  a little.
	- Andrew Zabolotny implemented a nice engine-in-a-window in the new
	  levtool application. This is the best try of this kind of
	  application written until now; the engine is fully integrated
	  into the windowing system and doesn't look alien.
	- Andrew also committed some fixes to SGI alpha channel loading
	  which he received from someone else.
	- Martin Geisse updated the VC project files.
23-Aug-2000
	- Martin Geisse fixed a bug in the console plugin.
	- Gary Haussmann enabled GL-level backface culling. This makes
	  the OpenGL renderer more consistent with the software renderer.
	  When used together with the engine this should make little
	  difference as the engine does backface culling. But it may make
	  a difference if you use G3D on your own.
	- Forced recalculation of lightmaps now only happens if you
	  change the lightmap size (i.e. from 16x16 lumels to 8x8) or
	  a global format change happens. In the past it also happens
	  if you changed parameters like ambient and so on. For changes
	  of ambient to have effect you now have to do '-relight' or
	  '-recalc' explicitelly.
	- Norman Kramer included missing ievent.h to csclear.
	- Norman fixed the OpenGL renderer with fog. There was one bit
	  that wasn't properly stored with glPushAttrib. This causes
	  crashes on the voodoo3 and very likely also the big crash
	  that I have on the GeForce (to be checked).
	  (NOTE: after checking this it doesn't appear to be enough.
	  I'll have to experiment further).
	- Norman fixed csclear.cfg for the right console.
22-Aug-2000
	- Got a small patch from Rene Dudfield with new console command
	  (for WalkTest) 'listactions', and a new sprite name argument
	  for 'addsprite'.
	- Added apimod17.txi documentation which explains how to go
	  from 0.16 to 0.17. It is not complete though.
	- Martin Geisse added the sound information to apimod17.txi.
	- Fixed loadlib.cpp so that it again prints the error message
	  from dlerror. This is ugly but it is the only way to get the
	  useful error messages back.
	- Wouter Wijngaards did some fixes to the install system.
	- Andrew Zabolotny found one BigBug {tm} and one small bug that
	  prevented DOS port from working. Now it works in both static
	  and dynamic linking mode, with gcc 2.95.2 and binutils 2.9.5.
	  Hurray. FPS for some reason stays at zero, but I'm not sure this
	  is DJGPP-specific.  Also for static linking mode
	  csAddLibraryPath() is not called since it is not even present.
	- Norman Kramer made the csBitSet members protected (were private
	  before).
21-Aug-2000
	- Andrew Zabolotny did the following:
	    - Changed perfstat plugin to compute fps once per 1/2 second
	      rather than once per 10 frames. This will compute more accurate
	      values in high-fps environments and also makes fps numbers
	      more steady. Also iPerfStat::SetResolution sets the interval
	      in msecs rather than in frames.
	    - Changed FPS display in walktest to display just two numbers
	      after dot. I don't think you really care whenever you have
	      20.111 or 20.112 fps :)
	    - Created the iEvent interface. It is really a very special
	      interface since its the first time (as far as I know) an SCF
	      interface with member variables is used. However, this is
	      supposed to work on all platforms. Be warned though.
	    - csEvent is now just a particular implementation of iEvent.
	      You can create your own objects implementing iEvent interface.
	      PLEASE always use QueryInterface (or rather QUERY_INTERFACE
	      macro) to get access to extended fields; NEVER do direct
	      typecasts.
	    - Added a new halo generation routine - csutil/halogen2.cpp. It
	      is not used anywhere yet though. The algorithm has been
	      borrowed from GIMP (`SuperNova' plugin).
	    - Started to work on MazeD material support. Not finished
	      though (even not compilable).
	    - Improved material support. The MATERIALS() statement in
	      world file now looks like this:
		MATERIALS (
		  MATERIAL 'material name' (
		    TEXTURE ('texture name')
		    COLOR (float, float, float)		; R,G,B = 0..1
		    DIFFUSE (float)			; 0..1
		    AMBIENT (float)			; 0..1
		    REFLECTION (float)			; 0..1
		  )
		  ...
		)
	      I have added the GetFlatColor() method to iMaterial and
	      iMaterialHandle. For now the flat_color_X members in
	      iGraphics3D polygon structures are still present; however I
	      hope one day they will be gone and a material handle will
	      be always present, since materials also support flat color.
	      For now only software renderer supports materials with flat
	      colors; I hope with time other renderers will be also
	      updated for this.
	    - Renamed RGBcolor -> csRGBcolor and RGBpixel -> csRGBpixel.
	      In general, we should think where to put all
	      library-independent header files such as rgbpixel.h and
	      cspixmap.h. I would say they could live in main include
	      directory since those classes are absolutely independent
	      and completely inline.
	    - Changed the way engine defines and uses texturing. There are
	      four polygon texturing types now: POLYTXT_NONE (no texturing,
	      useful when using materials without textures -- it defines no
	      texturing parameters at all thus saves memory), POLYTXT_FLAT
	      (flat-shading, only the angle between light and polygon
	      normal is considered if CS_POLY_LIGHTING flag is set, and
	      entire polygon is painted with one lighting value; every
	      vertex has an U/V pair associated), POLYTXT_GOURAUD (every
	      polygon vertex has a color and those colors are interpolated
	      across scanlines) and finally POLYTXT_LIGHTMAP (a polygon
	      which has an associated lightmap and a texture plane). Now
	      it is possible to define and use objects which have flat-color
	      but still receive light with Gouraud as well as without
	      Gouraud interpolation; in general this open a whole new area
	      for experimenting.
	    - New keyword in world file inside the POLYGON () context:
		TEXTURING (NONE | FLAT | GOURAUD | LIGHTMAP)
	      This defines one of the texturing modes above.
	    - MIXMODE() keyword is applicable to all texturing types
	      except LIGHTMAP. Alpha transparency for such polygons can be
	      defined in two ways:
		POLYGON (... ALPHA (50) MIXMODE (MULTIPLY2))
	      or
		POLYGON (... MIXMODE (MULTIPLY2 ALPHA (0.5)))
	      To be honest, I don't like having two different ways to
	      specify alpha. I don't like the different scale either
	      (0..1 and 0..100).  Polygon always keeps alpha as a value
	      0..255 (and iGraphics3D always receives alpha in this
	      range, the old 0..100 scale is gone).
	      In general, I would say that giving colors and alpha as
	      floating-point value looks like a bad idea. I would store both
	      them as 0..255 value, or as a floating-point 0..1 value.
	      Maybe it makes sense to change this in the new loader?
	    - DECLARE_GROWING_ARRAY does not have a reference counter
	      anymore. If you need a reference counter, use
	      DECLARE_GROWING_ARRAY_REF. This gives slight less memory
	      usage in some places. I have changed thing and polygon
	      template objects to use growing arrays for vertices. This
	      does not change memory footprint and gives better readable
	      code (and maybe a little less binary size).
	    - Simplified polygon template class a lot by moving most state
	      variable into a csFlags variable. Added support for COLORS()
	      keyword in polygon templates. GOURAUD keyword is now obsolete
	      in both normal polygons and polygon templates; use
	      TEXTURING (GOURAUD) instead. This gains us a little memory.
	    - In addition to TEXNR() everywhere it appears MATTERIAL is
	      accepted as a synonym; one day TEXNR should die.
	    - Some fixes for DJGPP. Will work with latest binutils and
	      djgpp (binutils 2.9.5 and gcc 2.95.2). Latest binutils seems
	      to spit on __attribute__((constructor)), thus I have used a
	      C++ class for startup initialization of loadlib.cpp. The
	      keyboard doesn't respond now though... dunno, maybe its
	      related to my (weird) system configuration.
	- Norman Kramer updated the win32gcc.txi documentation to make it
	  a little clearer.
	- The big change from Andrew triggered a strange behaviour in
	  the dynamic linker (dlopen) on Unix. Andrew renamed csMaterialMM
	  in the texture manager to csMaterialHandle. However csMaterialHandle
	  is already another class in the engine. When loading the software
	  renderer dynamically it will use the already loaded csMaterialHandle
	  in the application which is wrong. I fixed this by renaming
	  csMaterialHandle in the engine to csMaterialWrapper. Not only does
	  this solve the problem but it is actually also a better name.
	  I also renamed csTextureHandle to csTextureWrapper and replace
	  Get/Set MaterialHandle with Get/Set MaterialWrapper in various
	  places. No doubt you'll have to modify your applications for this.
	- Martin Geisse fixed a compiler warning under msvc5.
20-Aug-2000
	- Norman Kramer updated the install documentation for the win32gcc
	  target.
	- Wouter Wijngaards did the following:
	    - removed memory.h from csdef.h since it is not used anymore
	      (and memory.h is not in include).
	    - Added DrawTiled and DrawTiledShifted methods. These draw the
	      pixmap on a rectangle of the screen, tiling the pixmap. A
	      shift can be applied for animation, or to make several calls
	      align properly.
	    - Fixed uninstall of docs.
19-Aug-2000
	- Norman Kramer did the following:
	    - Added csutil to mdl2spr.mak, gfxtest.mak and t3d2cs.mak to
	      resolve link error with mingw.
	    - Added include statement to ptests3d.cpp to make it compileable
	      with mingw.
	    - Added libs to the makefiles to link with mingw.
	    - In the include statement of d3d_txtcache were 2 invisible
	      chars that prevented compiling with mingw they were
	      invisible in notepad but luckily wordpad showed them.
	- Martin Geisse updated the MSVC project files.
18-Aug-2000
	- Martin Geisse fixed the error output in the sound loading function
	  of csparser.
	- Wouter Wijngaards:
	    - Unix system now checks $CRYSTAL or defaults to
	      /usr/local/crystal/ dir. Thus you can create .rpms, or .tgzs
	      that are easy to install, by installing to /usr/local/crystal.
	    - Fixed various compiler errors and warnings.
	    - Fixing install a bit.
		a) make install now requires all files to be built. (all
		  except mazed build now)
		b) for unix, when /usr/local/crystal is not a valid install
		   (no vfs.cfg can be opened in it), the current dir is used.
		   Thus, people unaware of the install changes will be able
		   to run the binaries from CS/ as usual.
		c) DLERROR: warning is now only printed once, not while
		  searching, but only when finding fails. It is printed
		  for all platforms now.
		d) install now works correctly with the funky
		  tutorial/map2cs directory. (uninstall will not delete
		  the tutorial directory, as it contains no files)
	    - Added registry searching to find install path for win32. If
	      that fails the environment variable CRYSTAL is used. If that
	      fails too, the default C:\Program Files\Crystal\ is used.
	      I cannot compile this code, it is untested. Also, the registry
	      entry 'SOFTWARE\CrystalSpace', key 'installpath' is a guess for
	      a reasonable value.
	- Wouter fixed lib/ addition to be platform independent.
	- Norman Kramer made LibPath in findlib.cpp a pointer. Previously it
	  caused trouble with plugins binding CSSYS itself like the enginep
	  plugin (LibPath was created again but was zeroed out) (NOTE:
	  its not destructed - os has to take care of it).
	- Norman fixed a bug in software sound renderer:
	    Sources vector was initialzed with NULL which is intresting
	    since Sources is not a pointer :) Not that the compiler
	    complained about, but at some point programs using the
	    soundrenderer segfaulted.
	- Accidently left on PVS building. I wonder why nobody complained
	  about dmburg needing several hours to start up :-)
	- Fixed BMP loader so that it doesn't enable ALPHA anymore.
	- Removed the particle list that was still in csSector. This is
	  not needed as particles are in the 'sprites' list.
	- Added new csWorld::GetNearbySectors() which returns an iterator
	  to iterate over all sectors near some position and a radius. This
	  function takes space warping portals into account.
	- Added csWorld::GetNearbyObjects() which returns an iterator
	  to iterate over all nearby objects. You can specify the type
	  of object to iterate over. It supports sectors, sprites, things,
	  lights, ... Currently this function does returns all things
	  and sprites that are in reachable sectors. It needs to do
	  distance calculation there too.
	- Changed WalkTest collision detection to use the new iterator
	  to find nearby sectors. This is better because:
	    - Easier to read like this.
	    - Correct: the old version only looked at adjacent polygons
	      and not further.
	    - Takes space warping portals into account.
17-Aug-2000
	- Martin Geisse fixed a bug in csloader related to sound.
	- Martin also added the cssysdef.h include to getopt.cpp.
	- Martin changed appvsh.dsp to binary in CVS.
	- Martin cleaned up software sound a bit.
	- Norman Kramer added a /lib/csws entry to a zip containing csws
	  textures in power of 2 sizes (almost all - not the toolbar tho).
	- Did some cleanup on terrain.cpp and also started support
	  for directional lights. i.e. a directional light is a light
	  with no position (only a direction) and infinite radius.
	  This will be one way to (dynamically) light the terrain.
	  In the future we will also add real lightmapping support
	  (which will allow shadows for buildings and objects on the
	  landscape). This directional lighting is not working yet.
	- Made the perfstat plugin optional for walktest.
	- Some fixes to csphyzik from Michael Ewert.
	- Increased far clipping plane in csTerrain::SetDetail() and
	  decreased near clipping plane.
	- Wyatt Miler updated the Mac project files and fixed a compile
	  bug in dtsimple.
	- Wouter Wijngaards:
	    In addition to adding the install_dir to the shared library
	    search path, now also the install_dir/lib/ is added to the
	    shared library search path. So that files in that dir may
	    also be found.
	- Wouter also changed install so that it will install html docs
	  as well.
	- Martin Geisse updated the MSVC project files.
16-Aug-2000
	- Norman Kamer fixed scfreg.mak.
	- Alex Pfaffe fixed a bug in the terrain engine where it would
	  underestimate the size of the vertex buffer.
	- Martin Geisse patched the ds3d sound renderer so that it works
	  again and cleaned up the software sound renderer.
	- Martin fixed a bug in his last update to the MSVC project files.
	- Andrew Zabolotny did the following:
	    - Changed InferInstallPathOf() into GetInstallPath(). Unlike
	      before, the memory is not allocated inside the routine;
	      instead you pass a pointer to a buffer and the size of the
	      buffer; this solves the problem on platforms with different
	      heaps in different modules.
	    - Latest changes created the dependency SCF -> cssys which is
	      bad.  I have fixed that by adding an additional method called
	      scfAddLibraryPath which should be used to set the directory
	      where SCF should look for shared libraries. The effect of
	      scfAddLibraryPath is incremental, that is, you may call it as
	      many times as you wish; all these directories will be searched
	      by scfLoadLibrary () to find shared libraries, in the order
	      they were passed to scfAddLibraryPath ().
	      The initial contents of this list is system-dependent, but
	      as a general rule of thumb they will prefer the current
	      directory first. This is so that any local installation of
	      CS will override the global one.
	- Andrew Zabolotny changed the way csLoadLibrary works. Now it
	  accepts a full file name. There is a new routine called
	  csFindLoadLibrary which does exactly the same like csLoadLibrary
	  before.
	- Alex Pfaffe fixed texture coordinate generation in the terrain
	  engine. This makes the terrain look MUCH nicer.
	- Worked around a compiler bug in Solaris/gcc 2.7.2 with collision
	  detection and terrain engine.
	- Wouter Wijngaards fixed a 'make solaris' bug with detection
	  of XFree86.
	- Wouter moved a lot of include files to the 'include' directory.
	  This is to make sure that 'make install' only needs to copy
	  the include directory.
	- Wouter removed the reference to the watcom port since that port
	  has gone away.
	- Wouter moved imetabal.h to the include dir.
	- Wyatt Miler fixed a compile error in csSystemDriver header.
15-Aug-2000
	- Norman Kramer removed cstools.
	- Paul Garceau added -fvtable-thunks to cygwin.mak.
14-Aug-2000
	- Norman Kramer added sound NULL driver entry.
	- Norman also made soundloader load on startup.
	- Norman added section [Driver] to sound.cfg to override the
	  default sounddriver that is selected.
	- Norman made DiscardBuffer in isnddata.h pure virtual. Otherwise
	  sndloader could not be loaded (linker thinks its a real class
	  otherwise and demands a nonexistant constructor).
	- Norman added sound entries to mk/user.mak.
	- Norman added missing isndrdr.h include to OSS driver.
	- Norman added soundloader makefile. Corrected SCF stuff, and
	  made Data member in soundwav an unsigned char (in the sound
	  loaders).
	- Norman added csgeom to sndsoft.mak makefile and removed all
	  warnings about float to something conversion.
        - Norman added overriding of system default sounddriver by the
	  entry in [Driver] in /config/sound.cfg and made the SoundData
	  object the parent of soundsource object at creation, thus you
	  can decref your sounddata object after creation of soundsource
	  if you dont need it around nowhere else.
	- Moved call to GetElapsedTime in walktest after the call
	  to SysSystemDriver::NextFrame(). Otherwise the current time
	  would not be valid the first time.
	- Fixed aspect ratio for terrain engine.
	- Initialization of terrain engine uses correct display dimensions.
	- Increased far clipping plane of terrain engine to prevent
	  far away terrain polygons from disappearing too soon.
	- Decreased near clipping plane of terrain engine. This doesn't
	  completely fix near triangle disappearing though.
	- Added csPolygonSet::HardTransform(). With this function you can
	  do a hard transform of the object space coordinates of a thing
	  or sector. This function will also transform the object and
	  world space planes of all polygons in the thing or sector.
	  The easiest way to think about HardTransform is that it does
	  an ObjectToWorld transform and then freezes the resulting world
	  space coordinates so that they become the new object space
	  coordinates.
	- Added csPolyTxtPlane, csPortal, and csPolygon3D::HardTransform()
  	  to do the hard transform of the polygon plane, lightmap info, and
	  portal plane.
	- Added support for new HARDMOVE keyword in loader. This is similar
	  to MOVE that was already supported for THING but it does a hard
	  move instead.
	- Added support for FILLONLY zbuffer mode in OpenGL renderer
	  (for DrawPolygon).
	- With the above changes the terrain engine and indoor engine are
	  now better integrated. It is now possible to add sprites and
	  buildings (things) to a sector with terrain. There is no visibility
	  culling done yet so this is still one thing that remains to be done.
	  The terrain also isn't lit yet so you'll get no shadows from the
	  objects that are on it. Other than that and a few small bugs in
	  the rendering of the terrain itself it works reasonably well.
	- Implemented support for fog in terrain engine.
13-Aug-2000
	- Martin Geisse committed a big redesign to the sound system.
	- Fixed a big memory leak in dynamic objects in polygon trees
	  (i.e. sprites in a STATBSP level). Whenever a sprite moved
	  it would add six polygons to the bounding box. This ever growing
	  bounding box would eat up memory and cause enourmous slowdowns
	  for moving sprites in the end.
12-Aug-2000
	- Martin Geisse added some missing error output in WalkTest.
	- Martin also added a missing dependency entry in the MSVC
	  workspace file.
	- Martin fixed a compile-time error in the perfstat plugin.
	- Thomas Hieber removed some warnings in the perfstat plugin.
	- Wouter Wijngaards did the following:
	  Make install now works on Linux, set CRYSTAL to the installdir,
	  including a trailing /. For this I made some changes. engine: now
	  installs vfs.cfg and scf.cfg into TO_INSTALL.ROOT in vfs.cfg  @ is
	  the install dir, with /. Thus $@data/standard.zip.  isystem has
	  an added InferInstallLocationOf(file), used during startup. This
	  has an implementation in csSysDriver, that looks at $CRYSTAL or
	  returns "" (current dir). It can be overridden for other platforms,
	  i.e. for win32 it could look in the registry first, or default to
	  something smarter (like /usr/local/crystal, or
	  C:\Program Files\Crystal). csLoadLibrary has an added const char*
	  installpath, containing installation directory (probably).
	  The 'make install' target now reports the environment setting to
	  set. I also changed the loadlib.cpp files, for unix it is used
	  now, looking in <installpath>lib/ for .so files. The other
	  platforms have it as an unused variable for now. Perhaps they
	  wish to use it? if possible.
	- Norman added "" as installpath, so for scfreg you have to give either
	  the full path to the shared libs or the current is taken as
	  default.
	- Fixed a big memory leak and slow-down with sprites in a STATBSP
	  level. Everytime the sprite moves the old position was not removed
	  from the octree/BSP tree. There is still a memory leak remaining
	  though.
	- Thomas Hieber adjusted some Win32 files for the new install
	  system. Thomas also fixed a few compilation errors.
	- Thomas also removed a few warnings in cscon, perfstat, and
	  opengl canvas.
	- Martin Geisse fixed a bug in the MSVC workspace file.
11-Aug-2000
	- Andrew Zabolotny removed console_open and console_close from all
	  ports. Every system driver has lots of opportunities for
	  initializing/shutting down its printf system, so there is no need
	  in these. The console in Win32 port is driven by the cryst.cfg
	  file as well as the command line. You may use the -[no]console
	  switch to turn on/off the debug console, and you may set the
	  DebugConsole=yes|no option in the [Microsoft Windows] section
	  of the respective .cfg file.
	- Andrew also added zlib/libpng/libjpeg to linkage command.
	- Andrew fixed one msvc-specific error (for (int i = ...)) and
	  removed a few msvc warnings.
	- Andrew also added dxguid library to dx6 driver linkage command.
	- Andrew fixed a small work-around so that Matrix Millenium II
	  AGP will work with the Direct3D driver (45 fps but no lighting).
	- Added 'const' to matrix paramter for csSprite3D::Transform().
10-Aug-2000
	- Added new GetEdges() function to csPolygonEdges which returns
	  an iterator to iterate over all edges in the structure.
	- Fixed a bug in the PVS routine to combine adjacent polygons.
	- Completely rewrote csPoly2D::ExtendConvex() to make it more
	  mathematically robust and faster.
	- Michael Dale Long did more fixes on cctest. Can quit and fire
	  rockets again. Still no console.
	- Martin Geisse fixed a few compile time errors.
9-Aug-2000
	- Mike Bond:
	    The cd command in bash for RedHat 7.0 outputs directory after
	    change if CDPATH is set, changed script to ignore this.
	- Norman Kramer removed cstools.
	- Norman corrected the path to the opengl 2d driver for windows
	  and added some comments (win32gcc.mak).
	- Norman edited glwin32.mak so that either -lGL or the libs in
	  OPENGL.LIBS.DEFINED are linked. Also added CDS_* defines, they
	  were undefined when compiling for win32gcc.
	- Norman reversed the time_t handling for file timestamps. The
	  cs_time way does not compile on linux and im not sure if its
	  safe here to cast cs_time to time_t. But since the computed
	  time_t values are local here and not propagated to the outside
	  its ok to leave it as time_t.
	- Andrew Zabolotny writes:
	    A lot of files have been changed but the change is trivial.
	    As it turned, there are platforms where "time_t" is signed and
	    there are platforms where "time_t" is unsigned. This was causing
	    movement to not work sometimes in walktest, for example. Also
	    this is a potential source of problems in future.
	    Because of that, I have added a new type in csdefs.h: cs_time
	    which is basically an unsigned long. Then I have replaced
	    time_t everywhere with cs_time. Don't use time_t anymore;
	    use cs_time instead.
	- Fixed solaris.mak after Andrew broke it for me.
	- Fixed bug in csPolygonEdges. The iterator was not correctly
	  initialized.
	- Fixed bug in csPoly2D::ExtendConvex().
	- Fixed bug in PVS with regards to combining adjacent polygons
	  for shadow casting.
	- Samuel Humphreys did the following:
	    - Updated walktest documentation for new perfstat related console
	      commands.
	    - Fixed the proc textures after I broke it with the
	      delete [] Scan.GlobalCMap :)
	    - Removed some unnecessary if tests from sft3dcom.cpp.
	- Andrew Zabolotny put back cscmdPostProcess which was removed
	  by Samuel. Andrew also fixed perftest so that it doesn't suffer
	  from garbage caused by Pre and PostProcess events.
8-Aug-2000
	- At last! Fixed one of two big bugs that prevented PVS from working
	  correctly.
	- Changed number of edges in csPolygonEdges class to a prime to make
	  more efficient use of the hashmap.
	- Fixed a small memory leak in csPolygonEdges.
	- Fixed a big memory leak in csHashMap and csHashSet!
	- Michael Dale Long did some fixes for CrystalClear after the recent
	  set of big patches. Not everything works yet, notable the console
	  and quit key do not work.
	- Wouter Wijngaards committed a patch from illume (Rene Dudfield)
	  adding cmds for setting sprite actions to walk console.
	- Wouter Wijngaards changed csSprite3D::SetAction to return a bool
	  on success.
	- Thomas Hieber made WalkTest compilable again.
	- Thomas Hieber removed the 'app' prefix from the executable names
	  for the Windows apps.
	- Thomas added perfstat plugin to the VC project files and did
	  various other updates to the project files.
	- Norman Kramer added missing libs/cssys/general/getopt.cpp to
	  linux.mak.
	- Norman fixed a crash that occured if one press PGUP too often
	  in the console.
	- Norman did an optimization in the OpenGL renderer. He saved
	  a multiplication in fog calculation.
	- Paul Garceau did the following:
	    Maintenance Update (Cleanup)
	    - removed hard library links (-Llibs/zlib, etc.) from Mingw.mak
	      libpng.a, libjpeg.a and z.a now are only available from
	      compilers' include directory.
	    - Updated system dependent source file variables to accomodate
	      AndyZs changes.
	    - exeentry.cpp, as of this update, is once again enabled for both
	      static library and dynamic library builds.  Before this update,
	      only the dynamic library build (USE_SHARED_PLUGINS=yes)
	      was allowed to invoke exeentry.cpp.
7-Aug-2000
	- Samuel Humphreys removed the delete [] Scan.GlobalCMap from
	  PrepareTextures. It must have been some debugging junk I'd left
	  in. Sorry Andy :) (it was also deleted in the destructor as
	  originally intended).
	- Fixed linking bugs with engine plugin. Also added the install
	  targets to enginep.mak.
	- Added WalkTest::DrawFrameDebug3D() to have a routine that contains
	  all debugging stuff that is rendered in 3D.
	- Added support for debug boxes in walktest. This is going to be
	  used for debugging PVS.
	- Added csBox2::SetCenter and csBox3::SetCenter to set the center
	  point of a box without changing size.
	- Added csBox2::SetSize and csBox3::SetSize to set the size of a box
	  without changing the center.
	- Added db_boxshow, db_boxcam1, db_boxcam2, db_boxsize1, and
	  db_boxsize2 console commands to control the visibility, location,
	  and size of the boxes.
	- Added db_boxvis command to test the visibility between the two
	  debug boxes in an octree. This visibility test basicly corresponds
	  to the routine that is used for calculating the PVS and as such
	  is useful for debugging the PVS.
	- Added db_boxnode1 and db_boxnode2 console commands to set the size
	  of the respective debug boxes to the size of the current octree
	  leaf.
	- Added public csOctree::BoxCanSeeBox() to test if one box can see
	  the other box.
	- Extended db_curleaf command to give more information about the
	  current leaf.
	- Wouter Wijngaards added wscs3d.cfg to installed set of files.
	- Wouter Wijngaards fixed an internal compiler error for solaris
	  by permutating the code a little (polyset).
	- Andrew Zabolotny did the following changes:
	    - Enhancements to win32gcc.mak. In fact, win32gcc is a fully
	      working port with same features found in other programming
	      environments:
		- dynamic libraries are supported
		- DirectDraw canvas
		- DirectDraw 6.1 canvas
		- Software renderer
		- Direct3D renderer
	      I have not tried other Windows canvases (e.g. glide and
	      OpenGL) but I think they will work as well, with minimum
	      changes required.
	    - Fixed makedep to not generate readonly files when they are
	      missing. This is sometimes caused by uninitialized garbage
	      in st_mode member of `struct stat'.
	    - I have renamed libs/cssys/win32/printf.cpp into
	      win32printf.cpp because it conflicts with
	      libs/cssys/general/printf.cpp.
	    - Moved WinMain() from win32.cpp back to exeentry.cpp. The
	      reason why this is needed (Thomas, hear me!) is that some
	      programs need just the WinMain() routine and don't need the
	      SysSystemDriver (which is in win32.cpp). For example scfreg,
	      makedep, gfxtest and other console programs don't use the
	      SysSystemDriver, thus they don't need to be linked against
	      DirectInput, DirectDraw, GUI libs and so on. They just become
	      a lot smaller. This is also the case with DLLs - for some
	      reason DLLs made with MinGW32 needs the WinMain function,
	      thus every plugin gets the full load of routines in win32.cpp
	      (just because WinMain was there).
	    - Enhanced ddraw driver a lot (the one for software render).
	    - Setting mouse cursor now works (persistent)
	    - Moving window does not cause the image to stay at old position.
	    - Moving other window on top of CS window does does not leave
	      ugly traces (e.g. non-refreshed portions of window).
	    - The region argument passed to ::Print() is handled properly.
	    - The window now has a titlebar and even a minimize button.
	    - Alt+Enter now toggles fullscreen/windowed mode.
	    - The contents of backbuffer are preserved during fullscreen/
	      windowed mode toggle.
	    - Fixed the double buffering. In windowed mode only
	      single-buffering is allowed, in fullscreen both
	      double-buffering (page flipping) and single-buffering
	      (blitting from backbuffer) works. CSWS works a lot faster
	      in single-buffering mode.
	      Hmm, strange. Just tried and found that even walktest works
	      A LOT faster with single-buffering. With page flipping it gives
	      about 20fps, when blitting from system memory it runs at
	      31fps (!!!) I will set double buffering to disabled by
	      default...
	      I have encountered a bug on Windows NT SP3 (with a Matrox
	      Mystique videocard, don't know if this matters) - if you
	      request an 16bpp videomode in fullscreen, you will really
	      get just an 15bpp mode. This leads to strange colors if you
	      started the program in windowed 16bpp mode and then switch
	      with Alt+Enter to fullscreen or vice versa. On Windows98
	      this does not happen.
	    - Applied same enhancements to DX61 driver. Tested only with
	      software renderer though, I hope it will work with D3D
	      renderer as well...
	    - Enhancements to Windows system driver:
	        - SetMouseCursor() is implemented now in system driver.
	          From canvas driver you have to call:
			System->SystemExtension ("SetMouseCursor", CursorID);
	        - When mouse is pressed inside CS window, the pointer is
		  captured.  Thus even when you move the cursor outside
		  window the mouse position is continuously tracked. The
		  mouse coordinates are send to system driver as signed
		  values (they were unsigned).
	        - DirectInput keyboard handling is not needed anymore. I
		  have implemented perfect keyboard handling through normal
		  Windows window messages. You can use DirectInput if you
		  like buzzwords, but it won't give you absolutely
		  anything. In fact, DirectInput handling is worse because
		  it does not support national characters right now, and
		  WM_CHAR supports it.
	          In general, CSWS/MazeD works perfectly now with
	    - Fixed history in simple console. It used to crash sometimes
	      due to an uninitialized variable.
	    - Fixed the Direct3D renderer. Well, my Matrox Mystique lacks
	      alpha blending so I can't see if lightmaps really works,
	      but without them it works.
	    - Moved getopt.c && getopt1.c into cssys/general. Also I have
	      unified these two files into one C++ files. Thus we have
	      no plain C anymore anywhere.
	- Norman Kramer fixed Shooter and csgame (for material and CD mostly)
	  so that it compiles and runs. But there are a few undecrefed
	  plugins at exit.
	- Norman changed lib sequence in csstdldr.mak to please the
	  linux linker.
	- Thomas Hieber fixed CS_ASSERT and made sure that CS_DEBUG
	  is defined when building in debug mode (for Windows).
	- Thomas Hieber did some other various updates to get the windows
	  port working again.
6-Aug-2000
	- Samuel Humphreys did the following:
           - Added a new plugin called perfstat, and updated walktest so
	     that it could 'benefit' from its functionality. Perfstat is
	     basically a nested statistics gatherer which can print out
	     formatted results to a file. It also prints out system info
	     as the header. This is meant to be a tool mostly to test the
             drivers. The nested bit means it will also gather
	     seperate statistics for a configurable 'subsection' of the
             main section it is gathering statistics for.
	     Walktest has a max of three nested perfstats with the
             recsubperf command (see below).
           - Changes to walktest:
  	    - Perfstat now takes care of fps calculations according
              to user specifiable resolution. Defaults to 10 frames per
	      update.
            - The demo playing and recording now pauses when you switch
	      to console
            - Suitable commands are now recorded too, like fire missile,
	      addskel addlight etc. A couple of macros are defined in
	      walkcmd.cpp as a convenience.
	    - Modified commands:
	       loadrec <file> can take an optional name argument to specify a
	               <file>.rec to use as its demo file, otherwise it
		       defaults to 'record' as before.
	        saverec <file> can take an optional name argument to specify
                       a <file>.rec to save to.
	        play   has optional arguments, otherwise works as before.
	        play <file> This outputs summary statistics for the demo
                       played to <file>.rps (Recorded Performance Statistics).
	        play res, x, <file> The 'res'(olution) option tells perfstat
		        to record statistics every 'x' frames and output
                        to <file>.rps
	        play break, x  The break option when compiled in debug mode
                        will trip off a signal trap on the 'x'th frame.
                        Useful once you take note of the frame number of
                        something interesting in a <file>.rps
            - New command:
	        recsubperf <name> Once a recording has begun this command
                        is used to record the statistics of a subsection
                        of the demo and is reported as such in the outputted
                        <file>.rps when played back. To finish the subsection
                        call the command again without an argument.
			Stands for 'rec(ord)sub(section)perf(ormance)'
	- Jorrit committed the engine plugin which he forgot to do
	  some time ago. Now simplep should really work.
	- Wouter Wijngaards did the following changes:
	    - Make install, and make uninstall for Linux/unices should
	      work, i.e. copy files and delete files. The install is not
	      used yet. Also an extremely portable app 'uninst' is added,
	      that will uninstall. It will also delete empty directories
	      that held files.
	      install.mak will install files in several places. In each
	      apps/libs/plugins.mak file you can add files for
	      installation. I have already modified all makefiles
	      correspondingly (for all apps, libs, plugins).
	      Places you can add for installation:
		TO_INSTALL.ROOT : files will be added in the
				$(INSTALL_DIR)/ dir itself.
		TO_INSTALL.EXE  : files will be put in bin/
		TO_INSTALL.DATA : files will be put in data/
		TO_INSTALL.CONFIG: files will be put in data/config/
		TO_INSTALL.STATIC_LIBS: files will be put in lib/
		TO_INSTALL.DYNAMIC_LIBS: files could be put in lib/, but
				could also end up in a platform specific
				location (e.g. System folder).
	      TO_INSTALL.INCLUDE does not exist, the entire include/
	      hierarchy is copied to include/. (max 3 levels deep now)
	      The INSTALL_DIR is autodetected at 'make <platform>' time,
	      and saved in config.mak. (It can be overridden, e.g. by make
	      linux INSTALL_DIR=/usr/crystal) also it can be overridden
	      when make install is called (or make uninstall)
	- Norman Kramer fixed metademo so that it works again.
	- Norman fixed the ndrvdemo and nstp applications.
	- Norman fixed perftest.
	- Norman fixed phyztest.
	- Norman fixed simplep.
	- Norman fixed wscs3d.
	- Norman fixed OpenGL renderer:
	    - m_textured was used uninitialized in meshdrawing.
	    - made some minor optimizations to meshdrawing.
5-Aug-2000
	- Wouter Wijngaards did the following:
	  - install safer for people that do not update config.mak.
	  - Beginnings of a make install option. Xfree86 (fullscreen
	    extension) is detected now for unix.
	- Samuel Humphreys did the following:
	  - system.cpp: two Nothing events were emitted each frame, now
	    only one.
	  - light.cpp : an unitialised data member, caused walktest to
	    crash with 'dellights'.
	- Norman Kramer disabled deleting of the csTextureHandle in
	  csMaterial since this is done when the csTextureList is deleted
	  (and crashed when MaterialList was deleted thereafter).
	- Norman also added DecRef of VFS in destructor of csapp.
	- Norman removed G3D from funcon since it is now in cscon.
	- Norman also added IncRef to G2D in cscon, so it wont crash when
	  its decrefed.
	- Norman added x11-keys.cpp to the unxglide canvas makefiles.
4-Aug-2000
	- Thomas Hieber further extended the new csgame CD system.
	  Still not functional at all. But given the current CVS status,
	  I guess I will stop working on it anyway. I think it makes
	  sense to wait for the release of 1.0 so these permanent API
	  changes will come to an end, or at least slow down a bit. I
	  guess I don't have enough time, to keep running after these
	  changes _and_ add new code.
	- Wouter Wijngaards fixed unix.cpp for usleep.
	- Alex Pfaffe fixed various things in the landscape engine
	  again. Now it is mostly working again except for a few small
	  strange bugs.
	- Continued work on the API for materials. Started replacing
	  all communication between csengine and g3d with iMaterialHandle
	  instead of iTextureHandle. This means that txt_handle in
	  G3DPolygonFX has been replaced with mat_handle for example.
	- Replaced SetTexture and SetTextureHandle everywhere with
	  SetMaterial and SetMaterialHandle. This is a huge change which
	  will no doubt break ALL apps using CS and textures.
	  Also replaced most iTextureHandle variables with iMaterialHandle
	  and most csTextureHandle's with csMaterialHandle.
	- Fixed the software renderer to use the new material API.
	- Fixed the OpenGL renderer to use the new material API.
	  (temporarily broke DrawPolygonMesh for procedural textures in
	  software mode. Will fix this later).
	- Fixed WalkTest to work with new materials.
	- Fixed Blocks to work with new materials.
	- Tried to fix funcon console but failed for now. Will look at
	  this later.
	- Fixed DrawPolygonMesh for procedural textures (OpenGL).
	- Fixed Squawk so that it compiles and runs.
	- Fixed wscs3d so that it compiles and runs.
	- Fixed simple so that it compiles and runs.
	- Fixed phyztest so that it compiles and runs.
	- Fixed cctest so that it compiles and runs.
	- Fixed line 3D renderer.
	- Fixed null 3D renderer.
	- Fixed infinite 3D renderer.
	- Fixed perftest so that it compiles and runs.
	- Fixed funcon plugin.
	- Fixed metaballs plugin.
	- Added iTextureManager::RegisterMaterial() which takes a texture
	  handle instead of an iMaterial. This is for conveniance to make
	  materials based on a single texture easily.
	- Andrew Zabolotny did a HUGE HUGE update to CVS. This will cause
	  big problems so stay away from CVS if you are not interested in
	  trying to fix this. Here is the chage list:
	    - Implemented a new low-level event system architecture. Most
	      programs won't notice any difference in top-level interface,
	      only low-level interaction has been changed a little.
	      Events are generated by iEventPlug objects. Any event plug
	      plugs into an iEventOutlet which is the "front door" into the
	      system driver event queue for the respective event source.
	      When you register an iEventPlug object with the system driver,
	      you get a pointer to the respective iEventOutlet.
	      The QueueXXXEvent() methods are gone from iSystem. Instead,
	      use the respective methods from iEventOutlet interface. Also
	      there is an default system outlet (the 'back door' :-) which
	      may be queried through GetSystemEventOutlet, use it if you
	      don't consider that your plugin is worth to have a
	      full-fledged connection with the system driver event queue.
	      Note that the new event system allows to write a new generic
	      "record/play" plugin which will, in record mode, record all
	      events that pass through the system queue, and on other hand,
	      emit all recorded events back into the system event queue.
	      Writing one is left as homework for the reader :-)
	    - New file: include/ievent.h. It defines the interface for any
	      plugin which desires to generate events into the system event
	      queue. Also it defines the interface for iEventOutlet
	      objects, which are provided by system driver.
	    - No more SetSystemDefaults routine in system-dependent drivers.
	      Any settings must be queried from the respective plugins.
	      For example if some canvas needs the "-shm/-noshm" option it
	      should query it itself rather than relying on iUnixSystem
	      driver to do it.
	      Also most system-dependent interfaces (such as iDosSystem,
	      iUnixSystem, iOS2System) are gone. I believe there is no
	      need anymore in a private interface, and if you need just
	      one-two additional system-dependent functions, you can
	      always implement them through the new SystemExtension
	      method of iSystem.
	    - Cleaned up the iSystem interface. Lots of methods are gone,
	      several new have been added.
	    - The canvas-dependent command-line options have been moved
	      to respective canvas drivers. The respective command-line
	      help have been moved there as well. From now on: if you
	      want to display any plugin-specific help, you should
	      implement HandleEvent and handle the cscmdCommandLineHelp
	      broadcast event. Upon reception of such an event you should
	      display something like:
		Options for X-Windows 2D graphics driver:
			-sdepth=<depth>    set simulated depth
			-shm/noshm         SHM extension (default 'shm')
			-[no]sysmouse      use/don't use system mouse
	    - Note that because all QueueXXXEvent methods are gone from
	      iSystem interface, some canvas drivers may not build. Here
	      is the list of canvas drivers that I have fixed, use any of
	      the drivers below for reference when fixing other canvas
	      plugins.
	      Fixed and tested:
		- CSDIVE canvas.
		- X-Windows 2D canvas
		- X-Windows Line2D canvas
		- OS/2 OpenGL canvas
		- MGL 2D canvas
		- AsciiArt canvas
	      Fixed but not tested:
		- csalleg (cross-platform Allegro) canvas
		- unixglide canvas
		- svgalib canvas
		- gl/x canvas
		- ggi driver
	      Not fixed at all:
		- BeOS drivers
		- Mac drivers
	      Sorry, couldn't understand how they work :-)
	      Some system drivers also can generate events. The
	      following drivers were converted and tested to use new
	      event architecture:
		- DOS/DJGPP
	      Converted but not tested:
		- MacOS
		- Win32
		- BeOS
	      Not converted (Objective C :-():
		- NeXT
	    - Implemented National Keyboard Support. Every event plug has
	      to provide two key codes - one is the "raw" keycode
	      (Event.Key.Code) and one is the "cooked" code
	      (Event.Code.Char). Old programs that use Event.Key.Code will
	      still work but they will get just low-case characters (e.g.
	      even Shift and/or Ctrl will be ignored). This also means
	      that hotkeys like "shift+!" won't work anymore (instead
	      use shift+1). I have fixed autoexec.cfg for this.
	      National Keyboard Support should already work with most
	      canvas drivers. I have tested it with X-Windows driver,
	      OS/2 DIVE driver, MGL driver. If some driver cannot provide
	      the "cooked" keycode (such as the DOS driver) it should
	      provide "-1" as the character code, and the system driver
	      will "cook" it itself.
	    - Fixed X-Windows drivers so that they handle correctly the
	      MappingNotify event. This enables support for languages
	      that need more than one keymap (e.g. Cyrillic and others,
	      maybe Japanese).
	    - Removed elapsed_time and current_time arguments from
	      NextFrame. Instead, I have added a new method called
	      GetElapsedTime (time_t&, time_t&) into the iSystem
	      interface. Call it if you really need the elapsed time.
	      You can call it any times per frame you need. The time is
	      updated only at the start of every frame. The NextFrame()
	      method has no arguments now.
	    - Redesigned the main application loop. The Loop method in
	      system driver is still there, but it is basically just an:
		while (!Shutdown) NextFrame();
	      If your application does not need the loop, feel free to
	      call NextFrame without arguments at appropiate times.
	      Fixed all applications in CVS to use the new NextFrame
	      prototype. However, for applications not in the repository
	      you will have to fix this yourself.
	    - Added the new -I or --info switch to gfxtest tool. Using
	      this switch you can easily see the cause of translucent
	      cubes in blocks: the respective png files (cubef3 and
	      cubef4) have an alpha channel.
	    - Added -a or --strip-alpha switch to same tool. Note that
	      the blocks data file in repository has NOT been fixed;
	      somebody still have to do it.
	    - Fixed dependency generation with makedep - instead of
	      $(OUT) prefix it used the expanded value of $(OUT) - thus
	      when switching compilation mode, it was needed to rebuild
	      dependencies. Not the case anymore.
	    - Added Z-none counterparts to ALL DrawPFX modes. In this
	      mode the Z-buffer is ignored at all, thus it is the fastest
	      mode. It can be used to display non-3D graphics with
	      DrawPFX, for example user interface elements and so
	      on (and even 3D graphics in depth sorted order).
	    - Added Z-none, Z-fill and Z-use modes to per-pixel alpha
	      routines. Now you can do:
		G3D->SetRenderState (G3DRENDERSTATE_ZBUFFERMODE,
			CS_ZBUF_ZUSE);
		G3D->DrawPolygonFX (...)
	      The CS_ZBUF_NONE routine has the lesser overhead, of course.
	    - Implemented Z-use and Z-fill modes for alpha-mapped walls
	      (DrawPolygon).
	    - Redesigned the iConsole interface. Basically I have tried
	      to simplify it as much as possible; having very
	      sophisticated interfaces does not make easy to write new
	      plugins. Removed the dumb iCursor interface. The cursor
	      should be provided by the console; if you don't like the
	      cursor, write your own console. Redesigned the
	      iConsoleInput interface.
	    - Reimplemented cstools/simpcons as a new plugin. cstools
	      library is now empty; don't know if it is really needed.
	    - Fixed walktest to use the new console plugin. It is not
	      tied anymore to csSimpleConsole private interface, thus
	      can use any console plugins you will write in future :-)
	      Also walktest will run now without a console at all.
	    - Fixed a very seldom happening bug in software 3D driver
	      that leads to crashes due to division overflow.
	    - When the palette changes in 256-color modes, the texture
	      manager will emmit an broadcast event so that all
	      interested plugins (including consoles) can intercept it
	      and query the appropiate drivers for new information.
	    - Fixed the cscon plugin. The "xstdin" plugin has been
	      removed (use the one in simpcon instead, it has absolutely
	      same functionality), the "console.output.standard" and
	      "console.output.funky" consoles works.  You can even enable
	      them in walktest application by uncommenting the
	      respective lines from cryst.cfg.
	    - Fixed an strange bug in software texture manager - in 8-bit
	      modes the Scan.GlobalCMap was deleted at the end of
	      PrepareTextures() although it is extensively used while the
	      program is running ...
	    - Fixed an very old bug in DrawPolygonFX() for software 8-bit
	      modes. DST was incorrectly missed the screen palette table,
	      thus all modes that involved DST (fixed-value alpha
	      transparency and blending) did not worked.
	    - Due to above event system redesign, Crystal Space Windowing
	      System has been redesigned a little as well. The csApp class
	      is now a plugin from system driver's point of view and
	      receives events absolutely same way like any other plugin.
	      Thus the look of the simplest CSWS application has been
	      changed a little. See cswstest for details.
	    - Crystal Space Windowing System does not implement its own
	      system driver anymore. Instead, the csApp class is an
	      "almost-normal" plugin now, except that it is created not
	      via SCF (but rather with `new'). Also CSWS works with the
	      system driver completely through the iSystem interface;
	      this means CSWS and system driver don't have to be in
	      the same module anymore.
	    - Fixed MazeD so that it works with the new CSWS architecture.
	      No other enhancements though :-(
	- Fixed a bug in walktest related to the patch above.
	- Samuel Humphreys fixed dtsimple after the big Andrew/Jorrit
	  changes.
	- Norman Kramer fixed commandline processing after Andrew broke
	  it again...
	- Norman fixed glide renderer after Jorrit's changes. Code is
	  untested though.
     	- Norman fixed OpenGL:
	    - added missing PerformExtension () dummies
            - replaced QueueContextCloseEvent with the new EventOutlet method
3-Aug-2000
	- Norman Kramer added clipping code to openglcommon canvas code,
	  especially to font drawing.
	- Norman also added missing GetFlags() method for glide renderer.
	- Thomas Hieber made ndrvdemo compileable again on MSVC.
	- Thomas also fixed prototype of ResetCollisionPairs() in
	  iCollideSystem.
	- Thomas worked a bit on creating a new CD system in csgame.
	  csgame is currently broken though.
	- Thomas split csVector in csBasicVector and csVector to have au
	  more lightweight baseclass, that can be used, where csVector
	  is to big. (memory footprint)
	  To make it smaller, csBasicVector has no virtual methods and
	  defaults to create an empty array. (csBasicVector will be used
	  in the new csgame CD system in very large numbers - up to
	  100000 instaces will not be impossible!)
	- Samuel Humphreys did the following:
	    - Rearranged perftest for 2d testing aswell. Added tests for
	      pixmaps, lines, pixels and text.
	- Alex Pfaffe commited a few fixes to terrain engine (still not
	  working properly though).
	- Renamed csPluginCollider to csCollider. This class is a conveniance
	  class that csengine users can use to attach iCollider's to
	  engine objects (or game objects). Usage of this class is optional
	  and the engine will never use it itself.
	- Fixed WalkTest so that it REALLY compiles now.
	- Added debug info to libs/csengine/terrain.cpp for Alex Pfaffe.
	- Tried to fix csgame library with regards to the new collision
	  detection system but I didn't manage to fix all. Particularly
	  in libs/csgame/gcollide.cpp there are a few things that I
	  didn't manage to fix. I hope Thomas Hieber can look at this.
	- Fixed csclear library and cctest app with new collision detection
	  system. It compiles and runs now but collision detection seems a
	  bit broken. Not sure why.
	- Fixed phyztest due to the latest collision detection changes.
	- Wouter, Samuel and Jorrit experimented a bit with some problems
	  with 'usleep' in unix.cpp.
	- Added iMaterial and iMaterialHandle. Extended iTextureManager
	  to have the ability to register materials. Provided a default
	  implementation for this for the 3D renderers. Nothing related
	  to materials really works right now. These are only stubs to
	  make a future implementation easier.
	- Let csMaterial implement iMaterial. Added csMaterialHandle
	  which represents the connection between csMaterial (or iMaterial)
	  and iMaterialHandle. Added csMaterialList which is a list of
	  loaded materials.
	- Added list of loaded materials to csWorld.
	- Added support for materials to csparser. Stubs only.
	  New MATERIALS keyword similar to TEXTURES.
2-Aug-2000
	- Martin Geisse added 2d animations and aligned pixmaps.
	- Norman Kramer fixed funcon plugin so that use_fog=false for DPFX.
	- Norman also fixed the glx2d canvas because color shift values
	  were not computed.
	- Norman did the following change to OpenGL renderer: after Open the
	  pixelformat is requested from the G2D (since they are calculated
	  there after window open only).
	- Changed API in iCollideSystem to make it easier to collect
	  collisions with multiple objects.
	- Added csPolygonSet::GetRadius() which will return the radius
	  in object space. Also added csSprite3D::GetRadius().
	- Converted WalkTest to use the new collision detection plugin.
	  Seems to work ok.
	- Fixed a bug in the iPolygonMesh embedded in csPolygonSet which
	  caused a wrong number of polygons to be returned to iCollideSystem.
	- Removed rapid implementation from csengine now that the plugin
	  is working. This might break several other things though. Especially
	  your own apps if you used CD. I think csgame is broken too. Will
	  fix later.
	- Michael Ewert send in a patch to make sure that phyztest
	  compiles again. Still doesn't work completely correctly though.
	- Removed several warnings.
	- Samuel Humphreys did the following:
	    - Fixed another command line processing bug.
     	    - Added emacs fontification friendly comments to some more .inc
	      files.
            - Added further options to dtsimple (bots, lights,
	      portals--on/off).
            - Print (csRect*) now prints subregions with the software proc
              textures in 16bit/32bit sharing modes
            - Rearranged software procs implementation somewhat so that
	      mip-mapping flags are accessible in the right places. This
	      has also simplified the code somewhat.
            - Got rid of the proc texture enum data type in iGraphics2D.
            - iGraphics2D->CreateOffScreenCanvas arguments changed slightly.
            - Reduced verbosity of proc texture MSG_STDOUTs
            - Cleaned out x2d of commented out code
            - isprotex.h interface changed slightly (internal to proc
	      textures).
	- Wouter Wijngaards committed a patch to mdl2spr by Luca Pancallo:
	  a commandline option that limits the number of frames exported.
	  Also a bugfix.
	- Alex Pfaffe updated the terrain engine to remove an obsolete
	  clipbox variable, fixed plane normalization and did some
	  optimizations.
1-Aug-2000
	- Norman Kramer fixed a crash scenario in OpenGL renderer: sprite is
	  textured and has FX_ALPHA set but no vertex colors -> boom, now it
	  uses flatcolor (1.0) + m_alpha.
	- Samuel Humphreys did the following:
            - Hand merged relevant parts of Mike Bonds patch into the
              glx2d/x2d/linex2d drivers.  Bar the resizing and change of
              variable names the rest of it had been already fixed last
              weekend.
            - Resizing still crashed after patch with x2d.  I have partly
              fixed this, dtsimple doesnt crash out but gets weird zbuffery
              like artifacts, but walktest does...investigating :)
            - Walkest now responds to resizing events, so doesnt crash out
              anymore on resizing.
	- Fixed bug in embedded iPolygonMesh in csSprite3D.
	- Fixed a bug in the rapid CD plugin.
	- Fixed bug in WalkTest so that walking through CD enabled portals
	  would not work if the level had only one sector.
	- Fixed bug in csengine with portals and c-buffer (or other culler).
	  Portals and mirrors and other space warping portals in general
	  should now work perfectly in combination with STATBSP levels.
	  Provided you correctly use the CLIP and ZFILL keywords where
	  needed.
31-Jul-2000
	- Fixed a number of remaining black border problems with lighting.
	  These were especially visible in the mazedex level but could
	  occur everywhere.
	- Wouter Wijngaards updated lighting.txi document with some info
	  about the radiosity options.
	- Removed several old-fashioned and obsolete flags which were
	  (in the past) used to control lighting. i.e. I removed all the
	  settings related to 'Shadows....' in the Lighting section.
	- Changed ambient setting from 40 to 20 as I personally think
	  that 40 is too high.
	- Updated the documentation to reflect the above changes to
	  the settings.
	- Updated various other things in the documentation.
	- Alex Pfaffe did an update to the terrain engine to improve
	  visible popping.
	- Added CS_POLY_COLLDET flag to polygons with which you can
	  enable and disable collision detection for a single polygon.
	  By default collision detection is enabled for polygon, disabled
	  for portals, and enabled again for mirrors (so other space warping
	  portals have no CD by default).
	- Also added this flag to the polygon templates used in thing
	  templates.
30-Jul-2000
	- Samuel Humphreys did the following:
            - Little re-organisation of dtsimple, improved comments
            - Updated comments in dtsimp.cfg
            - Added ability to create csTextureHandles from preprepared
              iTextureHandles (in preparation for something new).
            - Updated comments in csengine.cpp with regards multi-context
	      support.
            - Added a conditional to the delete [] Scan.GlobalCMap to prevent
              destruction if this resource is shared in the software renderer
              texture manager.
	    - Added a new function to the software texture cache which removes
              all cached_textures dependent on a texture handle
            - Commented out last reference to proc textures within
	      soft3dcom.cpp as now protex3d.cpp takes care of uncaching and
	      only when the proc texture is updated. Dtsimple suffers slight
	      performance degradation, ..perhaps add another proc_texture flag
              i.e. CS_TEXTURE_PROC_UNCACHE_ALWAYS.. or would this be an
	      unwanted complication? An app which utilises and benefits from
	      this is forthcoming.
            - Fixed minor bug in system.cpp which broke command line argument
              processing
            - Added accessor to iTextureHandle to be able to retrieve which
	      flags have been set.
	    - I believe this propagates the changes made to x2d.cpp to
	      glx2d.cpp which allows exit without pipe broken error (it
	      works for me :).
	    - Propagated Normans changes to regain the title on GLX windows.
            - Fixed the multi-context support in the engine which broke after
	      the recent changes to the engine.
            - Added the emission of cscmdContextClose events from the GL and
              software proc textures.
	    - Fixed the GL proc texture bug which created new proc textures
	      each time PrepareTextures was called.
            - dtsimple now responds to contextClose events, and exits without
	      crashing.
	- Norman Kramer fixed the glide canvases so that they work after
	  Andrew's changes yesterday.
28-Jul-2000
	- Norman Kramer fixes the x2d canvas so that the title is set
	  to the right window.
	- Added csPoly3D::ComputeNormal() and ComputePlane() as static
	  functions with the polygon given as a parameter.
	- Fixed a big bug in the lighting routines which could cause
	  some polygons not to be reached by a light even though they
	  should have been affected. Turned out the distance between the
	  light and the polygon was not computed right.
	- Fixed another severe bug in CheckFrustum which affects both
	  lighting and radiosity. It appeared that back-face culling
	  of polygons was done too late with the effect that even
	  invisible polygons would fill up the c-buffer (c-buffer does
	  not care about orientation of polygons). This bugfix seems
	  to remove the last lighting errors from dmburg. There are still
	  a few black borders here and there but I see no more real
	  lighting errors.
	- Norman Kramer added csFrustum::BatchClassify() which is meant
	  to be used if you plan to do a number of classifies with the
	  same frustum. It is faster that way.
	- Andrew Zabolotny did the following changes:
	    - Added detection of XFree86/OS2. Now softx driver compiles
	      and works well on OS/2 with shm and vidmode extensions! :-)
	    - Added a command-line option: "-canvas=xxx" will tell the
	      renderer which canvas plugin to use. If "xxx" does not
	      contain dots (e.g. something like "x2d", "dive" and so on)
	      "crystalspace.graphics2d." is prepended.
	    - Fixed a bug in softx driver related to fullscreen extensions.
	      Close() calls LeaveFullScreen() but if we close the driver
	      due to a failed initialization dpy and window variables were
	      not initialized.
	    - Removed GetVFS method from iSystem. Use QUERY_PLUGIN_ID instead.
	      I have fixed all drivers to use QUERY_PLUGIN_ID.
	    - Removed iUnixSystem interface. Moved the functionality needed
	      to decide whenever to use shm, simdepth etc to the respective
	      X11 drivers (moved to a new file video/canvas/common/x11comm.cpp
	      which is included in all X11 drivers that really need it). In
	      general, system-dependent part of csSystemDriver becomes thinner
	      and thinner. This is good :-)
	      Due to extensive changes through many canvas plugins some may
	      encounter syntax errors during compilation. Use the softx
	      driver for reference, which compiles and works fine.
	    - Fixed the linex2d driver (it wasn't working properly after
	      the last fullscreen change).
	    - Changed TEX_2D, TEX_3D and TEX_2D3D into FOR_2D(yes|no)
	      FOR3D(yes|no). Using these two keywords you can achieve same
	      effect as with older three. Besides, csstdldr plugin supports
	      them for a long time.
	    - Split the "int Type" field of csEvent into four: char Type,
	      char Category, char SubCategory and char
	      ReservedForGreatFutureExtensions. No application should be
	      affected by this since Type is anyway effectively a 5-bit
	      value...
	- Fixed two bugs for compiling in Unix after Andrew's changes.
	- Fixed embedded iPolygonMesh classes for both csPolygonSet
	  and csSprite3D so that they are correctly specified now.
	- Martin Geisse fixed a small bug in the docs as suggested in
	  the mailing list.
27-Jul-2000
	- Martin Geisse converted some more docs to texinfo format
	  (including the much asked for worldfmt.tex file).
	- Added TEX2D keyword to parsing of textures in world file.
	  So you can mark textures as being 2D only.
	- Added TEX3D and TEX2D3D keywords to complete the functionality.
	- Added a missing menu to the world format texinfo documentation
	  file.
	- Alex Pfaffe fixed visibility determination for CS in the terrain
	  engine.
	- Fixed sndsoft.mak makefile after Paul Garceau broke it
	  yesterday.
	- Martin Geisse fixed a compiler warning in polyset.h.
26-Jul-2000
	- Paul Garceau fixed sndsoft.mak makefile for Win32/MingW.
	- Started completing support for the rapid collision detection
	  plugin and also completing support for the interfaces needed
	  to do good collision detection. As soon as this is finished
	  the old colldet dir in csengine will be removed.
	- csPolygonSet and csSprite3D also implement (through embedding)
	  iPolygonMesh now so that they can be used with the CD system.
	- Norman Kramer fixed Yet Another csFrustum::Classify(). This
	  function must hold the record for one of the most difficult
	  ones to get right :-)
	- Norman Kramer updated the name of the glide 3d target drivers.
	- Thomas Hieber did another update to map2cs:
	    - Now it will properly detect wrong plane definitions in
	      the map file and eliminate these. (Workaround for problems
	      in the editor!)
	    - Significant speedup when removal of hidden surfaces
	      is wanted. (using bounding boxes for brushes and polygons)
	    - Skyboxes are now being written using the CAMERA() modifier,
	      so they don't move any more, while walking.
25-Jul-2000
	- Thomas Hieber did a small maintainance release to Map2CS
	  (labeled 0.82):
	    - Unique names for entities, if no explicit name has been given.
	    - Manual sectors will now use the name of the entity instead of
	      "s" plus a number.
	    - If the entity has not been assigned a name, it will be called
	      "e" plus a number.
	    - Skybox now uses the new keyword "SKY". The result is
	      already  better than the previous version, which used things,
	      but sky is still being moved  (which shouldn't happen
	      any more). The problem probably is,  that skyboxes from
	      map2cs are usually being looked at through a portal, and
	      maybe that code in the engine is still broken.
	    - Cleaned up and reformatted some odd code I came across.
	- Norman Kramer did another fix to csFrustum::Classify().
	- Engine plugin is now working!
	- Extended iWorld with a few functions from csWorld.
	- Extended simplep app with more functionality. Still doesn't show
	  any 3D yet.
	- Scott Bowden continued work on the Unreal convertor (t3d2cs).
	  The following changes have been made:
	    - Added the friend function 'dMsg(char *message)'
	      to all classes in t3d2cs. It is used to print a
	      debug message, and can be disabled.
	    - Rearranged the internal data representation used
	      in most of the classes in t3d2cs. Mainly this was
	      a mass rename of a lot of variables to d_[var] to
	      specify that it is internal data. This allows me,
	      for example, to have a public function in tLocation
	      called .x() to get the x value without causing confusion.
	    - Added the tRotation class [tRtation.h]. Should work
	      fine.
	    - Add the tPolygon and tPolyList classes [tPolygon.h /
	      tPolyLst.h ]. They do not fully work yet. I am aware
	      of this fact :)
	    - Added in the tLcation [tLocation (8.3, grr!)] class to
	      handle brush locations. I have also moved setFloatVal
	      to setDoubleVal and changed the handling of precision
	      variables accordingly to doubles instead of floats.
	- Big update to csphyziks from Michael Ewert. Two changes:
	    - First are joint angle constraints.  So you can say a
	      joint only swings between 0 and 180 degrees, like an
	      elbow.
	    - Second is connecting a jointed body to a kinematically
	      controled entity, that moves however the user
	      specifies.  This is used to attach a jointed body to
	      other game-world objects that are not controlled by
	      physics, like a character or door or whatever.  The
	      correct physical behavior will still result even
	      though one entity isn't in the physics engine.
	- Fixes from Mike Bond to linex2d and glx2d canvas plugins
	  related to his latest changes. These fixes restore keyboard
	  focus when the window pops up.
24-Jul-2000
	- Started work on new engine plugin. This plugin will link statically
	  with csengine but will itself be a plugin that can be used
	  by apps instead of linking to csengine directly. This method
	  serves as the future prefered base for working with CS and it
	  also allows to dynamically load the (large) engine plugin into
	  memory. This engine plugin also makes it easier to conform to
	  the LGPL. Not working yet.
	- Added new 'simplep' application which will eventually be similar
	  to 'simple' except that it will use the engine plugin instead
	  of statically linking to 'csengine'.
	- Added csWorld parameter to csPolygonSet (and thus to csThing
	  and csSector as well) to help the removal of the current_world
	  static variable.
	- Removed the iostream dependency in t3d2cs app because I don't
	  have the C++ libraries here.
	- In WalkTest console: bound 'd' to 'emode front2back' which will
	  mainly make sure that it behaves like it used to in the past
	  except that it doesn't toggle. Bound 'shift-d' to 'emode
	  back2front' which is the prefered engine mode for portal worlds.
	  Bound 'alt-d' to the new 'emode zbuffer' mode. Bound 'ctrl-d'
	  to 'culler next' to switch between the various cullers (cbuffer,
	  quad3d, and covtree).
	- Added new CS_POLY_SPLIT flag to csPolygon3D which is set for
	  a polygon that is split by a BSP split. Previously the flag
	  CS_POLY_NO_DRAW was used for that but this is now used for what
	  it is actually ment: i.e. to indicate a polygon that should not
	  be drawn. This fixes the new CS_ENGINE_ZBUFFER engine mode.
	- Got an updated doc to csPhyziks from Michael Ewert.
	- Andrew Zabolotny did the following changes:
	    - Added dynamic loader support for DJGPP. Added required
	      detection routines to bin/dosconf.bat. If you have libdl
	      installed (available from Crystal Space ftp site, and in
	      near future from ftp.simtel.net) it will set
	      USE_SHARED_PLUGINS to yes, otherwise to no.
	      Also you may want to use shared versions of libpng, zlib,
	      libjpeg. The dosconf.bat script looks for these libraries,
	      and if available turns on the usage of shared version of
	      respective libraries. You may have as well just one library
	      in shared version, and other twos - in static version,
	      each one is detected individually.
	    - Removed someone's #ifndef YY_NO_NULLIFY_YYVAL from
	      support/gnu/bison.sim. This is a very incorrect change since
	      YYVAL is not always an int, in my case (csstdldr) it is a
	      structure, and as such cannot be assigned NULL.
	      A better approach would be to do:
		#ifdef YYVAL_ZERO
		  yyval = YYVAL_ZERO;
		#endif
	      but in any case I don't see the need for it - I don't get
	      any warnings about uninitialized variables, at least with
	      pgcc 2.95.2 in optimize mode.
	    - Further work on the new loader.
	    - Fixed a warning in csFrustum::Classify().
23-Jul-2000
	- Cleaned up some coverage mask tree statictics.
	- Added csWorld::SetEngineMode() with which you can control how
	  the engine will render the world. The setting is there but
	  actual engine functionality is still lacking. There is also
	  an auto-detect mode (which is default) which will try to detect
	  the best engine mode for the loaded world.
	- Implemented the three engine modes now.
	- Cleaned up csWorld::Draw() and csWorld::DrawFunc() (added new
	  StartDraw()).
	- IMPORTANT change! csWorld now has a function GetBeginDrawFlags()
	  which returns flags that the engine requires for G3D->BeginDraw().
	  Since BeginDraw() is called by the application it is now the
	  responsibility of the application to actually call this function
	  and or the returned flags with the flags the application wants to
	  use. This is used because some engine modes require the Z buffer
	  to be initialized when BeginDraw() is called.
	- Added csWorld::SetCuller() to set the 2D/3D culler to use. This
	  replaces the functions EnableQuad3D, EnableCovTree, and
	  EnableCBuffer. c-buffer is now default but will only be used
	  when the engine mode is equal to CS_ENGINE_FRONT2BACK. And this
	  depends on the loaded level.
	- Removed console commands 'cbuffer', 'quad3d', and 'covtree'
	  and replaced with 'culler' command.
	- Added console command 'emode' to switch between the different
	  engine modes. Options are 'auto', 'back2front', 'front2back',
	  and 'zbuffer'.
	- In an effor to minimize the use of the global current_world
	  variable from csWorld I added a world pointer to csRenderView.
	- Gary Haussmann added code (for OpenGL renderer) to try and
	  determine the proper lightmap blend mode automatically.
	  With the blend mode set to 'auto' the code will draw polys in both
	  the SRC*DST and 2*SRC*DST blend mode, comparing the two and
	  picking the more appropriate one for use in drawing lightmaps.
	  Also added extension detection #ifdef's to assume Mesa-style
	  extension detection on Linux with GCC, even if the MESA_*
	  macros are not defined.
	- Gary Haussmann added some info the the lightmap blend mode comment
	  in opengl.cfg. Now the comment includes the newly supported
	  'auto' lightmap blend code.
	- Gary removed superfluous diagnostic messages from glx2d.
	  With the addition of autodetect for lightmap blends, the OpenGL
	  code is starting to spew out a lot of initialization diagnostic
	  messages :)
	- Norman Kramer removed the empty destructor in cssfxldr.
	  The same problem like the one in the graphics loader lib.
	  If the lib is bound to a plugin then it crashes on program exit
	  (class destructor is called in atexit).
22-Jul-2000
	- New 'txt' map mode nearly works. Texture mapping is not ok
	  though.
	- Changed clear color for 'fclear' command. Now it is the same
	  color on all systems.
	- Scott Bowden added the first version of t3d2cs which is an
	  app that will read Unreal t3d files and produce CS files.
	- Scott Bowden put back the entry.t3d file so that people can
	  work on it for the t3d2cs convertor.
21-Jul-2000
	- Added an extra 'txt' map mode to do an orthographic texture
	  mapping map. Not functioning yet.
	- Alex Pfaffe removed the ddgHistogram dependency for CS. This
	  fixes the problem with the file that could not be found.
	- Wouter Wijngaards enabled terrain again after Alex fixed
	  the missing file problem.
	- Wyatt Miler updated the Mac project files.
	- Wyatt also added a couple of comma's to the dungeon plugin so
	  the mac compiler doesn't die. Check lines 116 and 119. I'm not
	  sure how this was supposed to work anyway.
20-Jul-2000
	- Alex Pfaffe did an update to the terrain engine. Should now
	  be faster since less vertices are sent to the 3D rasterizer.
	- Because Alex forgot to commit some files I disabled the terrain
	  engine for now.
	- Wouter Wijngaards improved the csQuadTree3D code. Faster and
	  more reliable for TestPolygon.
	- Norman Kramer fixed csFrustum::Classify(): corrected the
	  CS_FRUST_PART, still in #if 0 - i guess jorrit want to double
	  check this :)
	- Fixed csFrustrum::Classify() again!!
	- Changed lightmap caching to make it more robust and system
	  independent. This means that the format has changed completely.
	  If you don't do -relight or -recalc CS will simply ignore
	  the old lightmaps (i.e. everything becomes black).
	- Added csSector/csWorld::FindLight() with CS_ID as a parameter.
	  This can be used to locate a light with a given id.
	  This is mainly useful for the lightmap cache.
	- Added back face culling to the test for csQuadTree3D. Still
	  doesn't solve the culling bugs though.
	- Solved a very old bug (in data/config/autoexec.cfg) where movement
	  keys didn't autorepeat in 3d-move and map mode.
19-Jul-2000
	- Updated 'simple' tutorial and 'simple' application a little bit.
	- Extended 'simple' application to load a 'sprite1' template from
	  standard.zip and show it. Also added a new tutorial 'simple2.txi'
	  to show how this sprite stuff works.
	- Removed some non-existing functions from
	  include/csparser/csloader.h.
	- Added csLoader::LoadSpriteTemplate() function to load a sprite
	  template from a file.
	- Reverted Norman Kramers patch to csFrustum::Classify() because
	  it seems to be wrong.
	- Wyatt Miler enabled TGA image format for Mac as some levels now
	  are using it, and it works.
	- Wyatt also updated the Macintosh project files.
	- Wouter Wijngaards disabled some debug prints in csQuadTree3D.
	- Wouter also set radiosity.stoppriority from 25.0 to 0.1 now,
	  since radiosity is fixed by the Classify changes.
	- Added support for orthographic projection in the csWireFrame
	  class. This is going to be used for three types of orthographic
	  maps (X, Y, and Z). These maps are going to be used for debugging
	  mainly (i.e. PVS).
	- Added 'mapproj' console command to change the projection mode
	  for the 'map' command to either persp (default), x, y, or z.
18-Jul-2000
	- Did an optimization in csFrustum::Classify() as suggested
	  by Norman Kramer.
	- Fixed another bug in csFrustum::Classify() where it would
	  misclassify adjacent frustum/polygon as covered instead of
	  outside.
	- Fixed another bug in csFrustum::Classify() where it would
	  misclassify overlapping frustum/polygon as outside instead
	  of partial. In this case the bug was that the edges either
	  fully cover each other or intersect at corners.
	- Renamed cmd_Door to entity_Door in WalkTest.
	- Added entity_Light and entity_Rotate entities. With entity_Light
	  you can control the animation for a light at activation time.
	  With entity_Rotate you can have an object that rotates all
	  the time or one that rotates at activation time.
	  entity_Rotate has the following syntax:
	  	KEY ("entity_Rotate", "x,y,z")
	  (with x,y,z the x, y, and z angles in degrees).
	  These angles represent the rotation in one second.
	  entity_Light has the following syntax:
	  	KEY ("entity_Light", "sector,light,r1,g1,b1,r2,g2,b2,time")
	  Sector and light are the name of the sector and light to find
	  the light that is controlled by this entity. The two given
	  colors are the start and end color (start is at activation time).
	  'time' is the time (in miliseconds) to go from start to end.
	- Fixed explosion bounding box (partsys) so that it isn't updated
	  every frame. This makes it faster but slightly less accurate.
	  It is possible (but not very likely) that the partsys will
	  not be drawn even if it is visible.
	- Added a bounding box to csPolyTreeObject. This bounding box
	  is used to fix a bug that when the camera is inside the bounding
	  box of a dynamic object, the object cannot be seen.
	- Moved updating of the dynamic object to csPolyTreeBBox.
	  Makes the code for csSprite, csThing, and csParticleSystem simpler.
	  Note that visibility culling for particle systems still doesn't
	  work correctly at the moment. I'm investigating.
	- Removed support for LIGHTX in worlds. The parser will still
	  recognize the keyword and say that it is obsolete.
	- Removed support for SCRIPT, ACTIVATE, and TRIGGER in the world file
	  (keywords still recognized). The scripting system is now obsolete
	  and replaced with the new entity system in WalkTest.
	- Added support for named lights in the world file parser.
	- Completely removed support for the obsolete csscript from CS.
	  This is a significant change with lots of small effects at various
	  places.
	- 'activate' console command is now completely obsolete and
	  doesn't work anymore. Use 'action' instead which fires the
	  new entity system.
	- Fixed a bug in csengine which caused the new csQuadTree3D
	  optimization not to work at all. Note that this optimization
	  still doesn't work at the moment.
	- Removed an assert in map2cs to make converting some badly
	  formed levels easier :-)
	- Frank O' Connor updated the VC project files for the removal
	  of csScript.
	- Wouter Wijngaards commited code made by Mike Bond
	  <mbond@cox.rr.com>. It enables fullscreen mode for the line X
	  2d driver, the opengl X 2d driver, and the software X 2D driver.
	  I have verified that software mode now runs fullscreen OK
	  (Xfree86 4.0, 32 bpp, 640x480). Also, the border of funny pixels
	  at the edge of the screen is not caused by this commit.
	  Note that the line USE_XFREE86VM = yes should be added to
	  config.mak before compiling this, if you have XFree86
	  (most people running linux use XFree86).
	  Use alt-enter or 'fullscreen' console command to switch between
	  fullscreen and not.
17-Jul-2000
	- Added LGPL notice to a few .inc files.
	- Change to OpenGL renderer so that lightmaps are only cached
	  when lighting is enabled. This speeds up rendering considerably
	  when you disable lighting. This speed increase suggests that
	  sending over new lightmaps to the hardware is slow. So combining
	  lightmaps makes sense probably.
	- Samuel Humphreys did the following changes:
	    - Fixed perftest so that it exits after finishing tests.
	    - dtmesh.cpp (I think) didnt take into account
	      mesh.use_vertex_color = false; and so segfaulted into
	      perftest..I have fixed it I think :)
	- Extended the fix from Samuel (to dtmesh.cpp) to some other
	  places in the same code.
	- Paul Garceau modified mingw.mak to fully accomodate Working
	  Static Library Build.
	- Fixed a bug in the parser with SKY and SKYDOME commands.
	- Fixed two bugs in csFrustum::Classify. Fixing these bugs has
	  the unfortunate side-effect of breaking lighting a bit (not
	  completely, but shadow calculation has more errors now). But
	  we will fix those later.
	- Fixed a third bug in csFrustum::Classify which fixes lighting
	  again :-)
	- Added visibility culling system to particle systems. This
	  will make them visible even if you turn on the c-buffer.
	  Note that this will probably not work in all cases now because
	  the bbox calculation in particle systems is not completely
	  ok at the moment.
	- The limitation of 1000000 texels for lighting has now moved
	  from the engine to the software renderer. This means that for
	  OpenGL, D3D, and Glide, this limitation is gone and you can have
	  bigger lighted polygons. Note that there is still a limitation
	  though. If the lightmap is bigger than 256x256 it will not
	  be used. This is to avoid problems with some cards that have
	  this texture size limitation.
	- Wouter Wijngaards completed bounding box support for particle
	  systems.
16-Jul-2000
	- Samuel Humphreys did the following changes..
            - Added two new procedural textures to dtsimple.  This is to
              complete dtsimple as a test suite for all the current procedural
              texture implementations and flags.  If you enable both test1 and
              test2 then all the procedural textures get printed to the screen
              with DrawPixmap as this uses a different rendering pathway than
              DrawPixmap to the texture.  These changes highlighted a
              fundamental bug in the implementations within the software
              driver.
            - Fixed all known bugs in the software and opengl implementations
              of procedural textures.  Cleaned up the code, things are looking
              much better now, and I don't anticipate needing any further
              overhauls.  Three features remain to be done: mip mapping and
              the ability to update sub rectangles of the texture buffer.
              These changes will be propagated up into the mip map as
              subrectangles also.  Lastly the flag
              CS_TEXTURE_PROC_MIPMAP_ON_SYNC needs to be implemented.  Then a
              few optimisations...
            - Changed the metaball texture so instead of clearing the screen,
              it prints the bot_view texture as a background...this gives an
              unexpected but IMHO seriously cool effect.  Check it out :)
            - Removed the opengl 16bit procedural texture pathway for now.  As
              its very slow on my machine.
	    - Added some emacs fontification friendly comments to .inc files
15-Jul-2000
	- Wyatt Miler updated the Macintosh project files.
14-Jul-2000
	- Brandon Ehle restarted work on Crystal Script (python).
	  New layout is interface based, which allos for more dynamicism
	  and lower runtime memory requirements.
	- Tried to use csQuadTree3D for doing 3D visibility culling
	  (in contrast with c-buffer which does 2D culling). It doesn't
	  work yet though.
	- Added 'quad3d' console command to enable the new culling system.
	- Extended the Dumper class with a set of Memory() functions that
	  are useful to estimate how much memory some geometry uses.
	  It only calculates the static memory (i.e. no runtime information
	  like light patches, or transformed coordinates, ...). And it
	  only gives an estimate.
	- Extended csHashSet so that you can give the size of the hashmap
	  that is used. Also added a few example primes that can be used
	  for good sizes.
	- The number of estimated bytes for all world geometry and all
	  bsp/octrees is calculated and displayed at startup.
	  In addition the number of texels (not bytes) of all loaded
	  textures is also displayed.
	- Optimized csRAPIDCollider so that it only considers unsplit
	  polygons (i.e. the original polygon and not the ones that are
	  caused by a BSP or octree split). This speeds up CD init, speeds
	  up CD itself and also reduces memory consumption somewhat.
	  For the large level that I'm creating this reduced the number
	  of triangles in the CD data from 47871 to 19294.
	- Got a networking update to Blocks from Rene Dudfield.
	    - New Server=yes/no option in blocks.cfg.
	    - Blocks can now be either a server or a client.
	    - Check out apps/blocks/todo.txt for more information.
	  Note that this is work in progress. Currently you cannot really
	  do a network game yet.
	- Wouter Wijngaards improved the spiral particle system. It
	  looks a little nicer but not yet very good.
13-Jul-2000
	- Removed 'solidbsp' command from documentation.
	- Added SetMainFrustum to csQuadTree3D to change the frustum for an
	  already created csQuadTree3D.
	- Started work on using csQuadTree3D as a 3D visibility culler.
	  Not finished.
	- Added csCamera::Perspective() which calculates the perspective
	  projection for a 3D point given a camera.
	- Added csCamera::InvPerspective() which calculates the inverse
	  perspective projection for a 2D point (with a given Z).
	- Removed the csPolygon2D::AddPerspective... versions that take x,y,z
	  parameter and only kept the csVector3 ones.
	- Added PROCEDURAL and PERSISTENT keywords to textures in the world
	  file. With these you can make a texture procedural. If you make a
	  texture PERSISTENT as well as PROCEDURAL you can render on parts
	  of the texture and the previous contents will still be there.
	- Wouter Wijngaards added csMaterial class. Is now used by polygons.
	  The API is backwards compatible though, only resulting in a
	  seperate material for each polygon if used the old way.
	- Wouter added bumpmap class, it will store a bumpmap in different
	  formats given a source image.
	- Wouter improved fountain command. Now uses spark
	  texture and has 400 particles, nice color and rotation; which
	  looks nice.
	- Wouter also fixed rain so that the texture should no longer be
	  upside down, snow had the same problem and should be fixed too.
12-Jul-2000
	- Added new csHashSet class. This is a class that you can use
	  to add objects and to test if some object is already in the
	  set. It uses csHashMap so it should be fairly quick.
	- Use the new thing visibility system for lighting too. This
	  should speed up the calculation of static lighting a lot
	  (and dynamic lighting if things cast shadows). This new system
	  uses the csHashSet class from above.
	- Greatly cleaned up the csSector::RealCheckFrustum() code and
	  added some comments.
	- Fixed a small bug in engine/Dumper where it crashes for polygons
	  having no name.
11-Jul-2000
	- Paul Garceau did an update to the Mingw makefile.
	- Andrew Zabolotny did some fixes to dos configuration batch
	  files.
	- Seth Galbraith fixed one of the files that Andrew fixed.
	- Changed csPolygonSet::GetBoundingBox() to fill in a csBox3
	  instead of two vectors.
	- Implemented support for dynamic bounding boxes in polygon trees
	  (octrees and BSP trees) for moveable and detail things.
	- Added is_visible flag for a thing.
	- Addd GetNumSkyThings() and GetNumThings() to csSector to get
	  the number of sky and normal things.
	- Removed 'home' and 'other' pointers in csThing because they
	  were not used and obsolete.
	- Detail and moveable things are now only drawn when visible
	  through the c-buffer. This greatly speeds up rendering big
	  levels with lots of small detail objects.
	- Removed support for 'solidbsp' for rendering. It wasn't properly
	  working in any case. Also removed 'solidbsp' console command.
	- The 'thing' toggle to render things (console command) now doesn't
	  affect the static thing anymore. This means that on a level using
	  an octree only detail and moveable things will not be rendered
	  when this flag is set.
	- Cleaned up the very important csSector::Draw() a little and added
	  more comments to make it clearer.
	- Fixed a bug in the derived iterator change from yesterday (in
	  csObject). It was not actually iterating over derived types
	  but doing something completely bogus instead. This fixes the
	  crash bug that I had in the new WalkTest entity system.
	- Renamed csBusyList to csEntityList.
	- Fixed a bug with flat-shading. This could cause crashes
	  with for example funky.zip (recent bug).
	- Made csPolygonSet::GetBoundingBox() more efficient.
	- Fixed csPolygonSet::GetBoundingBox() and CreateBoundingBox()
	  for polygon sets that contained nothing but curved surfaces.
	  These fixes visibility algorithm using c-buffer and curved
	  surfaces.
	- Samuel Humphreys did the following changes:
	    - Fixed bug in software drivers where if the viewing rectangle was
              set to the window co-ordinates, polys where being unnecessarily
              clipped.  When the clipper clips to x=0,y=0 double precision
              calculations on occasion gave slight negative values.  The
              software drivers silently rejected these polys.  I have added an
              EPSILON fuzz so vertex +/- EPSILON is tested instead.  I notice
              that the draw fog polygon member doesnt test at all for the
              cases where vertices exceed screen dimensions, perhaps its safe
              now to do away with these tests altogether?
10-Jul-2000
	- Samuel Humphreys did the following changes:
            - Added messages to distinguish between backbuffer and software GL
              implementations
            - Cleared out debugging junk I left in.
            - Adjusted Zbuffer clear...
            - Added new Clear (RGBPixel &colour) function to csImageMemory.
              This clears the image to the specified colour.
	    - Implemented new procedural texture flag:
              CS_TEXTURE_PROC_PERSISTENT This has been implemented for opengl
              backbuffer & software versions aswell as the pure software
              drivers...see documentation for further details.  Only
              mip-mapping to deal with now.
            - Fixed the software 32bit RGB transpositions problem, I think :)
              32bit software procedural colours should now be correct.  Please
              people on big endian machines check this!!
            - Optimised the GL back buffer implementation so it now clears
              Zbuffer and/or screen with QUADS rather than the whole screen.
            - Fixed the garbling which occured on the first frame in opengl.
            - Various changes to dtsimple.  Currently the meta balls texture
              is set to be persistent over the top of the squawk background,
              so the metaballs smear over the texture rather than being
              cleared each frame
	- Extended csObject::GetIterator() with a new parameter that indicates
	  if you want to iterate over derived objects as well. Normally
	  the iterator that is returned only iterates over the objects of
	  exactly that type. The parameter is defaulted to false so normally
	  no code should be modified for this change.
	- Added a new entity model to WalkTest. csWalkEntity is the main
	  abstract superclass. You can attach a csWalkEntity subclass to
	  any sector or thing in CS. In WalkTest there is a function
	  called ActivateObject() which will activate all entities that
	  are attached to some object. The main WalkTest loop (NextFrame)
	  will also call NextFrame() on all 'busy' entities. By default
	  entities are not busy but an entity can push itself on that list
	  at activation time (and release itself later when it is no longer
	  active).
	- Added 'action' command to WalkTest which will replace the old
	  'activate' command (for the obsolete scripting system). This
	  'action' command will trigger ActivateObject() in the parent
	  of the first polygon it can find in front of the camera (less
	  than 3 units away). Bound 'a' to this new command (meaning
	  'activate' is unbound now). WARNING! This new system is not
	  operational yet and crashes still.
	- Added first subclass of csWalkEntity: csDoor. This entity
	  represents a door that can be opened or closed. To use
	  this in world files add a key/value KEY ("cmd_Door", "X,Y,Z") to
	  the thing that you want to let act as a door. The x,y,z location
	  is the location of the hinge.
8-Jul-2000
        - Samuel Humphreys did the following changes:
            - Fixed the opengl back buffer procedural texture so it now
              displays curves and sprites non-inverted.  The back buffer uses
              an inverted orthographic projection matrix, which was being
              overwritten by the DrawTriangleMesh routine.
            - Added emacs friendly comments that these .inc files are really
              C++ files.
            - Fixed a bug in the shared initialisation and open routines in
              the opengl renderer, the backbuffer proc texture looks much
              better.
            - Cleaned up a little the shared initialisation and open routines
              in the software renderer
            - Upped the res on the level_texture, and changed the start
              position to look at it
            - The shared open code in the software driver now properly sets
              the z_buf_mode variable
            - Cleaned out all the csCamera->SetPerspective calls from the
              engine..  its now the app writers responsibility to update the
              camera on context resize events.
            - Added preliminary documentation for the procedural texture
              subsystem.
            - Small corrections to some txi files.
            - Added new flags to itxtmgr which I have written documentation
              for.  Now all I need to do is write the code for it :)
	- Seth Galbraith did some fixes to some of the DOS setup scripts.
7-Jul-2000
	- Moved alpha setting from portals to polygons. In most cases this
	  setting only makes sense for portals but you can use it on a thing
	  as well (and for a second skybox for example). Extended
	  csPortal::CheckFrustum() so that it has the alpha as a parameter
	  now because it needs it.
	- Fixed Map2CS so that it works on big endian machines and also
	  works on processors that don't allow writing short/long on
	  odd addresses.
	- Norman Kramer fixes glide canvas so that it now intercepts
	  WM_WINDOW_CLOSE messages from X.
6-Jul-2000
	- Samuel Humphreys did the following changes:
            - Removed indentation from bin/dosupd.bat..hope the unix eol stuff
              doesnt break it entirely.
            - Added the last procedural texture.  Now you can watch levels on
              the wall.  Just execute 'dtsimple flarge' to see flarge.  To
              navigate hold down the control key while cursoring around.
            - Added a method to LanguageLayer to allow delaying of setting of
              camera.  This will also allow one to change the camera.
            - #ifdefed with OPENGL_1_2 the GL_UNSIGNED_SHORT_5_6_5 data type,
              which Mesa supports but windows doesn't.  The native 16bit
              display path for procedural textures now works again.
            - Added a temporary box to the top left corner of dtsimple which
              should be the same colour which proc textures clear to...this is
              for testing...
            - Clumsily fixed the problem with the 32bit software procedural
              textures.  From canvas/common/protex2d.cpp:197 I have added byte
              shuffle code which probably isn't the best way to do it, and
              probably not correct for all endianness and frame buffer pixel
              types.  Hopefully Eric or AndyZ will take a look and do it
              properly :)
            - The portal procedural texture now correctly appears.
            - Cleaned up proc texture detection in sftcom3d.cpp.
            - Added more comments to remind myself what Ive done.
	- Added csPortal::CompleteSector() as a virtual function. This
	  function is responsible for creating a new destination sector
	  if this sector would be NULL. It can be used by subclasses of
	  csPortal to dynamically create sectors.
	- Added csPortal::Warp() to warp one vector.
	- Simplified csPortal by removing IntersectSphere and FollowSegment.
	  Those functions are now specific to csSector.
	- Added CS_ENTITY_CAMERA flag for csThings. With this flag set
	  things will only be rotated to the camera and not translated.
	  This is useful for skyboxes and skydomes.
	- Added SetMixMode and GetMixMode to csGouraudShaded so that you
	  can now render a gouraud shaded polygon with another mixmode.
	  This can be used to create transparent things and so on.
	  Note that the engine needs a little better support to actually
	  support transparent things in a good way (i.e. sort them the
	  right way).
	- Added CAMERA() keyword to the world file format for csThings.
	- Added MIXMODE() keyword to the world file format for polygons.
	- Added additional support for 'sky' objects in a sector. These
	  are basicly just things like the others but you have the guarantee
	  that they will be drawn first with Z fill before anything else
	  is drawn.
	- Added functions AddSky(), RemoveSky(), GetFirstSky(), and GetSky()
	  to csSector to manage sky objects.
	- Added support for SKY() keyword in 'ROOM' and 'SECTOR'. This
	  keyword behaves EXACTLY the same as a normal THING except that
	  it will be added as a sky object.
	- Added new support for sector commands in WalkTest. If you add
	  something like KEY ("cmd_whatever", "...") to a sector in the
	  world file then WalkTest will recognize it as a command to
	  execute. Other apps will ignore the keyword. There is currently
	  only one command: KEY ("cmd_AnimateSky",
	  "<thing-name>,<dir>,<speed>"). When this command is present
	  WalkTest will animate the sky object indicated with <thing-name>.
	  The rotation <dir> will be 'x', 'y', or 'z'. The speed will
	  be relative to 1 meaning one full rotation in 1 second.
	- Norman Kramer made some glide fixes: not only was the hardware
	  framebuffer deleted in the derived class (which was stupid already)
	  - we (read "i") did it here again :) when the doublebufferstate
	  is changed we now call FinishDraw until the framebuffer is
	  unlocked (this is important if DoubleBuffer() is called
	  between BeginDraw()/FinishDraw()) - this will ensure the
	  framebuffer is relocked upon next LFB access and points to the
	  right buffer.
	- Norman also removed deleting of hardwareframebuffer at exit, wonder
	  why it did not segfaulted earlier - weird (for glidex2d).
5-Jul-2000
	- Samuel Humphreys did the following changes:
	    - Rearranged iGraphics2D/3D so that related functions are
	      grouped... ;)
	    - Fixed transparent images in dtsimple which showed up with
	      the opengl backbuffer proc texture.
	    - Fixed text rendering on the backbuffer proc textures.
	    - Fixed an omission from my last commit.
	    - Simple optimization in the gl font server gives a 12.5x
	      speed up for font rasterization :)
	    - Also skips rasterizing spaces.
	- Travis McIntosh added curve radiosity support as well as an
	  updated interface into the Bezier math.
	- Travis did a quick bug fix in radiosity (SetKeyColor -> GetKeyColor).
	- Norman Kramer fixed memory leak in csTree, now treenodes delete
	  their children from last to first because csVector::Delete shifts
	  the contents of the vector.
	- Norman also added cscmdTreeRemoveAll to remove all treeitems
	  (for csTree in CSWS).
	- Received new halo code from FragDance for OpenGL. Cleans up a
	  little but otherwise works the same.
4-Jul-2000
	- Samuel Humphreys did the following changes:
	    - Backbuffer now works without being inverted. Re-reversed the
	      orthographic projection from its default setting of reversed,
	      for the duration of rendering to the back buffer.... this
	      seems strange that the opengl driver has this setting.
	    - Sets glviewport in the back buffer 3d driver within the
	      begin/finish draw calls.
	- Eric Sunshine fixed csQuadTree3D so that it compiles on NextStep.
	  The embedded node_pos_info class was triggering a compiler bug (for
	  some reason).  Also added some missing 'const' qualifiers and
	  cleaned up the files.
	- Eric Sunshine hacked Squawk to keep it from depositing precalc_info
	  files where they are not wanted.
	- Norman Kramer removed const qualifier from GetCorner, now
	  compiles again (csQuadTree3D).
3-Jul-2000
	- Seth Galbraith cut skybox in half to save 200 KB for Squawk.
	- Andrew Zabolotny did the following changes:
	    - Renamed everywhere the term "transparent" to the correct
	      term "keycolor". It was a misunderstanding because the term
	      "transparent" is related to both alpha transparency and key
	      color. Now "transparent" is used only where alpha
	      transparency is involved.
	    - Changed naming convention of csScan_X_draw_scanline_xxx
	      routines. I tried to make the names shorter and at the same
	      time add the information of what the routine actually does
	      into its name.
	    - Added a lot of new scanline routines:
		- Textured Gouraud-shaded polygons with key color
		  transparency.
		- Textured flat-shaded polygons with key color transparency.
		- Textured flat-shaded polygons with table-driven effects (FX).
		- Flat-color flat-shaded polygons with table-driven
		  effects (FX).
		- Flat-color Gouraud-shaded polygons with table-driven
		  effects (FX).
	      The routines were added for all supported modes (8, 15, 16,
	      32 bits). Note that not all of them were tested (time for a
	      G3D test app?) thus some may be buggy. If you find bugs, tell
	      me and I will fix them.
	    - Added support for 15-bits modes to MGL 2D driver.
	    - Fixed 8-bit fog. There was a strange error in there (strange
	      because it was in its initial state (nobody has changed
	      anything) and still gcc generated wrong code (unsigned shift
	      instead of signed)). I wonder how it worked when I initially
	      wrote it.
	    - Implemented alpha-mapped textures support. Preliminary though,
	      several details about how the Z-buffer is to be filled are
	      unclear for now. The routines work surprisingly fast, and were
	      implemented for all supported modes (8, 15, 16, 32 bits).
	      The following drawing modes support per-pixel alpha-blending:
		  - DrawPolygon() with Z-fill and Z-use modes.
		    This means you may use alpha-mapped textures for walls and
		    things; the engine does not support this too well for now.
		  - DrawPolygonFX() supports just flat-shaded alpha-mapped
		    textures. That is, if the texture has an alpha channel,
		    the blending modes and Gouraud shading flag are ignored
		    for now.
	      Usage is pretty simple: no changes to world file is required
	      for this. Simply create a texture with alpha-channel and save
	      it to a format that supports alpha channel (I have used .PNG).
	      Then use it as a regular texture; anywhere you use it (walls,
	      things and sprites) it should work.
	- Andrew also replaced REGISTER_STATIC_CLASS with REGISTER_STATIC_LIB
	  which is shorter (in CSWS).
	- Andrew removed REGISTER_STATIC_CLASS (csVFS) from cswssys.
	  Note that things like this should be done ONLY from applications.
	  No library should register static SCF classes and/or plugins because
	  several libraries may require same class, and the class will be
	  registered several times in the best case.
	- Andrew fixed dnapp to link as a console executable (vs. GUI).
	  Also replaced all Sys->Printf() with regular printf's. There
	  is no much sense in using Sys->Printf from console apps.
	- Norman Kramer added missing CheckAlpha() calls to various parts
	  in the CS project (which Andrew forgot to do).
	- Norman also copied GetAlphaMap() to csTextureMM from
	  csTextureManager and renamed GetAlphaMap to GetAlphaMapData since
	  it clashed with the new GetAlphaMap from iTextureHandle.
2-Jul-2000
	- Samuel Humphreys did the following fixes to dtsimple:
	    - Thanks to AndyZ's mem debugger, plugged all the memory leaks
	      I'd introduced :) From (cough) ~1.5k to 0.
	    - Also fixed a couple of memory leaks in the software texture
	      manager while in 8bit.
	    - Fixed the crasher in dtsimple in 8bit software mode.
	    - Context close messages now sent on procedural texture canvas
	      destruction.
	    - Fixed various comments.
	- Cleaned up the code to load and save a recording. The format
	  is now endian correct and somewhat shorter.
	- Added 'clrrec' command to clear the recording in memory.
	  Multiple recording sessions will otherwise just be appended to
	  each other.
	- Made the size of the saved recording smaller again by not
	  repeating the sector name if it is the same as the previous
	  entry.
1-Jul-2000
	- Added a primitive recording function for LinuxTag. Will clean
	  it up for general use later (in WalkTest).
	- Added 'loadrec' and 'saverec' commands to load and save
	  a recording. VERY primitive now...
	- Wouter Wijngaards improved the snow texture.
	- Wouter also worked on the 3D quadtree (which is possibly
	  going to be used for fast visibility).
	- I decreased the snow particle size from 1 to .7.
30-Jun-2000
	- Andrew Zabolotny fixed class tree a little in CSWS.
29-Jun-2000
	- Added csOctree::GetLeaf() function that calculates the leaf where
	  the given position is in.
	- Added db_curleaf console command to WalkTest. This command
	  shows the dimensions of the current octree leaf you are in. This
	  command only works if the current sector has an octree.
	- Fixed a severe bug with the octree. The vertices were not correctly
	  transformed to camera space anymore!
	- Continued further debugging work on the PVS.
	- Samuel Humphreys did several changes to dtsimple. Mostly
	  rearrangements for aesthetic reasons. Big improvement in software
	  but still problems with OpenGL.
	- Andrew Zabolotny added support for statically linking NULL 3D
	  renderer.
	- Andrew reverted back a recent change from Thomas which
	  breaks SCF. Unused static variables are simply not included
	  with GCC.
	- Andrew also removed unneeded inclusion of math2d.h.
	- Andrew fixed a serious bug in the DOS rawvideo driver that
	  caused CS to crash on many videocards in many videomodes.
	- Andrew fixed a BigBug{tm} in the line and null renderers. inv_cmap
	  wasn't initialized to NULL.
	- Andrew added support for dithered textures to the NULL 3D
	  renderer.
	- Robert Bate added 'class' after the friend declaration in
	  csHashMap so that the file will compile with CW Pro5.
	- Robert also did some changes so that some files will compile
	  on both CW Pro5 and Pro5.
	- Paul Garceau added the latest version of mingw.mak.
28-Jun-2000
	- Norman Kramer fixed FindFirstSelectedItem and FindAllSelectedItems
	  in CSWS.
	- Rene Dudfield <illumen@yahoo.com> contributed a set of Python
	  scripts for Blender to convert Blender entities to CS objects.
	  You can find them in CS/scripts/blender. There is also a README
	  there which explains how to use the scripts in Blender.
	- Fixed a severe crash bug with dynamic lights and room.zip. The
	  fix is not very satisfactory because I simply worked around the
	  bug. When I have a little more time this needs to be investigated
	  better.
	- Eric Sunshine removed obsolete reference to CS/newdocs from subs.mak.
	- Eric Sunshine changed the location of specification of the null,
	  infinite, and line renderers in the makefiles.  Compilation of these
	  renderers is now controlled by user.mak since they are platform-
	  independent.  They are no longer controlled by platform-dependent
	  makefiles.
	- Eric Sunshine eliminated a few compilation warnings in wscs3d, and
	  a linking problem on NextStep caused by (unnecessarily) including
	  the simple.h header.
	- Samuel Humphreys resolved texture mapping for the mirror stand
	  in dtsimple.
27-Jun-2000
	- Samuel Humphreys fixed dtsimple:
	    - Fixed the portal...it was the gouraud shading which broke it,
	      turned it into a mirror for the time being.
	    - Fixed non-coplanar wall.
	    - Re-organised the lighting, added a stand for the view screen.
	    - Added a vector texture space method to csPolygon3D.
	    - some other trivialities :)
	- Andrew Zabolotny fixed wscs app so that it will not create two
	  instances of 3D and 2D drivers (and will not crash at exit due
	  to this) and it will also refresh the screen correctly (implemented
	  missing support for that in CSWS).
	- Andrew also changed ForceFullRedraw() into a more flexible
	  pplInvalidate() call which allows for invalidating a random screen
	  rectangle instead of entire screen.
	- Andrew fixed OS/2 video driver so that BeginDraw/EndDraw can be
	  called multiple times before doing Print() in double-buffered mode.
	- Andrew fixed common graphics class so that it can be Close()'d
	  without being Open'ed and so that it won't crash if we just create
	  it and destroy instantaneously.
	- Wyatt Miler updates the Mac project files.
	- Fixed the bug when that could cause severe problems when
	  loading a world for which the octree isn't valid anymore. The
	  partially loaded octree was not cleaned up properly.
	- Fixed a compile bug in DDraw61::GetClipper().
	- As from a suggestion from Terrence Stewart I implemented
	  csPolygon2D::FillZBuf() which will fill the Z buffer for
	  that polygon (and not do texture mapping). This is now used
	  after drawing a portal so that sprites drawn in the same
	  sector as the portal cannot accidently go inside the portal
	  contents (Z buffer cannot be used in case of floating portals
	  for example). This z filling for portals is optional though.
	  It is a (slight) overhead and it is not needed for many
	  kinds of portals (like outgoing portals on sector walls).
	  WARNING! Currently only the software renderer supports this
	  Z-buffer filling.
	  WARNING! If you enable this option it requires sprites to
	  be correctly placed in all the sectors that you want the sprite
	  to be visible in. If you don't do that and you use a ZFIL portal
	  then you'll get the effect that the sprite will be clipped to
	  the portal.
	- Removed a number of 'bool' settings in csPortal and replaced them
	  with a single public 'flags' field. Also removed a lot of the API
	  calls to set those flags. All access should be through the 'flags'
	  field instead. A portal now accepts the following flags:
	  	CS_PORTAL_CLIPDEST:	clip geometry in destination sector.
		CS_PORTAL_ZFILL:	do z-fill after rendering portal.
		CS_PORTAL_WARP:		warp space (set with SetWarp()).
		CS_PORTAL_MIRROR:	mirror space (automatically set).
		CS_PORTAL_STATICDEST:	static destination for portal.
	- Added support for new ZFILL keyword in world files. This can
	  be used inside a WARP statement (which is actually a bit badly
	  named but this describes various portal settings).
	- Moved CLIP from polygon to WARP because it belongs with the other
	  portal settings. This will break the 'room.zip' level but it
	  is easy to fix.
	- Added csFlags::SetBool(unsigned,bool) to set all values in a mask
	  to either 1 or 0 depending on the bool value.
	- Eric Sunshine adjusted the 'clean' target in the dnapp makefile.
	- Eric Sunshine implemented support for CSKEY_PADPLUS, CSKEY_PADMINUS,
	  CSKEY_PADMULT, and CSKEY_PADDIV in the OpenStep port.  Andrew
	  recently added these constants to csevent.h.
	- Eric Sunshine fixed a couple copy/paste errors in NeXTDelegate.cpp
	  for NextStep.
	- Thomas Hieber made REGISTER_STATIC_CLASS really static (removes a
	  linker warning on msvc).
	- Thomas moved HINSTANCE to win32 instead of having it in exeentry/
	  dllentry. This removes a warning on the linking of libAll. Anyway
	  it looks better that way too. Maybe we should eliminate exeentry
	  and dllentry completly. These files seem pretty redundant to me
	  (it could all be done by win32.cpp IMHO).
	- Thomas also did a few minor cleanups here and there and a few
	  minor changes to VC project files.
	- Norman Kramer fixed CSWS (cstree) so that it compiles on Windows
	  now.
	- Norman added support for ZFILL_ONLY in glide renderer.
	- Martin Geisse cleaned up the code of the wave-out sound driver.
26-Jun-2000
	- Fixed memory leak while building BSP/octree.
	- Eric Sunshine eliminated a slew of compilation warning in cstree.cpp
	  and cswstest.cpp.
	- Eric Sunshine fixed several broken comments in sft3dcom.h.
	- Eric Sunshine worked around an OpenStep compiler bug triggered by
	  cstreend.h where unlinkable code is generated when an inline method
	  calls a second inline before the compiler has seen a declaration of
	  the second method.
	- Eric Sunshine implemented support for CSKEY_PADPLUS, CSKEY_PADMINUS,
	  CSKEY_PADMULT, and CSKEY_PADDIV in the NextStep port.  Andrew
	  recently added these constants to csevent.h.
	- Eric Sunshine brought simple.txi (the Simple tutorial) up to date.
	- Eric Sunshine fixed several problems in the CrystalClear tutorial
	  document.
	- Release of 0.16r001.
	- Andrew Zabolotny removed the ugly inclusion of iworld.h and
	  isector.h from icmdmgr.h which in turn means that cssys depended
	  on csengine.
	- Andrew also removed the unneeded inclusion of lightdef.h from
	  3D renderers. lightdef.h should go into include/csengine in the
	  end.
	- Andrew added a small NULL 3D renderer for use with simple CSWS
	  programs. It contains a full-featured texture manager and
	  displays only 2D pixmaps, the DrawPoly* functions are empty.
	  It is very small and is useful if you want to statically link
	  in a small project that makes use of CSWS.
	- Norman Kramer did a coding style change to csTreeNode.
	- Norman fixed glide renderer after Jorrit broke it yesterday.
	- Norman added ForceFullRedraw() to CSWS for integration of CSWS
	  into usual 3D programs.
	- Norman added wscs3d app to demonstrate how to combine CSWS
	  with the 3D engine. Press 'd' when running this app to open
	  a CSWS dialog.
25-Jun-2000
	- New tree control in CSWS from Norman Kramer.
	- Did an experiment for speeding up OpenGL by putting the setup
	  commands for DrawPolygon in a display list. Did not seem to
	  help much though.
	- Added CALLBACK_MESH in the engine to support edge drawing for
	  meshes.
	- Added iGraphics3D->GetObjectToCamera(), GetClipper(),
	  GetPerspectiveCenter(), and GetPerspectiveAspect() to
	  fetch those respective entries from G3D.
	- Implemented mesh drawing for DrawTriangleMesh in WalkTest.
	  This means that when you press 'e' (to enable edges) you'll
	  see the edges of all rendered triangles for terrain, curved
	  surfaces, and 3D sprites in green.
	- Eric Sunshine fixed a bug in the 'depend' target of the BeOS
	  OpenGL makefile.
	- Eric Sunshine eliminated some compilation warnings in the OpenGL
	  renderer.
24-Jun-2000
	- Received another lighting patch from Travis McIntosh.
	  Dynamic lighting on curves should be better now with no
	  artifacts.
	- Disabled multi-texture extension support again. At the moment
	  it is not given much performance benefits (at least for me)
	  and there are some bugs (i.e. disabling texture mapping doesn't
	  work and blending mode isn't correct).
	- OpenGL::DrawPolygon was doing some unneeded work. I removed
	  it so this should speed it up a little.
	- Moved scaling of lightmap from OpenGL::DrawPolygon to the
	  lightmap cache so that this doesn't have to be repeated
	  every time.
23-Jun-2000
	- Made tweening default again for sprites. Also added missing
	  initialization of the tween setting in sprite templates.
	- Received a new patch from Travis McIntosh to speed up dynamic
	  lighting for curved surfaces.
	- Eric Sunshine made another fix to Dungeon plug-in in response to a
	  fix by Martin to Eric's fix to Martin's fix. :-)  Martin's most
	  recent change triggered an internal NextStep compiler error again.
	  *Hopefully* this fix will be acceptable to all compilers.
	- Wouter Wijngaards added the start for a bounding box implementation
	  for particle systems that will help for visibility culling of them.
	- Eric Sunshine fixed a bug in map2cs where it failed to assign unique
	  names to the Things which represent curved surfaces.  This had the
	  unfortunate side-effect of causing the engine to cache several
	  lightmaps in the zip file with the same name.  For instance, in
	  Nicholas Blumire's funky.zip map, the lightmap name "room__c2_0"
	  appeared nine times.  This, in turn caused csArchive to to fail to
	  write the zip file when changes were made to it following the
	  initial lightmap creation (for instance, if -revis was used later).
	  In fact, once the archive was marked as dirty, csArchive would
	  attempt and fail to write it out each time an entry, such as a
	  lightmap, was read from it.  Since there are nearly 4,400 lightmaps
	  in funky.zip, this meant that csArchive tried and failed to write
	  out funky.zip nearly 4,400 times during a single run of WalkTest!
	- Eric Sunshine fixed a few compilation problems with vfs.cpp which
	  manifested when VFS_DEBUG was defined.
	- Eric Sunshine added a new class to csUtil named csMemFile.  This
	  class represents a raw memory buffer which implements the iFile
	  interface.
	- Eric Sunshine reworked the code which caches PVS information in the
	  zip file so that it now works via the new csMemFile class rather
	  than working directly with VFS.  This change had the remarkable (and
	  intended) effect of reducing time taken to cache PVS information
	  from nearly 25 minutes to less than 1 second!
	- Eric Sunshine reworked the code which caches Octree information in
	  the zip file so that it also works through the new csMemFile class.
22-Jun-2000
	- Got a new patch from Travis McIntosh.  This patch finished
	  dynamic lighting for curved surfaces. Still a bit slow but it
	  works very well already. WARNING! Please do -relight or -recalc
	  on levels that have curved surfaces! The lightmap format has
	  changed (lightmap got bigger).
	- I discovered that sprite tweening is enabled by default. Because
	  this makes things slower I disabled it by default and added a
	  function csSprite3D::EnableTweening() with which you can enable
	  it again. I also added csSpriteTemplate::EnableTweening() and
	  provided support for a new TWEEN keyword in the world file for
	  both sprites and templates.
	- csPolygonSet::GetBoundingBox() will now try to create the bounding
	  box if it doesn't exist.
	- Rene Dudfield experienced a strange crash in WalkTest which seemed
	  to have been caused by using 'fabs'. I replaced most occurances
	  of 'fabs' with the 'ABS' macro throughout the source to avoid this
	  problem. Maybe this problem is cyrix related? (Rene has a cyrix
	  processor).
	- Eric Sunshine made the definition of the explicitly sized types
	  int8, uint8, int16, uint16, int32, and uint32 optional in
	  cstypes.h.  Definition of these types is now controlled by makefile
	  and C-preprocessor variables named CS_BUILTIN_SIZED_TYPES.  This
	  change was necessary in order to support BeOS since the BeOS system
	  headers already define these types.
	- Wouter Wijngaards fixed rain and snow so that particles will not
	  disappear on slower systems.
	- Eric Sunshine eliminated a compilation warning in the Dungeon
	  plug-in which was reported by BeOS compiler.
	- Eric Sunshine eliminated a couple compilation warnings in the
	  OpenGL renderer.
	- Eric Sunshine fixed a typographical error in cssysdef.h
	  (OS_BEOS --> OS_BE) to allow the networking code to compile on
	  BeOS.
21-Jun-2000
	- Norman Kramer added new SetViewArea for gridviews to retsrict the
	  area they can show.
	- Added 'colors' to the tesselated version of a curve so that
	  drawing curves will be much more optimal. This means that we'll
	  have to update this whenever the lightmap or tesselation changes
	  of course.
	- Use DrawTriangleMesh now for drawing curved surfaces. Still not
	  complete though. I need to implement correct clipping (currently
	  the curve will always be clipped which means you'll get the
	  non hardware accelerated version of DrawTriangleMesh) and vertex
	  fog is also not implemented. Note it should already be somewhat
	  faster since lighting is now cached with the tesselated curve
	  and is only recalculated when either lighting or the tesselation
	  changes.
	- Removed AddBoundingPolygons from csCurve because it is obsolete
	  and needs to be implemented otherwise.
	- Added GetObjectBoundingBox(), GetCameraBoundingBox(), and
	  GetScreenBoundingBox() to csCurve. This is now used to cull
	  away curved surfaces that are off-screen or off-portal and
	  to indicate if they should be clipped. This should greatly
	  speed up curved surfaces now and use DrawTriangleMesh to its
	  (current) fullest potential.
	- Implemented vertex fog for curved surfaces too.
	- Eric Sunshine repaired the Dungeon plug-in following Martin's fix
	  to Eric's fix.  Martin's fix triggered an internal compiler error on
	  NextStep, so Eric re-fixed it in a manner which should suit everyone.
	- Eric Sunshine eliminated a "signed vs. unsigned comparison"
	  compilation warning in Blocks which was reported by MacOS/X Server.
	- Fixed the alpha test in perftest which stated that it would
	  do texture mapping while it didn't.
	- Added a patch from Thomas Krug to enable perspective correct
	  texture mapping for OpenGL DrawPolygonFX. The patch is disabled
	  though becuase it is slower (does a divide) and also not consistant
	  with how DrawTriangleMesh behaves. I think this is a feature
	  that needs to be optional.
	- Norman Kramer did a dramatic speed increase in the glide renderer.
	  Performance went up with 0.1 FPS!!! :-)
	- Eric Sunshine eliminated a warning about 'yyval' possibly being used
	  uninitialized in support/gnu/bison.sim.
	- Eric Sunshine made the following changes to the Dungeon plug-in:
	    - Eliminated 65 apparently bogus compilation warnings about 'this'
	      (or 'a' in some cases) possibly being used uninitialized.  This
	      warning appeared each time a parser rule assigned to $$ and then
	      used $$ in a following expression.  The warning appears to have
	      been completely bogus since it's obvious from simple inspection
	      that $$ had a valid value before being used in the subsequent
	      expression.  This warning was issued by at least three different
	      versions of the GNU C++ compiler which I used.
	    - Modified the makefile so that it automatically recreates
	      dnp_tab.cpp and dnp_tab.h from dnp.y if they are missing or out
	      of date.
	    - Modified the makefile so that it uses CS's support/gnu/bison.sim
	      to generate the parser in dnp_tab.cpp since our own bison.sim
	      has been fixed to eliminate the warning about 'yyval' being used
	      uninitialized.
20-Jun-2000
	- Changed csDynLight::SetColor() so that it will work without
	  having to call Setup() later. This is MUCH more efficient if you
	  have a dynamic light that doesn't move but only changes color.
	  It is also more consistant.
	- Changed default halo parameters a bit to more resemble a cross.
	- Added SNOW, RAIN, FIRE, and FOUNTAIN keywords to the world
	  file format.  For a simple fountain use:
		FOUNTAIN 'fount1' (ORIGIN (x,y,z) TEXTURE ('green.gif'))
	  For snow use:
		SNOW 'snow' (BOX (x1,y1,z1,x2,y2,z2) TEXTURE ('snow.jpg'))
	  There are many more options.  See docs/incoming/worldfmt.tex for a
	  list.
	- Wouter Wijngaards added a fountain particle system.
	- Added 'fountain' console command to create a fountain.  The first
	  argument is the texture (default is 'green.gif' until we find a
	  better splash texture).  The second argument is the number of
	  particles (default is 50).
	- Wouter added a fire particle system.
	- Added 'flame' console command to create a flame.  The first
	  parameter is the texture (default is 'raindrop.png'). The
	  second argument is the number of particles (default is 50).
	- Enabled extensions in OpenGL renderer.
	- Disabled the experimental optimization in DrawPolygon for OpenGL.
	  It had a bad effect on performance.
	- Provided a default extension detection code for operating systems
	  other than Windows and Unix (with Mesa). Also made the extension
	  detection safe so that extensions are not used if you have
	  Mesa 3.0 or older.
	- Extend makefies for OpenGL so that OPENGL_PATH is used if USE_MESA=0
	  (similar to MESA_PATH).
	- Eric Sunshine made the following changes to the Blocks game:
	    - Fixed a nasty memory corruption bug.  HandleLoweringPlanes() was
	      writing one past the end of the States::filled_planes[] array
	      and clobbering the States::encodedData variable which followed
	      it.  This bug occurred at all times, but only manifested itself
	      when the network plug-in was available since encodedData is only
	      used by the networking code.
	    - Fixed a really bone-headed error where States::Init_game_cube()
	      was accessing 'zone_dim' before it had been initialized, thus it
	      failed to initialize the playing field in a meaninful manner.
	      This resulted in all sorts of bizarre problems on platforms where
	      'game_cube' isn't filled with NULL by default (and by accident).
	    - Fixed some memory leaks.
	    - Cleaned up the source and header files and removed a bunch of
	      dead code.
	    - Updated comments for Doc++ compatibility.
	    - Fixed the makefile's 'clean' target.
	- Eric Sunshine made the following changes to csBitSet:
	    - Constructor no longer attempts to allocate zero bytes from heap.
	    - Bits are now 'false' by default in new bitsets as a convenience.
	      Same applies to bits added when a bitset is grown with Resize().
	    - Resize() no longer tries to allocate zero bytes.
	    - Resize() no longer calls realloc() with a null pointer since
	      doing so crashes on some systems though it works on others.
	    - Resize() now frees byte array if resized down to zero.
	- Eric Sunshine repaired the Dungeon plug-in so that it once again
	  builds with the NextStep compiler.  A recent, large update to the
	  plug-in triggered several particularly rare NextStep compiler bugs.
	  This is almost certainly a new record for number of severe compiler
	  bugs triggered by a single update to a single module.  :-)
	- Eric Sunshine eliminated a few compilation warnings in the Dungeon
	  plug-in which were reported by George Yohng <cspace@mmts.nsys.by>,
	  though the bulk of them had already been fixed by Eric even before
	  receiving the problem report.
	- Changed curve system so that tesselated vertices are kept in a more
	  DrawTriangleMesh friendly format.
	- Did first attempt to use DrawTriangleMesh for curved surfaces. Not
	  enabled now because it doesn't work very optimal due to the way
	  lightmaps and lighting for curves work. We need to find a solution for
	  this. Maybe putting lighting in the tesselated curve might help.
	- Eric Sunshine made a pass through the makefiles for all plug-in
	  modules to ensure that every plug-in defines an SCL_* flag and
	  defines the correct parameters for use with static linking.
	- Eric Sunshine made a pass through the makefiles for all applications
	  to ensure that each one which uses plug-in modules also links with
	  static.cpp.
	- Eric Sunshine added a lot of missing entries to static.cpp.  All
	  plug-in modules which can be built with the CS makefile system now
	  have entries in static.cpp.  Also fixed several incorrect or out-of-
	  date entries.
	- Eric Sunshine fixed the 'clean' target in all application and
	  plug-in makefiles.  He also fixed several other errors and problems
	  found throughout the makefile system.
	- Thomas Hieber removed a problem for Map2CS on a map created by
	  Nicolas Blumire using q3radiant. Also some other minor fixes.
	- Thomas also did a small adjustment to the VC project files.
	- Andrew Zabolotny added pplBeginDraw() to CSWS for apps that need
	  low-level access to the CS plugins.
	- Martin Geisse fixed more compiler warnings.
	- Frank O'Connor fixed ext_w32.cpp so that it compiles on VC.
	  It was including cssysdef.h which is not legal for a file that
	  is being included (although technically it is a cpp file).
19-Jun-2000
	- Martin Geisse fixed a number of compiler warnings all over
	  the place.
	- Wouter Wijngaards added a new snow particle system.
	- Added 'snow' console command that works almost the same as the
	  'rain' console command.
	- Wouter also fixed a bug in csQuadTree as reported by Martin
	  Geisse.
	- Fixed a bug in 'rain' and 'snow' commands with speeds other than the
	  default.  Also made raindrop.png and snow.jpg default so you can
	  type just 'rain' or 'snow'.  Default number of particles is now 500.
	- Tried an experimental change to OpenGL to minimize the amount of
	  processing between glBegin/glEnd.  There is an OpenGL performance
	  FAQ which says you should do almost nothing except
	  glVertex,glNormal, glTexCoords, ...  calls between glBegin/glEnd.
	  So I changed DrawPolygon so that it first calculates and copies the
	  results in a few arrays.
	- Did another optimization in addition to the above one by using
	  glVertex4fv instead of glVertex4f (similar to glTexCoord2). According
	  to the same FAQ this should also improve matters.
	- Did another optimization but this is more a quick hack. In order
	  to avoid unneeded glBindTexture calls I now created a csglBindTexture
	  which remembers the old glBindTexture. I'm not sure that this
	  approach is totally safe and it is not tested well. Also it might
	  not work well with multi-texture extension. This is something
	  we need to test. I let it in for now so that it will actually
	  get tested :-)
	- Fixed a bug in csString as reported by George Yohng
	  <yohng@drivex.dosware.8m.com>.
	- Got a new patch from Travis McIntosh.  This patch finished
	  pseudo-dynamic lighting for curved surfaces.  Works nicely now.
	- Update from Andrew Zabolotny:
	    - Fixed the titlebar title that someone had broken for software
	      renderer (the window heading used to be empty last week).
	    - (Finally! :-) fixed the polygon clipper routines so that 2D
	      sprites (and 3D sprites as well) are clipped in 2D correctly.
	      The problem was not with the CS_VERTEX_INSIDE case, but with the
	      fact that sometimes for some CS_VERTEX_ONEDGE vertices it used
	      to generate incorrectly the 't' parametric value.  More
	      specifically, it happened when an edge was clipped more than
	      once (against several clipper edges).
	    - Fixed a bug in software renderer - all polygons were drawn one
	      pixel up.  E.g.  with the default renderer view with a 2 pixel
	      border on each side it worked like 3 pixels border at bottom and
	      1 pixel border at top.
	    - Implemented polygon drawing (clipped against other windows!) in
	      CSWS.  This is the first step towards implementing the solid
	      view window.
	    - Implemented a little bit of solid view window in MazeD.  It is
	      very limited and buggy for now, but thats a start.  Texture
	      mapping doesn't work (all vertices get u/v == 0) thus you will
	      see strange colors for textured polygons.  Flat-shaded polygons
	      work.
	    - Added a new random number generator class to csutil library.
	      Currently it is unused but I'm going to use it in future,
	      besides we can switch existing code from rand() to it.
	- Eric Sunshine worked around OpenStep problem where run-time
	  construction of global BSP-polygon pool was being botched.
	- Eric Sunshine eliminated several compilation warnings throughout the
	  project which were flagged by the OpenStep compiler.
	- Eric Sunshine eliminated several compilation warnings in the
	  Dungeon plug-in.
	- Eric Sunshine fixed a couple bugs in the Dungeon plug-in:
	    - Was applying delete[] to the middle rather than the beginning of
	      a character array in yywrap().
	    - Was leaking the 'filename' string of an included dungeon file.
	- Eric Sunshine csRandomGen so that it works with compilers which do
	  not provide a native 'bool' type.
18-Jun-2000
	- Norman Kramer fixed Squawk and csgame following the recent
	  modifications in sprite creation.
	- Martin Geisse removed another compiler warning in dungeon plugin.
	- Added two new tests to 'perftest' to test how grouping of textures
	  in the 3D rasterizer might benefit performance.  It seems that this
	  would give a great benefit indeed.
	- Got a new patch from Travis McIntosh to start work for supporting
	  pseudo-dynamic lights and curved surfaces.  Not finished yet.
	- Eric Sunshine made the following changes to the Crystal Space
	  documentation:
	    - Repaired all of the errors and warnings reported by 'makeinfo'
	      after recent changes to the Texinfo source documents.
	    - Repaired all of the TeX formatting problems which cropped up
	      with recent changes to the documentation source files.  Mostly
	      these problems involved overfull and underfull hboxes.
	    - Overhauled portals.txi.  Performed a much more thorough Texino
	      conversion on it.  Replaced the ASCII-art with real images.
	      This looks much nicer in the printed and HTML output.
	    - Cleaned up the win32.txi build documentation following some
	      recent changes to it.  Fixed several mark-up problems and also
	      re-wrapped source file to 80-column width.  Added a slew of
	      missing cross references.
	    - Performed a more thorough Texinfo conversion on memdgb.txi and
	      also renamed it to memdebug.txi.  Fixed several Texinfo mark-up
	      problems as well.
	    - Created a new section (portable.txi) which discusses portability
	      issues when writing code and creating resources for Crystal
	      Space.  Most of the content of this section actually comes from
	      the older coding.txi file which now contains only Coding Style
	      guidelines instead of a mixture of both.  Also expanded the
	      portability guidelines and added a lot of missing discussion.
	      Corrected some mis-information which was recently added to these
	      discussions.
	    - Overhauled lighting.txi.  Cleaned up much of the Texinfo mark-up
	      and also rewrote sections of the document.  Replaced the
	      ASCII-art with real images.
	    - Removed the mipmap.txi and texcache.txi files which Martin
	      recently converted since they were excessively out of date,
	      meaningless, and confusing to the reader (since they didn't
	      reflect reality).
	    - Added missing Texinfo mark-up to viscull.txi.
	- Eric Sunshine syncrhonized the contributor lists on the Crystal
	  Space web page and the one in the Crystal Space manual
	  (intro/contrib.txi).  This involved adding contributors to each
	  document which appeared in only one or the other document, and in
	  some cases neither.
	- Eric Sunshine repaired the particle system so that it once again
	  works on NextStep.  Recent changes to the class hierarchy managed to
	  trigger a NextStep multiple-inheritance compiler bug which caused
	  particle systems to crash.
17-Jun-2000
	- Wouter Wijngaards changed quadtree so that the potentially confusing
	  up and down terms are gone (trees were apparently upside down in the
	  Netherlands).
	- Fundamental change in how the particle systems work.
	  A particle system now also inherits from csSprite and
	  is controlled like other sprites. So for the engine as
	  such a particle system behaves just like any other sprite.
	  In addition a particle system will now control its own
	  children. So sprites inside a particle system will not be
	  added to the entire world anymore but will be local to
	  the particle system. This will make optimizations (i.e.
	  DrawTriangleMesh) and visibility for the entire particle
	  system easier to manage. A particle system of 1000
	  particles would cause 1000 visibility checks in the engine.
	  Now the entire particle system can be handled with one check.
	- csSprite now expects a new 'parent' csObject which can currently
	  be either csWorld or csParticleSystem. This is an important
	  change which will require changes in potentially all applications
	  using CS. csSpriteTemplate::NewSprite() also has the new
	  parent parameter.
	- Norman Kramer added a new grid and slider (splitter handle) class
	  and a WindowToClient method for csWindow (for CSWS).
	  Norman also added this new csGrid dialog to cswstest.
	- Martin Geisse removed some warnings in dungeon plugin and
	  removed a non-useful feature. In addition he added some new
	  features.
16-Jun-2000
	- Improved the 'rain' console command in WalkTest so that it
	  adds rain to the entire current sector. There are now three
	  parameters: 'rain raindrop.png,100,2'. 100 is the number of
	  particles. Use more particles for bigger sectors. 2 is the
	  speed in meters per second.
	- Fixed a pretty severe memory leak in the c-buffer. This leak
	  could trigger in any use of the c-buffer but it was most
	  obvious when doing lighting or radiosity.
	- Fixed another bug with 'rain' command in sectors that have
	  no polygons.
	- Martin Geisse fixed a small compilation error in mdl2spr.
	- Martin also removed cleanup() call from Win32 system driver.
	- Martin did a minor bugfix to dungeon plugin.
	- Eric Sunshine fixed an error in MazeD.cfg.
	- Wouter Wijngaards did some fixes on csQuadTree again to make
	  it easier to grok by other compilers.
	  Wouter also added a rediculously fast TestRectangle routine
	  to csQuadTree :-)
	- Robert Bate updated the Mac project files.
15-Jun-2000
	- Cleaned up some debugging stuff for c-buffer from WalkTest.
	- Moved csOjbectStuffFactory::Initialize to csObjectStub.
	- Moved csPolyTreeObject::RemoveData to csObjectStub.
	- Added new classes csSphereStub, csSphereStubFactory, and
	  csSphereTreeObject. These will be used for adding bounding
	  spheres to a polygon tree. The implementation of these classes
	  is not finished though.
	- Moved glViewport() from OpenGL 3D renderer to the 2D canvas
	  drivers for OpenGL. The reason for this is that some specific
	  canvas (used for embedding for example) may want another
	  viewport.
	- Cleaned up debug_dump() and cleanup() junk from all apps.
	  WalkTest now does this on its own with code inside
	  #ifdef OS_UNIX. This isn't pretty but it is debugging stuff
	  anyway and at least it doesn't contaminate other apps that
	  don't need this.
	- Wouter Wijngaards added new csRainParticleSystem to simulate
	  rain.
	- Added 'rain' console command to create a new rain particle
	  system. Experimental right now. Doesn't work perfectly yet.
	- Martin Geisse added new features to dungeon plugin.
14-Jun-2000
	- Added new command 'db_frustum' to debug the CheckFrustum routine.
	  This function expects an integer parameter and will draw an outline
	  around the first 'num' polygons that are reached by CheckFrustum.
	- Changed csFrustum constructor to accept a 'const' parameter.
	- Did the same fix to csCBuffer::TestPolygon() as was done with
	  csCBuffer::InsertPolygon() a few days ago.
	- Fixed a small bug in CheckFrustum which could cause different
	  results in different runs. i.e. it made the result of CheckFrustum
	  a bit unpredictable in some cases.
	- FINALLY fixed a very severe bug in the c-buffer which really
	  triggered only in VERY rare cases indeed. This bug caused errors
	  in lighting, PVS, rendering (in some cases), radiosity, ... (you
	  name it :-)
	- Got the first patch from Travis McIntosh
	  <Travis.McIntosh@student.oc.edu>. He changed the dynamic lighting
	  system to work on lightmaps instead of polygons. This is the
	  first step towards getting dynamic lights working with curves
	  too.
	- Andrew Zabolotny added a new CS_ZBUF_FILLONLY mode for
	  DrawPolygon() to be able to draw non-textured polygons with
	  Z-Fill mode. The hardware guys still need to implement it.
	- Norman Kramer fixed a warning about unused parameter in
	  freefont.cpp.
	- Norman also cleaned up some of the changes that Samuel did to the
	  glide port.
	- Martin Geisse converted more docs to TexInfo.
	- Thomas Hieber fixed CSWS so that it compiles with MSVC again.
	  Thomas also updated some VC project files and removed a few
	  warnings in dungeon plugin and software renderer.
13-Jun-2000
       - Samuel verbosely has been busy with the now called procedural textures:
           - Changed names from dynamic textures to the more correct term
             procedural textures.
           - The iGraphics3D method CreateOffScreenRenderer is now gone. All
             drivers are updated.
           - The software drivers procedural textures are now more memory
             efficient.
           - By default the software procedural textures use the main
	     renderers texture manager, which makes it more consistent
	     with the glide and back buffer opengl implementations. Within
	     this mode the engine can render to the texture.
           - The CS_TEXTURE_DYNAMIC_SHARE_HINT is now gone. In its place is a
             new hint CS_TEXTURE_PROC_ALONE. When this flag is selected the
             software procedural textures run internally at 8bit, they share
	     and utilise their own 8bit texture manager. (Before each
	     procedural texture had its own texture manager and cache..
	     this is no longer the case :). The engine cannot render to the
	     texture in this mode.
           - The iTextureHandle->TextureDynamicSyncPalette is now gone. This
	     is no longer needed, and makes the interface more consistent
	     across implementations. In its place is ProcTextureSync (),
	     which currently is an empty method, but is in preparation for
	     fine grained control of mip-mapping. The software texture
	     manager now keeps a single linked list of all 8bit canvases
	     it services.
           - Rewritten the opengl software procedural texture implementation.
             So that it can be rendered to by the engine.
           - Added a force32bitsoftware additional flag to opengl.cfg, which
             performs better with mesa and 16bit displays with a voodoo2.
             However, the problem with the transposition of red and
	     blue returns, this is probably a bug in Mesa3.3beta.
           - This is how it now works: csOpenGLProcSoftware now wraps an
	     instance of csSoftProcTexture3D. This instance is created via
	     a new interface iSoftProcTexture. csSoftProcTexture3D creates
	     its own texture manager and canvas. Subsequent software
	     procedural textures share this texture manager. Each
	     procedural texture registers itself with the software texture
	     manager, and passes its handle back to the
	     csOpenglProcSoftware class which stores it in a vector along
	     with its opengl texture handle. The app writer registers and
	     prepares all textures with the opengl texture manager, and then
	     starts rendering. Each texture handle not already present
	     within the vector is registered and prepared with the software
	     texture manager and its handle stored with its opengl
	     counterpart in a vector. Each iGraphics3D call which utilises
	     a texture is intercepted and the opengl texture handle
	     swapped for its software counterpart. On Print (csRect) the
	     opengl texture is updated with the new procedural texture
	     state, and also its software counterpart.
           - This change has required modifying the software drivers so
	     that the texture handle is not referred to within the
	     iPolygonTexture structure.
           - The CS_TEXTURE_PROC_ALONE_HINT has the effect of disabling the
             updating of the software texture managers versions of the
	     procedural textures, which improves performance but disallows
	     the engine from rendering to any procedural textures. For
	     this mode to operate all textures need to possess this flag
	     otherwise it'll revert to the slower mode.
           - Fixed the colours on the opengl back buffer implementation.
	     Voodoo2 owners now need Mesa beta3.3 from cvs for this to work.
	     Unfortunately glCopySubTexImage2D is now broken in cvs so I
	     cant implement this optimisation. The texture probably still
	     renders inverted, it does on the voodoo2. I dont think there
	     is an opengl trick to reinvert the texture, but I could be
	     wrong. Possible solutions are to intercept every draw call
	     and invert these or to copy over from the framebuffer
             to the texture line by line. The latter way is going to be
	     *slow*, the former would involve modifying transformation
	     matrices (i.e.  rotating by 180 degrees the world to camera
	     matrix about the lookat vector) within the driver and
	     inverting all vertices which are in screen co-ordinates.
             I wait for a better suggestion :).
            - Lastly Ive destroyed the performance of the opengl procedural
             textures, oops, need to investigate this :( Used to get about
	     70fps with the astext texture alone, this is now down to 10ish
	     with software textures. This might be Mesa3.3beta.
            - dtsimple is updated to demonstrate how to do things with the
              cleaner, more consistent interface.
            - Added new constructor for csImageMemory
            - Fixed typo in memdbg.sh
	- Added csPoly2D::Random() to generate a random convex polygon
	  (triangles only right now). This is going to be used for
	  debugging the c-buffer.
	- Cleaned up all compressed vertex/normal/texel stuff in csSprite3D.
	  This cleans up sprite code considerably. If this funcationality
	  needs to go back we'll have to implement it again in a cleaner
	  way.
	- Added csCBuffer::TestPoint() to test a single point in the
	  c-buffer.
	- Fixed LOD for 3D sprites. Looks as ugly as before but at least
	  it works again :-)
	- Wouter Wijngaards did some changes on csQuadTree again.
	  Now uses a more transparent storage ordering. Untested code,
	  but functionality for full culling should be present. Print()
	  method should work now (for debug). Perhaps I have removed
	  K. Robert Bate's mac port fix. But that fix provably breaks theu
	  VC port.... Anyway, perhaps I should look up the correct syntax
	  somewhere?
	- Andrew Zabolotny did the following changes:
	    - Fixed my fix regarding Eric's fix regarding halos yet again :)
	      2*SRC lighting did not work for halos.
	    - Fixed csFrustum::Classify(). Now it seems to work okay.
	    - Removed delaying of draw operations in CSWS. From now
	      on graphics pipeline always draws at the time the draw
	      routine is called. This both reduces memory usage by CSWS
	      programs (by ~500K) and removes the limit on the
	      number of graphics primitives that can be painted in one frame
	      (this was seen as uncomplete redraws when loading complex 3D
	      models in MazeD). Also it should be a little faster now.
	    - Fixed an old-standing bug that caused wrong window resizes
	      when switching MazeD screen resolution.
	- Andrew also updated the dimensions of the player in WalkTest
	  to be more realistic.
	- Frank O' Connor fixed a VerticesAreCompressed() call which Jorrit
	  forgot to remove in MazeD.
	- Frank also updated some of the VC project files.
	- Frank fixed a bunch of redefinition errors caused by defaults
	  in both the header and implementation (from Samuels large patch),
	  and removed the cases that resulted in the use of the
	  GL_UNSIGNED_SHORT_5_6_5. This is undefined on win32 GL.
12-Jun-2000
	- Thomas Hieber added basic support for WC3 (WorldCraft) file
	  format to Map2CS.
	- Robert Bate made a few fixes to csQuadtree so that it will
	  compile on Macintosh. Robert also added 'alloca.h' include
	  to cssys/mac/malloc.h.
	- Robert updated the Mac project files.
	- Frank O' Connor updated the VC project files for the dungeon
	  plugin changes that Martin did.
10-Jun-2000
	- Started a reasonably big redesign of the dynamic object system.
	  csObjectStub and csPolyTreeObject don't care about polygons
	  anymore. They are now simply objects and stubs that can be placed
	  in an octree (bsp tree). Specific subclasses (csPolygonStub
	  and csDetailedPolyTreeObject for example) can add the functionality
	  needed for splitting polygons for a bounding box of a sprite.
	  This allows easier and lighter versions of those classes as well
	  which don't split polygons but only store the nods where they
	  are visible.
	- 3D sprites now use the new design. 2D sprites haven't been
	  updated yet so they are still not visible with c-buffer enabled.
	  There is also a pure virtual function call at exit right now which
	  needs to be solved.
	- New db_dumpstubs console command to dump the stubs of the current
	  octree and the last added sprite to the world.
	- Fixed bug in BSP traversal with polygon stubs. 3D sprites could
	  sometimes disappear because of this bug.
	- Added csCBuffer::GfxDump() to debug the c-buffer.
	- New db_cbuffer console command to debug the c-buffer contents.
	  It will show the c-buffer online (all empty spans will be blue and
	  a small red line will be put in front of every completely full line).
	- Fixed a serious bug in the c-buffer. This bug could cause some
	  polygons to be span converted completely wrong in the c-buffer.
	  This could an occasional error in rendering (rather rare) and is
	  probably also the reason for various lighting errors using
	  the c-buffer cube (enabled yesterday) and visibility errors with
	  PVS.
	- Martin Geisse committed a huge update to the dungeon plugin.
9-Jun-2000
	- Moved a lot of PVS algorithm code into csPVSAlgo. That cleans
	  up csOctree a little.
	- Created new db_osolid debug command. This command will create
	  things for all solid space boundaries in an octree node.
	- Implemented bbox/octree visibility culling for 2D sprites. This
	  is probably a bit overkill (maybe we should only cull groups
	  like particle systems instead) but it will fix the bug that
	  2D sprites are not visible with c-buffer enabled.
	- Switched to C-buffer cube for lighting. This improves lighting
	  speed for dmburg from 30 seconds to about 8 seconds and it
	  seems to work reasonably well. This also improves speed of dynamic
	  lighting with about the same factor. Radiosity will also improve
	  by this.
	- Thomas Hieber fixed some of the VC project files and removed a
	  warning in the metaballs plugin.
8-Jun-2000
	- In an effort to completly fix PVS and make sure that everything is
	  ok I started adding extensive comments everywhere.
	- Changed the eight frustums in PVS to only one. This is more
	  efficient because we only need to clip the occluder polygon once
	  in that case.
	- Further work on csQuadtree from Wouter Wijngaards.
	- Wouter also made csBox2::Intersect() a const routine.
	- Did a very significant bug fix in PVS. This seems to improve
	  quality ENOURMOUSLY. It also results in a few errors but I'll have
	  to debug these seperately. This looks very promising indeed.
	- Fix for OpenGL 8 bit mode and palette from Thomas Krug
	  <thomas.krug@assix.de>.
	- Thomas Hieber fixed csQuadtree to make it compile on VC again.
	  MSVC was complaining about the various function pointer operators.
7-Jun-2000
	- Paul Garceau added RMDIR equivalent to mingw.mak for cross platform
	  compatibility.
	- Gary Haussmann added support for RGBA (transparent meshes) to
	  DrawTriangleMesh.
	- Fixed a serious bug in csPoly3D::CutToPlane(). It was completely
	  messed up.
	- Fixed a potential bug in PVS. Some of the routines didn't clear
	  the polygon as they should.
	- Fixed a bug in the frustum calculation of PVS. The planes were
	  computed completely wrong.
	- Restored body dimensions and disabled radiosity. The body
	  dimensions were changed to make flarge look more natural. But it
	  is flarge that should be fixed.
	- Made csloader more robust. It now detects planes which are badly
	  specified.
	- Wouter Wijngaards reimplemented the quadtree. It is likely
	  that this is going to be used for the PVS as well.
	- Fixed another bug in PVS.
	- Did a new optimization for PVS. If all children of a node are
	  not visible then the node itself will not be visible as well.
	- Wouter Wijngaards further worked on the new csQuadTree code.
6-Jun-2000
	- Fixed OpenGL GLX driver (2D driver for OpenGL/X Windows).
	  It was trying to find a visual with AUX buffers.
	- Wouter Wijngaards fixed a bad nested if construct in
	  libs/csengine/polygon/polytext.cpp that could cause compile
	  errors in some cases.
	- Wouter did some further improvements on radiosity.
	- Added csPoly3D::CutToPlane() to cut a polygon with a plane
	  and only keep the front side.
	- Added csPlane3::Set() to initialize a plane given three vectors.
	- Some work on PVS again. Tried to fix a serious bug with shadow
	  projection. Not sure that I actually fixed it. Will have to do
	  some more tests.
5-Jun-2000
	- Added a few const methods to csPoly2D as well.
	- Added a speed improvement to PVS. Before considering an
	  occluder (octree node) and the contents of that occluder we
	  first cast a shadow from that occluder on the plane. If the
	  shadow is non-existant (i.e. the plane is too far away from the
	  node) then the node will not be considered as a potential
	  occluder. If the shadow does exist then CS will also first test
	  it against the c-buffer on the plane to see if that part of
	  the c-buffer still contains unshadowed parts. If not then it
	  makes no sense to consider this occluder either.
	- Robert Bate updated the Mac project files and changed
	  max_texture_size from int to GLint so things will compile with
	  CW.
4-Jun-2000
	- Fixed serious bug with csPoly2D::Intersect() and csPoly2D::
	  ClipPlane() that could cause clipping errors in some cases.
	  This bug probably caused the bugs in the solid 2D BSP tree
	  that I never managed to find in the past.
	- Did an optimization reported to me by Norman Kramer with
	  regards to backface culling polygons. This happens throughout
	  CS and should increase performance a tiny bit (maybe not
	  noticable).
	- Removed a few unneeded methods in csPolyPlane. These methods
	  are only shortcuts to csPlane3 and are a little confusing
	  to have. Removed csPolyPlane::VisibleFromPoint(),
	  csPolyPlane::Classify() and csPolyPlane::Distance().
	- Concluded implementation of csPoly2D::ExtendConvex().
	- Further work on adjacent polygon merging for PVS. Not
	  finished.
	- Samuel Humphreys has been busy with the opengl drivers:
            - Rewrote the ogl backbuffer dynamic texture implementation, it now
              inherits from csGraphics3DOGLCommon and implements a dummy
              iGraphics2D which transforms vertex info to lower bottom left
              subregion of back buffer, and reports correctly width and height
              information. This has required splitting the old ogl_g3d.* into
              ogl_g3dcom.* and ogl_g3d.* Also two new private functions are
              added SharedInitialize and SharedOpen which have the same
              functionality as those in the software drivers.
              The engine now renders to backbuffer textures, but they are
	      still inverted and have corrupt colour information.
            - Added verbose visual information reporting to glx. Now reports
              about auxiliary buffers and properly fills in pfmt.
            - The ogl texture manager now detects and deals with maximum
	      texture constraints i.e. my voodoo2's 256x256 :)
            - Removed old software dynamic texture implementation.
            - Small fixes for canvas/common & dtsimple.
	- Wouter Wijngaards contributed newest radiosity version. Works
	  for portal levels. Now source patch size can be specified, say at
	  16x16 lumels. It allows radiosity to work in 16x16 lightmapsize
	  mode. Default is 2x2 lumels, but cryst.cfg has a 16x16 lumels.
	  Note that the destination patch size is still 1x1 lumel, thus
	  shadows are perfect, and lightmaps smooth.
	- Gary Haussmann added a line to bin/unixconf.sh to compile on
	  Linux/ia-64 platform.  Currently maps the ia64 to "PROC = UNKNOWN".
3-Jun-2000
	- Reworked the hashmap iterators. They didn't work that well in
	  all circumstances.
	- Added new csPolygonEdges class that takes a list of polygons
	  and creates a set of indexed edges.
	- Added 'const' to two csPolyIndexed methods.
	- Split octree.cpp into octree.cpp and pvs.cpp.
	- Added csPoly2D::ClipPlane() to clip a 2D polygon to a 2D
	  plane (i.e. line) and return the right side of that polygon.
	- Added csPoly2D::ExtendConvex() to extend a convex polygon
	  with another polygon while keeping the resulting polygon convex
	  again. This function is not fully implemented yet.
	- Started work on optimization for PVS that will try to merge
	  adjacent convex polygons into bigger occluders. Not finished
	  yet.
	- Burton Radonsxi commented out all traces of Unix in the allegro
	  driver and added in the "main" symbol defragilator.
2-Jun-2000
	- Samuel Humphreys added some further options to dtsimple and fixed
	  cleaning up. Dynamic textures clean up after themselves properly now.
	- Samuel also did some changes which gets the metaballs texture working.
	  Mainly to do with many iGraphics3D refering to one iGraphics2D
	    - The engine now keys of iGraphics3D rather than iGraphics2D,
	      to determine whether it needs to swap states.
	    - Metaball plugin now queries iGraphics3D for width and height of
	      context.
	    - Opengl: Converted back buffer dynamic texture vertex co-ordinates
              to render to the upper left subregion of the backbuffer.
	- Samuel added some keys in dtsimple so that you can play with
	  the warp transformation on the fly.
	    ',' & '.' vary the x component of the before vector.
	    'b' & 'n' vary the x component of the after vector.
	    'v' flips the transformation matrix on the x-axis.
	    The value of these parameters are reported on screen on the LHS.
	    Added a frame around the portal to make things easier to see.
	- Gary Haussmann added a workaround to allow Mac users to see text;
	  apparently the current Mac drivers do not support a pure GL_ALPHA
	  texture, so for the OS_MACOS platform we use GL_LUMENENCE textures
	  instead.  This means that text is not shaped (all letters are on
	  a black background instead of showing the picture behind them) but
	  at least you can see the text!
	- Made almost all variables in csCamera private and added some
	  accessor functions.
	- Made csCamera::SetFOV() virtual and override it in
	  csRenderView::SetFOV() so that we can calculate the angle of the
	  FOV in degrees there. This is needed for the terrain engine.
	- Use the new angle for FOV in terrain engine.
	- Fixed terrain engine so that the correct forward facing vector
	  is used.
	- Fixed terrain engine so that it will run correctly on software
	  renderer. This will make the OpenGL version slower so this is
	  a temporary fix until we implement a better solution.
	- Eric Sunshine fixed the CS_ASSERT() macro so that it now works as
	  expected; that is, it "asserts" that some condition is true.
	  Previously, the logical sense of the conditional test was reversed.
	- Eric Sunshine enhanced CS_ASSERT() so that it now prints a useful
	  error message before breaking into the debugger or crashing the
	  application, instead of dying silently.
	- Added csCamera::GetDefaultInvFOV() too. Fixed MazeD and csgame
	  for the csCamera changes.
	- Changed csPolygon3D::Covers() to csPolygon3D::Overlaps() as
	  this is actually what the function is calculating (and needs
	  to calculate). Suggested by Norman Kramer.
	- Added new csHashMap class to csutil. This is the first version of
	  a new hashtable class that can be used for several things.
	  This is untested code right now.
	- Fixed a bug in the iterator code of the new csHashMap class.
	- Norman Kramer changed config for Glide to access Glide section
	  instead of Glide2x.
	- Split octree.h into octree.h and pvs.h. Was getting a bit big.
	- Fixed bug 106203 on SF. Test for coplanar polygons at startup
	  was wrong. Should be ok now.
	- Eric Sunshine fixed a crasher in csSystemDriver::Initialize() where
	  it would try to dereference the null pointer when loading plugins.
	- David Durant removed myapp functions in WalkTest and replaced them
	  by chopping up several functions into finer details and making
	  them virtual.
	- Alex Pfaffe now clips blocks in terrain engine as needed. This
	  speeds up terrain considerably for OpenGL (still not fully
	  optimal but it is a lot better already).
	- Alex also added top level visibility info for bintree.
1-Jun-2000
	- Experiment with new octree generation method. Instead of only
	  favoring a center with few splits I also try to favor centers which
	  cause may polygons to fall exactly on the boundaries. This
	  could improve occlusion. However, this doesn't seem to improve
	  at all so it is disabled right now.
	- Samuel Humphreys did various updates to dtsimple. He added another
	  dynamic texture, this time with a portal. Unfortunately he hasn't
	  worked out the warp transform yet so the animation is disabled.
	- Samuel also did various fixes to some of the X 2D canvas drivers:
	  migrated the 'behave well under cantankerous window managers code'
	  into glx and linex. Also fixed a bug he introduced into metademo.
	- Alex Pfaffe added new terrain.zip for the new terrain engine
	  (with low-res textures).
	- Alex also fixed the terrain engine for software rendering and
	  reenabled fixed frustum clipping for Crystal Space.
	- Eric Sunshine eliminated several compilation warning in the terrain
	  library.
	- Eric Sunshine eliminated several compilation problems throughout the
	  project.
	- Eric Sunshine worked around a NextStep compiler shortcoming where it
	  failed to grok subclasses of csFrustumView::CleanupAction.
	- Eric Sunshine fixed a nasty bug where VFS was being created and
	  destroyed twice in applications which requested VFS explicitly with
	  RequestPlugin().  In addition to other problems caused by double
	  instantiation, this had the particularly undesirable effect of
	  creating and destroying VFS's global ArchiveCache twice, thus
	  resulting in a crash on some platforms.
	- Eric Sunshine fixed the 'clean' makefile target for Simple.
	- Robert Bate added rview.cpp to the Mac project files.
31-May-2000
	- Added a new allegro canvas driver from Burton Radonsxi
	  <loth@pacificcoast.net>.  This allegro driver is developed on Linux
	  and should work on Linux.  It will probably not replace dosalleg yet
	  since the new one depends on iunix.h.  We're looking into that.
	- Paul Garceau did another change to mingw.mak to accomodate auto-gen
	  of include\volatile.h for Mingw.mak.
	- Patch from Andrew Zabolotny:
	    - Removed the unneeded VFS->IncRef in systemdriver::initialize.
	      This removes the "1 unreleased instances" error at cleanup.
	    - Fixed the vshell plugin (it was creating a second instance of
	      VFS although VFS plugin is written such that it allows just one
	      instance).
	    - Slightly improved csFlags class.  WARNING: The former Set(int)
	      method is renamed to SetAll(int) now, Set(int) has a different
	      meaning!
	    - Moved bool csPolygon3D::dont_draw and bool
	      csPolygon3D::delete_portal to csPolygon3D::flags.  Another 8
	      byte win for csPolygon3D.
	    - Added macro CS_ASSERT for system-independent assertions.  It
	      will fire a debug breakpoint if the assertion fails (rather than
	      printing a error message which is useless in CS for many
	      platforms).
	    - There is also a DEBUG_BREAK macro (which is empty for non-debug
	      mode).  You can use it if you want to fire a debug breakpoint
	      under some complex conditions (for simple conditions you may use
	      CS_ASSERT).  Currently it is defined only for x86 processor.
	    - Found and fixed a bug (that maybe the one reported by Jorrit in
	      past) with VFS creating invalid archives.  The problem was that
	      the contents of "lazy" array were simply appended to "dir" array
	      (after csArchive::Flush) while they should be InsertSort'ed.
	    - Removed csFrustum::Intersect and csFrustum::IntersectFull
	      methods.  Added instead csFrustum::Classify() which is faster
	      and less buggy.  There is still a bug somewhere but its already
	      better than the old one.
	    - Caught and fixed a bug in software halo drawer introduced by
	      Eric.
	    - Many other small changes I don't remember now.
	- Added csBox2 and csBox3::Contains() functions to test if some box
	  contains another one.
	- Fixed PVS test with adjacent nodes.  It was not correctly testing if
	  one box contained the other.
	- Eric Sunshine fixed compilation errors on some platforms in
	  soft_txt.cpp where it was trying to implicitly cast void* to
	  RGBPixel*.
	- Eric Sunshine eliminated a compilatioin warning in polytext.cpp and
	  also made it work with the buggy OpenStep compiler.
	- Eric Sunshine eliminated more linkage problems caused by
	  inconsistent use of 'inline' in csterrain library.
	- Eric Sunshine fixed software renderer halos (again) for big-endian
	  32-bit NeXT machines following Andrew's change which broke them.
	- Eric Sunshine fixed out-of-date key names in several configuration
	  files (in data/config) following renaming which Andrew performed in
	  the source code.
	- Eric Sunshine fixed the 'clean' target for ndrvdem.
	- Eric Sunshine reverted Andrew's changes to csVector's Find() and
	  FindKey() since they broke other parts of the system.  He changed
	  the functions so that they search the vector from tail to head
	  rather than head to tail.  Unfortunately, other parts of the system
	  (even Andrew's own code) rely on the head to tail order.  An example
	  of this is csSystemDriver::GetOptionCL(), which broke after Andrew's
	  change.
	- Martin Geisse fixed a VC5 specific compilation error.
	- Frank O'Connor updated VC project files for new MetaBall plugin
	  and some other stuff.
	- Norman Kramer fixed a bug in CreateOffScreenRenderer for Glide
	  that someone introduced, now compiles again.
30-May-2000
	- Alex Pfaffe did some minor fixes and cleanup in the terrain
	  engine. Alex also fixed a bug w.r.t. vertex reuse in buffers.
	- Fixed an inline problem in DDG terrain engine and a small other
	  fix.
	- Added a number of 'const' declarations to members in csPoly3D.
	- Fixed a number of warnings in the WalkTest changes from David
	  Durant.
	- Still show the warning when RAPID plugin cannot be loaded by
	  WalkTest but doesn't fail anymore.
	- Extended BSP tree traversal with an extra flag 'same_plane' so
	  that the BSP traversal routines know if all given polygons are
	  on the same plane or not. This could be used for optimizations.
	- Changed BSP building so that it better detects the case where
	  all polygons are coplanar and indicates that in the node.
	- Added csPolygon3D::IntersectRayPlane() to intersect a ray
	  with the plane of a polygon.
	- Wyatt Miler did a few fixes to terrain engine as well.
	- Debugging version of radiosity from Wouter Wijngaards.
	- Got a large patch from Samuel Humphreys with the following changes:
	    - Adds a couple of new walls, bots and another dynamic texture
	      to dtsimple. The new dynamic texture is rendered by the engine
	      as the bots point of view, or as a manually configurable view
	      from (0,0,0). Only works with the software drivers currently
	      in 8, 16 & 32 bit modes. The opengl software texture version
	      will not work...it will crash. The backbuffer opengl version
	      will not work, but won't crash. I think the glide version will
	      work, can't test this though.
	    - Added new flag to iTextureManager: CS_DYNAMIC_TEXTURE_SHARE_HINT.
	      See explanation there.
	    - Added many more keys to fiddle with in dtsimple.
	    - Added another software dynamic texture implementation to the
	      software drivers. This implementation shares the texture manager
	      with the parent context. This allows you to render to it with
	      textures that you have already registered with the parent
	      context i.e. a map view courtesy of the engine.
	    - In pursuit of this added functions to the software 3d drivers
	      which allows the initialisation and opening of the driver
	      according to another driver while sharing resources. The
	      sharing software dynamic texture utilises these functions.
	      This is also in preparation for the window manager...coming
	      soon!
	    - Pluggified metaballs and updated metademo and dtsimple as
	      appropriate.
	    - Added more parameters to vary to see what happens in metademo.
	    - Added a couple more functions to iSystem, which are implemented
	      in system.h/cpp, so shouldnt break anything. These are queuing
	      functions for two new windows messages.
	    - Added two new windows messages. ..ContextResize and
	      ..ContextClose.
	    - Updated the engine to deal with new messages
	    - 'Multiplexed' the engine. Added new function
	      csWorld->SetContext(iGraphics3D *g3d). This allows the engine
	      to swap states according to g3d. The new dynamic texture
	      demonstrates this.
	    - Fixed the annoying bug in the Xlib software drivers where on a
	      fresh Xserver session the window placement wouldn't behave for
	      the first three or four times. Borrowed the trick from gdk :).
	      Much more window manager friendly now...i.e. Crystal Space is
	      beginnning to behave politely!
	    - Migrated XLib changes into the line drivers.
	    - Added resizing to the line drivers.
	    - Got rid of a static file scope variable in the software
	      texture manager.
	    - Small makefile fixes for blocks and csauth.
	- Did a fix to dump(csPolygon3D*) for polygons with no name.
	- Eric Sunshine removed the Crystal Space-specific includes and macros
	  which had been added to ddgutil.cpp.  In general, we want to keep
	  the terrain files as free of CS stuff as possible so that the same
	  code works well for Alex in DDG.  The typical place to put CS code
	  is in ddg.h, and only within a __CRYSTAL_SPACE__ block.
	- Eric Sunshine eliminated several compilation errors and warnings in
	  the terrain library.
	- Fixed terrain engine so that it renders triangles again. Still
	  have to work a bit on speed and other issues.
	- 'Probably' fixed the solid space calculation for real now :-)
	- Now that solid space calculation works I fixed PVS to use it
	  in a safe way. Solid space for node boundaries is not reflexive.
	  Even if node A cannot see B it is still possible that B can see A.
	- Eric Sunshine worked around NextStep compiler multiple-inheritance
	  problem in dtsimple's Bot code where it called SetPosition() and
	  crashing the application.
	- For debugging: control precisely what parts of PVS are done
	  and what not.
	- Added 'bool cd' parameter to csCamera::Move and MoveWorld to
	  allow moving around the world without collision detection to
	  sector walls and vice versa. Portals are still checked though.
	- Fixed collision detection option in WalkTest so that it now
	  also works for STATBSP levels (i.e. you can walk through
	  things).
	- Fixed db_octree console command in WalkTest so that you can
	  actually use db_octree -1 to show the leaves.
	- Fixed a serious bug in PVS again. The solid boundary optimization
	  was in fact used completely wrong. Unfortunatelly this decreases
	  PVS quality a bit. PVS is still not completely right though.
	- Changed PVS building so that first pass is now the solid space
	  PVS pass and second pass is full PVS. This improves speed and
	  quality a bit.
	- Changed solid space point tester so that it now requires a
	  number of directions for which the solid space test succeeds.
	  This decreases the chance of an error cause by bad polygons
	  in the input data.
	- Extended dump of octree nodes with the values of the calculated
	  solid masks for the six directions.
	- Updates to Macintosh projects from Robert Bate.
	- Samuel Humphreys added some comments to the x2d.cpp code.
29-May-2000
	- Alex Pfaffe did some fixes on terrain engine. He also resynced
	  with DDG. Various bug fixes and optimizations.
	- Small fix to terrain engine (removal of bogus 'inline').
	- Found a serious bug in PVS (more exactly the calculation of solid
	  space between nodes). Note that I didn't fix the bug yet :-)
	- Added more debugging information when dumping the octree/bsp tree.
	- David Durant started reworking myapp functionality in WalkTest
	  using proper subclassing.
	- Eric Sunshine eliminated a compilation warning about multi-line '//'
	  comment in ddgbtree.cpp.
	- Eric Sunshine fixed several warnings throughout the project reported
	  by EGCS 1.1.2.
	- Eric Sunshine added a lot of missing 'const' qualifiers to csrect.
	- Eric Sunshine fixed the 'clean' target in mazed.mak.
28-May-2000
	- Changed the way csPolyTree::ClassifyPoint() works. Instead
	  of assuming space is open and testing six directions to prove
	  it is solid (all six directions must be solid) we now
	  assume space is solid if we find only one direction for
	  which space is solid.
	- Added csPoly3D::GetCenter() which computes the center of the
	  polygon and returns it.
	- Improved the solid space generator so that it is now much more
	  likely to say that a node boundary is solid. This should improve
	  PVS considerably.
	- Added patch from Michael Ewert on csphyzik library. Here is his
	  comment:
	    "I made some good progress on csphysiks. I've got collision
	    response working for articulated bodies quite nicely.
	    This is an important milestone for me, and adds some
	    very cool functionality.  One of the more common
	    things that game developers get excited about when
	    talking about physics packages is realistic response
	    of characters to being shot or being hit with a 2x4,
	    or other equally pleaseant events :)  Anyways, thats
	    what I've got working now.
	    I will update documentation and add a decent test app
	    sometime in the near ( or not so near ) future, so
	    other people can actually use this stuff."
	- David Durant added myapp hook functionality.
27-May-2000
	- Worked a bit more on 'perftest'.
26-May-2000
	- Fixed bug in PVS building. The selection of the plane for the
	  c-buffer could fail with nodes that are close together.
	- Added csBox3::GetVisibleSides() to return all visible sides of
	  a box as seen from a point in space.
	- Added csIntersect3::BoxSegment() routine to test if a segment
	  intersects with a box. This routine will also return the
	  intersection point.
	- Greatly optimized csSector::HitBeam() so that it is now LOTS
	  faster. It now uses the octree node hierarchy to avoid traversing
	  nodes that the beam doesn't intersect with.
	- Added iPolygonMesh interface so that the engine can communicate
	  3D geometry to other plugins. This will be used by the collision
	  detection system plugin. iPolygonMesh is not implemented yet
	  though.
	- Added iCollider and iCollideSystem interfaces. iCollideSystem
	  is an SCF plugin that implements a particular collision
	  detection algorithm. Further work will be to make the current
	  RAPID CD system a plugin implementing this interface.
	- Added implementation for RAPID CD plugin (UNTESTED). This
	  should be our current implementation of RAPID CD.
	- WalkTest now loads the iCollideSystem plugin at startup.
	- Implemented csPluginCollider inside the engine which encapsulates
	  a collider using the plugin system. This is temporary until
	  the plugin CD system has been debugged. After that engine will
	  only work through plugins.
	- Did various cleanups on the include/i*.h files. Many files are
	  missing Doc++ comments and some were missing LGPL header.
	- Paul Garceau did some changes to terrain renderer to set default
	  for P-III to zero (for the SIMD code that is in the terrain engine).
	- Wouter Wijngaards did some further debugging on radiosity.
	- Created new 'perftest' application to test the performance
	  of a 3D renderer. This application will try various tests to
	  see how fast the 3D renderer is.
	- Eric Sunshine reverted Paul's change to ddgUtil::DetectSIMD() since
	  it broke Alex's DDG.  Re-implemented it in a fashion which should
	  work for everyone.
	- Eric Sunshine reverted Paul's change to the #includes of ddgutil.cpp
	  since they broke the terrain library for all other Windows compilers.
	  Reimplemented his change in a way which won't break other stuff.
	- Eric Sunshine reverted Paul's change to ddg.h since it unnecessarily
	  complicated the already complicated conditional compilation
	  controls.  Re-implemented Paul's change in a much simpler fashion
	  and also simplified the rest of the conditional compilation controls
	  at the same time.
	- Eric Sunshine reverted Paul's changes to the volatile.h generation
	  code in the makefiles for several reasons:
	    o He changed the semantic meaning of MAKE_VOLATILE_H, making it
	      less flexible, order dependent, and less robust.  That is, after
	      his change, one had to be very careful about the context in
	      which MAKE_VOLATILE_H was used, whereas previously no such
	      restriction applied.
	    o He added a large section of copy/paste code to mingw.mak which
	      unnecessarily increased maintenance costs and fragility.
	    o Most of the changes were simply unnecessary.  It appears that
	      much of the trouble was caused by a misplaced definition of $".
	  My fixes were twofold.  Fist I corrected the $" problem so that it
	  is in scope in the proper contexts.  Second, I further generalized
	  and abstracted the actual emission of volatile.h so that
	  platform-specific makefiles can intercede at all points of the
	  process, if necessary.  Having accomplished this, I added very
	  simple special-case code to mingw.mak to perform the transformations
	  on volatile.h which Paul required.  This allowed me to eliminate all
	  the copy/paste code which he had added while still retaining
	  flexibility.
	- Eric Sunshine updated documentation to reflect fact that WalkTest
	  now requires that new "rapid" plug-in exist at run-time.
	- Eric Sunshine finished the task of renaming "font renderer" to "font
	  server" by renaming all classes, files, variables, and interfaces.
	- Frank O'Connor did some fixes to MSVC project files and added new
	  RAPID plugin.
	- Frank also removed a few warnings in OpenGL dynamic texture
	  implementation.
25-May-2000
	- Moved initialization of 2D culler cube into CheckFrustum.
	  This fixes radiosity. As it was now it simply could not work
	  correctly because of this bug.
	- Fixed another bug in radiosity with handling of the light
	  frustum.
	- Extended csSector::HitBeam() with an extra parameter that returns
	  the intersection point with the polygon that is hit.
	- Added csOctree::BoxCanSeeOccludeeSuperSlow() function. This function
	  tests if two nodes can see each other. It is very very slow and
	  will actually NEVER return if the nodes cannot see each other.
	  So the only expected result of this function is 'true' or
	  else infinite loop. This function is for debugging only.
	- Fixed the huge room so that it no longer crashes (-huge option
	  for WalkTest).
	- Wouter Wijngaards fixed various other problems in radiosity
	  based on the fixes from Jorrit.
24-May-2000
	- Some changes to terrain engine from Alex Pfaffe.
	- Fixed another problem in octree building which could cause
	  differences in the octree on various problems. This is not really
	  a bug but I like to have the generated octree the same on all
	  platforms to easy debugging and make bugs more reproducable.
	- Received a patch from Samuel Humphreys for dynamic textures:
	    - Seperates metademo into reusable chunks and cleans up some stuff.
	    - dtSimple now has two animated textures. The second is the
	      metaballs.
	    - Use F1 to toggle on/off first texture animation; F2 for other.
	    - INS/DEL/BS/HOME/END/TAB to control MetaBalls.
	- Eric Sunshine fixed a bug in the 'depend' target of csfont.mak and
	  freefont.mak which prevented dependencies from being computed.
	- Eric Sunshine performed phase one of the renamed of "font renderer"
	  to "font server".  This phase involved the physical rename of the
	  directory in the CS/plugins hiearchy as well as patching of the
	  makefiles.  (Still To-Do: Must rename font renderer to server in
	  source code, configuration files, etc.)
	- Eric Sunshine clarified documentation in user.mak.
23-May-2000
	- Fixed a small potential problem with the polygon Covers function.
	  It compared a float to 0 which seems to be a little system
	  dependent.  I made the test more robust.  The effect of this bug was
	  that the generated octree could be different on various platforms.
	- Wouter Wijngaards fixed a bug in radiosity.  Portals are traversed
	  now.  Slower, but looks great.  More array bound errors, though.
	  Perhaps the frustum code is buggy.  Radiosity can also handle
	  portals without lightmaps now.
	- More debugging on octree/PVS stuff.
	- Added a patch from Samuel Humphreys with the following changes for
	  dynamic textures.
	    - OpenGL renderer now employs software renderer through its SCF
	      interface rather than linking with it directly.
	    - Add a back buffer style implementation for opengl based on
	      Normans implementation.  However on my system, it runs at half
	      the speed as the software version, and it renders flipped in the
	      x-axis, I've tried lots of stuff to get it working properly, but
	      to no avail.  Need other people to have a go at this.  Also with
	      mesa and voodoo2 the texture shifts into the blue spectrum,
	      whereas it doesnt with software opengl...Im investigating this.
	    - Added further configuration stuff to opengl.cfg, so you can
	      choose dynamic texture implementation.  See comments there.
	    - Implemented some outstanding methods to the opengl driver:
	      SaveArea, RestoreArea
	    - Fixed bug in DrawPixmap, it now correctly renders sub region of
	      textures whose size has been modified.  This was highlighted by
	      cswstest.
	    - Modified glx2d.cpp so that it'll give a single buffer for CSWS.
	      An outstanding issue with paletted mode, i.e.  the glx drivers
	      will not work in paletted mode, but it wouldn't have done before
	      my modifications anyway....a todo!
	    - Small modification to csws so it requests a single buffer before
	      opening the graphics drivers.
	    - Change of signature to iGraphics3D->CreateOffScreenRenderer,
	      have attempted to update all drivers, but I may of missed
	      something.
	    - Promoted default implementation of
	      iGraphics2D::CreateOffScreenCanvas to csGraphics2D (as Eric
	      suggested), updated all other drivers too.
	    - oglglide now compiles again.
	- Eric Sunshine made the following changes to the recent Texinfo
	  conversions from Martin Geisse:
	    - Fixed quite a few warnings and errors reported by 'makeinfo'.
	    - Performed a much more thorough Texinfo conversion.
	    - Fixed all the formatting problems reported by TeX (mostly
	      involving overfull and underfull hbox's.
	    - Major overhaul of camera.txi, warping.txi, and texmap.txi so
	      that mathematical formulas and variables are correctly (and
	      nicely) typeset; especially when formatted with TeX.  This was a
	      big job, but it looks *very* nice, indeed.  :-)
	    - Removed appendix/resource.txi since the type of information it
	      presented was more-or-less the same as intro/resource.txi.  Also
	      much of it was extremely out-of-date.  However, I did add the
	      IRC reference to intro/resource.txi.
	    - Upgraded the documentation for mdl2spr.  Added a lot of missing
	      filler.
	    - Completely removed miscnote.txi since its contents were
	      incredibly out of date and mostly (if not entirely) meaningless
	      at this point in time.  The only thing I saved from this file
	      was the discussion of dynamic worlds and lighting which I placed
	      in a new file named dynworld.txi.
	    - Completely removed tcache.txi since it was 100% out-of-date and
	      inaccurate.  It no longer reflected reality.
	- Eric Sunshine eliminated compilation warning about */ appearing
	    outside of comment from many of the files which Samuel patched.
	- Eric Sunshine fixed a signed-vs-unsigned compilation warning in
	  the terrain library.
	- Eric Sunshine added a note to version.h instructing anyone updating
	  CS_VERSION and CS_RELEASE that they should also update
	  docs/texinfo/version.txi.
	- Frank O'Connor did the following changes:
	    - Added windows.h to csosdef.h
	    - Removed windows.h from other places.
	    - Removed scattered undef's that related to this file.
	    - Fix misc bugs resulting in this inclusion.
	    - Updated win32 opengl drivers with latest dynamic texture code.
	    - Misc fixes/cleanup.
	    - Initialize GfxPpl to null in CSWS. Prevents crash when a
	      video plugin is unavailable.
	    - Made GraphicsPipeline call G3D->FinishDraw before Print (in
	      CSWS). This allows the DDraw plugin to work correctly now.
	    - Fixes to VC project files.
22-May-2000
	- Added csPoly2D::GetSignedArea() and csPoly3D::GetSignedArea() to
	  calculate the signed area of a polygon.
	- Fixed another small bug in PVS building.
	- Added a new function to csFrustumView that is called for every
	  octree node that is visited.
	- Use CheckFrustum to optimize PVS building.  Added a QAD PVS that is
	  not correct but very fast to build.  It is not correct in the sense
	  that it will incorrectly mark nodes as invisible even if they are
	  visible.  But all nodes marked visible are SURE to be visible and
	  this is important.  This means that we can use the PVS in the first
	  place to debug the other PVS.  The real PVS should never cull nodes
	  that are marked visible by the QAD PVS.  Later we can use this QAD
	  PVS to optimize building the real PVS because nodes marked visible
	  by the QAD PVS do not need to be tested.
	- Martin Geisse added Texinfo conversions for tcache.txi, texmap.txi,
	  and csws.txi.  He also moved phyziks.txi into a new texinfo/libs
	  chapter.
	- Added Dumper::dump() for csOctree.
	- Norman Kramer adjusted vpath for oss.mak so that it compiles again.
21-May-2000
	- Performance optimizations to terrain engine from Alex Pfaffe.
	- Fixed big bug in PVS building which could cause significant
	  amounts of nodes NOT to be culled.
	- Eric Sunshine made the following changes to the terrain library.
	    - Fixed quite a few additional compilation warnings and errors,
	      some of which were introduced with Alex's latest changes; some
	      earlier.
	    - Ported to OpenStep by working around a compiler problem where it
	      generates unlinkable code when an inline method calls a second
	      inline method before the compiler has seen the second method.
	      Working around this problem is as simple as textually reordering
	      the file.
	- Eric Sunshine once again renamed instance variable Protocol to
	  NetProtocol in NSMGR to avoid name collision with Objective-C class
	  of same name.  Apparently Thomas Riemer reverted this change after
	  the last time the patch was applied.
	- Eric Sunshine fixed a couple typographical errors in cvs.txi and
	  updated anatomy/chapter.txi.
	- Eric Sunshine made the following changes to the NSTP plugin and its
	  interfaces:
	    - Cleaned up the relationship between iNetCmd and csNetCmd.  Many
	      places in the code made the potentially dangerous assumption
	      that iNetCmd was always implemented by csNetCmd.  This is no
	      longer the case.  Access to this type of object is now performed
	      via the iNetCmd interface exclusively except for actual creation
	      (at which time it is necessary to interact directly with
	      csNetCmd).
	    - Cleaned up ownership issues (to some extent).  Now invokes
	      IncRef() and DecRef() as appropriate.
	    - Added a lot of missing 'const' qualifiers.
	    - Published methods in the SCF interface for creating objects of
	      type iNetCmd.
	    - Fixed several instances where CONSTRUCT_IBASE() was not being
	      invoked, or not being invoked for all execution paths.
	    - Added CS_NETCMD_* variations to csNetCmd for all of the
	      represented types.  No longer makes dangerous assumptions about
	      when it is safe to access or free the string pointer 'sval'.
	    - Fixed memory leaks of strings and other objects.
	    - Now uses 'delete[]' where appropriate rather than 'delete'.
	    - Implemented all the missing cases of csNetCmd::Stringify().
	- Eric Sunshine made the following changes to the NSMGR plugin:
	    - Fixed it so that it is now completely self-contained.  No longer
	      directly accesses classes (such as csNetCmd) from the NSTP
	      plugin.  Now access to NSTP (and iNetCmd) is done strictly
	      through the published SCF interfaces (some of which I had to
	      augment in order to allow this type of proper abstraction).
	    - No longer makes the potentially dangerous assumption that
	      iNetCmd is always implemented by csNetCmd.
	    - Removed the special-case hack from the makefile which forcibly
	      linked NSTP object files into the NSMGR plugin (which was
	      required because NSMGR was incorrectly accessing NSTP objects
	      directly rather than through an SCF interface).
	    - Now access engine objects indirectly through their published SCF
	      interfaces iWorld and iSector rather than referencing them
	      directly via csWorld and csSector.
	    - Cleaned up ownership issues (to some extent).  Now invokes
	      IncRef() and DecRef() as appropriate.
	    - Fixed several instances where CONSTRUCT_IBASE() was not being
	      invoked.
	    - Fixed memory leaks of strings and other objects.
	    - Now uses 'delete[]' where appropriate rather than 'delete'.
	- Eric Sunshine fixed the csClear plugin so that it is now entirely
	  self-contained (linkage-wise) by patching the makefile to link the
	  plugin against all libraries which it references.
	- Eric Sunshine was finally able to remove the special-case NeXT-
	  specific makefile hack from scfreg.mak which was needed because some
	  plugins (specifically csclear and csnsmgr) were not self-contained.
	- Eric Sunshine patched bin/makefile.py so that it tries just a little
	  bit harder to keep the generated makefile under 80 columns.
	- Eric Sunshine performed the Texinfo conversion on the VFS
	  documentation and merged it into the CS manual.
	- Martin Geisse performed Texinfo conversions on camera.tex,
	  mdl2spr.txi, miscnote.tex, render.tex, resource.tex, sound.html,
	  and warping.tex.
19-May-2000
	- Alex Pfaffe did various changes to terrain engine again.
	- Various small changes to csTerrain to help Alex integrate his
	  engine again.
	- Frank O'Connor fixed Win32 release build.
	- Andrew Zabolotny added int8, uint8, int16, uint16, int32,
	  uint32 types. They are supposed to replace UShort, ULong and so
	  on in the future.
	- Fixed cstypes.h to remove the unportable #ifdef __32BIT__.
	- Some improvements to PVS statistics for debugging it better.
	- Changed csBox3::Adjacent() to return the side of the box that
	  it is adjacent with.
	- PVS now also works for adjacent nodes. If two nodes are adjacent
	  then the solid mask on the border will be checked.
	- Eric Sunshine eliminated some compilation warnings in the terrain
	  library.
	- Eric Sunshine added a brand new section to the detailed "anatomy"
	  portion of the documentation for the MacOS/X Server, OpenStep, and
	  NextStep ports describing how dynamic linking of plug-in modules
	  now emulates the model used by other platforms.
	- Eric Sunshine eliminated 'underfull hbox' warnings in the detailed
	  "anatomy" portion of the documentation for the BeOS port.
	- Eric Sunshine eliminated compilation warnings about */ used outside
	  of comment in the network manager source code.
18-May-2000
	- Frank O'Connor added __CRYSTAL_SPACE__ define to VC project file.
	- Another small terrain update from Alex Pfaffe.
	- Started work on multiple passes in PVS.
	- Small optimization on PVS building speed.
	- Added csBox3::ManhattanDistance.
	- Implemented first version of multi-pass PVS calculation.
	  It is not yet very useful though because quality isn't high
	  enough right now.
	- Eric Sunshine fixed many additional compilation warnings in the
	  terrain library; mostly reported by MSVC.
	- Eric Sunshine fixed many warnings throughout the project which were
	  reported by MSVC.
	- Eric Sunshine added YY_NEVER_INTERACTIVE to the Dungeon plugin in
	  order to resolve the isatty() warning under MSVC.
	- Eric Sunshine had to re-add some special case code to scfreg.mak in
	  order to allow all plugins to register correctly on NeXT.  In
	  particular, csclear and csnsmgr were having difficulty.
	- Wouter Wijngaards fixed an array bounds bug in radiosity.
	- Norman Kramer fixed a non-const with rvalue assignment.
	- Added csPoly3D::ComputePlane() and csPoly3D::ComputeNormal().
	- Further work on PVS solid boundary optimization. This optimization
	  seems to work very well. Quality of PVS improved considerably
	  (still not enough!).
17-May-2000
	- Thomas Riemer added scaffolding functions to allow loading world
	  into NetSpace world.
	- Paul Garceau updated jpgimage.cpp for Win32/GCC.
	- Added csPolygon3D::PointOnPolygon to test if a point is on a
	  polygon.
	- Added csBox3::GetSide() with corresponding BOX_SIDE_??? defines to
	  get the side of a box as a 2D box.
	- Added csBspNode/csOctreeNode::CountPolygons() that will be used to
	  gather statistics about the quality of the generated PVS.
	- Added and printed additional statistics gathering for the PVS.  You
	  can now see the percentage of polygons culled.
	- Did a few compile fixes on terrain engine.
	- Paul Garceau did a few additional fixes on terrain engine.
	- Reverted a few problematic changes from Paul Garceau (mk/user.mak
	  and terrain engine).
	- Wouter Wijngaards fixed the depend target of the terrain engine.
	- Eric Sunshine reverted more problematic changes and fixed errors or
	  potential problems which Paul Garceau introduced.
	- Changed a fix from Eric to octree.cpp to make it a bit more
	  readable.
	- Eric Sunshine changed the NeXT ports so that they utilize the
	  makefile's $(OUTDLL) facility to locate dynamic load libraries in a
	  subdirectory ("components") rather than polluting the root CS
	  directory with them.
	- Eric Sunshine made the following changes to the network interfaces,
	  socket driver, and network manager.
	    - Removed socket-specific functionality from inetdrv.h which was
	      added when NetSpace was introduced into the project and which
	      completely corrupted the abstract nature of the interface.
	    - Removed all the junk which was unnecessarily added to the socket
	      driver when NetSpace was introduced.
	    - Moved (almost) all of the platform-specific socket configuration
	      and select()-configuration information out of socket.cpp and
	      into platform-specific csosdef.h files where it belongs by
	      expanding the meaning of SYSDEF_SOCKETS.
	    - Added a new SYSDEF_SELECT to cssysdef.h which is used by
	      implementations to indicate that they require select() and the
	      FD_* file-descriptor macros.  Added appropriate configuration
	      information to platform-specific csosdefs.h files where
	      necessary.
	    - Added (potentially temporary) iNetworkSocket interface which
	      represents an abstract socket-based connection or listener.
	      This interface provides a clean way for the network manager to
	      deal with file-descriptor sets and select() without having to
	      corrupt the pure and abstract inetdrv.h.  I expect this
	      interface to disappear once the networking system is upgraded to
	      allow select()-style functionality in a completely generalized
	      fashion, however in the meantime, this provides a clean solution
	      to the problem of the network manager wanting to have inside
	      information about socket-driver specifics.
	    - Reworked Thomas Riemer's network manager just enough so that it
	      works via the new iNetworkSocket interface instead of relying
	      upon the corruption of inetdrv.h (which has been removed).
16-May-2000
	- Alex Pfaffe did some minor changes/cleanup to the terrain engine.
	- Removed a few warnings in terrain.cpp.
	- Added csOctree::ClassifyRectangle() that will be used for PVS
	  calculation.  This function calculates a 4x4 bitmap representing the
	  solid space in some rectangle.
	- At octree calculation time the solid masks are precalculated for
	  every node.  The octree cache format version has been bumped up so
	  that recalculation of the octree is automatic.
	- Modified db_octree command so that it will show all leaves
	  (disregarding depth) if -1 is given as an argument.
	- Added csPolygon3D::IntersectRayNoBackFace() which does the same as
	  csPolygon3D::IntersectRay() but without back-face culling.
	- Wouter Wijngaards made a small quality increase in radiosity.
	- Fixed csPolygonTree::ClassifyPoint().
	- Fixed solid mask calculation to make it more correct and
	  faster.
	- Made solid polygon iterator which is going to be used by PVS.
	- Disabled the new routine to calculate the solid mask because it is
	  too slow.  I need to make this faster.
	- Eric Sunshine and Jorrit performed repair work on the new terrain
	  library merge, bringing the makefile and source code into shape.
	  Eliminated compilation warnings and errors.
	- Eric Sunshine eliminated all the remaining build-time problems
	  with the new terrain library.
	    - Eliminated all the remaining compilation errors and warnings in
	      the new terrain library.  This mostly involved missing I/O
	      streams, lack of bool type (on some platforms), implicit
	      conversion from float to integer, etc.
	    - The terrain makefile now defines __CRYSTAL_SPACE__ when building
	      for Crystal Space.  Currently this define is used to control
	      whether or not cssysdef.h and cstypes.h are included.
	    - Enabled all the code in csengine/terrain.cpp which was protected
	      within DDG_FIXME blocks.
	    - Updated makefile so that Crystal Space applications once again
	      link against the terrain library.
	- Eric Sunshine worked around a problem with the NextStep compiler in
	  octree.cpp where it failed to correctly create an array of csPoly3D
	  objects.
	- Frank O'Connor did a small fix to ddgcolor.cpp as well.
	- Frank also update VC project files for csterr.
15-May-2000
	- Added const version of csPoly3D::operator[].
	- Added csPoly3D::SplitWithPlaneXYZ().
	- Implemented csPolygonTree::ClassifyPoint() and csBspTree/
	  csOctree::ClassifyPolygon. This functions respectively test a
	  point/polygon against the tree. The test returns wether or not
	  the object is in solid space.
	- Wouter Wijngaards added a temporary bugfix for radiosity. This
	  fix only avoids the bug but does not really solve it. It makes
	  radiosity (and lighting) a bit slower but at least it doesn't
	  crash anymore.
	- Eric Sunshine cobbled things back together just enough so that the
	  project can once again be built on Unix following phase one of
	  Alex's merge of the new terrain code.  For now terrain functionality
	  is completely disabled.  For Windows, the project file maintainer
	  will probably need to adjust include paths in the csparser and
	  csengine projects to refer to libs/csterr.
	- Eric Sunshine eliminated compilation warnings in octree.cpp.
	- Eric Sunshine renamed the following files and fixed references to
	  them throughout the project:
	      def.h        --> csdef.h
	      sysdef.h     --> cssysdef.h
	      types.h      --> cstypes.h
	      frustrum.h   --> frustum.h
	      frustrum.cpp --> frustum.cpp
	- Eric Sunshine eliminated compilation warnings from csnsmgr.cpp.
	- Eric Sunshine eliminated compilation warnings from octree.cpp,
	  polytree.cpp and bsp.cpp.
	- Implemented new 'TEXTURE' keyword for upcoming terrain engine.
	  With this keyword you set the basename for all the textures
	  used by the terrain. The base should be something like
	  'MyTexture%d.jpg'. %d will be replaced with 0 to 127 for example.
	- Thomas Riemer added stubs for AddWorld and AddSector.
	- Frank O'Connor fixed a few files which were incorrectly modified
	  by Eric Sunshine for his large rename of some include files.
	  More in particular: many files in Blocks and CCTest were empty.
	- Frank did a few minor updates to the VC project files.
	- Norman Kramer added a missing cssysdef include to cspython/swig.
14-May-2000
	- Added csPoly3D::ClassifyXYZ() routines.
	- Started work on new optimization for PVS.
	- Eric Sunshine fixed rendering of fog by software renderer in 32-bit
	  mode on NeXT for both big- and little-endian.  There were several
	  problems:
	    - Inconsistent interpretation of TOP8BITS_R8G8B8_USED.  When
	      Andrew first introduced TOP8BITS_R8G8B8_USED it was interpreted
	      as meaning that the display driver might _possibly_ use the high
	      byte of a 4-byte pixel value.  However, in some of his more
	      recent code, it was interpreted as meaning that the high byte
	      was _positively_ used.  As a consequence, DrawFogPolygon() chose
	      completely incorrect values for csScanSetup's FogR, FogG, and
	      FogB values on little-endian machines.
	    - Inconsistent interpretation of csScanSetup's FogR, FogG, and
	      FogB values.  In some cases, the fog scanline functions expected
	      these values to be normalized to 0x00RRGGBB (note that the high
	      byte is unused), but DrawFogPolygon() initialized these values
	      without normalizing them.  Furthermore, even the scanline
	      functions were inconsistent in their expectation of these
	      values.  In particular, the calculation of 'fog_pix' neglected
	      to take normalization into account.
	    - Incorrect definition of PIXEL_PREPROC() and PIXEL_POSTPROC().
	      For instance, PIXEL_POSTPROC() was defined as "x << 8".  When
	      invoked with PIXEL_POSTPROC(r|g|b) this had the unfortunate
	      side-effect of only shifting the blue color rather than the
	      composite value, since it expanded to the equivalent of
	      (r|g|(b<<8)).  The correct definition should have been
	      "(x) << 8", which would expand to ((r|g|b)<<8) as desired.
	    - Signed rather than unsigned values in several places, including
	      the scanline routines as well as csScanSetup's RGB values.
	      During right-shift operations, this could result in unwanted
	      sign-extension.
	- Eric Sunshine fixed a bug in the software renderer's fog scanline
	  drawing routines where they failed to clamp the blue color to
	  0x000000ff when recomposing the 'destination' pixel.  (Note that the
	  red and green colors were correctly clamped to 0x00ff0000 and
	  0x0000ff00, respectively.)
	- Eric Sunshine fixed rendering of halos by software renderer in
	  32-bit mode on NeXT for big-endian machines.  There were several
	  problems:
	    - Overflow during computation of a halo color component, which led
	      to corrupt composite color.  The problem was that
	      csSoftHalo::Draw() was computing color values based upon color
	      masks using the formula "(int)(C * pfmt.mask + 0.5)" where C is
	      a floating point number.  On big-endian NeXT machines, where the
	      red mask is 0xff000000 this formula overflows (even in the
	      obvious case when C is 1.0).
	    - Inconsistent interpretation of csScanSetup's FogR, FogG, and
	      FogB values.  The halo scanline functions expected these values
	      to be normalized to 0x00RRGGBB (note that the high byte is
	      unused), but csSoftHalo::Draw() initialized these values without
	      normalizing them.
	    - Signed rather than unsigned values in several places, which
	      could have resulted in unwanted sign-extension.
	- Eric Sunshine fixed trilinear filtering in the software renderer for
	  32-bit big- and little-endian on NeXT.  The problem was that the
	  32-bit 'filt2' routines neglected to apply PIXEL_POSTPROC() to the
	  composed pixel value.
	- Thomas Riemer added lock functions to skeleton (iAuth).
	  Add CmdList - change NetProtocol variable to Protocol.
	- Paul Garceau did an update for Mingw/NT4/Win98.
	  user.mak commented to ignore PLUGINS reference.  PLUGINS are
	  determined by Mingw.mak, win32vc.mak, unix.mak, etc.  If you
	  require that PLUGINS be referenced in user.mak,  then
	  uncomment PLUGINS references in user.mak, etc.
	- Eric Sunshine reverted several of the files which Paul committed
	  since he forgot to commit several supporting files and also
	  accidentally blasted many useful default values and replaced them
	  with his own custom settings.
	- Eric Sunshine removed more obsolete CHK() and CHKB() references.
	- Big update of terrain engine from Alex Pfaffe. Currently broken
	  though.
13-May-2000
	- Did some fixes on PVS again. For the very first time PVS seems
	  to be doing what it is supposed to do: cull invisible nodes :-)
	  Quality of the PVS is still bad (too few invisible nodes) but
	  Wouter and me discussed various techniques to solve that.
	  Note that polygons are not yet included in PVS. This is only
	  the node -> node PVS part.
	- Added PVS optimization suggested by Wouter Wijngaards which
	  treats nodes that cannot see an occludee as completely solid.
	  This both makes PVS creation faster and increases the quality
	  of the PVS as well. This is still not the full set of quality
	  improvements that is planned.
	- Frank O'Connor changed main signature of mdl2spr for Win32/CSsys
	  compatibility.
	- Frank O'Connor did part 2 of the big MSVC/win32 overhaul.
	    - Split cspace into multiple smaller libs, more like the make
	      file system.
	    - Removed all unused libs from projects. Projects attempt
	      to link to things the explictly need only.
	    - New naming scheme for projects. Groups them by their function
		plg* = plugin
		lib* = libaray
		grp = project use for grouping only
		app = application
	    - Converted a few more apps they didn't have MSVC projects
	      built for them.
	- Norman Kramer fixed csview which Wouter accidently broke.
	- Paul Garceay modified ddraw.mak to once again allow for all
	  required source files in plugins/video/canvas/common.
	  Extended vpath to include plugins/video/canvas/common.
12-May-2000
	- Michael Dale Long did some bug fixes to csConsole. No longer has
	  crashes when editing history items.
	- Added 'freezepvs' command to freeze the PVS at some position. This
	  is useful to debug the PVS. After freezing the PVS you can walk
	  around and examine what is visible and what not.
	- Added 'pvsonly' command so that you can force visibility culling
	  to operate ONLY with the PVS and not use any other culling
	  mechanisms (like c-buffer).
	- Worked a bit more on PVS. Still not working :-)
	- Made PVS caching more robust.
	- Updated the 'help' in WalkTest so that commands are grouped
	  logically.
	- Andrew Zabolotny fixed the Software renderer makefile that
	  Paul broke a little.
	- Eric Sunshine fixed a bug in iNetCmd.  The Push() method was not
	  declared abstract.
	- Eric Sunshine added a very ugly patch to the csnsmgr makefile to
	  allow it to link.  For some reason, this plugin is including files
	  from the nstp plugin and uses its classes directly instead of
	  going through the SCF interface.
	- Eric Sunshine fixed a bug in the 'depend' target of for BeOS OpenGL.
	- Andrew Zabolotny added a new CSWS component: notebook control
	  AKA "property shit". Only used in cswstest for now. Going to be
	  used in MazeD.
	- Removed all CHK and CHKB from the code. That memory debugger
	  is now obsolete.
	- Fixed bug in OpenGL makefile. The inclusion of the software
	  renderer caused problems if the CS version of NASM was present.
	  The NASM asm files were not included in the OpenGL makefile
	  causing undefined symbols in the included software renderer.
	- Fixed bug in PVS. Correctly does backface culling now.
	- ProjectAxisPlane() in csgeom now returns a boolean to indicate
	  if the projection was possible.
	- Eric Sunshine eliminated a compilation warning in csnotebk.cpp.
	- Eric Sunshine moved declaration and definition of cspExtDialog
	  outside of the function within which it was defined since the BeOS
	  compiler was generating unlinkable code.
	- Eric Sunshine added dynamic-texture support to BeOS software and
	  OpenGL 2D drivers.
	- Eric Sunshine modified the BeOS system driver so that it now
	  automatically changes the current working directory to path the
	  which contains the executable.  This allows CS applications to find
	  their resources even when launched via double-click from the Tracker
	  application.
	- Wouter Wijngaards added SetLastFrustumId(int) public routine
	  to csLightMap. He needs it for radiosity.
	- Wouter cleaned up the radiosity code a lot and removed various
	  unused routines. Should be somewhat faster. Ambient and
	  priority are calculated better (better formulas). Extra fixes
	  for bound check overflow.
11-May-2000
	- Changes from Michael Dale Long:
	    - Added a CHK_DECREF() macro to cctest.h that checks if an
	      object is not NULL and performs a DecRef() on it if so.
	      Should be used only used when it is _possible_ for a SCF
	      interface to be NULL (i.e. aborted init).
	    - Rewrote iPawn interface (include/csclear/ipawn.h). I plan
	      to begin implementing it soon.
	- Frank O'Connor added dtSimple to application build list.
	- Frank updated VC project files for dynamic textures (OpenGL).
	- Paul Garceau did a modification for software renderer makefile.
	  Changed vpath to consider plugins/video/renderer/common
	  as well as plugins/video/renderer/software.
	- Finished caching of PVS. Also added dummy PVS calculator that
	  is used for now and just creates a PVS that says that everything
	  is visible :-)
	- Added quick and dirty memory debugger in WalkTest that's a bit
	  easier to setup than the one from Andrew and also works immediatelly
	  in a debugger. Just go to the end of WalkTest and change #if 1
	  to #if 0. It catches memory overwrites, double deletes, and
	  allocs with 0 bytes.
	  It will also catch mismatches in new[]/delete[] and new/delete.
	- Fixed a bug in radiosity. It was calling 'delete' on an array
	  allocated with 'new[]'.
	- Changed calloc/free in polytext.h (csCoverageMatrix) to
	  new[]/delete[] in order to help debugging it (memory debugger
	  only works on C++ memory allocators).
	- Added 'pvs' command to toggle pvs usage (note that PVS is still
	  not working properly).
	- Norman Kramer added a method to iGraphics2D to set the font
	  size.
	- Norman changed CSWS so that components can now draw with their
	  own fontsize.
	- Norman merged the two glide2 and glide3 renderers into one
	  glide renderer.
	- Norman fixed a bug in the freefont plugin. The font was closed
	  twice at closing time.
	- Wouter almost fixed a bug in radiosity:
	    "Now, the bug is almost fixed. And I know why it happens.
	     The light frustum given to GetCoverage must be clipped to
	     responsability rect, and this was not done yet.
	     csPolyTexture::GetLightmapBounds will need some small
	     change to work with this (the frustum_id check / code
	     must go back to csPolygon I think.)"
10-May-2000
	- Michael Dale Long did a major update for CrystalClear.  A lot of
	  work has been done on iActor.  The main thing was adding multiple
	  velocity support.  A lot of other bugfixes and other things I can't
	  remember right now, too.
	- Frank O'Connor updated VC project files for new dynamic texture
	  system.
	- Modified makefile system to add an extra 'dyn' or 'stat' in the
	  'out' directory to differentiate between dynamic or static linking.
	- Fixed an internal compiler error for gcc 2.7.2 in the Crystal Clear
	  code.
	- Andrew Zabolotny did a few code style fixes for csfont plugin and
	  misc fixes for OS/2 DIVE canvas.
	- Eric Sunshine added dynamic-texture support to the NeXT ports.  He
	  also removed unused junk from dyntex2d.
	- Samuel Humphreys sent me a new patch to clean up his dynamic
	  textures and also implement them for OpenGL.
	- Eric Sunshine eliminated symbolic naming conflict in several of the
	  NetSpace sources where a variable named "Protocol" conflicted with
	  the Objective-C class of same name.
	- Eric Sunshine fixed a bug in csFont where it incorrectly computed
	  FontCount (as one too large).  This could have been responsible for
	  the crasher in OpenGL AddFont().
	- Norman Kramer removed the explicit IncRef of VFS that caused the
	  warning about unreleased instance of kernel.vfs.
	- Eric Sunshine overhauled the approach used for dynamic (plug-in)
	  linking on MacOS/X Server, OpenStep, and NextStep ports.
	    - These ports now do a fairly good job of emulating dynamic
	      linking as it is done on most other platforms in which symbols
	      within a plug-in are private unless explicitly exported.
	      Historically, with the NeXT ports, all symbols were
	      automatically public.  This naturally leads to severe symbolic
	      conflicts since many plug-ins link with the same static
	      libraries.  As a consequence, in the past I had to devise
	      elaborate mechanisms to work around these conflicts.
	    - The NextStep port emulates private plug-in symbols by actually
	      stripping all public (resolved) symbols, except for the SCF
	      GetClassTable() hook, from the plug-in module at build time.
	      This technique provides fairly decent insurance against symbolic
	      conflicts at plug-in load time even when multiple plug-ins have
	      linked against the same static libraries.  The only big drawback
	      to this approach is that it makes symbolic debugging impossible.
	      I had tried the alternate approach of parsing the error stream
	      from RLD and calling rld_forget_symbol() for symbolic conflicts,
	      and then attempting a reload, but the RLD run-time is
	      sufficiently buggy that it would actually crash within
	      rld_forget_symbol().
	    - The MacOS/X Server and OpenStep ports emulate private plug-in
	      symbols by taking advantage of DYLD's NSLinkEditErrorHandlers
	      which allows the loader to ignore duplicate symbols at load
	      time, thus there is no need to strip them away at build time.
	      This approach has the advantage that symbolic debugging
	      capability is retained.  I had attempted to use the same
	      approach as I used for the NextStep port (that of stripping
	      aways symbols at build time), but discovered that the
	      Objective-C run-time is more picky in OpenStep than NextStep.
	      In particular, it couldn't deal with the fact that symbolic
	      references to Objective-C classes defined locally in the plug-in
	      had been stripped away.  It would be possible to manually
	      instruct the 'strip' utility to retain certain symbols, but
	      doing so would have introduced a potential maintanence headache
	      as future changes are made to the code.
	    - Eliminated all the special-case hacks which had been placed in
	      various applications to force symbolic references in the
	      executable itself so that the symbols would be available for
	      dynamically loaded plug-in modules.  Since plug-in modules now
	      link with all the libraries which they, themselves, require, the
	      application no longer needs to do so.
	    - Eliminated special-case makefile hacks which forced applications
	      to link with extra libraries required by plug-in modules which
	      they might end up loading.  In particular, scfreg makefile was
	      considerably simplified.
	- Frank O'Connor switched dtsimple to use cryst.cfg.
	- Robert Bate updated the Mac port and project files again.
	  He fixed up access paths and runtime libraries and added a
	  shared library target.
	  He also moved projects that make plugins to the new
	  MakePlugins.mcp project.
	- Norman Kramer added dynamic texture rendering support for Glide.
	  His support does not use the software renderer but native hardware
	  rendering.
	- Frank O'Connor added a check to the OpenGL texture manager before
	  calling DecRef in destructor.
9-May-2000
	- -revis commandline option will now work to force recalculation
	  of the octree. -norevis will not work for this as CS cannot
	  live with an octree that is invalid. If the octree is found
	  not to match with the level it HAS to be recalculated.
	  This is different with the PVS. When we cache this then
	  -norevis will be useful there.
	- Frank O'Connor changed directory and naming scheme of normans
	  font plugins to maintain consistency among the new plugins.
	- Frank also fixed bug in blocks where current menu item was not
	  visible on win32. This was because of improper intialization.
	- Norman Kramer added FontRender entries to all the config files.
	- Norman also added FUNC_ID for fontrenderer to isystem.h.
	- Norman disabled freetype engine plugin to prevent default
	  compilation, user should enable it itself.
	- Norman added missing methods for dynamic textures (still dummies).
	- Thomas Riemer did a minor fix for initialization of name for
	  command for NetSpace.
	- Frank O'Connor did some fixes with regards to the new font
	  renderer plugin.
	- Norman Kramer changed program name to avoid naming conflicts
	  between rule and program name on unix systems.
	- Norman fixed gfxtest to change %ld to %d.  Eric Sunshine then fixed
	  this fix to be more portable regardless of how size_t is defined on
	  any particular platform.
	- Norman removed various unused variables.
	- Norman Kramer fixed mixup of glxclean and glx2dclean rules in
	  makefile.
	- Eric Sunshine fixed the formatting of the help message for csfont.
	- Eric Sunshine fixed pytest.mak so that it only adds its target if
	  Python was detected on the system.
	- Eric Sunshine made dnapp more Unix-friendly.  It now uses -h for
	  help rather than -?.  The problem with -? is that '?' is a filename
	  wildcard to the Unix shell.  (Renamed the old -h option to -q.)
	- Received a patch from Samuel Humphreys which allows you to render
	  on texture dynamically. Currently this only works for the software
	  renderer. Support for the other renderers will have to be added.
	  There is also a new 'dtsimple' demo app to show of the new
	  feature.
	- Paul Garceau modified win32/volatile.h to enable user to decide
	  whether or not Trocchus' DO_DINPUT_KEYBOARD should be enabled.
	- Paul also did some Mingw specific modifications. He added an option
	  to decide which processor you want to use (default is i386).
	  If you wish to use another Intel processor you will need to modify
	  CFLAGS.GENERAL.
	- Eric Sunshine fixed several compilation problems throughout the
	  project.
	- Eric Sunshine updated next.txi and beos.txi to make reference to new
	  csfont plugin.
	- Eric Sunshine eliminated an apparently bogus warning from the
	  OpenStep compiler in inifile.cpp.
8-May-2000
	- Eric Sunshine re-enabled -kb flag and re-added CRLF line terminators
	  for all .dsp files so that they will work even from CVS snapshot
	  which is created on a Unix machine.
	- Eric Sunshine made the following configuration file-related changes:
	    - All Crystal Space application and plug-in configuration files
	      are now loaded from virtual filesystems via VFS rather than the
	      physical filesystem, with the exception of scf.cfg and vfs.cfg
	      which can not be loaded from VFS for (hopefully) obvious
	      reasons.  (scf.cfg is needed to initialize SCF which is used to
	      load the VFS plug-in, and vfs.cfg is used to actually define the
	      VFS volumes.)
	    - Moved all configuration files onto the VFS volume /config which
	      happens to be mounted at physical location CS/data/config.  Note
	      that using the /config volume is a convenience, rather than a
	      requirement.  Programs written using Crystal Space can choose to
	      locate their own configuration files anywhere they like; even on
	      a physical filesystem, if desired (though this is frowned upon).
	- Eric Sunshine modified WalkTest so that script files which it
	  executes are now loaded from VFS rather than from a physical
	  filesystem.
	- Eric Sunshine fixed a lot more 'const' problems throughout the
	  project.  Most of these involved changing (char*) to (const char*).
	- Eric Sunshine added 'bool' variations of the Append() method, and
	  operator+= and operator<< to csString.
	- Eric Sunshine made the following changes to ScanStr():
	    - Fixed bug: Wasn't able to parse strings which used only
	      whitespace as delimiters, such as "%f %f %f".  In this case, it
	      would only scan the first "%f" and skip the remainder of the
	      string.  (It has always been able to parse strings which use
	      non-whitespace delimiters, such as "%f,%f,%f".)
	    - Is now much more tolerant of Macintosh and Windows/DOS line
	      terminators (CR and CRLF).
	- Eric Sunshine made the following changes to WalkTest's 'coord' file
	  handling:
	    - WalkTest now saves and loads 'coord' files via VFS rather than
	      via a physical filesystem.
	    - The format of the 'coord' file has changed slightly.  The stored
	      sector name is now quoted (with double-quotes) rather than bare.
	- Eric Sunshine worked around a limitation of Wouter's Solaris
	  compiler which could not grok the 64,000 byte "Data" buffer built
	  into dnFileBuffer.  Therefore, the Data buffer is now allocated from
	  heap.
	- Thomas Riemer added auth interface/plugin and NetCmd interface.
	  Change icmdmgr.h and iproto.h to use NetCmd interface.
	  Added first nstp implementation documentation.
	  Upgrade nstp client demo - now it allows login to server.
	- More work on saving/loading octree. The octree save/load
	  now seems to work perfectly. PVS is not cached yet.
	  The cached octree format contains a few consistency checks
	  to make sure that the octree is really valid for the current
	  level. If it fails then the octree will be recalculated
	  again.
	- Martin Geisse changed standard textures in dungeon plugin from
	  GIF to JPG. Martin also fixed a bug in the dungeon sample input
	  files.
	- Frank O'Connor changed csAll.dsw to binary.
	- Frank also removed very outdated glide projects for Win32.
	- Frank also redid some of cspace project to put all interfaces
	  under one logic group.
	- Frank also did various other VC project file changes.
	- Frank converted legacy SysPrintf to m_piSystem->Printf.
	- Eric Sunshine fixed several compilation warnings throughout the
	  project.
7-May-2000
	- More work on PVS. Still not working properly though.
	- Started working on saving and loading of octree and PVS.
	  This will help debugging this thing as computing it is
	  time consuming.
	- Frank O'Connor added the ability to change dynamically
	  between window/fullscreen. This is implemented via iGraph2D::
	  PerformExtension() (called 'fullscreen'). Currently only
	  DirectDraw2d handles this. Added new 'fullscreen' console
	  command to use this extension.
	- Frank also rewrote a lot of DirectDraw. Work on unifying all
	  DirectDraw drivers into one.
	- Gary Haussmann added patch submitted by
	  samuel@metalog.softnet.co.uk, to fix segfaults when using
	  Voodoo/glide based X server.
	- Eric Sunshine pored through the project several times to correct
	  problems caused by relocation of 2D, 3D, and sound drivers from
	  CS/libs to CS/plugins.  He updated source, headers, makefiles,
	  scripts, and documentation.  The directories which were relocated at
	  this time were:
	      libs/cs2d --> plugins/video/canvas
	      libs/cs3d --> plugins/video/renderer
	      libs/cssnddrv --> plugins/sound/driver
	      libs/cssndrdr --> plugins/sound/renderer
	- Eric Sunshine fixed csnetman.mak so that it properly classifies
	  itself as a plug-in module rather than driver.
	- Eric Sunshine fixed several additional compilation warnings which
	  were recently introduced into the project.
	- Eric Sunshine fixed an error in the mingw.mak makefile.
6-May-2000
	- Fixed several bugs in PVS and routines used by PVS. It finally
	  starts to resemble doing PVS work for real.
	- Norman Kramer changed DRIVERS into PLUGINS for the linux
	  makefile.
	- Norman also changed all references to the old directories
	  cs2d and cs3d.
	- Eric Sunshine fixed a bug in the 'depend' target of openglx/glide.
	- Eric Sunshine added ugly debug_dump() and cleanup() to scfreg.cpp
	  for glooky Linux system driver.
5-May-2000
	- Andrew Zabolotny removed some relatively expensive unneeded
	  code from lighting routines which should make lighting (both
	  static and dynamic) work faster :-)
	- Andrew split FillLightMap routine into two: GetCoverageMatrix
	  and FillLightMap. The first one can be used to get the coverage
	  matrix for any frustum projected on the polygon lightmap.
	  Wouter is going to use it for radiosity.
	- Frank O'Connor fixed post-build copy macro for VC project files.
	- Frank also fixed bug where DirectDraw 2d plugin was exporting
	  a class name that did not synch with SCF.CFG or the MSVC output
	  name. The (default) directdraw 2d class is now named csddraw. The
	  ddraw.mak and static.cpp have been updated as well.
	- Fixed bug in csIntersect2::Planes(). It always returned false
	  even if there was an intersection.
	- Paul Garceau modified mingw.mak to accomodate static lib builds
	  for COMP_GCC. Added libdinput.a link reference.
	- Paul also forced scf to use Dx3 for Windows NT4 under COMP_GCC.
	- Fixed a fix by Eric to radiosity (suggested by Wouter Wijngaards).
	- Fixed memory leak in new lighting code from Andrew.
	- Further debug work on PVS. Still not working properly though.
	- Wouter Wijngaards updated radiosity. It is still buggy though.
	- Fixed bug in csPoly3D::ProjectXPlane (and Y/Z).
	- Eric Sunshine fixed a bug in cs2d/common/scrshot.cpp where it was
	  applying an incorrect cast to the abstract "Data" which it was about
	  to delete[].  But was pointed out by samuel@metalang.softnet.co.uk.
	- Eric Sunshine eliminated several newly introduced compilation
	  warnings from the project.
	- Eric Sunshine performed the (hopefully) final unification and
	  correction of the DDraw naming problems/conflicts.  To summarize:
	    - Unified on name "csddraw" everywhere.
	    - Removed old duplicate, legacy names from g3d and scf.cfg which
	      referred to same driver by multiple names.
	    - Makes proper use of SOFTWARE_2D_DRIVER everywhere.
4-May-2000
	- Chris Bruner did some various cleanups in some files.
	- Borland Ehle did an attempt to unify makefile for all Win32
	  compilers.
	- Frank O'Connor did a big win32 project overhaul to standardize
	  (re-standardize) the settings, defines, paths whic the projects
	  use. Defined debug/ and release/ directories, added a macro for
	  copying output to root directory. Prevents clutter from debug
	  info, browse files, ilk's and other files that MSVC makes.
	- Martin Geisse did some update and clean-up work for dungeon
	  plugin.
	- Andrew Zabolotny fixed another lighting bug. Now every light
	  frustum has a unique numeric ID which can be used to uniquely
	  identify that frustum. This is used to avoid duplicate lighting
	  of same shared lightmap by same light.
	- Eric Sunshine fixed a slew of compilation problems throughout the
	  project.
	- Eric Sunshine fixed a bug in the Dungeon plugin in which virtual
	  base classes were not used for multiple-inheritance even though it
	  was required.  In particular, these objects were cast to type csBase
	  even though they inherited from csBase multiple times, thus the
	  compiler was (correctly) unable to choose which csBase parent to use.
	  Now csBase is a virtual parent, so there is only one instance of it
	  per derived child.
	- Eric Sunshine made the following changes to csMD5:
	    - Fixed bug: MD5 algorithm wasn't taking endianess into account at
	      all.  (The original MD5 implementation by the author -- Peter
	      Deutsch -- did take endianess into account, but somehow this
	      code was omitted from the MD5 implementation which ended up in
	      csutil/csmd5.)
	    - Performed a complete overhaul of csMD5.  (What else did you
	      expect from me?)  Not only does this simplify usage but also
	      exposes Peter Deutsch's original API for people who want super-
	      fine control over the process.  (The old csMD5 implementation
	      did not allow access to the original API and was less flexible,
	      as a result.)
	    - Fixed bug in Michael Long's GetReducedHash() function.  It
	      wasn't taking endianess into account.  I also moved this
	      function to cctest (which is the only place it was used) since
	      it is inappropriate for a general MD5 class, IMHO.
	- Robert Bate made some more InputSprocket changes.
	- Robert also updated the Mac project files.
3-May-2000
	- Fixed bug in Blocks which caused the menu not to work
	  properly (left/right arrows were gone).
	- Andrew Zabolotny did a large update:
	    - Removed all stuff related to the old way to do high-quality
	      lightmaps. Removed csPolygon3D::ScaleLightmaps2X,
	      csPolygon3D::UpdateLightmapSize, csLightMap::Scale2X.
	      Removed all stuff required to support 2x lightmaps from csWorld.
	    - Implemented a totally new way to do high quality lightmaps.
	      It is supposed to produce more high quality lightmaps. Last
	      but not least the new algorithm removes both infamous Black
	      Borders {tm} problem as well as the old White Borders {tm}
	      problem (WB were resolved in the previous implementation,
	      but my new approach allows to resolve WBs even for dynamic
	      lightmaps! Not done yet though...). My measurements also
	      shows it is a lot faster... maybe it is a result of some bugs
	      that are still left. dmburg level -recalc's with the old
	      algorithm on my machine for 118 seconds, with the new
	      algorithm it takes just 49 seconds. This could be due to bugs
	      that are still existing though (very likely).
	    - Fixed typo: frustrum replaced with frustum. There were
	      thousands of such errors. The only thing left is to rename
	      frustrum.cpp and frustrum.h.
	    - "fclear on" in walktest now will clear zbuffer on every frame.
	    - Separated the "antialiased polygon" code from polytext.cpp
	      into a separate file in libs/csgeom. Now it is useable from
	      any application/library.
	- Eric Sunshine changed the CVS snapshot script (bin/snapshot.py) so
	  that it now uses /tmp as its working directory rather than polluting
	  the snapshot directory with temporary files.
	- Eric Sunshine made the following additional changes to csIniFile:
	    - Completed the list of Save() methods so that they now complement
	      the Load() methods.  In particular, Save(iVFS,path) was
	      conspicuously absent.
	    - Added Load(csString) for convenience.
	    - Renamed TextualRepresentation() to Save(), thus making it just
	      another one of the Save() methods (which returns a textual
	      representation of the INI as a csString, in this case).
	      This complements Load(csString).
	    - There is now a distinction between Save() methods which check
	      and affect the 'dirty' flag, and those which do not.  Previously,
	      Save() methods would only actually save the INI if it was dirty.
	      This made it impossible to save the INI to a new file if you
	      hadn't made any changes to it.  In other words, the following
	      sequence would fail to emit a new INI file ("b.cfg"):
	          cfg.Load("a.cfg"); cfg.Save("b.cfg");
	    - Added IsDirty() and ClearDirty() for finer control by client.
	- Andrew Zabolotny fixed the first of the many lighting bugs that
	  are left after his changes.
	- Andrew Zabolotny fixed the second of the many lighting bugs that
	  are left after his changes.
	- Andrew Zabolotny fixed the third of the many lighting bugs that
	  are left after his changes. It is a theoretical bug though,
	  nobody has seen it in action yet :-)
	- Fixed a memory leak in csClipper. The destructor was not virtual.
	- Some further fixes on PVS.
	- Frank O'Connor did some various bug fixes.
	- Wouter Wijngaards did various changes to radiosity:
	    - Fixed ambient, use standard ambient values again.
	    - Slightly faster.
	    - Can do specular gloss.
	    - Options configurable in config.
2-May-2000
	- Added csPoly3D::ProjectAxisPlane() which is similar to
	  ProjectXPlane() but for a general axis aligned plane.
	- Added assignment operator for csPoly2D.
	- Some further work on PVS.
	- Frank O'Connor defaulted DO_DINPUT_KEYBOARD in Win32 built.
	- Frank also fixed hardware cursor problem for DDraw.
	- Frank also did several VC project file changes.
	- Paul Garceau modified ddraw makefile to accomodate generic ddraw
	  make.  Added ifdefs to accomodate Borland, COMP_GCC, and COMP_VC.
	- Gary Haussmann corrected bad transform in DrawTriangleMesh.
	- Gary added detection of other extensions
	  (GL_EXT_compiled_vertex_array and GLX_ARB_get_proc_address).
	- Gary disabled code to detect opengl extensions, as this will break
	  compiles on some platforms.
	- Martin Geisse fixed a bug in dungeon plugin.
	- Eric Sunshine fixed several compilation warnings and problems
	  throughout the project.
1-May-2000
	- Norman Kramer added CSSTA_CHARWRAP and CSSTA_WORDWRAP to show
	  text in a static text control that is longer than the control
	  (csws).
	- Added csBox2 and csBox3 Min() and Max() functions that accept
	  a component index (x=0, y=1, z=2).
	- Added csIntersect3::PlaneXPlane(), PlaneYPlane(), PlaneZPlane()
	  and PlaneAxisPlane() to intersect a general plane with an
	  axis aligned plane. The result is a 2D plane.
	- Added csIntersect2::Planes() (but unimplemented right now)
	  to calculate the intersection between to 2D planes (i.e. lines).
	- Further work on PVS. Made the realization that it is better
	  to work with a single 2D culler plane instead of a cube.
	  This simplifies the code a bit.
	- Eric Sunshine fixed several build problems with the Dungeon plug-in
	  which showed up with the introduction of Bison and Lex.
	- Eric Sunshine eliminated several compilation warnings and problems
	  throughout the project.
	- Eric Sunshine repaired the project enough that it builds on NextStep
	  once again.  Most of the programs even run, though some suffer from
	  link problems when loading plug-in modules.
	- Eric Sunshine made NeXTFrameBuffer15 more robust and tolerant of
	  bugs elsewhere in Crystal Space.  The 15-to-16 bit lookup table
	  which is used to convert CS format 15-bit RGB to NeXT format 16-bit
	  RGBA is now allocated twice as large as necessary since CS does not
	  always respect the request for 15-bit colors.  By allocating the
	  table twice as large as necessary for 15 bits, errant 16-bit values
	  will no longer access memory beyond the end of table (potentially
	  causing a segmentation fault).  This problem has arisen when CS's
	  software renderer incorrectly paints polygons from garbage memory
	  rather than using properly prepared 15-bit textures.  (This is a bug
	  in the software renderer.)  It is also possible for poorly written
	  programs to use hard-coded 16-bit color values in a 15-bit
	  environment.  Thus the NeXT 2D driver now tolerate such buggy
	  behavior.
	- Eric Sunshine added automatic detection of socklen_t to unixconf.sh.
	  If absent, defines DO_FAKE_SOCKLEN_T in config.mak and volatile.h,
	  and fakes up socklen_t with int.  Hopefully this will resolve (at
	  least one) problem with compiling network socket driver on Solaris.
	- Eric Sunshine renamed NEED_FAKE_BOOL/NO_BOOL_TYPE to DO_FAKE_BOOL in
	  booltest.sh, volatile.mak, and types.h for consistency's sake.
	- Eric Sunshine made the following changes to the engine's command-
	  line options:
	    - Renamed the -recalc and -inhrecalc options to -relight and
	      -norelight, respectively.  This was done in preparation of
	      caching of other types of information per level (such as
	      visibility data), at which time it will be important to be able
	      to selectively distinguish between which portions of cached
	      information should be recalculated.
	    - Added -revis and -norevis options which force and inhibit
	      recalculation of cached visibility data, respectively.  (Note:
	      This information is not yet cached.)
	    - Added (new) -recalc and -norecalc options which perform the
	      composite operations of forcing and inhibiting, respectively,
	      recalculation of all cached information (such as visibility and
	      lighting data).
	- Robert Bate added class keyword to a friend declaration so that
	  CWPro5 is happy.
	- Norman Kramer did a small fix in pixmap clipcode for glide.
	- Eric Sunshine made the following changes to csString:
	    - Added variations of Append() and operator+= for all of the basic
	      types (including signed and unsigned).
	    - Added handy left shift operators for all of the basic types.
	      These operators provide a way to compose string in a simple,
	      convenient, and completely type-safe fashion.  For example:
	          str << "Hi " << name << ".  Your age is: " << age << '\n';
	    - Fixed a bug in SetSize() where the resultant string size was one
	      byte larger than requested.  Thus, when Clear() called
	      SetSize(0), the string actually ended up with a length of one.
	    - Renamed SetSize() to SetCapacity() for clarity.
	    - Added Truncate() which shortens a string without freeing the
	      storage.  (You can still call Reclaim() to free storage.)
	    - Clear() now calls Truncate(0) for fast-and-dirty operation.
	      For the old behaviour where storage was freed, call Reclaim()
	      after Clear().
	- Eric Sunshine cleaned up the implementation of scfString and iString.
	- Eric Sunshine performed another partial overhaul of csIniFile.  The
	  following changes were made:
	    - Completely generalized and unified composition and decomposition
	      of INI files regardless of input or output medium (physical
	      filesystem, VFS, iFile, etc.).
	    - Entirely eliminated all the special-case code (without any loss
	      of functionality) which was added to csIniFile so that it could
	      deal with abstract iFile.  The removal of this code _grealy_
	      simplified the implementation.
	    - Now uses iVFS rather than csVFS, thus no longer tied to any
	      particular implementation.
	- Eric Sunshine fixed a compilation error in math2d.cpp and a
	  compilation warning in octree.cpp and csstatic.cpp.

Please see "history.old" for less recent historical entries.
