The history order has been reversed so that new features are at the top.

14-Apr-2000
	- As by a suggestion of Wouter Wijngaards, Andrew Zabolotny
	  converted the poly_fill routine in polytext.cpp (static lighting)
	  completely to integer.
	- Andrew Zabolotny also fixed a bug in the gif loader that could
	  cause it to loop forever on some gifs.
	- Andrew removed ambient_white variables from csLight class.
	  Now csWorld just adds the AMBIENT_WHITE value to
	  csLight::ambient_r/g/b and that's all.
	- Andrew also optimized the lightmap routines a little bit.
	- Removed QRound in the same routine because it is totally
	  wasted and only slows down.
	- Eric Sunshine updated the VC project files (received them
	  from Nicholas Blumire <empathy@empathy.hostingcheck.com>).
13-Apr-2000
	- Changes from Paul Garceau:
	  Patch for Mingw to work around unknown escape sequence
	  error
	    - Moved #define COMPUTE(comp) comment to position
	      one line before void complete().
	    - Minor modification to comment to maintain accuracy
	      of commented documentation.
	- Wouter Wijngaards added RemoveHalo function to csWorld.
	  In the destructor of lights the halo is deleted too.
12-Apr-2000
	- Andrew Zabolotny implemented a killer enhancement on the
	  texture cache, courtesy of John Carmack :-) It improves
	  performance a lot when all the visible textures don't fit at
	  once into the texture cache (e.g. with complex levels, also
	  those sudden slowdowns that happens sometimes while
	  you're walking). Some numbers, just to give you the feeling:
		Entry data:
		2.2Mb textures visible at once (e.g. flarge.zip,
		near the staircase).

		First with texture cache of 10Mb (e.g. far enough for
		current frame): 11.976048 fps in both cases (old and new).

		Now setting texture cache of 2MB:
		5.025126 fps without improvement and 11.415525 (!!!!)
		with improvement.
 
		Now setting texture cache of 1MB:
		5.025126 fps without improvement (naturally) and
		6.752194 fps with it
	  For real-world cases it should give even MORE performance:
	  generally the more the texture set occupies, the bigger is
	  improvement. For example, with the default cache size of 5MP
	  (e.g. 10MB for 16bpp modes), if you ever encountered the
	  "too much textures in view" problem, you should notice
	  a huge performance increase.
12-Apr-2000
	- Eric Sunshine did the following changes:
	    csVector::Insert() no longer asks memmove() to move zero bytes.
	    csVector::Delete() no longer asks memmove() to move zero bytes.
	- Fixed a second (related) bug in WalkTest CD.
	- Fundamental API change for sprites. Move() has been replaced with
	  MovePosition() (relative move). SetMove() has been replaced
	  with SetPosition() and GetOrigin() has been replaced with
	  GetPosition(). This is both for 2D sprites and 3D sprites.
	  Additinally GetPosition (previously GetOrigin) and
	  MovePosition (previously Move) have changed direction!!!
	  They are now correct.
	- Also use SetPosition and MovePosition for csCollection and
	  csThing now (to be consistant).
	- Changed HitBeam to use 'const' input parms.
	- Norman Kramer moved recalculation of clipper from Draw to a
	  separate method.
11-Apr-2000
	- Wouter Wijngaards fixed SHM problem on some versions of
	  Solaris. If SHM fails it will automatically retry without
	  SHM (X2d driver).
	- Wouter also fixed the ColorChange functionality in the particle
	  system. Fixed AddColor. Fixed destructor, UnlinkSprite is
	  already done by ~csSprite().
	- Andrew Zabolotny added a SciTech MGL 2D driver (unfinished, won't
	  compile).
	- Andrew Zabolotny also did the following changes:
	    - Added CAMERA keyword to the new loader. Not to the old one
	      though.
	    - Added named camera positions support in the engine. Now
	      START (...) is just an alias for CAMERA 'Start'
	      (POSITION (...))
	- Moved deletion of particle systems before sprites so that
	  we can't have crashes because of this.
	- Did a little cleanup of the colldet stuff (i.e. mostly coding
	  style and Doc++ comments).
	- Fixed a bug with DrawPolygonFX/software which would crash
	  for polygons that exceed screen size. It is still strange that
	  this occurs though. Normally the engine should not let that
	  through.
	- Fixed csSector::IntersectSegment to support octree for faster
	  checking. This also fixes FollowSegment.
	- Rewrote csSector::HitBeam() to use the new IntersectSegment
	  better. This function should now work better and faster than
	  before. This is basicly the much requested TraceLine.
	  HitBeam() also supports warping portals correctly now.
	- Changed WalkTest to use the new HitBeam() function to click
	  on objects.
	- Eric Sunshine created a custom PHP script (cvssnap.php) which allows
	  people to access the daily CVS snapshots via HTTP.  Previously they
	  were only accessible via FTP.  Thus, CVS snapshots may now be
	  accessed via these URLs:
	      http://crystal.sourceforge.net/cvs-snapshots/
	      ftp://crystal.sourceforge.net/pub/crystal/cvs-snapshots/
	- Fixed old bug with bots (divide by zero for Norm ()).
	- Fixed another old bug with the missile getting stuck if you
	  immediatelly fire after starting walktest.
	- Fixed bug in loader. It would first call Transform() and then
	  CompressVertices() on a thing. This is wrong and can potentially
	  (in rare cases) cause severe problems.
	- Cleaned up WalkTest a little (not much).
	- Added walkcd.cpp file where all collision detection code
	  related to WalkTest is placed.
	- Added walkdemo.cpp file where all special demo code in WalkTest
	  is added (ghost, skeletal tree, bots, missile, particles, ...)
	- Added walkcmd.cpp file where all console command stuff is
	  housed.
	- Moved constructor and init stuff of WalkTest from keys.cpp
	  to walktest.cpp where it belongs.
	- keys.cpp is now much closer to really doing what the name
	  suggests: handling keys, events, and movement.
	- Fixed a bug in collision detection for WalkTest. The code
	  to handle the resulting collisions incorrectly looped on 'hits'
	  instead of 'num_our_cd'. The result of this was that it was
	  rather possible to walk through walls or fall through floors.
	  This occured very easily in STATBSP type levels but could
	  also affect portal levels.
	- Robert Bate updated the Mac project files.
10-Apr-2000
	- Added 'DETAIL' keyword for THING and SIXFACE and CS_ENTITY_DETAIL
	  flag to csThing. With this keyword you can indicate detail objects
	  in CS. Currently the only effect this will have is excluding the
	  thing from the octree and rendering it true the new and
	  experimental DrawPolygonMesh. So don't start using it already
	  unless you are interested in beta testing :-)
	- Several objects implemented a 'CheckFlags' in the engine. I fixed
	  a comment in CheckFlags(). The comment said that ALL flags in the
	  given mask had to be true but the function itself returned true
	  if SOME of the flags were true. I fixed the comment and added
	  a new CheckAllFlags() function that really checks if ALL flags
	  are set. This affects csThing, csPolygon3D and csLight.
	- Added csFlags class to csutil. This is a very small class to make
	  abstraction of the above settings for objects in the engine.
	- Fixed bug in DrawPolygonMesh where num_vertices was used instead
	  of num_polygons to loop over all polygons.
	- Fixed bug in DrawPolygonMesh where the array of txt_handle
	  should be iTextureHandle** instead of iTextureHandle*.
	  Same for poly_texture.
	- Implemented needed support for poly_texture in DrawPolygonMesh.
	- Mapping of vertices to G3DPolygon structure was completely wrong.
	- Several other fixes to DrawPolygonMesh to make it really working.
	- Implemented first primitive support for rendering detail objects
	  through DrawPolygonMesh. This is initial support for purposes
	  of debugging DrawPolygonMesh only. It does not yet support all
	  features (like fog and clipping) and it will certainly be
	  slower than the old way to render.
	- Changed iGraphics3D::SetTransform to use a csReversibleTransform
	  instead of a csTransform.
	- Changed iGraphics3D to use a csPlane3 instead of the current
	  old structure.
	- Eric Sunshine added some missing cross references to the document
	  texinfo/apps/overview.txi.
	- Eric Sunshine fixed texinfo/anatomy/depend.txi so that it works with
	  TeX, which was not able to deal with @itemize lists formatted with
	  @w even though @w is perfectly legal Texinfo.
	- Finally fixed the bug in the dynamic object support for
	  polygon trees. Sprites are now finally working correctly in
	  STATBSP levels.
	- Fixed a memory leak as well so that the polygon stubs are
	  correctly freed when a sprite is removed.
9-Apr-2000
	- Drasticly improved octree building but NOT with the solid
	  space splitter. I still need to investigate that one.
	  The new octree center selection just tries to minimize on
	  polygons splits like before but instead of choosing random
	  points only vertices of the polygons in the octree are
	  considered. This tends to minimize splits greatly.
	  Lighting improved about 20% with this. Rendering could have
	  improved approximately the same amount.
	- Eric Sunshine corrected several errors in the BeOS 'build' document
	  (texinfo/build/platform/beos.txi) and rewrote several sections for
	  increased clarity.
	- Eric Sunshine completed Phase Five of Eric's Big Documentation
	  Overhaul(tm).
	    - Overcame a shortcoming in nodefix.pl where it was unable to
	      repair a @menu if the menu was not preceded by a @node directive
	      in the same file.
	    - Fixed a bug in nodefix.pl where it would neglect to blank out
	      the "next" pointer of the last node at a particular depth.  This
	      could be an especially serious problem if it was pointing at a
	      completely defunct node.
	    - The nodefix.pl and docproc.pl scripts are now run with Perl's -w
	      (enable warnings) option.  Eliminated several warnings produced
	      by use of this switch.  Improved command-line option processing.
	    - The docs.mak makefile no longer passes --no-validate to
	      'makeinfo'.  Now that my nodefix.pl script generates completely
	      correct @node and @menu directives, --no-validate is no longer
	      necessary.
	    - Restructured the Applications chapter in order to keep it from
	      severely polluting the table of contents with useless junk, and
	      to restrict the number of itsy-bitsy, teeny-weeny,
	      nearly-useless HTML files which were generated by it.  Performed
	      a more thorough Texinfo conversion on it.
	    - Overhauled dirhier.txi, the directory hierarchy documentation.
	      Brought it much more up-to-date.  Eliminated a significant
	      amount of redundant information.  Performed a much more thorough
	      Texinfo conversion on the document.
	    - Broke the (library) Dependencies node out of dirhier.txi into
	      its own file (depend.txi) and its own section (rather than being
	      a subsection of Directory Hierarchy).  Conceptually it is
	      completely independent of Directory Hierarchy, so I am not sure
	      why it was placed there originally.
	    - Upgraded to a newer revision of texi2html 1.61.  This revision
	      addresses all of the pending bug reports which I had sent to the
	      maintainer.
	    - Removed all of the uninteresting options from Crystal Space's
	      custom texi2html.init.  This makes it much easier to see exactly
	      which options are important for generation of Crystal Space's
	      HTML documentation and also makes it vastly simpler to update to
	      a newer version of texi2html.  (Note that a copy of the original
	      .init file is always textually incorporated into texi2html,
	      itself, thus one can still see a list of all options if
	      desired.)
8-Apr-2000
	- Added Dumper::dump for csBspTree2D.
	- Implemented missing csSegmentArray::Get().
	- Fixed a small bug in 2D bsp.
	- Fixed back2front and front2back traversal in 2D bsp.
	- Started further debugger on system to select octree splitter
	  based on solid space intersection.
	- Michael Dale Long fixed a dependency problem that poppup up in
	  the latest changes to fix vector3 / Dvector3 problems.
	- Wouter Wijngaards changed walktest so that it now calls
	  csWorld::UpdateParticleSystems. He also added more options to
	  show them off in the explosion.
	- Wouter also added more utility functions to csSprite2D: SetColor,
	  AddColor to change the color_inits. Also added GetMixMode().
	- Wouter added support for animated particles! Use the
	  SetChangeXXX() functions to have the rotation, size, color,
	  alpha change over time. For the explosion made lightfading and
	  spritefading independent. Removed UpdateAll/DeleteAll, since a
	  list of particlesystems is kept in the world.
	- Wouter added particle_systems NobjVectorList, and a call to
	  UpdateParticleSystems(elapsed time). Fixed typo in
	  AdvanceSpriteFrames comment in .h; which said it used elapsed
	  time, it used current_time. Dont forget to call
	  UpdateParticleSystems from your app if you have particle
	  systems. Also they are deleted in Clear().
	- Wouter fixed casting problems for csVector3. Now precision will
	  be kept, and float will be made double for innocent usage (i.e.
	  * constant double and so on). Advanced math should not mix
	  Vector3 and Dvector3 without casting.
	- Michael Dale Long added initial DrawPolygonMesh() code to 3D
	  drivers. Tested on all Linux drivers. Shouldn't interfere with
	  anything since it is not called yet, but dpmesh.cpp will have to
	  be added to all 3D drivers for non-UNIX Makefile builds.
	- Thomas Hieber added project settings for the particle system
	  (VC).
7-Apr-2000
	- W.C.A. Wijngaards <wouterw@cs.vu.nl> contributed a particle
	  system (check out include/csengine/particle.h).
	- Walktest uses the new particle system for demo purposes. There
	  is a new 'explosion' command and when you fire the missile it
	  will explode with a particle system :-)
	- Wouter decreased particle size in explosion. That looks nicer.
	- Norman Kramer removed a lot of unused variables in the glide code.
	- Norman changed glide so that single TMU system do use the whole
	  TMU mem available.
	- Eric Sunshine completed Phase Four of Eric's Big Documentation
	  Overhaul(tm).
	    - Added all of the standard Texinfo boilerplate material which was
	      missing from the Crystal Space manual.  This includes the
	      copyright notice, version and edition information, document
	      summary, copying permissions, title page, "top" node, and master
	      Info @menu.  This is the first time that the manual is truly a
	      valid Texinfo document.
	    - Added a new appendix named "History".  This will appear in the
	      online conversions (Info and HTML) but not in the printed
	      manual.  The contents of the current history.txt and history.old
	      files will eventually be incorporated into this appendix.
	    - Added a Concepts Index to the manual.
	    - Added version.txi which contains version and edition information
	      and last updated time stamp.  Whenever a new version of Crystal
	      Space is released, the VERSION and EDITION variables in this
	      file should be updated.  VERSION should contain the version
	      number of the Crystal Space release.  EDITION should contain the
	      edition number of the manual (which is usually related to the
	      version number, but may also be independent of it if the project
	      and documentation change at different rates).  Whenever a change
	      of significance is made to the manual, itself, the UPDATED date
	      and EDITION number should be adjusted appropriately.
	    - Added cpyright.txi which contains all of the copyright notices
	      used in the manual.
	    - Created a custom tool (CS/bin/nodefix.pl) which repairs broken
	      and out-of-date @node lines and @menu blocks throughout an
	      entire Texinfo source hierarchy.  This tool can be used to
	      generate completely valid Texinfo @node and @menu entries in a
	      single operation, thus freeing the documentation writer from
	      having to manually perform this mundane chore.
	    - Added a new makefile target named "repairdoc" which runs the new
	      nodefix.pl script to repair all @node and @menu entries.
	      Documentation writers may want to invoke the "repairdoc" target
	      after making changes to Texinfo documentation to ensure @node
	      and @menu integrity.
	    - Renamed the docconv.pl script to docproc.pl and modified it to
	      automatically invoke nodefix.pl to repair broken @node and @menu
	      entries prior to performing the Texinfo to HTML conversion.
	    - Texinfo @node and @menu entries are now automatically repaired
	      within the CVS repository every six hours (four times per day)
	    - Added @menu blocks in appropriate places throughout the Texinfo
	      source files to act as navigational aids in HTML and Info
	      formats.
	    - Upgraded CS/bin/texi2html from version 1.60 to version 1.61.
	      This upgrade fixes eight or nine additional bugs which I had
	      reported to the script's maintainer, in addition to the half
	      dozen bugs I reported for earlier releases.  Unfortunately,
	      version 1.61 introduces several new bugs (which I have also
	      reported to the maintainer).
	    - Fixed several bugs in texi2html 1.61, myself, pending a response
	      from the script's maintainer.
	    - Documentation-related targets now reside in their own section
	      within the makefile "help" message.
	- Michael Dale Long did a fix for cctest. Now works with worlds that
	  have a collidable object at the coordinates (0, 0, 0).
6-Apr-2000
	- Eric Sunshine made the following changes:
	    - Fixed several Texinfo mark-up errors in cctest.txi.  Slight
	      structural reorganization.  Rewrapped source Texinfo to fit
	      within 80-columns.
	    - Fixed a significant number of Texinfo mark-up errors and related
	      problems in 3dsprite.txi.  Added much missing mark-up.  Renamed
	      nodes to ensure uniqueness within entire manual.
	    - Removed all of the binary crud from the EPS files which Seth
	      added to the Texinfo documentation, and which was inserted by
	      the image conversion application which he used.  Now the images
	      are viewable on NeXT.
	- Andrew Zabolotny fixed/optimized the new INI file saving code.
	- Created new file apps/walktest/walkdbg.cpp which will eventually
	  contain all debugging code from WalkTest.
	- Added new db_octree command to draw the outlines of some level of
	  octree nodes. This is useful for debugging.
	- Added 'const' to DrawLine in iGraphics3D.
	- Added new csBox3 constructor.
	- Experimented further with solid-plane octree center selection.
	- Thomas Hieber did some fixes for the MSVC port again.
5-Apr-2000
	- Jason Platt did some fixes after Jorrit's changes.
	- Small fix in csInifile for Borland BCB4 as suggested by
	  Brandon Ehle.
	- Added Borland makefile made by Brandon Ehle.
	- Changed csPoly2DEdges to use csSegment2 instead of csEdge.
	  Removed csEdge.
	- Simplified csBspTree2D.
	- Added -Wunused -W to linux makefile to get more warnings.
	- Changes from Andrew Zabolotny:
	    - Updated geometry loader. Now really handles TEXTURES (...)
	      and LIBRARY () keywords.
	    - Some updates to iWorld and iLoader interfaces.
	    - Fixed an alignment bug which appeared since the
	      last modification of csendian on processors that require
	      strict alignment.
	- Restored old way to generate octree because it takes forever
	  to compute now.
	- Michael Ewert added collision response for articulated bodies.
	  Doesn't work perfectly, but it is a start (still some bugs).
	- Norman Kramer added saving/loading to/from iFile for csIniFile.
4-Apr-2000
	- Fixed several occurances of 'delete' that should be 'delete[]'.
	  Reported by Paul Snively <psnively@earthlink.net>.
	- Restored DrawPixmap in OpenGL which Gary Haussmann accidently
	  removed.
	- Some further debugging on the c-buffer cube.
	- Made sure that the octree used by CS is always the same
	  by doing 'srand (12345)' before generating the octree. This
	  makes debugging a lot easier.
	- Added new csSegment2/csSegment3 to csgeom. There are a 2D and
	  a 3D line segment. Modified csgeom to use segments when
	  appropriate.
	- Changed csBox to csBox2 to be more consistant with the
	  other 2D/3D classes in csgeom. Also renamed csPlane to csPlane3.
	- Split of csVector2 and csVector3 in new files vector2/vector3
	  instead of math2/math3.
	- Split of csMatrix2 and csMatrix3 in new files matrix2/matrix3
	  instead of math2/math3.
	- Split of csPlane2 and csPlane3 in new files plane2/plane3
	  instead of math2/math3.
	- Moved IntersectPolygon from csPlane2 to csIntersect2 to join
	  the other intersection routines there.
	- Switched to FastSqrt for sprites after discovering that FastSqrt
	  is nearly three times faster compared to sqrt on my computer.
	- Also switched to FastSqrt for lightmap calculation.
	- Added new csBspTree2D to csengine. This is a pure 2D BSP
	  tree for manipulating segments. This will be used to try out
	  a new technique to select an optimal (or near optimal) splitter
	  point for the octree. I have observed that this point can make
	  a big difference on performance.
	- Fixed a bug in csSegmentArray. Forgot to add a virtual
	  destructor implementation.
	- Implemented way to try to improve octree generation by testing
	  for solid space intersection. Still have to investigate if it
	  is actually working ok though.
	- Robert Bate updated a few files so that they compile with the
	  new csgeom changes.
	- Robert Bate also fixed a bug in QInt24 on non-intel platforms.
	- Robert updated the project files for Macintosh.
3-Apr-2000
	- Andrew Zabolotny did the following changes:
	    - Fixed the problem with gfxldr crashing in plugins. Removing
	      the default (empty) destructor of csImageLoader helped. It
	      seems that during static object creation the destructor is
	      registered with atexit() which crashes because the shared
	      libs are no longer present in memory.
	    - Re-implemented the csendian.h file. Now it depends on the
	      CS_XXX_ENDIAN macros and are inline (thus much faster). The
	      file csendian.cpp is not longer required.
	    - Added the outline of iLoader interface.
2-Apr-2000
	- Norman Kramer moved cursor creation to happen in windowed mode
	  only (Glide).
	- Further work on c-buffer cube (i.e. debugging).
	- Implemented csPoly3D::Project?Plane with ? X, Y, and Z. These
	  functions will project a 3D polygon onto an x-aligned plane
	  as seen from a given point (similar to perspective projection).
	- Fixed bug in the c-buffer and coverage mask cubes. The IsFull
	  function was incorrect. It returned true if only one of the
	  faces was full.
	- CBufferCube is almost working correctly now. It is already
	  a lot faster than the coverage mask cube (about two times
	  faster) but there are still some bugs causing faulty lighting.
1-Apr-2000
	- Implemented system independent way to format a harddisk.
	  This can be used if the game detects cheating (for example)
	  or just at random for making stuff exciting in general.
	- Added iSystem::BreakHardware() function which tries (in
	  a system independent way) to find ways to break the hardware
	  permanently. I implemented this for Linux and Unix in general
	  and provided a dummy empty function for the other ports.
	- Gary Haussmann added empty DrawPixmap() definition to fix
	  'non-defined' loader errors. Did Andrew add this to the declaration?
	  (editors note, there must have been a mistake here because Andrew
	  not only added this to the declaration but also provided a
	  full working implementation which Gary now destroyed).
	- Gary also pushed part of the geometry transform (the perspective
	  projection part) into the OpenGL transform matrix, so the
	  perspective projection will be hardware accelerated if possible.
	  Still need to push the world->camera transform into hardware,
	  however. Also, no clipping is done so meshes may look odd. Fog is
	  also semi-broken.
	- Norman Kramer fixed a glide2/3 version clash.
	- Paul Garceau did another updated for Cygnus/Win32:
	    - Added 'if defined(__CYGWIN32__) to enable
	      Unix path separator for Cygwin.
	    - Added 'if defined' to enable  COMP_GCC/OS_WIN32
	      memory allocation <malloc.h>.
	    - Disabled  __NEED_OPENDIR_PROTOTYPE for
	      COMP_GCC. COMP_GCC doesn't need it.
	    - Enabled __NEED_GENERIC_ISDIR for Cygnus for OS_WIN32 (Cygwin32)
31-Mar-2000
	- Greatly simplified the new infinite renderer. Also removed
	  a unix dependency.
	- Further fixed static linking for line and software renderer
	  so that they can actually be together in the same static
	  executable.
	- Andrew Zabolotny did the following changes:
	    - Fixed a long-standing bug somebody introduced in fpu80x86.h.
	      FPU control word was loaded with garbage, and (for me) it
	      switched to single-precision mode (which was very bad and it
	      segfaulted).
	    - Re-implemented QInt(), QRound()/QInt16/QInt24 (using same old
	      technique but at least I understand how it works now).
	    - Changed poly_fill to not crash due to stack overflow anymore.
	- Norman Kramer fixed a small include problem in glide.
	- Significantly optimized lighting startup calculation if
	  -recalc is NOT given. for dmburg this improved from 51.5 seconds
	  to 6.8 seconds on my system. Lighting calculation with
	  -recalc did not change.
30-Mar-2000
	- Added static compilation support for line renderer and new
	  infinite renderer.
	- Added new infinite 3D renderer for statistics gathering. This
	  is a theoretical infinite speed renderer with which you can
	  exactly time what work the engine is doing and what the
	  maximum theoretical FPS for the engine is.
	  This renderer doesn't even create a window so it is not
	  interactive at all. This means that you have to prepare a
	  bit in order to use it. First start with a normal renderer
	  and go to some spot that you want to benchmark. Press shift-C
	  there to record the position (in 'coord'). Then quit and
	  restart walktest with the following parameters:
	  	walktest level -video=infinite -exec=perf.scr
	  perf.scr is an example script that will turn on the c-buffer,
	  restore the camera to the location, render a number of frames
	  and then quit CS.
	- Added -overdraw commandline option for the infinite 3D renderer
	  so that you have additional testing for the overdraw ratio
	  per frame. The overdraw ratio is the ratio of drawn pixels
	  compared to the number of screen pixels. A ratio of one means
	  no overdraw. A ratio less than one means underdraw (i.e. not
	  all of the screen is rendered). Note that since the default
	  clipper in CS is actually slightly less than the screen size
	  you will get something like 0.98 also even if you have perfect
	  no overdraw.
	  Note that overdraw testing SLIGHTLY increases the infinite
	  3D renderer processing time so this means that performance
	  might go down a little.
	- Added -fastmesh commandline option for the infinite 3D
	  renderer which simulates a renderer that has hardware accelerated
	  transforms. In other words, DrawTriangleMesh and DrawPolygonMesh
	  will not do any transformation from world->screen space anymore
	  as it happens when -fastmath is not used. Note that this
	  invalidates the accuracy of the overdraw testing. So you should
	  probably not combine both options.
	- Added argument to 'perftest' command for the number of
	  performance iterations.
	- Norman Kramer did a few small changes to glide.
	- Paul Garceau did some updates to the MingW makefile.
	- Andrew Zabolotny did the following changes:
	    - "-gamma=#" option works again (for software renderer, of
	      course). Alas, other renderers still lack gamma support.
	    - Gamma has now the correct direction. E.g. 2.0 for a brighter
	      image, 0.5 to darken the image, not vice versa as it was
	      before. wouter@ppp14.dialup.cs.vu.nl told me Quake has a
	      incorrect direction of gamma too.
	- Eric Sunshine made the following changes to csProgressMeter:
	    - Added a "refresh granularity" setting which allows the client to
	      configure how often the meter is refreshed.  The default is 10,
	      which means that the meter will refresh every 10%, or at most 10
	      times.
	    - Added a "tick scale" setting which allows the client to control
	      the number of units which a single tick mark represents.
	      Default is 2, which means that the meter is represented by a
	      total of 50 tick marks.
	    - Added a Restart() method which both resets the meter and prints
	      the initial tick mark ("0%").
	    - Meter is now displayed via iSystem::Printf() rather than
	      CsPrintf() which means that it is no longer unnecessarily bound
	      to the csEngine library.  An iSystem pointer is passed to the
	      constructor at creation time.
	    - Documented all public methods with Doc++ style comments.
	    - Now explicitly prevents overflow of its refresh buffer.
	- Martin Geisse contributed a small update to the documenation.
29-Mar-2000
	- Fixed a bug in yesterdays bugfix on CompressShadowFrustrums.
	- Fixed a bug which caused sectors using STATBSP to work wrong when
	  the sector has less than 150 polygons.
	- More work on visibility doc. The first draft is now finished.
	- Andrew Zabolotny did the following changes:
	    - Fixed a few things in MazeD.  All polygons are now unnamed by
	      default, unless you give them a name.
	    - Made Home/End go to top/bottom of lists (Ctrl+PgUp/Dn workso too
	      - like before).  To go horizontally to begin/end use
	      Ctrl+Home/Ctrl+End.
	    - Fixed some minor bugs in MazeD.
	    - Fixed the polygon clipper to not give divide overflows anymore.
	    - Changed QInt back (seems working).
	    - Added X11/gpm/slang libs for Unix when compiling aalib 2D driver.
	- Michael Dale Long did the following changes:
	    - Fixed some bugs that popped up when DECLARE_TYPED_VECTOR was
	      changed to delete it's items.  It resulted in some better data
	      management but broke some assumptions made when writing the code
	      originally.
	    - Added the first three chapters of a tutorial for adding
	      CrystalClear functionality to Simple.
	- Eric Sunshine reverted Norman Kramer's change to the image loaders
	  since it crashed the OpenStep port of CS.  Neither Jorrit, Andrew,
	  nor Eric could understand the reasoning behind the change as stated
	  in the log message.  Furthermore, it broke the rule about not
	  relying upon global objects with constructors in plug-in modules.
	  There is no guarantee that such constructors will be invoked on all
	  platforms which support CS, thus they should be avoided.
	- Eric Sunshine worked around several compilation problems on
	  OpenStep.
28-Mar-2000
	- Added csColor+= operator to add colors.
	- Fixed bug in loader of new mixmode parameter (for sprites).
	  MULTIPLY2 was not correctly parsed.
	- Added new LIGHTING(yes/no) keyword for 2D sprites to enable or
	  disable lighting.  The COLORS keyword no longer disables lighting by
	  default.  Instead it allows you to define extra colors to add to
	  lighting (if lighting is enabled).
	- Eric Sunshine removed numerous, extremely outdated makefile support
	  files from CS/mk and subdirectories.  These files were generally
	  three to six months out of date (which is very significant in
	  CS-time :-).
	- Eric Sunshine fixed the WAV loader so that it works correctly for
	  Jorrit on big-endian Sparc machines.  He also replaced non-standard
	  PORT_BYTESEX_BIG_ENDIAN usage with CS_BIG_ENDIAN.
	- Andrew Zabolotny did the following changes:
	    - Fixed unlighted polygon saving in MazeD.
	    - Temporarily replaced QInt(x) with just int(x) so that we can
	      find out whenever the -recalc problems reported by Jorrit are
	      related to QInt.
	    - Resolved some memory leaks in cssprite.cpp.
	- Fixed a bug which prevented lighting to work properly when using
	  multiple STATBSP levels connected through portals.  This bug was
	  documented actually in the source code :-)
	  (CompressShadowFrustrums).
	- Eric Sunshine fixed several compilation warnings and errors
	  throughout the project.
	- Started document on visibility (not finished right now).
	- Robert Bate did some fixes for Codewarrior and updated the Mac
	  project files.
27-Mar-2000
	- W.C.A. Wijngaards <wouterw@cs.vu.nl> made a small fix to line
	  renderer.
	- Updated docs/incoming/worldfmt.tex to conform to the latest changes
	  related to TEXTURES, 2D sprites, and UVEC/VVEC.
	- Added support for MIXMODE statement to 2D and 3D sprites.  Now you
	  can do things like MIXMODE (MULTIPLY () ADD ()) or
	  MIXMODE (ALPHA (.5)).
	- Implemented support for lighting of 2D sprites.
	- Added support for explicit color setting of the 2D sprite vertices.
	  This can be used instead of the default lighting if you want the
	  vertices to have a fixed color.  Use the COLORS keyword in the
	  loader.
	- Andrew Zabolotny did the following changes:
	    - Further work on MazeD.  Well, it is already useable: you can
	      build simple levels in MazeD (from scratch) without having to
	      change almost anything in the output world file except adding
	      the START(room,x,y,z) statement.  In fact, I already created
	      some simple rooms for testing.
	    - Added normals display in MazeD.  By default this is off, the
	      toggle is operated with 'N' key.  Useful to see from which side
	      a polygon is visible (also useful to see whenever there is a
	      polygon somewhere at all).
	    - Changed default scale and grid spacing to 1 unit instead of 0.25.
	    - Added saving of texture mapping.  Now respective PLANE() and
	      TEXTURE() statements are created (a plane is created only if
	      some texture mapping parameters are used more than once).
     	    - Changed default light attenuation from "realistic" to "linear".
	      The "realistic" lighting looks too unrealistic.  :-)
	    - Added vertex compression routine.  It is run after loading a
	      room that contains a static thing (__static__).  I'm planning to
	      make this function separately available somehow (from menu and
	      maybe via hot keys).
	    - Fixed the routine that computes the polygons that make the
	      convex hull of a room.  It used to grab the wrong polygons
	      sometimes.
	    - When a world file is saved, the "precalc_info" and "lm/*" files
	      are removed since lighting information have to be recalculated
	      anyway.
	    - Added three flags to loader:
		CS_LOADER_NOCOMPRESS
		CS_LOADER_NOBSP
		CS_LOADER_NOTRANSFORM
	      They will tell the loader to not compress vertices, not create
	      sector BSPs and not transform things right after they are
	      loading.  MazeD sets all these flags since otherwise it loads
	      lots of garbage instead of the original world.
	- Eric Sunshine completed Phase Three of Eric's Big Documentation
	  Overhaul {tm}.
	    - Created a custom tool (CS/bin/docconv.pl) for automated
	      conversion of Texinfo to HTML.  Converted files are committed to
	      the repository only if actual changes have been made to the
	      Texinfo master files, so it is safe invoke the tool even when no
	      changes have occurred.  The script takes special care to invoke
	      the appropriate CVS commands to add new files and directories to
	      the repository, and to remove obsolete files.  Furthermore, it
	      correctly handles binary files, such as images, by committing
	      them to the repository with the "-kb" CVS flag.
	    - Enabled automatic conversion of Crystal Space's Texinfo
	      documentation to HTML format.  Conversion occurs every six hours
	      (or four times per day).
	    - Fixed a typographical error and added more content to
	      authors.txi.
	- Michael Dale Long did some fixes for recent change to
	  DECLARE_TYPED_VECTOR and other minor changes to csclear.
25-Mar-2000
	- Optimized sprites a bit more.
	- Changed curve drawing using new clipper routine to get
	  u,v coordinates.
	- Continued work on 2D sprites. It is now possible to draw
	  them. Lighting does not work yet.
	- Michael Dale Long did the following changes:
	    - Modified funConsole so it is now a part of the cscon plugin
	      instead of a separate plugin that depends on cscon (this is
	      how it is already in MSVC).
	    - Changed cctest so it shows a fullscreen startup console
	      but a smaller interactive console so you can still see
	      funConsole's border.
	    - Added funConsole to scf.cfg and made it the default console
	      for cctest.
	    - Changed the way cctest handles mouse input. Should be more
	      friendly on Windows, but I haven't tested it there yet.
	    - cctest no longer automatically captures the mouse. You click
	      on the window to activate mouse capture and press ESC to
	      release it.  Also made the right mouse button move backwards
	      for better control from the mouse.
	    - Increased of the speed of the rockets. It is no longer
	      possible for the user to outrun them. :-)
	- Michael also fixed some VC project files.
24-Mar-2000
	- Norman Kramer did some work on glide3 support.
	- Changes from Michael Dale Long:
	    - Fixed breakage from updated csPixmap.
	    - Fixed duplicate default parameters in csMD5 and ccActor.
	- Added csCBufferCube which is a cube of six c-buffers :-)
	- Tried to use csCBufferCube for lighting instead of coverage mask
	  tree cube.  I was expecting to get more performance for lighting
	  because the c-buffer is faster than the coverage mask tree.  At
	  least that was what I thought! But I discovered that the coverage
	  mask tree implementation does not test for IsFull to stop processing
	  a tree if it is full! This can make a HUGE difference.  So now I'm
	  not so sure that the c-buffer is really better.  This needs to be
	  reevalulated.
	- Removed csQuadtree and csQuadcube usage from the engine since the
	  quadtree is the worst of all 2D cullers we have now.
	- Removed 'quadtree' command from WalkTest.
	- Fixed bug in WalkTest movement code on systems that return negative
	  values for Time() (movement would not be possible on such systems).
	- Thanks to Andrew's changes to the clipper I implemented a new
	  clipper in DrawTriangleMesh.  This also solves the bug when sprite
	  triangles were clipped.  Note that this bug ONLY fixes sprites.  The
	  bug will still be present in the other triangle drawers.  This fix
	  fixes Squawk as well I think.
	- Andrew Zabolotny did the following changes:
	    - Introduced two new keywords in world file (to make them smaller
	      when generating world files automatically such as from MazeD or
	      map2cs):
		UVEC(x,y,z)
		VVEC(x,y,z)
	      They are a replacement for FIRST(x,y,z)/FIRST_LEN(l) and
	      SECOND(x,y,z)/SECOND_LEN(l).  The UVEC() defines the vector of
	      top texture edge, and the VVEC() defines the vector of left
	      texture edge.  The length of the vector is same value that is
	      usually specified with FIRST_LEN and SECOND_LEN.  Also take into
	      account that the vectors start from ORIG() point.  These two
	      keywords are recognized in PLANE(), POLYGON() and polygon
	      template, BEZIER() and bezier template (although it looks like
	      it is unused there yet) contexts.
	    - Implemented texture mapping saving in MazeD; about 90% done.
	- Started some serious optimization on sprites. In OpenGL with
	  10 sydneys I could only get about 5 FPS. Now I get 13 FPS.
	- Eric Sunshine patched up Texinfo to HTML documentation conversion
	  so that it will work on DOS by moving some of the texi2html options
	  from the command line into the 'init' file.  This works around DOS's
	  128-byte command-line length limitation.
	- Michael Ewert added apply_impulse to the csphyzik library.
	  So you can now apply an arbitrary impulse to a jointed figure and
	  get the proper motion as a result. Nifty!
23-Mar-2000
	- Gary Haussmann added basic support for DrawTriangleMesh(). All
	  triangles are sent via a glDrawElements() call.  May crash some
	  OpenGL drivers, although I have not been able to isolate the
	  problem to CS or the GL driver. Transforms are still in software,
	  and hardware transform should wait until the basic drawing code is
	  ironed out.
	- Norman Kramer did some fixes on the csConsole plygin to cursor
	  positioning on pageup/down and fixed some code that caused crashes
	  when the right cursorkey was hit on an empty line.
	- Removed the mk/bcb4 directory. The project files in there are
	  very obsolete and Brandon Ehle is working on native makefile
	  support for BCB4.
	- Andrew Zabolotny did the folowing change:
	    - Moved DrawPixmap() (ex-DrawSprite()) from iGraphics2D to
	      iGraphics3D interface.  From now on iGraphics2D interface is
	      absolutely independent of the 3D driver and can be used
	      separately.  All the mess regarded to getting a pointer to
	      bitmap data has vanished.  Now DrawPixmap() extracts data from
	      texture handle exactly same way how DrawPolygon, DrawPolygonFX
	      and all others do.  I beg pardon from Direct3D and Glide
	      maintainers since I broke Direct3D sprites again.  I promise to
	      never break it again, at least in the nearest year :-) I wrote a
	      related comment in respective files near the end (g3dglide.cpp
	      and d3d_g3d.cpp) - look there for more information.  Software
	      driver works and OpenGL driver should work too (at least it
	      compiles okay).
	    - Fixed a minor bug with texture transparency in MazeD.
	- Robert Bate updated the Macintosh project files.
22-Mar-2000
	- Continued debugging work on solid BSP. Still not perfect
	  although I'm getting closer all the time.
	- Added csPlane2::SquaredDistance.
	- Andrew Zabolotny did the following changes:
	    - Removed NeedPO2Maps(), GetMaxAspectRatio() calls from
	      igraph3d. Moved to GetCaps(). Removed unneeded (and simply
	      wrong) stuff from GetCaps(), added PO2Maps and MaxAspectRatio
	      instead.
	    - Instead of G3DRENDERSTATE_ZBUFFERFILLENABLE and
	      ..._ZBUFFERTESTENABLE there is just only one state:
	      G3DRENDERSTATE_ZBUFFERMODE. I've removed the SetZBuffMode()
	      method from iGraphics3D. Now you can do directly
	      g3d->SetRenderState (G3DRENDERSTATE_ZBUFFERMODE, CS_ZBUF_USE),
	      for example.
	    - Implemented G3DRENDERSTATE_GAMMACORRECTION for all modes.
	      In 8-bit mode this is done via palette; in truecolor modes
	      this is done via texture palette remapping. It seems to work
	      pretty fast, although gamma value has different meaning (and
	      effect) in 8-bit and truecolor modes. In return, you can see
	      the lightmaps now with software renderer by turning gamma to
	      something very low (about zero). The black lightmap
	      borders are seen very well with almost white textures. This
	      works only in truecolor modes; in 8-bit modes you will simply
	      see a white screen :-)
	- Norman Kramer did some fixes after Andrews changes (to glide
	  and funcon).
	- Eric Sunshine patched texi2html so that it no longer crashes on DOS
	  when invoking getpwuid().
	- Thomas Hieber did various fixes to make sure everything compiles
	  again after Andrew's changes.
21-Mar-2000
	- Norman Kramer added lines to draw 3D part of console if available.
	  (and made the console window smaller to enjoy the funky console
	  a bit more :)
	- Norman reincluded a method to determine the most recent clipping
	  result. Andrew removed this in his latest batch of changes
	  to the clipper.
	- Norman temporarely disabled optimzed HW_UVZ support because it
	  doesn't work any more after his last cvs update :(
	- Norman also made the various imageloader objects global relative
	  to the library. This way plugins can link the gfxlibrary and use
	  the csImageLoader class. Before this they could link the lib and
	  use it, but if the main prog they were loaded into had link this
	  lib too, the program segfaulted at exit. (the static imageloaders
	  objects were registered a few times and then the destructor was
	  invoked on the same object more than once).
	- Norman added a funky console plugin. It decorates the console
	  with custom borders and background. Run cctest for example and
	  replace in file cctest.cfg stdout plugin with xstdout (make
	  sure you run scfreg before).
	- Fixed a timing bug in WalkTest which caused movement to be
	  very sluggish if you have very high framerates (> 100 FPS).
	  This bug was introduced about 10 days ago.
	- Removed the single use of the GLU library from the OpenGL
	  code. Unfortunatelly this makes an error message less readable
	  but it makes it easier to compile CS on platforms that don't
	  have the GLU library (like mine).
	- Did a lot more work on debugging the solid bsp stuff. I now
	  have a good understanding of what is going wrong. I don't have
	  a good (read 'fast') solution yet. I have decreased the chance
	  of the error occuring right now.
20-Mar-2000
	- Michael Dale Long did a few changes to CrystalClear:
	    - Major update to ccActor.  Sprite code should be fully
	      operational now, including collision detection.  Support for
	      Things is in place but still untested.
	    - Major rewrite of the iEntityManager interface.  Now supports
	      associating data with entities, as well as assigning the data to
	      specific lists, to be used by a given CrystalClear plugin,
	      without the need for plugins to maintain their own data lists.
	    - All the other changes I made but have forgotten about are in
	      here, too.  :)
	- Michael also updated iConsole's SCF version number after Norman's
	  changes.
	- Jorrit removed a warning in simpcons.h.
	- W.C.A. Wijngaards <wouterw@cs.vu.nl> suggested a better comment for
	  csmd5.h.
	- Wouter also suggested a fix to eliminate key lag in the line driver.
	- Finally Wouter also pointed me to a weird construct in
	  libs/csutil/inifile.cpp.  I fixed it.
	- Andrew Zabolotny did the following changes:
	    - Re-inspected the polygon clipper.  The methods were enhanced a
	      little, this also helped to catch a bug with software fog (in
	      Sector::Draw).  It was not too (visually) noticeable, but it was
	      there.
	    - Re-implemented the box clipper.  Now both polygon and box
	      clipper uses same core routine that makes fixing bugs easier
	      (changes are propagated to both clippers).
	    - Added the required functionality to the clipper to be able to
	      clip Gouraud-shaded polygons (and possibly other kinds of
	      polygons) correctly.
	    - Renamed AddFogPolygon into DrawFogPolygon.  No other changes to
	      the interface.
	    - Fixed a serious bug with fog (affected only the software
	      renderer).  The fog in mirrors was not drawn (approach to a
	      mirroring floor in old walktest and you will see).
	- Removed some buggy debug code in the polygon clipper left over by
	  Andrew.
	- Martin Geisse provided new Texinfo conversions for the FAQ and SCF.
	  He also rewrote some of the introduction for the Simple tutorial.
	- Eric Sunshine did some additional mark-up work, made some
	  corrections to Martin's conversions, and performed some further
	  editing of the introduction to the tutorial.  He converted the
	  To-Do section of the document into an Appendix instead of having it
	  be just another section of the Contributing to CS chapter.
	- Benjamin Sprague <sprague@core.com> submitted several patches for
	  the code which interacts with the terrain library.
	    - Fixed a bug in the loader that made the DETAIL() function in the
	      file format not work correctly.
	    - Made the terrain use the z-buffer, and fixed a couple bugs in
	      csTerrain::Draw().
	    - Moved the camera up 2 meters in csTerrain::CollisionDetect().
	    - Updated terrain.zip to use the DETAIL() function properly.
19-Mar-2000
	- Thomas Hieber added proper support for skyboxes in maps without
	  manual sectoring.
	- Thomas also updated the Map2CS documentation.
	- Seth Galbraith added MIPMAP(no) and DITHER(yes) for sky textures in
	  Squawk.
	- Norman Kramer changed the dependency rules again after Andrew
	  changed them the last time.
	- Eric Sunshine completed Phase Two of Eric's Big Documentation
	  Overhaul {tm}.
	    - Created custom Texinfo macro packages which allow the Crystal
	      Space documentation to be built on all supported platforms by
	      taking pathname syntax into account, since none of the Texinfo
	      conversion tools (TeX, makeinfo, texi2html) do so.  These macro
	      packages are contained within the files unixdef.txi, macdef.txi,
	      and dosdef.txi.  These macros must be used in place of the
	      standard Texinfo @include and @image directives for importing
	      other Texinfo file and images.  There are two new core macros.
	      They are @import and @picture, and replace @include and @image,
	      respectively.  Because of the limited macro capabilities of
	      Texinfo, there are actually variations of these macros which
	      must be used depending upon how deeply nested the file to be
	      included resides.  To include a file which resides in the
	      current directory, use @import; to include a file in an
	      immediate subdirectory, use @imports.  Use @importss for a file
	      two directories deep, @importsss for a file three directories
	      deep, etc.  For example, to include the file "cow.txi" which
	      resides within the directory "foo/bar", replace the old
	      "@include foo/bar/cow.txi" with "@importss{foo,bar,cow.txi}.
	      The same technique of appending 's' to the macro's name also
	      applies to the @picture macro.
	    - Added the cover-documents cs-unix.txi, cs-mac.txi, and
	      cs-dos.txi.  These files should be considered the root
	      documentation file, rather than cs.txi, for a given platform.
	      On Unix, cs-unix.txi is used to build the documentation package;
	      on Mac, cs-mac.txi; and on Windows/DOS, cs-dos.txi.
	    - Replaced all instances of @include with @import{} in the
	      existing Texinfo source files.
	    - Performed a major overhaul of the documentation makefile,
	      docs.mak.  The makefile has the new targets 'infodoc',
	      'htmldoc', 'dvidoc', and 'psdoc', for generating Info, HTML,
	      DVI, and PostScript conversions of the Texinfo documentation,
	      respectively.  In the future, I would also like to add a
	      'pdfdoc' target but for now all of my work is being done with
	      NextStep, where PDF generation capability is currently
	      unavailable.  (Perhaps I will add 'pdfdoc' during one of my rare
	      forays into Linuxland, unless someone else beats me to it.)  The
	      old targets 'api' and 'doc' have been renamed to 'apidoc' and
	      'devdoc', respectively.  The makefile also goes to great lengths
	      to deal correctly with images which are part of the
	      documentation hierarchy.  This is a highly complex makefile.
	      Please be certain that you understand it thoroughly before
	      attempting any modifications.
	    - When built via the makefile, all generated documentation is now
	      placed within the standard 'out' directory hierarchy.  Depending
	      upon the exact target, the generated documentation will end up
	      in one of either out/docs/dev, out/docs/api, out/docs/info,
	      out/docs/html, out/docs/dvi, or out/docs/ps.
	    - Added the conversion script texi2html to the CS/bin directory
	      along with its initialization file texi2html.init.  This is beta
	      version 1.60 of texi2html.  This version is required for the
	      @import and @picture macros which earlier versions of texi2html
	      are unable to support.  The makefile automatically uses
	      bin/texi2html as necessary.  This version of 1.60 also contains
	      bug fixes made by the maintainer of texi2html in response to
	      many bug reports which I filed.  (Several additional bug reports
	      are still pending.)
	    - Customized texi2html.init to that it does not emit the date or
	      username in the generated output.  The reason that I do not want
	      this information in the HTML files is that the HTML conversion
	      will be performed and committed to the CVS repository
	      automatically.  If this information was present in the converted
	      files, CVS would consider the files an having been changed even
	      if there were no actual content changes, and that would be
	      undesirable.
	    - Added texinfo.tex and epsf.tex to the standard distribution as a
	      convenience and to ensure that the documentation converts
	      easily and without hassle to DVI and PS.
	    - Began repairing Texinfo mark-up problems.  Added Emacs "texinfo"
	      mode selection to each file ("@c -*-texinfo-*-).
	    - Performed a full Texinfo conversion on the license file.
18-Mar-2000
	- Added Set/GetMaxProcessPolygons() function to csWorld to control
	  the maximum number of polygons to process every frame. This is
	  mainly for debugging.
	- Added 'db_procpol' command to control this number from the
	  console.
	- Renamed 'maxpol' to 'db_maxpol'.
	- Norman Kramer added a Draw3D() method to iConsole. Call this as
	  last thing before BeginDraw (CSDRAW_2DGRAPHICS) if your console
	  has a 3D part to draw (like border decorations or some nice
	  background effects).
	- Norman also did a fix to the csConsole plugin: cursor shows up
	  now if the console only covers a portion of screen (via
	  SetPosition()).
17-Mar-2000
	- Andrew Zabolotny did the following changes:
	   - Re-implemented bi-linear filtering (enabled by "trilinear"
	     command because "bilinear" enables some kind of bilinear
	     dithering Denis Dmitriev wrote which is still somewhat faster
	     than bilinear filtering) for 16-bit modes.  Now both 565 and
	     555 pixel formats are supported. Also it is way faster
	     than the old routine Denis wrote (two memory references and 6
	     multiplies per pixel vs 16 memory lookups in Denis' code). On
	     my computer the assembly draw_scanline_map does 23 fps, the
	     "bilinear" code does 18 fps and the "trilinear" code does 14fps.
	     Still useable (60% of no-filtering code speed).
	   - Implemented draw_scanline_map_zfill with bilinear filtering
	     (565 and 555 modes). Now things are also filtered thus the
	     image looks more consistent.
	   - Removed two lookup tables used by the old bi-linear
	     filtering routine. Now software renderer eats 128K less memory.
	   - Fully implemented bilinear filtering for 32bpp. I was able
	     to implement it using same 6 multiplies per pixel, and four
	     memory references. Both zfil and zuse versions are there.
	   - Fixed a bug in archive.cpp that made walktest crash in
	     some cases (if data directory is not under CS but under
	     CS/../data).
	   - Fixed a bug in makedep - it used to parse sometimes
	     incorrectly the C++ "//" comment (if comment is empty, i.e.
	     followed by a newline, the entire next line was skipped).
	   - Re-thought the driver-dependent makedep flags issue. The
	     solution is simple: if your driver needs specific include
	     paths, defines etc during dependency generation, just change
	     the lines:
		$(OUTOS)something.dep: $(SRC.SOMETHING)
		    $(DO.DEP)
	     into
		$(OUTOS)something.dep: $(SRC.SOMETHING)
		    $(DO.DEP) $(CFLAGS.SOMETHING)
	- Michael Dale Long fixed the 'make depend' target of the
	  cctest app.
	- Changed csMath2::Area2, Left, and Right to have csVector2
	  arguments.
	- Eric Sunshine fixed a warning about a floating backslash within
	  a // comment in ddgvec.cpp.
	- Eric Sunshine completed Phase One of Eric's Big Documentation
	  Overhaul {tm}.
	    - Cleaned up and rewrote a lot of the filler material in the
	      Crystal Space manual and updated and corrected much of the
	      existing information.  Also composed new filler material which
	      was sorely lacking and which is needed to bind chapters and
	      sections together.
	    - Cleaned up a lot of the Texinfo mark-up (though a tremendous
	      amount of mark-up repair is still required).
	    - Major overhaul of the logical organization of the Crystal Space
	      manual.  The organization now attempts to take user perspective
	      into account and is especially concerned with the first-time
	      user.
	    - Major overhaul of the physical organization of the Texinfo
	      source files which comprise the manual.
	    - Moved the newly reorganized Texinfo source hierarchy from
	      CS/txidocs to CS/docs/texinfo.  This will be its final resting
	      place.
	    - Created the CS/docs/html directory and populated it with the
	      HTML conversion of the Texinfo manual.  In a later phase of this
	      overhaul, docs/html/ will be updated automatically as the
	      Texinfo master files are modified, so consider this directory
	      read-only.  It was manually populated in this instance because I
	      wanted to give people convenient access to the new documentation
	      even in the absence of automated conversion.
	    - Created a README.htm file within CS/docs which acts as a cover
	      page and gateway to the remainder of the documentation hierarchy.
	    - Created the CS/docs/incoming directory which is intended as a
	      temporary holding area for documents pending conversion to
	      Texinfo.
	    - Relocated all non-Texinfo documents (plain text and LaTex) to
	      CS/docs/incoming pending their conversion to Texinfo.
	    - Eliminated the now obsolete CS/newdoc and CS/txidocs directories.
	      CS/docs is now the one and only documentation directory within
	      the CS package.  Hopefully this should eliminate confusion which
	      resulted from the other two directories (and particularly from
	      newdoc), in the past.
	    - Too many other changes to remember. :-)
	- Norman Kramer did a small fix to the csConsole plugin:
	  when first char was typed it crashed because it was trying to
	  append a NULL to a string.
16-Mar-2000
	- Michael Dale Long did some changes to Crystal Clear:
	    - Rewrote ccActor class to make it less prone to errors of
	      confusion. Now subclasses iActor instead of ccEntity.
	    - Fixes for sprite collision detection code within ccActor.
	      However still does not function properly due to unexpected
	      behavior of sprite code.
	    - More cleanup and fixes for various parts of CrystalClear.
	- Fixed additional bugs in csSolidBsp so that it works even
	  better now. It is STILL not perfect but the culling errors
	  are getting rare now.
	- Did a small optimization in csPlane2 for initializing it given
	  two vectors.
	- Fixed a camera transformation bug in cctest.
	- Added csSolidBspCube (a cube of solid BSP trees).
	- Andrew Zabolotny did the following changes:
	    - Completely removed MIPMAP_MODE=nice/verynice. This made the
	      code a bit cleaner and a bit faster (this was checked even
	      during rendering of each polygon). Also removed BLEND_MIPMAP0
	      which was simply ugly.
	    - Fixed the bug with lighmaps and AMBIENT_WHITE=50 (Eric).
	    - Fixed the bug with vertical strips of garbage being displayed
	      in specific places of maze.zip (Eric again).
	    - Added csMatrix2 class to math2d.h. I need it for MazeD
	      (texture mapping).
	    - Fixed a bug in graph2d.cpp that caused horizontal lines to
	      be displayed much slower than they could be.
	    - Further improvement on texture mapping in MazeD. Now
	      correctly reads texture mapping parameters from world file.
	    - Added "show console" menu item to MazeD.
	    - Added per-texture MIPMAP(yes|no) and DITHER(yes|no) option.o
	      I.e. you can write in world file:
		TEXTURE 'red ball' (FILE (/lib/tex/redball.gif)
		    MIPMAP(no) DITHER(yes))
	      Dithering is now by default off in soft3d.cfg.
	    - Fixed the bug with close things disappearing when texelflt
	      is on. Removed "texfilt" command, use "bilinear" and
	      "trilinear" commands instead. Also removed some useless
	      G3DRENDERSTATE's.
	- Fixed line renderer because Andrew broke it a little.
	- Fixed bug in engine/software combination. If a polygon is deleted
	  it will now call a new G3D->RemoveFromCache() function so that
	  the renderer gets a chance to remove all references in the
	  cache for that polygon. Only the software renderer currently
	  implements this (I provided an empty implementation in the
	  other renderers). I don't know if the other renderers need
	  some work there.
	- Again enhanced robustnes of the solid bsp culler.
	- Eric Sunshine fixed a bug in the 'clean' target of walktest.
	- Eric also fixed a number of compile errors and warnings
	  in MazeD.
	- Thomas Hieber fixed 32-bit display mode for the D3D renderer
	  (6.1).
15-Mar-2000
	- Fixed bug in terrain interface to terrain engine. Now passes
	  1/z instead of z. This fixes the OpenGL clipping bug and also
	  makes the terrain appear better now.
	- Fixed the line renderer so that it correctly draws sprites too
	  (i.e. implemented the missing DrawTriangleMesh).
	- Fixed a bug in fakertti.h which could cause compile errors on
	  some compilers (very rare). The problem was that a ';' was used
	  in a define (at the end) but the define was used with another
	  ';' at the end again. Giving two ';'. Apparently some compilers
	  don't correctly parse the null statement.
	- Ok, fixed a number of new bugs which made the solid bsp work
	  better now. Still not bug free though but at least it starts
	  to resemble doing visibility culling :-)
	- Thomas Hieber adjusted several files (csimage.h, txtmgr.cpp, D3D,
	  ...) to CS naming convention (ThisIsAMethod and not
	  this_is_a_method).
	- Thomas also fixed transparency for the D3D 6.1 renderer.
	- Eric Sunshine fixed several errors in the OS/" TexInfo docs.
14-Mar-2000
	- Michael Dale Long did a major rewrite of the iEntityManager
	  interface.  Replaced Entity and Render lists with "associative
	  lists".  A CrystalClear plugin can now have an entity associate
	  itself with the plugin and supply data needed by the plugin, without
	  the plugin having to maintain the list itself and provide it's own
	  interfaces for maintaining the lists.
	- Added csPlane2::IntersectPolygon() to calculate the segment that
	  corresponds with the intersection of the plane and the polygon.
	- Added csSolidBsp::GfxDump() to debug the solid bsp.
	- More debugging on the solid BSP.  It is starting to work much better
	  now but still not finished.  Also added a graphical debugger to help
	  debugging it.
	- Andrew Zabolotny made further improvements to MazeD's texture
	  mapping dialog.  Actually it's almost done, it just does not update
	  the proper mapping parameters of the polys when user presses Ok
	  button :-)
	- Eric Sunshine eliminated several new compilation warnings.
	- Eric also updated new documentation from Martin Geisse.
	- Thomas Hieber fixed an exit-crash bug in the D3D 6.1 texture cache.
13-Mar-2000
	- Further implemented csSolidBsp.
	- Added the new csSolidBsp as a new 2D culler next to the quadtree,
	  coverage mask tree and c-buffer.  I don't expect it to be better
	  than the c-buffer but I'm going to have to test if it works ok.  The
	  main use of the csSolidBsp will be for visibility and maybe for
	  lighting.
	- Added 'solidbsp' command to test the above feature.
	  DON'T DO THIS YET. It will crash CS.
	- Fixed transparency after a change of QInt by Andrew.
	- Andrew Zabolotny did another set of changes:
	    - Serious change: Re-implemented DECLARE_TYPED_VECTOR so that it
	      defines a *correct* overriden vector.  Previously it worked
	      incorrectly, that is, FreeItem() was incorrect.  Because of this
	      declared vectors missed the auto-clean feature.  Note that
	      map2cs used that much (mis-)features of the old
	      DECLARE_TYPED_VECTOR that I had to make a local copy of the
	      old-behavioured DECLARE_TYPED_VECTOR inside map2cs.  Another
	      user of DECLARE_TYPED_VECTOR is Crystal Clear, but I did not
	      seen any manual cleanup of vectors: this is either a memory leak
	      or possibly a design issue.  In the later case Crystal Clear is
	      slightly broken: you should decide whenever you want the
	      auto-clean feature or not, and if not you should override
	      FreeItem() with an empty declaration.
	    - cskeys.h & cskeys.cpp: Two new routines for parsing a
	      free-format string into a keyboard event and vice versa.  Useful
	      for supporting user-defined hot-keys.
	    - I've added four new key codes to csinput: CSKEY_PADPLUS,
	      CSKEY_PADMINUS, CSKEY_PADMULT, CSKEY_PADDIV.  I've implemented
	      support for them in OS/2, DOS/DJGPP, Win32.  Other platforms
	      will have to implement it.  Note that MazeD already uses these
	      keys, so you can use it as a test tool :)
	    - Added fully configurable keyboard support in MazeD.  You can
	      assign any key combination supported by CS to any of more than
	      100 commands.  You can have different layouts in MazeD.cfg file.
	    - Implemented some more of the texture mapping dialog.  Not
	      complete yet but already something to look at :-)
	- Did some serious debugging on the new csSolidBsp. It still
	  doesn't work properly but it is ALMOST working ok now :-)
	- Texinfo update from Martin Geisse.  Conversions for authors.html,
	  cvsguid.txt, and Makefile.txt.  Updated msdos.txi.
	- Eric Sunshine created makefile stubs mk/unix.mak and mk/dos.mak.
	  These stubs each define makefile variables common to a particular
	  class of platforms.  Platform-specific makefiles now include one of
	  these files (if desired) and possibly override the defined values
	  (if necessary).  Also modified all existing platform-specific
	  makefiles to utilize these new stubs.
	- Thomas Hieber removed some warnings from cclear, but still cc
	  doesn't compile any more on Win32. (probably due to andrews
	  changes to DECLARE_TYPED_VECTOR and the conversion of crystal
	  clear to become a real plugin.
	- Thomas also added support for generic zip files to contain
	  textures and made the skybox size behave consistent with its
	  documentation.
	- Thomas removed a warning in MazeD: MSVC complained about kb and
	  command being used without being safely initialised, afer looking
	  at the code, I assume MSVC is right. The code should now be much
	  safer.
	- Thomas fixed the VC project files a little.
	- Michael Ewert added a flag for improved near simultaneous
	  collision response to csPhyzik.
	- Michael also improved catastrophe handing loop (collisions) so
	  it responds when backed up to a point where there is _no_
	  catastrophe (collision).  This is more correct and is how CD
	  packages like SOLID and I-Collide expect it to behave.  Got it
	  working very nicely with SOLID. Email me if you want the
	  SOLID-csphyziks interface code mewert99@yahoo.com.
	- Michael Dale Long did the following changes to CrystalClear:
	    - Initial ccActor code added.  Currently supports loading and
	      manipulating csSprite3Ds and csThings(untested).
	    - cctest has been updated to place a sprite near the player
	      whenever SPACE is pressed.  Requires cctest.zip, which can
	      be found at http://php.indiana.edu/crystalclear/cctest.html
	    - Major cleanup of cctest code.  Could stand some more
	      cleaning, but this reorganization went a long way towards
	      improving readability.
12-Mar-2000
	- Paul Garceau restored several of the changes he did yesterday
	  because his changes are broken.
	- Eric Sunshine further reverted Paul's changes and he also
	  removed a bunch of compilation warnings.
	- Michael Dale Long elminiated made changes to Crystal Clear.
	- Added csPlane2 to csgeom similar to csPlane.
	- Added csPoly2D::Intersect() to intersect with a csPlane2.
	- Added csPoly2D::UpdateBoundingBox().
	- Added a new csPoly2DEdges class and a corresponding
	  csPoly2DEdgesPool. This is a class similar to csPoly2D but instead
	  of using vertices it uses edges.
11-Mar-2000
	- Paul Garceau commited some changes to make the Mingw/NT4 port
	  possible.  Unfortunatelly his changes were based upon a fairly old
	  snapshot of CS and broke things somewhat severely.
	- Thomas Hieber added support for skydome and skybox in Map2CS.
	- Started work on new solid 2D bsp for culling/PVS.
10-Mar-2000
	- Fixed a bug with deletion of sprites.
	- New patch from Andrew Zabolotny:
	    - Fixed a bug with ALPHA=50 textures in 32bpp modes. It was
	      there from the very beginning. It's strange Seth did not
	      complain about it...
	    - Fixed the bug with unlighted textures being sometimes
	      shifted relatively to lighted versions of same textures.
	      The problem was that IMinU/IMinV was not taken into account
	      with unlighted textures.
	    - Improved the "CACHE=" statement of soft3d.cfg. Now you can
	      use suffixes to specify the units in which you measure
	      cache size. Possible suffixes are "KB", "MB" (for kilo/mega
	      bytes) and "KP", "MP" (for kilo/mega pixels).
	      There is no way to specify cache size in bytes/pixels
	      (what for?)
	    - Phew! Found and fixed a very strange bug that caused at
	      least on OS/2 the GUI window to suddenly jump while dragging
	      if using CSWS. This was caused by the fact that csws calls
	      SetMouseCursor() on each frame, even if cursor
	      shape has not changed (!).
9-Mar-2000
	- Norman Kramer fixed bug in SetRenderState (glide) and added
	  CS_FX_KEYCOLOR mixmode in Glide.
	- Moved include/csengine/colldet/rapid.h to include/csengine.
	- Update from Andrew Zabolotny again:
	    - Fixed a small bug in simple console - with backspace the
	      "virtual cursor" has gone one character behind the start of
	      the string. Thus if you press backspace at the very start of
	      string, you go to position -1. Then if you type any
	      character, it won't be displayed (and perhaps will cause
	      memory corruption).
	    - Fixed sub-texture optimization bug that caused visible parts
	      of textures to not be computed in the texture cache.
	    - Implemented Floyd-Steinberg dithering in csgfxldr library.
	      Added dithering option (-d) to the gfxtest application.
	      Added "DITHER_TEXTURES=yes/no" option to soft3d.cfg file.
	      Note that this option has little effect in most cases (since
	      most texture fit into 256 colors very well); you can
	      see the dithering effect mostly on large colorful textures. Also
	      you can see it on the color wheel in MazeD.
	    - Fixed mipmap selection. Previously it was a bit erroneous,
	      especially for almost-horizontal polygons. Now the formula used
	      is more complex (thus more slow) but it seems absolutely correct.
	    - Fixed "verynice" mipmap selection. Well, it is like the last
	      gasp before death. I'm going to remove verynice mode as a
	      properly implemented "nice" mode looks much better, and is less
	      expensive in texture cache memory terms. Besides, hardware
	      renderers do not support verynice mode at all. Thus it
	      seems useless.
	    - Tried to fix fog in 32bpp modes for NeXT (TOP8BITS_R8G8B8_USED).
	      Not sure it works though (can't test).
	    - Removed the ugly NeXT hack fom MazeD (case Q ...). Hope it will
	      work without it now.
	    - Added "reverse selected polygons" ('V') function.
	    - Started working on texture mapping in MazeD. Very preliminary
	      though.
	- Andrew also fixed two texture mapping bugs (one for unlighted
	  polygons not using the Z buffer and one for unlighted sprites
	  using the Z buffer). These bugs only appeared on 8-bit display
	  modes when NASM assembly is used.
	- Thomas Hieber started support for skydome in Map2CS.
8-Mar-2000
	- Decreased glOrtho setting in OpenGL renderer from 150 to 10 to make
	  Z buffering precision better.  This breaks the terrain engine on
	  OpenGL right now but we need a better solution for that.
	- Fixed deletion of sprites so that they clean up their entry in the
	  world list at deletion.  So it is now safe to do 'delete spr'.
	- Martin Geisse provided another update to the Texinfo documents.
	- Daniel Fannar Gudbjartsson started cleaning up collision detection.
	- Thomas Hieber fixed the changes from Daniel so that it compiles
	  again on VC.
	- Thomas also updated the VC project files.
7-Mar-2000
	- Added LIGHTING(yes/no) option to skydomes to be able to disable
	  lighting for the generated triangles.
	- Added an array of unsplit polygons to every octree node. This
	  will be used by the PVS but it can also be used for other things
	  (like faster rendering if BSP tree is disabled).
	- Continued work on PVS building. Started work on a new
	  algorithm for computing the PVS. Not functional yet.
	- Norman Kramer enabled gouraud shading in glide.
	- Eric Sunshine added a TEXTURE keyword to the Metaballs config file.
6-Mar-2000
	- Started work on new csSprite superclass for csSprite3D (already
	  done) and csSprite2D. csSprite3D now inherits from csSprite.
	- Added loading of csSprite2D to csParser. csSprite2D still don't
	  have drawing and lighting capabilities right now.
	- Eric Sunshine fixed a bug in the way mdl2spr was walking through
	  argv[].
	- More Texinfo update from Martin to account for limitations of the
	  info format where whitespace is concerned.
	- Fixed several cases where the 'sprites' array in csWorld was
	  being used. With my latest additions it is possible to have
	  both csSprite2D and csSprite3D instances on that list so all
	  code needs to be modified to test for that.
	- Fixed prototype for G2D->DrawBox so that it correctly resembles
	  the x,y,w,h fields that should be passed along instead of
	  x1,x2,y1,y2.
	- Andrew Zabolotny fixed fixed the "virtual method called" problem
	  when calling destructors for plugins from
	  csSystemDriver::~csSystemDriver by implementing iBase directly in
	  csSystemDriver class. The derived system drivers can override
	  QueryInterface (and they do it indeed) to provide additional
	  interfaces.
	- Norman Kramer fixed a bug in loop for search free texture
	  memory blocks (glide).
	- Some changes to Map2CS from Thomas Hieber.
	  Added new options to configure surface properties of polygons
	  (for example mirrors).
	- Thomas also updated the VC project files.
	- Some changes from Norman Kramer:
	    - Added a public LoadImage to the loader/parser.
	    - Added new flags for iTextureHandle. Now you can expicitly define
	      many mipmaps you want to generate.
	    - Glide: fixed behaviour in case that not the usual 4 mipmaps
	      are generated for a texture.
5-Mar-2000
	- Thomas Hieber did some general reworking of polygon handling in
	  Map2CS. Allows a much cleaner way to add specific effects like
	  no lighting or mirrors.
	- Thomas also changed DX by doing a dropback to generic DrawPixmap
	  for DirectX 5. This definitely breaks the DX5 Hardware accelerated
	  driver, but he will probably stop supporting that beast anyway.
	  Thomas thus removed the dx5 hardware accelerated renderer from
	  the project files.
	- Thomas reenabled Startup console text. (Was a wrong
	  implementation for FindRGB in the texture manager base class).
	- The Microsoft sorcerers cast a spell to prevent VC++ from compiling
	  valid C++, so Eric Sunshine derived a counter-spell to undermine
	  their Black Magic.
	- Norman Kramer added a Crop() method to iImage.
	- Eric Sunshine made ColliderType public so that it is possible to
	  call GetType() (which is also public).
	- Seth Galbraith did some changes to sprites again: mergetexels
	  and mergenormals now measure the number of redundant vertices
	  which can be merged. Also commited some disabled code which
	  should actually merge the vertices but seems to have bugs.
4-Mar-2000
	- Thomas Hieber added support for semi transparent and reflecting
	  things in Map2CS, as well as for fog. These changes are based
	  on code which desmond.fletcher@usm.edu, has committed to me.
	- Norman Kramer added an implementation for GetZbuffValue for
	  Glide.
	- Norman also fixed handling of texture cache entries that could
	  not be downloaded to TMU. that caused crashes in sqk1 and blocks
	  program.
	- Thomas Hieber added another bunch of patches by Xavier Trochu
	  for the windows port.
3-Mar-2000
	- Jason Platt removed broken and unused SIMD detection
	  routine from terrain engine.
	- Renamed csSprite2D to csPixmap and renamed G2D->DrawSprite
	  to G2D->DrawPixmap. This is to make room for a new csSprite2D
	  that will be a real engine object and thus interact in a 3D
	  world.
	- Thomas Giesel <skoe@freenet.de> supplied a patch to enable true
	  full-screen support by the BeOS OpenGL driver.
	- Eric Sunshine updated the csPython plug-in so that it once again
	  builds following recent changes to SCF.
	- Eric Sunshine removed the last of the dangerous code in ddgmatrix.h,
	  which made unportable and potentially unsafe assumptions about the
	  exact layout of the structure.
	- More Texinfo updates from Martin Geisse.
	- Started implementation of csSprite2D for the engine. Not working
	  right now.
2-Mar-2000
	- Norman Kramer completely rewrote the glide texture cache
	  handling. It now holds alphamaps too. On single TMU systems the
	  tex memory is now properly shared between tex,light and alpha
	  maps. Halos do work now.
	- Seth Galbraith probably fixed a bug in the loading of MDL
	  models to sprites.
	- Fixed bug with lightmap black borders in levels like dmburg
	  or other STATBSP levels. The bug fix is actually a small
	  reversion to the old code which is not that good but for the
	  moment is is visually more pleasing at least.
	- Fixed bug with manual mipmap selection setting which could
	  cause crashes for very small polygons.
	- Further work on PVS. It is starting to work better now.
	  I managed to find a bad bug caused by multiple inheritance :-(
	- Added csPolygonArrayNoFree which is similar to csPolygonArray
	  but doesn't free the polygon (used by PVS). Note that
	  csPolygonArray (and all other subclasses of csVector) also
	  don't free the polygons automatically!!! This is a bug in the
	  code. The problem is that a destructor of a class will not
	  call the virtual functions of that class but of the superclass.
	  So the DeleteAll() in the destructor will simply use the
	  original FreeItem() causing nothing to be freed. This is a big
	  memory leak right now which we will fix shortly.
	- Thomas Hieber added a patch from Xavier Trochu <xtrochu@yahoo.com>:
	  Proper hardware mousecursor on Win32, bugfix to not call
	  obj->DecRef() if obj is NULL.
1-Mar-2000
	- Norman Kramer did some further code cleanup and preparing for
	  alphamap handling (halos) in glide driver.
	- Michael Dale Long changed add and mult fields in struct pivot to
	  be unsigned long instead of int, and changed the values in the
	  static declaration below to reflect that. This fixes some nasty
	  warnings in GCC, as well as prevents the possibility of
	  overflow errors.
	- Wyatt Miler added background music to Blocks.
	- Continued work on PVS. Still not working properly though.
	- Eric Sunshine fixed the Terrain and Phyziks libraries so that they
	  once again compile on OpenStep (taking into account OpenStep
	  compiler bugs).
	- Eric Sunshine fixed the Big Red Big Endian bug which appeared
	  recently with one of Andrew's Big Changes.  This bug caused CS to
	  display all rendered graphics entirely in red on big-endian
	  platforms.
29-Feb-2000
	- Norman Kramer fixed a divide by zero bug in Glide.
	- Eric Sunshine fixed a compilation bug in MazeD.
	- Updated docs and source to remove dmipmap[123], dyncache, and
	  subcache commands.
	- Continued work on PVS.  The basic things are all there but it is
	  still very slow (using bad algorithm) and not working.  So it is
	  disabled right now.
	- Eric Sunshine fixed bugs in mdl2spr where it neglected to properly
	  quote frame names in output file, which caused a parse error later
	  on when CS tried loading the sprite if the sprite name contained
	  whitespace.
	- Thomas Hieber did some further work on the D3D port.
28-Feb-2000
	- Michael Ewert did some more optimization work op csphyzik.  At least
	  another 2x speed increase overall.
	- Norman Kramer did further fixes on the glide drivers.  Line drawing
	  works again too.
	- Eric Sunshine rewrote the endian-conversion functions in the BMP
	  loader to work on platforms (such as Sparc and HPPA) which enforce
	  strict-alignment.  On such platforms, it is illegal to attempt to
	  access primitive data types at addresses which are not mulitples of
	  the type's size.  For instance, a 'long' can only be accessed at a
	  memory location which is a multiple of four.  He also cleaned up the
	  palette conversion code a bit.
	- Added a lot of sysdef.h to source files. Removed a lot of sysdef.h
	  from include files. Added tests to decrease the probability of
	  these errors.
	- Eric Sunshine unified use of sysdef.h in NeXT system driver.
	- Eric Sunshine unified use of #include versus #import in NeXT port.
	  Now #import is only used for NeXT-specific headers.
	- Change from Wyatt Miler to allow csSoundRenderA3D::PlayEphemeral()
	  to accept a bool flag for looping the sound. Defaults to false.
	- Received patch from Rene Dudfield <illumen@yahoo.com> for initial
	  networking support to Blocks.
	- Eric Sunshine fixed a problem with 'make depend' on NeXT (with
	  pointers from Andrew).  The problem prevented the .dep files from
	  operating correctly.
	- Eric Sunshine fixed a problem in pixtype.inc which was causing
	  incorrect colors to display in 32-bit RGB mode on NeXT.
	- Andrew Zabolotny added a TYPEDEF_GROWING_ARRAY to csutil.
	- Wyatt Miler is busy adding sound to Blocks.
	- Started work on PVS.
	- Andrew Zabolotny did another reasonably large change:
	    - Removed csPolygonTexture mipmaps from the engine. From now
	      on mipmaps are the fully internal problem of the 3D
	      rasterizer. Removed MIPMAPPED() keyword (retained for
	      backward compatibility but ignored).
	    - Mipmap level selection is based on texel density in the
	      nearest polygon point. Mipmap level 1 is selected when texel
	      density is above 1 texel/pixel, mipmap level 2 is selected
	      when density is above 2 texels/pixel, mipmap level 3 -
	      when density is above 4 texels/pixel. Theoretically the
	      thresholds should be 2/4/8 respectively (instead of 1/2/4)
	      but with the above solution the texture cache usage is
	      lower (lower mipmap resolutions are choosen more often)
	      and the quality is reasonable.
	    - Fixed (actually fixed, not just a work-around) the problem
	      with lighted textures being written past end-of-texture in
	      the texture cache. The problem was that sometimes textures
	      are even smaller than the size of one lightmap cell; in this
	      case we don't need to paint a whole lightcell.
	- Thomas Hieber did some further work to get DX6.1 working again.
	- Robert Bate updated the Mac project files again.
27-Feb-2000
	- Eric Sunshine fixed a bug in polytext.cpp where a recent "patch"
	  following Andrew's "Big Change" broke CleanIfDirty().  The 'src' and
	  'dst' pointers were incorrectly being incremented by four bytes
	  rather than one byte.
	- Eric Sunshine fixed several additional compilation and run-time
	  problems which resulted from Andrew's "Big Change".
	- Eric Sunshine fixed the LOAD_PLUGIN() macro so that it correctly
	  handles such cases as: LOAD_PLUGIN(&sys, blah, blah).  Previously,
	  it barfed on the &.
	- Eric Sunshine fixed cctest.cpp so that it actually compiles.
	- Eric Sunshine got the BeOS port up and running again following
	  Andrew's "Big Change".
	- Martin Geisse submitted more updates to the Texinfo documents.
	- Alex Pfaffe changed the far-clipping plane in the OpenGL renderer
	  from 10 to 150.
	- Alex Pfaffe submitted a major update to the terrain library.  This
	  version is now 1-to-1 compatible with his own terrain engine and
	  should allow him to integrate new versions much more easily in the
	  future.  This update also includes some performance optimizations.
	- Eric Sunshine eliminated a fairly significant number of compilation
	  problems in the new terrin library and also rewrote ddgMatrix4 to
	  eliminate an unfortunate 'union' which was accepted by no compiler
	  but MSVC.
	- Thomas Hieber did some fixes for proper texture alignment of maps
	  that use the QuArK extensions of the map format.
	- Thomas fixed BMP loading for proper palette handling. Red and
	  blue had been swapped.
	- Norman Kramer made some fixes on the glide drivers again.
	  Multipass filtering works now (still with some weird lightmap
	  effects). Textured and lit drawing is seperated now.
	- Gary Haussmann fixed text rendering with OpenGL. The problem was
	  that the third parameter -- which tells OpenGL the components of
	  data you are passing in -- was '1' when it should have been
	  'GL_ALPHA'.
	  While '1' is a legal value to place here it implicitly says the
	  component you are passing in is the luminance component.  Since
	  we were telling the driver to store only GL_ALPHA components
	  (the seventh parameter) it will just throw away any luminance
	  data we pass into it.  Only if we pass in GL_ALPHA data (and
	  indicate such by passing in GL_ALPHA as the third parameter) will
	  the OpenGL driver actually pay attention to our data.
	- Gary also added "mipmap hack" to get around inability of the
	  standard CS image to mipmap itself at 1xN and Nx1 sizes.
	  Officially OpenGL requires you mipmap all the way down to 1x1,
	  although many implementations are very forgiving.  However, on
	  standard implementations the texture will not work--that is,
	  you will see blank polygons without textures--unless all the
	  mipmaps are produced.
26-Feb-2000
	- Michael Dale Long fixed Linux OSS Sound Driver to compile again
	  (Printf name change). Still crashes whenever a rocket is fired
	  in walktest.
	- Michael also fixed up CrystalClear and cctest to compile again.
	  Finally removed all warnings about unloaded drivers on exit.
	- Thomas Hieber added support for mirrored textures in QuArK mode.
	  (This problem was pointer out by Desmond Fletcher).
	- Thomas also extended support for light (halos, attenuation,
	  dynamics), added the possibility to assign a name to a sector.
	  Code was provided by Desmond Fletcher. I just did some coding
	  style adjustments.
	- Thomas made further fixes to D3D 6.1 to make it compile again
	  after Andrew's changes.
	- Michael Ewert did some optimizations to csphyzik. Moved some
	  classes around and changed the way data is stored and accessed
	  in matrix classes. Boosted to almost 2x as fast.
25-Feb-2000
	- Fixed software texture cache so that it again allocates the
	  texture cache based on number of pixels instead of bytes.
	- Added optimization to BSP tree traversal so that back-facing
	  polygon lists are not actually considered anymore. This improves
	  performance a few 5-10% for large octree/bsp levels.
	- Fixed assembly in bitset.h so that it is only used with GCC.
	- Fixed software texture cache overwrite bug introduced with
	  Andrew's latest changes. For example, dmburg would not run
	  because of that bug.
	- Increased size of bsp trees to 150 polygons (instead of 100)
	  because that seems to give better results.
	- Eric Sunshine made a few changes to bitset.h.
	    - Eliminated a bug which 'link' had introduced in revision 1.2.
	      His change caused 'src' & 'dst' to be incorrectly incremented by
	      four bytes rather than one byte.
	    - Should now compile with non-gcc compilers.  Now uses a valid
	      lvalue everywhere.
	    - Now compiles on NeXT.  Had to disable assembly for NeXT.
	    - Fixed names of variables 'src' and 'dst' which were used in a
	      fashion exactly opposite of their intended meanings.
	- Experimented with a variable center for the octree calculation
	  (in order to decrease number of polygon splits). This seems to
	  give good results although I have to benchmark it better.
	- Changed statistics printing for polygon trees.
	- Eric Sunshine fixed many new compilation problems of various sorts
	  which showed up following Andrew's Big Change.  CS once again
	  compiles on NextStep.
	- Eric Sunshine updated the documents in CS/txidocs in order eliminate
	  a remarkable number of warnings generated by 'makeinfo'.
	- Eric Sunshine added a new Description() method to csBitSet loosely
	  based upon a PrintAsAscii() method which Rene Dudfield
	  <illumen@yahoo.com> had sent in for inclusion in csBitSet.
	- Thomas Hieber did the first steps to make things work again on
	  Win32. He fixed a lot of compilation problems first.
24-Feb-2000
	- Michael Dale Long did various fixes after Andrew's large change.
	- Wyatt Miler did some fixes to Mac sound drivers.
	- Martin Geisse contributed more updates to the Texinfo documentation.
	- Robert Bate fixed up several compile warnings due to the large
	  change from Andrew.
23-Feb-2000
	- Michael Dale Long did the following changes to Crystal Clear:
	    - More csConsole bugfixes.
	    - Added following new methods to csString:
		LTrim() - Trims all whitespace from left side of string.
		RTrim() - Trims all whitespace from right side of string.
		Trim() - Does both LTrim() and RTrim().
		Collapse() - Does Trim(), then collapses any interior
		whitespace to a single space.
		Also added a Format() function to provide printf capabilities,
		but it is disabled because the function needed to do the
		operation safely (vsnprintf) is not available on all the
		platforms CS supports.
	    - Used new csString functionality to enhance cctest's console.
	    - Fixed a minor compile bug in cspython that cropped up a while
	      back.
	- Andrew Zabolotny did a HUGE update to CVS:
	    - Fully rewritten the texture manager and texture cache
	      implementations. Also the interfaces and the way they work
	      are slightly modified, the goal was to allow csws and
	      engine live together. Also a side goal was to substantially
	      simplify the texture manager, since it has grown
	      stochastically, without future in the mind. It also contained
	      some dead and semi-dead code, which was removed. Overall,
	      the size of libs/cs3d shrinked by about 180K.
	    - It is now possible to register textures dynamically after
	      the world has loaded.
	    - Texture cache has also been simplified (Glide and D3D are
	      broken because of this). OpenGL and software should work.
	    - The subtexture optimization is broken for now. I'll fix it
	      in the future, but for a while you will notice a substantial
	      slowdown with dynamic lights. Also you may notice instant
	      "freezes" when some new lighted texture falls into your
	      field of view. This is okay for a while and will be fixed.
	      In fact, it is a primary todo (besides fixing bugs, of
	      course :-)
	    - Removed obsolete red_color, yellow_color etc from all 3D
	      drivers.
	    - Removed rendundant SetInCache() and IsCached() methods
	      from iLightMap and iTextureHandle. It is simple to detect
	      whenever a texture is in cache by just checking GetCacheData()
	      for NULL.
	    - Added screenshot capability to the OpenGL renderer.
	      Unfortunately, the OpenGL renderer seems broken (at least
	      I get very strange images with the OS/2 software renderer)
	      but the screenshot seems to work.
	      Attention OpenGL 2D drivers maintainers: please make sure
	      your drivers use either 4 bytes or 1 byte pixel format.
	      The 2 bytes per pixel is not supported by the screenshot
	      generation routine. Since pixel format doesn't apply to
	      anything other than screenshot, I don't see a single
	      reason to use formats other than 4 bytes/pixel RGBA.
	      This particularily applies to the Windows OpenGL 2D driver,
	      BeOS OpenGL driver and to the MacOS OpenGL driver.
	    - Added CS_IMGFMT_ANY image format. If you tell csImageLoader
	      to load a image in this format, the image will be loaded
	      in original image format, if possible (i.e. if the
	      original image is 8bpp paletted or truecolor).
	      Modified gfxtest to load images this way.
	    - Removed memheap.* from cs3d/common. The only driver that
	      was using it was software renderer, and it is using regular
	      malloc()/free() scheme now. There is no much sense in a
	      private heap, since the most costly operation when
	      generating lightmaps is the proper lightmap generation,
	      not the memory allocation, which is fast enough in any
	      case. Besides, most OSes have much more optimized
	      memory heap functions than the one in memheap.*.
	    - Created a new class csBitSet. This is just an array
	      of bits. You can set/reset individual bits, strips of bits,
	      the entire array. You can AND/OR two arrays together. You
	      can resize them.
	    - Implemented the dirty matrix for lightmaps using csBitSet.
	      This reduces memory requirements for dirty matrix eight
	      times. Not that much savings but it's not something to
	      completely ignore.
	    - Fully implemented Gouraud and DrawPolygonFX for 8-bit modes.
	      It doesn't look as bad as you could expect :-)
	    - Implemented every missing scanline routine. Full support for
	      32bpp. Implemented a couple of missing routines for 16bpp
	      and 8bpp.
	    - Found a bug in libs/csgfxldr/inv_cmap.cpp. However, I did
	      not had time to find what exactly happens, so if someone
	      (maybe the person who originally introduced the code into CS
	      - G. C. Ewing) can understand how it works, see the comment
	      in include/csgfxldr/inv_cmap.h. Thus I used as workaround
	      5-5-5 inverse colormap in software renderer 8-bit modes (it
	      doesn't look worse, and it's twice smaller (and somewhat
	      faster)).
	    - Changed csTextureList into a object derived from csObjVector.
	      This both makes it simpler and faster (and smaller). To find
	      a texture by name use csObjVector's FindByName (name), for
	      getting a texture by index, use texlist->Get (index).
	    - Textures with transparent colors are mipmapped now.
	    - Tried to upgrade the OpenGL renderer's texture cache
	      according to latest changes. It at least compiles now :-)
	      I cannot check if it really works since from some time it
	      does not work for me anymore. Only the CS logo shows in the
	      top-right corner.
	    - Removed the ugly inclusion of cs3d/opengl/*.cpp from all 2D
	      OpenGL drivers. The textures are cached now during
	      GetMipMapData (), and GetMipMapData () returns a texture
	      handle ready for usage (the texture handle self-caches
	      when GetMipMapData () is called).
	    - Fixed a bug (???) in OpenGL renderer. The docs I have for
	      reference says that third argument to glTexImage2D is the
	      number of color components in passed image (i.e. 1, 2, 3
	      or 4). However all over the place the third argument was
	      either GL_RGB or GL_RGBA which is (from my GL/gl.h) either
	      0x1907 or 0x1908. It is possible that some implementations
	      clamp this value to 4, but the software OS/2 OpenGL just
	      ignores the request. Browsing through Mesa sources also
	      shows I am correct. I wonder how it managed to work
	      before (?).
	    - Replaced csGraphics2D::complete_pixel_format method with an
	      inline method inside the csPixelFormat class. Instead of
	      complete_pixel_format (), call pfmt.complete ().
	    - Fixed two bugs in JPEG loaders: first was related to
	      CS_IMGFMT_ANY and second was causing inability to load
	      grayscale JPEGs.
	- Gary Haussmann removed extraneous include of ext_w32.h in OpenGL.
	- Eric Sunshine eliminated several compilation warnings from
	  ogl_halo.cpp.
	- Eric Sunshine added the line renderer to the default list of 3D
	  renderers built on BeOS.
	- Eric Sunshine fixed bug in parsing of submenu from next.cfg which
	  prevented application menu from displaying on MacOS/X Server.
	- Fixed a memory leak in csVector::SetLength() reported by Denis
	  Dmitriev.
	- Seth Galbraith made a few fixes to the physics library after the
	  large change from Andrew.
	- Norman Kramer did a small fix to the quantize method in csgfxldr.
22-Feb-2000
	- Gary Haussmann fixed another mipmap bug in the OpenGL rasterizer.
	  The problem was that the maximum mipmap level required is actually
	  MAX(log2(width),log2(height)), whereas he thought it was
	  MIN(...,...) instead.
	- Eric Sunshine began untangling the amazing interdependencies between
	  csPhyziks header files in order to allow articula.cpp to compile.
	- Eric Sunshine made further tweaks to csPhyziks to allow the
	  templated linked-list to build on OpenStep.  Mostly this involved
	  moving instance variables to the top of class declarations so that
	  the compiler has seen them before inline methods refer to them.
	- Eric Sunshine fixed a bug in the software texture manager which was
	  introduced several weeks ago and which afflicted 32-bit color mode.
	  The problem was that creation of mipmap level 0 did not respect the
	  csPixelFormat properties of the target system, thus resulting in
	  corrupted colors on some platforms.
	- Simplified the BSP splitter and also added a criterium that should
	  create a tree which is both more balanced and minimizes splits.
	  Unfortunatelly the tree does not seem to be as good with this new
	  splitter in comparison to just minimzing splits.
	- Removed the old and obsolete support for dynamic polygons in polygon
	  trees. This is now supported through other means.
	- Martin Geisse submitted updates to some of the Texinfo documents
	  which improve formatting.
	- Thomas Hieber worked around a workaround from Eric Sunshine in MazeD.
	- Some changes to physics library from Michael Ewert.
	- Daniel Fannar Gudbjartsson did a few small changes to the physics
	  library. He fixed several bugs.
	- Robert Bate updated the Macintosh project files.
21-Feb-2000
	- Martin Geisse submitted more Texinfo conversions of the LaTeX files
	  from newdoc.  These files still need a lot of work, but it is a
	  start.
	- Further sprites changes from Seth Galbraith. He changed
	  3 pointers in csFrame into 2 ints.
	- Eric Sunshine slightly reworked ImagePngFile::Load() load for the
	  following reasons:
	    - Eliminated compilation warnings about variables potentially
	      clobbered by longjmp().
	    - Eliminated a memory leak.  Was leaking a PNG info structure.
	    - No longer unnecessarily maintains, within the instance,
	      transitory information which is only needed during Load() time.
	- Fixed bug in csPoly2DPool and lightpatch pool which could cause
	  crashes in some cases.
	- Some small cleanup/changes to csTerrain and terrain engine.
	- WalkTest now deletes csView at exit.
	- Eric Sunshine made several improvements to the introduction to the
	  tutorial (though it still needs more work and clean up):
	    - Added a lot of missing mark-up.
	    - Improved formatting.
	    - Corrected errors.
	    - Eliminated obsolete references to COM.
	- Justin Miller <dyad@fuse.net> submitted a first stab at an update to
	  the tutorial to reflect the current state of Simple and CS.  Code
	  is now up to date, but discussion is still lagging behind and
	  inaccurate.  Needs more work.
	- Eric Sunshine performed a very quick conversion from LaTeX to
	  Texinfo on the tutorial update which Justin submitted, but much
	  mark-up is still missing and formatting needs work.
	- Fixed bug with adding of dynamic objects to octree. Now sprites
	  should work well in levels containing STATBSP statement. They
	  were broken for some time.
	- Added extra light to Blocks game screen to avoid the dark
	  side :-)
	- Added 'Start Game' menu entry (suggestion from Eric Sunshine).
	- Fixed rotation of shapes in Blocks so that rotation is relative
	  to camera position. i.e. the Blocks will always rotate the same
	  way no matter where the camera is.
	- Eric Sunshine fixed csGraphics3DSoftware so that it once again
	  compiles under NextStep.
	- Eric Sunshine hacked around a NextStep compiler bug which generated
	  "overflow in implicit constant conversion" warnings from many files
	  in apps/mazed.  This was the one remaining compilation warning which
	  had never been eliminated from the NextStep port, so this is the
	  very first time that the NextStep port compiles entirely warning-
	  free.
	- Eric Sunshine updated his CVS snapshot script so that it is possible
	  to specify distinct values for the number of archive packages, diffs,
	  and logs to keep (rather than using the same value for all three).
	  Dropped number of kept snapshots down to two from three (in order to
	  make more efficient use of limited disk space at Source Forge), and
	  bumped kept diffs and logs up to seven.
	- Eric Sunshine fixed a nasty bug in the PNG loader which caused the
	  image loader to access memory far beyond the allocated palette.
	  This bug was responsible for the crasher which afflicted Windows
	  users when trying to launch MazeD.
	- Eric Sunshine templatized the linked-list class, ctLinkList.  Shhh!
	  Don't tell anybody that I did this.  Now Michael Ewert need not
	  consider the CS guys bullies any longer. :-)  As a happy side-effect,
	  the linked-lists no longer generate a bogus compilation warning from
	  the NextStep compiler.
20-Feb-2000
	- csPolygonSet now also holds a pointer to the parent container and
	  checks if the parent is NULL before being added to a parent. This
	  makes it safe (for example) to add a thing more than once to some
	  sector.
	- Added left/right arrow to menu items in Blocks where you can move
	  the menu item left or right.
	- Michael Ewert fixed a nasty bug in the physiks library. Angular
	  and linear velocity were being used in wrong frame of reference
	  a number of times in various files.
	- Eric Sunshine changed the NeXT 2D driver so that it understands
	  --simdepth=16 (in addition to 15 and 32 which it already understood).
	- Michael Dale Long did some updates and bugfixes to csConsole.
	  Now does input history.
19-Feb-2000
	- Changed novice/average/expert menu in Blocks so that it is now
	  one menu which you can rotate horizontally with arrow left/right
	  (instead of up/down).
	- The seperate boardsize menu has also been replaced with a horizontal
	  one.
	- Eric Sunshine enhanced csStrVector so that it can perform both
	  case-sensitive and case-insensitive sorting and comparison.
	- Eric Sunshine fixed cspFileDialog so that it sorts the directory
	  and file lists.
	- Seth Galbraith implemented MergeTexels for sprites.
	- Norman Kramer moved screenshot functionality in Glide driver and
	  also enabled the new DrawTriangleMesh.
	- Thomas Hieber did some more documentation and cleanup of the
	  collision detection code.
	- Thomas also added some fixed to Win32 networking by Eric Wigforss
	  <ewigforss@novametrix.com>.
18-Feb-2000
	- Fixed Z-buffering for sprites. Was broken after the
	  DrawTriangleMesh changes.
	- Added large comment before csSector::Draw() explaining a plan
	  for a new rendering loop.
	- The highscore screen in Blocks shows for what level/play size
	  the highscores are.
	- Michael Ewert fixed a bad bug in articulated body solver.
	- Noah L. Gibbs fixed a set_R bug reported by Thomas Hieber.
17-Feb-2000
	- Seth did some fixes to sprite code again.
	- Added the first versions of the TeXInfo converted docs from
	  Martin Geisse. The new txidocs directory is temporary until
	  the documents are fully converted.
	- Optimized the sprite changes from Seth a bit. Avoided allocation
	  of arrays every frame. The copy of vertices is still there
	  however.
	- Improved both the speed of sprite lighting and also reduced
	  memory usage for every sprite by removing the object_vertices
	  array that could get allocated for every single sprite
	  instance.
	- Samuel <samuel@metalang.softnet.co.uk> contributed a patch
	  to the software and X 2D drivers so that they allow resizing
	  of the window. In principle the same thing can now be done
	  for the other 2D/3D combinations too.
	  The engine will adapt automatically to the new size.
	- Changed score counting in Blocks (based on a suggestion from
	  Andrew) so that score increases as speed increases. At lowest
	  speed the bonus factor is 1 for every score point. At hightest
	  speed the bonus factor is 3.
16-Feb-2000
	- Some fixes to csPhyzik from Michael Ewert.
	- Seth Galbraith managed to almost fix sprites by disabling LOD
	  for now. Skeletal sprites still don't work correctly though.
	- Moved csColor to csutil and csTriangle to igraph3d.h.
	- Started work on DrawTriangleMesh function in iGraphics3D.
	  Not finished right now. The new code is not used right
	  now so it should not hurt anything. I made sure that the
	  non-software drivers still compile (only tested Line3D and
	  OpenGL).
	- Eric Sunshine updated a number of documentation files to reflect
	  the fact that platform-specific makefiles now reside within the
	  CS/libs/cssys tree rather than CS/mk/system.
	- Nearly completed support for DrawTriangleMesh. Sprites now use
	  it (you can still get the old behaviour back if you change
	  the right #if 1 to #if 0 :-)
	- OpenGL and Software now support the generic (unoptimized)
	  DrawTriangleMesh. All other renderers are currently broken for
	  sprites since they don't have a working DrawTriangleMesh
	  implementation (sprites will not show). Check out OpenGL to
	  see how it must be implemented.
	- Note: OpenGL sprites using DrawTriangleMesh don't seem to be
	  textured. I'm not sure why this is yet.
	- A nice consequence of the new DrawTriangleMesh is that vertex
	  fog should be a LOT faster.
	- Eric Sunshine fixed a number of "variable may be used uninitialized"
	  compilation warnings.
	- Thomas Hieber added support for DrawTriangleMesh to D3D 5 and 6.1.
15-Feb-2000
	- Eric Sunshine worked around an OpenStep compiler bug which was
	  triggeredy by ctLinkList.  The compiler generates unlinkable code
	  when an inline method calls a second inline method before the
	  compiler has seen the second method.  A simple textual
	  reorganization of the file solves the problem.
	- Changed the way Blocks counts score:
	    - 10 points for every cube of a shape that falls down.
	    - 1 point for every z-unit that is traversed in high speed
	        (space bar down).
	    - PlaneSurface*10*NumPlanes*NumPlanes for every NumPlanes
	      removed at the same time. PlaneSurface is the number of
	      cubes on a plane (i.e. 9 for 3x3).
	    - 800 points if you manage to completely remove all cubes
	      in the play area.
	  In addition to that speed now increases with time and not
	  with the number of removed planes.
	- Changed description of rotation keys in Blocks keyconfig to yaw,
	  roll, pitch.
	- Fixed serious bugs with sprites by using csPoly3D and csPoly2D
	  instead of the csVector subclasses.  Now sprites don't crash but
	  they are still displayed the wrong way.
	- Eric Sunshine eliminated more compilation warnings from the Irix
	  compiler.
	- Robert Bate updated Mac projects.
	- Thomas Hieber updated VC projects.
14-Feb-2000
	- Fixed a bug in highscore handling of Blocks.
	- Fixed rotation center of a few shapes in Blocks.
	- Added highscore GUI for Blocks.
	- Current level is remembered in blocks.cfg.
	- Pause removes view temporarily.
	- Based color of lines in 3D line driver on mean texture color.
	- Eric Sunshine improved integration of the Terrain engine with VFS.
	  Height map files specified via the HEIGHTMAP() keyword in the world
	  file are now loaded via VFS.  He also temporarily added height.ter
	  to terrain.zip since automatic height map generation is currently
	  broken (thus a pre-existing height map is required).
	- Eric Sunshine added documentation to "worldfmt" for new csLoader
	  keywords MERGE_TEXELS, MERGE_VERTICES, and MERGE_NORMALS which Seth
	  Galbraith added.
	- Eric Sunshine fixed the reference to IRC in resources.tex to point
	  at irc.linux.com rather than irc.icq.com.
	- Eric Sunshine performed a fairly major overhaul of mdl2spr, the
	  Quake model conversion tool.  Details are as follows:
	    - Combined the programs mdl2spr (for MDL models) and md22spr (for
	      MD2 models) into a single application.
	    - No longer requires an external "palette.lmp" resource for
	      extracting skins from MDL files, thus simplifying usage.
	    - Cleaned up and organized the project.  Cleaned up the code
	      considerably (though it can still use more cleaning).  Folded
	      out redundant code.
	    - Skins extracted from Quake 1 MDL files are now written as PNG
	      files rather than PCX files, and are thus immediately usable by
	      CS (unlike PCX images which CS can not deal with).  Eliminated
	      the old PCX code.
	    - Added a CS makefile so that it can be built easily on all
	      platforms which are supported by CS.
	    - Improved the documentation and moved it to the standard 'docs'
	      directory.
	- Eric Sunshine fixed warnings on Irix related to extra semi-colons
	  following CSOBJTYPE.
	- Eric Sunshine fixed a couple problems with usage of the 'which'
	  command in unixconf.sh which afflicted the Irix platform.
	- Seth Galbraith changed the arrays of vertices, normals, and vertices
	  in each frame into vectors.
	- Gary Haussmann added halo code written by FragDance.
	- Gary also added extension detection code written by FragDance, with
	  some modifications to support different platforms.
	- Gary also fixed indentation a little and tried to fix some mipmap
	  problems.
	- Norman Kramer did some optimization of the ClipToPlane method.
	- Norman also did an optimization of csMatrix3*=.
	- Eric Sunshine rewrote an optimization which Norman Kramer made to
	  csMatrix3::operator*=() such that it is robust and safe rather than
	  fragile and potentially unsafe (in a multi-threaded environment).
	- Michael Ewert did some changes to csPhyzik:
	    - Catastrophe support added.
	    - Evolve loop moved into ctworld.
	    - Collision detection/response handled by callbacks of the
	      catastrophe system.
	    - Added CD catastrophe manager at init.
	    - Daniel Gudbjartsson pointed out an error in ctMatrix3::cofactor.
	    - No longer multiplying return value by (i,j).
	- Thomas Hieber did further documentation and cleanup of CD code.
	- Thomas also did some small changes to VC project files.
	- Robert Bate made a small fix to csIniFile to compile on Macintosh.
	- Robert also did some other changes.
13-Feb-2000
	- Eric Sunshine performed a fairly extensive overhaul of csIniFile.
	  Except for the lowest level I/O functionality, most methods have
	  undergone radical simplification.  Details are as follows:
	    - Enumeration methods now return convenient iteration objects
	      instead of working through inconvenient call-back functions.
	    - Reimplemented most functionality of csIniFile, itself, in terms
	      of iterators, thus significantly simplifying the implementation
	      by eliminating a tremendous amount of nearly identical
	      copy/paste code.
	    - Modified clients of csIniFile to work through the new iterator
	      objects.
	    - Added missing 'const' qualifiers to several methods.
	- Eric Sunshine re-engineered the way the Apple/NeXT ports generation
	  the application's main menu.  Details are as follows:
	    - Moved the main menu configuration information for all Apple/NeXT
	      platforms to the new configuration file "next.cfg" which is
	      loaded at run-time.  Removed the NeXTMenu.cfg files which
	      hard-coded menu configuration into the application at compile
	      time.
	    - Rewrote NeXTMenu.cpp to load menu configuration from the new
	      configuration file.  Menu related keywords in configuration are
	      now lower-case rather than upper-case as they were in
	      NeXTMenu.cfg.
	- Eric Sunshine added several hundred (or more) missing 'const'
	  qualifiers throughout the project.
	- Eric Sunshine fixed a bug in his CVS snapshot script (snapshot.py).
	  It failed to close the time stamp file after reading it.
	- Eric Sunshine eliminated the monolithic and inflexible organization
	  of the platform-specific system makefiles by removing them from the
	  global CS/mk/system directory and placing them in the proper and
	  respective subdirectories of CS/libs/cssys, thus achieving a more
	  modular configuration.
	- Norman Kramer added code to the clippers to find out wether or
	  not a polygon was actually clipped.
	- Norman also added code to better support hardware renderers. He
	  added code to precalculate u,v coordinates for all polygon
	  vertices. Currently this code is optional (enclosed in defines).
	- Thomas Hieber started documenting the collision detection stuff.
	  This also includes renaming of various member function and
	  attributes.
	- Thomas also removed some dependencies between Crystal Shooter
	  and csgame (csgame contained Crystal Shooter specific code).
	- Thomas also adjusted the license of csgame to LGPL (instead of GPL).
	- Thomas moved a test routine for triangle intersection from walktest
	  to csMath3 (I think this routine is of general interest).
	- Thomas also did a small cleanup of the VC project files.
	- Simon Boily re-enabled multitexturing and fixed some problem with
	  fog.
12-Feb-2000
	- Key config menu scrolls so that it works in low resolution too.
	- Dimension of play area in Blocks is saved in config too.
	- Depending on the height of a block it will change color. This
	  helps for seeing the difference in height if you're looking
	  from top to down.
	- Added first primitive highscore handling to Blocks. Highscore
	  information is also saved to 'blocks.cfg'. There is no GUI
	  yet to view the highscores.
	- Thomas Hieber did some changes to DX5 renderer to make
	  DrawPolygonFX work again (part of the fix was to disable
	  multitexturing, because the renderer does not completely switch
	  back to singletexturing).
11-Feb-2000
	- Made keys in Blocks configurable through blocks.cfg.
	  However, there is still no GUI to change them.
	  Also changed the default keys (qweasd to rotate shape,
	  cursor keys to move shape, del/home/end/pgdn/ins/pgup to
	  manipulate camera, space to drop shape, p to pause, esc
	  to return to menu).
	- Started work on GUI to change keys. Not functional yet.
	- Bad bug fixed in Blocks. When multiple planes were removed
	  at the same time the behaviour of the blocks above was not
	  right.
	- Keys can now be configured at run-time in Blocks.
	- Eric Sunshine eliminated several compilation warnings in csPhyziks.
	- Eric Sunshine eliminated some unsigned versus signed warnings in
	  csClear.
10-Feb-2000
	- Michael Ewert did some fixes in csPhyziks code.
	- Fix to sprite modifications from Seth Galbraith.
	- Fixed sprites so that they at least load again.
	  But they are still completely wrong.
	- Some improvements on Blocks. Added a 3D menu for starting.
	- Made a fix in the rotating menu.
	- Increased speed of falling blocks if score increases.
	- Allowed to both move a falling block horizontally while
	  rotating it. Previously Blocks could only handle one type
	  of movement at the same time.
	- Added one-level queue of keys in Blocks.
	- Increased speed of rotation and movement of blocks a bit.
	- Added a menu in Blocks to change play size to either 3x3,
	  4x4, 5x5, or 6x6 (default).
	- Some general cleanup to D3D code from Thomas Hieber.
	- Thomas also fixed software renderer so that DrawPolygonFX
	  supports all blending modes.
	- Some changes to Glide StartPolygonFX from Norman Kramer.
9-Feb-2000
	- Andrew Zabolotny did some changes:
	    - Renamed DEBUG to CS_DEBUG. On various systems many
	      system-dependent files use the DEBUG macro to do weird things.
	    - Serious fix to SCF. The refcount on factories was going nuts
	      since the last change to refcounts being initialized to zero
	      rather than to one.  Now the warnings on unreleased object
	      instances during application shutdown is indeed meaningful.
	    - Fix to scftutor. The Worm was incorrectly split into two
	      (well, it was correct at the time refcount was initialized to
	      zero).
8-Feb-2000
	- Seth Galbraith contributed big changes to sprite format.
	- Norman Kramer added screenshot support to Glide rasterizer.
	- Michael Dale Long added all the HTML files generated from the
	  LaTeX documentation.
	- Added 'boring' level to Blocks to test out some things.
	- Implemented proper rotation of the blocks. Most of the shapes
	  now rotate around their center.
	- Added top-view to blocks.
	- Added 'Game Over' test to Blocks. So now the game actually
	  ends if you get too high (and you don't need Crack to get high
	  with Blocks :-).
7-Feb-2000
	- Michael Ewert modified phyztest to use new ctVector3 modifications.
	- Fixed bug with Blocks. The rotation check for 'x' was wrong.
	- Michael Dale Long fixed the EntityManager interface to use
	  ULongVector instead of csIntVector for lists of Entity classes,
	  since they are declared ULong.
	- Robert Bate updated the Macintosh project files.
6-Feb-2000
	- Michael Dale Long stomped some minor bugs in csConsole. Added
	  support for left/right arrow key movements.
	- Michael also fixed a bug in csString with the Insert() calls.
	  Was using memcpy() when the source and destination overlapped.
	  Now uses memmove().
	- Seth Galbraith did some modifications to the documentation.
	- Thomas Hieber fixed csclear by making the typed for ccUID
	  consistent. (Was a mix of signed and unsigned, which caused
	  compiler warnings on MSVC).
	- Norman Kramer made some changes to the Glide drivers so that
	  the compile and load again.
	- Norman Kramer added support for defining planes in libraries.
5-Feb-2000
	- Fixed bug with clipping portals (i.e. portals that clip geometry
	  in 3D; only room.zip has such portals on the spinning cube). They
	  could cause severe crashes.
4-Feb-2000
	- Michael Ewert added new csDVector3 and csDMatrix3 to csgeom.  These
	  are equivalen tto csVector3 and csMatrix3 but they use 'double'
	  instead of 'float'.
	- Eric Sunshine eliminated several compilations warnings and errors
	  from Andrew's changes which manifested on OpenStep.
	- Eric Sunshine worked around OpenStep compiler bugs triggered by
	  several changes to the terrain library.
	- Eric Sunshine eliminated the very lengthy pause and disk thrashing
	  which occurred between the time "make" was typed and the time
	  anything actually began to build.  The problem was caused by several
	  unnecessary extensive scans of the CS directory tree for files which
	  are only needed when building documentation.
	- Eric Sunshine removed all of the documentation building targets and
	  configuration information from the global makefiles (where it did
	  not belong) and moved it into a new makefile "doc.mak".  The
	  existing "doc" and "api" targets should continue to work correctly.
	  However, the other documentation targets which Brandon added almost
	  certainly do not work anymore and will probably require some
	  tweaking by someone who actually has access to the required tools.
	- Eric Sunshine moved the binary packaging script for NeXT from
	  CS/libs/cssys/next to CS/bin.
	- Thomthee Besset" <Besset@sugar-land.dowell.slb.com> submitted a
	  patch for several MSVC project files which remove obsolete COM junk
	  from Release mode.
	- Andrew Zabolotny added some header files mumbo-jumbo to avoid
	  repeated #defines of M_PI on OS/2.
	- Seth Galbraith added MERGE_TEXELS, MERGE_VERTICES and MERGE_NORMALS
	  world format tokens. Began implementation of vertex and normal
	  merging (currently only counts unique vertices). Added LoadFrame
	  method to csLoader (gets csFrame* from a frame number).
	- Michael Ewert made some code format changes.
	- Michael also switched csphyzik library to using csVector3 or
	  csDVector3. It is still aliased as ctVector3.
3-Feb-2000
	- Seth Galbraith changed sprite loading in csParser so that
	  csSpriteTemplate::MergeTexels is now called to eliminate duplicate
	  texel maps.
	- Eric Sunshine temporarily removed Seth Galbraith's new call to
	  csSpriteTemplate::MergeTexels() from csLoader since MergeTexels() is
	  buggy and results in deferred memory corruption at termination time.
	  The problem is that MergeTexels() causes the merged texels[] arrays
	  to be deleted multiple times.
	- Eric Sunshine rewrote several bit-sets used by the terrain engine so
	  that they are now implemented via safe and portable bit masks rather
	  than unsafe and unportable unions.  This fixes the known problems
	  with big-endian machines without resorting to special-case hackery.
	- Andrew Zabolotny did a huge update again:
	    - Re-written csgfxldr library:
		- Renamed iImageFile to iImage.  An iImage not always
		  originates from a file.
		- Added paletted images support.  On a call to
		  csImageLoader::Load you can tell loader whenever you want
		  CS_IMGFMT_PALETTED8 format or CS_IMGFMT_TRUECOLOR (see
		  iimage.h).
		- Added alpha channel support.  There is a bit called
		  CS_IMGFMT_ALPHA that can be combined with above to load RGBA
		  images or paletted + alpha channel separately.  Also there
		  is another "image format" called CS_IMGFMT_NONE that can be
		  combined with CS_IMGFMT_ALPHA to load just alpha channel.
		- Added Heckbert quantization routine.  This is a very fast
		  algorithm for converting truecolor images into paletted ones
		  (by the way, my routine converts about 3.200.000 pixels/sec
		  on my good old P5/166).  The routine is useable even
		  separately from CS (its not CS-related at all).  No wonder
		  mpeg players are able to compute palette for MPEG videos in
		  each frame.
		- Improved SGI image loader support.  Now loads encoding-type
		  3 images too.
		- Improved most other image loaders.  JPEG loader now converts
		  to 8-bit paletted images internally if required.
		- Removed PCX write support. Anybody cries? :-)
		- Added PNG write support.  You can write truecolor and
		  paletted PNG files, just pass an iImage pointer.
		- FAST! mipmap computation.  Removed Blend() method.  Only one
		  MipMap() (of two) method remains.  Mipmap step 0 is the
		  blended image, mipmap step 1 is a 2x2 scaled texture, 2 -
		  4x4, 3 - 8x8.  When mipmaps are scaled down, the average of
		  2x2, 4x4, 8x8 blocks of pixels is taken.  The speed seems
		  about 42 256x256 RGB blended mipmaps (level 0) per second.
		  Level 1,2,3 mipmaps are created much faster naturally (~150,
		  ~200, ~400 per second).
	    - Modified the 3D renderers.  Just two mipmap modes are supported:
	      MIPMAP_NICE and MIPMAP_VERYNICE.  UGLY and DEFAULT are gone.
	      Made required modifications to let them work with the new iImage
	      interface.  Added ScreenShot () method to iGraphics3D interface.
	      Only software renderer implements it though.
	    - Changed walktest.  Now it does PNG snapshots at any bit depth
	      (with software renderer only).  The OpenGL driver could possibly
	      use glGetPixels() for this.
	    - Changed csparser.  Removed lots of csWorld * passed all over the
	      place.  Made one global static csWorld * variable instead.
	      Moved all private methods under "private:", just three methods
	      are left to be public.
	- Eric Sunshine fixed several problems which were introduced with
	  Andrew's changes and which prevented compilation on NextStep and
	  OpenStep.
	- Eric Sunshine fixed up the NeXT ports so that they can now use GNU
	  getopt_long() and consequently removed the CS_NO_GETOPT_LONG flag
	  from scfreg.cpp.
	- Thomas Hieber fixed several of the apps after Andrew's big changes.
	- Andrew implemented a cool Ascii-Art {R} {tm} display.  -d or
	  --display options.  Default size 79x24, you can enlarge for more
	  pleasant results if you use a larger console (with -d79,40 for
	  example).
	- Eric Sunshine added the 3D line driver to the default list of
	  drivers built on the NeXT platforms.
2-Feb-2000
	- Large update to terrain engine from Alex Pfaffe.
	    - Now renders 3000 triangles instead of only about 1000.
	    - Large speed increase (from 6 FPS to about 17 FPS in software).
	- Added conveniance functions SetFog and DisableFog to csPolygonSet.
	- Blocks screen fades from black.
	- Eric Sunshine fixed several compilation warnings regarding unused
	  variables and assignments of float or double to integer in the new
	  terrain code.  He also fixed a problem where a comparison against a
	  single-bit 'bool' field failed to work correctly on platforms which
	  do not define a native 'bool' type.
1-Feb-2000
	- Improved demo screen for Blocks again.
	- First block in demo is now actually random.
	- Changed 'ESC' key in Blocks so that it now goes to the
	  startup screen.
	- Camera is put at the correct position after starting.
	- When a dynamic light is deleted (with 'delete') it will now
	  remove itself from the world.
	- Eric Sunshine fixed several compilation warnings and errors in
	  simpcons.h and cssprite.cpp which afflicted MSVC++.
	- Made the colors for Blocks a little nicer.
	- Fixed bug with camera position in Blocks. Uninitialized variable.
	- Dynamic light for Blocks startup screen works again.
	- Blocks writes out score now.
	- Blocks unpauses correctly when you restart game while paused.
	- Added visible raster to Blocks to help see where a shape
	  will fall.
	- Eric Sunshine fixed a couple problems with handling of key input
	  in the Win32 driver in the absence of DirectInput.  The ESC key
	  was generating multiple key-down events, and the Return key was
	  generating two key-down events with distinct key codes.
	- Blocks uses correct FindRGB to look for colors.
	- Fixed bug in Blocks so that shapes cannot be stranded partially.
	- Michael Dale Long added MSVC project files for cscon, csclear,
	  and cctest. Fixed some various problems with the previous three
	  for compiling under MSVC. Important fixes for Simple and
	  csConsole for running on some platforms. Added a new csutil
	  file to cspace so PhyzTest will compile under MSVC.
31-Jan-2000
	- Eric Sunshine fixed unixconf.sh so that it correctly captures
	  and interprets output of 'which' command.
	- Received new version of Blocks from Void <glitia@texnet.ro>.
	  This version works almost correctly. Planes disappear when filled
	  up and there is a score. Many bugs have been fixed.
	- Cleaned up the Blocks code.
	- Added a lot of new shapes sorted by difficulty.
	- Added difficulty setting to Blocks.
	- Added animated demo screen.
	- Fixed a few small other bugs in Blocks (camera is now
	  properly initialized when a new game starts).
	- Eric Sunshine fixed the makefile for the csPython plug-in so that
	  it correctly locates the Python library within PYTHON_LIB and
	  also eliminated its reliance on the hard-coded 1.5 library name.
30-Jan-2000
	- Michael Dale Long made some fixes for the new console,
	  particularly in page/up page down scrolling support. Fixed
	  problem with console not properly handling 2D drivers that
	  disregard the update rectangle passed to Print().
	- Michael also modified the declaration of ccUIDs to be more
	  NeXT-friendly.
	- Michael updated the GGI driver keyboard handler.
	- Seth Galbraith started big changes to csSprite3D class. He
	  seperated 3D coordinates from normals and texture coordinates
	  for faster and more flexible sprites. csFrame and csSpriteTemplate
	  are affected.
	- Eric Sunshine fixed support for testing CS_BIG/LITTLE_ENDIAN
	  on BeOS.
	- Noah L. Gibbs fixed a Precalculate() bug in csPhyzik. Rigid bodies
	  should now spin properly even if queried by rotation matrix
	  instead of quaternion rotation.
29-Jan-2000
	- Fixed remaining memory leak in dynamic object/polygon tree
	  structure.
	- Added statistics printing after building polygon tree.
	- Fixed bug in statistics calculation of octree/bsp trees.
	- Experimented with bsp tree building. It appears that the
	  bsp tree builder in CS isn't that good. We need a better one.
	  Tried to add detection for convex sets of polygons but this
	  doesn't seem to work very well right now.
	- Norman Kramer added copy constructor in csVector3 and changed
	  "real" to "double" in csQuaternion.Normalize().
	- Noah L. Gibbs added state_alloc and state_free features to
	  ctWorld and to ctEntity.
28-Jan-2000
	- Michael Dale Long did a major update to the CrystalClear input
	  system. Added a lot of support for the new csConsole plugin.
	  cctest now sports a simple but interactive console. More
	  bugfixes in the csConsole backspace handling code, as well.
	  Support for prompts that shouldn't be deleted by backspacing.
	- Michael also fixed fixed scftutor.mak (didn't include libraries
	  in the proper order).
	- Did some fixes to the dynamic objects in polygon trees.
	  Now it appears to work correctly (i.e. not crash) but I think
	  there are still a few memory leaks. Still investigating.
	- Noah L. Gibbs added AddCurrentItem() method to csDLinkList to
	  allow insertion at the current location rather than only at the
	  list beginning.
	- Robert Bate fixed Mac port again and updated the project files.
27-Jan-2000
	- Update to some docs from Wyatt Miler.
	- Andrew Zabolotny improved the test for endianess.
	- Added 'delsprite' console command to delete a sprite.
	- Improved new Line3D renderer a bit (double buffering and
	  faster key handling). Also cleaned up all unneeded stuff.
	- Eric Sunshine eliminated a few warnings in Map2CS and MazeD.
	- Add more debugging info for dynamic objects in polygon trees.
	  Still hunting a bug.
26-Jan-2000
	- Michael Dale Long added DeleteAt() to csString to delete a range
	  of characters within a csString.
	- Michael also updated csConsole backspace handling to use
	  DeleteAt().
	- Update to api.tex from Wyatt Miler.
	- Fixed 'default' mipmapping setting.
	- Made a new 'line3d' 3D renderer and a linex2d 2D driver. This
	  is for wireframe rendering.
	- Simon Boily restored multipass support in the Direct3D 6.1
	  renderer (more efficient, faster). He also implemented vertex
	  caching/batching in PolygonFX (roughly 30% speed increase)
	  it could be tweaked for better performance. He fixed PolygonFX
	  so that it can do flat/gouraud polygons and he added more
	  hardware caps checking.
25-Jan-2000
	- Major update to the csConsole plugin from Michael Dale Long.
	  He added csConsoleInput, cursor functionality, implemented
	  proper redraw rectangle support and support for testing most
	  console functions is integrated into cctest.
	- Did some extra cleaning up of the new dynamic object code
	  (for polygon trees). Seems to be working properly now.
	- Added view frustrum to csRenderView. Use this for quickly culling
	  octree nodes. This should speed up rendering a bit.
	- Brett Hall <swizin@rain.org> fixed OpenGL and software 2D
	  drivers for X Windows so that they don't crash when the windows
	  are closed by the window manager.
	- Thomas Hieber did an update of the VC project files.
24-Jan-2000
	- Noah L. Gibbs fixed Normalize() method in csQuaternion.
	- Noah also got rigid bodies pretty much working in his demo code,
	  checking in new fixes and features.
	- Fixed several bugs in new system to add dynamic objects to
	  polygon trees. It is nearly working correctly for sprites now.
	- Andrew Zabolotny commited some changes:
	   - Improvements to MazeD:
		- added texture library dialog (Ctrl+L)
		- "Window" menu has been split into "View" and "Window".
	   - Improvements to software 3D renderer:
		- mixmode is now history (always true_rgb) for compatibility
		  with hardware renderers (also less dead code).
		- improved much palette computation algorithm for 8-bit
		  modes (even maze.zip doesnt look THAT bad anymore :-)
		- todo: fix texture cache problem, fix truecolor modes
		  to not depend on the 256-color palette, switch truecolor
		  modes to "one palette per texture" mode (i.e. "private").
	- Andrew also added a 'palette on/off' command to the console.
	- Update to VC project files from Thomas Hieber.
22-Jan-2000
	- Gary Haussmann checked in a fix from Thomas Skoldenborg to
	  prevent 3Dfx/Mesa drivers from dying horribly upon exiting the
	  program. The problem was that glXDestroyContext was not being
	  called.
21-Jan-2000
	- Michael Day continued his work on the autoconf system
	  in CS.
	- Andrew Zabolotny updated inline assembly in software renderer
	  so that it is gcc 2.95 compatible.
	- Andrew also fixed the makefiles so that the define NO_ASSEMBLER
	  when compiling with MODE != optimize.
	- Thomas Hieber added some changes to the Direct3D port contribued
	  by Simon Boily <simonb@telisphere.com>. He added multitexturing
	  support and render state caching (more efficient render state
	  changes). The multipass code has been removed. This will be
	  rewritten later. So lightmaps will currently not appear on
	  hardware without multitexturing.
	- simonb@telisphere.com also fixed the detection code for windowed
	  mode.
	- Thomas Hieber adjusted project files for network demo provided
	  by Eric Wigforss <ewigforss@novametrix.com>, I did some
	  adjustments too, to make debug and release mode consistent.
20-Jan-2000
	- Michael Day started adding an 'autoconf' system to CS. He
	  started his work with the csgeom library.
	- Thomas Hieber updated Windows documentation.
	- Changes to csphyzik from Noah L. Gibbs.
19-Jan-2000
	- Noah L. Gibbs added Normalize() method to csQuaternion.
	- Continued work on adding objects in polygon trees. Started
	  converting the old dynamic polygon concept for sprites to
	  the new way.
	- Thomas Hieber fixed Map2CS so that curves are now the right
	  format.
	- Michael Ewert fixed a problem in the csphyzik library.
	- Robert Bate made a change to the Mac port so that the mac event
	  is dispatched to the right code if it is not handled by the 2d
	  driver. The Mac projects are also brought up-to-date again.
18-Jan-2000
	- Further work on objects in polygon trees.
	- Michael Dale Long did a major update to the csconsole plugin.
	  iConsole and csConsole are finished for the time being. Updated
	  csSimpleConsole to be compatible with the new interface. Added
	  some test cases to cctest for testing the new console code.
	  Added start of iConsoleInput interface.
	- Gary Haussmann added change by Fragdance Galore for
	  transparent-enabled text characters.
	- Gary also fixed/enabled code for mipmapping in hardware.
	  There were some problems since CS may not generate enough
	  mipmaps to "fully populated" the mipmaps, from an OpenGL point
	  of view.
	- Further work on Map2CS by Thomas Hieber. He removed WriteKeys
	  from CIWorld and moved it to CCSWorld. This method is indeed
	  specific and should not need to be overridden in other export
	  formats.
	- Thomas also added 'phyztest' to the VC project files and made
	  some adjustments to it.
	- Robert Bate did some adjustments to the Mac project files.
17-Jan-2000
	- Eric Sunshine fixed a couple termination-time crashers in the BeOS
	  2D drivers which resulted from invalid calls to virtual functions
	  from within the destructor.
	- Thomas Hieber added support for different output formats to
	  Map2CS. The first one is an XML output format created by Petr
	  Kocmid <pkocmid@atlas.cz>.
	- Jorrit cleaned up the new quaternion class a bit.
	- Norman Kramer corrected the cleanup of the quaternion class.
	- Noah L. Gibbs fixed another serious bug in csPhyzik. Found out
	  why velocities weren't working on ctPointMass -- fixed it?
	  Serious error in the way Newtonian points were calculating
	  derivative. Still looking for that bug in my test-case, though,
	  so this may still have serious defects.
16-Jan-2000
	- Norman Kramer added a new quaternion class to csgeom.
	- Noah L. Gibbs did some further work on the csPhyzik library.
15-Jan-2000
	- Fundamental change to the polygon tree class structure (i.e.
	  BSP and octrees). csPolygonParentInt no longer exists. Instead
	  a csSector is always assumed to be the parent container for
	  the polygon tree. This makes the code easier to understand and
	  also somewhat more efficient (less virtual functions needed).
	  The disadvantage? BSP and octrees are now tied to sectors.
	- I also dropped support for the old BSP keyword (now only
	  STATBSP is supported). This breaks the mirror.zip level (but
	  it is easy to fix). The loader will print out an error message
	  if BSP is still used.
	- Removed debugging code which was accidently left in the
	  c-buffer/coverage mask tree culling. This could cause a significant
	  drop in performance.
	- Thomas Hieber did some fixes on csgame. He reenabled proper
	  keyboard handling.
14-Jan-2000
	- Noah L. Gibbs (angelbob) modified and test phyztest to work with
	  his changes of the csPhyzik inheritance hierarchy.
	- Noah added linked list for ctEntity class.
	- Noah changed ctPhysicalEntity to have ctEntity as a parent class.
	- Michael Ewert did some other changes to csphyzik.
	- Samuel <samuel@metalang.softnet.co.uk> fixed interpolation for
	  triangles so that there are no more unexpected crashes (in
	  some cases viewing sydney.zip could crash CS).
	- Samuel also made some changes to the skeleton sprites so that
	  the skeletal animation system is now completely seperate from
	  csSprite3D.
	- Further work on dynamic objects in polygon trees.
	- Andrew Zabolotny updated his memory debugger so that it now works
	  on Linux/ELF, DJGPP, and any other platform with GCC >= 2.8.0.
	- Eric Sunshine upgraded documentation for the snapshot.py script.
13-Jan-2000
	- Some further work on dynamic objects in polygon trees.
	- Eric Sunshine made a fairly major change to the CVS snapshot
	  generation script.  It now generates packages based on a
	  configurable list of archivers.  The current list now includes bzip2
	  and zip in addition to the original gzip.  The 'diff' is no longer
	  generated from an older existing package (since it is now difficult
	  more to decide which older package to choose).  Instead the diff is
	  performed based upon time-stamp of the last run, and the timestamp
	  is stored in a file in the log directory.
	- Thomas Hieber fixed the DirectX 6.1 renderer to make it work again.
12-Jan-2000
	- Added double linked list code from David Durant to csutil.
	- Did first work on new system to add dynamic objects to
	  polygon trees.
	- Andrew Zabolotny added documentation for his memory debugger.
	- Michael Ewert did a few changes to the phyzik library. He added
	  an NxN matrix class (ctMatrixN).
11-Jan-2000
	- Changes from David Durant to implement a new callback for sprites
	  which is called when the sprite is REALLY drawn. He also added
	  an actor pointer (csObject) to csSprite3D.
	- Andrew Zabolotny added -f option to awk debug script so that it
	  can be invoked manually.
	- Eric Sunshine made minor VFS-related corrections to INSTALL.Win.
	- Norman Kramer fixed rle8 encoding and added little/big endian
	  support in bmp loader class.
10-Jan-2000
	- Andrew Zabolotny has CVS write access again! :-)
	- He also fixed the change that Jorrit made with regards
	  to SetName in csObject.
	- Norman Kramer removed the test for important colors in 256-color
	  bitmaps (BMP loading).
	- More updates to Map2CS from Thomas Hieber.
          The default sector is now generated using black flatshading
	  instead of using an randomly selected texture. (this will
	  also help a little bit with performance).
	- Thomas also updated the Win VC project files to reflect Jorrits
	  latest move of files.
	- Eric Sunshine made a few minor VFS-related corrections to
	  docs/INSTALL.NeXT-Binary.
	- Norman Kramer added support for RLE8 encoded BMP-files.
8-Jan-2000
	- Michael Dale Long added support for configurable colors using
	  the iTextureManager to iConsole.  He also removed all dependencies
	  on the 3D graphics driver from the csConsole plugin.
	- Eric Sunshine changed the CVS snapshot script so that it also
	  creates a symbolic link to the most recent 'diff' file in addition
	  to creating a link to the most recent package.  (This feature was
	  requested by a user.)
	- Fixed bug in the destructor of csPolygon3D. After freeing some
	  of the internal resources functions were called that still dependent
	  on those resources. Solved this by setting the pointer to the
	  resources to NULL so that those functions can detect that case.
	  This fixes the bug when CS is exited while a dynamic light
	  is active.
	- Moved all 2D cullers to libs/csengine/culler (coverage mask
	  tree, quadtree, and c-buffer).
	- Also moved quadtree.cpp from csgeom to csengine/culler.
	- Created new csengine/polytree and moved BSP and octree stuff
	  from csgeom to csengine.
	- Thomas Hieber did some changes to Map2CS. Polygons are
	  only added to sector walls that are part of 'worldspawn'.
	  Some other additional fixes and changes.
	- Thomas also added documentation for map2cs.
	- Thomas also fixed a crash on exit related to the console.
	- Michael Ewert did some changes to csphyzik. He added body_a
	  and a 'work in progress' class.
	  Also added get_I_inv and get_angular_P.
7-Jan-2000
	- Fixed colored static lighting for OpenGL and Direct3D.
	- Some fixes on lightmap deallocation. Now use DecRef()
	  consistently. Unfortunatelly this still doesn't seem to fix
	  the 'pure virtual method call' at exit.
	- Michael Dale Long created the new iConsole interface and cscon
	  plugin.  Modified csSimpleConsole and other code that used it
	  (walktest, csgame) to use it instead of the old csConsole.
	  The new cscon still needs a lot of work, so csSimpleConsole
	  will continue to work as before.
	- Eric Sunshine fixed several minor problems which cropped up with
	  the introduction of the new iConsole and cscon.
	- Robert Bate updated the Macintosh project.
	- Norman Kramer updated documentation for the new world file
	  features he added (TEX_SET, TEX_SET_SELECT).
	- Small fix to new console from Seth Galbraith.
6-Jan-2000
	- Thomas Hieber added iterators for nodes and keys.
	  Added simplified access to keys and node by name and classname.
	  Added "FindName", Added methods with more intuitive names (in
	  csobject library). (The old ones are still there...)
	- Eric Sunshine added Append(char) to csString.  He also added a
	  constructor which accepts a (char).
	- Michael Dale Long fixed several bugs in makefile.py.
5-Jan-2000
	- Some further changes on support for curves in visibility system
	  (unfinished).
	- Eric Sunshine updated some out-of-date information in people.tex
	  and added missing information.
	- Eric Sunshine elmiminated some compilation warnings in world.cpp.
	- Eric Sunshine worked around an OpenStep compiler bug which was
	  triggered by the new csengine/planeclp.h file.  The compiler
	  generates unlinkable code when an inline method calls another inline
	  method which the compiler has not seen yet.  A simple textual
	  reorganization of the file fixed the problem.
	- Eric Sunshine eliminated signed vs. unsigned comparision compilation
	  warnings in map2cs.
	- Thomas Hieber added support for game sepcific data in the world
	  file (KEY and NODE).
	- Thomas also did a few further changes on Map2CS.
4-Jan-2000
	- Improved style a bit in new planeclp.h.
	- Started work on including curved surfaces to the visibility
	  algorithms.  This initially means that csThing::Merge() now actually
	  also merges curved surfaces.
	- Changed STATBSP() option so that it ignores things that contains
	  curves and doesn't try to add them to the static bsp.  This means
	  that curved surfaces will now appear correctly even if you use
	  STATBSP() but they will still not use the visibility algorithm (i.e.
	  they will be slow).
	- Thomas Hieber removed setting for manual sectoring in map2cs.  It is
	  now always on.  Textures are also exported with different name and
	  filename.
	- Thomas also fixed the release mode name for the Windows OpenGL 2D
	  driver.
	- Eric Sunshine modified the CVS snapshot-generation script to patch
	  the CVS/Root files ("cvs1" --> "cvs.crystal.sourceforge.net") such
	  that the resulting snapshot can be used later for an anonymous cvs
	  update.
	- Eric Sunshine fixed DECLARE_GROWING_ARRAY() so that it is compilable
	  on all platforms.  Recent changes to appease MSVC (the addition of a
	  floating semi-colon) were not grok'd by the NextStep compiler, so the
	  issue was resolved by eliminating the problem altogether. :-)
	- Eric Sunshine applied a patch to blocks.cpp from Artur Biesiadowski
	  <abies@pg.gda.pl> to correct a bug where the orientation of a piece
	  was different on-screen versus in-memory.
	- Eric Sunshine fixed several compilation errors in map2cs.  He also
	  eliminated some compilation warnings.
	- Eric Sunshine removed all of the remaining, obsolete references to
	  csregsvr from the documentation.
	- Eric Sunshine fixed the makefile for scftutor so that it once again
	  generates plug-in modules usable by NeXT.
	- Eric Sunshine patched up linking of the CrystalClear plug-in so that
	  it is once again usable on NeXT.
	- Eric Sunshine fixed a bug in cctest where it was corrupting the path
	  to the level file (as in "/lev/largelarge").
	- Eric Sunshine fixed a bug in the CrystalClear plug-in where it failed
	  to initialize its embedded physics configuration member.
3-Jan-2000
	- Thomas Hieber fixed a few things to make CS compilable again with
	  MSVC.
	- Norman Kramer added new keywords to world format TEX_SET and
	  TEX_SET_SELECT.  Using these new keywords it is possible to use
	  different texture sets for different instantiations of a thing
	  template.
2-Jan-2000
	- Removed another 16 bytes from csLightMap.  This change also makes
	  dynamic lighting more efficient (slightly).
	- Started cleaning up csPolyTexture.
	- Optimization in the software renderer (CreateDirtyMatrix).
	- VERY significant memory optimization.  Instead of storing four
	  lightmap structures (and lightmaps) for every polygon we now only
	  store one.  The four lightmaps were the same anyway.  I don't know
	  why there should be four.  This is left-over from a long time ago.
	  This optimization means we save 4800 bytes for every lightmapped
	  polygon with a 16x16 lightmap.
	- Changes to Map2CS from Thomas Hieber (new lightscale option).
	- Norman Kramer added a farplane to csCamera object such that
	  everything is clipped to that plane.  Default is no clipping.
	- Eric Sunshine wrote a script (bin/snapshot.py) which generates
	  snapshots and diffs of the CVS repository.  The script currently
	  runs daily and deposits the snapshots at:
	  ftp://crystal.sourceforge.net/pub/crystal/cvs-snapshots.
1-Jan-2000
	- My computer is still working :-)  And so is Crystal Space.
	- Removed 16 bytes from every csLightMap.  This means a saving of 64
	  bytes for every lightmapped polygon since there are four lightmaps
	  for the four mipmap levels.
	- Removed another 12 bytes from csLightMap.
	- Small optimization in coverage mask tree.
	- Seth Galbraith did some changes on map2cs so that textures with no
	  data are not saved.  If no texture is found then a new texture is
	  created (with no data) with the name from the map file.
	- Seth also updated DJGPP help system with some correct links.

Please see "history.old" for less recent historical entries.
