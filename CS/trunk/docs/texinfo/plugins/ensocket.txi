@c -*-texinfo-*-
@node En Socket, , Network Drivers, Network Drivers
@subsection EN Socket

The EN Network Driver consists of two components.

@table @emph
@item Network Driver
System independent network driver.  This driver implements a @sc{tcp/ip}
networking interface.  The network driver and socket driver currently support
@sc{bsd} compliant calls.

@emph{Note}: Some operating systems may not support all the functions of
this plugin.

@item Network Driver
Network Driver.  This driver is used to create an implementation of the Socket
Driver via the @code{CreateSocket()} call.  The Network Driver calls
appropriate socket startup/shutdown calls for the operating system.

@item Socket Driver
This driver handles all the connection functions.  This driver is implemented
by calling the @code{CreateSocket()} call located in the Network Driver.  The
Socket Driver supports the following features (some might not work on all
operating systems):

@itemize @bullet
@item
@sc{tcp/udp} connections over @sc{tcp/ip} networks.
@item
Blocking/non-blocking calls.
@item
Sending/receiving of data across the connection.
@item
Blocking/non-blocking buffered read function.
@end itemize
@end table

@subheading Network Driver

The Network Driver is used to setup the socket sub-system.  The driver's
purpose is to provide a method for creating a @sc{bsd} sockets compliant socket
of either @sc{udp} or @sc{tcp} type.  Upon construction all appropriate socket
start-up calls are made, like wise with the destructor.

@table @code
@item CreateSocket()
Returns a socket that has been created with the type of @sc{tcp} or @sc{udp}.
@item LastError()
Returns the last error that was encountered.
@end table

@subheading Socket Driver

The Socket Driver is used to supply a common interface to a low-level
@sc{tcp/ip} network connection.  It allows connecting/accepting @sc{tcp} and
@sc{udp} based socket connections.  It provides very basic @sc{bsd} compliant
functionality.

@table @code
@item LastError()
Returns the last error that was encountered.
@item LastOSError()
Returns the last error that is returned by the operating system.
@item IsConnected()
Returns true or false depending upon the status of the connection.
@item SetSocketBlock()
This function sets the blocking/non-blocking attribute of the socket.
@item SetSocketReuse()
This function sets the ``reuse'' attribute of a listening socket.
@item Connect()
This function connects to a remote host and port.
@item Send()
This function sends a number of bytes to the remote connection.
@item Recv()
This function reads a number of bytes from the remote connection.
@item Close()
This function closes the socket and it is no longer valid after this point.
@item Disconnect()
This function closes the connection then closes the socket.
@item WaitForConnection()
This function sets the socket up for incoming connections on a port.
@item Accept()
This function returns a socket that is connected to a incoming connection 
from a remote system.
@item set()
This function is for internal use and should not be called.
@item ReadLine()
This function performs a buffered read in both tcp blocking/non-blocking modes.
@item RemoteName()
This function returns the remote name/@sc{ip} of the remote connection.
@end table

@subheading Example

Here is a simple example showing the module in use.

@example
#include "inetwork/driver2.h"
#include "inetwork/socket2.h"
#include "inetwork/sockerr.h"

iNetworkDriver2* netdriver = NULL;
iSocketDriver2*  client = NULL;
iSocketDriver2*  server = NULL;

@dots{}

netdriver = CS_QUERY_REGISTRY(object_reg, iNetworkDriver2);
if (!netdriver)
@{
  @dots{}
@}

// Create TCP socket.
server = netdriver->CreateSocket(CS_NET_SOCKET_TYPE_TCP);

// Last error is netdriver->LastError().
if (server)
@{
  server->SetSocketReuse(true);
  if (server->LastError() != CS_NET_SOCKET_NOERROR)
    printf("Unable to set reuse option.\n");
  server->SetSocketBlock(true);
  if (server->LastError() != CS_NET_SOCKET_NOERROR)
    printf("Unable to set block option.\n");
  // Wait on port 9999 queue up to 5 connections.
  server->WaitForConnection(0, 9999, 5);
  if (server->LastError() != CS_NET_SOCKET_NOERROR)
    printf("Unable to bind to port.\n");
@}

@dots{}

if (server)
@{
  client = server->Accept();
  if (client != NULL)
  @{
    // We have a connection.
    client->Send("hello\r\n",7);
    client->Disconnect();
  @}
server->Close();
client->DecRef();
server->DecRef();
@}
@end example
