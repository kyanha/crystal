@c -*-texinfo-*-
@node The Sprite Action Interface, Moving On, Sprite Actions, Animation
@subsection The Sprite Action Interface

@emph{Written by Michael Voase,
@email{mvoase@@midcoast.com.au}.}

@subsubheading Interfacing With the Sprite.

To begin this section, I am assuming here that you are aware of how to
obtain the various interfaces from the engine. If not, I would @emph{strongly}
suggest reading chapter 6.4 The Shared Class Facility
@xref{SCF} as I will be using terms and concepts that
explained in that section. If you are only interested in writing map files for
the engine then you can skip ahead to the next section.

Secondly, I am also presuming that you have loaded your sprite into the engine,
and have access to that sprite via the @code{iEngine} interface. That implies that
you have written a basic crystal space applcation ( or are hacking up an 
existing application ), and can access your sprite mesh factory using calls
simmilar to the following:

@example
  iMeshFactoryWrapper *fwrap = Engine->FindMeshFactory("name");
  iMeshObjectFactory *fact = fwrap->GetMeshObjectFactory();
  
  iMeshWrapper *mwrap = Engine->FindMeshObject("name");
  iMeshObject *mesh = mwrap->GetMeshObject();
@end example

With the name being the name of your mesh factory or object respectively.
There are four main interfaces that we will be dealing with in this section,

@itemize @bullet
@item
@code{iSpriteFrame} 
@item
@code{iSpriteAction} 
@item
@code{iSprite3DFactoryState} 
@item
@code{iSprite3DState}. 
@end itemize

The declarations for these interfaces can be found in 
@code{CS/include/imesh/sprite3d.h}. The first two interfaces can be obtained
by using the @code{FindFrame()} and @code{FindAction()} methods  in the 
@code{iSprite3dFactoryState} interface ( described later ).
The third interface can be obtained by querying the @code{iMeshObjectFactory}
interface. The @code{iSprite3DState} interface can be obtained from the
@code{iMeshObject} interface. The following is a summary of the methods in
each interface and what they do. An example of obtaining the state interfaces
is described below:

@example
  iSprite3dFactoryState *fstat = QUERY_INTERFACE(fact, iSprite3dFactoryState);
  iSprite3DState *stat = QUERY_INTERFACE(mesh, iSprite3DState);
@end example

The @code{mesh} and @code{fact} variables are the ones mentioned earlier in
this chapter. The following is summary of the methods and interface that are
useful to the sprite animator during production. This summary does not fully
document the iSprite3DState or iSprite3DFactoryState interfaces since they
are adequately documented elsewhere. Only methods which are relevant to frame
animation are treated here.

@subsubheading @code{iSpriteFrame}

Current version: 0.0.2

@itemize @bullet
@item
@code{virtual void SetName(char const *name )}

Description: Set the name of this frame.

@item
@code{virtual char const* GetName()}

Description: Return the name of this frame

@item
@code{virtual int GetAnmIndex()}

Description: Returns the index of the first vertex used in this frame. The
vertex list is stored in the sprite factory.

@item
@code{virtual int GetTexIndex()}

Description: Returns the index to the first texel used in this frame. The
texel list is stored in the sprite factory.
@end itemize

@subsubheading iSpriteAction

Current version: 0.0.1

@itemize @bullet
@item
@code{virtual void SetName(char const* Name)}

Description: Set the name of this action.

@item
@code{virtual char const* GetName() const}

Description: Return the name of this action

@item
@code{virtual int GetFrameCount()}

Description: Get the total number of frames in this animation

@item
@code{virtual iSpriteFrame* GetFrame(int index)}

Description: Returns frame at number @code{index}.

@item
@code{virtual iSpriteFrame* GetNextFrame()}

Description: Returns the next frame in the sequence.

@item
@code{virtual int GetFrameDelay(int index)}

Description: Returns the duration of frame @emph{index}.

@item
@code{virtual void AddFrame(iSpriteFrame* frame, int time}

Description: Adds the frame given by @emph{frame} to this action
and set the duration to @emph{time} milliseconds. This method is used
by the loader to add frames to an action. If you want to 'roll your own',
you will be using this interface to create your own actions. The frame
must already be present in the frame list held by the sprite factory
that this action came from.

@subsubheading iSprite3DFactoryState

Current version: 0.0.2


@item
@code{virtual void AddVertices(int number)}

Description: Adds @emph{number} vertices to @strong{all} frames
in this sprite factory. The all is emphasised so that you are aware
that the actual number of vertices created is @emph{number} multiplied
by the number of frames. This is done to satisfy the requirement that
all frames must be of an equal size.

@item
@code{virtual iSpriteFrame* AddFrame()}

Description: Creates a new frame on the spirte frame list and
returns a pointer to the newly created frame. The loader uses
this method to load frames into a sprite. For each new frame
added, an additional bank of vertices and texels is created for
the new frame. Once you have this frame, you will then be using
the @code{iSpriteFrame} interface to operate on the frame.

@item
@code{virtual iSpriteFrame* FindFrame( const char* title )}

Description: Finds the frame named @emph{title} in this sprite
factory and returns a pointer the frame.

@item
@code{virtual int GetFrameCount()}

Description: Returns the number of frames in this sprite factory.

@item
@code{virtual iSpriteFrame* GetFrame(int index) const}

Description: Returns a pointer to frame @emph{index}. This
frame is part of the list of frames stored in this sprite factory.

@item
@code{virtual iSpriteAction* AddAction()}

Description: Create a new action and return a pointer to the action.
Once you have obtained the action, you will then be using the 
@code{iSpriteAction} interface to modify this action.

@item
@code{virtual iSpriteAction* FindAction(const char* title) const}

Description: Returns a pointer to the action named @emph{title}.

@item
@code{virtual iSpriteAction* GetFirstAction() const}

Description: Returns a pointer to the first action in this sprite
factory.

@item
@code{virtual int GetActionCount() const}

Description: Returns the number of actions stored in this sprite
factory.

@item
@code{virtual iSpriteAction* GetAction(int index) const}

Description: Returns a pointer to action number @emph{index}

@item
@code{virtual void EnableTweening(bool flag)}

Description: Enables or disables tweening on this sprite factory
depending on @emph{flag}. 

@item
@code{virtual bool IsTweeningEnabled()}

Description: Returns the current setting for tweening on this sprite
factory.
@end itemize

@subsubheading iSprite3DState

Current version: 0.0.4

@itemize @bullet
@item
@code{virtual void SetFrame(int index)}

Description: Sets this sprite to frame number @emph{index} in the
action current applied to this sprite.

@item
@code{virtual int GetCurFrame() const}

Description: Returns the index number of the current frame in the
current action applied to this sprite.

@item
@code{virtual int GetFrameCount() const}

Description: Returns the number of frames in the current action
applied to this sprite.

@item
@code{virtual bool SetAction(const char *title)}

Description: Set the current action of this sprite to the action
named @emph{title}. Returns a flag indicating if the operation was
successful or not.

@item
@code{virtual iSpriteAction* GetCurAction() const}

Description: Returns a pointer to the current action applied to this
sprite.

@item
@code{virtual EnableTweening(bool flag)}

Description: Enables or disables tweeing on this sprite according
to @emph{flag}.

@item
@code{virtual bool IsTweeningEnabled() const}

Description: Returns a flag indicating if tweening is enabled for this
sprite.

