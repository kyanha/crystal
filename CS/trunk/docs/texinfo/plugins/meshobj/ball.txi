@c -*-texinfo-*-
@node MeshObject Ball, MeshObject Cube, MeshObject Spr3D, MeshObject
@subsection Ball Mesh Object
@cindex MeshObject
@cindex Ball
@cindex @code{iMeshObject}
@cindex @code{iMeshObjectFactory}
@cindex @code{iMeshObjectType}
@cindex @code{iBallState}

@emph{Written by Jorrit Tyberghein,
@email{jorrit.tyberghein@@uz.kuleuven.ac.be}.}

A ball is a ball shaped object made out of triangles. You can specify
the detail (i.e. number of triangles used).

@subsubheading Basic Structure

The following @sc{scf} class names are used (for @code{CS_LOAD_PLUGIN()}):

@itemize @bullet
@item
Type plugin: @samp{crystalspace.mesh.object.ball}
@item
Loader plugin: @samp{crystalspace.mesh.loader.ball}
@item
Factory loader plugin: @samp{crystalspace.mesh.loader.factory.ball}
@end itemize

Objects in this plugin implement the following @sc{scf} interfaces (get
with @code{SCF_QUERY_INTERFACE()}):

@itemize @bullet
@item
@emph{MeshObject}
@itemize @bullet
@item
Implements @samp{iMeshObject}
@item
Implements @samp{iBallState}
@end itemize
@item
@emph{MeshObjectFactory}
@itemize @bullet
@item
Implements @samp{iMeshObjectFactory}
@end itemize
@item
@emph{MeshObjectFactory}
@itemize @bullet
@item
Implements @samp{iMeshObjectType}
@end itemize
@end itemize

@subsubheading Factory State Interface

The ball mesh object plugin has no factory state interface.

@subsubheading Factory Loader

The ball mesh factory loader has no parameters.

@subsubheading Object State Interface

@samp{iBallState} is the @sc{scf} interface that you can
use to set/get settings for a ball object. The definition of this
interface can be found in @code{include/imesh/ball.h} and that's also the
include file you need to include in your applications to use this plugin.
Using this interface you can access the material, blending mode (mixmode),
and radius.

@subsubheading Object Loader

@table @code
@item FACTORY(factoryName)
Name of the factory to use for creation of this instance.
@item MIXMODE(mode)
Blending mode, one of @samp{ADD}, @samp{ALPHA}, @samp{COPY}, @samp{KEYCOLOR},
@samp{MULTIPLY2}, @samp{MULTIPLY}, or @samp{TRANSPARENT}.
@item MATERIAL(materialName)
Material to use for the ball.
@item NUMRIM(number)
Number of vertices on the rim of the ball (i.e. the number of vertices along
the equator).  A good default is 6.
@item RADIUS(x,y,z)
Three parameters for x, y, and z radius.
@item SHIFT(x,y,z)
Three parameters for x, y, and z shift.
@item REVERSED(boolean)
Reverse the order of the triangles so that the ball is visible from the
inside instead of the outside.
@item TOPONLY(boolean)
Only generate the top triangles instead of two halves.
@item CYLINDRICAL(boolean)
Use cylindrical texture mapping instead of only a circle from the
texture (default off).
@item LIGHTING(boolean)
Enable/disable lighting. Default on.
@item COLOR(r,g,b)
Set the base color to use for the ball. This color will be added to the
color calculated by lighting (if lighting is enabled).
@end table
