@c -*-texinfo-*-
@node MeshObject SprCal3D, MeshObject Genmesh, MeshObject Spr3D, MeshObject
@subsection SpriteCal3D Mesh Object
@cindex MeshObject
@cindex 3D Sprite
@cindex cal3d
@cindex @code{iMeshObject}
@cindex @code{iMeshObjectFactory}
@cindex @code{iMeshObjectType}
@cindex @code{iSkeletonConnectionState}

@file{sprcal3d} is a 3D mesh that can perform skeletal animation using the
Cal3D library.

@uref{http://cal3d.sourceforge.net/}

@@@@@@ WRITE ME!

@subsubheading Morph Animations

Adding them to a cal3d file:

@table @code
@item <mesh file=@dots{} name=@dots{} material=@dots{}> <morphtarget file=@dots{} name=@dots{}/> <morphtarget @dots{}/> @dots{} </mesh>
You can add morph target meshes to each mesh. Remember that morph 
target meshes need to have the same amount of vertices and they 
need to be in the same order (Do not use the progressive mesh export option!).
@item <morphanimation name=@dots{}> <morphtarget mesh='meshname' morph='morphname'/> <morphtarget @dots{}/> @dots{}</morphanimation>
Each of the morph target meshes need to be assigned to a morphanimnation.
Do not add a morphtargetmesh to more than 1 morphanimation, this could result into problems.
@end table

You can test a morphanimation if you load the cal3d file in viewmesh.

Using morphanimations in code:

@table @code
@item int morphanimationid = cal3dfactorystate->FindMorphAnimationName(morphanimationname);
cal3dfactorystate is the cal3d factory state object.
Finds the morphanimationid with the givven name.
@item cal3dstate->BlendMorphTarget(morphanimationid,1.0f,10.0f);
cal3dstate is the cal3d state object.
Fully (1.0f) blends the morph animation,
over a period of (10.0f) ten seconds.
@item cal3dstate->ClearMorphTarget(i,10.0f);
And this completely clears a marphanimation,
over a period of (10.0f) ten seconds.
@end table


@subsubheading Sockets

Socket enable you to 'attach' any mesh object to a triangle.
The 'attached' meshobject then follows the triangle.

Adding them to a cal3d file (after the mesh tags...):
@table @code
@item <socket name=@dots{} mesh=i submesh=j triangle=k/>
i,j and k should be numbers. (They are all indices. 
The loading order of meshes is maintained, 
so you can deduce which mesh you are using.)
@end table

You can test a socket if you load the cal3d file in viewmesh.

Using sockets in code:
@table @code
@item iSpriteCal3DSocket* socket = cal3dstate->FindSocket(name);
cal3dstate is the cal3d state object.
Finds a socket with a given name.
@item sprite->GetChildren()->Add( meshwrap );
sprite is the MeshWrapper of the cal3d sprite.
meshwrap is the meshwrapper of the mesh object you want to add.
This adds the meshwrap as a hierarchical child of sprite.
@item socket->SetMeshWrapper( meshwrap );
Sets meshwrap in the socket.
@end table

