@c -*-texinfo-*-
@node MeshObject SprCal3D, MeshObject Genmesh, MeshObject Spr3D, MeshObject
@subsection SpriteCal3D Mesh Object
@cindex MeshObject
@cindex 3D Sprite
@cindex Cal3D
@cindex @code{iMeshObject}
@cindex @code{iMeshObjectFactory}
@cindex @code{iMeshObjectType}

@file{sprcal3d} is a 3D mesh that can perform skeletal animation using the
Cal3D library.

@uref{http://cal3d.sourceforge.net/}

@@@@@@ WRITE ME: Please cover more topics.

@subsubheading Morph Animations

You can add morph target meshes to each mesh.  Remember that morph target
meshes need to have the same number of vertices and they need to be in the same
order.  (Do not use the progressive mesh export option!).

@example
<mesh file="@dots{}" name="@dots{}" material="@dots{}">
  <morphtarget file="@dots{}" name="@dots{}"/>
  <morphtarget @dots{}/>
  @dots{}
</mesh>
@end example

Each of the morph target meshes need to be assigned to a
@samp{morphanimnation}.  Do not add a @samp{morphtargetmesh} to more than one
@samp{morphanimation}, since the library is not designed for this, and it would
cause problems.

@example
<morphanimation name="@dots{}">
  <morphtarget mesh="meshname" morph="morphname"/>
  <morphtarget @dots{}/>
  @dots{}
</morphanimation>
@end example

You can test a morphanimation if you load the Cal3D file in the @file{viewmesh}
example program.

You can use morph animations programmatically as follows.

@noindent
In this example, @samp{cal3dfactorystate} is the Cal3D factory state object.
Using the state object, find the @samp{morphanimationid} with the givven name.

@example
int morphanimationid =
  cal3dfactorystate->FindMorphAnimationName(morphanimationname);
@end example

@noindent
In this example, cal3dstate is the Cal3D state object.  We instruct it to fully
blend (1.0f) the morph animation, over a period of (10.0f) ten seconds.

@example
cal3dstate->BlendMorphTarget(morphanimationid, 1.0f, 10.0f);
@end example

@noindent
This example completely clears a morph animation, over a period of ten seconds
(10.0f).

@example
cal3dstate->ClearMorphTarget(morphanimationid, 10.0f);
@end example

@subsubheading Sockets

Sockets enable you to @dfn{attach} any mesh object to a triangle.  The attached
mesh object then follows the triangle.  Adding a socket to a Cal3D file
(following the mesh tags) can be done as shown here.  @samp{i}, @samp{j}, and
@samp{k} should be numbers.  They are all indices.  The loading order of meshes
is maintained, so you can deduce which mesh you are using.

@example
<socket name="@dots{}" mesh="i" submesh="j" triangle="k"/>
@end example

You can test a socket if you load the Cal3D file in the @file{viewmesh} example
program.

You can use sockets programmatically as follows.

@noindent
In this example, @samp{cal3dstate} is the Cal3D state object.  Here we find a
socket with a given name.

@example
iSpriteCal3DSocket* socket = cal3dstate->FindSocket(name);
@end example

For this example, @samp{sprite} is the @samp{iMeshWrapper} of the Cal3D sprite,
and @samp{meshwrap} is the @samp{iMeshWrapper} of the mesh object you want to
add.  This adds the @samp{meshwrap} as a hierarchical child of @samp{sprite}.

@example
sprite->GetChildren()->Add(meshwrap);
@end example

Here is how you would set a socket's mesh wrapper.

@example
socket->SetMeshWrapper(meshwrap);
@end example
