@c -*-texinfo-*-
@node Actually finding out what your user is doing, How you can write your own component, AWS Quick Start, AWS
@subsection Actually finding out what your user is doing

Using the slot/signal mechanism usually does this. All AWS components are signal 
sources, which means that you should be able to find out anything important that 
happens to them by creating appropriate sinks.  The idea here is that the 
application provider provides certain services.  The GUI is event driven, which 
means that you’re not so much interested in finding out when a certain button is 
clicked, but rather that you would like to know when a user wants to do 
something.  For example, you don’t care so much that the "Login" button has been 
pressed or toggled or selected or whatever it is that happens to the "Login" 
button to activate it, but rather that the user wants to login to the system.  
Connection maps in the window definition file that a GUI designer can hook up to 
signal sinks defined by an application programmer support this paradigm.  For a 
game, this model seems especially appropriate. 

For example, say the application programmer has defined a sink called 
"loginSink."  This sink has a few triggers: "login", "setusername", and 
"setpassword."   In order to have the login proceed, all of these triggers must 
be activated.  The simplest method would be to hookup the @emph{TextChanged} 
signal from the text boxes into the "setusername" and "setpassword" triggers.  
Both these triggers might expect to receive a source that is an 
@code{awsComponent} supporting the property @emph{Text}.  A command button’s 
@emph{Clicked} signal could be connected to the "login" trigger.  Then the 
following sequence occurs: 

@enumerate
@item
The user types in the username box.  A signal is sent to the "setusername" trigger, which tries to
lookup the value of @emph{Text} using the component’s GetProperty method.  If this succeeds, it stores a copy of the
text. 

@item
The user types in the password box.  The same process occurs here.

@item 
The user clicks on the Login button.  The @emph{Clicked} signal is sent to 
the "login" trigger, which then performs some sort of authentication. It might 
also then call some controlling object that it knows about to hide the window 
and change the display into an intro menu configuration or something else.  
@end enumerate

This is the general way that you interact with the user. The controlling 
principle being that the application developer provides the means, and the GUI 
designer provides the manner.  AWS tries to separate controller and view 
semantics as much as possible.
