@c -*-texinfo-*-
@node AWS Quick Start, AWS Signals, AWS, AWS
@subsection Quick Start

In order to startup and use @sc{aws}, currently, the following tasks need to be
accomplished:

@enumerate
@item
Load the @sc{aws} plugin.

@example
aws = CS_LOAD_PLUGIN(plugin_mgr,
  "crystalspace.window.alternatemanager", iAws);
@end example

@item
Create the @sc{aws} canvas.

@example
awsCanvas = aws->CreateCustomCanvas (myG2D, myG3D);
aws->SetFlag (AWSF_AlwaysRedrawWindows);
aws->SetCanvas (awsCanvas);
@end example

@item
Load definition files.

@example
aws->GetPrefMgr()->Load("./data/temp/awstest.def");
@end example

@item
Select a default skin that @emph{all} windows will use.

@example
aws->GetPrefMgr()->SelectDefaultSkin("Normal Windows");
@end example

@item
Create and display your windows.

@example
iAwsWindow *test1 = aws->CreateWindowFrom("Splash");
iAwsWindow *test2 = aws->CreateWindowFrom("Another");
if (test1) test1->Show();
if (test2) test2->Show();
@end example

@item
And finally you have to make sure it actually prints the output to the screen.
So in your programs main drawing loop you input code similar to this:
@example
// Start drawing 2D graphics.
if (!myG3D->BeginDraw (CSDRAW_2DGRAPHICS))
  return;
// Make sure invalidated areas get a chance to
// redraw themselves.
aws->Redraw ();
// Draw the current view of the window system to a
// graphics context with a certain alpha value.
aws->Print (myG3D, 64);
@end example
@end enumerate

That's all there is to it.  @sc{aws} is designed to be easy to use.  Of course,
this brief look does not illustrate how to get user input, from components in
the windows, nor does it illustrate how to do anything other than display your
windows.  However, the windows created here are full-fledged windows with all
the controls listed in the definition that you've created.  For more advanced
topics, read about signals (@pxref{AWS Signals}) and custom components
(@pxref{AWS Custom Components}).
