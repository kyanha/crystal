@c -*-texinfo-*-
@node Threads in CS, , Memory Debugger, Internals
@section Threads in Crystal Space
@cindex Threads

@noindent
@emph{Written by Jorrit Tyberghein.}

The Crystal Space project as such is not thread-safe. So when using
threads in combination with Crystal Space you have to be careful. However,
several parts of Crystal Space are thread-safe to some degree. This is
documented in this section. However, by default you must assume that some
Crystal Space plugin or module is not thread-safe unless it is mentioned here.

@subsubheading Threadsafe parts of CS

@itemize @bullet
@item
@sc{scf} class loading/unloading is safe. This means that
@code{SCF_CREATE_INSTANCE} and all the routines in @code{iSCF} that have
to do with loaded classes are safe.

@item
The plugin manager is safe. So macros like @code{CS_LOAD_PLUGIN},
@code{CS_LOAD_PLUGIN_ALWAYS}, and @code{CS_QUERY_PLUGIN_CLASS} are safe.

@item
The object registry is safe. So macros like @code{CS_QUERY_REGISTRY}
are safe. The @code{iObjectRegistryIterator} takes a copy of the data
over which it iterates so it will not even lock.

@item
@sc{vfs} is thread-safe for most operations. But do not work on the same
@code{iFile} from different threads! That is not thread-safe. Also the concept
of the current directory is not really valid with threads.

@item
The TinyXML, XMLRead, and Binary XML parsers are thread safe in the sense
that it is ok to create and work on seperate documents in seperate threads.
However it is NOT ok to work on the same document in different threads.

@item
The syntax services plugin is safe for the basic parsing tools (vectors,
matrices, reporting errors, ...). For polygons and thing related objects
this hasn't been checked yet.

@item
The @sc{simpcon} and @sc{csconout} output consoles are thread-safe provided
auto-updating is disabled (call @code{iConsoleOutput->AutoUpdate(false)}).
Note that by default auto-updating is enabled!

@item
The reporter plugin is fully thread-safe.

@item
The standard reporter listener plugin is thread-safe for basic operations
but not for initialization. That should be done from the main thread.
Also note that thread-safety of the standard reporter listener depends
on thread-safety of the output console that is being used.

@item
The following mesh object and factory loaders are thread-safe provided
that the implementation of @code{iLoaderContext} is thread-safe. Please
note that the default @code{iLoaderContext} is NOT thread-safe which makes
all loader plugins unsafe by default.
@itemize @bullet
@item
@emph{Genmesh loader}: aside from a small design mistake with streams in
case the new renderer is used, the genmesh loader plugin is perfectly
thread-safe.
@end itemize

@end itemize

@subsubheading Threaded Loading

One important threaded section of CS is the threaded loader. In order
to ensure that the threaded loader works correctly you must make sure that
you use thread-safe versions of the following modules in CS:

@itemize
@item
@code{iReporter} (the standard reporter is ok).
@item
@code{iReporterListener} (the standard reporter listener is ok).
@item
@code{iConsoleOutput} (simpcon and csconout are ok provided auto-updating is
disabled).
@item
@code{iLoaderContext} (the threaded loader provides a thread-safe version
of this one).
@item
@code{iDocumentSystem} (TinyXML, XMLRead, and BinaryXML are all ok).
@end itemize



