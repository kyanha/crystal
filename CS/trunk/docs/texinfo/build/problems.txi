@c -*-texinfo-*-
@node Problems, Quick Start, Windows, Building
@section Platform Specific Problems

These problems are relevant for both compiling and running.  Crystal Space is
work in progress.  Expect these problems to go away in the future.

@itemize @bullet
@item
With the exception of MacOS/X Server, OpenStep, and NextStep, all ports of
Crystal Space require an 8-bit, 15-bit, 16-bit, or 32-bit display to run.  It
will @emph{not} work on 24-bit displays.

@item
@sc{djgpp}: If you have @sc{gcc} 2.8.1 then you must disable optimization (use
@code{make djgpp MODE=debug}) before compilation because there seems
to be a bug in the optimizer.  You can also download @sc{egcs} from
@uref{http://goof.com/pcg} which fixes this problem and also generates a more
efficient executable.

@item
@sc{djgpp}: With very old versions of gcc you need to disable the assembler
routines (set @code{DO_ASM=no} in @file{mk/user.mak}) because the assembler
doesn't understand some of the @sc{mmx} routines.  You should upgrade to a
more recent version of @sc{djgpp} if possible.

@item
OpenGL: If your OpenGL display looks really bad (bad quality of lighting
compared to the software renderer) then you have a card which doesn't support
the desired blending mode @code{2*SRC*DST} that Crystal Space uses.  You can
edit @file{data/config/opengl.cfg} and change the @samp{LightmapMode} option to
@samp{multiply} (which all cards should understand) or any of the other
values.  @samp{multiply} will make everything dark but at least it will look
right.  The @sc{riva} 128@sc{zx} is an example of a card which doesn't support
@code{2*SRC*DST}.

@item
Direct3D: The Direct3D port suffers from the same bug as the OpenGL port with
the lightmaps not correctly applied on some 3D cards.
@end itemize
