@c -*-texinfo-*-
@node Directory Hierarchy, Requirements, Building, Building
@section Directory Hierarchy
@cindex Directory Hierarchy
@cindex Hierarchy, Directory

@noindent
@emph{Written by Thomas Hieber, @email{thieber@@gmx.net}.}

This section is intended to explain the general CS directory structure. It
contains all directories so maybe some will be missing if you just
downloaded the files for a specific port like Linux or Win32.

Crystal Space consists of the following directories:

@c --------------------------------------------------------------------------
@c Most directories should get a very short note and a link to their real
@c documentation.
@c --------------------------------------------------------------------------
@table @code
@item CS
The main directory for Crystal Space.  You can choose any path for it, as long
as it is supported by your operating system.  This is the path that all
compiled programs end up in.  This should be your working directory for these
executables. 

@item CS/apps
This is where all applications which ship with Crystal Space reside.
@xref{Applications}.

@table @code
@item CS/apps/tests
Applications for testing specific features of the project reside here.
@end table

@item CS/bin
Some scripts to support the build process on various platforms.

@item CS/data
Here you should place your levels like @file{flarge.zip}. You can use any
directory for this, so this is only a suggestion. If you change the name, you
must update the information in the configuration for the Virtual File System,
(@file{vfs.cfg}).

@item CS/data/config
Most applications and plugins utilise a (@file{.cfg}) file. For convenience they
are all grouped here. 

@item CS/docs
The root of the Crystal Space documentation hierarchy.  There are several
subdirectories.

@table @code
@item CS/docs/texinfo
Texinfo is the master format for all Crystal Space documentation.  This
directory and its subdirectories contain all of the Texinfo source and images
which comprise the Crystal Space manual.  Most users need not concern
themselves with this directory since the Texinfo documentation is
automatically converted to @sc{html} which is more accessible to the general
user.  Documentation writers and maintainers may be interested in this
directory.

@item CS/docs/html
This directory contains the @sc{html} conversion of the Texinfo Crystal Space
documentation.  Most users will want to look at @file{CS/docs/html/index.htm}
that resides here.

@item CS/docs/incoming
This is a temporary staging area for documentation which has not yet been
converted to Texinfo format.  Much of this documentation is useful and worth
perusing.

@item CS/docs/pubapi
This directory contains the Crystal Space SDK's public API reference manual
rendered in @sc{html} format.
@end table

@item CS/include
Here are the headers that can be used from other modules. The path for the
headers reflect the structure of the modules in the lib directory. So for
furter explanation of a specific directory see the @file{CS/lib} section.
Include files which live in this directory itself (i.e. not deeper in the
hierarchy) contain definitions for @sc{scf} interfaces.
@xref{SCF}.

@item CS/libs
Here is all the Modules provided by Crystal Space. Some modules will consist of
only one subdirectory in libs, some will be a combination of several
subdirectories.

@table @code
@item CS/libs/csengine
The 3D engine is one of the cornerstones of Crystal Space and also what
originally sparked the birth of the Crystal Space project.  It needs the 3D
rasterizer component to display output and also requires a number of other
libraries (csutil, csgeom, csgfxldr).  The 3D engine exports a number of
@sc{scf} interfaces to allow access through the @sc{scf} mechanism.

@table @code
@item CS/libs/csengine/light
Lighting system
@item CS/libs/csengine/objects
Things and Mesh objects
@item CS/libs/csengine/polygon
Polygon related functionality
@end table

@item CS/libs/csgeom
The geometry library.  Various geometry related functions and classes can be
found here: matrices, vectors, transforms, clipper, planes, etc.

@item CS/libs/csgfx
The graphics library.  Routines to support loading various graphic file
formats (through plugins) and put them internally in the same format.
Through this library you can get at @sc{jpg}, @sc{gif}, @sc{tga}, @sc{png},
and @sc{bmp} files.

@item CS/libs/csparser
A library which parses @sc{ascii} map files and imports the map into the
3D engine. In the future this library will be removed in favor of a plugin.

@item CS/libs/cssys
All system dependent stuff (non-graphics and non-sound related) is in this
library.

@table @code
@item CS/libs/cssys/general
Code which may be shared between system drivers that can make use of it.
@item CS/libs/cssys/be
BeOS
@item CS/libs/cssys/djgpp
@sc{dos} using the @sc{djgpp} compiler
@item CS/libs/cssys/mac
MacOS/9
@item CS/libs/cssys/next
MacOS/X, MacOS/X Server 1.0 (Rhapsody), OpenStep, NextStep
@item CS/libs/cssys/os2
@sc{os/2}
@item CS/libs/cssys/unix
Unix, including Linux, Solaris, Irix, etc.
@item CS/libs/cssys/win32
Win32
@end table

@item CS/libs/csutil
This library contains various utilities.  There is an Archive class which can
read/write @sc{zip} archives.  There is a vector class, a sparse matrix class
and some other useful goodies.  This library requires the use of the external
@file{zlib} library which is used to read/write @sc{zip} archives.

@item CS/libs/csws
The Crystal Space Window System which is nicely integrated with Crystal Space.
It is also platform independent.
@end table

@item CS/mk
This directory contains the common parts of the makefiles for many systems

@table @code
@item CS/mk/mwcw
Project files for MacOS/9 CodeWarrior
@item CS/mk/msvcgen
Component for automatic generation of Visual C++ project files based upon
information gleaned from @sc{gnu} makefiles project-wide.
@item CS/mk/visualc
Project files for Win32 using @sc{msvc} 5.0/ 6.0
@end table

@item CS/plugins
Plug-in, dynamically loaded modules.  Communication with these modules is
performed strictly via @sc{scf} interfaces.  @xref{SCF}.

@item CS/plugins/video/canvas
The 2D driver component which manages creation of the Crystal Space window
used for rendering and also supports limited 2D drawing capabilities
(including 2D pixmaps).  It can be used standalone but it is currently very
limited and not very useful (this may change in the future).  There are several
implementations of this component.  All are specific to some 3D Rasterizer
(for example, the OpenGL 3D Rasterizer on Unix requires the OpenGL 2D XLib
Driver).

@table @code
@item CS/plugins/video/canvas/common
Common code for 2D drivers
@item CS/plugins/video/canvas/be
BeOS version
@item CS/plugins/video/canvas/csdive
@sc{os}/2 version
@item CS/plugins/video/canvas/ddraw
Win32 using Direct Draw
@item CS/plugins/video/canvas/ddraw61
Win32 using Direct Draw (DirectX 6.1)
@item CS/plugins/video/canvas/dosraw
@sc{dos}
@item C~S/plugins/video/canvas/ggi
Unix, using @sc{ggi}
@item CS/plugins/video/canvas/softx
Unix, using X
@item CS/plugins/video/canvas/svgalib
Unix, using @sc{svga}lib
@item CS/plugins/video/canvas/mac
MacOS/9
@item CS/plugins/video/canvas/next
MacOS/X, MacOS/X Server, OpenStep, NextStep
@item CS/plugins/video/canvas/glide2common
Common code for to Glide2 drivers
@item CS/plugins/video/canvas/beglide2
Glide2X 2D driver for BeOS
@item CS/plugins/video/canvas/unxglide2
Glide2x 2D driver for Unix
@item CS/plugins/video/canvas/openglcommon
Common code for all OpenGL 2D drivers
@item CS/plugins/video/canvas/openglbe
OpenGL 2D driver for BeOS
@item CS/plugins/video/canvas/openglmac
OpenGL 2D driver for MacOS/9
@item CS/plugins/video/canvas/openglos2
OpenGL 2D driver for @sc{os}/2
@item CS/plugins/video/canvas/openglwin
OpenGL 2D driver for Win32
@item CS/plugins/video/canvas/openglx
OpenGL 2D driver for Unix/X Windows
@end table

@item CS/plugins/video/renderer
The 3D rasterizer component is required by the 3D engine but may also be
useful standalone.  It needs a 2D Driver.  There are currently several classes
of this component which correspond to particular @sc{api}s: software, OpenGL,
Glide, and Direct3D.  Some rasterizers are operating system independent, such
as OpenGL and software.  Some rasterizer techonolgy is only available on
certain operating systems, such as DirectX.

@table @code
@item CS/plugins/video/renderer/common
Common code for 3D rasterizers
@item CS/plugins/video/renderer/direct3d61
Direct3D rasterizer using DirectX 6.1
@item CS/plugins/video/renderer/glide
3D rasterizer using glide
@item CS/plugins/video/renderer/opengl
3D rasterizer using OpenGL
@item CS/plugins/video/renderer/software
Software based rasterizer
@item CS/plugins/video/renderer/line
A vector based rasterizer (draws only lines)
@item CS/plugins/video/renderer/inf
The @emph{infinite} rasterizer (draws nothing at all)
@item CS/plugins/video/renderer/null
The @emph{null} rasterizer (needed to work with 2D graphics alone)
@end table

@item CS/plugins/video/format
Support for playing video files on a texture.

@item CS/plugins/net/driver
Network drivers.  The only existing driver is a @sc{bsd} socket-based
@sc{tcp/ip} driver.

@item CS/plugins/cscript/cspython
@sc{Python} scripting module.

@item CS/plugins/bugplug
@sc{BugPlug} is a small plugin that gives debugging facilities to any
Crystal Space application. Just load the plugin and it works.

@item CS/plugins/engine/3d
If you want to use the engine as a plugin then this directory contains
the needed support for that. In the future using the engine as a plugin
will be the prefered way.

@item CS/plugins/engine/iso
This is an alternative engine used in Crystal Space. It gives an isometric view
instead of a real 3D view. Mesh objects can also work with this engine
(with a few limitations, mostly regarding size).

@table @code
@item CS/plugins/sound/driver
System dependent sound drivers.  There are currently drivers for MacOS/9,
@sc{oss} (Unix), and Windows.

@table @code
@item CS/plugins/sound/driver/macsnd
Sounddriver for MacOS/9
@item CS/plugins/sound/driver/oss
Sounddriver for Unix
@item CS/plugins/sound/driver/waveoutsd
Sounddriver for Win32
@end table

@item CS/plugins/sound/loader
Loaders for various sound file formats.
@item CS/plugins/sound/renderer
Support for 3D sound (@sc{ds3d} or @sc{software} only at the moment).
@end table

@table @code
@item CS/plugins/console
Various console plugins for input/output. A console is typically overlayed
on top of the 3D display.
@end table

@table @code
@item CS/plugins/mesh
Various mesh object implementations.  @xref{MeshObject}.
For every mesh object there is typically one implementation in @sc{object}
and one or more loader/saver plugins in @sc{persist}. @sc{persist/classic}
is the loader in Crystal Space format.
@end table

@table @code
@item CS/plugins/font/server/csfont
Standard Crystal Space font server.
@item CS/plugins/font/server/freefont
Freefont font server.
@item CS/plugins/font/server/fontplex
Font server multiplexer.
@end table

@item CS/support
Support routines.

@table @code
@item CS/support/debug
Support routines for extensive memory checking.
@item CS/support/gnu
Replacement for @file{bison.simple}, which is missing on some systems.
@end table
@end table
