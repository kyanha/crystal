@c -*-texinfo-*-
@node Amiga, , GCC Windows, Platform Instructions
@subsection Amiga
@cindex Amiga

@emph{Written by Ralf Eisele, @email{eiselera@@pcpool1.informatik.uni-ulm.de};
updated by Jesse McClusky, @email{Jesse.McClusky@@PSS.Boeing.com}.}

@strong{Warning}: The Amiga port of Crystal Space is extremely out of date and
entirely broken.  It has been included as part of the standard distribution in
the hope that someone with Amiga experience will step forward to repair and
maintain it.

@noindent
For current status, see the Amiga Crystal Space Port support web site at:

@uref{http://www.weblink.org/weblink/AmigaCrystal Space}

@subsubheading Current Minimum Requirements

This is a list of the current minimum requirements for building Crystal Space
on the Amiga.

@itemize @bullet
@item
Geek Gadgets
@item
@sc{gcc} 2.7.0+
@item
@code{ixemul.library} 47.3+
@item
@code{make} 3.75+
@item
@sc{x11r6.1}
@item
16@sc{mb} @sc{ram}
@item
About 20@sc{mb} of hard drive space
@item
Several hours and a lot of patience
@end itemize

@subsubheading Configure and Build

To configure and build Crystal Space on Amiga, follow these instructions:

@itemize @bullet
@item
First of all you need to install the Amiga @sc{gnu} compiler.  How to install
and get the @sc{gnu} compiler is not documented here.  See the "Geek Gadgets"
@sc{cd}, or either the @file{dev/gnu} or @file{dev/gg} directories on the
Aminet for more information.

@item
After you installed the @sc{gnu} compiler you need an assign to the @sc{gnu}
compiler.  Put the following assign into your @file{s:user-startup} if it is
not already there:

@example
Assign gg: @var{<path where @sc{gnu} compiler is installed}>
@end example

If you want to change the assignment from @samp{gg:} to something else
remember to also change it in @file{CS/libcs/cssys/amiga/amiga.mak};
(@code{-Igg:os-include/amiga}).

@item
Unpack the Crystal Space archive in a directory of your choice.  A directory
named @file{CS/} will be created for you.

@item
Download the required external library packages.  @xref{External Libraries}.

@item
Unpack the @file{zlib_1.1.1.tgz} archive into the @file{CS/} directory.  If
you want support for @sc{png} or @sc{jpeg} you can also unpack
@file{libpng.tgz} and @file{libjpeg.tgz} into the @file{CS/} as well.  These
two aren't required by all Crystal Space applications, but more and more
programs are making use of them.

@item
Compile the @file{zlib} library.  Go to the @file{zlib} directory
(@file{CS/libs/zlib}) and type:

@example
sh ./configure
make
@end example

If all goes well you will get a @file{libz.a} file.  To be sure that the
@file{zlib} file is okay you can also type @samp{make test}.  Now @file{zlib}
will be built and @file{zlib} will be tested to see if it has been build
correctly.

@emph{Note}: This is the static @file{zlib} library.  A shared library is not
available at this time.

@item
If you also chose to use the @file{libpng} package, you need to copy the file
@file{makefile.aos} from the @file{CS/libs/cssys/amiga/png/} directory into
the @file{CS/libs/libpng/} directory, assuming that you got the general
version.  If you got the Amiga-specific version, that step is unnecessary.
Type @samp{make -f makefile.aos} to compile @sc{png} support.

@item
Currently @file{libjpeg} is untested because I couldn't get it to work.

@item
You'll need to create dummy (empty) files for the following, unless these
files actually exist in your installation:

@example
GG:include/alloca.h
GG:include/dlfcn.h
GG:include/sys/io.h
@end example

@item
There are a number of harmless warnings that come from the misdefinition of
@code{strchr()} and @code{index()} in the Amiga @sc{gnu} distribution, and
from implicit typecasting to and from @code{(void*)}.

@item
Compiling without @sc{fpu}: Set @samp{DO_ASM} to @samp{no} in file
@file{CS/mk/user.mak}

@item
Compiling with @sc{fpu}: Set @samp{DO_ASM=yes} in file @file{CS/mk/user.mak}.
Set @samp{FPUVER=-m68881} in @file{CS/libs/cssys/amiga/amiga.mak}.

@item
See the @samp{CPUVER} flag comments in @file{CS/libs/cssys/amiga/amiga.mak} if
you want to optimize for @code{020}, @code{040}, or @code{060}

@item
If you don't have @sc{png} or @sc{jpeg} installed set @samp{DO_PNG=no} and
@samp{DO_JPG=no} in file @file{CS/mk/user.mak}.  The @sc{gif} switch is
required, because without it your program will do nothing.

@item
Change @samp{DO_SOUND} and @samp{DO_MMX} to @samp{no} in
@file{CS/mk/user.mak}.  (Sound isn't currently supported.)

@item
Before you can compile Crystal Space you will need to add an include directory
where the @sc{gnu} make can find the Amiga specific includes like
@file{exec/type.h} etc.  This is essental, or @file{Amiga.cpp} and various
other files will not be compiled.  The default is @file{GG:os-include/amiga/},
but you can change this in the @file{CS/libs/cssys/amiga/amiga.mak} file by
changing the path on the @samp{INCLUDE_DIRS=} line.

@item
When you're ready to start making the CrystalSpace project, type @samp{make
amiga} from the @file{CS/} directory.  When that completes, you'll need to
type @samp{make depend}.  After that, type @samp{make} by itself to see a list
of the options available.  You'll need to make the graphics drivers (if you
want to see anything rendered to your screen).

@emph{Note}: This procedure may not work anymore, as several items (notably
the software renderer and network drivers) became shared plug-ins with the
0.11.058 beta.  I haven't tested the compiles for
@samp{USE_SHARED_PLUGINS=yes} yet, so this might not work.
@end itemize

@strong{Warning}: Be aware that some editors expand the @key{TAB} key to
spaces.  Your makefiles won't work correctly if that happens.  The Amiga
standard @file{ed} and @file{GOLDED} both do this.  Micro Emacs
(@file{memacs}) that also comes with the Amiga supports tabs correctly.
