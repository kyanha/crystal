@c -*-texinfo-*-

@macro BeOS{}
@sc{b}e@sc{os}
@end macro

@node BeOS, MS-DOS, OS2, Platform Instructions
@subsection @sc{b}e@sc{os}
@cindex @sc{b}e@sc{os}

@emph{Written by Eric Sunshine, @email{sunshine@@sunshineco.com}.  Copyright
@copyright{} 1999, 2000, 2001 by Eric Sunshine.  Last updated
19 February 2000.}

CrystalSpace is a full-featured 3D graphics engine.  The original @BeOS{}
port was created by Xavier Pianet (@email{xavier@@planet.dk}).  David Huen
(@email{david@@huen.freeserve.co.uk}) performed a small amount of maintenance
after Xavier abandoned the project.  Most recently, Eric Sunshine
(@email{sunshine@@sunshineco.com}) re-engineered the port almost completely
from scratch in order to ensure that all programs compile cleanly and run
properly straight out of the box.  He also heavily updated the accompanying
documentation.

This section contains configuration, compilation, and installation
instructions.  A list of @BeOS{}-specific bugs and future plans is also
presented.  @xref{BeOS Notes}.

It is assumed that you will have obtained a full set of sources at this stage.
Full sources include the Crystal Space sources as well as those for the
supporting library, @samp{libjpeg}.  After downloading and unpacking the
@sc{jpeg} library into @file{CS/libs/libjpeg}, you can build it by following
these simple instructions:

@example
cd CS/libs/libjpeg
sh ./configure
make libjpeg.a
@end example

Other required libraries, @samp{zlib} and @samp{libpng} are already present in
@BeOS{} 4.5, so there is no need to install them manually.

@menu
* BeOS Building:: Building
* BeOS Running:: Running the Applications
* BeOS Notes:: Final Notes
@end menu

@node BeOS Building, BeOS Running, BeOS, BeOS
@subsubsection Building

You set up the compilation environment by changing to the @file{CS/} directory
on the command-line and typing:

@example
cd CS
make beos
make depend # @r{Optional.}
@end example

This sets up everything you should need to compile the system.  After this,
the simplest way to build the project is to type:

@example
make -k all
@end example

If you prefer more control over the build process, then you can compile the
various modules separately or in batches.  To compile all the basic drivers
and plug-in modules, type:

@example
make -k plugins
@end example

Or for even more fine-grained control:

@example
make -k apps
make -k drivers2d
make -k drivers3d
make vfs
make csfont
@end example

The convenience makefile target @samp{walkall} builds the WalkTest application
and the plug-in modules which it most often requires.  So, for instance,
to build only WalkTest and the plug-in modules it requires, along with
the 2D graphics driver utilized by the software renderer, you could invoke
this comand:

@example
make -k be2d walkall
@end example

The graphics libraries consist of several @BeOS{}-specific 2D drivers and
platform-independent 3D renderers.  You may compile these manually if you like,
though they are normally built as part of the targets already mentioned, such
as @samp{all}, @samp{walkall}, @samp{plugins}, @samp{drivers2d}, and
@samp{drivers3d}.

@enumerate
@item
Software Renderer

@example
make be2d
make soft
@end example

@item
OpenGL

@example
make glbe2d
make gl3d
@end example
@end enumerate

@node BeOS Running, BeOS Notes, BeOS Building, BeOS
@subsubsection Running the Applications

The standard library archive, @file{standard.zip}, is included with
the Crystal Space package within the @file{CS/data} directory.  If it is
missing, however, you may download it from the Crystal Space site
(@pxref{Where to Get}) and place it in @file{CS/data} manually.  This file
contains resources which are used by several Crystal Space demonstration
programs.  Do not unpack this file; Crystal Space uses it as is.

The standard texture archive, @file{stdtex.zip}, contains textures which are
required by many of the example Crystal Space map files.  You should download
this file and place it in the @file{CS/data} directory.  As with
@file{standard.zip}, do not unpack this file.  @file{stdtex.zip} can be
downloaded from the following location:

@noindent
@uref{ftp://ftp.linuxgames.com/crystal/levels/stdtex.zip}

You will also need to have at least one @dfn{map} file in order to use the
Crystal Space demonstration program, WalkTest.  Typically map files should be
placed within the @file{CS/data} directory.  As with other Crystal Space
resources, map files are actually compressed archives which are used directly
by the engine, thus you should not unpack these archives.

The most commonly used map file is @file{flarge.zip} since it demonstrates many
of the special features of the engine rather than focusing on merely one or two
areas.  You can download @file{flarge.zip}, as well as several other example
map files from the following location:

@noindent
@uref{ftp://ftp.linuxgames.com/crystal/levels/}

To launch WalkTest you can either double-click on its icon or, from the command
line, you can type:

@example
walktest
@end example

This will run the WalkTest with the settings from the
@file{CS/data/config/walktest.cfg} file (usually using software renderer,
though you can change this).  Alternately you can choose the video driver by
specifying the @samp{--video} option on the command-line:

@example
walktest --video=software  # @r{Runs in software mode}
walktest --video=opengl    # @r{Runs in OpenGL mode}
@end example

If you are using the OpenGL renderer, then invoking @kbd{@key{ALT}-f} will
switch in and out of full screen mode.

To use a particular map file, mention it on the command line when invoking the
WalkTest application.  For example:

@example
walktest flarge
@end example

If you wish this map to be used by default whenever you launch WalkTest without
otherwise explicitly mentioning a map file, you may want to change the
@samp{WorldFile} option in WalkTest's configuration file
@file{CS/data/config/walktest.cfg}.

@example
Walktest.Settings.WorldFile=flarge
@end example

The rest of the settings are mostly self evident and can often be overridden
on the command line.

You may have to adjust the @samp{Engine.Lighting.Ambient.White} level in
@file{engine.cfg} if the maps appear too dark.  After adjusting the ambient
level, specify @samp{--relight} on the command-line to instruct Crystal Space
to recalculate the lighting information.  For example:

@example
walktest --relight flarge
@end example

Other interesting example applications which you can run are @file{blocks},
@file{metademo}, and @file{mazed}.

@node BeOS Notes, , BeOS Running, BeOS
@subsubsection Final Notes

This section lists future plans as well as problems or potential problems with
the @BeOS{} port of Crystal Space.

@itemize @bullet
@item
Now that the engine supports window resizing, the @BeOS{} 2D drivers should
also support this feature.  Also enable the ``zoom'' button on the window.

@item
Pause when not the foreground application.  Make sure that screen redraws
correctly even when paused.

@item
Add full-screen support for software mode.  Be careful about the resolution,
since Crystal Space can use any arbitrary window dimension.

@item
The various 2D graphics drivers (software, OpenGL) should all be
derived from a common class rather than being nearly identical copies of one
another.

@item
Technically, the software 2D drivers should be employing
double-buffering since a @dfn{window-exposed} event in the sub-thread which is
running the @samp{BApplication} will draw using the @samp{BBitmap} even though
the main thread, in which Crystal Space is running, may be in the process of
updating the bitmap.  This thread-@emph{unsafe} behavior could lead to visual
anomalies.

@item
Not all key combinations generate @code{KeyDown()} and @code{KeyUp()} events,
yet Crystal Space applications may want to intercept them.  For instance,
MazeD expects to responds to the keystrokes @kbd{@key{CTRL}-1},
@kbd{@key{CTRL}-2}, etc., yet these key combinations are not seen by the
system driver since @code{KeyUp()} and @code{KeyDown()} are never called in
the canvas view subclasses  To fix this, it should be possible to intercept
such keystrokes in @code{MessageReceived()} within each @samp{BView} subclass
in the 2D driver and respond directly to the @samp{B_UNMAPPED_KEY_DOWN} and
@samp{B_UNMAPPED_KEY_UP} messages.

@item
Consider using @samp{DirectWindow} rather than @samp{DirectBitmap}, where
supported, since @samp{DirectWindow} puts much less load on the @sc{cpu}.
Auto-detect if @samp{DirectWindow} is available and use it if so.  Note,
though, that David Huen says this might not be worthwhile on account of the
fact that the software renderer reads from the frame buffer, and this can be a
slow operation on some hardware.

@item
It is possible to depress the window's close button while Crystal Space is
still initializing, however the close button is ignored until the Crystal
Space event loop is activated---at which time Crystal Space processes the
window-close event.  It might be worthwhile to offer the user the option to
forcibly kill the application in this case, but at the very least the user
must be warned that doing so might corrupt data on disk (for instance, if
the engine is updating a @sc{zip} file on a @sc{vfs} volume.

@item
Ked Shayer (@email{c.shayer2@@ukonline.co.uk}) suggests using @sc{nasm} for
the assembler code.
@end itemize

@unmacro BeOS
