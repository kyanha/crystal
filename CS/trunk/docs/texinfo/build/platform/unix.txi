@c -*-texinfo-*-
@node Unix, MSVC, Platform Instructions, Platform Instructions
@subsection Unix
@cindex Unix

This section covers all of the Unix-style platforms supported by Crystal Space,
including Linux, FreeBSD, NetBSD, Solaris, etc.

Crystal Space's X11 canvas optionally supports the @sc{mit} Shared Memory
Extension (@sc{mit-shm}).  This makes Crystal Space run much faster if your
server supports it.  The Crystal Space configuration script will detect this
extension automatically and use it if present.

A note of caution: Take care when obtaining the Crystal Space source code to
ensure that the line-terminators are in Unix format (a single linefeed should
terminate each line).  This is an especially important consideration when
transporting the code from Windows to Unix.  Although many Unix tools deal
gracefully with Windows line-terminators (a carriage-return follwed by a
linefeed), not all tools do so, and may emit apparently inexplicable error
messages when encountering files with Windows line-terminators.  The official
distributions of Crystal Space, including the stable releases and the @sc{cvs}
snapshots, are packaged with Unix line-terminators, which are acceptable on all
supported platforms.  These virgin packages themselves can be transported
between Windows and Unix safely

@subsubheading Compiling on Unix

The makefiles require @sc{gnu} make, which is typically named @file{make} on
most systems. If this is not the case then substitute @file{gmake},
@file{gnumake} or whatever @sc{gnu} make is called on your system. It is
@emph{not} possible to build Crystal Space using any other make program. If you
do not have a suitable make program, then you can instead build the project
with Jam, which is available from:

@noindent
@uref{ftp://ftp.perforce.com/jam}

You first need to configure the project for your platform.  You do this
by running the configuration script.  For example, from within the @file{CS}
directory:

@example
./configure
@end example

If you wish to build with debugging information enabled, use this command,
instead:

@example
./configure --enable-debug
@end example

For a list of useful configuration options, invoke:

@example
./configure --help=short
@end example

You can optionally invoke the @samp{depend} make target to ensure that all
build-time dependencies are correct.  This is only important if you intend to
make changes to the Crystal Space sources and want to be sure that all files
will be recompiled that are in need of recompilation.  You can, however, can
safely omit this step if desired.

@example
make depend
@end example

Now, you can actually build the entire project:

@example
make -k all
@end example

The build process will create an executable for each demonstration program or
tool, and a dynamic-load-library for each plugin modules (with extension
@file{*.so} on Linux and most Unix platforms).  Plugin modules include 3D
renderers, 2D canvases, 3D engine, isometric engine, etc.

You can now run the executable @file{walktest}.

@subsubheading Renderer Selection

The OpenGL renderer is used by default when you run Crystal Space programs.  To
select a different renderruer, such as the software renderer, you can edit your
local configuration file @file{$HOME/.crystal/Global.cfg}.  Add the following
line to select the software renderer for all applications:

@example
System.Plugins.iGraphics3D = crystalspace.graphics3d.software
@end example

The software renderer can run with the X11 or SVGAlib drivers.  If the
@samp{DISPLAY} environment variable is defined it will choose the X11 driver,
otherwise it will try the @samp{SVGAlib} driver, if SVGAlib is available on
your platform.

Alternately, you can choose the software renderer from the command-line:

@example
./walktest -video=software
@end example

Finally, if you want to utilize Crystal Space as a software development kit
(@sc{sdk}), you can install it and then clean up the detritus of the build
process:

@example
make install
make distclean
@end example
