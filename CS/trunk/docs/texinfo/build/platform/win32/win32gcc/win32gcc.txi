@c -*-texinfo-*-
@node MinGW, Cygwin, MSVC, Platform Instructions
@subsection Windows using MinGW

@noindent
@emph{Written by Eric Sunshine, @email{sunshine@@sunshineco.com}.  Originally
written by Philip Wyett, @email{philipwyett@@dsl.pipex.com}.  Last updated 6
January 2003.}

These instructions are for building Crystal Space with MinGW, the
@emph{Minimalist @sc{gnu} compiler for Windows}.

@noindent
@uref{http://www.mingw.org/}

@subsubheading Necessary Resources

Download the following packages:

@itemize @bullet
@item
The most recent version of the MinGW compiler and related tools.  This package
is typically named @file{MinGW-2.?.?-?.exe}, where the question marks stand for
the actual version number.

@noindent
@uref{http://www.mingw.org/}

@item
The most recent version of @sc{msys}.  This is an adjunct package for MinGW
which provides additional useful utilities as well as a convenient shell
environment.  @sc{msys} provides a more reliable and robust environment for the
configuration and build phases of Crystal Space.  It is available from the
MinGW web site.  This package is typically named @file{MSYS-1.?.?.exe}, where
the question marks stand for the actual version number.

@noindent
@uref{http://www.mingw.org/}

@item
The most recent Crystal Space MinGW support package.  This package provides a
minimal set of additional resources needed to build Crystal Space, such as
zlib, libpng, libjpeg, @sc{ode} @sc{sdk}, Python @sc{sdk}, @sc{nasm}, the
Netwide Assembler, etc.  This package has the name
@file{csmingwlibs_?.??r?.exe}, where the question marks stand for the actual
version number.  You should download the one with the highest version number.

@noindent
@uref{ftp://ftp.sunsite.dk/projects/crystal/support/mingw32/}
@end itemize

@subsubheading Installation

Follow these instructions to install the packages which you downloaded.
Be sure to install them in the order shown.

@itemize @bullet
@item
Install the MinGW compiler.  The is a self-extracting executable.  The
following instructions assume you will install the MinGW package at
@file{C:\mingw32}, though you are free to install it wherever you like.

@item
Install @sc{msys}.  This is a self-extracting executable.  During the
installation, you will be asked for the location of the MinGW installation.
This allows @sc{msys} to correctly locate the MinGW tools later on when
building Crystal Space.  Be sure to enter the correct path (@file{C:\mingw32},
in our example) when prompted.

@item
Install the @file{csmingwlibs} package.  This is a self-extracting executable.
During the installation, the @sc{msys} shell startup file will be augmented
with the addition of several environment variables which are consulted when
building Crystal Space.  If you are interested, see the @file{README} file in
the @file{csmingwlibs} directory after installation for all the gory details.
@end itemize

@subsubheading Building Crystal Space

You must configure and build Crystal Space from within the @sc{msys} shell
environment.  To launch this environment, click on the @sc{msys} icon which the
installation procedure placed upon your desktop, or choose the @sc{msys} item
from the @emph{Programs} menu.  This will launch a Unix-like shell window into
which you type commands.

From this shell, go to your @file{CS} directory with the @samp{cd} command.
For example, if Crystal Space resides at @file{C:\work\CS}, invoke the command
@samp{cd /c/work/CS}.  Next, build the project with the following sequence of
commands:

@example
./configure
make depend
make -k all
@end example

Note that the @samp{depend} target is optional and can be omitted if you do not
plan to make any changes to the Crystal Space source or header files.

The @samp{-k} option used in @samp{make -k all} instructs the @file{make}
utility to ignore errors and continue building the project.  This may be
necessary in cases where some Crystal Space modules require resources not
installed on your computer and not included with @file{csmingwlibs}.  It may
also be necessary if you are using the bleeding-edge version of Crystal Space
from the @sc{cvs} repository, and some module fails to build correctly.

If you prefer to build a @dfn{debug} version of Crystal Space, substitute
the following commands for those shown above:

@example
./configure --enable-debug
make depend
make -k all
@end example

@subsubheading Additional Build Options

Sometimes it is a good idea to remove all of the built programs and executable
files and start from scratch.  You can do this with the following commands:

@example
make clean
make -k all
@end example

Once in a while it is even a good idea to completely clean and re-configure the
project.  This may be required if you are using the bleeding-edge version of
Crystal Space from the @sc{cvs} repository after some radical change.

@example
make distclean
./configure
make depend
make -k all
@end example

@subsubheading Troubleshooting

If you successfully compiled Crystal Space, yet find that you can not run the
applications from the @file{CS\} root directory, a possible cause might be that
the pathname leading up to the @file{CS\} directory might have embedded
whitespace.  For instance, if you installed the project in @file{C:\my
stuff\CS}, try renaming the path to @file{C:\my_stuff\CS} or
@file{C:\mystuff\CS}.

@subheading Blasting the Past

If you were previously using the older, deprecated @file{cs_mingw_0.??.exe}
package which contained the entire MinGW distribution along with other
unrelated tools and resources, it is highly recommend that you first remove
that package, as well as any residual files and resources before installing the
newer MinGW, @sc{msys}, and @file{csmingwlibs} packages.  For best results, it
would probably be wise to remove the entire old @file{MinGW} directory (though
you may want to make a backup copy of it just in case) and clean your
environment variables of any references to the old resource directories.
