@c -*-texinfo-*-
@node NeXT
@subsection NeXT
@cindex NeXT
@cindex NextStep
@cindex OpenStep
@cindex MacOS/X Server

This document contains installation and usage instructions for
MacOS/X Server, OpenStep 4.2 and NextStep 3.3.

Crystal Space was ported to MacOS/X Server, OpenStep, and NextStep by Eric
Sunshine in February of 1999.  If you have questions or comments about this
port, please contact me at: Eric Sunshine (@email{sunshine@@sunshineco.com}).

@node NeXT Binary-only version
@subsubsection NeXT Binary-only version

These paragraphs only apply if you got the binary-only version for MacOS/X,
NextStep or OpenStep. If you got the sources, @ref{NeXT GNU make}.

The programs contained in this archive are multi-architecture binaries (MAB).
They may be used on any hardware architecture supported by the target
platform, as summarized below.

@example
Platform        Architectures           Tested
--------        -------------           ------
MacOS/X Server  i386 ppc                i386 ppc
OpenStep        i386 m68k sparc         i386 m68k
NextStep        i386 m68k sparc hppa    i386 m68k sparc
@end example

For details about the example programs, @xref{Applications}.

You should download one or more level files in order to run Crystal Space.
These are the files which contain the maps and rooms which you explore with
WalkTest and edit with MazeD.  See the accompanying @file{README} document
for information about obtaining level files.

Assuming that the level file large.zip is in the same directory as WalkTest,
you can explore the it by typing this command:

@example
% ./walktest large
@end example

The very first time you explore a level with WalkTest after downloading it
from the Internet, you should run WalkTest with the @code{-recalc} option.
This causes Crystal Space to recalculate some of the lighting information
which is store in the level file.  For instance:

@example
% ./walktest -recalc large
@end example

Recalculating the lighting information may be a time consuming process,
particularly for sizable levels such as large.zip, so please be patient.  At
other times, Crystal Space may determine, on its own, that it needs to
recalculate the lighting information.  This is a normal occurrence and should
not cause alarm.

MetaBalls, MazeD, and Blocks can be run with the following commands:

@example
% ./metademo
% ./mazed
% ./blocks
@end example

@node NeXT GNU make
@subsubsection GNU make

Building Crystal Space requires GNU's @file{make} utility.  NextStep does not
ship with GNU make, so it must be downloaded and installed before this
project can be built.  MacOS/X Server and OpenStep both ship with GNU make
already installed. On these platforms, it is named @file{gnumake}. MacOS/X
Server and OpenStep users may skip to the next section.

NextStep users can find pre-built binaries of GNU make at these locations:

@itemize @bullet
@item
@uref{ftp://ftp.next.peak.org/pub/next/apps/devtools/make.3.76.1.NIHS.bs.tar.gz}

@item
@uref{ftp://ftp.next.peak.org/pub/next/apps/devtools/gnumake.3.74.b.NIHS.tar.gz}
@end itemize

The source code for the latest version of GNU make can be downloaded from one
of the standard GNU mirror sites:

@itemize @bullet
@item
@uref{http://wuarchive.wustl.edu/systems/gnu/make-3.77.tar.gz}

@item
@uref{ftp://ftp.uu.net/systems/gnu/make-3.77.tar.gz}
@end itemize

The current version of GNU make (3.77 at the time of this writing), does not
correctly perform filename wildcard expansion, out of the box.  Fortunately,
this problem can be easily corrected.  Build the program by following these
instructions:

@enumerate a
@item
Unpack the source :
@example
% gnutar xfz make-3.77.tar.gz
@end example

@item
Run the configuration script :
@example
% cd make-3.77
% ./configure
@end example

@item
Edit the files @file{dir.c} and @file{glob/glob.c}, and in each file
find the line which reads:
@example
# define NAMLEN(dirent) (dirent)->d_namlen
@end example
Replace this line with:
@example
# define NAMLEN(dirent) strlen((dirent)->d_name)
@end example

@item
Build the project :
@example
% make install
@end example
@end enumerate

In order to be consistent with the MacOS/X Server and OpenStep installations,
you should probably rename the installed executable to @file{gnumake} rather
than the default name, @file{make}.  The remaining instructions in this
document assume that it is installed as @file{gnumake}.

@node NeXT Packages
@subsubsection Packages

Once you have obtained the latest Crystal Space source code package and its
supporting libraries, unpack them into a convenient directory.  See the
document @file{dir.txt} for a description of the directory hierarchy which is
created when you unpack the archive.

@example
% gnutar xfz <CS-package-name>.tgz
@end example

The JPEG, PNG, and ZLIB libraries must be installed within the @file{CS/libs}
directory of Crystal Space.  If you obtained the archives for these libraries
at the same site from which you obtained the Crystal Space source code
package then they will automatically unpack into the correct directory. If
you obtained the packages elsewhere, then you must manually ensure that they
are placed within @file{CS/libs}.

@example
% gnutar xfz libjpeg*.tgz
% gnutar xfz libpng*.tgz
% gnutar xfz zlib*.tgz
@end example

If the file @file{standard.zip} was not included with the Crystal Space
package, download it and place it within the top-level CS directory. This
file contains resources which are used by the Crystal Space demonstration
programs. Do not unzip this file.  Crystal Space uses it as is.

@example
% cp standard.zip CS/standard.zip
@end example

You must have at least one level file in order to use the Crystal
Space demonstration program, WalkTest. Typically level files should be
placed in the @file{CS/data} directory.  For example:

@example
% mv large.zip CS/data/large.zip
@end example

@node NeXT Architectures
@subsubsection Architectures

This project may be built for any of the architectures which are supported by
the standard developer tools, as summarized below.

@example
Platform        Architectures           Tested
--------        -------------           ------
MacOS/X Server  i386 ppc                i386 ppc
OpenStep        i386 m68k sparc         i386 m68k
NextStep        i386 m68k sparc hppa    i386 m68k sparc
@end example

Crystal Space and the supporting components may be built as
multi-architecture binaries (MAB), thus allowing a single executable file to
be used on multiple architectures.

When building Crystal Space and its components, multi-architecture binaries
are generated by specifying the standard Apple/NeXT makefile variable
@samp{TARGET_ARCHS} on the command-line.

By using @samp{TARGET_ARCHS}, the desired architectures may be specified
during initial configure the build system. In this case, the chosen
architectures are remembered and automatically applied to all subsequent
build operations, unless manually overridden. If you do not specify
@samp{TARGET_ARCHS} at configuration time, then the project will be compiled
for the hardware on which it is being built.

You can manually override the configured choice of architectures by
specifying @samp{TARGET_ARCHS} on the command line at build time. For
instance, to build the @file{walktest} demonstration program as a MAB
executable for Intel, Motorola, and Sparc, one would type:

@example
gnumake TARGET_ARCHS="i386 m68k sparc" walk
@end example

When building the supporting libraries, multi-architecture binaries are
generated by specifying an alternate definition for CC on the command-line.
For instance, to build the JPEG library for Intel, Motorola, and Sparc one
would type:

@example
make libjpeg.a CC="cc -arch i386 -arch m68k -arch sparc"
@end example

If CC is not specified then the library is compiled for the hardware on which
it is being built.

@node NeXT Supporting Libs
@subsubsection Supporting Libraries

Before building Crystal Space, it is necessary to build the supporting
libraries, zlib, libpng, and libjpeg.  Crystal Space makes uses of these
libraries, even though they are not part of the project itself.

These instructions assume that you wish to build multi-architecture
libraries. Adjust the @code{CC="..."} directive to reflect the architectures
you wish to include in the generated libraries.  If you do not care about
this feature, then omit the @code{CC="..."} directive altogether.

@example
% cd CS/libs/zlib
% sh ./configure
% make libz.a CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"

% cd ../libpng
% make -f makefile.std libpng.a \
  CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"

% cd ../libjpeg
% sh ./configure
% make libjpeg.a CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"
@end example

@node NeXT Building
@subsubsection Building

The Crystal Space project consists of a number of components and example
programs.  The following commands are all issued from within the top level
Crystal Space source code directory named CS.

To begin building Crystal Space, first configure the makefiles for the
appropriate platform by typing the correct build command as indicated below.

@example
Platform        Build Command
--------        -------------
MacOS/X Server  gnumake macosxs
OpenStep        gnumake openstep
NextStep        gnumake nextstep
@end example

If you want to build multi-architecture binaries of Crystal Space then you
can specify @samp{TARGET_ARCHS} on the configuration command line. Your
choice of architectures will be remembered and automatically applied to
subsequent build operations.  For instance, if you want to build Crystal
Space executables for Intel, Motorola, and Sparc on an OpenStep 4.2 system,
you would type:

@example
% gnumake openstep TARGET_ARCHS="i386 m68k sparc"
@end example

Once the makefiles have been configured for the appropriate platform, you can
begin building the Crystal Space demonstration programs.  Alternately, if you
are interested in building only certain components of the system, such as
drivers or libraries, then can do that instead.

To see a list of all targets which can be built, type:

@example
% gnumake help
@end example

The prominent Crystal Space demonstration programs are WalkTest, MetaBalls,
MazeD, and Blocks.  Other applications are also available and are listed in
the output generated by the help target as mentioned above.

WalkTest is a 3D first-person exploration program.  With it the user can view
and explore Crystal Space levels or maps.  MetaBalls demonstrates Crystal
Space's facilities for curved surfaces and dynamic animation.  MazeD is the
Crystal Space level or map editor.  Blocks is a 3D-Tetris style game.  To
build these programs type:

@example
% gnumake walk  # Builds walktest, the level exploration program
% gnumake meta  # Builds metademo, the MetaBalls demonstration
% gnumake mzed  # Builds mazed, the Crystal Space level editor
% gnumake blks  # Builds blocks, the 3D-Tetris style game
@end example

@node NeXT using CS
@subsubsection Using Crystal Space

Ensure that the file @file{standard.zip} is in the top-level CS directory.
This file contains standard resources which are used by the example programs.

You need to have one or more level or map files in order to run WalkTest.
These are the files which contain the maps and rooms which you can explore
with WalkTest, and edit with MazeD.

Before running the demonstration programs for the first time, you should
locate the file @file{cryst.cfg} in the top-level CS directory. This file
contains parameters which control Crystal Space's environment.

By default, the overall ambient light level specified in @file{cryst.cfg} is
generally too dark for MacOS/X Server, OpenStep, and NextStep. To correct
this problem, edit @file{cryst.cfg} and change the line which reads
@samp{AMBIENT_WHITE=}. Set the value of AMBIENT_WHITE to a level more
suitable for the target platform, as summarized below:

@example
Platform        Setting
--------        -------
MacOS/X Server  AMBIENT_WHITE=60
OpenStep        AMBIENT_WHITE=40
NextStep        AMBIENT_WHITE=40
@end example

The first time you explore a level after changing the @samp{AMBIENT_WHITE}
value, you should run WalkTest with the @code{-recalc} option. This causes
Crystal Space to recalculate some of the lighting information in the map.
However, this process may be time consuming, particularly for sizable levels
such as @file{large.zip}, so be patient.  At other times Crystal Space may
determine, on its own, that it needs to recalculate the lighting information.
This is a normal occurrence and should not cause alarm.

To run WalkTest on a level for the very first time, for example, type:

@example
% ./walktest -recalc large
@end example

Subsequent uses of the level file do not require @code{-recalc}, so you may
type:

@example
% ./walktest large
@end example

Using this command, you will be able to explore the level file
@file{large.zip}. To explore a different level, substitute its name in place
of @file{large.zip}.

MetaBalls, MazeD, and Blocks can be run with the following commands:

@example
% ./metademo
% ./mazed
% ./blocks
@end example
