@c -*-texinfo-*-

@c Unforunately, TeX does not grok this macro in @cindex or @section, etc. :-(
@macro NeXT{}
@sc{n}e@sc{xt}
@end macro

@node NeXT, OS2, Win32, Platform Instructions
@subsection MacOS/X Server, OpenStep, NextStep
@cindex @sc{n}e@sc{xt}
@cindex MacOS/X Server
@cindex OpenStep
@cindex NextStep

@emph{Written by Eric Sunshine, @email{sunshine@@sunshineco.com}.  Copyright
@copyright{} 1999, 2000 by Eric Sunshine.  Last updated 14 April 2000.}

This section contains configuration, compilation, installation, and usage
instructions for the MacOS/X Server, OpenStep 4.2 and NextStep 3.3 ports of
Crystal Space.  Comprehensive and detailed implementation information is also
available, @ref{NeXT Details}, as well as a list of known bugs and future
plans, @ref{NeXT Notes}.

Crystal Space was ported to MacOS/X Server, OpenStep, and NextStep by Eric
Sunshine in February of 1999.  If you have questions or comments about this
port, please contact Eric Sunshine at @email{sunshine@@sunshineco.com}.

If you have downloaded a binary-only package of Crystal Space for MacOS/X
Server, OpenStep, or NextStep, you may want to skip over the following
sections explaining how to build Crystal Space, and jump directly to the
section explaining how to run the applications, @ref{NeXT Running Programs}.

If you are building Crystal Space from source code, you may want to briefly
scan the section for compiling on generic Unix systems (@pxref{Unix}), though
it is not strictly necessary, as only a small fraction of that information is
applicable to the MacOS/X Server, OpenStep, and NextStep ports.

In addition to obtaining the project source code (@pxref{Where to Get}), you
will also need to download and compile several support libraries used for
compression and image manipulation (@pxref{External Libraries}).  These
libraries, @samp{zlib}, @samp{libpng}, and @samp{libjpeg}, are present on most
current Unix platforms, but are absent from MacOS/X Server, OpenStep, and
NextStep.

Finally, if you are building Crystal Space on NextStep, you will need to
download and install the @sc{gnu} @samp{make} program since Crystal Space
makes heavy use of its rich feature set.  @xref{NeXT GNU make}.

@menu
* NeXT GNU make:: @sc{gnu} make
* NeXT Packages:: Packages
* NeXT Architectures:: Architectures
* NeXT Libraries:: Supporting Libraries
* NeXT Building:: Building
* NeXT Running Programs:: Using Crystal Space
@end menu

@node NeXT GNU make, NeXT Packages, NeXT, NeXT
@subsubsection @sc{gnu} make

Building Crystal Space requires @sc{gnu}'s @samp{make} utility.  NextStep does
not ship with @sc{gnu} @samp{make}, so it must be downloaded and installed
before this project can be built.  MacOS/X Server and OpenStep both ship with
@sc{gnu} @samp{make} already installed.  On these platforms, it is named
@samp{gnumake}.  MacOS/X Server and OpenStep users may ignore this section and
safely skip to the next one.

NextStep users can find pre-built binaries of @sc{gnu} @samp{make} at these
locations:

@noindent
@uref{ftp://ftp.next.peak.org/pub/next/apps/devtools/make.3.76.1.NIHS.bs.tar.gz}@*
@uref{ftp://ftp.next.peak.org/pub/next/apps/devtools/gnumake.3.74.b.NIHS.tar.gz}

The source code for the latest version of @sc{gnu} @samp{make} can be
downloaded from one of the standard @sc{gnu} mirror sites; a couple of which
are listed here:

@noindent
@uref{http://wuarchive.wustl.edu/systems/gnu/make-3.77.tar.gz}@*
@uref{ftp://ftp.uu.net/systems/gnu/make-3.77.tar.gz}

The current version of @sc{gnu} @samp{make} (3.77 at the time of this
writing), does not correctly perform filename wildcard expansion
out-of-the-box when used with NextStep 3.3.  Fortunately, this problem can be
easily corrected.  Build the program by following these instructions:

@enumerate a
@item
Unpack the source:

@example
% gnutar xfz make-3.77.tar.gz
@end example

@item
Run the configuration script:

@example
% cd make-3.77
% ./configure
@end example

@item
Edit the files @file{dir.c} and @file{glob/glob.c}, and in each file find the
line which reads:

@example
# define NAMLEN(dirent) (dirent)->d_namlen
@end example

Replace this line with:

@example
# define NAMLEN(dirent) strlen((dirent)->d_name)
@end example

@item
Build the project:

@example
% make install
@end example
@end enumerate

In order to be consistent with the MacOS/X Server and OpenStep installations,
it would probably be best to rename the installed executable to @samp{gnumake}
rather than the default name, @samp{make}.  The remaining instructions in this
document assume that the utility is installed with the name @samp{gnumake}.

@node NeXT Packages, NeXT Architectures, NeXT GNU make, NeXT
@subsubsection Packages

Once you have obtained the latest Crystal Space source code package
(@pxref{Where to Get}) and its supporting libraries (@pxref{External
Libraries}), unpack them into a convenient directory as shown below.  A
description of the directory hierarchy which is created when you unpack the
source code archive is available, @ref{Directory Hierarchy}.

@example
% gnutar xfz @var{CS-package-name}.tgz
@end example

The @sc{jpeg}, @sc{png}, and @sc{zlib} libraries must be installed within the
@file{CS/libs} directory of Crystal Space.  If you obtained the archives for
these libraries at the same site from which you obtained the Crystal Space
source code package then they will automatically unpack into the correct
directory.  If you obtained the packages elsewhere, then you must manually
ensure that they are placed end up within @file{CS/libs/libjpeg},
@file{CS/libs/libpng}, and @file{CS/libs/zlib}, respectively.

@example
% gnutar xfz libjpeg*.tgz
% gnutar xfz libpng*.tgz
% gnutar xfz zlib*.tgz
@end example

Typically, the standard library archive @file{standard.zip} is included with
the Crystal Space package within the @file{CS/data} directory.  If it is
missing, however, you may downloaded it from the Crystal Space site
(@pxref{Where to Get}) and place it in @file{CS/data} manually.  This file
contains resources which are used by several Crystal Space demonstration
programs.  Do not unpack this file; Crystal Space uses it as is.

You must have at least one @dfn{map} file in order to use the Crystal Space
demonstration program, WalkTest.  Typically map files should be placed within
the @file{CS/data} directory.  For example, if you downloaded
@file{large.zip}:

@example
% mv large.zip CS/data/large.zip
@end example

@node NeXT Architectures, NeXT Libraries, NeXT Packages, NeXT
@subsubsection Architectures

This project may be built for any of the architectures which are supported by
the standard developer tools, as summarized below.

@quotation
@multitable @columnfractions .20 .30 .30
@item @emph{Platform} @tab @emph{Architectures} @tab @emph{Tested}
@item MacOS/X Server @tab @code{i386 ppc} @tab @code{i386 ppc}
@item OpenStep @tab @code{i386 m68k sparc} @tab @code{i386 m68k}
@item NextStep @tab @code{i386 m68k sparc hppa} @tab @code{i386 m68k sparc}
@end multitable
@end quotation

Crystal Space and the supporting components may be built as multi-architecture
binaries (@sc{mab}), thus allowing a single executable file to be used on
multiple architectures.

When building Crystal Space and its components, multi-architecture binaries
are generated by specifying the standard Apple/@NeXT{} makefile variable
@samp{TARGET_ARCHS} on the command-line.

By using @samp{TARGET_ARCHS}, the desired architectures may be specified
during initial configuration of the build system.  The chosen architectures
are remembered and automatically applied to all subsequent build operations,
unless manually overridden.  If you do not specify @samp{TARGET_ARCHS} at
configuration time, then the project will be compiled for the hardware on
which it is being built.

You can manually override the configured choice of architectures by specifying
@samp{TARGET_ARCHS} on the command line at build time.  For instance, to build
the @file{walktest} demonstration program as a @sc{mab} executable for Intel,
Motorola, and Sparc, one would type:

@example
gnumake TARGET_ARCHS="i386 m68k sparc" walk
@end example

When building the supporting libraries (which do not understand
Apple/@NeXT{}'s @samp{TARGET_ARCHS} makefile variable), multi-architecture
binaries are generated by specifying an alternate definition for @samp{CC} on
the command-line.  For instance, to build the @sc{jpeg} library for Intel,
Motorola, and Sparc one would type:

@example
make libjpeg.a CC="cc -arch i386 -arch m68k -arch sparc"
@end example

If @sc{cc} is not specified then the library is compiled for the hardware on
which it is being built.

@node NeXT Libraries, NeXT Building, NeXT Architectures, NeXT
@subsubsection Supporting Libraries

Before building Crystal Space, it is necessary to build the supporting
libraries, @samp{zlib}, @samp{libpng}, and @samp{libjpeg}.  Crystal Space
makes uses of these libraries, even though they are not an intrinsic part of
the project itself.

These instructions assume that you wish to build multi-architecture libraries.
Adjust the @code{CC="..."} directive to reflect the architectures you wish to
include in the generated libraries.  If you do not wish to generate
multi-architecture libraries, then omit the @code{CC="..."} directive
altogether.  The list of supported architectures varies between MacOS/X
Server, OpenStep, and NextStep.  @ref{NeXT Architectures}.

@example
% cd CS/libs/zlib
% sh ./configure
% make libz.a CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"

% cd ../libpng
% make -f makefile.std libpng.a \
  CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"

% cd ../libjpeg
% sh ./configure
% make libjpeg.a CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"
@end example

@node NeXT Building, NeXT Running Programs, NeXT Libraries, NeXT
@subsubsection Building

The Crystal Space project consists of a number of components and example
programs.  The following commands are all issued from within the top level
Crystal Space source code directory named @file{CS}.

To begin building Crystal Space, first configure the makefiles for the
appropriate platform by typing the correct build command as indicated below.

@quotation
@multitable @columnfractions .20 .80
@item @emph{Platform} @tab @emph{Build Command}
@item MacOS/X Server @tab @code{gnumake macosxs}
@item OpenStep @tab @code{gnumake openstep}
@item NextStep @tab @code{gnumake nextstep}
@end multitable
@end quotation

If you want to build multi-architecture binaries of Crystal Space then you can
specify @samp{TARGET_ARCHS} on the configuration command line.  Your choice of
architectures will be remembered and automatically applied to subsequent build
operations.  The list of supported architectures varies between MacOS/X
Server, OpenStep, and NextStep.  @ref{NeXT Architectures}.

For instance, if you want to build Crystal Space executables for Intel,
Motorola, and Sparc on an OpenStep 4.2 system, you would type:

@example
% gnumake openstep TARGET_ARCHS="i386 m68k sparc"
@end example

Once the makefiles have been configured for the appropriate platform, you can
begin building the Crystal Space demonstration programs.  Alternately, if you
are interested in building only certain components of the system, such as
drivers or libraries, then can do that instead.

To see a list of all targets which can be built, type:

@example
% gnumake help
@end example

The simplest way to build the entire package, including all applications,
drivers, and plug-in modules is to invoke the makefile target @samp{all}:

@example
% gnumake all
@end example

This can be a fairly time consuming operation.  If you would like to be more
selective and only build the necessary drivers and a subset of the available
applications, you can invoke their targets individually.  For example:

@example
% gnumake drivers # @r{Builds the plug-in drivers}
% gnumake walk    # @r{Builds @code{walktest}, the level exploration program}
% gnumake meta    # @r{Builds @code{metademo}, the MetaBalls demonstration}
% gnumake mzed    # @r{Builds @code{mazed}, the Crystal Space level editor}
% gnumake blks    # @r{Builds @code{blocks}, the 3D-Tetris style game}
@end example

These commands individually build some of the more prominent Crystal Space
demonstration programs; the ones which perform the most interesting
operations.  @xref{Applications}.

@node NeXT Running Programs, , NeXT Building, NeXT
@subsubsection Using Crystal Space

Before attempting to run any of the Crystal Space sample applications, ensure
that the file @file{standard.zip} resides in @file{CS/data}.  This file
contains standard resources which are used by several of the example programs.

You need to have one or more @dfn{map} files in order to run WalkTest.  These
are the files which contain the maps and rooms which you can explore with
WalkTest and edit with MazeD, the Crystal Space map (or ``maze'') editor.

Before running the demonstration programs for the first time, you should
locate the file @file{cryst.cfg} in the top-level @file{CS} directory.  This
file contains parameters which control Crystal Space's environment.

By default, the overall ambient light level specified in @file{cryst.cfg} is
often too dark for many MacOS/X Server, OpenStep, and NextStep displays.  To
correct this problem, edit @file{cryst.cfg} and change the
@samp{AMBIENT_WHITE} setting to a more appropriate value.  Some potentially
good choices for @samp{AMBIENT_WHITE} are summarized below.  If these values
don't work well for you, experiment with others until you find one which is
suitable.

@quotation
@multitable @columnfractions .20 .80
@item @emph{Platform} @tab @emph{Setting}
@item MacOS/X Server @tab @code{AMBIENT_WHITE=60}
@item OpenStep @tab @code{AMBIENT_WHITE=40}
@item NextStep @tab @code{AMBIENT_WHITE=40}
@end multitable
@end quotation

The first time you explore a map after changing the @samp{AMBIENT_WHITE}
value, you should run WalkTest with the @samp{-recalc} option.  This causes
Crystal Space to recalculate the lighting information in the map in order to
take advantage of the new ambient light value.

Note, however, that this process may be time consuming, particularly for
sizable levels such as @file{large.zip}, so be patient.  In other cases,
Crystal Space may determine, on its own, that lighting needs to be
recalculated.  This is a normal occurrence and should not cause alarm.

You may find it useful to specify the @samp{-recalc} option with newly
downloaded maps, or at any time the lighting in a map seems incorrect in some
fashion.

To run WalkTest with a particular map (for instance, @file{large.zip}) for the
very first time, type:

@example
% ./walktest -recalc large
@end example

Subsequent uses of the map file do not require @samp{-recalc}, in which case
you can type:

@example
% ./walktest large
@end example

Once invoked, you will be able to explore the map file @file{large.zip} by
using the navigation controls (@pxref{Walktest Keyboard}).  To explore a
different map, substitute its name in place of @samp{large}.

Other interesting applications, such as MetaBalls, MazeD, and Blocks can be
run with the following commands:

@example
% ./metademo
% ./mazed
% ./blocks
@end example

@unmacro NeXT
