@c -*-texinfo-*-

@c Unforunately, TeX does not grok this macro in @cindex or @section, etc. :-(
@macro NeXT{}
@sc{n}e@sc{xt}
@end macro

@node NeXT, OS2, MinGW, Platform Instructions
@subsection MacOS/X, MacOS/X Server 1.0, OpenStep, NextStep
@cindex @sc{n}e@sc{xt}
@cindex MacOS/X
@cindex MacOS/X Server
@cindex OpenStep
@cindex NextStep

@emph{Written by Eric Sunshine, @email{sunshine@@sunshineco.com}.  Copyright
@copyright{} 1999, 2000, 2001 by Eric Sunshine.  Last updated
23 October 2001.}

Crystal Space was ported to MacOS/X Server, OpenStep, and NextStep by Eric
Sunshine in February of 1999 and has been continuously maintained and updated
ever since.  If you have questions or comments about this port, please contact
Eric Sunshine at @email{sunshine@@sunshineco.com}.

This section contains configuration, compilation, installation, and usage
instructions for the MacOS/X, MacOS/X Server 1.0 (Rhapsody), OpenStep 4.2 and
NextStep 3.3 ports of Crystal Space.  These ports are collectively known as the
Apple/@NeXT{} ports and are implemented using the @dfn{Cocoa} technology which
Apple inherited from @NeXT{} and then enhanced.

Comprehensive and detailed implementation information about the Apple/@NeXT{}
ports is also available (@pxref{NeXT Details}), as well as a list of known bugs
and future plans (@pxref{NeXT Notes}).

For Macintosh users, the information detailed in this section applies to
MacOS/X and later.

If you have downloaded a binary-only package of Crystal Space for MacOS/X,
MacOS/X Server 1.0 (Rhapsody), OpenStep, or NextStep, you may want to skip over
the following sections explaining how to build Crystal Space, and jump directly
to the section explaining how to run the applications, 
@ref{NeXT Running Programs}.

If you are building Crystal Space from source code, you may want to briefly
scan the section for compiling on generic Unix systems (@pxref{Unix}), though
it is not strictly necessary to do so since only a small fraction of that
information is applicable to the MacOS/X, MacOS/X Server 1.0 (Rhapsody)
OpenStep, and NextStep ports.

In addition to obtaining the project source code (@pxref{Where to Get}), you
will also need to download and compile several support libraries used for
compression and image manipulation (@pxref{External Libraries}).  These
libraries, @samp{zlib}, @samp{libpng}, and @samp{libjpeg}, are present on most
current Unix installations, but are absent from MacOS/X, MacOS/X Server 1.0
(Rhapsody), OpenStep, and NextStep.

@anchor{NeXT Resources}
One common site from which to download these packages is from the Crystal Space
download directory at @uref{ftp://sunsite.dk/projects/crystal/}.  These
packages are known to work with MacOS/X, MacOS/X Server 1.0 (Rhapsody),
OpenStep, and NextStep and have already been organized to fit correctly into
the Crystal Space project hierarchy.

You can download these packages using the following @sc{URLs}:

@noindent
@uref{ftp://sunsite.dk/projects/crystal/support/general/libjpeg-6a.tgz}@*
@uref{ftp://sunsite.dk/projects/crystal/support/general/libpng_1.0.tgz}@*
@uref{ftp://sunsite.dk/projects/crystal/support/general/zlib_1.1.1.tgz}

Finally, if you are building Crystal Space on NextStep, you will need to
download and install the @sc{gnu} @samp{make} program since Crystal Space
makes heavy use of its rich feature set.  @xref{NeXT GNU make}.

@menu
* NeXT GNU make:: @sc{gnu} make
* NeXT Packages:: Packages
* NeXT Architectures:: Architectures
* NeXT Libraries:: Library Prerequisites
* NeXT Building:: Building
* NeXT Running Programs:: Using Crystal Space
@end menu

@node NeXT GNU make, NeXT Packages, NeXT, NeXT
@subsubsection @sc{gnu} make

Building Crystal Space requires @sc{gnu}'s @samp{make} utility.  NextStep does
not ship with @sc{gnu} @samp{make}, so it must be downloaded and installed
before this project can be built.  MacOS/X, MacOS/X Server 1.0 (Rhapsody), and
OpenStep all ship with @sc{gnu} @samp{make} already installed.  On these
platforms, it is named @samp{gnumake}.  MacOS/X, MacOS/X Server 1.0 (Rhapsody),
and OpenStep users may ignore this section and safely skip to the next one.

NextStep users can find pre-built binaries of @sc{gnu} @samp{make} at these
locations:

@noindent
@uref{http://www.peak.org/next/apps/devtools/make.3.76.1.NIHS.bs.tar.gz}@*
@uref{http://www.peak.org/next/apps/devtools/gnumake.3.74.b.NIHS.tar.gz}

The source code for the latest version of @sc{gnu} @samp{make} can be
downloaded from one of the standard @sc{gnu} mirror sites; a couple of which
are listed here:

@noindent
@uref{http://wuarchive.wustl.edu/systems/gnu/make/make-3.79.1.tar.gz}@*
@uref{ftp://ftp.uu.net/systems/gnu/make/make-3.79.1.tar.gz}

The current version of @sc{gnu} @samp{make} (3.79.1 at the time of this
writing), does not correctly perform filename wildcard expansion
out-of-the-box when used with NextStep 3.3.  Fortunately, this problem can be
easily corrected.  Build the program by following these instructions:

@enumerate a
@item
Unpack the source:

@example
gnutar xfz make-3.79.1.tar.gz
@end example

@item
Run the configuration script:

@example
cd make-3.79.1
./configure
@end example

@item
Edit the files @file{dir.c} and @file{glob/glob.c}, and in each file find the
line which reads:

@example
# define NAMLEN(dirent) (dirent)->d_namlen
@end example

Replace this line with:

@example
# define NAMLEN(dirent) strlen((dirent)->d_name)
@end example

@item
Build the project:

@example
make install
@end example
@end enumerate

In order to be consistent with the MacOS/X, MacOS/X Server 1.0 (Rhapsody), and
OpenStep installations, it is probably best to rename the installed executable
to @samp{gnumake} rather than the default name, @samp{make}.  The remaining
instructions in this document assume that the utility is installed under the
name @samp{gnumake}.

@node NeXT Packages, NeXT Architectures, NeXT GNU make, NeXT
@subsubsection Packages

Once you have obtained the latest Crystal Space source code package
(@pxref{Where to Get}) and its supporting libraries (@pxref{NeXT Resources}),
unpack them into a convenient directory as shown below.  A description of the
directory hierarchy which is created when you unpack the source code archive is
available, @ref{Directory Hierarchy}.  A description of the files specific to
the Apple/@NeXT{} port is also available, @ref{NeXT Details}.

@example
gnutar xfz @var{CS-package-name}.tgz
@end example

The @sc{jpeg}, @sc{png}, and @sc{zlib} libraries must be installed within the
@file{CS/libs} directory of Crystal Space.  If you obtained the archives for
these libraries at the same site from which you obtained the Crystal Space
source code package then they will automatically unpack into the correct
directory.  If you obtained the packages elsewhere, then you must manually
ensure that they are placed within @file{CS/libs/libjpeg},
@file{CS/libs/libpng}, and @file{CS/libs/zlib}, respectively.

@example
gnutar xfz libjpeg*.tgz
gnutar xfz libpng*.tgz
gnutar xfz zlib*.tgz
@end example

The standard library archive, @file{standard.zip} and the standard texture
archive, @file{stdtex.zip} are included with the Crystal Space package within
the @file{CS/data} directory.  If these archives are missing from the
distribution, then you need to obtain them via some mechanism.  These files
contain resources which are used by several Crystal Space demonstration
programs.  Do not unpack these files; Crystal Space uses them as-is.

You will also need to have at least one @dfn{map} file in order to use the
Crystal Space demonstration program, WalkTest.  Typically map files should be
placed within the @file{CS/data} directory.  As with other Crystal Space
resources, map files are actually compressed archives which are used directly
by the engine, thus you should not unpack these archives.

The most commonly used map file is @file{flarge} since it demonstrates many of
the special features of the engine rather than focusing on merely one or two
areas.  This map is typically distributed as part of the Crystal Space package
and can be found in the @file{CS/data/flarge} directory.  You can download
additional example map files from the @file{levels} subdirectory at the
download site:

@noindent
@uref{ftp://sunsite.dk/projects/crystal/}

@noindent
Be sure to place the map files into the @file{CS/data} directory.

@node NeXT Architectures, NeXT Libraries, NeXT Packages, NeXT
@subsubsection Architectures

This project may be built for any of the architectures which are supported by
the standard developer tools, as summarized below.

@quotation
@multitable @columnfractions .25 .30 .30
@item @emph{Platform} @tab @emph{Architectures} @tab @emph{Tested}
@item MacOS/X @tab @code{ppc} @tab @code{ppc}
@item MacOS/X Server 1.0 @tab @code{i386 ppc} @tab @code{i386 ppc}
@item OpenStep @tab @code{i386 m68k sparc} @tab @code{i386 m68k}
@item NextStep @tab @code{i386 m68k sparc hppa} @tab @code{i386 m68k sparc}
@end multitable
@end quotation

Crystal Space and the supporting components may be built as multi-architecture
binaries (@sc{mab}), thus allowing a single executable file to be used on
multiple architectures.

When building Crystal Space and its components, multi-architecture binaries
are generated by specifying the standard Apple/@NeXT{} makefile variable
@samp{TARGET_ARCHS} on the command-line.

By using @samp{TARGET_ARCHS}, the desired architectures may be specified
during initial configuration of the build system.  The chosen architectures
are remembered and automatically applied to all subsequent build operations,
unless manually overridden.  If you do not specify @samp{TARGET_ARCHS} at
configuration time, then the project will be compiled for the hardware on
which it is being built.

You can also override the configured choice of architectures by specifying
@samp{TARGET_ARCHS} for a particular makefile target.  For instance, to build
the @file{walktest} demonstration program as a @sc{mab} executable for Intel,
Motorola, and Sparc, one would type:

@example
gnumake TARGET_ARCHS="i386 m68k sparc" walk
@end example

When building the supporting libraries (which do not understand
Apple/@NeXT{}'s @samp{TARGET_ARCHS} makefile variable), multi-architecture
binaries are generated by specifying an alternate definition for @samp{CC} on
the command-line.  For instance, to build the @sc{jpeg} library for Intel,
Motorola, and Sparc one would type:

@example
make libjpeg.a CC="cc -arch i386 -arch m68k -arch sparc"
@end example

If @samp{CC} is not specified then the library is compiled for the hardware on
which it is being built.

@node NeXT Libraries, NeXT Building, NeXT Architectures, NeXT
@subsubsection Library Prerequisites

Before building Crystal Space, it is necessary to build the supporting
libraries, @samp{zlib}, @samp{libpng}, and @samp{libjpeg}.  Crystal Space
makes uses of these libraries, even though they are not an intrinsic part of
the project itself.

These instructions assume that you wish to build multi-architecture libraries.
Adjust the @code{CC="@dots{}"} directive to reflect the architectures you wish
to include in the generated libraries.  If you do not wish to generate
multi-architecture libraries, then omit the @code{CC="@dots{}"} directive
altogether.  The list of supported architectures varies between MacOS/X,
MacOS/X Server 1.0 (Rhapsody), OpenStep, and NextStep.
@xref{NeXT Architectures}.

@example
cd CS/libs/zlib
sh ./configure
make libz.a CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"

cd ../libpng
make -f makefile.std libpng.a \
  CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"

cd ../libjpeg
sh ./configure
make libjpeg.a CC="cc -arch i386 -arch m68k -arch sparc -arch hppa"
@end example

@node NeXT Building, NeXT Running Programs, NeXT Libraries, NeXT
@subsubsection Building

The Crystal Space project consists of a number of components and example
programs.  The following commands are all issued from within the top level
Crystal Space source code directory named @file{CS}.

To begin building Crystal Space, first configure the makefiles for the
appropriate platform by typing the correct build command as indicated below.

@quotation
@multitable @columnfractions .25 .80
@item @emph{Platform} @tab @emph{Build Command}
@item MacOS/X @tab @code{gnumake macosx}
@item MacOS/X Server 1.0 @tab @code{gnumake macosxs}
@item OpenStep @tab @code{gnumake openstep}
@item NextStep @tab @code{gnumake nextstep}
@end multitable
@end quotation

If you want to build multi-architecture binaries of Crystal Space then you can
specify @samp{TARGET_ARCHS} on the configuration command line.  Your choice of
architectures will be remembered and automatically applied to subsequent build
operations.  The list of supported architectures varies between MacOS/X,
MacOS/X Server 1.0 (Rhapsody), OpenStep, and NextStep.
@xref{NeXT Architectures}.

For instance, if you want to build Crystal Space executables for Intel,
Motorola, and Sparc on an OpenStep 4.2 system, you would configure the makefile
system by invoking the following command:

@example
gnumake openstep TARGET_ARCHS="i386 m68k sparc"
@end example

Once the makefiles have been configured for the appropriate platform, you can
begin building the Crystal Space demonstration programs.  Alternately, if you
are interested in building only certain components of the system, such as
drivers or libraries, then can do that instead.

To see a list of all targets which can be built, type:

@example
gnumake help
@end example

The simplest way to build the entire package, including all applications,
drivers, and plug-in modules is to invoke the makefile target @samp{all}:

@example
gnumake -k all
@end example

This can be a fairly time consuming operation.  If you would like to be more
selective and only build the necessary plug-in modules and a subset of the
available applications, you can invoke their targets individually.

For example, to build all plug-in modules, you could invoke this command:

@example
gnumake -k plugins # @r{Builds all plug-in modules.}
@end example

Or, for example, you could build only the WalkTest application and the plug-in
modules which it most commonly requires.

@example
gnumake walkall  # @r{Builds WalkTest and required plug-ins}
@end example

For finer control over which applications are built, you can invoke their
targets directly.  For instance:

@example
gnumake walk    # @r{Builds @code{walktest}, the map exploration program}
gnumake blks    # @r{Builds @code{blocks}, the 3D-Tetris style game}
gnumake next2d  # @r{Builds @code{next2d}, the Cocoa-based 2D driver}
@end example

All programs require at least some plug-in modules to be present, so be sure to
build those as well by invoking the @samp{plugins} makefile target as
illustrated above if you have not already invoked the @samp{all} target.

@node NeXT Running Programs, , NeXT Building, NeXT
@subsubsection Using Crystal Space

Before attempting to run any of the Crystal Space sample applications, ensure
that the files @file{standard.zip} and @file{stdtex.zip} reside in
@file{CS/data}.  These files contain resources and textures which are used by
several of the example programs and map files.

You need to have one or more @dfn{map} files in order to run WalkTest.  These
are the files which contain the maps and rooms which you can explore with
WalkTest.  The most commonly used example map file is @file{flarge}.

@strong{Note}: It is not currently possible to launch the Crystal Space
demonstration applications by double-clicking on them via the Finder on
MacOS/X, the Viewer in MacOS/X Server 1.0, or from the the Workspace Manager's
File Viewer on OpenStep and NextStep.  This problem is a result of a limitation
of the Finder, Viewer, and Workspace Manager applications.  When the Crystal
Space demonstration applications are launched, they expect to find the
configuration files @file{scf.cfg} and @file{vfs.cfg} in the @dfn{current
directory}---which is generally the same directory in which the Crystal Space
applications reside.  Unfortunately, neither Finder, Viewer, nor Workspace
Manager provide the necessary information for Crystal Space to locate these
administrative files.  This problem will be corrected in the future once a
suitable work-around has been devised.  @emph{Therefore, at this time, all
Crystal Space applications @strong{must} be launched from the command-line.}

Before running the demonstration programs for the first time, you should create
a file named @file{user.cfg} in the @file{CS/data/config} directory.  You can
use this file to increase the ambient light level used for map files since the
default level is typically too dim on the Apple/@NeXT{} displays.  To correct
this problem, edit @file{user.cfg} and add a line to it similar to the
following:

@example
Glboal.Engine.Lighting.Ambient.White = 70
@end example

Some potentially good choices for this setting are summarized below.  If these
values do not work well for you, experiment with others until you find one
which is suitable.

@quotation
@multitable @columnfractions .25 .80
@item @emph{Platform} @tab @emph{Setting}
@item MacOS/X @tab @code{Glboal.Engine.Lighting.Ambient.White=70}
@item MacOS/X Server 1.0 @tab @code{Glboal.Engine.Lighting.Ambient.White=70}
@item OpenStep @tab @code{Glboal.Engine.Lighting.Ambient.White=50}
@item NextStep @tab @code{Glboal.Engine.Lighting.Ambient.White=50}
@end multitable
@end quotation

@strong{Important}: The first time you explore a map after changing the ambient
white value, you should run WalkTest with the @samp{--relight} option.  This
causes Crystal Space to recalculate the lighting information in the map in
order to take advantage of the new ambient light value.

Note, however, that this process may be time consuming, particularly for
certain sizable maps, so be patient.  In other cases, Crystal Space may
determine, on its own, that lighting needs to be recalculated.  This is a
normal occurrence and should not cause alarm.

As a general rule, you may find it useful to specify the @samp{--relight}
option with newly downloaded maps, or at any other time that the lighting in a
map seems to be somehow incorrect.

To run WalkTest with a particular map (for instance, @file{flarge}) for the
very first time, type:

@example
walktest --relight flarge
@end example

Subsequent uses of the map file do not require @samp{-relight}, in which case
you can type:

@example
walktest flarge
@end example

Once invoked, you will be able to explore the map file (@file{flarge}) by using
the navigation controls (@pxref{Walktest Keyboard}).  To explore a different
map, substitute its name in place of @samp{flarge}.

Other interesting applications, such as Blocks or csDemo, can be run by typing
the application's name at the command line:

@example
blocks
csdemo
@end example

Finally, it is possible to use the Apple/@NeXT{} defaults system to inform
Crystal Space applications about the location of the Crystal Space resources.
The @samp{CrystalSpaceRoot} setting can be configured with an absolute path
which points at the root of the Crystal Space resource hierarchy within the
filesystem.  It is most useful to configure this setting in the @emph{global}
defaults domain.  For example, on MacOS/X, MacOS/X Server 1.0 (Rhapsody), or
OpenStep, you could invoke this command from the command-line:

@example
defaults write NSGlobalDomain CrystalSpaceRoot "/usr/local/CS"
@end example

On NextStep, you would invoke this command:

@example
dwrite Global CrystalSpaceRoot "/usr/local/CS"
@end example

It is also possible to instruct Crystal Space applications to ignore the value
of @samp{CrystalSpaceRoot} by assigning the @samp{CrystalSpaceRootIgnore}
option a value of @samp{Yes}.  This is most useful when you would like to have
a particular application ignore the value of @samp{CrystalSpaceRoot} set in the
global domain.  For example:

@example
defaults write walktest CrystalSpaceRootIgnore "Yes"
@end example

@unmacro NeXT
