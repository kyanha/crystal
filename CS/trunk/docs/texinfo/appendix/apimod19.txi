@c -*-texinfo-*-
@node API Modifications 19, API Modifications 18, API Modifications, API Modifications
@appendixsec @sc{api} Changes from 0.18 to 0.19
@cindex @sc{api} Changes

This section documents the major changes between versions 0.18 and 0.19 of of
Crystal Space.

@subheading Image Loading
@cindex @code{csImageLoader}
@cindex @code{iImageIO}

@samp{csImageLoader} is gone and has now become a plugin which implements
the @code{iImageIO} interface. To use it you typically use the following
code:

@example
#include "igraphic/imageio.h"
@dots{}
iDataBuffer* buf = @dots{};
iImageIO* imgldr = QUERY_PlUGIN (System, iImageIO);
imgldr->Load (buf->GetUint8 (), buf->GetSize (),
txtmgr->GetTextureFormat ());
@dots{}
imgldr->DecRef ();
@end example

@subheading Level Loading (csLoader)
@cindex @code{csLoader}
@cindex @code{iLoader}
@cindex Level Loading

At this moment the level loader is not yet a plugin but already
behaves like one. For that reason you still have to do:

@example
REGISTER_STATIC_LIBRARY (lvlload)
@end example

Somewhere in the beginning of your program (this is a declaration, put
it outside code).

Then make sure you have the level loader plugin by putting the following
in your config file:

@example
System.PlugIns.LevelLoader = crystalspace.level.loader
@end example

@noindent
Or else put the following line in your @code{main} routine right
before calling @code{csSystemDriver}'s @code{Initialize()} method:

@example
System->RequestPlugin("crystalspace.level.loader:LevelLoader");
@end example

@noindent
Then you can get the level loader with:

@example
iLoader* level_loader =
  QUERY_PLUGIN_ID (System, CS_FUNCID_LVLLOADER, iLoader);
@end example

When you don't need it anymore you must call @code{level_loader->DecRef ()}.
Check the API reference to see what functions you can use on level_loader.
There are functions to load a map, textures, mesh objects, etc.

@subheading Things are Mesh Objects
@cindex @code{csThing}
@cindex mesh objects

@@@@@@ TODO

@subheading String Server

@@@@@@ TODO

@subheading Map File Changes

@@@@@@ TODO
@example
PLANE -> ADDON
THING -> MESHOBJ
SKY -> MESHOBJ + RENDPRI
MESHOBJ -> MESHFACT @r{(for factories)}
BEZIER -> ADDON
MATERIALS
RENDERPRIORITIES
PLUGINS
@end example

@subheading Sky Objects Gone

@@@@@@ TODO

@subheading Using the Engine as a Plugin

@@@@@@ TODO

@subheading Sectors Have No Polygons
@cindex csSector

Sectors can no longer contain polygons. All geometry is now represented
with mesh objects (see the section above about how to create csThing
mesh objects). To create the outer walls of a sector (i.e. the geometry
that used to go to the sector in 0.18 or earlier) you create a csThing
mesh object. In a world file this happens like this:

@example
SECTOR 'room' (
  MESHOBJ 'walls' (
    PLUGIN ('crystalspace.mesh.loader.thing')
    PARAMS (
      VERTEX (@dots{}) @dots{}
      POLYGON (@dots{}) @dots{}
    )
    ZFILL ()
    PRIORITY ('wall')
  )
  @dots{}
)
@end example

In code you can use @code{iEngine::CreateSectorWallsMesh()} like this:

@example
iMeshWrapper* mesh =
  engine->CreateSectorWallsMesh (sector, "walls");
@end example

@subheading Global API Changes

GetMiniBspNumVerts  -->  GetMiniBspVertexCount
GetNumActions  -->  GetActionCount
GetNumChars  -->  GetCharCount
GetNumCameraPositions  -->  GetCameraPositionCount
GetNumPolyTxtPlanes  -->  GetPolyTxtPlaneCount
GetNumCollections  -->  GetCollectionCount
GetNumCollisionPairs  -->  GetCollisionPairCount
GetNumCurveVertices  -->  GetCurveVertexCount
GetNumCurves  -->  GetCurveCount
GetNumDimensions  -->  GetDimensionCount
GetNumEdges  -->  GetEdgeCount
GetNumElements  -->  GetElementCount
GetNumFonts  -->  GetFontCount
GetNumFormats  -->  GetFormatCount
GetNumFrames  -->  GetFrameCount
GetNumMaterials  -->  GetMaterialCount
GetNumMeshFactories  -->  GetMeshFactoryCount
GetNumMeshObjects  -->  GetMeshObjectCount
GetNumNormals  -->  GetNormalCount
GetNumObjects  -->  GetObjectCount
GetNumPalEntries  -->  GetPalEntryCount
GetNumPlanes  -->  GetPlaneCount
GetNumPlugIns  -->  GetPlugInCount
GetNumPoints  -->  GetPointCount
GetNumPolygons  -->  GetPolygonCount
GetNumRepeats  -->  GetRepeatCount
GetNumShadows  -->  GetShadowCount
GetNumSpokes  -->  GetSpokeCount
GetNumTexels  -->  GetTexelCount
GetNumTextureLayers  -->  GetTextureLayerCount
GetNumTextures  -->  GetTextureCount
GetNumTriangles  -->  GetTriangleCount
GetNumVertices  -->  GetVertexCount
GetNumberMetaBalls  -->  GetMetaBallCount
GetNumberParticles  -->  GetParticleCount
NumVertices  -->  GetVertexCount
ReportNumberTriangles  -->  ReportTriangleCount
SetNumEdges  -->  SetEdgeCount
SetNumPolygons  -->  SetPolygonCount
SetNumSpokes  -->  SetSpokeCount
SetNumVertices  -->  SetVertexCount
SetNumberMetaBalls  -->  SetMetaBallCount
GetNumberEmitters  -->  GetEmitterCount
GetNumberAging  -->  GetAgingCount
SetNumberParticles  -->  SetParticleCount
GetNumVertsToLight  -->  GetVertexToLightCount
GetStaticNumSamples  -->  GetStaticSampleCount
Update_Num  -->  UpdateCount
SetNumber  -->  SetCount

======= global functions ========
RndNum  -->  csRndNum
strnew  -->  csStrNew
Combinations  -->  csCombinations
expandname  -->  csExpandName
splitpath  -->  csSplitPath
fnamematches  -->  csFilenameMatches
ScanStr  -->  csScanStr
iSwap  -->  csSwapInt
fSwap  -->  csSwapFloat
fSquare  -->  csSquareFloat
ByteSwap32bit  -->  csByteSwap32bit
ByteSwap16bit  -->  csByteSwap16bit
ByteSwap32bitBuffer  -->  csByteSwap32bitBuffer
ByteSwap16bitBuffer  -->  csByteSwap16bitBuffer
FindNearestPowerOf2  -->  csFindNearestPowerOf2
IsPowerOf2  -->  csIsPowerOf2
GenerateHalo  -->  csGenerateHalo
GenerateNova  -->  csGenerateNova
get_token  -->  csGetToken
get_token_float  -->  csGetTokenFloat
get_token_int  -->  csGetTokenInt
skip_token  -->  csSkipToken

@subheading csfx

csfx is renamed to cstool.

@subheading csCollider

csCollider moved from csengine to cstool and is renamed
to csColliderWrapper.

@subheading Key/Node System

The Key/Node system moved from csengine to cstool.

@subheading G3D/G2D ... private

These vars are now private in csSystemDriver.

