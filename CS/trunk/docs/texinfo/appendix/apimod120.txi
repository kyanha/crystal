@c -*-texinfo-*-
@node Release Notes 120, Release Notes 100, Release Notes, Release Notes
@appendixsec Release Notes from 1.00 to 1.20
@cindex Release Notes

@noindent
@emph{Written Marten Svanfeldt, @email{developer@@svanfeldt.com},
with contributions from others.}

This section documents the major changes between versions 1.0 and 1.2 of of
Crystal Space.

@menu
* Api120 Threading:: Threading changes
* Api120 Rendering:: Rendering subsystem changes
* Api120 iPolygonMesh:: iPolygonMesh deprecation
@end menu

@node Api120 Threading, Api120 Rendering, Release Notes 120, Release Notes 120
@subsection Threading changes

For the 1.2 release the threading subsystem in Crystal Space have been entirely
rewritten from scratch. The main rationale for this change is to clear up
some outstanding issues in the code as well as making it a bit more efficient.

@subsubheading Atomic operations
A header (@file{include/csutil/atomicops.h}) containing definitions of operations
with guranteed atomicity such as CAS (Compare-And-Set) and increment.

Full documentation in @pxref{Threading}.

@node Api120 Rendering, Api120 iPolygonMesh, Api120 Threading, Release Notes 120
@subsection Rendering subsystem changes

@subsubheading Shader variable type @samp{COLOR} deprecated

The shader variable type @samp{COLOR} was deprecated as it does not provide
a significant benefit over @samp{VECTOR4}. Hence, use the latter if you intent
to store colors. Internally, @samp{COLOR}s are the same as @samp{VECTOR4}s, so
handling of the @samp{COLOR} type can generally be removed from code.

@node Api120 iPolygonMesh, , Api120 Rendering, Release Notes 120
@subsection iPolygonMesh deprecation
@cindex @code{iPolygonMesh}
@cindex @code{iTriangleMesh}

The @code{iPolygonMesh} interface and everything related to that interface
has been deprecated. This implies that the following classes, interfaces,
and methods are now deprecated:

@itemize
@item @code{iPolygonMesh}
Use @code{iTriangleMesh} instead.
@item @code{csPolygonMeshTools}
Use @code{csTriangleMeshTools} instead.
@item @code{csPolygonMesh}
Use @code{csTriangleMesh} instead.
@item @code{csPolygonMeshBox}
Use @code{csTriangleMeshBox} instead.
@item @code{iObjectModel}
All methods related to @code{iPolygonMesh} are deprecated. Use the
ones with @code{iTriangleMesh} instead.
@item @code{csColliderWrapper}
All methods related to @code{iPolygonMesh} are deprecated. Use the
ones with @code{iTriangleMesh} instead.
@end itemize

In addition the @samp{polymesh} keyword in world files has been
deprecated. Instead use @samp{trimesh}:

@example
<trimesh>
  @dots{}
  <id>colldet</id>
  <id>viscull</id>
  @dots{}
</trimesh>
@end example

Here is an example on how to fetch the collision detection triangle
mesh:

@example
iObjectModel* model = @dots{};
csRef<iStringSet> strset = csQueryRegistry<iStringSet> (object_reg);
csStringID id = strset->Request ("colldet");
iTriangleMesh* trimesh = model->GetTriangleData (id);
@end example

@node Api120 Renamings
@subsection Renamed Classes and Methods
@cindex @code{csSubRectangles}
@cindex @code{IsType()}, @code{iScriptObject}
@cindex @code{NewObject()}, @code{iScriptObject}

A number of classes and methods were renamed to more clearly reflect their 
purpose or moved inside a namespace in order to reduce pollution of the global
namespace.

@itemize @bullet
@item @code{csSubRectangles} @result{} @code{CS::SubRectangles}
@item @code{iScriptObject::IsType()} @result{} @code{iScriptObject::IsA()}
@item @code{iScriptObject::NewObject()} @result{} @code{iScriptObject::New()}
@end itemize

Note that for compatibility reasons the old names are generally still available.
However, they should be considered deprecated and not be used any more as 
they will be removed in a future version.