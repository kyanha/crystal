@c -*-texinfo-*-
@node HOWTO Creating External MSVC 6 Application, HOWTO Creating External MSVC 7 Application, HOWTO CS Project, HOWTO
@subsection Creating an External @sc{msvc} 6 Application

@noindent
@emph{Written by Philip Wyett @email{philipwyett@@dsl.pipex.com}.}
@noindent
@emph{Last updated 13 May 2003.}

This @sc{howto} is a step by step guide for creating a basic Crystal Space
application with @sc{msvc} 6 outside the Crystal Space source tree.

@sc{important}: This tutorial assumes you have a basic familiarity with
@sc{msvc} and it's inner workings. This tutorial also assumes you have a fully
compiled (both release and debug) version of Crystal Space somewhere on your
computer.

In addition to this written tutorial. You can download zip archive(s)
containing video (in avi format) of each step in the tutorial. You can download each
video with every step as you progress or download all the videos in a
single zip archive via the link below.

All Steps Videos - 4.5Mb zip archive download.

@noindent
@ifnottex
@uref{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/msvc6_ext_app/all_steps.zip}
@end ifnottex
@iftex
@code{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/}@*
@code{msvc6_ext_app/all_steps.zip}
@end iftex

@sc{note}: In the videos you will see red and blue stars appear. These are to
indicate mouse clicks. Red for a left mouse button click or double click. A
blue star appearing indicates a right mouse button click.

@subsubheading Step 1 - Creating a basic project workspace.

Step 1 Video - 0.4Mb zip archive download.

@noindent
@ifnottex
@uref{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/msvc6_ext_app/step_01.zip}
@end ifnottex
@iftex
@code{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/}@*
@code{msvc6_ext_app/step_01.zip}
@end iftex

Start @sc{msvc} 6 and then click on @emph{New} from the @emph{File} menu.  You
will now be presented with a dialog box (see image below) for creating a new
project.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap0}
@end ifnotinfo

Firstly we select the type of application we wish to create. Crystal Space
win32 applications primarily work from a console application base.  This
still allows the creation of @emph{Graphical User Interface} (@sc{gui})
applications. However, it also allows you to use the @emph{-console}
command line switch and access more verbose runtime data normally only
available with debug builds.  If you do wish to create standard win32
applications, you may do so.  However... the @emph{-console} switch will
not operate correctly in that type of application.

Select @emph{Win32 Console Application}. Now enter the name of your application
in the @emph{Project name} text box.  In our example, the application will be
named @file{simple1}.  Once done, click on the @emph{OK} button.

You will now be presented with another dialog box (see image below), which asks
what type of console application you would like to create.  We are working from
a blank canvas, as all Crystal Space application are.  Thus we select
@emph{An empty project}.  Once done, click on the @emph{Finish} button.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap1}
@end ifnotinfo

You should now be presented with a new dialog box (see image below).  This
dialog is to confirm the previous settings you have supplied during the
workspace creation process.  Once checked and verified to be correct, click on
the @emph{OK} button.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap2}
@end ifnotinfo

You should now be in the @sc{msvc} 6 @sc{ide} (Intergrated Development
Environment), with the @emph{simple1} project workspace loaded.  Lets move on...

@subsubheading Step 2 - Adding files/code to the workspace.

Step 2 Video - 0.4Mb zip archive download.

@noindent
@ifnottex
@uref{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/msvc6_ext_app/step_02.zip}
@end ifnottex
@iftex
@code{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/}@*
@code{msvc6_ext_app/step_02.zip}
@end iftex

Rather than create code for this tutorial and keeping inline with time honored
tradition - We are now going to cheat and use existing Crystal Space code. :-)

Firstly copy and paste the @file{simple1.cpp} and @file{simple1.h} from the
Crystal Space code tree, into the newly created @file{simple1} project
directory.  These files can be found here:

@noindent
@file{CS\apps\tutorial\simple1\}

Once done, return to the @sc{msvc ide} and select the @emph{FileView} tab
within the @emph{Workspace} window.  See the image below to see the
@emph{Workspace} window from within the @sc{msvc IDE}.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap3}
@end ifnotinfo

To add file(s) to a project workspace, select the appropriate folder in the
@emph{Workspace} window, be that @emph{Source Files} or @emph{Include Files}
etc.  Right click on it to bring up the context menu and then click on
@emph{Add Files To Folder}.  You will now be presented with the @emph{Insert
Files into Project} dialog box, which can be seen below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap4}
@end ifnotinfo

After selecting the desired file(s) you wish to add, click on the @emph{OK}
button to finalize your choice(s) and be returned back to the @sc{msvc ide}.  
Repeat this process twice adding @file{simple1.cpp} to the @emph{Source Files}
folder and @file{simple1.h} to the @emph{Include Files} folder. Once done you
should have a @emph{Workspace} window which looks like the image below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap5}
@end ifnotinfo

@subsubheading Step 3 - Setting Crystal Space @sc{paths} inside @sc{msvc}.

Step 3 Video - 1.02Mb zip archive download.

@noindent
@ifnottex
@uref{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/msvc6_ext_app/step_03.zip}
@end ifnottex
@iftex
@code{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/}@*
@code{msvc6_ext_app/step_03.zip}
@end iftex

First thing we need todo is point @sc{msvc} to both Crystal Spaces
@file{include} and both the release and debug build @file{libs} directories, so
it may access them at compile/link time. Select @emph{Tools} from the
@emph{File} menu and then @emph{Options...}. You will now be presented with the
@emph{Options} dialog box, which can be seen below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap6}
@end ifnotinfo

Click on @emph{Directories} tab of the @emph{Options} dialog. Lets first
add the path to the location of the Crystal Space @file{include} directory.  
Select @emph{Include files} in the @emph{Show directories for} drop down menu.  
Next click on an empty area at the bottom of the list in the @emph{Directories}
window.  This will open it with a browse button (button with three dots) on the
right hand side, enabling you to and select the Crystal Space
@file{include} directory - wherever it is on your system.  See the imsge below
for an example of it set.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap7}
@end ifnotinfo

To set the paths to the Crystal Space lib files, you must remember you need to
add two---one pointing to the location where the release libs are and another
to where the debug libs are located. In the @emph{Show directories for} drop
down menu, now select @emph{Library files}. Follow the same browse and
selection procedure as you used when adding the @file{include} path, adding the
following paths - adjusting for where you have Crystal Space located on your
system.

@noindent
@file{CS\out\release\libs\}@*
@file{CS\out\debug\libs\}

See image below for an example of these set.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap8}
@end ifnotinfo

Once done, click on the @emph{OK} button and return to the @sc{msvc ide}.

@subsubheading Step 4 - Setting Preprocessor Definitions in @sc{msvc}.

Step 4 Video - 0.9Mb zip archive download.

@noindent
@ifnottex
@uref{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/msvc6_ext_app/step_04.zip}
@end ifnottex
@iftex
@code{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/}@*
@code{msvc6_ext_app/step_04.zip}
@end iftex

Crystal Space essentially has three preprocessor definitions which @sc{must} be
set in-order to successfully compile and link your application. They are
@samp{CS_WIN32_CSCONFIG}, which is added whether the build is release or
debug.  @samp{__CRYSTAL_SPACE__}, which is also set whether the build is
release or debug. And finally @samp{CS_RELEASE} or @samp{CS_DEBUG},
which is added as you may guess @samp{CS_RELEASE} in the settings for
release builds and @samp{CS_DEBUG} in the settings for debug builds.

To set the preprocessor definitions for your project. Select your project in the
@emph{Workspace} window. See area highlighted in blue in the image below.  Now,
from the @emph{File} menu select @emph{Projects} then @emph{Settings...}.  
Alternatively, you can right click on the highlighted area in the
@emph{Workspace} and then click on @emph{Settings...} - both ways work.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap9}
@end ifnotinfo

Once you have clicked on @emph{Settings...}. You will then be presented with the
@emph{Settings} dialog box, which can be seen in the image below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap10}
@end ifnotinfo

Select the @emph{C/C++} tab and insert the appropriate definitions in the
@emph{Preprocessor definitions} text box i.e. for a debug build
@samp{CS_WIN32_CSCONFIG},  @samp{__CRYSTAL_SPACE__} and
@samp{CS_DEBUG}, making sure to separate with commas.  An example the
ones entered for a debug build can be seen in the image below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap11}
@end ifnotinfo

Select the @emph{C/C++} tab and insert the appropriate definitions in the
@emph{Preprocessor definitions} text box i.e. for a release build
@samp{CS_WIN32_CSCONFIG},  @samp{__CRYSTAL_SPACE__} and
@samp{CS_RELEASE}, making sure to separate with commas.  An example the
ones entered for a release build can be seen in the image below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap12}
@end ifnotinfo

Once done, click on the @emph{OK} button and return to the @sc{msvc ide}.

@subsubheading Step 5 - Setting Run-Time Library Used with Crystal Space Applications.

Step 5 Video - 0.5Mb zip archive download.

@noindent
@ifnottex
@uref{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/msvc6_ext_app/step_05.zip}
@end ifnottex
@iftex
@code{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/}@*
@code{msvc6_ext_app/step_05.zip}
@end iftex

As in step 4 we need to change one or more project settings. Select your project
in the @emph{Workspace} window. See area highlighted in blue in the image below.  
Now, from the @emph{File} menu select @emph{Projects} then @emph{Settings...}.  
Alternatively, you can right click on the highlighted area in the
@emph{Workspace} and then click on @emph{Settings...} - both ways work.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap9}
@end ifnotinfo

Once you have clicked on @emph{Settings...}, you will be presented with the
@emph{Settings} dialog box once again.

Select the @emph{C/C++} tab and then from the @emph{Category} drop down menu,
select @emph{Code Generation}. Crystal Space uses the Multithreaded DLL run-time
internally, so to avoid conflict and errors applications should use the same.

For debug builds you need to select @emph{Debug Multithreaded DLL} from the
@emph{Use run-time library} drop down menu. As can be seen in the image below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap13}
@end ifnotinfo

For release builds you need to select @emph{Multithreaded DLL} from the
@emph{Use run-time library} drop down menu. As can be seen in the image below.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap14}
@end ifnotinfo

Once done, click on the @emph{OK} button and return to the @sc{msvc ide}.

@subsubheading Step 6 - Linking with the Crystal Space libraries.

@noindent
Step 6 Video - 1.4Mb zip archive download.

@noindent
@ifnottex
@uref{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/msvc6_ext_app/step_06.zip}
@end ifnottex
@iftex
@code{ftp://sunsite.dk/projects/crystal/support/msvc/howtos/}@*
@code{msvc6_ext_app/step_06.zip}
@end iftex

When compiling Crystal Space in release and debug mode, you will end up with the
following libraries, some of which you may require at some point in your own
applications if you use the functionality contained within a given library.

@noindent
Crystal Space debug library names (the @emph{_d} indicates a debug library):

@noindent
@iftex
@code{libcrystalspace_d.lib libcrystalspace_directx_d.lib}@*
@code{libcrystalspace_opengl_d.lib libcrystalspace_windows_d.lib}
@end iftex
@ifnottex
@code{libcrystalspace_d.lib libcrystalspace_directx_d.lib libcrystalspace_opengl_d.lib libcrystalspace_windows_d.lib}
@end ifnottex

@noindent
Crystal Space release library names:

@noindent
@iftex
@code{libcrystalspace.lib libcrystalspace_directx.lib}@*
@code{libcrystalspace_opengl.lib libcrystalspace_windows.lib}
@end iftex
@ifnottex
@code{libcrystalspace.lib libcrystalspaceirectx.lib libcrystalspace_opengl.lib libcrystalspace_windows.lib}
@end ifnottex

To add the necessary libraries to link our application.  As in step 4
we need to change one or more project settings. Select your project in the
@emph{Workspace} window. See area highlighted in blue in the image below.  Now,
from the @emph{File} menu select @emph{Projects} then @emph{Settings...}.  
Alternatively, you can right click on the highlighted area in the
@emph{Workspace} and then click on @emph{Settings...}--both ways work.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap9}
@end ifnotinfo

For applications we need only link with the primary Crystal Space library.  The
other libraries provide support for custom plugin modules.  Select the
@emph{Link} tab and in the text box @emph{Object/library modules} add the
Crystal Space library into the box with those already there.

@noindent
Debug:

@noindent
@code{libcrystalspace_d.lib}

@noindent
See image below for example of debug build link settings.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap15}
@end ifnotinfo

@noindent
Release:

@noindent
@code{libcrystalspace.lib}

@noindent
See image below for example of release build link settings.

@ifnotinfo
@picturesss{tutorial,howto,msvc6proj,snap16}
@end ifnotinfo

Finally, click on @sc{ok} to return to the @sc{msvc ide} and then build the
project.

@subsubheading Commonly encountered problems.

@itemize @bullet
@item
Q. @emph{I get the following error:}

@example
----------Configuration: simple1 - Win32 Release----------
Compiling...
simple1.cpp
C:\CS\INCLUDE\csplatform.h(26) : fatal error C1083:
  Cannot open include file: 'csconfig.h': No such file or directory
Error executing cl.exe.

simple1.exe - 1 error(s), 0 warning(s)
@end example

A. Repeat @emph{Step 4} - You seem to have not set one or more of the
preprocessor definitions correctly.

@item
Q. @emph{I get the following link errors:}

@example
----------Configuration: simple1 - Win32 Release----------
Compiling...
simple1.cpp
Linking...
simple1.obj : error LNK2001: unresolved external symbol
  "public: void __thiscall csReversibleTransform::RotateThis(
    class csVector3 const &,float)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static struct iSCF *  iSCF::SCF"
simple1.obj : error LNK2001: unresolved external symbol
  "public: __thiscall csView::csView(
    struct iEngine *,struct iGraphics3D *)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static bool __cdecl csInitializer::OpenApplication(
    struct iObjectRegistry *)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static void __cdecl csCommandLineHelper::Help(
    struct iObjectRegistry *,struct iCommandLineParser *)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static bool __cdecl csCommandLineHelper::CheckHelp(
    struct iObjectRegistry *,struct iCommandLineParser *)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static bool __cdecl csInitializer::SetupEventHandler(
    struct iObjectRegistry *,
    bool (__cdecl*)(struct iEvent &),unsigned int)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static bool __cdecl csInitializer::RequestPlugins(
  struct iObjectRegistry *,...)"
simple1.obj : error LNK2001: unresolved external symbol
  "bool __cdecl csDefaultRunLoop(struct iObjectRegistry *)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static void __cdecl csInitializer::DestroyApplication(
    struct iObjectRegistry *)"
simple1.obj : error LNK2001: unresolved external symbol
  "public: static struct iObjectRegistry * __cdec
   csInitializer::CreateEnvironment(
   int,char const * const * const)"
simple1.obj : error LNK2001: unresolved external symbol
  "int __cdecl csPrintf(char const *,...)"
simple1.obj : error LNK2001: unresolved external symbol
  "int __cdecl csPrintfV(char const *,char *)"
MSVCRT.lib(crtexe.obj) : error LNK2001:
  unresolved external symbol _main
Release/simple1.exe : fatal error LNK1120: 14 unresolved externals
Error executing link.exe.

simple1.exe - 15 error(s), 0 warning(s)
@end example

A. This would indicate that you have forgotten to add the Crystal Space static
libraries to link with.  Work through @emph{Step 6} again and re-check the
settings you have entered.

@item
Q. @emph{I get the following link errors:}

@example
----------Configuration: simple1 - Win32 Release----------
Compiling...
simple1.cpp
Linking...
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _strchr already defined in LIBC.lib(strchr.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _strstr already defined in LIBC.lib(strstr.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _tolower already defined in LIBC.lib(tolower.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _strncpy already defined in LIBC.lib(strncpy.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _free already defined in LIBC.lib(free.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _memmove already defined in LIBC.lib(memmove.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _realloc already defined in LIBC.lib(realloc.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _malloc already defined in LIBC.lib(malloc.obj)
MSVCRT.lib(MSVCRT.dll) : error LNK2005:
  _strncmp already defined in LIBC.lib(strncmp.obj)
LINK : warning LNK4098: defaultlib "MSVCRT" conflicts with use
  of other libs; use /NODEFAULTLIB:library
Release/simple1.exe : fatal error LNK1169: one or more multiply
  defined symbols found
Error executing link.exe.

simple1.exe - 10 error(s), 1 warning(s)
@end example

A. This or similar LNK2005 errors, tend to indicate that you have forgotten to
set the correct run-time library in the project settings.  Work through
@emph{Step 5} again and make sure you have your project set to
@emph{Debug Multithreaded DLL} or @emph{Multithreaded DLL} for debug and
release builds respectively.
@end itemize
