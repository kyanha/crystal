@c -*-texinfo-*-
@node HOWTO CS Project, HOWTO Creating External MSVC 6 Application, HOWTO User Objects in Maps, HOWTO
@subsection Creating an External Crystal Space Application
@cindex External Crystal Space Application

This section describes one way to use the Crystal Space development kit for
your application without having to place your application within the Crystal
Space source code tree.  Your application's source code can reside wherever you
like.

@subsubheading External Application Requirements

For this to work you need to have a sufficiently Unix-like environment.
The environments provided by Msys/Mingw and Cygwin should work, as well.

@subsubheading The @file{cs-config} Script
@cindex @file{cs-config}

When you build and install Crystal Space, a script named @file{cs-config} is
installed along with the rest of the package.  This script provides access to
bits of information which you need to feed to the development tools in order to
incorporate Crystal Space into your project.  For instance, if you invoke
@file{cs-config} with the @samp{--cxxflags} argument, it will return Crystal
Space-specific C++ compiler switches with which you should invoke the C++
compiler (in addition to whatever other switches your project requires).
Likewise, the @samp{--libs} argument will return the Crystal Space-specific
linker switches and libraries with which you should like your program.

@subsubheading Makefile
@cindex Makefile

In the Crystal Space directory you will find the following file:

@noindent
@file{CS/scripts/cs-config/Makefile.template}.

@noindent
Copy this file to the directory where your project is located and rename it to
@file{Makefile}.

You need to edit this file for your own project.  This template makefile is
capable of building an executable program or a plugin module.  It is
recommended that you change at least the following variables:

@itemize
@item
@samp{TARGET_TYPE} should be set to either @samp{exe} or @samp{plugin},
depending upon whether your project is an executable program or a plugin
module.

@item
@samp{TARGET_NAME} should be the name of your executable or plugin module.  The
file extension (@file{.exe}, @file{.dll}, @file{.so}, etc.) is appended
automatically, so do not the suffix yourself.

@item
@samp{SRC} should list all the source files in your project which comprise the
program or plugin module.

@item
@samp{LINKFLAGS} should be modified to list all the Crystal Space libraries
that you want to use.  The typical list is @samp{cstool}, @samp{gsgfx},
@samp{csgeom}, and @samp{csutil}.
@end itemize

@subsubheading Using the Makefile

If you installed Crystal Space in a non-standard location, then you probably
will also need to set the @samp{CRYSTAL} environment variable to point at the
the location where the @sc{sdk} was installed.  For instance, if you specified
@samp{--prefix=/site/sdk} when configuring Crystal Space, then you will need to
set @samp{CRYSTAL} to @file{/site/sdk/crystal}.  Using the Bourne shell, for
instance, you can do this with the following commands:

@example
CRYSTAL=/site/sdk/crystal
export CRYSTAL
@end example

From a C-shell or compatible, you can use:

@example
setenv CRYSTAL /site/sdk/crystal
@end example

The following targets are supported by this makefile:

@itemize
@item
@samp{all}: Builds the application or plugin module.
@item
@samp{depend}: Calculates dependency information.
@item
@samp{clean}: Removes object files and other detritus.
@end itemize
