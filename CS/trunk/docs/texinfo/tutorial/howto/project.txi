@c -*-texinfo-*-
@node HOWTO CS Project, HOWTO Creating External MSVC Application, HOWTO Render Priorities, HOWTO
@subsection Creating an External Crystal Space Application
@cindex External Crystal Space Application

This section describes one easy way to use the Crystal Space development kit
for your application without having to place your application in the Crystal
Space source code tree.  Your application's source code can reside wherever you
like.

@subsubheading External Application Requirements

For this to work you need to have a sufficiently Unix-like environment.
The environments provided by the MingW and Cygwin compilers are usually
okay, but you must use the @samp{bash} shell.

@subsubheading The @file{cs-config} Script
@cindex @file{cs-config}

The first thing you need to do is to go to the Crystal Space directory and
type:

@example
make csconfig
@end example

This will create a script called @file{cs-config}.  Copy that script unmodified
to the directory where your project is located.  Note that this script is
platform dependent so you should not put it in your project's @sc{cvs}
repository.  Everyone who uses your project will have to generate their own
@file{cs-config} script by invoking @samp{make csconfig} from within the
Crystal Space project directory.

@subsubheading Makefile
@cindex Makefile

In the Crystal Space directory you will find the following file:
@file{scripts/cs-config/Makefile.template}. Copy this file to the
directory where your project is located and rename it to @file{Makefile}.

@subsubheading @file{Makefile}

In the Crystal Space project directory you will find the following file:

@noindent
@code{scripts/cs-config/Makefile.template}

Copy this file to the directory where your project is located and rename it to
@file{Makefile}.  You need to edit this file for your own project.  It is
recommended that you change at least the following variables:

@itemize
@item
@samp{EXECUTABLE} should be the name of your executable.
@item
@samp{OBJSRC} should point to the source code of your project.
@item
@samp{LINKFLAGS} should be modified to list all the Crystal Space libraries
that you want to use.
@end itemize

Other than that you usually do not need to make any other modifications.

@subsubheading Using the Makefile

If you installed Crystal Space (usually in @file{/usr/local/crystal}), then
this is all you need to do.  If not, then you must set the @samp{CRYSTAL}
environment variable to point to the location where Crystal Space
resides.  For instance, using the Bourne shell, you can do this with the
following command:

@example
export CRYSTAL=/home/cs_user/CS
@end example

The following targets are supported by this makefile:

@itemize
@item
@samp{all} builds the application.
@item
@samp{depend} calculates dependency information.
@item
@samp{clean} removes object files and other detritus.
@end itemize
