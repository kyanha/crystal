@c -*-texinfo-*-
@node HOWTO Create RPM, HOWTO Setting the CRYSTAL environment variable, HOWTO Creating External Application Using KDevelop, HOWTO
@subsection Creating Crystal Space @sc{rpm}'s
@cindex @sc{rpm}
@cindex Package, @sc{rpm} 
@cindex @file{cs.spec}

@subsubheading Creating Crystal Space @sc{rpm} Packages

It is possible to build Crystal Space @sc{rpm}'s. This is useful if you want to
distribute pre-built Crystal Space packages, or if you want to install Crystal
Space on your machine using the normal package management facilities of your
host.  For this purpose, @file{CS/scripts/rpm/cs.spec} file is provided with
Crystal Space.

@subsubheading Configure to Build @sc{rpm} Packages

Building @sc{rpm} packages involves a few settings, which are covered at
the following page:

@noindent
@uref{http://qa.mandrakesoft.com/twiki/bin/view/Main/RpmHowTo#Preliminary_tasks}

@subsubheading Building Your Own @sc{rpm}'s From Source Archive 

Once you've set your system to build @sc{rpm} packages as a regular user,
perform the following steps:

@enumerate
@item
Get Crystal Space sources archive (@pxref{Where to Get}) and put it in your
@file{rpm/SOURCES/} directory.

@item
Go into your @file{rpm/SPECS} directory.

@item
Extract the @file{CS/scripts/rpm/cs.spec} file, and put it in your
@file{rpm/SPECS/} directory.

@example
cd /home/user/rpm/SPECS
tar xvjf /home/user/rpm/SOURCES/cs-current-snapshot.tar.bz2 \
     CS/scripts/rpm/cs.spec
mv CS/scripts/rpm/cs.spec /home/user/rpm/SPECS
rm -rf CS
@end example

@item
Verify the source archive filename you downloaded is set in accordance with the
filename part of the @sc{url} in @samp{Source:} line of @file{cs.spec},
otherwise @command{rpm} won't be able to do his job.

@item
Build the @sc{rpm}'s.

@itemize @bullet
@item
To build binary @sc{rpm}'s only, issue @command{rpm -bb cs.spec}
@item
To build source @sc{rpm}'s as well, issue @command{rpm -ba cs.spec}
@end itemize
@end enumerate

Build options are specified by using @command{--with} switch. The following
values are supported:

@itemize @bullet
@item
@command{--with perl} to build with Perl support.
@item
@command{--with debug} to build with debuggin support. Note, however, that
this option may be useless since @command{rpm} strips files before packaging.
@end itemize

So, to build all packages, with Perl support, use:

@example
rpm -ba cs.spec --with perl
@end example

The binary @sc{rpm}'s should be under @file{rpm/RPMS/}, and the source @sc{rpm}
in @file{rpm/SRPMS/}.

The process creates three Crystal Space binary @sc{rpm} packages:

@itemize @bullet
@item
@samp{crystalspace} base package. It provides executables, plugins, data and
configuration files.
@item
@samp{crystalspace-devel} development package. It provides headers and static
libraries needed for development.
@item
@samp{crystalspace-doc} documentation package. It provides @sc{api} and user
manual documentation in @sc{html} format.
@end itemize
