@c -*-texinfo-*-
@node map2cs Classnames and Keys, map2cs Invoking, map2cs.cfg, map2cs
@subsection Classnames and Keys

@file{map2cs} only understands a limited set of classnames and keys.  The
number will probably increase, so I will only document the current status:

@enumerate
@item
General Keys

@itemize @bullet
@item
Keyname: @code{cs_name}

Used to define the name for an entity.  This name will be used in Crystal
Space.
@end itemize

@item
Brush-Based Entities

@itemize @bullet
@item
Classname: @code{cs_sector}

The brush that is assigned to this classname will define a manual sector.  As
soon as you specify only one of these, only parts of the map will be
converted, that are inside a @samp{cs_sector}.  @samp{cs_sector}s may not
overlap.  The map will use the texture of the sector.  That texture will be
replaced wherever it touches a brush that is part of the world geometry, by
the texture of that brush.

@itemize @minus
@item
Keyname: @code{fogdensity}

Determine the thickness of fog in the given sector.  Default is 0.0 (no fog)
Good values for fog are 0.1 to 0.2.  If you use greater value, the fog gets
very thick.  This key is available only for @samp{cs_sector} entities.

@item
Keyname: @code{fogcolor}

Determine the color of the fog in the given sector (r, g, b).  Default is
white (255, 255, 255).  If @samp{fogdensity} is 0, this key has no effect.
This key is available only for @samp{cs_sector} entities which contain a
@samp{fogdensity} greater than 0.0.
@end itemize

@item
Classname: @code{worldspawn}

This classname identifies all brushes that are part of world geometry.  This
is Quake standard.

@itemize @minus
@item
Keyname: @code{skydome}

Gives the name for the @dfn{skydome} texture.  If this key is not present, the
skydome will not be created.  This key is only available in the
@samp{worldspawn} entity.  (Available in Quake editors as ``general map
properties''.)

@item
Keyname: @code{skydomeradius}

Gives the radius of the skydome in Crystal Space units (typically meters).
This key is optional, if not given, a default value of 800 is used.  If no
skydome is specified, it has no effect.  This key is only available in the
@samp{worldspawn} entity.

@item
Keyname: @code{skybox}

Gives the basename for the @dfn{skybox}.  The skybox is a cube, consisting of
six sides.  The names of the sides textures are generated by adding an
underscore and an additional letter to specify the side.  So for example, if
your basename is ``night'', it will use ``night_f'' for the front side,
``night_r'' for the right, ``night_b'' for back, ``night_l'' for left,
``night_u'' for the upper side and ``night_d'' for the down side.  It is ideal
to use Terragen to create the respecive textures.  There is also a tutorial
explaining how to do this with Terragen, @ref{map2cs Tutorial Skybox}.  This
key is only available in the @samp{worldspawn} entity.  (Available in Quake
editors as ``general map properties''.)

@item
Keyname: @code{skyboxsize}

Gives the size of the skybox (the length of a side).  This key is optional.
If not given, a default value of 1600 is used (so the actual size is about the
same as a default skydome).  If no skybox is specified, it has no effect.
This key is only available in the @samp{worldspawn} entity.
@end itemize

@item
All Classnames

@itemize @minus
@item
Keyname: @code{mirror}

Makes all surfaces of this entity reflecting like a mirror if set to 1.  By
using @samp{alpha} you can control this effect.  Default is 0 (no mirror).
This key is available for every entity.

@item
Keyname: @code{alpha}

Determines the amount of the mirror effect.  If @samp{alpha} is 100, the
effect is invisible; if 0, the effect is completely visible.  (For example
with @samp{alpha=0} and @samp{mirror=1} you get a perfect mirror without any
stains.) Default is 100.  This key is available for every entity.

@item
Keyname: @code{solid}

Setting @samp{solid} to 0 makes a brush illusionary, so in fact a portal is
created for every side of the entity to the given @samp{targetsector}.  If you
combine this with the @samp{targetsector} and @samp{alpha} directives you
might be able to get some cool effects, but in general, this is probably one
of the less useful settings.  Maybe in future versions, we will use this
setting to disable collision detection for the given entity which will be far
more effective.  Default is 1.  This key is available for every entity.

@item
Keyname: @code{lighting}

Allows disabling of lighting for some brushes.  This may help you to create
some special effects.  For example light emitting surfaces like neon lamps
will probably look better without lighting (and therefore without shadows on
the surface).  Default is 1 (lighting enabled).  This key is available for
every entity.

@item
Keyname: @code{targetsector}

Here you can give the name of the @samp{targetsector} of an effect.  You are
likely to get strange results by using this entry, but you are free to do so.
Default is the current sector.  This key is available for every entity.

@item
Keyname: @code{sky}

This classname indicates that all sides of the brush are portals into the
sector @samp{cs_skysector}.  The @samp{cs_skysector} will be automatically
generated for you if you specify a skybox or a skydome in your general map
properties.  If this setting is active, it will override all other settings
like mirror or solid.  Default is 0 (no portal to sky).
@end itemize
@end itemize

@item
Point-Based Entites

@itemize @bullet
@item
Classname: @code{light}

Identifies a light source.  This is Quake standard.  The color and radius of
the light source are determined by the key @samp{light} in that entity (Quake
style) or by the key @samp{_light} (Half-Life style).  The radius in the
Crystal Space world file will be the original radius scaled with
@samp{lightscale} (@pxref{map2cs.cfg lightscale}) and the @samp{scaling}
factor (@pxref{map2cs.cfg scaling}).  The intesity of the light source will be
@samp{(colorvalue / 255) * (quakelight_radius / 128)}, for every color
component (red, green, and blue).

A light will also understand the following keys:

@itemize @minus
@item
@code{dynamic=@var{value}}

Sets the Crystal Space @samp{DYNAMIC(@var{value})} setting for the light.

@item
@code{halo=@var{value-intensity-cross}}

Sets the Crystal Space @samp{HALO(@var{value-intensity-cross})} setting for
the light.

@item
@code{attenuation=@var{type}}

Sets the Crystal Space @samp{ATTENUATION(@var{type})} setting for the light.
Type can be one of @samp{none}, @samp{linear}, @samp{inverse} or
@samp{realistic}.
@end itemize

@item
Classname: @code{info_player_start} and @code{info_player_deathmatch}

Determines, where the default player starts.  This setting will only be
interpreted for position, because Crystal Space has no way yet to have the
player's orientation on start stored in the world file.

@item
All Classnames

@itemize @minus
@item
Keyname: @code{origin}

Will be used to determine the position of a point based entity.  (Quake
standard.)
@end itemize
@end itemize
@end enumerate
