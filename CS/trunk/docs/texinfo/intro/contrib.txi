@c -*-texinfo-*-
@node Contributors, License, Authors, CS Introduction
@section Crystal Space Contributors
@cindex Contributors

This is a list of people who have contributed to Crystal Space in one way or
another.  Some of these people are no longer active with Crystal Space and may
not be reachable.  This list is sorted chronologically based upon the first
time a person contributed to the project.

@itemize @bullet
@item
Jorrit Tyberghein (@email{jorrit.tyberghein@@uz.kuleuven.ac.be})

Jorrit is the main author of Crystal Space.  He wrote the initial engine with
the main current functionality.  He is still the main driving force after this
project.  Contact him for any general and strategic question as well as
specific implementation issues.  Jorrit's home address is Schoonstraat 11,
3020 Veltem Beisem, @sc{belgium}.

@item
Murat Demircioglu (@email{demircio@@boun.edu.tr})

Murat was the first contributor for Crystal Space.  He provided the first
steps to porting Crystal Space to @sc{dos}.  Parts of his code is still
present in the current version.

@item
David N. Arnold (@email{derek_arnold@@fuse.net})

David enhanced the @sc{dos} port made by Murat.  He added C++ classes and
@sc{vesa} support.  David also wrote the original Pentium assembler version of
@file{scan.cpp}.

@item
Nathaniel Saint Martin (@email{noote@@bigfoot.com})

Nathaniel is a very eager Crystal Space fan.  He even has his own web page
dedicated to Crystal Space:

@uref{http://www.bigfoot.com/~noote/CrystalSpace}

He enhanced Arnold's @sc{dos} port again so that it works with the Watcom C++
compiler.  He also suggested and implemented a considerable restructering of
the system-dependent stuff with every port having its own directory.  He is
also the original author of the input/output console.  Nathaniel was also the
first to actually present me with an almost working Windows 95 version with
source! Nathaniel is also responsible for most of the sound support code in
Crystal Space.  He made the basic sound system, wrote the Windows drivers and
wrote support for 3D sound.  Nathaniel created the config utility which allows
for easier editing of @file{cryst.cfg}; currently only for Windows and
@sc{dos}.  In addition he also enhanced the (now non-existant) @sc{csar}
utility.  He also helped develop the Windows/Direct3D and Windows/OpenGL
versions and is co-author of the Glide port.  His latest work has been some
enhancements on the 3D sprites including two convertors from Quake @file{.mdl}
and Quake 2 @file{.md2} to Crystal Space.

@item
Jyrki O Saarinen (@email{jxsaarin@@cc.helsinki.fi})

Jyrki made the original Amiga port of Crystal Space.  This old port can still
be found at the following location.  Beware, however, that it is extremely
obsolete.

@uref{http://www.helsinki.fi/~jxsaarin/crystalspace/}

@item
Steve Israelson (@email{pfhorte@@rogers.wave.ca})

Steve made the Macintosh port of Crystal Space.  He also did some
optimizations on the assembler @samp{draw_scanline()} routines.  Steve made
the first preliminary physics system and also implemented an easy uniform kind
of dynamic lighting useful for fluorescent lights and such.  Steve greatly
enhanced the routines to parse the world format.

@item
Bill Bohan (@email{zorn@@technologist.com})

Bill contributed the first free textures for Crystal Space.

@item
Ang See Chai (@email{lynx@@tm.net.my})

Ang See contributed another set of textures.

@item
Jaison Lee (@email{jaison@@apk.net})

Jaison gave me a new version of @file{police.fnt} which doesn't give an error
on the Borland compiler.

@item
Phil Harvey (@email{filrv@@syroxdev.co.uk})

Phil suggested a statistics counter so that you can see the number of polygons
considered and drawn each frame.  He helped with Nathaniel to get the Windows
32-bit port working.  Phil patched @code{find_rgb_slow()} to make it slightly
faster (but he forgot to rename it to @code{find_rgb_slow_somewhat_faster()}.
:-)

@item
Tor Andersson (@email{d97ta@@efd.lth.se})

Tor contributed some textures.  He also donated code for reading several file
formats and a virtual machine.  This code has not been integrated with Crystal
Space yet but you can find his code in the @file{contrib} directory.  Tor gave
me a @file{dj_joy.c} file (in the @file{contrib} directory) which is an
example on how to use the joystick from within @sc{dos} with @sc{djgpp}.  He
also added @sc{jpg} support to Crystal Space and support for the mouse in
@sc{djgpp}.

@item
Alessandro Russo (@email{alessandro.russo@@ntt.it})

Alessandro gave me a patch for the X-windows version of Crystal Space which
allows simultanious keypresses and disables autorepeat.  This makes movement
much more smoother.  Alessandro Russo presented me with a patch to fix the
autorepeat problem (in X-windows).

@item
Gary Clark (@email{GaryC@@jeld-wen.com})

Gary designed the basic framework of the Graphics3D class and I helped him
start implement this.  Gary also made an extension so that Crystal Space can
now use accurate @sc{rgb} light sourcing.  Since this slows down the texture
cache a bit I have made it optional (using @file{cryst.cfg}).  Also added a
patch from Gary Clark to fix the problem with the X-windows version of Crystal
Space that Crystal Space would not immediatelly start drawing but only after
an expose event was generated.  He gave me the @file{lin_joy.cpp} file (in the
@file{contrib} directory) which is an example on how to use the joystick from
within Linux.

@item
Karlis Freivalds (@email{karlisf@@cclu.lv})

Karlis found and fixed a few stupid bugs in @file{wcc/watcom.cpp}.  I wonder
how this version could work before he fixed it.  :-)

@item
Darius Snapkauskas (@email{snapkus@@iname.com})

Darius was busy with 3D sprites.  He contributed some unfinished stubs for his
work.  Unfortunately he seemed to have stopped supporting it.  His code has
now been moved to the attic directory.  The current 3D sprites in Crystal
Space are developed by Jorrit Tyberghein.

@item
Dan Ogles (@email{dogles@@peachtree.com})

Dan provided a patch for @samp{printf()} so that it also works with the
Windows port.  Dan made the Direct3D port for Windows! He greatly enhanced the
Windows port and also added 16-bit support for Windows.  His greatest work up
to now is converting the 3D and 2D graphics subsystems to @sc{com}.  He thus
provided the foundations for the @sc{com} system (also on non-Windows
platforms) which Crystal Space was using in the past.  He also contributed the
Halo code to Crystal Space.

@item
Robert Blum (@email{r.blum@@advertainment.com})

Robert patched Dan Ogles' @samp{printf()} patch so that there is no more
buffer overrun and also found a bug in @file{gifload.cpp}.  He also ran a
memory debugger on Crystal Space and found/fixed many bugs related to that.

@item
Anis Ahmad (@email{anis@@cyberus.ca})

Anis updated the makefiles for Watcom C++ for both Crystal Space and
@sc{csar}.  He also made the Crystal Space editor for Windows 95 which is
unfortunatelly no longer supported.

@item
Andrew Zabolotny (@email{bit@@eltech.ru})

Andrew ported Crystal Space to @sc{os/2}.  Andrew changed Crystal Space to
read/write @sc{zip} files instead of the @sc{csar} archive format.  He
enhanced Crystal Space to read @sc{png} files.  He did a @emph{major} rewrite
of the system dependent stuff and made a lot of support classes for that.
Andrew wrote the 2D sprites.  Andrew wrote @sc{csws}, the Crystal Space
Windowing System and is also busy writing MazeD, a Crystal Space level editor.
Andrew did very good work on @code{DrawPolygon()} and
@code{DrawPolygonQuick()}.  He also rewrote the @sc{djgpp} port (non-Allegro)
to use 16-bit and also support more video modes.  He recently ported almost
all assembly to @sc{nasm} and wrote a few new routines.  He also improved
speed of fog and alpha transparency a lot.  He is also responsible for the
current makefile system.  Andrew is also the author of @sc{vfs} (Virtual File
System).  His latest achievement is converting the @sc{com} subsystem in
Crystal Space to a new @sc{scf} system.  Andrew is one of the developers who
does far more work than can possibly be detailed in this small blurb, and his
contribution to Crystal Space is far more extensive than this tiny entry
implies.

@item
John Lilley (@email{jlilley@@empathy.com})

John manages the Crystal Space Texture Archive.  It can be found at:

@uref{http://www.empathy.com}

@item
Jon Heiner (@email{jonh@@MIT.EDU})

Jon provided a few patches and a makefile for the @sc{sgi}/@sc{irix} port.

@item
Andrew Apted (@email{ajapted@@netspace.net.au})

Andrew ported Crystal Space to the @sc{ggi} library.  More information at:

@uref{http://www.ggi-project.org/}

@item
Paul Garceau (@email{pgarceau@@teleport.com})

Paul contributed a makefile for Windows @sc{nt} with @sc{gcc}.

@item
Ralf Eisele (@email{eiselera@@pcpool1.informatik.uni-ulm.de})

Ralf updated the Amiga port to Crystal Space version 0.09.

@item
Maurice Vosmeijer (@email{Maurice.Vosmeijer@@ehv.sc.philips.com})

Maurice helped to maintain the Amiga port at one time.

@item
Ivan Avramovic (@email{iavramov@@ibm.net})

Ivan cleaned all the matrix/vector stuff and rewrote the @code{csCamera}
class.  He also helped a lot with cleaning up the perspective projection and
clipping.  He made some considerable improvements there.  He also helped fix a
lot of bugs with portals and clipping.  Ivan also enhanced the image loader
classes to make it possible to dynamically add new image formats even with a
pre-compiled Crystal Space library.  He also rewrote the loader routines and
added the @code{csObject} library which is now used in Crystal Space.  He also
seperated the scripting stuff from the engine.

@item
Slavik Levtchenko (@email{Smirnov@@bbs.math.spbu.ru})

Slavik created the current Watcom port with 16-bit display support.

@item
Markus F.X.J. Oberhumer (@email{k3040e4@@wildsau.idv-edu.uni-linz.ac.at})

Markus provided a small patch for the X-windows port.

@item
Trochu Xavier (@email{xtrochu@@yahoo.com})

Trochu wrote the @emph{How-To} describing how to compile Crystal Space with
Visual C++ for Windows 95 and also contributed a few small patches to the
Windows 95 version.  He also contributed up-to-date project files for Visual
C++.  He also ported Crystal Space to the Glide @sc{api} (together with
Nathaniel)!

@item
Thomas Ogbuji, Chimezie (@email{thomasog@@uiuc.edu})

Thomas Ogbuji wrote the Crystal Space world file to @sc{vrml} convertor in
Java.  He also wrote the Java Crystal Space world file editor (not really a
level editor, but for editing world files).

@item
Helge Foerster (@email{Helge.Foerster@@t-online.de})

Helge suggested the algorithm for texel filtering which is now in Crystal
Space.

@item
Charles Vidal (@email{vidalc@@club-internet.fr})

Charles gave contributed a @sc{tcl}/@sc{tk} script for launching Crystal
Space.

@item
Olivier Langlois (@email{olanglois@@sympatico.ca})

Oliver made a few fixes to the event system in Crystal Space and ported
Crystal Space to Borland C++.  He also found and fixed some memory leaks.  He
also contributed the MemoryHeap class for the texture cache.  Olivier also
ported the @sc{gcc} assembler functions to Visual C++ and implemented a few
additional Visual C++ assembly functions.  He also implemented the @sc{bmp}
loader class.  He also optimized and helped optimize several key-functions in
the engine pipeline.  For example, he managed to nearly @emph{double}the speed
of the assembler scanline drawers!

@item
Alex Pfaffe (@email{ddg@@oz.net})

Alex integrated Crystal Space with the @sc{vcollide} library for collision
detection.  Later he removed @sc{vcollide} and used @sc{rapid} instead.  He
then rewrote @sc{rapid} to work better with Crystal Space.  He also
contributed the @sc{ddg} landscape engine which is now integrated with
Crystal Space.

@item
Antonio Gascon (@email{434961@@cepsz.unizar.es})

Antonio provided a few notes which allowed a few matrix inversions to be
optimized away.

@item
Doug Rabson (@email{dfr@@nlsystems.com})

Doug helped fixed a possible memory leak in the X-windows port with @sc{shm}
extension.

@item
Jeff Lundin (@email{jlundin@@fz.ml.org})

Jeff helped with the @sc{djgpp} port.

@item
Philipp Spoth (@email{Spoeth@@t-online.de})

Philipp helped with optimizing the texture cache.  Philipp also helped
optimize a few other routines.

@item
Xavier Hosxe (@email{xhosxe@@cyrano.com})

Xavier contributed a few patches which allowed Crystal Space to compile with
the @sc{egcs} compiler.  For one reason or another this compiler doesn't
support a C++ construction which other compilers do support.

@item
Rodolphe Ortalo (@email{ortalo@@laas.fr})

Rodolphe patched the Glide port so that it works on Linux.  He also provided
output from Purify which helped a lot for debugging Crystal Space.

@item
Greg Ewing (@email{greg@@cosc.canterbury.ac.nz})

Greg contributed a patch which greatly speeds up the computing of the initial
palette table.

@item
Vyacheslav L. Chupyatov (@email{sla@@istu.udm.ru})

Vyacheslav suggested some fixes so that Crystal Space compiles with Watcom C++
v11.  He also contributed a few makefiles for Watcom C++ and fixed a few small
bugs.

@item
Dmitry Derevyanko (@email{dmitryd@@robotics.eecs.berkeley.edu})

Dmitry helped by running Purify and solving a lot of bugs that way.  He also
contributed makefiles for @sc{irix}/@sc{sgi}.

@item
Xavier Pianet (@email{xavier@@planet.dk})

Xavier ported Crystal Space to BeOS!

@item
David Huen (@email{smh1008@@cus.cam.ac.uk})

David helped fix the BeOS port.

@item
Jesko Schwarzer (@email{jesko@@bigfoot.de})

Jesko suggested a way to improve speed of the volumetric fog.

@item
Ayal Pinkus (@email{apinkus@@xs4all.nl})

Ayal contributed a nice missile sprite which was used to replace the old, ugly
missile.  He helped create the base classes for the curve system.  He then
implemented the first Bezier curves with 3x3 control points.

@item
Seth Galbraith (@email{sgalbrai@@linknet.kitsap.lib.wa.us})

Seth also contributed a nice missile and he fixed the texture bug in
@file{mdl2spr}.  Seth is also a great source of suggestions and bug reports.
Seth also updated the @sc{dos}/@sc{djgpp} documentation and the tutorial.  He
also wrote the Squawk (@pxref{Squawk}) demo (using the skybox).  Seth also
fixed the @code{csCamera} and @code{csView} classes so that the @sc{fov} is no
longer static and it is also possible to recenter each view separatelly.  Seth
added sprite vertex tweening and new lighting attenuation settings.  He also
worked on vertex/texel merging in sprites.

@item
Gert Steenssens (@email{gsteenss@@eps.agfa.be})

Gert wrote the Linux drivers for the sound system and he also converted the
@sc{svgalib} driver to @sc{com}.  He also helped develop the Linux/Glide and
OpenGL ports.

@item
Michael Dale Long (@email{mlong@@custom.net})

Michael helped fix the Glide port and contributed some other small fixes.  He
is also the author of the Crystal Clear project which is now included in
Crystal Space.  Crystal Clear serves as a game layer on top of Crystal Space.
Michael also wrote the default version of DrawPolygonMesh().

@item
Gary Haussmann (@email{g.haussmann@@worldnet.att.net})

Gary wrote and maintains the Crystal Space OpenGL renderer as well as the
importers for 3DS and @file{.md2} models.

@item
Andrew Kenneth Milton (@email{akm@@zeus.theinternet.com.au})

Andrew gave me a makefile for FreeBSD and did some other FreeBSD patches.

@item
Brian Haskin (@email{haskin@@ptway.com})

Brian provided some FreeBSD patches.

@item
Conor Stokes (@email{cstokes@@wantree.com.au})

Conor further optimized the 16-bit scanline drawers which were already
optimized by Olivier Langlois.  Conor Stokes is also Jorrit's main inspiration
source for all the current visibility algorithm work.

@item
Mattias Engdegard (@email{f91-men@@nada.kth.se})

Mattias provided a patch with a cleaner handling of the X11 visual and window
creation.

@item
Serguei ``Snaar'' Narojnyi (@email{snaar@@idirect.ca})

Serguei added the first integrated networking code to Crystal Space.  His code
uses the @sc{com} subsystem so it can easily be extended for system-dependent
parts.

@item
Robert Bate (@email{rbate@@ma.ultranet.com})

Robert is the current Macintosh port maintainer.

@item
Norman Kramer (@email{normank@@lycosmail.com})

Norman contributed a few fixes.  In particular he provided a few fixes on the
sound code.  He also fixed the @sc{bmp} loader so that it is endian correct
and added @sc{rle8} encoding.  Norman also added the @code{csQuaternion} class
and has been bringing the Glide drivers up to date.  Norman contributed a
FreeType font server plug-in.  Most recently, he added a grid-view to CSWS.

@item
Nicholas Francis (@email{nicholasfrancis@@iname.com})

Nicholas made a few contributions to MazeD.

@item
Eric Sunshine (@email{sunshine@@sunshineco.com})

Eric ported Crystal Space to MacOS/X Server, OpenStep 4.2, and NextStep 3.3!
He has also fixed numerous bugs throughout the system and has provided a
number of updates to the makefile system.  Additionally, he fixed the long
standing problem with the console blanking out all but the most recently
printed line of text which occurs on ports such as Windows, MacOS/X Server,
OpenStep, and NextStep.  As part of this patch he replaced the ill-conceived
progress meter code in the lighting routines with very localized and simple
classes.  He repaired the broken console in MazeD, so that it is once again
functional.  He has pored through the documentation and updated many out of
date references.  Eric rewrote and re-engineered the BeOS port of Crystal
Space almost entirely from scratch with the result that it is now about 98%
functional as compared to being only about 15% functional before his effort.
Eric re-engineered Crystal Space's network driver architecture and completely
rewrote the network drivers from scratch.  The new architecture is far more
robust, generalized, and usable than the old.  On the documentation front,
Eric took on the task of acting as master editor of the Crystal Space
documentation.  As part of this job, he has written much of the content which
ties together various portions of the manual, fleshed out much of the bare
skeleton and written many otherwise absent sections.  He is also responsible
for the documentation's current look and feel and has created an entire
supporting infrastructure to make documentation available easily and
automatically on all supported platforms.  Eric is one of the developers who
does far more work than can possibly be detailed in this small blurb, and his
contribution to Crystal Space is far more extensive than this tiny entry
implies.

@item
Wolfgang Lehrach (@email{wolfg_l@@pro-net.co.uk})

Wolfgang wrote a Doom to Crystal Space convertor in Java.  It is included in
the @file{contrib} directory.

@item
Jesse McClusky (@email{Jesse.McClusky@@PSS.Boeing.com})

Jesse made the latest Amiga port including the @sc{com} stuff.

@item
Leslie Saputra (@email{gwfremin@@bellsouth.net})

Leslie contributed some code to implement @emph{freelook} like in Quake.

@item
Denis Dmitriev (@email{mrsigma@@home.com})

Denis contributed a routine to split a convex object into slices parallel to
the view plane (useful for volumetric fog).  He also added a progress bar to
the console (during lighting) and added a new way to do bilinear filtering for
the software renderer.  He also dramatically improved the quality of the
precalculated lightmaps.  Denis also improved the movement system in WalkTest
by implementing gravity and better collision detection (using the collision
detection system from Alex Pfapf).

@item
Thomas Hieber (@email{thieber@@gmx.net})

Thomas was the primary maintainer of the Windows port of Crystal
Space for some time and has also contributed various other things.  He wrote
@code{DrawPolygonFX()}.  He added the csGame library and the Crystal Shooter
application.  He also significantly enhanced the Windows Direct3D port.
Thomas also wrote @code{map2cs}, a converter which translates Quake maps to
Crystal Space format.

@item
Bruce Williams (@email{brucewil@@pacbell.net})

Bruce helped optimize the Direct3D driver.  He also contributed a set of
convertor utilities which is going to be used so that Crystal Space can load
3DS, @file{.mdl}, @dots{} objects directly.

@item
Sylvain Rochette (@email{srochette@@telweb.com})

Sylvain provided a few fixes for the Windows port.

@item
Siu-Hang (@email{shor@@cse.cuhk.edu.hk})

Sui-Hang attempted to add functionality to MazeD for sector, portals, lights,
textures, etc.  He also sped up the calculation of the palette at startup.

@item
David Durant (@email{ddurant@@novametrix.com})

David added code for sprite selection to WalkTest and also did some other
fixes to sprites.

@item
Tristan McLure (@email{Tristan_CS@@gmx.de})

Tristan added a new DX6.1 renderer for Windows.

@item
Jonathan Hudson (@email{jhudso1@@gl.umbc.edu})

Jonathan fixed a bug in the @sc{bmp} reader so that it is no longer
upside-down.

@item
FragDance Galore (@email{fragdance@@hotmail.com})

Mr. Galore contributed a @sc{wal}/@sc{sgi} loader and also added initial
support for alpha maps to the texture loaders.

@item
Brad Davis (@email{jbdavis@@uswest.net})

Brad used to host and maintain the master @sc{cvs} repository for the project.
However, the project now resides at SourceForge:

@uref{http://www.sourceforge.net/}

@item
Brandon Ehle (@email{azverkan@@yahoo.com})

Brandon added a new plug-in system to Crystal Space.  He also contributed
@file{csPython} for scripting.  Using @file{csPython} he wrote an Unreal map
to Crystal Space convertor.  Brandon also added project files for Borland 4.

@item
Wyatt Miler (@email{wmiler@@milertronics.com}

Wyatt has performed some editing of Crystal Space's (now defunct) LaTeX
documentation files.

@item
Scott Wood (@email{scott@@geekland.cx})

Scott sent patches to allow Crystal Space to compile on Alpha machines.

@item
Petr Kocmid (@email{pkocmid@@atlas.cz})

Petr helped fix Windows Glide.

@item
Stephan Goetter (@email{sg17@@irz301.inf.tu-dresden.de})

Stephan added makefile targets for full dynamic linking.

@item
Michael Ewert (@email{mewert99@@yahoo.com})

Michael contributed the @file{csPhyzik} library to Crystal Space and also a
test application.

@item
Void (@email{glitia@@texnet.ro})

Mr. Void did some work on Blocks to make it playable again.  He also fixed a
considerable number of bugs and other problems.

@item
Peter Donald (@email{donaldp@@lion.cs.latrobe.edu.au})

Peter fixed the sound drivers for @sc{scf}.

@item
Noah ``angelbob'' L. Gibbs (@email{angelbob@@users.sourceforge.net})

Noah worked with Michael Ewert on the @file{csPhyzik} library.

@item
Michael Day (@email{mikeday@@corplink.com.au})

Michal started work on an @file{autoconf} system for Crystal Space but
abandoned the effort.

@item
Thomas Skoldenborg (@email{thomas@@dum.chalmers.se})

Thomas fixed the OpenGL renderer so that 3Dfx/Mesa combination doesn't crash
anymore.

@item
Simon Boily (@email{simonb@@telisphere.com})

Simon made several changes to the Direct3D renderer.  He added multitexture
support and render state caching.

@item
Brett Hall (@email{swizin@@rain.org})

Brett fixed the X-windows 2D drivers so that they properly exit when the
window is closed by the window manager.

Eric Wigforss (@email{ewigforss@@novametrix.com})

Eric made some Windows-specific fixes to the networking code.

@item
Martin Geisse (@email{Hellwig.Geisse@@mni.fh-giessen.de})

Martin converted many of the Crystal Space text and LaTeX documents to Texinfo
format and began construction of Texinfo version of the Crystal Space manual.
He also contributed a random dungeon generation plug-in module as well as a
sample program which demonstrates its use.

@item
Daniel Fannar Gudbjartsson (@email{dfg@@decode.is})

Daniel helped work on the physics engine and collision detection.

@item
Desmond Fletcher (@email{desmond.fletcher@@usm.edu})

Desmond helped a bit on @file{map2cs} and updated its documentation.  He also
pointed out several bugs and errors in Crystal Space.

@item
Rene Dudfield (@email{illumen@@yahoo.com})

Rene began working on networking capability for the Blocks game.

@item
Thomas Giesel (@email{skoe@@freenet.de})

Thomas supplied a small patch for BeOS to allow full-screen mode with the
OpenGL driver.

@item
Benjamin Sprague (@email{sprague@@core.com})

Benjamin submitted some patches for the terrain engine.

@item
Wouter C. A. Wijngaards (@email{wouterw@@cs.vu.nl})

Wouter contributed a particle system to Crystal Space based on 2D sprites.  He
also added a full-fledged radiosity calculator.  Wouter is the author of the
game @emph{Tunnel Fighter} which is based on the Crystal Space engine.

@item
Frank O'Connor (@email{frank@@oconnors.org})

Frank is the current maintainer of the Windows port of Crystal Space.  One of
the first tasks he undertook was a reorganization of the @sc{msvc} project
files.

@item
Samuel Humphreys (@email{samuelh@@ntlworld.com})

Samuel submitted some fixes for sprites and patched the X drivers so that
resizing windows works.  Samuel also added a procedural texture system to
Crystal Space.  With this system it is possible to render on textures
procedurally and use that texture on a polygon as usual.

@item
Thomas Riemer (@email{triemer@@apt4g.a3nyc.com})

Thomas contributed a new ``network manager'' and @sc{nstp}.

@item
Chris Bruner (@email{cbruner@@ionline.net})

Chris submitted several fixes for the Borland compile.

@item
Burton Radonsxi (@email{loth@@pacificcoast.net})

Burton added a new Allegro canvas.

@item
Travis McIntosh (@email{Travis.McIntosh@@student.oc.edu})

Travis did some very fundamental work on the curve and lighting code
in order to implement both dynamic and pseudo-dynamic lights for them
and also allow shadows.
@end itemize

Many thanks also for the people at @uref{http://www.grimmware.com, GrimmWare}
for being the first to offer web space for Crystal Space.

Many thanks to Alessandro Russo for convincing his system manager for creating
a mailing list for Crystal Space.  Thanks to Marco d'Itri (the system manager)
for creating this list for me.  Also thanks to those people for creating an
ftp mirror of this site.

If we have forgotten anyone or missed a contribution, we sincerely apologize.
Please feel free to notify us of errors or omissions.
