@c -*-texinfo-*-
@node Feature List, Where to Get, DocGuide, CS Introduction
@section Feature List
@cindex Features

The first feature to mention here is that Crystal Space is an Open Source
project (or a Free Software project, depending on your religion) that is
freely available under the @sc{gnu} Lesser General Public License
(@sc{gnu lgpl}). @xref{Licenses}. This means a number of things for developers,
but perhaps most important is that any program you write may freely link to the
Crystal Space libraries.

The second important feature of Crystal Space is that it is written to run
under a wide variety of hardware and software platforms. As of this writing
Crystal Space has been known to run on the following systems. Note that if a
system is listed here it does not necessarily mean that it is 100% supported:

@itemize @bullet
@item
Windows (Windows 9x/@sc{nt}/@sc{me}/2000/@sc{xp})

@item
Unix (@sc{gnu}/Linux, FreeBSD, etc.)

@item
MacOS/X
@end itemize

@noindent
Here are some of just some of Crystal Space's features in no particular order.
Whenever there is some documentation on the subject this is marked after
the feature. The most useful documentation comes first.

@c This used to be listed by library and plug-in, but I found that organization
@c redundant after looking at some other sections of the documentation,
@c namely the directory hierarchy section

@itemize @bullet
@item
Geometric utility library with handy classes such as 2D and 3D vectors,
matrices, transforms, quaternions, kdtree, axis aligned and oriented bounding
box routines, rectangle subdivision, etc. @xref{csGeom}.

@item
General utility library with stuff like templated arrays, smart pointer,
hash map, object registry, plugin manager, radix sort, bit array, optimized
allocators, strings, etc. @xref{csUtil}.

@item
Higher level tool library containing things like some example procedural
textures (plasma, fire, and water), full screen effects, collider support,
texture generation tools, etc.

@item
Graphics library with simple utilities to do mipmapping, color quantization,
calculation of color gradients, simple bumpmapping, etc.

@item
Shared Class Facility @sc{scf} allowing for proper decoupling of interface
and implementation and also allows for dynamically loadable modules (see
plugins below).  @xref{SCF}. @xref{The Basics}.

@item
Smart Pointers, making it easier to keep track of reference counted
objects. @xref{Smart Pointers}.

@item
Flexible plug-in system which is used extensively by Crystal Space and
also allows third-party creation of plugins. @xref{SCF}.
@xref{HOWTO Create Your Own Plugin}.

@item
Virtual file system and transparent support for @sc{zip} files. This
allows cross-platform access to game data files. @xref{VFS}.

@item
Configuration files for all Crystal Space modules and also for your
own application. @xref{Configuration File}.

@item
Command-line parsing. @xref{The Basics}. @xref{Configuration File}.

@item
Pull-down console that you can integrate in your own games.
@xref{Config Console}.

@item
Flexible and extensible event system.

@item
Full screen effects (fading, whiteout, etc).

@item
Level of Detail. @xref{Level of Detail}.

@item
Animated 3D models (3D sprites) using frame based animation. @xref{Animation}.
@xref{MeshObject Spr3D}.

@item
2D animations.

@item
Quake @sc{md3} and @sc{mdl} to Crystal Space convertor.
@xref{md32spr Tutorial}. Additionally Crystal Space can read @sc{md2}
and @sc{3ds} models directly.

@item
The @file{sprcal3d} plugin is able to load Cal3D models. These models
can do skeletal based animation. @xref{MeshObject SprCal3D}.

@item
Powerful alternative skeletal animation system with good support
for hardware skinning and dynamic soft shadows.

@item
Crystal Space native windowing system(s). @xref{AWS}. 

@item
3D renderers (OpenGL, software, null) and support for several
2D canvases. @xref{3D Renderer}.

@item
Various image loaders (@sc{bmp}, @sc{gif}, @sc{jpg}, @sc{png}, @sc{sgi},
@sc{tga}, @sc{wal}).

@item
Portals and sectors which allow for flexible world creation.
@xref{Portal Engine}.

@item
Visibility culling based on kd-tree with coverage buffers (Dynavis).
@xref{Visibility Culling}.

@item
Lighting: static, pseudo-dynamic, dynamic, halos, shadows, stencil shadows.
@xref{Lighting}. @xref{HOWTO Pseudo DynLight}.

@item
Multiple cameras. @xref{HOWTO Camera Movement}.

@item
Textures, materials, and shaders. Shaders support @sc{cg}, @sc{arb}, and
@samp{fixed function} language. @xref{Texture Mapping}.

@item
Procedural textures. @xref{ProcTextures}. @xref{Texture Mapping}.

@item
Sound drivers (CoreAudio, @sc{oss}, and WaveOut) and
renderers (software only at the moment). @xref{Sound Drivers}.

@item
Sound loaders (@sc{wav} and @sc{ogg}). @xref{Sound Drivers}.

@item
Various types of mesh objects: bezier curves, polygonal lightmapped
objects, triangle meshes, haze mesh (bit like volumetric light),
@dots{}.
@xref{MeshObject}. @xref{MeshObject Thing},
@xref{HOWTO Create Thing}. @xref{MeshObject Genmesh}.
@xref{HOWTO Create Genmesh}.

@item
Terrain engine with support for texture splatting (dynamically merging
multiple textures on a terrain and @sc{lod}). @xref{MeshObject TerrFunc}.

@item
Particle system to make fire, explosions, rain, snow, fountains, and much
more. @xref{MeshObject PartSys}.

@item
Collision detection (using @sc{opcode}) or full physics using
the @sc{ode} or @sc{bullet} external libraries.
@xref{Basic Collision Detection}. @xref{Physics ODE}.

@item
Powerful sequence manager to control movement, animation and other
features in a world. @xref{Sequence Manager}.

@item
Bitmapped and vector fonts (FreeFont). @xref{HOWTO Use custom font}.

@item
@sc{xml} map file loader and converters. @xref{XML File Format},
@xref{Tutorial Simple Map}. @xref{Old Map File Format}.

@item
Scripting bindings (Python, Perl, Java). @xref{Scripting Languages}.

@item
Object movement. @xref{HOWTO Mesh Movement}.

@item
Movie recording plugin. @xref{HOWTO Recording Movies}.

@item
Debugging system.
@end itemize
