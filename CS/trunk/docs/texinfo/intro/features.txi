@c -*-texinfo-*-
@node Feature List, Where to Get, DocGuide, CS Introduction
@section Feature List
@cindex Features

The first feature to mention here is that Crystal Space is an Open Source
project (or a Free Software project, depending on your religion). It is
released under the GNU Lesser General Public License (GNU LGPL). @xref{License}.

Crystal Space is divided into several libraries and plug-ins. The items in the
feature list are sorted by the library or plug-in that are responsible for
them. Note that this is not a description of how these components work
together. Since Crystal Space is in active development, not all features (or
even libraries and plug-ins for that matter) are mentioned here. You are
advised to browse the source code or the mailing list to get the most up-to-date
idea of Crystal Space's current feature set.

Here are some of Crystal Space's current features:

@table @emph
@item System Library
The system library performs system-dependent operations (such as dynamically
loading shared libraries). This helps to make your program easily portable to
any supported platform. It originally provided a good deal of functionality
but much of the code has migrated to the Tool and Utility libraries.

@item Geometry Library
The geometry library provides 3D maths for the rest of Crystal Space.  It is
also useful on its own and can be used independently from the rest of Crystal
Space.

@itemize @bullet
@item
2D and 3D vectors

@item
quaternions

@item
2D and 3D polygons

@item
splines

@item
2D and 3D matrices (and transforms)
@end itemize

@item Utility Library
The Utility Library provides low-level functionality for the rest of Crystal
Space.

@itemize @bullet
@item
SCF (the backbone of object-orientation in Crystal Space. @xref{SCF})

@item
plugin manager

@item
archival (ZIP files)

@item
configuration files

@item
command-line parsing

@item
events (queues, cords, outlets)

@item
user input

@item
md5 signatures

@item
debugging functions

@item
random number generator

@item
a virtual clock and scheduler

@item
strings

@item
storage vectors (not geometry vectors)

@item
data streams

@item
hash maps

@item
progress meters and pulses (in text)
@end itemize

@item Tool Library
The Tool Library is a higher-level library that provides a number of tools such
as:

@itemize @bullet
@item
application initialization

@item
video preferences

@item
screen FX (fading, whiteout, etc)

@item
procedural textures

@item
2D animations

@item
sprite building
@end itemize

@item Windowing System Library
CSWS provides a collection of objects that can be used to create a portable
GUI that runs inside of Crystal Space.  The interface look can also be
customized at runtime and textured to fit with your project. It includes the
following widgets:

@itemize @bullet
@item
buttons (command buttons, checkboxes, radio buttons)

@item
menus

@item
scrollbars

@item
dialogs (including ready-made dialogs such as file selection and color
selection)

@item
trees and listboxes

@item
layout widgets (notebook, grid)

@item
GUI hints
@end itemize

@item 2D Canvas / 3D Renderer
These libraries allow you to draw directly on the screen and to use
hardware accelerated 3D drawing. They are independent from the engine and
perform only basic operations. You can actually use them if you want to
write your own engine. Features include:

@itemize @bullet
@item
Direct3D for Windows (32 bit) port.

@item
OpenGL support for GNU/Linux, BeOS, MacOS/9, OS/2, and Windows (32 bit).

@item
Drawing arbitrary sloped convex polygons.

@item
Perspective correct texture mapping. You can chose between accuracy
and speed (by selecting the interpolation step).

@item
Support for 8-bit (palette), 15/16-bit and 32-bit truecolor displays
(no support for 24-bit yet).

@item
Mipmapping to minimize memory strain on the texture cache and to have
nicer textures in the distance.

@item
The width and height of textures must be a power of two but the
texture need not be a square.

@item
Procedural textures. Currently the included procedural textures are plasma,
sky, water, and fire. You can also define your own procedural textures.

@item
It is possible to map the texture on a polygon in various ways such as via
rotation, scaling, mirroring, etc.

@item
Transparent and semi-transparent textures allowing for see-through
water surfaces and windows.

@item
Colored volumetric fog.

@item
Halos around lights.
@end itemize

@item 3D Engine
The engine features the following:

@itemize @bullet
@item
True six-degrees-of-freedom (@sc{6dof}).

@item
Integrated landscape engine.

@item
Moving objects and scripts controlling the movement.

@item
Static colored lighting with real shadows. Lighting and shadows are
precomputed before the world is displayed. Radiosity is also supported.

@item
Pseudo-dynamic colored lights which cannot move but have very accurate
shadows and can change intensity/color randomly.

@item
Dynamic colored lighting with support for shadows (detail objects are
ignored for shadows currently).

@item
Support for frame and skeletal based 3D triangle mesh sprites with
level-of-detail (@sc{lod}) reduction via progressive meshes.

@item
Support for 2D sprites and particle systems.

@item
Mesh object plugin system that is used for 3D sprites, 2D sprites and
particle systems. The game developer can also write his own mesh objects
and plug them into the engine transparently.

@item
Portals are used for efficient and easy visibility sorting. In
addition you can optionally enable an @sc{octree} and/or @sc{bsp} for some
sectors to allow for even more powerful world definitions.

@item
Additional C-buffer (coverage buffer) which can be enabled for even
better visibility culling.

@item
Using portals you can also create transparent and semi-transparent
mirrors.

@item
Alpha transparency in combination with mirrors allows simulation of
shining walls.

@item
You can also include gouraud shaded triangles in the world.

@item
Dynamic gouraud shaded sky spheres. Also support for skybox.

@item
Curved bezier surfaces with dynamic tessellation depending on viewer
distance.

@item
Support for multiple cameras and the ability to make 1st person or
3rd person cameras.

@item
@sc{zip} archive format to pack the map file, the textures and all other
needed data files for one level inside one file. Crystal Space also
uses the same @sc{zip} file to automatically add lightmap data. This 
greatly speeds up the start-up of Crystal Space.

@item
Powerful text-based map file format allows you to easily redefine the world.

@item
Libraries of commonly used objects and textures are supported.
@end itemize

@item Utility Library
Much of the utility functionality in this library can be used independently
of Crystal Space.  This library includes the following functionality:

@itemize @bullet
@item
Reading configuration (@sc{ini}) files for program options.

@item
Reading and writing @sc{zip} files as data files.

@item
Simple parser that you can use if @sc{ini} files are not enough. It is used
by the engine to read map files.

@item
Defining an interface for shared libraries (@file{.so} or @sc{.dll}).  This is
used by the plug-in system.

@item
Dynamically-sized arrays (@code{csVector}).
@end itemize

@item @sc{vfs}
Virtual file system.  @xref{VFS}.

@item Tool Library
Much of the utility functionality in this library can be used independently
of Crystal Space.  This library includes the following functionality:

@itemize @bullet
@item
Contains several functions that can help setup an application. 
The most important class in this library is csInitializer which will create 
everything needed to get a CS application operational.

@item
Support for models, procedural textures, and sprites.

@item
Support for collision detection.
@end itemize

@item Sound Driver / Sound Renderer
General sound system.  Currently drivers exist for GNU/Linux, MacOS/9, and
Windows.

@item Network Driver
General networking support.  Currently supports socket-based networking via
@sc{TCP/IP}.

@item Scripting
Crystal Space supports scripting through the @sc{Python} plugin. This way
a game using Crystal Space can call @sc{Python} methods and @sc{Python}
scripts can call Crystal Space methods.
@end table
