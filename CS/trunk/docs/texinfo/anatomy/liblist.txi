@node Library List
@section Quick Overview of Modules and Libraries
@cindex Module List
@cindex Library List
@cindex Module Overview
@cindex Library Overview

This section presents a quick overview of the modules and libraries provided
by Crystal Space.  More detailed descriptions of these facilities may be
found in later sections.

@itemize @bullet
@item
@emph{3D Engine} (library: csengine) This is one of the corner stones of
Crystal Space and also what originally sparked the birth of the Crystal
Space project.  It needs the 3D Rasterizer component to display output
and also requires a number of other libraries (csutil, csgeom,
csgfxldr).  The 3D Engine exports a number of @sc{scf} interfaces
to allow access through the @sc{scf} mechanism.

@item
@emph{Utility Library} (library: csutil) This library contains various
utilities.  There is an Archive class which can read/write @sc{zip}
archives.  There is a vector class, a sparse matrix class and some other
useful goodies.  This library requires the use of the external ZLib
library which is used to read/write @sc{zip} archives.

@item
@emph{Geometry Library} (library: csgeom) 
A library for 3d geometry operations. It provides 2d and 3d vectors, polygons
and bounding boxes, 3d matrices and some other useful things. @xref{csGeom}.

@item
@emph{Graphics Loader Library} (library: csgfxldr)] Routines to support
loading various graphic file formats and put them internally in the same
format.  This library supports @sc{jpg}, @sc{gif},
@sc{tga}, @sc{png}, and @sc{bmp}.

@item
@emph{Sound Loader Library} (library: cssndldr) Routines to support
loading various sound file formats and put them internally in the same
format.  This library supports @sc{wav}, @sc{aiff}, @sc{au}, etc.

@item
@emph{Crystal Space Window System} (library: csws) A window system
nicely integrated with Crystal Space.  It is also platform independent.

@item
@emph{System Specific Functionality} (library: cssys) All system
dependent stuff (non-graphics and non-sound related) is in this library.

@item
@emph{Input System} (library: csinput) An input library (mouse,
keyboard, joystick, etc.).

@item
@emph{World Parser} (library: csparser) A library which parses
@sc{ascii} world files and creates a world in the 3D Engine.

@item
@emph{Physics} (library: csphyzik) This module supports calculation of
various physical properties.  @xref{csPhyzik}.

@item
@emph{Scripting} A non-existant module.

@item
@emph{Artificial Intelligence} Another non-existant module.
@end itemize
