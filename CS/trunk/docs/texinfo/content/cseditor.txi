@c -*-texinfo-*-
@node cseditor, , ViewMesh, Working with Engine Content
@section The cseditor framework
@cindex cseditor

The cseditor framework is a generic edition system, that can be used to setup
a Graphical User Interface (GUI) edition environment. The @file{cseditor}
application that is available within Crystal Space do use the cseditor
framework for the edition of its 3D objects and environments, but the framework
is not limited to this and can be reused in many different edition contexts.

The framework is split in a core system that is reused in every editor
application, and a set of editor components that are registered at will and
defines the behavior and the functionalities of the editor.

@subheading The core system

The core of the cseditor framework provides mechanisms in order to define the
list of editor components that are present in the GUI, along with functionalities
for adding menu entries, executing and undoing an action, and reporting the
status of the different processes that are run.

The core system is based around the GUI of the @url{http://www.blender.org/, Blender}
open source 3D editor. The cseditor uses the same
@url{http://wiki.blender.org/index.php/Doc:2.6/Manual/Interface/Window_system,
organization of windows} that allows to add and remove dynamically sub-windows,
and to re-arrange them at will.

The header files defining the core of the cseditor framework can be found in
the @file{include/ieditor/} directory. The root interface for accessing the
cseditor plugin is the @code{iEditorManager} interface, that is accessible from
the Crystal Space plugin manager with the @code{"crystalspace.editor.core"}
component identifier.

This component should be loaded and setup from a root application file, see
the file @file{apps/tools/editor/editorapp.cpp} for an example of usage.

@subheading The cseditor context

The current edition context is stored in the @code{iContext} and related
interfaces. This context defines the current state of the editor, such as the
list of objects selected, the 3D camera, and the ressource file currently
loaded.

Most editor components will listen and react to the changes in the context,
such as getting or not visible, and providing or not some menu entries.

The context being application specific, the @code{iContext} interface is
accompanied by a set of different context interfaces that can be selected by
the programmer depending on the set of editor components that are used.
General mechanisms allowing to help the building of that selection are however
still lacking.

@subheading The editor components

Several types of different editor components can be registered within the core
system. Those components are:

@itemize @bullet
@item
@samp{iSpace}: spaces are the most important GUI components, and occupy most
of the place available in the top-level window. This top-level window can be
split in one to several spaces, and the user can dynamically split and merge
those spaces in order to adapt to the needs of the user.
@item
@samp{iPanel}: panels are added to a given @code{iSpace} and are enabled or
not depending on the current editor context.
@item
@samp{iHeader}: headers defines the list of menu entries that are available
for a given @code{iSpace}.
@item
@samp{iEditorComponent}: those components are not visible within the GUI,
although they are active within it, for example by adding and managing global
menu entries.
@end itemize

A programmer can either reuse the editor components that are available within
cseditor, or he can implement some custom new ones.

The implementation of the default editor components are in the directory
@file{plugins/editor/}. The list of components that are registered within a
given @code{iEditor} instance are defined in the file
@file{apps/tools/editor/editorapp.cpp}.
