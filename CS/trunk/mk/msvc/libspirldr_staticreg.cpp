// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_spirldr[] =
"<?xml version=\"1.0\"?>"
"<!-- spirldr.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>crystalspace.mesh.loader.factory.spiral</name>"
"        <implementation>csSpiralFactoryLoader</implementation>"
"        <description>Crystal Space Spiral Factory Loader</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.mesh.loader.spiral</name>"
"        <implementation>csSpiralLoader</implementation>"
"        <description>Crystal Space Spiral Mesh Loader</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.mesh.saver.factory.spiral</name>"
"        <implementation>csSpiralFactorySaver</implementation>"
"        <description>Crystal Space Spiral Factory Saver</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.mesh.saver.spiral</name>"
"        <implementation>csSpiralSaver</implementation>"
"        <description>Crystal Space Spiral Mesh Saver</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef csSpiralFactoryLoader_FACTORY_REGISTER_DEFINED 
  #define csSpiralFactoryLoader_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csSpiralFactoryLoader) 
  #endif
  #ifndef csSpiralLoader_FACTORY_REGISTER_DEFINED 
  #define csSpiralLoader_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csSpiralLoader) 
  #endif
  #ifndef csSpiralFactorySaver_FACTORY_REGISTER_DEFINED 
  #define csSpiralFactorySaver_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csSpiralFactorySaver) 
  #endif
  #ifndef csSpiralSaver_FACTORY_REGISTER_DEFINED 
  #define csSpiralSaver_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csSpiralSaver) 
  #endif

class spirldr
{
SCF_REGISTER_STATIC_LIBRARY(spirldr,metainfo_spirldr)
  #ifndef csSpiralFactoryLoader_FACTORY_REGISTERED 
  #define csSpiralFactoryLoader_FACTORY_REGISTERED 
    csSpiralFactoryLoader_StaticInit csSpiralFactoryLoader_static_init__; 
  #endif
  #ifndef csSpiralLoader_FACTORY_REGISTERED 
  #define csSpiralLoader_FACTORY_REGISTERED 
    csSpiralLoader_StaticInit csSpiralLoader_static_init__; 
  #endif
  #ifndef csSpiralFactorySaver_FACTORY_REGISTERED 
  #define csSpiralFactorySaver_FACTORY_REGISTERED 
    csSpiralFactorySaver_StaticInit csSpiralFactorySaver_static_init__; 
  #endif
  #ifndef csSpiralSaver_FACTORY_REGISTERED 
  #define csSpiralSaver_FACTORY_REGISTERED 
    csSpiralSaver_StaticInit csSpiralSaver_static_init__; 
  #endif
public:
 spirldr();
};
spirldr::spirldr() {}

}
