#============================================================================
# Rules for creating Documentation
#============================================================================

if $(PERL)
{
  PATH.RUNTEXI2HTML = [ ConcatDirs $(TOP) docs support runtexi2html.sh ] ;
  CMD.RUNTEXI2HTML ?= "$(SHELL) $(PATH.RUNTEXI2HTML)" ;
  PATH.TEXI2HTML = [ ConcatDirs $(TOP) docs support texi2html ] ;
  CMD.TEXI2HTML ?= "$(PERL) $(PATH.TEXI2HTML)" ;
}

if $(CMD.MAKEINFO)
{
PATH.RUNMAKEINFO = [ ConcatDirs $(TOP) docs support runmakeinfo.sh ] ;
CMD.RUNMAKEINFO ?= "$(SHELL) $(PATH.RUNMAKEINFO)" ;

##  Texi2Info targetname : texifile : outputformat [ : subdir ]
##    Creates info out of the texifile
rule Texi2Info
{
  local dir = [ FDirName $(LOCATE.DOCS) $(4) ] ;
  
  MkDir $(dir) ;
  CleanDir $(<)clean : $(dir) ;
  Depends cleandoc : $(<)clean ;
  Depends $(<) : $(dir) ;
  
  DIR on $(<) = $(dir) ;
  FORMAT on $(<) = $(3) ;
  
  Depends $(<) : $(>) ;
  RunMakeInfo $(<) : $(>) ;
  NotFile $(<) ;
  Always $(<) ;
}
}

if $(CMD.TEXI2DVI)
{
PATH.RUNTEXI2DVI = [ ConcatDirs $(TOP) docs support runtexi2dvi.sh ] ;
CMD.RUNTEXI2DVI ?= "$(SHELL) $(PATH.RUNTEXI2DVI)" ;

##  Texi2DVI targetname : texifile [ : subdir ]
##    Creates dvi out of the texifile
rule Texi2DVI
{
  local dir = [ FDirName $(LOCATE.DOCS) $(3) ] ;
  local target = $(>:R=$(dir):S=.dvi) ;

  Depends $(<) : $(target) ;

  MkDir $(dir) ;
  CleanDir $(<)clean : $(dir) ;
  Depends cleandoc : $(<)clean ;
  Depends $(target) : $(dir) ;

  FLAGS.TEXI2DVI on $(target) += -I $(SUBDIR) ;
  SEARCH on $(>) = $(SUBDIR) ;
  Depends $(target) : $(>) ;
  RunTexi2DVI $(target) : $(>) ;
  NotFile $(<) ;
  Always $(target) ;
}

if $(CMD.DVIPS)
{
##  Texi2PS targetname : texifile [ : subdir ]
##    Creates PostScript out of the texifile              
rule Texi2PS
{
  local dir = [ FDirName $(LOCATE.DOCS) $(3) ] ;
  local dvitarget = $(>:R=$(dir):S=.dvi) ;
  local target = $(>:R=$(dir):S=.ps) ;
    
  Depends $(<) : $(target) ;
  Depends $(target) : $(dvitarget) ;
    
  MkDir $(dir) ;
  CleanDir $(<)clean : $(dir) ;
  Depends cleandoc : $(<)clean ;
  Depends $(dvitarget) : $(dir) ;

  FLAGS.TEXI2DVI on $(target) += -I $(SUBDIR) ;
  DIR on $(target) = $(dir) ;
  SEARCH on $(>) = $(SUBDIR) ;
  Depends $(dvitarget) : $(>) ;
  RunTexi2DVI $(dvitarget) : $(>) ;
  RunDviPs $(target) : $(dvitarget) ;
  NotFile $(<) ;
  Always $(target) $(dvitarget) ;
}

}

if $(CMD.DVIPDF)
{
##  Texi2PDF targetname : texifile [ : subdir ]
##    Creates PDF out of the texifile              
rule Texi2PDF
{
  local dir = [ FDirName $(LOCATE.DOCS) $(3) ] ;
  local dvitarget = $(>:R=$(dir):S=.dvi) ;
  local target = $(>:R=$(dir):S=.pdf) ;
    
  Depends $(<) : $(target) ;
  Depends $(target) : $(dvitarget) ;
    
  MkDir $(dir) ;
  CleanDir cleandoc : $(dir) ;
  Depends $(dvitarget) : $(dir) ;

  FLAGS.TEXI2DVI on $(target) += -I $(SUBDIR) ;
  DIR on $(target) = $(dir) ;
  SEARCH on $(>) = $(SUBDIR) ;
  Depends $(dvitarget) : $(>) ;
  RunTexi2DVI $(dvitarget) : $(>) ;
  RunDviPdf $(target) : $(dvitarget) ;
  NotFile $(<) ;
  Always $(target) $(dvitarget) ;
}
}
} # if $(CMD.TEXI2DVI)

if $(CMD.TEXI2HTML)
{
##  Texi2HTML targetname : texifile [ : subdir ]
##    Generate html documentation from texinfo files. Flags can be specified
##    with the TEXIFLAGS variable.
rule Texi2HTML
{
  SEARCH on $(>) = $(SUBDIR) ;

  # Create Output directory
  local dir = [ FDirName $(LOCATE.DOCS) $(3) ] ;
  DOCDIR_$(<) = $(dir) ;
  Depends $(<) : $(dir) ;
  MkDir $(dir) ;
  CleanDir $(<)clean : $(dir) ;
  Depends cleandoc : $(<)clean ;

  OUTDIR on $(<) = $(dir) ;
  NotFile $(<) ;
  Always $(<) ;
  Depends $(<) : $(>) ;
  RunTexi2HTML $(<) : $(>) ;
}
}

if $(CMD.TEXI2PDF)
{
##  Texi2PDF targetname : texifile [ : subdir ]
##    Creates pdf out of the texifile
rule Texi2PDF
{
  local dir = [ FDirName $(LOCATE.DOCS) $(3) ] ;    
  local target = $(>:R=$(dir):S=.pdf) ;

  Depends $(<) : $(target) ;

  MkDir $(dir) ;
  CleanDir $(<)clean : $(dir) ;
  Depends cleandoc : $(<)clean ;
  Depends $(target) : $(dir) ;

  FLAGS.TEXI2PDF on $(target) += -I $(SUBDIR) ;
  SEARCH on $(>) = $(SUBDIR) ;
  Depends $(target) : $(>) ;
  RunTexi2PDF $(target) : $(>) ;
}                                                             
}

if $(CMD.DOXYGEN)
{
##  Doxygen targetname : doxyprofile [ : subdir : additional files ]
##    Run doxygen from TOP source dir to extract comments from headers and
##    build an API documentation. Flags can be passed through the DOXYFLAGS
##    variable.
rule Doxygen
{
  SEARCH on $(>) = $(SUBDIR) ;

  # Create Output directory
  local dir = [ FDirName $(LOCATE.DOCS) $(3) ] ;
  DOCDIR_$(<) = $(dir) ; 
  Depends $(<) : $(dir) ;
  MkDir $(dir) ;
  CleanDir $(<)clean : $(dir) ;
  Depends cleandoc : $(<)clean ;

  NotFile $(<) ;
  Always $(<) ;
  Depends $(<) : $(>) ;
  RunDoxygen $(<) : $(>) : $(dir) ;

  # copy over additional files
  local i ;
  for i in $(4)
  {
    LOCATE on $(i:G=copy) = $(SUBDIR) ;
    Copy $(dir) : $(i:G=copy) ;
    Always $(i:G=copy) ;
    Depends $(<) : $(i:G=copy) ;
  }
}
}

#----------------------------------------------------------------------------
# private part
 
actions RunTexi2HTML
{
  $(CMD.RUNTEXI2HTML) "$(CMD.TEXI2HTML)" "$(CMD.MKDIRS)" "$(>)" "$(OUTDIR)" \
    "$(FLAGS.TEXI2HTML)"
}

actions RunTexi2DVI
{
  $(CMD.RUNTEXI2DVI) "$(CMD.TEXI2DVI)" "$(CMD.MKDIRS)" "$(<)" "$(>)" \
    "$(FLAGS.TEXI2DVI)"
}

actions RunTexi2PDF
{
  $(CMD.TEXI2PDF) $(FLAGS.TEXI2PDF) --batch --quiet -o $(<) $(>)
}

actions RunDviPs
{
  cd $(DIR) && $(CMD.DVIPS) $(FLAGS.DVIPS) -q -o $(<:BS) $(>:BS)
}

actions RunDviPdf
{
  cd $(DIR) && $(CMD.DVIPDF) $(FLAGS.DVI2PDF) $(>:BS) $(<:BS)
}

actions RunMakeInfo
{
  $(CMD.RUNMAKEINFO) "$(CMD.MAKEINFO)" "$(CMD.MKDIRS)" "$(DIR)" "$(>)" \
    "$(FORMAT)" "$(FLAGS.MAKEINFO)"
}

actions RunDoxygen
{
  TOP=$(TOP) $(CMD.DOXYGEN) $(>)
}

actions CopyImages
{
  find $(>) -name "$(WILDCARD)" -exec "cp" "{}" "$(<)" ';'
}


#----------------------------------------------------------------------------
# Additional clean rules.

CleanDir cleandoc : $(LOCATE.DOCS) ;
Depends clean : cleandoc ;
Help cleandoc : "Remove built documentation files" : verbatim ;

Always docclean ;
NotFile docclean ;
Depends docclean : cleandoc ;
