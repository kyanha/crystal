#============================================================================
# Rules for swig
#============================================================================

if $(CMD.SWIG)
{
  # Post-processing of the Swig-generated C++ file.  We need to ensure that
  # <stdint.h> defines INT64_C() and cousins, which means that the
  # __STDC_CONSTANT_MACROS and __STDC_LIMIT_MACROS macros must be defined
  # before <stdint.h> is included.  In some Python installations, Python.h
  # includes <stdint.h>, and Swig-generated output includes Python.h before we
  # ever have a chance to define the __STDC_* macros.  There is no
  # Swig-supported mechanism allowing us to insert these #defines before
  # Python.h is included, so we post-process the output file.  Also, we delete
  # any lines containing the CVS `Header' keyword to ensure that CVS does not
  # consider the file changed simply because `Header' expansion differs.
  # Also #undefine _DEBUG, so python23.lib is used with MSVC instead of 
  # python23_d.lib. (Despite the fact that this customization seems 
  # project-specific, it should be safe for all projects.)
  SWIG.SED_SCRIPT =
    "'s/\\([ 	]*#[ 	]*include[ 	][ 	]*[<\"]Python.h[>\"]\\)/\\
    #ifndef __STDC_CONSTANT_MACROS\\
    #define __STDC_CONSTANT_MACROS\\
    #endif\\
    #ifndef __STDC_LIMIT_MACROS\\
    #define __STDC_LIMIT_MACROS\\
    #endif\\
    #ifndef DEBUG_PYTHON\\
    #undef _DEBUG\\
    #endif\\
    \\1/
    /\$Header:/d'" ;

  ## Swig cppfile : swigfile
  rule Swig
  {
    Depends $(<) : $(>) ;
    # Put the generated cpp files in the source directory. Because probably not
    # all people have swig installed so we want to add these generated files to
    # the sources.
    MakeLocate $(<) : $(SUBDIR) ;
    SWIG.FLAGS on $(<) += $(SWIG.FLAGS) ;
  }
  
  actions Swig
  {
    $(CMD.SWIG) $(SWIG.FLAGS) -o $(<) $(>)
    $(SED) $(SWIG.SED_SCRIPT) < $(<) > $(<).sed
    $(RM) $(<)
    $(MV) $(<).sed $(<)
  }

  rule SimpleSwig
  {
    local object = [ DoObjectGrist $(<:S=$(SUFOBJ)) ] ;
    local cppfile = $(<:S=.cpp) ;
    
    C++ $(object) : $(cppfile) ;
    Swig $(cppfile) : $(<) ;

    return $(object) ;
  }
  RegisterFileType SimpleSwig : .i ;

  if ! $(NO_SWIG_HEADER_SCANNING)
  {
    SWIG.HDRPATTERN = "^[ 	]*[%#][ 	]*include[ 	]*[<\"]([^\">]*)[\">].*$" ;
    RegisterHeaderRule HeaderRule : $(SWIG.HDRPATTERN) : .i ;
  }
}
