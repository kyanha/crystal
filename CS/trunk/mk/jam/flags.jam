#============================================================================
# Rules for specifying compiler and linker flags
# Copyright (C)2003 by Matze Braun <matzebraun@users.sourceforge.net>
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Library General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or (at your
#    option) any later version.
#
#    This library is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
#    License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; if not, write to the Free Software Foundation,
#    Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#============================================================================

##  LinkWith target : libs
##    Link an application with libraries. The specified libraries should have
##    build rules in the same project. For external libraries use the
##    ExternalLibs rule. Specify the library names without any extensions or
##    the leading "lib".
rule LinkWith
{
  local libs = [ ResolveLibs $(>) ] ;

  if $($(<)_TYPE) = library
  {
    LibDepends $(<) : $(libs) ;
  }                           
  
  LFlags $(<) : $($($(libs).EXTERNALLIBS).LFLAGS) ;
  
  libs = lib$(libs)$(SUFLIB) ;
      
  DEPENDS $($(<)_TARGET) : $(libs) ;
  NEEDLIBS on $($(<)_TARGET) += $(libs) ;

  if $($(<)_TYPE) = plugin
  {
    $(<)_static.NEEDLIBS += $(>) ;
  }
}

##  CFlags target : flags : options
##    Sets cflags on all sourcefiles of a library, plugin or application target
##    This rule affects c++ and c compiler flags.
##    Options
##      nostatic - Do not apply the flags to a "_static" variation.
rule CFlags
{
  CheckOptions nostatic : $(3) : $(<) ;

  CCFLAGS on $($(<)_OBJECTS) += $(>) ;
  C++FLAGS on $($(<)_OBJECTS) += $(>) ;

  if ! [ IsElem nostatic : $(3) ] && $($(<)_TYPE) = plugin
  {
    CFlags $(<)_static : $(>) ;
  }
}

##  LFlags target : flags : options
##    Sets linker flags for a library, plugin or application target
##    Options
##      nostatic - Do not apply the flags to a "_static" variation.
rule LFlags
{
  CheckOptions nostatic : $(3) : $(<) ;

  LINKLIBS on $($(<)_TARGET) += $(>) ;

  if ! [ IsElem nostatic : $(3) ] && $($(<)_TYPE) = plugin
  {
    $(<)_static.LFLAGS += $(>) ;
  }
}

##  ExternalLibs target : identifier
##    Specify a dependency between 'target' and the external library indicated
##    by 'identifier'.  If 'target' is an application or plugin, then it is
##    linked against the indicated external library.  If 'target' is a library,
##    then its dependency upon 'identifier' is noted, and applications or
##    plugins which link against 'target' will also be linked against the
##    library indicated by 'identifier'.  'identifier' is the base name of a
##    set of variables which provide build tool information about the external
##    library.  In particular, the value of $(identifier).CFLAGS should provide
##    compiler flags needed for the external library indicated by 'identifier';
##    and $(identifier).LFLAGS should provide linker flags for the library.
rule ExternalLibs
{
  local i ;
  
  for i in $(>)
  {
    CFlags $(<) : $($(i).CFLAGS) ;
    LFlags $(<) : $($(i).LFLAGS) ;
    
    if $($(<)_TYPE) = library
    {
      $(<).EXTERNALLIBS += $(i) ;
    }
  }
}

##  ExtraObjects target : objectfiles [ : options ]
##    Link additional object files with a target.
##    Options:
##      inheritcflags: The mentioned object files will inherit compiler flags
##      assigned to target's normal object files (in addition to any flags
##      already set manually).
rule ExtraObjects
{
  CheckOptions inheritcflags : $(3) : $(<) ;
  if [ IsElem inheritcflags : $(3) ]
  {
    $(<)_OBJECTS += $(>) ;
  }
  EXTRAOBJECTS on $($(<)_TARGET) += $(>) ;
  Depends $($(<)_TARGET) : $(>) ;
  Clean $(<)clean : $(>) ;
  Clean clean : $(>) ;
}

#----------------------------------------------------------------------------
# private part

##  ResolveLibs libs
##    Given a list of libraries, augment the list by adding other libraries
##    upon which the given libraries depend.  Dependencies between libraries
##    are specified via LibDepends (or LinkWith when the target is a library).
##    The returned list is ordered such that it issuitable for Unix linkers
##    which are sensitive to the order of libraries in the invocation
##    statement.
rule ResolveLibs
{
  local i libs ;
  for i in $(<)
  {
      libs += $(i) $($(i)_depends) ;
  }
  # We must eliminate the duplicates in reverse order in order to ensure that
  # we do not destroy the overall library ordering since Unix linkers are
  # order-sensitive.
  return [ Reverse [ RemoveDups [ Reverse $(libs) ] ] ] ;
}
