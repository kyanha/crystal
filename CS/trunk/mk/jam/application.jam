#============================================================================
# Rules for compiling applications
#============================================================================

##  Application appname : sources [ : options ]
##    Build an application out of sourcefiles. All sourcefiles will be passed
##    to the Objects rule which tries to compile them into object-files. You
##    can create rules for your own filetypes with the UserObject rule. Header
##    files will just be ignored. They are only used for MSVC projectfile
##    generation.
##    Possible options are "noinstall" if you don't want a default install
##    target to be created and "console" if you're building a console
##    application (an application without any graphical output which is
##    intended to be used on commandline)
##    Some notes: You should not add the .exe extension to the appname - jam
##    will do that on win32.
##    If you have sourcefiles in subdirectories, then you'll need to use the
##    SearchSubdir rule. Never specify sourcefiles with paths, only specify
##    the filenames.
rule Application
{
  # check options
  _Options $(<) : $(3) ;
    
  # filter headers
  local sources = [ FGristFiles $(>) ] ;

  if $(USE_PLUGINS) = "no"
  {
    BuildStaticFile ;
    sources += $(STATICINITFILE:S=.o) ;
  }

  # Allow overriding of application suffix for gui/console (if defined).
  local suffix = $(SUFEXE) ;
  if $(CONSOLEAPP_$(<)) = "yes"
  {
    if $(APPLICATION.SUFFIX.CONSOLE)
    {
      suffix = $(APPLICATION.SUFFIX.CONSOLE) ;
    }
  }
  else
  {
    if $(APPLICATION.SUFFIX.GUI)
    {
      suffix = $(APPLICATION.SUFFIX.GUI) ;
    }
  }
  local SUFEXE = $(suffix) ;

  $(<)_type = application ;
  $(<)_target = [ FAppendSuffix $(<) : $(SUFEXE) ] ;
  $(<)_objects = [ CompileObjects $(sources) ] ;
  ApplicationFromObjects $(<) : $($(<)_objects) ;
  CFlags $(<) : $(APPLICATION.CFLAGS) ;
  LFlags $(<) : $(LINKLIBS) $(APPLICATION.LFLAGS) ;

  if $(USE_PLUGINS) = "no"
  {
    LinkWith $(<) : $(STATIC.PLUGINS) $(STATIC.LINKWITH) ;
    LFlags $(<) : $(LFLAGS.STATIC) ;
  }
}

#----------------------------------------------------------------------------
# private part

rule ApplicationFromObjects
{
  local target ;
  local apptype = GUI ;
  if $(CONSOLEAPP_$(<))
  {
    apptype = CONSOLE ;
  }
  
  target = $($(<)_target) ;

  # so 'jam foo' works when it's really foo.exe (Windows) or foo.app (MacOS/X)
  if $(target) != $(<)
  {
    Depends $(<) : $(target) ;
    NotFile $(<) ;
  }

  # make compiled sources a dependency of target
  Depends apps : $(target) ;
  Depends $(target) : $(>) ;
	
  MakeLocate $(target) : $(LOCATE.TARGETS) ;
	
  # construct Install Targets
  if ! $(DONTINSTALL_$(<))
  {
    InstallApplication $(target) ;
  }

  # construct Clean Targets
  local cleanrule = "Clean" ;
  if $(APPLICATION.CLEAN.$(apptype))
  {
    cleanrule = $(APPLICATION.CLEAN.$(apptype)) ;
  }
  $(cleanrule) clean : $(target) ;
  $(cleanrule) $(<)clean : $(target) ;

  # Invoke Link rule
  NAME on $(target) = $(<) ;
  if $(apptype) = CONSOLE
  {
    LinkApplicationConsole $(target) : $(>) ;
  }
  else
  {
    LinkApplication $(target) : $(>) ;
  }
}

rule Option_console
{
  CONSOLEAPP_$(<) = yes ;
}

rule Option_noinstall
{
  DONTINSTALL_$(<) = yes ;
}

rule Option_install
{
  DONTINSTALL_$(<) = ;
}

# Construct pseudo target apps which is used instead of the pseudo target exe
# in Jambase
Depends exe : apps ;
NotFile apps ;

