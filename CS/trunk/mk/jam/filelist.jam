#============================================================================
# Rules for file list creation
# Copyright (C)2008 by Frank Richter
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Library General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or (at your
#    option) any later version.
#
#    This library is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
#    License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; if not, write to the Free Software Foundation,
#    Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#============================================================================

ALL_LISTS = ;

##  ListFile list
##    Returns the output file name for a certain file list.
rule ListFile
{
    listfile = $(1).txt ;
    local dir = [ ConcatDirs $(BUILDTOP) out lists ] ;
    MakeLocate $(listfile) : $(dir) ;
    SEARCH on $(listfile) = $(dir) ;
    Clean filelistsclean : $(listfile) ;
    Depends clean : filelistsclean ;
    return $(listfile) ;
}

##  DoFileListEntries sourcenames : directory : list [: destnames]
##    Creates a new target adding the given sources named by
##    `sourcenames' to the file list `list`.  `directory' is a list of 
##    directory components indicating the directory part for entries of
##    `sourcenames' written to the file list - it is relative to a file list
##    dependent directory.  The DoFileListEntries rule returns the names of
##    the file list targets.
rule DoFileListEntries
{
    local targets i destnames ;
    destnames = $(4) ;

    for i in $(1)
    {
        local destname = $(destnames[1]) ;
        if ! $(destname) { destname = $(i) ; }
        targets += [ DoFileListEntry $(i) : $(2) : $(destname) : $(3) ] ;
        destnames = $(destnames[2-]) ;
    }

    return $(targets) ;
}

##  DoFileListEntry sourcename : directory : destname : list
##    Creates a new target adding the given source named by
##    `sourcename' to the file list `list`.  `destname` is the filename
##    used in the destination part of the file list entry.  `directory' 
##    is a list of directory components indicating the directory part for
##    `destname' written to the file list - it is relative to a file list
##    dependent directory.  The DoFileListEntry rule returns the names of
##    the file list target.
rule DoFileListEntry
{
    local target destdir srcdir listfile list ;
    dir = [ ConcatDirs $(2) ] ;
    target = $(1:G=filelist!$(SUBDIR:J=!)) ;
    list = $(4) ;
    
    if ! [ IsElem $(list) : $(ALL_LISTS) ]
    {
      ALL_LISTS += $(list) ;
    }
    
    listfile = [ ListFile $(list) ] ;
    
    SEARCH on $(target) = [ on $(1) GetVar SEARCH ] ;
    NoCare $(target) ;
    NoUpdate $(target) ;
    WriteFileListEntry $(listfile) : $(target) : $(dir) : $(3) ;

    LIST_ENTRIES_$(list) += $(target) ;
    
    return $(listfile) ;
}

##  FileListEntriesData sourcenames : directories : list [: destnames]
##    Add plain files to a file list.
##    ´destnames` is an optional list of file names to use on the destination
##    side of the file list entry. If given, must have the same number of
##    items as `sourcenames`.
rule FileListEntriesData
{
    SEARCH on $(<) = $(SUBDIR) ;
    Depends filelists : [ DoFileListEntries $(<) : $(2) : $(3) : $(4) ] ;
}

##  FileListEntryApplications app : list
rule FileListEntryApplications
{
    $($(1)_TARGET)_FILELIST = $(2) ;
    Depends filelists :
      [ SystemDoFileListEntryApplications $(1) : $(2) ] ;
}

##  FileListEntryPlugin plugin : list
rule FileListEntryPlugin
{
    $($(1)_TARGET)_FILELIST = $(2) ;
    Depends filelists :
      [ SystemDoFileListEntryPlugin $(1) : $(2) ] ;
}

#----------------------------------------------------------------------------

rule WriteFileListEntry
{
  local listfile = $(1) ;
  local srcfile = $(2) ;
  
  local destname = $(4:D=$(3):G=) ;
  if $(destname) = ""
  {
    destname = $(4:G=) ;
  }
  
  local listfile_gristed = $(listfile:G=$(destname)) ;
  MakeLocate $(listfile_gristed) : [ on $(listfile) GetVar LOCATE ] ;
  Depends $(listfile_gristed) : $(srcfile) ;
  
  DESTNAME on $(listfile_gristed) = $(destname) ;
  LOCATE on $(srcfile) = [ on $(srcfile) GetVar SEARCH ] ;
  if $($(listfile)_CREATED) != "yes"
  {
    WriteFileListEntry1 $(listfile_gristed) : $(srcfile) ;
    $(listfile)_CREATED = yes ;
  }
  else
  {
    WriteFileListEntry2 $(listfile_gristed) : $(srcfile) ;
  }
  Depends $(listfile) : $(listfile_gristed) ;
}

actions WriteFileListEntry1
{
  echo "$(>):$(DESTNAME)" > $(<)
}

actions WriteFileListEntry2
{
  echo "$(>):$(DESTNAME)" >> $(<)
}

NotFile filelists ;
Help filelists : "Generate file lists for packages" ;
