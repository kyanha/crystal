# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cstool', [dirname(__file__)])
        except ImportError:
            import _cstool
            return _cstool
        if fp is not None:
            try:
                _mod = imp.load_module('_cstool', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cstool = swig_import_helper()
    del swig_import_helper
else:
    import _cstool
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
import iengine
import ivideo
import csgfx
import ivaria

def _SetSCFPointer(*args):
  return _cstool._SetSCFPointer(*args)
_SetSCFPointer = _cstool._SetSCFPointer

def _GetSCFPointer():
  return _cstool._GetSCFPointer()
_GetSCFPointer = _cstool._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

class scfFakecsColliderWrapper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cstool.new_scfFakecsColliderWrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_scfFakecsColliderWrapper
    __del__ = lambda self : None;
scfFakecsColliderWrapper_swigregister = _cstool.scfFakecsColliderWrapper_swigregister
scfFakecsColliderWrapper_swigregister(scfFakecsColliderWrapper)

class scfColliderWrapper(core.csObject,scfFakecsColliderWrapper):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def IncRef(self): return _cstool.scfColliderWrapper_IncRef(self)
    def DecRef(self): return _cstool.scfColliderWrapper_DecRef(self)
    def GetRefCount(self): return _cstool.scfColliderWrapper_GetRefCount(self)
    def QueryInterface(self, *args): return _cstool.scfColliderWrapper_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _cstool.scfColliderWrapper_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _cstool.scfColliderWrapper_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _cstool.scfColliderWrapper_GetInterfaceMetadata(self)
scfColliderWrapper_swigregister = _cstool.scfColliderWrapper_swigregister
scfColliderWrapper_swigregister(scfColliderWrapper)

class csColliderWrapper(scfColliderWrapper):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csColliderWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csColliderWrapper
    __del__ = lambda self : None;
    def GetCollider(self): return _cstool.csColliderWrapper_GetCollider(self)
    def GetCollideSystem(self): return _cstool.csColliderWrapper_GetCollideSystem(self)
    def Collide(self, *args): return _cstool.csColliderWrapper_Collide(self, *args)
    GetColliderWrapper = staticmethod(_cstool.csColliderWrapper_GetColliderWrapper)
    def UpdateCollider(self, *args): return _cstool.csColliderWrapper_UpdateCollider(self, *args)
csColliderWrapper_swigregister = _cstool.csColliderWrapper_swigregister
csColliderWrapper_swigregister(csColliderWrapper)

def csColliderWrapper_GetColliderWrapper(*args):
  return _cstool.csColliderWrapper_GetColliderWrapper(*args)
csColliderWrapper_GetColliderWrapper = _cstool.csColliderWrapper_GetColliderWrapper

class csTraceBeamResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    closest_tri = _swig_property(_cstool.csTraceBeamResult_closest_tri_get, _cstool.csTraceBeamResult_closest_tri_set)
    closest_isect = _swig_property(_cstool.csTraceBeamResult_closest_isect_get, _cstool.csTraceBeamResult_closest_isect_set)
    closest_mesh = _swig_property(_cstool.csTraceBeamResult_closest_mesh_get, _cstool.csTraceBeamResult_closest_mesh_set)
    sqdistance = _swig_property(_cstool.csTraceBeamResult_sqdistance_get, _cstool.csTraceBeamResult_sqdistance_set)
    end_sector = _swig_property(_cstool.csTraceBeamResult_end_sector_get, _cstool.csTraceBeamResult_end_sector_set)
    def __init__(self): 
        this = _cstool.new_csTraceBeamResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csTraceBeamResult
    __del__ = lambda self : None;
csTraceBeamResult_swigregister = _cstool.csTraceBeamResult_swigregister
csTraceBeamResult_swigregister(csTraceBeamResult)

class csColliderHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    InitializeCollisionWrapper = staticmethod(_cstool.csColliderHelper_InitializeCollisionWrapper)
    InitializeCollisionWrappers = staticmethod(_cstool.csColliderHelper_InitializeCollisionWrappers)
    CollideArray = staticmethod(_cstool.csColliderHelper_CollideArray)
    CollidePath = staticmethod(_cstool.csColliderHelper_CollidePath)
    TraceBeam = staticmethod(_cstool.csColliderHelper_TraceBeam)
    def __init__(self): 
        this = _cstool.new_csColliderHelper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csColliderHelper
    __del__ = lambda self : None;
csColliderHelper_swigregister = _cstool.csColliderHelper_swigregister
csColliderHelper_swigregister(csColliderHelper)

def csColliderHelper_InitializeCollisionWrapper(*args):
  return _cstool.csColliderHelper_InitializeCollisionWrapper(*args)
csColliderHelper_InitializeCollisionWrapper = _cstool.csColliderHelper_InitializeCollisionWrapper

def csColliderHelper_InitializeCollisionWrappers(*args):
  return _cstool.csColliderHelper_InitializeCollisionWrappers(*args)
csColliderHelper_InitializeCollisionWrappers = _cstool.csColliderHelper_InitializeCollisionWrappers

def csColliderHelper_CollideArray(*args):
  return _cstool.csColliderHelper_CollideArray(*args)
csColliderHelper_CollideArray = _cstool.csColliderHelper_CollideArray

def csColliderHelper_CollidePath(*args):
  return _cstool.csColliderHelper_CollidePath(*args)
csColliderHelper_CollidePath = _cstool.csColliderHelper_CollidePath

def csColliderHelper_TraceBeam(*args):
  return _cstool.csColliderHelper_TraceBeam(*args)
csColliderHelper_TraceBeam = _cstool.csColliderHelper_TraceBeam

class csColliderActor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cstool.new_csColliderActor()
        try: self.this.append(this)
        except: self.this = this
    def SetCollideSystem(self, *args): return _cstool.csColliderActor_SetCollideSystem(self, *args)
    def SetEngine(self, *args): return _cstool.csColliderActor_SetEngine(self, *args)
    def InitializeColliders(self, *args): return _cstool.csColliderActor_InitializeColliders(self, *args)
    def SetCamera(self, *args): return _cstool.csColliderActor_SetCamera(self, *args)
    def SetGravity(self, *args): return _cstool.csColliderActor_SetGravity(self, *args)
    def GetGravity(self): return _cstool.csColliderActor_GetGravity(self)
    def IsOnGround(self): return _cstool.csColliderActor_IsOnGround(self)
    def SetOnGround(self, *args): return _cstool.csColliderActor_SetOnGround(self, *args)
    def HasCD(self): return _cstool.csColliderActor_HasCD(self)
    def SetCD(self, *args): return _cstool.csColliderActor_SetCD(self, *args)
    def EnableHitMeshes(self, *args): return _cstool.csColliderActor_EnableHitMeshes(self, *args)
    def CheckHitMeshes(self): return _cstool.csColliderActor_CheckHitMeshes(self)
    def GetHitMeshes(self): return _cstool.csColliderActor_GetHitMeshes(self)
    def Move(self, *args): return _cstool.csColliderActor_Move(self, *args)
    def GetRotation(self): return _cstool.csColliderActor_GetRotation(self)
    def SetRotation(self, *args): return _cstool.csColliderActor_SetRotation(self, *args)
    def AdjustForCollisions(self, *args): return _cstool.csColliderActor_AdjustForCollisions(self, *args)
    __swig_destroy__ = _cstool.delete_csColliderActor
    __del__ = lambda self : None;
csColliderActor_swigregister = _cstool.csColliderActor_swigregister
csColliderActor_swigregister(csColliderActor)

class scfView(ivaria.iView):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _cstool.scfView_IncRef(self)
    def DecRef(self): return _cstool.scfView_DecRef(self)
    def GetRefCount(self): return _cstool.scfView_GetRefCount(self)
    def QueryInterface(self, *args): return _cstool.scfView_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _cstool.scfView_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _cstool.scfView_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _cstool.scfView_GetInterfaceMetadata(self)
scfView_swigregister = _cstool.scfView_swigregister
scfView_swigregister(scfView)

class csView(scfView):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csView(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csView
    __del__ = lambda self : None;
    def GetEngine(self): return _cstool.csView_GetEngine(self)
    def SetEngine(self, *args): return _cstool.csView_SetEngine(self, *args)
    def GetCamera(self): return _cstool.csView_GetCamera(self)
    def SetCamera(self, *args): return _cstool.csView_SetCamera(self, *args)
    def GetPerspectiveCamera(self): return _cstool.csView_GetPerspectiveCamera(self)
    def SetPerspectiveCamera(self, *args): return _cstool.csView_SetPerspectiveCamera(self, *args)
    def GetCustomMatrixCamera(self): return _cstool.csView_GetCustomMatrixCamera(self)
    def SetCustomMatrixCamera(self, *args): return _cstool.csView_SetCustomMatrixCamera(self, *args)
    def GetContext(self): return _cstool.csView_GetContext(self)
    def SetContext(self, *args): return _cstool.csView_SetContext(self, *args)
    def SetRectangle(self, *args): return _cstool.csView_SetRectangle(self, *args)
    def ClearView(self): return _cstool.csView_ClearView(self)
    def AddViewVertex(self, *args): return _cstool.csView_AddViewVertex(self, *args)
    def RestrictClipperToScreen(self): return _cstool.csView_RestrictClipperToScreen(self)
    def SetAutoResize(self, *args): return _cstool.csView_SetAutoResize(self, *args)
    def UpdateClipper(self): return _cstool.csView_UpdateClipper(self)
    def GetClipper(self): return _cstool.csView_GetClipper(self)
    def Draw(self, mesh = None): return _cstool.csView_Draw(self, mesh)
    def GetMeshFilter(self): return _cstool.csView_GetMeshFilter(self)
    def GetWidth(self): return _cstool.csView_GetWidth(self)
    def GetHeight(self): return _cstool.csView_GetHeight(self)
    def SetWidth(self, *args): return _cstool.csView_SetWidth(self, *args)
    def SetHeight(self, *args): return _cstool.csView_SetHeight(self, *args)
    def NormalizedToScreen(self, *args): return _cstool.csView_NormalizedToScreen(self, *args)
    def ScreenToNormalized(self, *args): return _cstool.csView_ScreenToNormalized(self, *args)
csView_swigregister = _cstool.csView_swigregister
csView_swigregister(csView)


def csfxInterference(*args):
  return _cstool.csfxInterference(*args)
csfxInterference = _cstool.csfxInterference

def csfxFadeOut(*args):
  return _cstool.csfxFadeOut(*args)
csfxFadeOut = _cstool.csfxFadeOut

def csfxFadeTo(*args):
  return _cstool.csfxFadeTo(*args)
csfxFadeTo = _cstool.csfxFadeTo

def csfxFadeToColor(*args):
  return _cstool.csfxFadeToColor(*args)
csfxFadeToColor = _cstool.csfxFadeToColor

def csfxGreenScreen(*args):
  return _cstool.csfxGreenScreen(*args)
csfxGreenScreen = _cstool.csfxGreenScreen

def csfxRedScreen(*args):
  return _cstool.csfxRedScreen(*args)
csfxRedScreen = _cstool.csfxRedScreen

def csfxBlueScreen(*args):
  return _cstool.csfxBlueScreen(*args)
csfxBlueScreen = _cstool.csfxBlueScreen

def csfxWhiteOut(*args):
  return _cstool.csfxWhiteOut(*args)
csfxWhiteOut = _cstool.csfxWhiteOut

def csfxScreenDPFX(*args):
  return _cstool.csfxScreenDPFX(*args)
csfxScreenDPFX = _cstool.csfxScreenDPFX

def csfxScreenDPFXPartial(*args):
  return _cstool.csfxScreenDPFXPartial(*args)
csfxScreenDPFXPartial = _cstool.csfxScreenDPFXPartial
class csPixmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cstool.delete_csPixmap
    __del__ = lambda self : None;
    def Width(self): return _cstool.csPixmap_Width(self)
    def Height(self): return _cstool.csPixmap_Height(self)
    def Advance(self, *args): return _cstool.csPixmap_Advance(self, *args)
    def GetTextureHandle(self): return _cstool.csPixmap_GetTextureHandle(self)
    def DrawScaled(self, *args): return _cstool.csPixmap_DrawScaled(self, *args)
    def DrawScaledAlign(self, *args): return _cstool.csPixmap_DrawScaledAlign(self, *args)
    def Draw(self, *args): return _cstool.csPixmap_Draw(self, *args)
    def DrawAlign(self, *args): return _cstool.csPixmap_DrawAlign(self, *args)
    def DrawTiled(self, *args): return _cstool.csPixmap_DrawTiled(self, *args)
csPixmap_swigregister = _cstool.csPixmap_swigregister
csPixmap_swigregister(csPixmap)

def csfxShadeVert(*args):
  return _cstool.csfxShadeVert(*args)
csfxShadeVert = _cstool.csfxShadeVert

class csSimplePixmap(csPixmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csSimplePixmap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csSimplePixmap
    __del__ = lambda self : None;
    def SetTextureHandle(self, *args): return _cstool.csSimplePixmap_SetTextureHandle(self, *args)
    def SetTextureRectangle(self, *args): return _cstool.csSimplePixmap_SetTextureRectangle(self, *args)
    def DrawScaled(self, *args): return _cstool.csSimplePixmap_DrawScaled(self, *args)
    def DrawTiled(self, *args): return _cstool.csSimplePixmap_DrawTiled(self, *args)
    def Width(self): return _cstool.csSimplePixmap_Width(self)
    def Height(self): return _cstool.csSimplePixmap_Height(self)
    def Advance(self, *args): return _cstool.csSimplePixmap_Advance(self, *args)
    def GetTextureHandle(self): return _cstool.csSimplePixmap_GetTextureHandle(self)
csSimplePixmap_swigregister = _cstool.csSimplePixmap_swigregister
csSimplePixmap_swigregister(csSimplePixmap)

class csShortestDistanceResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sqdistance = _swig_property(_cstool.csShortestDistanceResult_sqdistance_get, _cstool.csShortestDistanceResult_sqdistance_set)
    direction = _swig_property(_cstool.csShortestDistanceResult_direction_get, _cstool.csShortestDistanceResult_direction_set)
    def __init__(self): 
        this = _cstool.new_csShortestDistanceResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csShortestDistanceResult
    __del__ = lambda self : None;
csShortestDistanceResult_swigregister = _cstool.csShortestDistanceResult_swigregister
csShortestDistanceResult_swigregister(csShortestDistanceResult)

class csScreenTargetResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mesh = _swig_property(_cstool.csScreenTargetResult_mesh_get, _cstool.csScreenTargetResult_mesh_set)
    isect = _swig_property(_cstool.csScreenTargetResult_isect_get, _cstool.csScreenTargetResult_isect_set)
    polygon_idx = _swig_property(_cstool.csScreenTargetResult_polygon_idx_get, _cstool.csScreenTargetResult_polygon_idx_set)
    def __init__(self): 
        this = _cstool.new_csScreenTargetResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csScreenTargetResult
    __del__ = lambda self : None;
csScreenTargetResult_swigregister = _cstool.csScreenTargetResult_swigregister
csScreenTargetResult_swigregister(csScreenTargetResult)

class csEngineTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    FindShortestDistance = staticmethod(_cstool.csEngineTools_FindShortestDistance)
    FindScreenTarget = staticmethod(_cstool.csEngineTools_FindScreenTarget)
    def __init__(self): 
        this = _cstool.new_csEngineTools()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csEngineTools
    __del__ = lambda self : None;
csEngineTools_swigregister = _cstool.csEngineTools_swigregister
csEngineTools_swigregister(csEngineTools)

def csEngineTools_FindShortestDistance(*args):
  return _cstool.csEngineTools_FindShortestDistance(*args)
csEngineTools_FindShortestDistance = _cstool.csEngineTools_FindShortestDistance

def csEngineTools_FindScreenTarget(*args):
  return _cstool.csEngineTools_FindScreenTarget(*args)
csEngineTools_FindScreenTarget = _cstool.csEngineTools_FindScreenTarget

class TextureMapper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cstool.delete_TextureMapper
    __del__ = lambda self : None;
    def Map(self, *args): return _cstool.TextureMapper_Map(self, *args)
TextureMapper_swigregister = _cstool.TextureMapper_swigregister
TextureMapper_swigregister(TextureMapper)

class TableTextureMapper(TextureMapper):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_TableTextureMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_TableTextureMapper
    __del__ = lambda self : None;
    def Map(self, *args): return _cstool.TableTextureMapper_Map(self, *args)
TableTextureMapper_swigregister = _cstool.TableTextureMapper_swigregister
TableTextureMapper_swigregister(TableTextureMapper)

class DensityTextureMapper(TextureMapper):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_DensityTextureMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_DensityTextureMapper
    __del__ = lambda self : None;
    def Map(self, *args): return _cstool.DensityTextureMapper_Map(self, *args)
DensityTextureMapper_swigregister = _cstool.DensityTextureMapper_swigregister
DensityTextureMapper_swigregister(DensityTextureMapper)

class Primitives(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CS_PRIMBOX_INSIDE = _cstool.Primitives_CS_PRIMBOX_INSIDE
    CS_PRIMBOX_SMOOTH = _cstool.Primitives_CS_PRIMBOX_SMOOTH
    GenerateBox = staticmethod(_cstool.Primitives_GenerateBox)
    GenerateQuad = staticmethod(_cstool.Primitives_GenerateQuad)
    GenerateTesselatedQuad = staticmethod(_cstool.Primitives_GenerateTesselatedQuad)
    GenerateCylinder = staticmethod(_cstool.Primitives_GenerateCylinder)
    GenerateCapsule = staticmethod(_cstool.Primitives_GenerateCapsule)
    GenerateSphere = staticmethod(_cstool.Primitives_GenerateSphere)
    GenerateCone = staticmethod(_cstool.Primitives_GenerateCone)
    def __init__(self): 
        this = _cstool.new_Primitives()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_Primitives
    __del__ = lambda self : None;
Primitives_swigregister = _cstool.Primitives_swigregister
Primitives_swigregister(Primitives)

def Primitives_GenerateBox(*args):
  return _cstool.Primitives_GenerateBox(*args)
Primitives_GenerateBox = _cstool.Primitives_GenerateBox

def Primitives_GenerateQuad(*args):
  return _cstool.Primitives_GenerateQuad(*args)
Primitives_GenerateQuad = _cstool.Primitives_GenerateQuad

def Primitives_GenerateTesselatedQuad(*args):
  return _cstool.Primitives_GenerateTesselatedQuad(*args)
Primitives_GenerateTesselatedQuad = _cstool.Primitives_GenerateTesselatedQuad

def Primitives_GenerateCylinder(*args):
  return _cstool.Primitives_GenerateCylinder(*args)
Primitives_GenerateCylinder = _cstool.Primitives_GenerateCylinder

def Primitives_GenerateCapsule(*args):
  return _cstool.Primitives_GenerateCapsule(*args)
Primitives_GenerateCapsule = _cstool.Primitives_GenerateCapsule

def Primitives_GenerateSphere(*args):
  return _cstool.Primitives_GenerateSphere(*args)
Primitives_GenerateSphere = _cstool.Primitives_GenerateSphere

def Primitives_GenerateCone(*args):
  return _cstool.Primitives_GenerateCone(*args)
Primitives_GenerateCone = _cstool.Primitives_GenerateCone

class csPrimitives(Primitives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cstool.new_csPrimitives()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csPrimitives
    __del__ = lambda self : None;
csPrimitives_swigregister = _cstool.csPrimitives_swigregister
csPrimitives_swigregister(csPrimitives)

class Primitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cstool.delete_Primitive
    __del__ = lambda self : None;
    def Append(self, *args): return _cstool.Primitive_Append(self, *args)
Primitive_swigregister = _cstool.Primitive_swigregister
Primitive_swigregister(Primitive)

class TesselatedQuad(Primitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_TesselatedQuad(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_TesselatedQuad
    __del__ = lambda self : None;
    def SetLevel(self, *args): return _cstool.TesselatedQuad_SetLevel(self, *args)
    def GetLevel(self): return _cstool.TesselatedQuad_GetLevel(self)
    def SetMapper(self, *args): return _cstool.TesselatedQuad_SetMapper(self, *args)
    def Append(self, *args): return _cstool.TesselatedQuad_Append(self, *args)
TesselatedQuad_swigregister = _cstool.TesselatedQuad_swigregister
TesselatedQuad_swigregister(TesselatedQuad)

class TesselatedBox(Primitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_TesselatedBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_TesselatedBox
    __del__ = lambda self : None;
    def SetLevel(self, *args): return _cstool.TesselatedBox_SetLevel(self, *args)
    def GetLevel(self): return _cstool.TesselatedBox_GetLevel(self)
    def SetMapper(self, *args): return _cstool.TesselatedBox_SetMapper(self, *args)
    def SetFlags(self, *args): return _cstool.TesselatedBox_SetFlags(self, *args)
    def GetFlags(self): return _cstool.TesselatedBox_GetFlags(self)
    def Append(self, *args): return _cstool.TesselatedBox_Append(self, *args)
TesselatedBox_swigregister = _cstool.TesselatedBox_swigregister
TesselatedBox_swigregister(TesselatedBox)

class Box(Primitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_Box
    __del__ = lambda self : None;
    def SetMapper(self, *args): return _cstool.Box_SetMapper(self, *args)
    def SetFlags(self, *args): return _cstool.Box_SetFlags(self, *args)
    def GetFlags(self): return _cstool.Box_GetFlags(self)
    def Append(self, *args): return _cstool.Box_Append(self, *args)
Box_swigregister = _cstool.Box_swigregister
Box_swigregister(Box)

class Capsule(Primitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_Capsule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_Capsule
    __del__ = lambda self : None;
    def SetMapper(self, *args): return _cstool.Capsule_SetMapper(self, *args)
    def Append(self, *args): return _cstool.Capsule_Append(self, *args)
Capsule_swigregister = _cstool.Capsule_swigregister
Capsule_swigregister(Capsule)

class Sphere(Primitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_Sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_Sphere
    __del__ = lambda self : None;
    def SetCylindricalMapping(self, *args): return _cstool.Sphere_SetCylindricalMapping(self, *args)
    def HasCylindricalMapping(self): return _cstool.Sphere_HasCylindricalMapping(self)
    def SetTopOnly(self, *args): return _cstool.Sphere_SetTopOnly(self, *args)
    def IsTopOnly(self): return _cstool.Sphere_IsTopOnly(self)
    def SetReversed(self, *args): return _cstool.Sphere_SetReversed(self, *args)
    def IsReversed(self): return _cstool.Sphere_IsReversed(self)
    def SetMapper(self, *args): return _cstool.Sphere_SetMapper(self, *args)
    def Append(self, *args): return _cstool.Sphere_Append(self, *args)
Sphere_swigregister = _cstool.Sphere_swigregister
Sphere_swigregister(Sphere)

class Cone(Primitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_Cone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_Cone
    __del__ = lambda self : None;
    def SetMapper(self, *args): return _cstool.Cone_SetMapper(self, *args)
    def Append(self, *args): return _cstool.Cone_Append(self, *args)
Cone_swigregister = _cstool.Cone_swigregister
Cone_swigregister(Cone)

class GeneralMeshBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CreateFactory = staticmethod(_cstool.GeneralMeshBuilder_CreateFactory)
    CreateMesh = staticmethod(_cstool.GeneralMeshBuilder_CreateMesh)
    CreateFactoryAndMesh = staticmethod(_cstool.GeneralMeshBuilder_CreateFactoryAndMesh)
    def __init__(self): 
        this = _cstool.new_GeneralMeshBuilder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_GeneralMeshBuilder
    __del__ = lambda self : None;
GeneralMeshBuilder_swigregister = _cstool.GeneralMeshBuilder_swigregister
GeneralMeshBuilder_swigregister(GeneralMeshBuilder)

def GeneralMeshBuilder_CreateFactory(*args):
  return _cstool.GeneralMeshBuilder_CreateFactory(*args)
GeneralMeshBuilder_CreateFactory = _cstool.GeneralMeshBuilder_CreateFactory

def GeneralMeshBuilder_CreateMesh(*args):
  return _cstool.GeneralMeshBuilder_CreateMesh(*args)
GeneralMeshBuilder_CreateMesh = _cstool.GeneralMeshBuilder_CreateMesh

def GeneralMeshBuilder_CreateFactoryAndMesh(*args):
  return _cstool.GeneralMeshBuilder_CreateFactoryAndMesh(*args)
GeneralMeshBuilder_CreateFactoryAndMesh = _cstool.GeneralMeshBuilder_CreateFactoryAndMesh

CS_PEN_TA_TOP = _cstool.CS_PEN_TA_TOP
CS_PEN_TA_BOT = _cstool.CS_PEN_TA_BOT
CS_PEN_TA_LEFT = _cstool.CS_PEN_TA_LEFT
CS_PEN_TA_RIGHT = _cstool.CS_PEN_TA_RIGHT
CS_PEN_TA_CENTER = _cstool.CS_PEN_TA_CENTER
CS_PEN_FILL = _cstool.CS_PEN_FILL
CS_PEN_SWAPCOLORS = _cstool.CS_PEN_SWAPCOLORS
CS_PEN_TEXTURE_ONLY = _cstool.CS_PEN_TEXTURE_ONLY
CS_PEN_TEXTURE = _cstool.CS_PEN_TEXTURE
class csPenCoordinate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_cstool.csPenCoordinate_x_get, _cstool.csPenCoordinate_x_set)
    y = _swig_property(_cstool.csPenCoordinate_y_get, _cstool.csPenCoordinate_y_set)
    def __init__(self, *args): 
        this = _cstool.new_csPenCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csPenCoordinate
    __del__ = lambda self : None;
csPenCoordinate_swigregister = _cstool.csPenCoordinate_swigregister
csPenCoordinate_swigregister(csPenCoordinate)

class csPenCoordinatePair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    c1 = _swig_property(_cstool.csPenCoordinatePair_c1_get, _cstool.csPenCoordinatePair_c1_set)
    c2 = _swig_property(_cstool.csPenCoordinatePair_c2_get, _cstool.csPenCoordinatePair_c2_set)
    def __init__(self, *args): 
        this = _cstool.new_csPenCoordinatePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csPenCoordinatePair
    __del__ = lambda self : None;
csPenCoordinatePair_swigregister = _cstool.csPenCoordinatePair_swigregister
csPenCoordinatePair_swigregister(csPenCoordinatePair)

class csPenCache(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def PushMesh(self, *args): return _cstool.csPenCache_PushMesh(self, *args)
    def Render(self, *args): return _cstool.csPenCache_Render(self, *args)
    def Clear(self): return _cstool.csPenCache_Clear(self)
    def SetTransform(self, *args): return _cstool.csPenCache_SetTransform(self, *args)
    def __init__(self): 
        this = _cstool.new_csPenCache()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csPenCache
    __del__ = lambda self : None;
csPenCache_swigregister = _cstool.csPenCache_swigregister
csPenCache_swigregister(csPenCache)

class csPen(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csPen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csPen
    __del__ = lambda self : None;
    def SetActiveCache(self, *args): return _cstool.csPen_SetActiveCache(self, *args)
    def SetFlag(self, *args): return _cstool.csPen_SetFlag(self, *args)
    def ClearFlag(self, *args): return _cstool.csPen_ClearFlag(self, *args)
    def SetMixMode(self, *args): return _cstool.csPen_SetMixMode(self, *args)
    def SetColor(self, *args): return _cstool.csPen_SetColor(self, *args)
    def SetTexture(self, *args): return _cstool.csPen_SetTexture(self, *args)
    def SwapColors(self): return _cstool.csPen_SwapColors(self)
    def SetPenWidth(self, *args): return _cstool.csPen_SetPenWidth(self, *args)
    def ClearTransform(self): return _cstool.csPen_ClearTransform(self)
    def PushTransform(self): return _cstool.csPen_PushTransform(self)
    def PopTransform(self): return _cstool.csPen_PopTransform(self)
    def SetOrigin(self, *args): return _cstool.csPen_SetOrigin(self, *args)
    def Translate(self, *args): return _cstool.csPen_Translate(self, *args)
    def SetTransform(self, *args): return _cstool.csPen_SetTransform(self, *args)
    def ClipLine(self, *args): return _cstool.csPen_ClipLine(self, *args)
    def DrawLine(self, *args): return _cstool.csPen_DrawLine(self, *args)
    def DrawThickLine(self, *args): return _cstool.csPen_DrawThickLine(self, *args)
    def DrawLines(self, *args): return _cstool.csPen_DrawLines(self, *args)
    def DrawThickLines(self, *args): return _cstool.csPen_DrawThickLines(self, *args)
    def DrawPoint(self, *args): return _cstool.csPen_DrawPoint(self, *args)
    def DrawRect(self, *args): return _cstool.csPen_DrawRect(self, *args)
    def DrawMiteredRect(self, *args): return _cstool.csPen_DrawMiteredRect(self, *args)
    def DrawRoundedRect(self, *args): return _cstool.csPen_DrawRoundedRect(self, *args)
    def DrawArc(self, *args): return _cstool.csPen_DrawArc(self, *args)
    def DrawTriangle(self, *args): return _cstool.csPen_DrawTriangle(self, *args)
    def Write(self, *args): return _cstool.csPen_Write(self, *args)
    def WriteLines(self, *args): return _cstool.csPen_WriteLines(self, *args)
    def WriteBoxed(self, *args): return _cstool.csPen_WriteBoxed(self, *args)
    def WriteLinesBoxed(self, *args): return _cstool.csPen_WriteLinesBoxed(self, *args)
    def _Rotate(self, *args): return _cstool.csPen__Rotate(self, *args)
    def Rotate(self,a):
         return _cspace.csPen__Rotate(a)

csPen_swigregister = _cstool.csPen_swigregister
csPen_swigregister(csPen)

class csPen3DCoordinatePair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    c1 = _swig_property(_cstool.csPen3DCoordinatePair_c1_get, _cstool.csPen3DCoordinatePair_c1_set)
    c2 = _swig_property(_cstool.csPen3DCoordinatePair_c2_get, _cstool.csPen3DCoordinatePair_c2_set)
    def __init__(self, *args): 
        this = _cstool.new_csPen3DCoordinatePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csPen3DCoordinatePair
    __del__ = lambda self : None;
csPen3DCoordinatePair_swigregister = _cstool.csPen3DCoordinatePair_swigregister
csPen3DCoordinatePair_swigregister(csPen3DCoordinatePair)

class csPen3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csPen3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csPen3D
    __del__ = lambda self : None;
    def SetActiveCache(self, *args): return _cstool.csPen3D_SetActiveCache(self, *args)
    def SetMixMode(self, *args): return _cstool.csPen3D_SetMixMode(self, *args)
    def SetColor(self, *args): return _cstool.csPen3D_SetColor(self, *args)
    def SetTransform(self, *args): return _cstool.csPen3D_SetTransform(self, *args)
    def SetLocal2ObjectTransform(self, *args): return _cstool.csPen3D_SetLocal2ObjectTransform(self, *args)
    def GetLocal2ObjectTransform(self): return _cstool.csPen3D_GetLocal2ObjectTransform(self)
    def DrawLine(self, *args): return _cstool.csPen3D_DrawLine(self, *args)
    def DrawLines(self, *args): return _cstool.csPen3D_DrawLines(self, *args)
    def DrawBox(self, *args): return _cstool.csPen3D_DrawBox(self, *args)
    def DrawArc(self, *args): return _cstool.csPen3D_DrawArc(self, *args)
    def DrawCylinder(self, *args): return _cstool.csPen3D_DrawCylinder(self, *args)
csPen3D_swigregister = _cstool.csPen3D_swigregister
csPen3D_swigregister(csPen3D)

class scfProcTexture(core.csObject,iengine.iTextureWrapper,csgfx.iProcTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _cstool.scfProcTexture_IncRef(self)
    def DecRef(self): return _cstool.scfProcTexture_DecRef(self)
    def GetRefCount(self): return _cstool.scfProcTexture_GetRefCount(self)
    def QueryInterface(self, *args): return _cstool.scfProcTexture_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _cstool.scfProcTexture_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _cstool.scfProcTexture_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _cstool.scfProcTexture_GetInterfaceMetadata(self)
scfProcTexture_swigregister = _cstool.scfProcTexture_swigregister
scfProcTexture_swigregister(scfProcTexture)

class csThreadManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csThreadManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csThreadManager
    __del__ = lambda self : None;
    def Init(self, *args): return _cstool.csThreadManager_Init(self, *args)
    def Process(self, num = 1): return _cstool.csThreadManager_Process(self, num)
    def Wait(self, *args): return _cstool.csThreadManager_Wait(self, *args)
    def ProcessAll(self): return _cstool.csThreadManager_ProcessAll(self)
    def PushToQueue(self, *args): return _cstool.csThreadManager_PushToQueue(self, *args)
    def RunNow(self, *args): return _cstool.csThreadManager_RunNow(self, *args)
    def GetThreadCount(self): return _cstool.csThreadManager_GetThreadCount(self)
    def SetAlwaysRunNow(self, *args): return _cstool.csThreadManager_SetAlwaysRunNow(self, *args)
    def GetAlwaysRunNow(self): return _cstool.csThreadManager_GetAlwaysRunNow(self)
    def Exiting(self): return _cstool.csThreadManager_Exiting(self)
csThreadManager_swigregister = _cstool.csThreadManager_swigregister
csThreadManager_swigregister(csThreadManager)

class csThreadReturn(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csThreadReturn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csThreadReturn
    __del__ = lambda self : None;
    def IsFinished(self): return _cstool.csThreadReturn_IsFinished(self)
    def WasSuccessful(self): return _cstool.csThreadReturn_WasSuccessful(self)
    def GetResultPtr(self): return _cstool.csThreadReturn_GetResultPtr(self)
    def GetResultRefPtr(self): return _cstool.csThreadReturn_GetResultRefPtr(self)
    def MarkFinished(self): return _cstool.csThreadReturn_MarkFinished(self)
    def MarkSuccessful(self): return _cstool.csThreadReturn_MarkSuccessful(self)
    def SetResult(self, *args): return _cstool.csThreadReturn_SetResult(self, *args)
    def Copy(self, *args): return _cstool.csThreadReturn_Copy(self, *args)
    def Wait(self, process = True): return _cstool.csThreadReturn_Wait(self, process)
    def SetWaitPtrs(self, *args): return _cstool.csThreadReturn_SetWaitPtrs(self, *args)
    def SetJob(self, *args): return _cstool.csThreadReturn_SetJob(self, *args)
    def GetJob(self): return _cstool.csThreadReturn_GetJob(self)
csThreadReturn_swigregister = _cstool.csThreadReturn_swigregister
csThreadReturn_swigregister(csThreadReturn)

class iProcTexCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetProcTexture(self): return _cstool.iProcTexCallback_GetProcTexture(self)
    __swig_destroy__ = _cstool.delete_iProcTexCallback
    __del__ = lambda self : None;
iProcTexCallback_swigregister = _cstool.iProcTexCallback_swigregister
iProcTexCallback_swigregister(iProcTexCallback)

class csProcTexture(scfProcTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    last_cur_time = _swig_property(_cstool.csProcTexture_last_cur_time_get, _cstool.csProcTexture_last_cur_time_set)
    __swig_destroy__ = _cstool.delete_csProcTexture
    __del__ = lambda self : None;
    def GetG3D(self): return _cstool.csProcTexture_GetG3D(self)
    def GetG2D(self): return _cstool.csProcTexture_GetG2D(self)
    def GetObjectRegistry(self): return _cstool.csProcTexture_GetObjectRegistry(self)
    def DisableAutoUpdate(self): return _cstool.csProcTexture_DisableAutoUpdate(self)
    def Initialize(self, *args): return _cstool.csProcTexture_Initialize(self, *args)
    def PrepareAnim(self): return _cstool.csProcTexture_PrepareAnim(self)
    def SetKeyColor(self, *args): return _cstool.csProcTexture_SetKeyColor(self, *args)
    def Animate(self, *args): return _cstool.csProcTexture_Animate(self, *args)
    def GetDimension(self): return _cstool.csProcTexture_GetDimension(self)
    GetRandom = staticmethod(_cstool.csProcTexture_GetRandom)
    def GetTextureWrapper(self): return _cstool.csProcTexture_GetTextureWrapper(self)
    def SelfDestruct(self): return _cstool.csProcTexture_SelfDestruct(self)
csProcTexture_swigregister = _cstool.csProcTexture_swigregister
csProcTexture_swigregister(csProcTexture)

def csProcTexture_GetRandom(*args):
  return _cstool.csProcTexture_GetRandom(*args)
csProcTexture_GetRandom = _cstool.csProcTexture_GetRandom

class csProcAnimated(csProcTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cstool.new_csProcAnimated(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_csProcAnimated
    __del__ = lambda self : None;
    def PrepareAnim(self): return _cstool.csProcAnimated_PrepareAnim(self)
    def Animate(self, *args): return _cstool.csProcAnimated_Animate(self, *args)
csProcAnimated_swigregister = _cstool.csProcAnimated_swigregister
csProcAnimated_swigregister(csProcAnimated)

class SimpleStaticLighter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CS_SHADOW_NONE = _cstool.SimpleStaticLighter_CS_SHADOW_NONE
    CS_SHADOW_CENTER = _cstool.SimpleStaticLighter_CS_SHADOW_CENTER
    CS_SHADOW_BOUNDINGBOX = _cstool.SimpleStaticLighter_CS_SHADOW_BOUNDINGBOX
    CS_SHADOW_FULL = _cstool.SimpleStaticLighter_CS_SHADOW_FULL
    ConstantColor = staticmethod(_cstool.SimpleStaticLighter_ConstantColor)
    ShineLight = staticmethod(_cstool.SimpleStaticLighter_ShineLight)
    ShineLights = staticmethod(_cstool.SimpleStaticLighter_ShineLights)
    def __init__(self): 
        this = _cstool.new_SimpleStaticLighter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cstool.delete_SimpleStaticLighter
    __del__ = lambda self : None;
SimpleStaticLighter_swigregister = _cstool.SimpleStaticLighter_swigregister
SimpleStaticLighter_swigregister(SimpleStaticLighter)

def SimpleStaticLighter_ConstantColor(*args):
  return _cstool.SimpleStaticLighter_ConstantColor(*args)
SimpleStaticLighter_ConstantColor = _cstool.SimpleStaticLighter_ConstantColor

def SimpleStaticLighter_ShineLight(*args):
  return _cstool.SimpleStaticLighter_ShineLight(*args)
SimpleStaticLighter_ShineLight = _cstool.SimpleStaticLighter_ShineLight

def SimpleStaticLighter_ShineLights(*args):
  return _cstool.SimpleStaticLighter_ShineLights(*args)
SimpleStaticLighter_ShineLights = _cstool.SimpleStaticLighter_ShineLights



