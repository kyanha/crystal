#============================================================================
# Rules for creating cs-config compile help script
#============================================================================

SubDir TOP scripts cs-config ;

rule csConfigGen
{
  LOCATE on cs-config.temppre cs-config.temppost = $(SUBDIR) ;
  Depends $(<) : Jamconfig cs-config.temppre cs-config.temppost 
  		 $(TOP)/scripts/cs-config/Jamfile ;

  # Hack to produce a makevars output similar to the 'make' build system.
  switch $(TARGET.OS)
  {
  case WIN32 :
    MAKEVARS = makevar.win32 ;
  case MACOS_X :
    MAKEVARS = makevar.macosx ;
  case * :
    MAKEVARS = makevar.unix ;
  }
  MAKEVARS = $(MAKEVARS:R=$(SUBDIR)) ;
  Depends $(<) : $(MAKEVARS) ;
}

actions csConfigGen
{
  cat $(SUBDIR)/cs-config.temppre > $(<)

  cat >> $(<) << __END__
CRYSTAL="\${CRYSTAL-$(prefix)}"
prefix="\${CRYSTAL}"
exec_prefix="\${prefix}"
makeout="$(LOCATE.OBJECTS)"
version="$(PACKAGE_VERSION)"
longversion="$(PACKAGE_STRING)"
# try to determine if we're in a source or installed CS version
if [ -r \${prefix}/include/cssysdef.h ] ; then
  includedir="\${prefix}/include"
else
  includedir="$(includedir)"
fi
syslibs=" $(LINKLIBS) "
common_cflags=" $(COMPILER.CFLAGS.MANDATORY) "
common_cxxflags=" $(COMPILER.CFLAGS.MANDATORY) $(COMPILER.C++FLAGS.MANDATORY) "

makevars()
{
cat << "__EOF__"
__END__

  cat $(MAKEVARS) >> $(<)

  echo "__EOF__" >> $(<) 
  echo "}" >> $(<)

  cat $(SUBDIR)/cs-config.temppost >> $(<)
}

ShellScript cs-config : csConfigGen ;
