
/*  A Bison parser, made from plugins/csstdldr/stdparse.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	KW_ACTION	258
#define	KW_ACTIVATE	259
#define	KW_ACTIVE	260
#define	KW_ADD	261
#define	KW_ALPHA	262
#define	KW_ATTENUATION	263
#define	KW_BECOMING_ACTIVE	264
#define	KW_BECOMING_INACTIVE	265
#define	KW_BEZIER	266
#define	KW_CAMERA	267
#define	KW_CENTER	268
#define	KW_CIRCLE	269
#define	KW_CLIP	270
#define	KW_COLLECTION	271
#define	KW_COLOR	272
#define	KW_COLORS	273
#define	KW_CONVEX	274
#define	KW_COPY	275
#define	KW_COSFACT	276
#define	KW_CURVECENTER	277
#define	KW_CURVECONTROL	278
#define	KW_CURVESCALE	279
#define	KW_DETAIL	280
#define	KW_DITHER	281
#define	KW_DYNAMIC	282
#define	KW_F	283
#define	KW_FILE	284
#define	KW_FIRST	285
#define	KW_FIRST_LEN	286
#define	KW_FLATCOL	287
#define	KW_FOG	288
#define	KW_FOR_2D	289
#define	KW_FOR_3D	290
#define	KW_FORWARD	291
#define	KW_FRAME	292
#define	KW_GOURAUD	293
#define	KW_HALO	294
#define	KW_HEIGHTMAP	295
#define	KW_IDENTITY	296
#define	KW_KEY	297
#define	KW_KEYCOLOR	298
#define	KW_LEN	299
#define	KW_LIBRARY	300
#define	KW_LIGHT	301
#define	KW_LIGHTING	302
#define	KW_LIGHTX	303
#define	KW_LIMB	304
#define	KW_MATRIX	305
#define	KW_MERGE_NORMALS	306
#define	KW_MERGE_TEXELS	307
#define	KW_MERGE_VERTICES	308
#define	KW_MIPMAP	309
#define	KW_MIRROR	310
#define	KW_MIXMODE	311
#define	KW_MOVE	312
#define	KW_MOVEABLE	313
#define	KW_MULTIPLY	314
#define	KW_MULTIPLY2	315
#define	KW_NODE	316
#define	KW_ORIG	317
#define	KW_PLANE	318
#define	KW_POLYGON	319
#define	KW_PORTAL	320
#define	KW_POSITION	321
#define	KW_PRIMARY_ACTIVE	322
#define	KW_PRIMARY_INACTIVE	323
#define	KW_RADIUS	324
#define	KW_ROT	325
#define	KW_ROT_X	326
#define	KW_ROT_Y	327
#define	KW_ROT_Z	328
#define	KW_SCALE	329
#define	KW_SCALE_X	330
#define	KW_SCALE_Y	331
#define	KW_SCALE_Z	332
#define	KW_SCRIPT	333
#define	KW_SECOND	334
#define	KW_SECONDARY_ACTIVE	335
#define	KW_SECONDARY_INACTIVE	336
#define	KW_SECOND_LEN	337
#define	KW_SECTOR	338
#define	KW_SKELETON	339
#define	KW_SKYDOME	340
#define	KW_SOUND	341
#define	KW_SOUNDS	342
#define	KW_SPRITE	343
#define	KW_SPRITE2D	344
#define	KW_START	345
#define	KW_STATBSP	346
#define	KW_STATELESS	347
#define	KW_STATIC	348
#define	KW_TEMPLATE	349
#define	KW_TERRAIN	350
#define	KW_TEX	351
#define	KW_TEXLEN	352
#define	KW_TEXNR	353
#define	KW_TEXTURE	354
#define	KW_TEXTURES	355
#define	KW_TEXTURE_LIGHTING	356
#define	KW_TEXTURE_MIPMAP	357
#define	KW_TEXTURE_SCALE	358
#define	KW_TEX_SET	359
#define	KW_TEX_SET_SELECT	360
#define	KW_THING	361
#define	KW_TRANSFORM	362
#define	KW_TRANSPARENT	363
#define	KW_TRIANGLE	364
#define	KW_TRIGGER	365
#define	KW_UPWARD	366
#define	KW_UV	367
#define	KW_UVA	368
#define	KW_UVEC	369
#define	KW_UV_SHIFT	370
#define	KW_V	371
#define	KW_VERTEX	372
#define	KW_VERTICES	373
#define	KW_VVEC	374
#define	KW_W	375
#define	KW_WARP	376
#define	KW_WORLD	377
#define	KW_yes	378
#define	KW_no	379
#define	KW_none	380
#define	KW_linear	381
#define	KW_inverse	382
#define	KW_realistic	383
#define	PARSER_VERSION	384
#define	STRING	385
#define	NUMBER	386

#line 20 "plugins/csstdldr/stdparse.y"
 /* Startup C++ code */

#include "sysdef.h"
#include "stdldr.h"
#include "csutil/cscolor.h"
#include "csgeom/math2d.h"
#include "csgeom/math3d.h"

#include "iworld.h"
#include "itxtmgr.h"

#define YYPARSE_PARAM ldr
#define THIS	((csStandardLoader *)ldr)
#define yyerror THIS->yyerror
#define yylex   THIS->yylex

/* Define this to debug parser */
//#define YYDEBUG	1

// Macros for accessing yylval as different data types
#define CSCOLOR(x)	(*(csColor *)&x)
#define CSVECTOR2(x)	(*(csVector2 *)&x)
#define CSVECTOR3(x)	(*(csVector3 *)&x)

// More shortcuts
#define STORAGE		THIS->storage
#define TEX		THIS->storage.tex
#define CAMERA		THIS->storage.camera
#define PLANE		THIS->storage.plane

#define ABORTMSG \
  { yyerror ("syntax error, loading aborted"); YYABORT; }


#line 70 "plugins/csstdldr/stdparse.y"
typedef union
{
  // Just a number
  float fval;
  // A integer number
  int ival;
  // A boolean value
  bool bval;
  // A string value
  char *string;
  // A color
  csPColor color;
  // A 2D point
  csPVector2 vect2;
  // A 3D point
  csPVector3 vect;
  // A transformation matrix
  csMatrix3 *matrix;
  // A transformation matrix/vector
  csStandardLoader::yystorage *transform;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		807
#define	YYFLAG		-32768
#define	YYNTBASE	139

#define YYTRANSLATE(x) ((unsigned)(x) <= 387 ? yytranslate[x] : 217)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   132,
   133,     2,     2,   134,   136,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   135,     2,     2,
     2,   137,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   138
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     8,     9,    16,    17,    20,    25,    26,    33,
    38,    43,    50,    51,    58,    59,    66,    72,    78,    84,
    92,    98,   104,   110,   111,   114,   115,   122,   123,   126,
   127,   133,   138,   143,   148,   153,   158,   159,   162,   168,
   169,   172,   177,   179,   182,   187,   192,   197,   202,   207,
   212,   219,   222,   228,   234,   240,   246,   254,   259,   266,
   271,   273,   276,   281,   286,   291,   293,   296,   301,   308,
   310,   313,   318,   323,   328,   333,   338,   343,   348,   353,
   358,   360,   363,   368,   373,   380,   390,   395,   396,   399,
   404,   409,   418,   427,   436,   445,   454,   463,   465,   468,
   474,   479,   484,   489,   494,   499,   505,   508,   516,   522,
   527,   532,   539,   541,   544,   546,   553,   558,   565,   570,
   573,   578,   583,   585,   588,   593,   598,   603,   605,   608,
   610,   612,   615,   620,   626,   632,   639,   644,   649,   650,
   653,   660,   661,   664,   671,   673,   676,   681,   688,   693,
   698,   700,   703,   706,   709,   712,   715,   720,   723,   726,
   727,   730,   735,   740,   745,   750,   751,   753,   755,   757,
   761,   765,   767,   769,   772,   782,   784,   785,   788,   790,
   793,   796,   801,   806,   811,   816,   823,   828,   833,   838,
   839,   842,   843,   846,   848,   851,   856,   861,   863,   866,
   871,   876,   881,   886,   889,   894,   899,   904,   909,   914,
   919,   922,   927,   932,   937,   938,   941,   942,   945,   946,
   950,   951,   956,   958,   961,   966,   971,   976,   979,   982,
   984,   987,   992,   997,  1002,  1007,  1012,  1017,  1022,  1027,
  1032,  1037,  1042,  1047,  1049,  1052,  1058,  1063,  1068,  1071,
  1076,  1082,  1087,  1089,  1091,  1093
};

static const short yyrhs[] = {    -1,
   122,   189,   132,   140,   142,   133,     0,     0,    45,   189,
   132,   141,   142,   133,     0,     0,   142,   143,     0,   100,
   132,   147,   133,     0,     0,   104,   189,   132,   144,   147,
   133,     0,    45,   132,   130,   133,     0,    87,   132,   153,
   133,     0,    90,   132,   130,   134,   192,   133,     0,     0,
    12,   189,   132,   145,   187,   133,     0,     0,    63,   189,
   132,   146,   163,   133,     0,    83,   189,   132,   157,   133,
     0,    42,   189,   132,   130,   133,     0,    16,   189,   132,
   165,   133,     0,    78,   189,   132,   130,   135,   130,   133,
     0,    48,   189,   132,   167,   133,     0,   106,   189,   132,
   169,   133,     0,    88,   189,   132,   177,   133,     0,     0,
   147,   148,     0,     0,    99,   189,   132,   149,   150,   133,
     0,     0,   150,   151,     0,     0,    54,   132,   190,   133,
   152,     0,    26,   132,   190,   133,     0,    29,   132,   130,
   133,     0,   108,   132,   191,   133,     0,    35,   132,   190,
   133,     0,    34,   132,   190,   133,     0,     0,   153,   154,
     0,    86,   189,   132,   155,   133,     0,     0,   155,   156,
     0,    29,   132,   130,   133,     0,   158,     0,   157,   158,
     0,   117,   132,   192,   133,     0,    64,   132,   204,   133,
     0,    98,   132,   130,   133,     0,    97,   132,   131,   133,
     0,    48,   132,   130,   133,     0,     4,   132,   130,   133,
     0,   110,   132,   130,   134,   130,   133,     0,    91,   199,
     0,   106,   189,   132,   171,   133,     0,    46,   189,   132,
   214,   133,     0,    88,   189,   132,   183,   133,     0,    33,
   132,   191,   131,   133,     0,    14,   132,   192,   135,   192,
   131,   133,     0,    85,   132,   159,   133,     0,    42,   132,
   130,   134,   130,   133,     0,    61,   132,   161,   133,     0,
   160,     0,   159,   160,     0,    69,   132,   131,   133,     0,
   118,   132,   207,   133,     0,    47,   132,   190,   133,     0,
   162,     0,   161,   162,     0,    66,   132,   192,   133,     0,
    42,   132,   130,   134,   130,   133,     0,   164,     0,   163,
   164,     0,    62,   132,   193,   133,     0,    30,   132,   193,
   133,     0,    79,   132,   193,   133,     0,    31,   132,   131,
   133,     0,    82,   132,   131,   133,     0,   114,   132,   192,
   133,     0,   119,   132,   192,   133,     0,    50,   132,   195,
   133,     0,   116,   132,   192,   133,     0,   166,     0,   165,
   166,     0,   106,   132,   130,   133,     0,    16,   132,   130,
   133,     0,    46,   132,   130,   134,   131,   133,     0,   110,
   132,   130,   134,   130,   136,   137,   130,   133,     0,    83,
   132,   130,   133,     0,     0,   167,   168,     0,     5,   132,
   131,   133,     0,    92,   132,   131,   133,     0,    67,   132,
   131,   131,   131,   131,   131,   133,     0,    80,   132,   131,
   131,   131,   131,   131,   133,     0,     9,   132,   131,   131,
   131,   131,   131,   133,     0,    68,   132,   131,   131,   131,
   131,   131,   133,     0,    81,   132,   131,   131,   131,   131,
   131,   133,     0,    10,   132,   131,   131,   131,   131,   131,
   133,     0,   170,     0,   169,   170,     0,    64,   189,   132,
   204,   133,     0,   117,   132,   192,   133,     0,    98,   132,
   130,   133,     0,    97,   132,   131,   133,     0,    48,   132,
   130,   133,     0,    57,   132,   200,   133,     0,    33,   132,
   191,   131,   133,     0,    19,   199,     0,    14,   132,   192,
   135,   192,   131,   133,     0,    11,   189,   132,   173,   133,
     0,    22,   132,   192,   133,     0,    24,   132,   131,   133,
     0,    23,   132,   192,   135,   194,   133,     0,   172,     0,
   171,   172,     0,   170,     0,    42,   132,   130,   134,   130,
   133,     0,     4,   132,   130,   133,     0,   110,   132,   130,
   134,   130,   133,     0,    94,   132,   130,   133,     0,    58,
   199,     0,   105,   132,   130,   133,     0,    29,   132,   130,
   133,     0,   174,     0,   173,   174,     0,    98,   132,   130,
   133,     0,    99,   132,   175,   133,     0,   118,   132,   207,
   133,     0,   176,     0,   175,   176,     0,   138,     0,   178,
     0,   177,   178,     0,    98,   132,   130,   133,     0,    37,
   189,   132,   179,   133,     0,     3,   189,   132,   181,   133,
     0,   109,   132,   131,   131,   131,   133,     0,    29,   132,
   130,   133,     0,    52,   132,   190,   133,     0,     0,   179,
   180,     0,   116,   132,   192,   135,   194,   133,     0,     0,
   181,   182,     0,    28,   132,   130,   134,   131,   133,     0,
   184,     0,   183,   184,     0,    57,   132,   200,   133,     0,
    94,   132,   130,   134,   130,   133,     0,    98,   132,   130,
   133,     0,    56,   132,   185,   133,     0,   186,     0,   185,
   186,     0,    20,   199,     0,    59,   199,     0,    60,   199,
     0,     6,   199,     0,     7,   132,   131,   133,     0,   108,
   199,     0,    43,   199,     0,     0,   187,   188,     0,    66,
   132,   192,   133,     0,    36,   132,   192,   133,     0,   111,
   132,   192,   133,     0,    83,   132,   130,   133,     0,     0,
   130,     0,   123,     0,   124,     0,   131,   131,   131,     0,
   131,   131,   131,     0,   131,     0,   192,     0,   131,   131,
     0,   131,   131,   131,   131,   131,   131,   131,   131,   131,
     0,   131,     0,     0,   196,   197,     0,   198,     0,   197,
   198,     0,    41,   199,     0,    71,   132,   131,   133,     0,
    72,   132,   131,   133,     0,    73,   132,   131,   133,     0,
    74,   132,   131,   133,     0,    74,   132,   131,   131,   131,
   133,     0,    75,   132,   131,   133,     0,    76,   132,   131,
   133,     0,    77,   132,   131,   133,     0,     0,   132,   133,
     0,     0,   201,   202,     0,   203,     0,   202,   203,     0,
    50,   132,   195,   133,     0,   116,   132,   192,   133,     0,
   205,     0,   204,   205,     0,    98,   132,   130,   133,     0,
    47,   132,   190,   133,     0,    99,   132,   212,   133,     0,
   118,   132,   207,   133,     0,    38,   199,     0,    32,   132,
   191,   133,     0,     7,   132,   131,   133,     0,   112,   132,
   208,   133,     0,   113,   132,   209,   133,     0,    18,   132,
   206,   133,     0,    21,   132,   131,   133,     0,    15,   199,
     0,    65,   132,   130,   133,     0,   121,   132,   210,   133,
     0,    48,   132,   130,   133,     0,     0,   206,   191,     0,
     0,   207,   131,     0,     0,   208,   131,   131,     0,     0,
   209,   131,   131,   131,     0,   211,     0,   210,   211,     0,
    50,   132,   195,   133,     0,   116,   132,   192,   133,     0,
   120,   132,   192,   133,     0,    55,   199,     0,    93,   199,
     0,   213,     0,   212,   213,     0,    62,   132,   193,   133,
     0,    30,   132,   193,   133,     0,    79,   132,   193,   133,
     0,    31,   132,   131,   133,     0,    82,   132,   131,   133,
     0,   114,   132,   192,   133,     0,   119,   132,   192,   133,
     0,    50,   132,   195,   133,     0,   116,   132,   192,   133,
     0,    97,   132,   131,   133,     0,    63,   132,   130,   133,
     0,   115,   132,   194,   133,     0,   215,     0,   214,   215,
     0,   192,   135,   131,   191,   131,     0,    13,   132,   192,
   133,     0,    69,   132,   131,   133,     0,    27,   199,     0,
    17,   132,   191,   133,     0,    39,   132,   131,   131,   133,
     0,     8,   132,   216,   133,     0,   125,     0,   126,     0,
   127,     0,   128,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   256,   259,   260,   262,   267,   269,   272,   274,   276,   278,
   280,   282,   288,   290,   292,   294,   296,   298,   300,   302,
   304,   306,   308,   314,   316,   319,   322,   326,   328,   331,
   333,   339,   346,   348,   350,   357,   368,   370,   373,   377,
   379,   382,   388,   390,   393,   396,   398,   400,   402,   404,
   406,   408,   410,   412,   414,   416,   418,   421,   423,   425,
   429,   431,   434,   437,   439,   443,   445,   448,   451,   457,
   459,   462,   468,   473,   478,   483,   488,   494,   500,   505,
   514,   516,   519,   522,   524,   526,   528,   534,   536,   539,
   541,   542,   544,   546,   548,   550,   552,   558,   560,   563,
   566,   568,   570,   572,   574,   576,   578,   580,   583,   585,
   587,   589,   593,   595,   598,   600,   602,   604,   606,   608,
   610,   612,   616,   618,   621,   624,   626,   630,   632,   635,
   642,   644,   647,   650,   652,   654,   656,   658,   671,   673,
   676,   681,   683,   686,   691,   693,   696,   699,   701,   703,
   707,   709,   712,   714,   715,   716,   717,   719,   720,   725,
   727,   730,   733,   735,   737,   751,   754,   758,   760,   764,
   769,   775,   779,   783,   789,   797,   802,   808,   810,   812,
   815,   818,   820,   822,   824,   826,   828,   830,   832,   836,
   838,   842,   850,   852,   854,   857,   863,   871,   873,   876,
   879,   881,   883,   885,   887,   889,   891,   893,   895,   897,
   899,   901,   903,   905,   909,   911,   915,   917,   920,   922,
   926,   928,   933,   935,   938,   941,   943,   945,   947,   952,
   954,   957,   959,   960,   961,   962,   963,   964,   965,   970,
   971,   973,   975,   979,   981,   984,   988,   990,   992,   994,
   996,   998,  1001,  1003,  1004,  1005
};
#endif

#define YYNTOKENS 139
#define YYNNTS 78
#define YYNRULES 256
#define YYNSTATES 808
#define YYMAXUTOK 387

static const char * const yytname[] = {   "$","error","$undefined.","KW_ACTION",
"KW_ACTIVATE","KW_ACTIVE","KW_ADD","KW_ALPHA","KW_ATTENUATION","KW_BECOMING_ACTIVE",
"KW_BECOMING_INACTIVE","KW_BEZIER","KW_CAMERA","KW_CENTER","KW_CIRCLE","KW_CLIP",
"KW_COLLECTION","KW_COLOR","KW_COLORS","KW_CONVEX","KW_COPY","KW_COSFACT","KW_CURVECENTER",
"KW_CURVECONTROL","KW_CURVESCALE","KW_DETAIL","KW_DITHER","KW_DYNAMIC","KW_F",
"KW_FILE","KW_FIRST","KW_FIRST_LEN","KW_FLATCOL","KW_FOG","KW_FOR_2D","KW_FOR_3D",
"KW_FORWARD","KW_FRAME","KW_GOURAUD","KW_HALO","KW_HEIGHTMAP","KW_IDENTITY",
"KW_KEY","KW_KEYCOLOR","KW_LEN","KW_LIBRARY","KW_LIGHT","KW_LIGHTING","KW_LIGHTX",
"KW_LIMB","KW_MATRIX","KW_MERGE_NORMALS","KW_MERGE_TEXELS","KW_MERGE_VERTICES",
"KW_MIPMAP","KW_MIRROR","KW_MIXMODE","KW_MOVE","KW_MOVEABLE","KW_MULTIPLY","KW_MULTIPLY2",
"KW_NODE","KW_ORIG","KW_PLANE","KW_POLYGON","KW_PORTAL","KW_POSITION","KW_PRIMARY_ACTIVE",
"KW_PRIMARY_INACTIVE","KW_RADIUS","KW_ROT","KW_ROT_X","KW_ROT_Y","KW_ROT_Z",
"KW_SCALE","KW_SCALE_X","KW_SCALE_Y","KW_SCALE_Z","KW_SCRIPT","KW_SECOND","KW_SECONDARY_ACTIVE",
"KW_SECONDARY_INACTIVE","KW_SECOND_LEN","KW_SECTOR","KW_SKELETON","KW_SKYDOME",
"KW_SOUND","KW_SOUNDS","KW_SPRITE","KW_SPRITE2D","KW_START","KW_STATBSP","KW_STATELESS",
"KW_STATIC","KW_TEMPLATE","KW_TERRAIN","KW_TEX","KW_TEXLEN","KW_TEXNR","KW_TEXTURE",
"KW_TEXTURES","KW_TEXTURE_LIGHTING","KW_TEXTURE_MIPMAP","KW_TEXTURE_SCALE","KW_TEX_SET",
"KW_TEX_SET_SELECT","KW_THING","KW_TRANSFORM","KW_TRANSPARENT","KW_TRIANGLE",
"KW_TRIGGER","KW_UPWARD","KW_UV","KW_UVA","KW_UVEC","KW_UV_SHIFT","KW_V","KW_VERTEX",
"KW_VERTICES","KW_VVEC","KW_W","KW_WARP","KW_WORLD","KW_yes","KW_no","KW_none",
"KW_linear","KW_inverse","KW_realistic","PARSER_VERSION","STRING","NUMBER","'('",
"')'","','","':'","'-'","'>'","\"unused\"","input","@1","@2","world_ops","world_op",
"@3","@4","@5","textures","texture","@6","texture_ops","texture_op","@7","sounds",
"sound","sound_ops","sound_op","sector_ops","sector_op","skydome_ops","skydome_op",
"node_ops","node_op","plane_ops","plane_op","collection_ops","collection_op",
"lightx_ops","lightx_op","thing_tpl_ops","thing_tpl_op","thing_ops","thing_op",
"bezier_ops","bezier_op","bezier_texture_ops","bezier_texture_op","sprite_tpl_ops",
"sprite_tpl_op","sprite_verts","sprite_vert","sprite_actions","sprite_action",
"sprite_ops","sprite_op","mixmode_ops","mixmode_op","camera_ops","camera_op",
"name","yesno","color","vector","vect_idx","vector2","matrix","@8","matrix_ops",
"matrix_op","noargs","move","@9","move_ops","move_op","polygon_ops","polygon_op",
"colors","vertex_indices","tex_coordinates","uva_coordinates","warp_ops","warp_op",
"polygon_texture_ops","polygon_texture_op","light_ops","light_op","attenuation_op", NULL
};
static const short yytoknum[] = { 0,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
   376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
   386,    40,    41,    44,    58,    45,    62,   387,     0
};

static const short yyr1[] = {     0,
   140,   139,   141,   139,   142,   142,   143,   144,   143,   143,
   143,   143,   145,   143,   146,   143,   143,   143,   143,   143,
   143,   143,   143,   147,   147,   149,   148,   150,   150,   152,
   151,   151,   151,   151,   151,   151,   153,   153,   154,   155,
   155,   156,   157,   157,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   159,   159,   160,   160,   160,   161,   161,   162,   162,   163,
   163,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   165,   165,   166,   166,   166,   166,   166,   167,   167,   168,
   168,   168,   168,   168,   168,   168,   168,   169,   169,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   170,   171,   171,   172,   172,   172,   172,   172,   172,
   172,   172,   173,   173,   174,   174,   174,   175,   175,   176,
   177,   177,   178,   178,   178,   178,   178,   178,   179,   179,
   180,   181,   181,   182,   183,   183,   184,   184,   184,   184,
   185,   185,   186,   186,   186,   186,   186,   186,   186,   187,
   187,   188,   188,   188,   188,   189,   189,   190,   190,   191,
   192,   193,   193,   194,   195,   195,   196,   195,   197,   197,
   198,   198,   198,   198,   198,   198,   198,   198,   198,   199,
   199,   201,   200,   202,   202,   203,   203,   204,   204,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   206,   206,   207,   207,   208,   208,
   209,   209,   210,   210,   211,   211,   211,   211,   211,   212,
   212,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   214,   214,   215,   215,   215,   215,   215,
   215,   215,   216,   216,   216,   216
};

static const short yyr2[] = {     0,
     0,     6,     0,     6,     0,     2,     4,     0,     6,     4,
     4,     6,     0,     6,     0,     6,     5,     5,     5,     7,
     5,     5,     5,     0,     2,     0,     6,     0,     2,     0,
     5,     4,     4,     4,     4,     4,     0,     2,     5,     0,
     2,     4,     1,     2,     4,     4,     4,     4,     4,     4,
     6,     2,     5,     5,     5,     5,     7,     4,     6,     4,
     1,     2,     4,     4,     4,     1,     2,     4,     6,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     1,     2,     4,     4,     6,     9,     4,     0,     2,     4,
     4,     8,     8,     8,     8,     8,     8,     1,     2,     5,
     4,     4,     4,     4,     4,     5,     2,     7,     5,     4,
     4,     6,     1,     2,     1,     6,     4,     6,     4,     2,
     4,     4,     1,     2,     4,     4,     4,     1,     2,     1,
     1,     2,     4,     5,     5,     6,     4,     4,     0,     2,
     6,     0,     2,     6,     1,     2,     4,     6,     4,     4,
     1,     2,     2,     2,     2,     2,     4,     2,     2,     0,
     2,     4,     4,     4,     4,     0,     1,     1,     1,     3,
     3,     1,     1,     2,     9,     1,     0,     2,     1,     2,
     2,     4,     4,     4,     4,     6,     4,     4,     4,     0,
     2,     0,     2,     1,     2,     4,     4,     1,     2,     4,
     4,     4,     4,     2,     4,     4,     4,     4,     4,     4,
     2,     4,     4,     4,     0,     2,     0,     2,     0,     3,
     0,     4,     1,     2,     4,     4,     4,     2,     2,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     1,     2,     5,     4,     4,     2,     4,
     5,     4,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
   166,   166,   167,     0,     0,     3,     1,     5,     5,     0,
     0,   166,   166,   166,     0,   166,   166,   166,   166,     0,
   166,     0,     0,   166,   166,     4,     6,     2,     0,     0,
     0,     0,     0,     0,     0,     0,    37,     0,     0,    24,
     0,     0,    13,     0,     0,     0,    88,    15,     0,     0,
     0,     0,     0,     0,     8,     0,   160,     0,     0,     0,
     0,     0,     0,    81,     0,    10,     0,     0,     0,     0,
     0,     0,     0,   166,     0,     0,     0,     0,   166,   190,
     0,     0,   166,     0,     0,     0,    43,   166,    11,    38,
   166,     0,   166,     0,     0,     0,     0,   131,     0,   166,
     7,    25,    24,   166,     0,   190,     0,     0,     0,     0,
     0,     0,   166,     0,     0,     0,     0,    98,     0,     0,
     0,     0,     0,     0,    19,    82,    18,     0,     0,     0,
     0,     0,     0,     0,     0,    21,    89,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    70,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,     0,    17,    44,     0,     0,
     0,     0,     0,     0,     0,    23,   132,     0,     0,     0,
     0,     0,     0,   107,     0,     0,     0,     0,     0,   192,
     0,     0,     0,     0,    22,    99,     0,     0,     0,     0,
    14,   161,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   177,     0,     0,
     0,     0,     0,     0,    16,    71,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    66,     0,   190,
     0,     0,     0,   190,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   198,     0,     0,     0,     0,    61,
     0,   191,     0,     0,     0,     0,     0,    40,   142,     0,
   139,   168,   169,     0,     0,     0,     0,    12,    26,     9,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    84,     0,    87,
    83,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   172,   173,     0,     0,   176,     0,     0,     0,     0,     0,
     0,     0,     0,    20,    50,     0,     0,     0,     0,     0,
     0,     0,   190,     0,     0,     0,     0,   244,    49,     0,
     0,    60,    67,     0,   211,   215,     0,     0,   204,     0,
     0,     0,     0,     0,   219,   221,   217,     0,    46,   199,
     0,     0,   217,    58,    62,     0,     0,     0,     0,     0,
   145,    48,    47,     0,     0,     0,   190,     0,     0,     0,
   115,     0,   113,     0,    45,     0,     0,   137,     0,   138,
   133,     0,   171,    28,     0,     0,     0,     0,   123,     0,
   110,     0,   111,     0,   104,   105,     0,     0,   193,   194,
     0,   103,   102,   101,     0,     0,     0,     0,     0,     0,
    90,     0,     0,     0,     0,     0,     0,    91,    73,    75,
     0,    79,   190,     0,     0,     0,     0,     0,     0,     0,
   178,   179,    72,    74,    76,    77,    80,    78,     0,   170,
    56,     0,     0,     0,     0,   249,     0,     0,     0,    54,
   245,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   230,     0,     0,     0,     0,   190,
   190,     0,     0,     0,   223,     0,     0,     0,     0,   192,
     0,     0,    55,   146,     0,     0,     0,   120,     0,     0,
     0,    53,   114,     0,     0,    39,    41,     0,   135,   143,
     0,   134,   140,     0,     0,     0,     0,   217,   109,   124,
     0,     0,     0,   106,   177,     0,   195,   100,   163,   162,
   165,   164,    85,     0,     0,     0,     0,     0,     0,     0,
     0,   181,     0,     0,     0,     0,     0,     0,     0,   180,
     0,    59,   253,   254,   255,   256,     0,     0,     0,     0,
     0,     0,     0,    68,   206,   209,   216,   210,   205,   201,
   214,   212,   200,     0,     0,   177,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   202,   231,     0,   207,     0,
   208,   218,   203,   177,   228,   229,     0,     0,   213,   224,
    65,    63,    64,   190,     0,   190,   190,   190,   190,   190,
     0,   151,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    51,     0,     0,     0,   136,     0,     0,     0,     0,
     0,     0,    27,    29,     0,   130,     0,   128,     0,     0,
   174,   112,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    57,
   252,   247,   250,     0,   248,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
     0,     0,     0,     0,   156,     0,   153,   159,   154,   155,
   158,   150,   152,   147,     0,   149,   117,   122,     0,   119,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   125,   126,   129,   127,   108,   196,   197,     0,     0,
     0,     0,     0,     0,     0,     0,   182,   183,   184,     0,
   185,   187,   188,   189,   251,   246,    69,   233,   235,   239,
   232,   242,   234,   236,   241,   237,   243,   240,   238,   222,
   225,   226,   227,     0,     0,     0,     0,    42,     0,     0,
     0,     0,     0,     0,     0,     0,    86,    94,    97,    92,
    95,    93,    96,     0,     0,   157,   148,   116,   118,     0,
     0,    32,    33,    36,    35,    30,    34,     0,   186,   144,
   141,    31,     0,   175,     0,     0,     0
};

static const short yydefgoto[] = {   805,
     9,     8,    10,    27,   103,    57,    68,    54,   102,   394,
   525,   644,   802,    51,    90,   386,   517,    86,    87,   259,
   260,   237,   238,   147,   148,    63,    64,    67,   137,   117,
   381,   382,   383,   398,   399,   647,   648,    97,    98,   389,
   523,   387,   520,   370,   371,   621,   622,   119,   202,     4,
   274,   231,   312,   313,   533,   316,   317,   441,   442,   161,
   288,   289,   409,   410,   254,   255,   465,   488,   486,   487,
   494,   495,   484,   485,   337,   338,   567
};

static const short yypact[] = {   -29,
  -100,  -100,-32768,  -106,   -94,-32768,-32768,-32768,-32768,   224,
   305,  -100,  -100,  -100,   -74,  -100,  -100,  -100,  -100,   -62,
  -100,   -41,   -35,  -100,  -100,-32768,-32768,-32768,   -24,    -5,
    20,    30,    35,    36,    40,    45,-32768,    73,    76,-32768,
    77,    80,-32768,    52,    87,    85,-32768,-32768,    92,   507,
   -37,    91,    98,   -80,-32768,   566,-32768,    99,   102,   107,
   111,   112,    93,-32768,   113,-32768,     8,   576,    90,   115,
   119,   122,   127,  -100,   130,   132,   133,   144,  -100,   145,
   147,   149,  -100,   151,   154,    68,-32768,  -100,-32768,-32768,
  -100,   160,  -100,   164,   167,   171,     4,-32768,   118,  -100,
-32768,-32768,-32768,  -100,   174,   145,   178,   181,   183,   186,
   188,   191,  -100,   195,   203,   204,   234,-32768,     0,   196,
   210,   211,   213,   216,-32768,-32768,-32768,   220,   222,   228,
   230,   231,   232,   238,   243,-32768,-32768,   244,   250,   252,
   257,   258,   259,   262,   264,   272,   412,-32768,   276,   278,
   118,   173,   280,   288,   282,     5,   301,    95,   291,   223,
-32768,   293,   295,   294,   297,   118,-32768,-32768,   296,   298,
   302,   299,    25,   310,   304,-32768,-32768,   320,   308,   323,
   -72,   324,   118,-32768,   118,   118,   321,   173,   327,-32768,
   328,   330,   329,   118,-32768,-32768,   331,   332,   333,   334,
-32768,-32768,   336,   337,   339,   351,   354,   361,   366,   367,
   368,   369,   370,   372,   374,   375,   376,   386,   375,   375,
   387,   118,   118,   118,-32768,-32768,   391,   392,   335,   389,
   396,   395,   194,   399,   401,   405,   -27,-32768,   406,   145,
   407,   409,   411,   145,   414,   415,   416,   419,   420,   422,
   424,   426,   427,   172,-32768,   431,   438,   442,    12,-32768,
    94,-32768,   443,   445,   425,   410,   446,-32768,-32768,   448,
-32768,-32768,-32768,   449,   453,   444,   456,-32768,-32768,-32768,
   -70,   458,   461,   462,   463,   460,   467,   468,   -26,   301,
   469,   475,   476,   118,   118,   480,   118,-32768,   481,-32768,
-32768,   488,   478,   489,   490,   494,   497,   498,   502,   486,
   320,-32768,   501,   504,   509,   510,   404,   511,   512,   513,
   514,   516,   518,-32768,-32768,   118,   522,   521,   526,   525,
   527,   528,   145,   530,   533,   531,    38,-32768,-32768,   540,
   118,-32768,-32768,   542,-32768,-32768,   543,   173,-32768,    25,
   541,   545,   546,   553,-32768,-32768,-32768,   287,-32768,-32768,
    25,   547,-32768,-32768,-32768,   549,   550,   552,   554,   -34,
-32768,-32768,-32768,   555,   556,   557,   145,   559,   561,   562,
-32768,    21,-32768,   567,-32768,   -21,   -16,-32768,   -12,-32768,
-32768,   565,-32768,-32768,   568,   569,   570,   117,-32768,   118,
-32768,   572,-32768,   544,-32768,-32768,   573,   574,   -26,-32768,
   176,-32768,-32768,-32768,   571,   575,   577,   578,   579,   421,
-32768,   582,   583,   584,   585,   586,   587,-32768,-32768,-32768,
   588,-32768,   145,   589,   590,   591,   592,   593,   594,   595,
   404,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   597,-32768,
-32768,   596,   290,   118,   173,-32768,   599,   600,   601,-32768,
-32768,   508,   602,   603,   -28,   604,   605,   606,   607,   608,
   609,   611,   612,   613,   614,   615,   616,   617,   618,   619,
   620,   621,   622,   371,-32768,    13,    24,    42,   623,   145,
   145,   624,   625,   245,-32768,   626,   627,    49,   338,-32768,
   628,   631,-32768,-32768,   632,   633,   634,-32768,   635,   636,
   637,-32768,-32768,   638,   640,-32768,-32768,   641,-32768,-32768,
   642,-32768,-32768,   643,   226,   639,   364,-32768,-32768,-32768,
   644,   646,   645,-32768,   386,   118,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   647,   648,   649,   650,   651,   652,   654,
   655,-32768,   656,   657,   658,   659,   660,   661,   662,-32768,
   663,-32768,-32768,-32768,-32768,-32768,   664,   665,   666,   669,
   668,   173,   672,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   375,   673,   386,   375,   675,   375,   676,
   677,   118,   572,   118,   118,-32768,-32768,   678,-32768,   679,
-32768,-32768,-32768,   386,-32768,-32768,   118,   118,-32768,-32768,
-32768,-32768,-32768,   145,   671,   145,   145,   145,   145,   145,
    14,-32768,   680,   551,   681,   682,   683,   564,   684,   685,
   686,-32768,   689,   691,   118,-32768,   674,   690,   692,   693,
   694,   695,-32768,-32768,   696,-32768,   -96,-32768,    53,   697,
-32768,-32768,   698,   699,   703,   704,   705,   706,   707,   708,
   709,   710,   701,   711,   712,    97,   713,   714,   715,-32768,
-32768,-32768,-32768,   716,-32768,   719,   718,   720,   721,   722,
   723,   724,   725,   726,   727,   728,   729,   730,   731,-32768,
   734,   733,   735,   736,-32768,   739,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   737,-32768,-32768,-32768,   741,-32768,
-32768,   742,   740,   743,   598,    25,   744,    25,    25,    25,
   173,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   745,   746,
   747,   748,   749,   750,   751,   754,-32768,-32768,-32768,   755,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   756,   757,   758,   759,-32768,   762,   572,
   761,   763,   764,   765,   766,   767,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   770,   769,-32768,-32768,-32768,-32768,   771,
   772,-32768,-32768,-32768,-32768,-32768,-32768,   775,-32768,-32768,
-32768,-32768,   776,-32768,   768,   794,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   670,-32768,-32768,-32768,-32768,   667,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   789,-32768,
   440,-32768,   470,-32768,   773,-32768,   732,-32768,-32768,-32768,
   -25,-32768,   352,-32768,   311,-32768,    33,-32768,   779,-32768,
-32768,-32768,-32768,-32768,   350,-32768,   190,-32768,-32768,   548,
  -347,  -187,   -99,  -210,  -589,  -524,-32768,-32768,   382,  -104,
   312,-32768,-32768,   433,   538,  -248,-32768,  -358,-32768,-32768,
-32768,   349,-32768,   403,-32768,   515,-32768
};


#define	YYLAST		920


static const short yytable[] = {   179,
   286,   184,   468,   687,   498,   360,    91,   515,   318,   319,
   653,   518,   128,   496,   235,     1,   129,   130,   100,   614,
   615,   366,   367,   407,   374,     6,   100,   395,   396,     3,
   118,   104,    92,   616,   105,   197,   723,     7,   236,   106,
    93,   646,   107,   108,   109,   330,   235,   397,    88,   375,
   331,   229,   101,   110,   332,    94,   617,    32,   256,   368,
   280,   680,   376,   369,   333,   198,   267,    58,   111,    37,
   236,    70,   618,   619,   131,   132,   334,   112,   377,   692,
   257,    71,   199,   282,   113,   283,   284,   133,   134,   408,
    39,   196,     2,    91,   293,    89,    40,    59,   503,   135,
    72,    95,   230,   521,   576,   342,   335,    43,    58,    73,
   200,   516,    96,    74,   378,    75,   519,   114,   115,    92,
   522,   620,   321,   322,   323,   379,    44,    93,    76,   258,
   380,    77,   201,   336,    60,   345,   176,   116,    59,   349,
   136,   256,    94,   598,   364,   599,   702,   272,   273,   366,
   367,    45,    78,   512,   600,    79,   601,    61,    80,    46,
   467,    62,   360,   257,    81,    82,    47,    48,   178,   649,
   460,    49,   602,    83,   603,    60,    50,    84,   239,   602,
   791,   613,   239,   602,    85,   725,   240,   368,    95,   241,
   240,   369,   242,   241,   415,   416,   242,   418,    61,    96,
   167,   330,    62,   243,    52,    53,   331,   243,    55,   244,
   332,    56,   258,   244,   395,   396,    65,    66,   245,   246,
   333,    69,   245,   246,   149,   125,   449,   740,   456,   741,
   120,    99,   334,   121,   397,    12,   247,   336,   122,    13,
   247,   463,   123,   124,   104,   127,   150,   105,   178,   529,
   151,   637,   106,   152,   638,   107,   108,   109,   153,   639,
   640,   155,   335,   156,   157,    14,   110,   569,    15,   248,
   249,    16,   508,   248,   249,   158,   160,   577,   162,   641,
   163,   111,   165,   250,   251,   166,    17,   250,   251,   252,
   112,   171,   253,   252,   489,   173,   253,   113,   174,   490,
   531,    18,   175,   230,   359,   183,    19,   239,   538,   185,
    20,    21,   186,    22,   187,   240,    12,   188,   241,   189,
    13,   242,   190,    23,   178,   203,   192,    24,   552,    25,
   114,   115,   243,   642,   193,   194,   489,   491,   244,   204,
   205,   490,   206,   614,   615,   207,    14,   245,   246,    15,
   116,   208,    16,   209,   568,   262,    26,   616,   643,   210,
   492,   211,   212,   213,   493,   247,   195,    17,   771,   214,
   773,   774,   775,   678,   215,   216,   681,   609,   683,   491,
   617,   217,    18,   218,   676,   605,   606,    19,   219,   220,
   221,    20,    21,   222,    22,   223,   618,   619,   248,   249,
   472,   473,   492,   224,    23,   227,   493,   228,    24,   232,
    25,   234,   250,   251,   563,   564,   565,   566,   252,   233,
   474,   253,   261,   263,   264,   265,   266,   268,   374,   269,
   271,   270,   475,   476,   276,   104,   654,    28,   105,   275,
   278,   138,   139,   106,   433,   620,   107,   108,   109,   477,
   277,   285,   478,   375,   279,   281,   287,   110,   292,   290,
   291,   140,   294,   295,   296,   297,   376,   479,   298,   326,
   299,   300,   111,   141,   434,   435,   436,   437,   438,   439,
   440,   112,   377,   301,   480,   481,   482,   302,   113,   483,
   142,   303,   686,   143,   688,   689,   304,   305,   306,   307,
   308,   646,   309,   596,   310,   311,   314,   693,   694,   695,
    70,   697,   698,   699,   700,   701,   315,   320,   378,   327,
    71,   114,   115,   324,   325,   144,   328,   145,   329,   379,
   146,   339,   340,   776,   380,   715,   341,   344,   346,    72,
   347,   116,   348,   384,   225,   350,   351,   352,    73,     5,
   353,   354,    74,   355,    75,   356,   544,   357,   358,    29,
    30,    31,   361,    33,    34,    35,    36,    76,    38,   362,
    77,    41,    42,   363,   392,   372,   104,   373,   385,   105,
   388,   390,   472,   473,   106,   391,   393,   107,   108,   109,
   404,    78,   400,   401,    79,   403,   402,    80,   110,   405,
   406,   412,   474,    81,    82,   138,   139,   413,   414,   417,
   421,   419,    83,   111,   475,   476,    84,   420,   428,   422,
   423,   154,   112,    85,   424,   140,   159,   425,   426,   113,
   164,   477,   427,   429,   478,   169,   430,   141,   170,   431,
   172,   573,   432,   443,   444,   445,   446,   180,   447,   479,
   448,   182,   450,   451,   142,   452,   453,   143,   454,   455,
   191,   457,   114,   115,   458,   459,   480,   481,   482,   462,
   469,   483,   464,   466,   470,   471,   534,   497,    11,   724,
   499,   500,   116,   501,   705,   502,   505,   506,   507,   144,
   509,   145,   510,   511,   146,   524,   514,   709,   365,   526,
   527,   528,   532,   539,   535,   536,   343,   540,   530,   541,
   542,   543,   545,   546,   547,   548,   549,   550,   551,   504,
   553,   554,   555,   556,   557,   558,   559,   561,   562,   570,
   571,   572,   770,   513,   574,   575,   578,   579,   580,   581,
   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
   592,   593,   594,   595,   604,   607,   608,   624,   611,   612,
   625,   626,   627,   628,   629,   630,   631,   806,   645,   181,
   632,   633,   634,   635,   650,   636,   651,   652,   656,   657,
   658,   659,   660,   655,   661,   662,   663,   664,   665,   666,
   667,   668,   669,   807,   126,   670,   671,   672,   673,   674,
   675,   677,   696,   679,   682,   716,   684,   685,   690,   691,
   703,   623,   704,   706,   707,   708,   710,   711,   713,   712,
   714,   717,   560,   718,   719,   720,   721,   411,   722,   726,
   727,   728,   729,   737,   730,   731,   732,   733,   734,   735,
   736,   537,   610,   738,   739,   742,   743,   744,   745,   746,
   747,   461,   748,   749,   750,   751,   752,   753,   754,   755,
   756,   757,   758,   759,   760,   761,   765,   762,   763,   764,
   766,   767,   768,   772,   168,   177,   769,   777,   778,   779,
   780,   781,   782,   783,   784,   785,   597,     0,   786,   787,
   788,   789,   790,   792,     0,   793,   794,   795,   796,   797,
   798,   799,     0,   800,   801,   803,   804,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   226
};

static const short yycheck[] = {    99,
   188,   106,   350,   593,   363,   254,     3,    29,   219,   220,
   535,    28,     5,   361,    42,    45,     9,    10,    99,     6,
     7,    56,    57,    50,     4,   132,    99,    98,    99,   130,
    56,    11,    29,    20,    14,    36,   133,   132,    66,    19,
    37,   138,    22,    23,    24,     8,    42,   118,    86,    29,
    13,   151,   133,    33,    17,    52,    43,   132,    47,    94,
   133,   586,    42,    98,    27,    66,   166,    16,    48,   132,
    66,     4,    59,    60,    67,    68,    39,    57,    58,   604,
    69,    14,    83,   183,    64,   185,   186,    80,    81,   116,
   132,   117,   122,     3,   194,   133,   132,    46,   133,    92,
    33,    98,   131,   116,   133,   133,    69,   132,    16,    42,
   111,   133,   109,    46,    94,    48,   133,    97,    98,    29,
   133,   108,   222,   223,   224,   105,   132,    37,    61,   118,
   110,    64,   133,   233,    83,   240,   133,   117,    46,   244,
   133,    47,    52,   131,   133,   133,   133,   123,   124,    56,
    57,   132,    85,   133,   131,    88,   133,   106,    91,   130,
   348,   110,   411,    69,    97,    98,   132,   132,   131,   528,
   133,   132,   131,   106,   133,    83,   132,   110,     7,   131,
   770,   133,     7,   131,   117,   133,    15,    94,    98,    18,
    15,    98,    21,    18,   294,   295,    21,   297,   106,   109,
   133,     8,   110,    32,   132,   130,    13,    32,   132,    38,
    17,   132,   118,    38,    98,    99,   130,   133,    47,    48,
    27,   130,    47,    48,   135,   133,   326,   131,   333,   133,
   132,   134,    39,   132,   118,    12,    65,   337,   132,    16,
    65,   341,   132,   132,    11,   133,   132,    14,   131,   133,
   132,    26,    19,   132,    29,    22,    23,    24,   132,    34,
    35,   132,    69,   132,   132,    42,    33,   455,    45,    98,
    99,    48,   377,    98,    99,   132,   132,   465,   132,    54,
   132,    48,   132,   112,   113,   132,    63,   112,   113,   118,
    57,   132,   121,   118,    50,   132,   121,    64,   132,    55,
   400,    78,   132,   131,   133,   132,    83,     7,   133,   132,
    87,    88,   132,    90,   132,    15,    12,   132,    18,   132,
    16,    21,   132,   100,   131,   130,   132,   104,   433,   106,
    97,    98,    32,   108,   132,   132,    50,    93,    38,   130,
   130,    55,   130,     6,     7,   130,    42,    47,    48,    45,
   117,   132,    48,   132,   454,   133,   133,    20,   133,   132,
   116,   132,   132,   132,   120,    65,   133,    63,   716,   132,
   718,   719,   720,   584,   132,   132,   587,   133,   589,    93,
    43,   132,    78,   132,   572,   490,   491,    83,   132,   132,
   132,    87,    88,   132,    90,   132,    59,    60,    98,    99,
    30,    31,   116,   132,   100,   130,   120,   130,   104,   130,
   106,   130,   112,   113,   125,   126,   127,   128,   118,   132,
    50,   121,   132,   131,   130,   132,   130,   132,     4,   132,
   132,   130,    62,    63,   131,    11,   536,   133,    14,   130,
   133,    30,    31,    19,    41,   108,    22,    23,    24,    79,
   131,   131,    82,    29,   132,   132,   130,    33,   130,   132,
   131,    50,   132,   132,   132,   132,    42,    97,   133,   135,
   134,   133,    48,    62,    71,    72,    73,    74,    75,    76,
    77,    57,    58,   133,   114,   115,   116,   134,    64,   119,
    79,   131,   592,    82,   594,   595,   131,   131,   131,   131,
   131,   138,   131,   133,   131,   131,   131,   607,   608,   614,
     4,   616,   617,   618,   619,   620,   131,   131,    94,   131,
    14,    97,    98,   133,   133,   114,   131,   116,   134,   105,
   119,   133,   132,   721,   110,   635,   132,   132,   132,    33,
   132,   117,   132,   134,   133,   132,   132,   132,    42,     2,
   132,   132,    46,   132,    48,   132,   136,   132,   132,    12,
    13,    14,   132,    16,    17,    18,    19,    61,    21,   132,
    64,    24,    25,   132,   131,   133,    11,   133,   133,    14,
   133,   133,    30,    31,    19,   133,   131,    22,    23,    24,
   131,    85,   135,   133,    88,   133,   135,    91,    33,   133,
   133,   133,    50,    97,    98,    30,    31,   133,   133,   130,
   133,   131,   106,    48,    62,    63,   110,   130,   133,   131,
   131,    74,    57,   117,   131,    50,    79,   131,   131,    64,
    83,    79,   131,   133,    82,    88,   133,    62,    91,   131,
    93,   134,   133,   133,   133,   133,   133,   100,   133,    97,
   133,   104,   131,   133,    79,   130,   132,    82,   132,   132,
   113,   132,    97,    98,   132,   135,   114,   115,   116,   130,
   130,   119,   131,   131,   130,   130,   133,   131,     9,   647,
   132,   132,   117,   132,   134,   132,   132,   132,   132,   114,
   132,   116,   132,   132,   119,   131,   130,   134,   259,   132,
   132,   132,   131,   133,   132,   132,   237,   133,   398,   133,
   133,   133,   131,   131,   131,   131,   131,   131,   131,   370,
   132,   132,   132,   132,   132,   132,   132,   131,   133,   131,
   131,   131,   135,   382,   133,   133,   133,   133,   133,   133,
   133,   133,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   130,   133,   133,
   130,   130,   130,   130,   130,   130,   130,     0,   130,   103,
   133,   132,   132,   132,   131,   133,   131,   133,   131,   131,
   131,   131,   131,   137,   131,   131,   131,   131,   131,   131,
   131,   131,   131,     0,    63,   133,   133,   133,   133,   131,
   133,   130,   132,   131,   130,   132,   131,   131,   131,   131,
   621,   500,   133,   133,   133,   133,   133,   133,   130,   134,
   130,   132,   441,   132,   132,   132,   132,   290,   133,   133,
   133,   133,   130,   133,   131,   131,   131,   131,   131,   131,
   131,   409,   494,   133,   133,   133,   133,   133,   133,   131,
   133,   337,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   131,   133,   130,   133,   133,   131,
   130,   130,   133,   130,    86,    97,   134,   133,   133,   133,
   133,   133,   133,   133,   131,   131,   484,    -1,   133,   133,
   133,   133,   131,   133,    -1,   133,   133,   133,   133,   133,
   131,   133,    -1,   133,   133,   131,   131,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 258 "plugins/csstdldr/stdparse.y"
{ THIS->world->SelectLibrary (STORAGE.cur_library = yyvsp[-1].string); ;
    break;}
case 3:
#line 261 "plugins/csstdldr/stdparse.y"
{ THIS->world->SelectLibrary (STORAGE.cur_library = yyvsp[-1].string); ;
    break;}
case 8:
#line 275 "plugins/csstdldr/stdparse.y"
{ STORAGE.tex_prefix = yyvsp[-1].string; ;
    break;}
case 9:
#line 277 "plugins/csstdldr/stdparse.y"
{ STORAGE.tex_prefix = NULL; ;
    break;}
case 10:
#line 279 "plugins/csstdldr/stdparse.y"
{ if (!THIS->RecursiveLoad (yyvsp[-1].string)) YYABORT; ;
    break;}
case 11:
#line 281 "plugins/csstdldr/stdparse.y"
{ printf ("SOUNDS\n"); ;
    break;}
case 12:
#line 283 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->world->CreateCamera ("Start", yyvsp[-3].string,
      (csVector3 &)yyvsp[-1].vect, csVector3 (0, 0, 1), csVector3 (0, 1, 0)))
      YYABORT;
  ;
    break;}
case 13:
#line 289 "plugins/csstdldr/stdparse.y"
{ THIS->InitCamera (yyvsp[-1].string); ;
    break;}
case 14:
#line 291 "plugins/csstdldr/stdparse.y"
{ if (!THIS->CreateCamera ()) YYABORT; ;
    break;}
case 15:
#line 293 "plugins/csstdldr/stdparse.y"
{ PLANE.mode = pmNONE; ;
    break;}
case 16:
#line 295 "plugins/csstdldr/stdparse.y"
{ if (!THIS->CreatePlane (yyvsp[-4].string)) YYABORT; ;
    break;}
case 17:
#line 297 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR [%s]\n", yyvsp[-3].string); ;
    break;}
case 18:
#line 299 "plugins/csstdldr/stdparse.y"
{ if (!THIS->CreateKey (yyvsp[-3].string, yyvsp[-1].string)) YYABORT; ;
    break;}
case 19:
#line 301 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION [%s]\n", yyvsp[-3].string); ;
    break;}
case 20:
#line 303 "plugins/csstdldr/stdparse.y"
{ printf ("SCRIPT '%s' (%s: %s)\n", yyvsp[-5].string, yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 21:
#line 305 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX [%s]\n", yyvsp[-3].string); ;
    break;}
case 22:
#line 307 "plugins/csstdldr/stdparse.y"
{ printf ("THING_tpl [%s]\n", yyvsp[-3].string); ;
    break;}
case 23:
#line 309 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE [%s]\n", yyvsp[-3].string); ;
    break;}
case 26:
#line 321 "plugins/csstdldr/stdparse.y"
{ THIS->InitTexture (yyvsp[-1].string); ;
    break;}
case 27:
#line 323 "plugins/csstdldr/stdparse.y"
{ if (!THIS->CreateTexture ()) ABORTMSG; ;
    break;}
case 30:
#line 332 "plugins/csstdldr/stdparse.y"
{ printf ("MIPMAP (%d)\n", yyvsp[-1].ival); ;
    break;}
case 31:
#line 333 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-2].ival)
      TEX.flags = (TEX.flags & ~CS_TEXTURE_NOMIPMAPS);
    else
      TEX.flags |= CS_TEXTURE_NOMIPMAPS;
  ;
    break;}
case 32:
#line 340 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_DITHER;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_DITHER);
  ;
    break;}
case 33:
#line 347 "plugins/csstdldr/stdparse.y"
{ TEX.filename = yyvsp[-1].string; ;
    break;}
case 34:
#line 349 "plugins/csstdldr/stdparse.y"
{ TEX.transp = yyvsp[-1].color; TEX.do_transp = true; ;
    break;}
case 35:
#line 351 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_3D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_3D);
  ;
    break;}
case 36:
#line 358 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_2D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_2D);
  ;
    break;}
case 42:
#line 383 "plugins/csstdldr/stdparse.y"
{ printf ("FILE (%s)\n", yyvsp[-1].string); ;
    break;}
case 45:
#line 395 "plugins/csstdldr/stdparse.y"
{ printf ("VERTEX (%g,%g,%g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 46:
#line 397 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON (...)\n"); ;
    break;}
case 47:
#line 399 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 48:
#line 401 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 49:
#line 403 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 50:
#line 405 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 51:
#line 407 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 52:
#line 409 "plugins/csstdldr/stdparse.y"
{ printf ("STATBSP ()\n"); ;
    break;}
case 53:
#line 411 "plugins/csstdldr/stdparse.y"
{ printf ("THING '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 54:
#line 413 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 55:
#line 415 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 56:
#line 417 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 57:
#line 420 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 58:
#line 422 "plugins/csstdldr/stdparse.y"
{ printf ("SKYDOME (...)\n"); ;
    break;}
case 59:
#line 424 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 60:
#line 426 "plugins/csstdldr/stdparse.y"
{ printf ("NODE (...)\n"); ;
    break;}
case 63:
#line 436 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 64:
#line 438 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 65:
#line 440 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 68:
#line 450 "plugins/csstdldr/stdparse.y"
{ printf ("POSITION (...)\n"); ;
    break;}
case 69:
#line 452 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 72:
#line 464 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmFIRSTSECOND)) YYABORT;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 73:
#line 469 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmFIRSTSECOND)) YYABORT;
    PLANE.first.Set (yyvsp[-1].vect);
  ;
    break;}
case 74:
#line 474 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmFIRSTSECOND)) YYABORT;
    PLANE.second.Set (yyvsp[-1].vect);
  ;
    break;}
case 75:
#line 479 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmFIRSTSECOND)) YYABORT;
    PLANE.first_len = yyvsp[-1].fval;
  ;
    break;}
case 76:
#line 484 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmFIRSTSECOND)) YYABORT;
    PLANE.second_len = yyvsp[-1].fval;
  ;
    break;}
case 77:
#line 489 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmVECTORS)) YYABORT;
    PLANE.first = yyvsp[-1].vect;
    PLANE.first_len = 1.0;
  ;
    break;}
case 78:
#line 495 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmVECTORS)) YYABORT;
    PLANE.second = yyvsp[-1].vect;
    PLANE.second_len = 1.0;
  ;
    break;}
case 79:
#line 501 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmMATRIX)) YYABORT;
    PLANE.matrix.Set (*yyvsp[-1].matrix);
  ;
    break;}
case 80:
#line 506 "plugins/csstdldr/stdparse.y"
{
    if (!THIS->PlaneMode (pmMATRIX)) YYABORT;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 83:
#line 521 "plugins/csstdldr/stdparse.y"
{ printf ("THING ('%s')\n", yyvsp[-1].string); ;
    break;}
case 84:
#line 523 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION ('%s')\n", yyvsp[-1].string); ;
    break;}
case 85:
#line 525 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT ('%s':%g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 86:
#line 527 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER ('%s', '%s' -> '%s')\n", yyvsp[-6].string, yyvsp[-4].string, yyvsp[-1].string); ;
    break;}
case 87:
#line 529 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 90:
#line 540 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 91:
#line 541 "plugins/csstdldr/stdparse.y"
{ printf ("STATELESS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 92:
#line 543 "plugins/csstdldr/stdparse.y"
{ printf ("PRIMARY_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 93:
#line 545 "plugins/csstdldr/stdparse.y"
{ printf ("SECONDARY_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 94:
#line 547 "plugins/csstdldr/stdparse.y"
{ printf ("BECOMING_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 95:
#line 549 "plugins/csstdldr/stdparse.y"
{ printf ("PRIMARY_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 96:
#line 551 "plugins/csstdldr/stdparse.y"
{ printf ("SECONDARY_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 97:
#line 553 "plugins/csstdldr/stdparse.y"
{ printf ("BECOMING_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 100:
#line 565 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON_tpl '%s' ()\n", yyvsp[-3].string); ;
    break;}
case 101:
#line 567 "plugins/csstdldr/stdparse.y"
{ printf ("VERTEX (%g,%g,%g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 102:
#line 569 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 103:
#line 571 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 104:
#line 573 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 105:
#line 575 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 106:
#line 577 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 107:
#line 579 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX ()\n"); ;
    break;}
case 108:
#line 582 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 109:
#line 584 "plugins/csstdldr/stdparse.y"
{ printf ("BEZIER '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 110:
#line 586 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECENTER (...)\n"); ;
    break;}
case 111:
#line 588 "plugins/csstdldr/stdparse.y"
{ printf ("CURVESCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 112:
#line 590 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECONTROL (...)\n"); ;
    break;}
case 116:
#line 601 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 117:
#line 603 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 118:
#line 605 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 119:
#line 607 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 120:
#line 609 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE ()\n"); ;
    break;}
case 121:
#line 611 "plugins/csstdldr/stdparse.y"
{ printf ("TEX_SET_SELECT ('%s')\n", yyvsp[-1].string); ;
    break;}
case 122:
#line 613 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 125:
#line 623 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 126:
#line 625 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 127:
#line 627 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 133:
#line 649 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 134:
#line 651 "plugins/csstdldr/stdparse.y"
{ printf ("FRAME '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 135:
#line 653 "plugins/csstdldr/stdparse.y"
{ printf ("ACTION '%s' ( ... )\n", yyvsp[-3].string); ;
    break;}
case 136:
#line 655 "plugins/csstdldr/stdparse.y"
{ printf ("TRIANGLE (%g,%g,%g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 137:
#line 657 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 138:
#line 659 "plugins/csstdldr/stdparse.y"
{ printf ("MERGE_TEXELS (%d)\n", yyvsp[-1].ival); ;
    break;}
case 141:
#line 678 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g,%g,%g:%g,%g)\n", yyvsp[-3].vect.x, yyvsp[-3].vect.y, yyvsp[-3].vect.z, yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 144:
#line 688 "plugins/csstdldr/stdparse.y"
{ printf ("F ('%s', %g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 147:
#line 698 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 148:
#line 700 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 149:
#line 702 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 150:
#line 704 "plugins/csstdldr/stdparse.y"
{ printf ("MIXMODE (...)\n"); ;
    break;}
case 157:
#line 718 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 162:
#line 732 "plugins/csstdldr/stdparse.y"
{ CAMERA.pos.Set (yyvsp[-1].vect); ;
    break;}
case 163:
#line 734 "plugins/csstdldr/stdparse.y"
{ CAMERA.forward.Set (yyvsp[-1].vect); ;
    break;}
case 164:
#line 736 "plugins/csstdldr/stdparse.y"
{ CAMERA.upward.Set (yyvsp[-1].vect); ;
    break;}
case 165:
#line 738 "plugins/csstdldr/stdparse.y"
{ CAMERA.sector = yyvsp[-1].string;  ;
    break;}
case 166:
#line 753 "plugins/csstdldr/stdparse.y"
{ yyval.string = NULL; ;
    break;}
case 168:
#line 759 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 169:
#line 760 "plugins/csstdldr/stdparse.y"
{ yyval.ival = false; ;
    break;}
case 170:
#line 765 "plugins/csstdldr/stdparse.y"
{ CSCOLOR (yyval.color).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 171:
#line 771 "plugins/csstdldr/stdparse.y"
{ yyval.vect.Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 172:
#line 778 "plugins/csstdldr/stdparse.y"
{ yyval.vect.x = yyval.vect.y = yyval.vect.z = 0; ;
    break;}
case 174:
#line 785 "plugins/csstdldr/stdparse.y"
{ yyval.vect2.Set (yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 175:
#line 793 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &STORAGE.matrix2;
    yyval.matrix->Set (yyvsp[-8].fval, yyvsp[-7].fval, yyvsp[-6].fval, yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval);
  ;
    break;}
case 176:
#line 798 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &STORAGE.matrix2;
    yyval.matrix->Set (yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval);
  ;
    break;}
case 177:
#line 803 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &STORAGE.matrix2;
    yyval.matrix->Identity ();
  ;
    break;}
case 181:
#line 817 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2.Identity (); ;
    break;}
case 182:
#line 819 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csXRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 183:
#line 821 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csYRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 184:
#line 823 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csZRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 185:
#line 825 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= yyvsp[-1].fval; ;
    break;}
case 186:
#line 827 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csMatrix3 (yyvsp[-3].fval, 0, 0, 0, yyvsp[-2].fval, 0, 0, 0, yyvsp[-1].fval); ;
    break;}
case 187:
#line 829 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csXScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 188:
#line 831 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 189:
#line 833 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 192:
#line 843 "plugins/csstdldr/stdparse.y"
{
    yyval.transform = &STORAGE;
    yyval.transform->matrix.Identity ();
    yyval.transform->matrix_valid = false;
    yyval.transform->vector_valid = false;
  ;
    break;}
case 196:
#line 859 "plugins/csstdldr/stdparse.y"
{
    STORAGE.matrix = *yyvsp[-1].matrix;
    STORAGE.matrix_valid = true;
  ;
    break;}
case 197:
#line 864 "plugins/csstdldr/stdparse.y"
{
    STORAGE.vector = CSVECTOR3 (yyvsp[-1].vect);
    STORAGE.vector_valid = true;
  ;
    break;}
case 200:
#line 878 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 201:
#line 880 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 202:
#line 882 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 203:
#line 884 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 204:
#line 886 "plugins/csstdldr/stdparse.y"
{ printf ("GOURAUD ()\n"); ;
    break;}
case 205:
#line 888 "plugins/csstdldr/stdparse.y"
{ printf ("FLATCOL (%g,%g,%g)\n", yyvsp[-1].color.red, yyvsp[-1].color.green, yyvsp[-1].color.blue); ;
    break;}
case 206:
#line 890 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 207:
#line 892 "plugins/csstdldr/stdparse.y"
{ printf ("UV (...)\n"); ;
    break;}
case 208:
#line 894 "plugins/csstdldr/stdparse.y"
{ printf ("UVA (...)\n"); ;
    break;}
case 209:
#line 896 "plugins/csstdldr/stdparse.y"
{ printf ("COLORS (...)\n"); ;
    break;}
case 210:
#line 898 "plugins/csstdldr/stdparse.y"
{ printf ("COSFACT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 211:
#line 900 "plugins/csstdldr/stdparse.y"
{ printf ("CLIP ()\n"); ;
    break;}
case 212:
#line 902 "plugins/csstdldr/stdparse.y"
{ printf ("PORTAL (%s)\n", yyvsp[-1].string); ;
    break;}
case 213:
#line 904 "plugins/csstdldr/stdparse.y"
{ printf ("WARP (...)\n"); ;
    break;}
case 214:
#line 906 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 216:
#line 912 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 225:
#line 940 "plugins/csstdldr/stdparse.y"
{ printf ("MATRIX (...)\n"); ;
    break;}
case 226:
#line 942 "plugins/csstdldr/stdparse.y"
{ printf ("V (...)\n"); ;
    break;}
case 227:
#line 944 "plugins/csstdldr/stdparse.y"
{ printf ("W (...)\n"); ;
    break;}
case 228:
#line 946 "plugins/csstdldr/stdparse.y"
{ printf ("MIRROR ()\n"); ;
    break;}
case 229:
#line 948 "plugins/csstdldr/stdparse.y"
{ printf ("STATIC ()\n"); ;
    break;}
case 232:
#line 958 "plugins/csstdldr/stdparse.y"
{ printf ("ORIG (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 233:
#line 959 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 234:
#line 960 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 235:
#line 961 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 236:
#line 962 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 237:
#line 963 "plugins/csstdldr/stdparse.y"
{ printf ("UVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 238:
#line 964 "plugins/csstdldr/stdparse.y"
{ printf ("VVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 239:
#line 966 "plugins/csstdldr/stdparse.y"
{
    printf ("MATRIX (\n  %g, %g, %g\n  %g, %g, %g\n  %g, %g, %g\n)\n",
    yyvsp[-1].matrix->m11, yyvsp[-1].matrix->m12, yyvsp[-1].matrix->m13, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m22, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m31, yyvsp[-1].matrix->m32, yyvsp[-1].matrix->m33);
  ;
    break;}
case 240:
#line 970 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 241:
#line 972 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 242:
#line 974 "plugins/csstdldr/stdparse.y"
{ printf ("PLANE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 243:
#line 976 "plugins/csstdldr/stdparse.y"
{ printf ("UV_SHIFT (%g, %g)\n", yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 246:
#line 987 "plugins/csstdldr/stdparse.y"
{ printf ("<pos> <radius> <color> <dynamic-flag>\n"); ;
    break;}
case 247:
#line 989 "plugins/csstdldr/stdparse.y"
{ printf ("CENTER (...)\n"); ;
    break;}
case 248:
#line 991 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 249:
#line 993 "plugins/csstdldr/stdparse.y"
{ printf ("DYNAMIC ()\n"); ;
    break;}
case 250:
#line 995 "plugins/csstdldr/stdparse.y"
{ printf ("COLOR ( ... )\n"); ;
    break;}
case 251:
#line 997 "plugins/csstdldr/stdparse.y"
{ printf ("HALO (%g,%g)\n", yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1008 "plugins/csstdldr/stdparse.y"
 /* End of grammar */

/* On initialization, register keyword list with the C++ parser */
extern int init_token_table (const char * const *yytname);
struct __parser_init
{
  __parser_init ()
  {
    init_token_table (yytname);
#if YYDEBUG
    yydebug = 1;
#endif
  }
} __parser_init_dummy;
