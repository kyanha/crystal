
/*  A Bison parser, made from plugins/csstdldr/stdparse.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	KW_ACTION	258
#define	KW_ACTIVATE	259
#define	KW_ACTIVE	260
#define	KW_ADD	261
#define	KW_ALPHA	262
#define	KW_ATTENUATION	263
#define	KW_BECOMING_ACTIVE	264
#define	KW_BECOMING_INACTIVE	265
#define	KW_BEZIER	266
#define	KW_CEILING	267
#define	KW_CEIL_TEXTURE	268
#define	KW_CENTER	269
#define	KW_CIRCLE	270
#define	KW_CLIP	271
#define	KW_COLLECTION	272
#define	KW_COLOR	273
#define	KW_COLORS	274
#define	KW_CONVEX	275
#define	KW_COPY	276
#define	KW_COSFACT	277
#define	KW_CURVECENTER	278
#define	KW_CURVECONTROL	279
#define	KW_CURVESCALE	280
#define	KW_DETAIL	281
#define	KW_DIM	282
#define	KW_DITHER	283
#define	KW_DYNAMIC	284
#define	KW_F	285
#define	KW_FILE	286
#define	KW_FILTER	287
#define	KW_FIRST	288
#define	KW_FIRST_LEN	289
#define	KW_FLATCOL	290
#define	KW_FLOOR	291
#define	KW_FLOOR_CEIL	292
#define	KW_FLOOR_HEIGHT	293
#define	KW_FLOOR_TEXTURE	294
#define	KW_FOG	295
#define	KW_FRAME	296
#define	KW_GOURAUD	297
#define	KW_HALO	298
#define	KW_HEIGHT	299
#define	KW_HEIGHTMAP	300
#define	KW_IDENTITY	301
#define	KW_KEY	302
#define	KW_KEYCOLOR	303
#define	KW_LEN	304
#define	KW_LIBRARY	305
#define	KW_LIGHT	306
#define	KW_LIGHTING	307
#define	KW_LIGHTX	308
#define	KW_LIMB	309
#define	KW_MATRIX	310
#define	KW_MERGE_NORMALS	311
#define	KW_MERGE_TEXELS	312
#define	KW_MERGE_VERTICES	313
#define	KW_MIPMAP	314
#define	KW_MIRROR	315
#define	KW_MIXMODE	316
#define	KW_MOVE	317
#define	KW_MOVEABLE	318
#define	KW_MULTIPLY	319
#define	KW_MULTIPLY2	320
#define	KW_NODE	321
#define	KW_ORIG	322
#define	KW_PLANE	323
#define	KW_POLYGON	324
#define	KW_PORTAL	325
#define	KW_POSITION	326
#define	KW_PRIMARY_ACTIVE	327
#define	KW_PRIMARY_INACTIVE	328
#define	KW_RADIUS	329
#define	KW_ROOM	330
#define	KW_ROT	331
#define	KW_ROT_X	332
#define	KW_ROT_Y	333
#define	KW_ROT_Z	334
#define	KW_SCALE	335
#define	KW_SCALE_X	336
#define	KW_SCALE_Y	337
#define	KW_SCALE_Z	338
#define	KW_SCRIPT	339
#define	KW_SECOND	340
#define	KW_SECONDARY_ACTIVE	341
#define	KW_SECONDARY_INACTIVE	342
#define	KW_SECOND_LEN	343
#define	KW_SECTOR	344
#define	KW_SIXFACE	345
#define	KW_SKELETON	346
#define	KW_SKYDOME	347
#define	KW_SOUND	348
#define	KW_SOUNDS	349
#define	KW_SPLIT	350
#define	KW_SPRITE	351
#define	KW_SPRITE2D	352
#define	KW_START	353
#define	KW_STATBSP	354
#define	KW_STATELESS	355
#define	KW_STATIC	356
#define	KW_TEMPLATE	357
#define	KW_TERRAIN	358
#define	KW_TEX	359
#define	KW_TEXLEN	360
#define	KW_TEXNR	361
#define	KW_TEXTURE	362
#define	KW_TEXTURES	363
#define	KW_TEXTURE_LIGHTING	364
#define	KW_TEXTURE_MIPMAP	365
#define	KW_TEXTURE_SCALE	366
#define	KW_TEX_SET	367
#define	KW_TEX_SET_SELECT	368
#define	KW_THING	369
#define	KW_TRANSFORM	370
#define	KW_TRANSPARENT	371
#define	KW_TRIANGLE	372
#define	KW_TRIGGER	373
#define	KW_UV	374
#define	KW_UVA	375
#define	KW_UVEC	376
#define	KW_UV_SHIFT	377
#define	KW_V	378
#define	KW_VERTEX	379
#define	KW_VERTICES	380
#define	KW_VVEC	381
#define	KW_W	382
#define	KW_WARP	383
#define	KW_WORLD	384
#define	KW_yes	385
#define	KW_no	386
#define	KW_none	387
#define	KW_linear	388
#define	KW_inverse	389
#define	KW_realistic	390
#define	STRING	391
#define	NUMBER	392

#line 20 "plugins/csstdldr/stdparse.y"
 /* Startup C++ code */

#include "sysdef.h"
#include "stdldr.h"
#include "csutil/cscolor.h"
#include "csgeom/math2d.h"
#include "csgeom/math3d.h"

// Unfortunately we can't make yyparse a member function because of the
// dumb prototype definition in bison.simple :-(
//#define yyparse csStandardLoader::yyparse

#define YYPARSE_PARAM ldr
#define THIS	((csStandardLoader *)ldr)
#define yyerror THIS->yyerror
#define yylex   THIS->yylex

/* Define this to debug parser */
//#define YYDEBUG	1

// Macros for accessing yylval as different data types
#define CSCOLOR(x)	(*(csColor *)&x)
#define CSVECTOR2(x)	(*(csVector2 *)&x)
#define CSVECTOR3(x)	(*(csVector3 *)&x)


#line 59 "plugins/csstdldr/stdparse.y"
typedef union
{
  // Just a number
  float fval;
  // A integer number
  int ival;
  // A boolean value
  bool bval;
  // A string value
  char *string;
  // A color
  struct { float red, green, blue; } color;
  // A 2D point
  struct { float x, y; } vect2;
  // A 3D point
  struct { float x, y, z; } vect;
  // A transformation matrix
  csMatrix3 *matrix;
  // A transformation matrix/vector
  csTransform *transform;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1020
#define	YYFLAG		-32768
#define	YYNTBASE	145

#define YYTRANSLATE(x) ((unsigned)(x) <= 393 ? yytranslate[x] : 223)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   138,
   139,     2,     2,   141,   142,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   140,     2,     2,
     2,   143,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   144
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     7,    11,    15,    17,    19,    22,
    32,    34,    35,    38,    40,    43,    46,    51,    56,    61,
    66,    73,    78,    83,    88,    89,    92,    93,    96,    98,
   101,   106,   111,   113,   116,   121,   126,   131,   136,   139,
   144,   149,   154,   159,   164,   169,   172,   177,   182,   187,
   188,   191,   192,   195,   196,   200,   201,   206,   208,   211,
   216,   221,   226,   229,   232,   234,   237,   242,   247,   252,
   257,   262,   267,   272,   277,   282,   287,   292,   297,   299,
   302,   308,   313,   318,   321,   326,   332,   337,   339,   341,
   343,   345,   346,   353,   359,   360,   363,   369,   374,   379,
   384,   390,   396,   402,   408,   416,   422,   428,   434,   440,
   446,   452,   453,   456,   462,   463,   466,   471,   476,   481,
   486,   487,   490,   496,   497,   500,   505,   507,   510,   515,
   520,   525,   530,   535,   540,   547,   550,   556,   562,   568,
   574,   580,   588,   593,   600,   605,   607,   610,   615,   620,
   625,   627,   630,   635,   642,   644,   647,   652,   657,   662,
   667,   672,   677,   682,   687,   692,   693,   694,   696,   699,
   704,   709,   716,   726,   731,   732,   733,   736,   741,   746,
   755,   764,   773,   782,   791,   800,   802,   805,   811,   816,
   821,   826,   831,   836,   842,   845,   853,   859,   864,   869,
   876,   878,   881,   883,   890,   895,   902,   907,   910,   915,
   920,   922,   925,   930,   935,   940,   942,   945,   947,   948,
   950,   953,   958,   963,   968,   974,   979,   984,   991,   996,
  1003,  1008,  1013,  1029,  1045,  1061,  1068,  1073,  1076,  1081,
  1087,  1093,  1098,  1108,  1114,  1120,  1122,  1125,  1130,  1135,
  1140,  1142,  1145,  1150,  1155,  1160,  1165,  1166,  1169,  1174,
  1181,  1186,  1191,  1193,  1196,  1199,  1202,  1205,  1208,  1213,
  1216,  1219,  1221,  1224,  1229,  1234,  1239,  1244,  1251,  1256,
  1261,  1277,  1282,  1298,  1314,  1320,  1323,  1325,  1328,  1330,
  1337,  1342
};

static const short yyrhs[] = {    -1,
   136,     0,   130,     0,   131,     0,   137,   137,   137,     0,
   137,   137,   137,     0,   137,     0,   148,     0,   137,   137,
     0,   137,   137,   137,   137,   137,   137,   137,   137,   137,
     0,   137,     0,     0,   152,   153,     0,   154,     0,   153,
   154,     0,    46,   155,     0,    77,   138,   137,   139,     0,
    78,   138,   137,   139,     0,    79,   138,   137,   139,     0,
    80,   138,   137,   139,     0,    80,   138,   137,   137,   137,
   139,     0,    81,   138,   137,   139,     0,    82,   138,   137,
   139,     0,    83,   138,   137,   139,     0,     0,   138,   139,
     0,     0,   157,   158,     0,   159,     0,   158,   159,     0,
    55,   138,   151,   139,     0,   123,   138,   148,   139,     0,
   161,     0,   160,   161,     0,   106,   138,   136,   139,     0,
    52,   138,   146,   139,     0,   107,   138,   168,   139,     0,
   125,   138,   163,   139,     0,    42,   155,     0,    35,   138,
   147,   139,     0,     7,   138,   137,   139,     0,   119,   138,
   164,   139,     0,   120,   138,   165,   139,     0,    19,   138,
   162,   139,     0,    22,   138,   137,   139,     0,    16,   155,
     0,    70,   138,   136,   139,     0,   128,   138,   166,   139,
     0,    53,   138,   136,   139,     0,     0,   162,   147,     0,
     0,   163,   137,     0,     0,   164,   137,   137,     0,     0,
   165,   137,   137,   137,     0,   167,     0,   166,   167,     0,
    55,   138,   151,   139,     0,   123,   138,   148,   139,     0,
   127,   138,   148,   139,     0,    60,   155,     0,   101,   155,
     0,   169,     0,   168,   169,     0,    67,   138,   149,   139,
     0,    33,   138,   149,   139,     0,    85,   138,   149,   139,
     0,    34,   138,   137,   139,     0,    88,   138,   137,   139,
     0,   121,   138,   148,   139,     0,   126,   138,   148,   139,
     0,    55,   138,   151,   139,     0,   123,   138,   148,   139,
     0,   105,   138,   137,   139,     0,    68,   138,   136,   139,
     0,   122,   138,   150,   139,     0,   171,     0,   170,   171,
     0,   148,   140,   137,   147,   137,     0,    14,   138,   148,
   139,     0,    74,   138,   137,   139,     0,    29,   155,     0,
    18,   138,   147,   139,     0,    43,   138,   137,   137,   139,
     0,     8,   138,   172,   139,     0,   132,     0,   133,     0,
   134,     0,   135,     0,     0,   129,   145,   138,   174,   175,
   139,     0,    50,   145,   138,   175,   139,     0,     0,   175,
   176,     0,    50,   145,   138,   136,   139,     0,   108,   138,
   177,   139,     0,    94,   138,   181,   139,     0,    98,   138,
   193,   139,     0,    89,   145,   138,   185,   139,     0,    68,
   145,   138,   191,   139,     0,    47,   145,   138,   194,   139,
     0,    17,   145,   138,   195,   139,     0,    84,   145,   138,
   136,   140,   136,   139,     0,   112,   145,   138,   197,   139,
     0,    53,   145,   138,   198,   139,     0,   114,   145,   138,
   200,   139,     0,    96,   145,   138,   208,   139,     0,    75,
   145,   138,   209,   139,     0,    90,   145,   138,   219,   139,
     0,     0,   177,   178,     0,   107,   145,   138,   179,   139,
     0,     0,   179,   180,     0,    59,   138,   146,   139,     0,
    28,   138,   146,   139,     0,    31,   138,   136,   139,     0,
   116,   138,   147,   139,     0,     0,   181,   182,     0,    93,
   145,   138,   183,   139,     0,     0,   183,   184,     0,    31,
   138,   136,   139,     0,   186,     0,   185,   186,     0,   124,
   138,   148,   139,     0,    69,   138,   160,   139,     0,   106,
   138,   136,   139,     0,   105,   138,   137,   139,     0,    53,
   138,   136,   139,     0,     4,   138,   136,   139,     0,   118,
   138,   136,   141,   136,   139,     0,    99,   155,     0,   114,
   145,   138,   202,   139,     0,    90,   145,   138,   221,   139,
     0,    51,   145,   138,   170,   139,     0,    96,   145,   138,
   216,   139,     0,    40,   138,   147,   137,   139,     0,    15,
   138,   148,   140,   148,   137,   139,     0,    92,   138,   187,
   139,     0,    47,   138,   136,   141,   136,   139,     0,    66,
   138,   189,   139,     0,   188,     0,   187,   188,     0,    74,
   138,   137,   139,     0,   125,   138,   163,   139,     0,    52,
   138,   146,   139,     0,   190,     0,   189,   190,     0,    71,
   138,   148,   139,     0,    47,   138,   136,   141,   136,   139,
     0,   192,     0,   191,   192,     0,    67,   138,   149,   139,
     0,    33,   138,   149,   139,     0,    85,   138,   149,   139,
     0,    34,   138,   137,   139,     0,    88,   138,   137,   139,
     0,   121,   138,   148,   139,     0,   126,   138,   148,   139,
     0,    55,   138,   151,   139,     0,   123,   138,   148,   139,
     0,     0,     0,   196,     0,   195,   196,     0,   114,   138,
   136,   139,     0,    17,   138,   136,   139,     0,    51,   138,
   136,   141,   137,   139,     0,   118,   138,   136,   141,   136,
   142,   143,   136,   139,     0,    89,   138,   136,   139,     0,
     0,     0,   198,   199,     0,     5,   138,   137,   139,     0,
   100,   138,   137,   139,     0,    72,   138,   137,   137,   137,
   137,   137,   139,     0,    86,   138,   137,   137,   137,   137,
   137,   139,     0,     9,   138,   137,   137,   137,   137,   137,
   139,     0,    73,   138,   137,   137,   137,   137,   137,   139,
     0,    87,   138,   137,   137,   137,   137,   137,   139,     0,
    10,   138,   137,   137,   137,   137,   137,   139,     0,   201,
     0,   200,   201,     0,    69,   145,   138,   160,   139,     0,
   124,   138,   148,   139,     0,   106,   138,   136,   139,     0,
   105,   138,   137,   139,     0,    53,   138,   136,   139,     0,
    62,   138,   156,   139,     0,    40,   138,   147,   137,   139,
     0,    20,   155,     0,    15,   138,   148,   140,   148,   137,
   139,     0,    11,   145,   138,   204,   139,     0,    23,   138,
   148,   139,     0,    25,   138,   137,   139,     0,    24,   138,
   148,   140,   150,   139,     0,   203,     0,   202,   203,     0,
   201,     0,    47,   138,   136,   141,   136,   139,     0,     4,
   138,   136,   139,     0,   118,   138,   136,   141,   136,   139,
     0,   102,   138,   136,   139,     0,    63,   155,     0,   113,
   138,   136,   139,     0,    31,   138,   136,   139,     0,   205,
     0,   204,   205,     0,   106,   138,   136,   139,     0,   107,
   138,   206,   139,     0,   125,   138,   163,   139,     0,   207,
     0,   206,   207,     0,   144,     0,     0,   210,     0,   209,
   210,     0,   109,   138,   146,   139,     0,   111,   138,   137,
   139,     0,   107,   138,   136,   139,     0,   104,   145,   138,
   211,   139,     0,    13,   138,   136,   139,     0,    39,   138,
   136,   139,     0,    53,   138,   136,   141,   136,   139,     0,
    51,   138,   170,   139,     0,    27,   138,   137,   137,   137,
   139,     0,    44,   138,   137,   139,     0,    38,   138,   137,
   139,     0,    37,   138,   138,   150,   139,   138,   150,   139,
   138,   150,   139,   138,   150,   139,   139,     0,    36,   138,
   138,   148,   139,   138,   148,   139,   138,   148,   139,   138,
   148,   139,   139,     0,    12,   138,   138,   148,   139,   138,
   148,   139,   138,   148,   139,   138,   148,   139,   139,     0,
   118,   138,   136,   141,   136,   139,     0,     4,   138,   136,
   139,     0,    99,   155,     0,    62,   138,   156,   139,     0,
    90,   145,   138,   221,   139,     0,   114,   145,   138,   202,
   139,     0,    70,   138,   213,   139,     0,    95,   138,   136,
   141,   136,   138,   215,   139,   139,     0,    96,   145,   138,
   216,   139,     0,    40,   138,   147,   137,   139,     0,   212,
     0,   211,   212,     0,   107,   138,   136,   139,     0,    68,
   138,   136,   139,     0,    49,   138,   137,   139,     0,   214,
     0,   213,   214,     0,    69,   138,   136,   139,     0,    89,
   138,   136,   139,     0,     7,   138,   137,   139,     0,   128,
   138,   166,   139,     0,     0,   215,   137,     0,    62,   138,
   156,   139,     0,   102,   138,   136,   141,   136,   139,     0,
   106,   138,   136,   139,     0,    61,   138,   217,   139,     0,
   218,     0,   217,   218,     0,    21,   155,     0,    64,   155,
     0,    65,   155,     0,     6,   155,     0,     7,   138,   137,
   139,     0,   116,   155,     0,    48,   155,     0,   220,     0,
   219,   220,     0,    62,   138,   156,   139,     0,   111,   138,
   137,   139,     0,   107,   138,   136,   139,     0,    13,   138,
   136,   139,     0,    27,   138,   137,   137,   137,   139,     0,
    44,   138,   137,   139,     0,    38,   138,   137,   139,     0,
    37,   138,   138,   150,   139,   138,   150,   139,   138,   150,
   139,   138,   150,   139,   139,     0,    39,   138,   136,   139,
     0,    36,   138,   138,   148,   139,   138,   148,   139,   138,
   148,   139,   138,   148,   139,   139,     0,    12,   138,   138,
   148,   139,   138,   148,   139,   138,   148,   139,   138,   148,
   139,   139,     0,    40,   138,   147,   137,   139,     0,    20,
   155,     0,   222,     0,   221,   222,     0,   220,     0,   118,
   138,   136,   141,   136,   139,     0,     4,   138,   136,   139,
     0,    63,   155,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   255,   258,   262,   264,   268,   273,   278,   280,   284,   289,
   297,   302,   308,   310,   312,   315,   318,   323,   325,   327,
   329,   331,   333,   335,   339,   341,   345,   351,   353,   355,
   358,   361,   366,   368,   371,   374,   376,   378,   380,   382,
   384,   386,   388,   390,   392,   394,   396,   398,   400,   404,
   406,   410,   412,   415,   417,   421,   423,   428,   430,   433,
   436,   438,   440,   442,   447,   449,   452,   454,   455,   456,
   457,   458,   459,   460,   465,   466,   468,   470,   474,   476,
   479,   483,   485,   487,   489,   491,   493,   496,   498,   499,
   500,   505,   513,   517,   522,   524,   527,   529,   530,   531,
   532,   533,   534,   536,   538,   540,   541,   542,   543,   544,
   545,   551,   553,   556,   561,   563,   566,   568,   569,   570,
   575,   577,   580,   584,   586,   589,   595,   597,   600,   603,
   605,   607,   609,   611,   613,   615,   617,   619,   621,   623,
   625,   627,   630,   632,   634,   638,   640,   643,   646,   648,
   652,   654,   657,   660,   666,   668,   671,   673,   674,   675,
   676,   677,   678,   679,   684,   689,   694,   699,   701,   704,
   707,   709,   711,   713,   719,   724,   726,   729,   731,   732,
   734,   736,   738,   740,   742,   748,   750,   753,   756,   758,
   760,   762,   764,   766,   768,   770,   773,   775,   777,   779,
   783,   785,   788,   790,   792,   794,   796,   798,   800,   802,
   806,   808,   811,   814,   816,   820,   822,   825,   832,   837,
   839,   842,   845,   847,   849,   851,   853,   855,   857,   859,
   861,   863,   865,   870,   876,   878,   880,   882,   884,   886,
   888,   890,   892,   894,   896,   900,   902,   905,   908,   910,
   914,   916,   919,   922,   924,   926,   930,   932,   935,   938,
   940,   942,   946,   948,   951,   953,   954,   955,   956,   958,
   959,   964,   966,   969,   972,   974,   976,   978,   980,   982,
   984,   989,   991,   997,   999,  1001,  1005,  1007,  1010,  1012,
  1014,  1016
};
#endif

#define YYNTOKENS 145
#define YYNNTS 78
#define YYNRULES 292
#define YYNSTATES 1021
#define YYMAXUTOK 393

static const char * const yytname[] = {   "$","error","$undefined.","KW_ACTION",
"KW_ACTIVATE","KW_ACTIVE","KW_ADD","KW_ALPHA","KW_ATTENUATION","KW_BECOMING_ACTIVE",
"KW_BECOMING_INACTIVE","KW_BEZIER","KW_CEILING","KW_CEIL_TEXTURE","KW_CENTER",
"KW_CIRCLE","KW_CLIP","KW_COLLECTION","KW_COLOR","KW_COLORS","KW_CONVEX","KW_COPY",
"KW_COSFACT","KW_CURVECENTER","KW_CURVECONTROL","KW_CURVESCALE","KW_DETAIL",
"KW_DIM","KW_DITHER","KW_DYNAMIC","KW_F","KW_FILE","KW_FILTER","KW_FIRST","KW_FIRST_LEN",
"KW_FLATCOL","KW_FLOOR","KW_FLOOR_CEIL","KW_FLOOR_HEIGHT","KW_FLOOR_TEXTURE",
"KW_FOG","KW_FRAME","KW_GOURAUD","KW_HALO","KW_HEIGHT","KW_HEIGHTMAP","KW_IDENTITY",
"KW_KEY","KW_KEYCOLOR","KW_LEN","KW_LIBRARY","KW_LIGHT","KW_LIGHTING","KW_LIGHTX",
"KW_LIMB","KW_MATRIX","KW_MERGE_NORMALS","KW_MERGE_TEXELS","KW_MERGE_VERTICES",
"KW_MIPMAP","KW_MIRROR","KW_MIXMODE","KW_MOVE","KW_MOVEABLE","KW_MULTIPLY","KW_MULTIPLY2",
"KW_NODE","KW_ORIG","KW_PLANE","KW_POLYGON","KW_PORTAL","KW_POSITION","KW_PRIMARY_ACTIVE",
"KW_PRIMARY_INACTIVE","KW_RADIUS","KW_ROOM","KW_ROT","KW_ROT_X","KW_ROT_Y","KW_ROT_Z",
"KW_SCALE","KW_SCALE_X","KW_SCALE_Y","KW_SCALE_Z","KW_SCRIPT","KW_SECOND","KW_SECONDARY_ACTIVE",
"KW_SECONDARY_INACTIVE","KW_SECOND_LEN","KW_SECTOR","KW_SIXFACE","KW_SKELETON",
"KW_SKYDOME","KW_SOUND","KW_SOUNDS","KW_SPLIT","KW_SPRITE","KW_SPRITE2D","KW_START",
"KW_STATBSP","KW_STATELESS","KW_STATIC","KW_TEMPLATE","KW_TERRAIN","KW_TEX",
"KW_TEXLEN","KW_TEXNR","KW_TEXTURE","KW_TEXTURES","KW_TEXTURE_LIGHTING","KW_TEXTURE_MIPMAP",
"KW_TEXTURE_SCALE","KW_TEX_SET","KW_TEX_SET_SELECT","KW_THING","KW_TRANSFORM",
"KW_TRANSPARENT","KW_TRIANGLE","KW_TRIGGER","KW_UV","KW_UVA","KW_UVEC","KW_UV_SHIFT",
"KW_V","KW_VERTEX","KW_VERTICES","KW_VVEC","KW_W","KW_WARP","KW_WORLD","KW_yes",
"KW_no","KW_none","KW_linear","KW_inverse","KW_realistic","STRING","NUMBER",
"'('","')'","':'","','","'-'","'>'","\"unused\"","name","yesno","color","vector",
"vect_idx","vector2","matrix","@1","matrix_ops","matrix_op","noargs","move",
"@2","move_ops","move_op","polygon_ops","polygon_op","colors","vertex_indices",
"tex_coordinates","uva_coordinates","warp_ops","warp_op","polygon_texture_ops",
"polygon_texture_op","light_ops","light_op","attenuation_op","input","@3","world_contents",
"world_keyword","textures","texture","texture_ops","texture_op","sounds","sound",
"sound_ops","sound_op","sector_ops","sector_op","skydome_ops","skydome_op","node_ops",
"node_op","plane_ops","plane_op","start","key","collection_ops","collection_op",
"tex_set","lightx","lightx_desc","thing_tpl_ops","thing_tpl_op","thing_ops",
"thing_op","bezier_ops","bezier_op","bezier_texture_ops","bezier_texture_op",
"sprite","room_ops","room_op","room_tex_ops","room_tex_op","room_portal_ops",
"room_portal_op","split_list","sprite_ops","mixmode_ops","mixmode_op","sixface_tpl_ops",
"sixface_tpl_op","sixface_ops","sixface_op", NULL
};
static const short yytoknum[] = { 0,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
   376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
   386,   387,   388,   389,   390,   391,   392,    40,    41,    58,
    44,    45,    62,   393,     0
};

static const short yyr1[] = {     0,
   145,   145,   146,   146,   147,   148,   149,   149,   150,   151,
   151,   152,   151,   153,   153,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   155,   155,   157,   156,   158,   158,
   159,   159,   160,   160,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   162,
   162,   163,   163,   164,   164,   165,   165,   166,   166,   167,
   167,   167,   167,   167,   168,   168,   169,   169,   169,   169,
   169,   169,   169,   169,   169,   169,   169,   169,   170,   170,
   171,   171,   171,   171,   171,   171,   171,   172,   172,   172,
   172,   174,   173,   173,   175,   175,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
   176,   177,   177,   178,   179,   179,   180,   180,   180,   180,
   181,   181,   182,   183,   183,   184,   185,   185,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   187,   187,   188,   188,   188,
   189,   189,   190,   190,   191,   191,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   193,   194,   195,   195,   196,
   196,   196,   196,   196,   197,   198,   198,   199,   199,   199,
   199,   199,   199,   199,   199,   200,   200,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   202,   202,   203,   203,   203,   203,   203,   203,   203,   203,
   204,   204,   205,   205,   205,   206,   206,   207,   208,   209,
   209,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   211,   211,   212,   212,   212,
   213,   213,   214,   214,   214,   214,   215,   215,   216,   216,
   216,   216,   217,   217,   218,   218,   218,   218,   218,   218,
   218,   219,   219,   220,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   221,   221,   222,   222,
   222,   222
};

static const short yyr2[] = {     0,
     0,     1,     1,     1,     3,     3,     1,     1,     2,     9,
     1,     0,     2,     1,     2,     2,     4,     4,     4,     4,
     6,     4,     4,     4,     0,     2,     0,     2,     1,     2,
     4,     4,     1,     2,     4,     4,     4,     4,     2,     4,
     4,     4,     4,     4,     4,     2,     4,     4,     4,     0,
     2,     0,     2,     0,     3,     0,     4,     1,     2,     4,
     4,     4,     2,     2,     1,     2,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     1,     2,
     5,     4,     4,     2,     4,     5,     4,     1,     1,     1,
     1,     0,     6,     5,     0,     2,     5,     4,     4,     4,
     5,     5,     5,     5,     7,     5,     5,     5,     5,     5,
     5,     0,     2,     5,     0,     2,     4,     4,     4,     4,
     0,     2,     5,     0,     2,     4,     1,     2,     4,     4,
     4,     4,     4,     4,     6,     2,     5,     5,     5,     5,
     5,     7,     4,     6,     4,     1,     2,     4,     4,     4,
     1,     2,     4,     6,     1,     2,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     0,     0,     1,     2,     4,
     4,     6,     9,     4,     0,     0,     2,     4,     4,     8,
     8,     8,     8,     8,     8,     1,     2,     5,     4,     4,
     4,     4,     4,     5,     2,     7,     5,     4,     4,     6,
     1,     2,     1,     6,     4,     6,     4,     2,     4,     4,
     1,     2,     4,     4,     4,     1,     2,     1,     0,     1,
     2,     4,     4,     4,     5,     4,     4,     6,     4,     6,
     4,     4,    15,    15,    15,     6,     4,     2,     4,     5,
     5,     4,     9,     5,     5,     1,     2,     4,     4,     4,
     1,     2,     4,     4,     4,     4,     0,     2,     4,     6,
     4,     4,     1,     2,     2,     2,     2,     2,     4,     2,
     2,     1,     2,     4,     4,     4,     4,     6,     4,     4,
    15,     4,    15,    15,     5,     2,     1,     2,     1,     6,
     4,     2
};

static const short yydefact[] = {     0,
     1,     1,     2,     0,     0,    95,    92,     0,    95,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     1,
     0,     0,     1,     1,    94,    96,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   121,     0,   166,   112,
     0,     0,    93,     0,   167,     0,   176,     0,     0,     0,
     0,     0,     0,   219,     0,     0,   175,     0,     0,     0,
     0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   155,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     1,     0,     1,    25,     1,     0,     0,
     0,     1,     0,     0,   220,     0,     0,     0,     0,     0,
     1,     0,     0,     0,     1,     0,     1,    25,     0,     0,
     1,     0,     0,     0,   127,     0,     0,    25,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
     1,    99,   122,     0,   100,     1,    98,   113,     0,     1,
     0,    25,     0,     0,     0,     0,     0,     0,     1,     0,
     0,     0,     0,   186,     0,     0,     0,     0,     0,   104,
   169,   103,    97,     0,     0,     0,     0,     0,     0,     0,
     0,   107,   177,     0,     0,    12,     0,     0,     0,     0,
     0,     0,   102,   156,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
     0,     0,   238,     0,     0,     0,     0,     0,     0,   110,
   221,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,     0,     0,     0,     0,     0,   101,
   128,     0,     0,   286,     0,     0,     0,     0,     0,     0,
     0,    27,     0,     0,   111,   273,     0,   109,     0,   106,
     0,     0,   195,     0,     0,     0,     0,     0,    27,     0,
     0,     0,     0,   108,   187,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     7,     8,
     0,     0,    11,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    25,     0,     0,     0,
     0,    79,     0,     0,     0,     0,     0,     0,     0,     0,
   251,     0,     0,     0,    26,     0,     0,     3,     4,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   151,     0,    25,     0,     0,     0,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    33,     0,     0,     0,     0,     0,   146,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   124,   115,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   171,
     0,   174,   170,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   158,   160,     0,   164,    25,     0,     0,
     0,     0,     0,     0,     0,    13,    14,   157,   159,   161,
   162,   165,   163,   237,     0,   226,     0,     0,     0,     0,
   232,   227,     0,     0,   231,     0,     0,     0,    84,     0,
     0,     0,   229,    80,     0,   239,     0,     0,    28,    29,
     0,     0,     0,     0,   242,   252,     0,    25,     0,   289,
     0,   287,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   246,   224,   222,   223,     0,     0,     0,    25,
     0,     0,     0,   203,     0,   201,     0,   105,   134,     0,
     0,     0,     0,   133,     0,     0,   145,   152,     0,    46,
    50,     0,     0,    39,     0,     0,     0,     0,     0,    54,
    56,    52,     0,   130,    34,     0,     0,     0,    52,   143,
   147,     0,   132,   131,     0,     0,   129,     0,   277,     0,
     0,     0,   280,   282,     0,   279,   274,   276,   275,     0,
     0,     0,     0,     0,     0,   211,     0,   198,     0,   199,
     0,   192,   193,     0,   191,   190,   189,     0,     0,   178,
     0,     0,     0,     0,     0,     0,   179,     6,     0,    16,
     0,     0,     0,     0,     0,     0,     0,    15,     0,     0,
     0,     9,     0,     5,   245,    88,    89,    90,    91,     0,
     0,     0,     0,     0,     0,     0,    12,     0,    30,     0,
     0,     0,     0,    25,    25,     0,     0,     0,    58,     0,
   292,     0,   240,   288,     0,     0,    27,     0,     0,   244,
     0,     0,     0,   225,   247,     0,     0,     0,   208,     0,
     0,     0,   241,   202,     0,     0,   141,     0,   139,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    65,     0,     0,     0,     0,   138,     0,     0,
     0,   140,   137,     0,     0,     0,     0,     0,   285,     0,
   123,   125,     0,     0,     0,     0,   114,   116,     0,     0,
    52,   197,   212,     0,     0,   194,   188,   172,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   230,     0,     0,    87,    82,    85,
     0,    83,     0,   228,     0,     0,   255,   253,   254,    12,
    63,    64,     0,     0,   256,    59,     0,     0,   257,    25,
     0,    25,    25,    25,    25,    25,     0,   263,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   236,     0,   144,     0,   153,    41,    44,    51,    45,    40,
    36,    49,    47,    35,     0,     0,    12,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    37,    66,     0,    42,
     0,    43,    53,    38,    48,   150,   148,   149,   135,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,   218,
     0,   216,     0,     0,   200,     0,     0,     0,     0,     0,
     0,     0,     0,    17,    18,    19,     0,    20,    22,    23,
    24,     0,     0,     0,    86,    81,    31,    32,     0,     0,
     0,   291,     0,     0,   268,     0,   265,   271,   266,   267,
   270,   262,   264,   259,     0,   261,   250,   249,   248,   205,
   210,     0,   207,   209,     0,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   213,
   214,   217,   215,   196,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    60,    61,    62,     0,
   258,     0,     0,     0,     0,     0,   154,    68,    70,    74,
    67,    77,    69,    71,    76,    72,    78,    75,    73,    57,
     0,     0,     0,   126,   118,   119,   117,   120,   173,   182,
   185,   180,   183,   181,   184,     0,    21,     0,     0,     0,
   290,   243,   269,   260,   204,   206,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   235,   234,   233,   284,   283,   281,     0,     0,     0
};

static const short yydefgoto[] = {     4,
   340,   312,   290,   291,   450,   294,   295,   436,   437,   213,
   324,   325,   469,   470,   370,   371,   663,   686,   684,   685,
   628,   629,   682,   683,   321,   322,   610,  1018,     9,     8,
    26,    56,   148,   561,   708,    53,   143,   560,   702,   124,
   125,   376,   377,   353,   354,    78,    79,    55,    66,    64,
    65,   149,    68,   183,   163,   504,   505,   506,   565,   566,
   831,   832,   144,   104,   105,   492,   493,   330,   331,   864,
   488,   767,   768,   139,   480,   481,   482
};

static const short yypact[] = {   -27,
  -110,  -110,-32768,  -106,  -103,-32768,-32768,   617,-32768,  -110,
  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -110,  -100,  -110,
   -83,   -60,  -110,  -110,-32768,-32768,   677,   -56,   -50,   -42,
   -19,     0,     3,    27,    31,    40,-32768,    57,-32768,-32768,
    58,    86,-32768,   160,-32768,    16,-32768,   312,   899,    30,
   810,  1017,   -68,-32768,    90,   -76,-32768,   943,    98,   105,
   106,   120,   123,    96,-32768,   108,   146,    84,   149,   151,
   152,   154,   155,   156,   157,   159,   161,   834,-32768,   162,
   163,   165,   166,   167,   168,   169,   171,   173,   174,   176,
   177,   179,   180,  -110,   181,  -110,   186,  -110,   190,   191,
   193,  -110,   196,   226,-32768,   158,   198,   200,   203,   204,
  -110,   205,   209,   210,  -110,   213,  -110,   186,   214,   217,
  -110,   218,   219,   335,-32768,   223,   224,   186,   228,   230,
   233,   238,   240,   243,   245,   246,   249,   253,   642,-32768,
  -110,-32768,-32768,   254,-32768,  -110,-32768,-32768,   256,  -110,
   260,   186,   261,   265,   267,   268,   269,   270,  -110,   271,
   275,   277,   399,-32768,   280,   281,   284,   285,   293,-32768,
-32768,-32768,-32768,   292,   294,   298,   299,   305,   306,   308,
   309,-32768,-32768,   212,   255,   311,   212,   212,   313,   319,
   319,   319,-32768,-32768,   321,   320,   324,   327,   328,   331,
   333,   329,   338,   339,    89,   341,-32768,    26,   340,   344,
   343,   345,-32768,   347,   346,   -64,   350,   351,   354,-32768,
-32768,   355,   357,   319,   338,   358,   364,   370,    45,   716,
   369,   -16,   373,-32768,   375,   377,   376,   380,   319,-32768,
-32768,   379,   382,-32768,   383,   381,   391,   393,   395,   338,
   396,-32768,   398,   400,-32768,-32768,   397,-32768,   401,-32768,
   403,   319,-32768,   319,   319,   405,   338,   407,-32768,   410,
   408,   417,   319,-32768,-32768,   415,   342,   418,   419,   420,
   422,   423,   425,   428,   430,   432,   434,   435,   436,-32768,
   437,   448,   451,   450,   501,   452,   454,   455,   436,   458,
   461,   463,   465,   319,   470,   453,   319,   473,   481,   483,
   475,   486,   487,   490,   491,   495,   186,   497,   498,   416,
    36,-32768,   433,   499,   -12,   505,   506,   508,   518,    12,
-32768,   833,   484,    87,-32768,   115,   521,-32768,-32768,   524,
   526,   786,   496,   527,   529,   517,   534,   532,    89,   535,
   537,   538,   -31,-32768,   539,   186,   545,   546,   549,   186,
   550,   551,   552,   553,   555,   559,   560,   561,   562,   533,
-32768,   833,   564,   565,   567,    94,-32768,    87,   571,   573,
   786,   575,   579,   319,   580,   583,   319,   473,   582,   587,
   585,   594,   595,   597,   598,-32768,-32768,    73,   599,   601,
   602,   604,   607,   608,   609,   716,   611,   615,   616,-32768,
   620,-32768,-32768,   605,   621,   622,   625,   626,   627,   628,
   633,   635,   639,-32768,-32768,   640,-32768,   186,   634,   644,
   645,   646,   654,   655,   656,   501,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   641,-32768,   658,   657,   661,   660,
-32768,-32768,   663,   664,-32768,   148,   319,   338,-32768,   665,
   675,   676,-32768,-32768,   610,-32768,   680,   681,   -12,-32768,
   678,   684,   685,   127,-32768,-32768,   686,   186,   689,-32768,
   459,-32768,   692,   691,   693,   694,   696,   699,   702,   704,
   705,   113,-32768,-32768,-32768,-32768,   709,   713,   714,   186,
   718,   720,   721,-32768,    37,-32768,   726,-32768,-32768,   319,
   715,   728,    62,-32768,   729,   319,-32768,-32768,   737,-32768,
-32768,   738,   338,-32768,   -64,   730,   742,   744,   954,-32768,
-32768,-32768,   127,-32768,-32768,   488,   -64,   745,-32768,-32768,
-32768,   746,-32768,-32768,   349,   747,-32768,   748,-32768,   749,
   751,   754,-32768,-32768,   755,-32768,-32768,-32768,-32768,   -10,
    28,   743,   759,   760,   109,-32768,   319,-32768,   473,-32768,
   766,-32768,-32768,   589,-32768,-32768,-32768,   768,   394,-32768,
   771,   776,   777,   780,   781,   783,-32768,-32768,   784,-32768,
   788,   790,   792,   793,   794,   795,   796,-32768,   785,   802,
   804,-32768,   807,-32768,-32768,-32768,-32768,-32768,-32768,   808,
   809,   814,   812,   817,   338,   820,   311,   319,-32768,   823,
   825,   826,   832,   186,   186,   836,   837,   145,-32768,   835,
-32768,   840,-32768,-32768,   839,   211,-32768,   842,   843,-32768,
   845,   848,   849,-32768,-32768,   850,   854,   855,-32768,   856,
   857,   861,-32768,-32768,   860,   863,-32768,   862,-32768,   805,
   865,   868,   -92,   872,   877,   879,   880,   881,   884,   886,
   887,   888,   889,   890,   893,   895,   896,   898,   900,   902,
   903,   947,-32768,   -86,    35,    51,   231,-32768,   904,   906,
    70,-32768,-32768,   907,   909,   911,   913,   920,-32768,   922,
-32768,-32768,   924,   925,   926,   927,-32768,-32768,   930,   740,
-32768,-32768,-32768,   934,   933,-32768,-32768,-32768,   687,   937,
   941,   944,   945,   946,   948,   950,   949,   951,   952,   103,
   953,   955,   956,   319,-32768,   319,   473,-32768,-32768,-32768,
   957,-32768,   960,-32768,   959,   961,-32768,-32768,-32768,   311,
-32768,-32768,   319,   319,-32768,-32768,   962,   831,-32768,   186,
   964,   186,   186,   186,   186,   186,    21,-32768,   965,   958,
   966,   967,   968,   969,   970,   971,   972,   973,   975,   974,
-32768,   977,-32768,   981,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   212,   982,   311,   212,   984,   212,
   985,   986,   319,   473,   319,   319,-32768,-32768,   988,-32768,
   989,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   319,
-32768,   319,   473,   991,   -64,   993,   -64,   338,   979,-32768,
    14,-32768,   118,   992,-32768,   994,   995,   996,   997,   998,
   999,  1000,  1001,-32768,-32768,-32768,  1002,-32768,-32768,-32768,
-32768,  1003,  1004,  1005,-32768,-32768,-32768,-32768,  1006,  1007,
  1008,-32768,  1012,   134,-32768,  1013,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1015,-32768,-32768,-32768,-32768,-32768,
-32768,  1016,-32768,-32768,  1018,-32768,  1010,  1014,  1019,  1020,
  1021,  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,-32768,
  1032,  1031,  1033,  1034,  1035,  1036,  1037,  1038,  1039,-32768,
-32768,-32768,-32768,-32768,  1040,  1041,  1042,  1043,  1044,  1045,
  1046,  1049,  1048,   983,  1050,  1051,-32768,-32768,-32768,  1052,
-32768,  1053,  1054,  1055,  1056,  1057,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1059,  1060,  1061,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1063,-32768,   319,   319,   473,
-32768,-32768,-32768,-32768,-32768,-32768,   319,   319,   473,  1064,
  1065,  1066,  1067,  1068,  1069,  1070,-32768,  1072,  1073,  1074,
  1075,  1076,  1077,   319,   319,   473,   319,   319,   473,  1078,
  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,  1088,
  1089,-32768,-32768,-32768,-32768,-32768,-32768,  1093,  1103,-32768
};

static const short yypgoto[] = {   110,
  -517,  -221,  -190,  -181,  -378,  -605,-32768,-32768,   648,  -115,
  -247,-32768,-32768,   671,   683,  -361,-32768,  -525,-32768,-32768,
   578,  -589,-32768,   474,   806,  -310,-32768,-32768,-32768,  1132,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1047,-32768,   827,-32768,   876,-32768,  1112,-32768,-32768,-32768,
  1138,-32768,-32768,-32768,-32768,   -28,   851,  -481,-32768,   592,
-32768,   385,-32768,-32768,  1126,-32768,   739,-32768,   905,-32768,
   858,-32768,   466,-32768,   -35,   866,  -463
};


#define	YYLAST		1238


static const short yytable[] = {   300,
   301,   302,   234,   347,   393,   296,   297,   666,   535,   552,
   464,   745,   244,   691,   320,   351,   140,   634,   326,   689,
   700,   405,     1,   654,   141,     3,   760,   761,   391,   164,
   146,     6,   326,   346,     7,   373,   263,    37,   756,   352,
   497,   762,   467,   314,   311,   403,   787,   150,   383,   315,
   809,   151,   810,   316,    39,   703,   152,   374,   704,   153,
   154,   155,   147,   654,   317,   338,   339,   498,   763,   314,
   142,   399,   634,   400,   401,   315,   156,    40,   318,   316,
   327,    44,   409,   499,   764,   765,   705,    45,   174,   157,
   317,   351,   175,   176,   327,    46,   314,   756,   158,   500,
   328,     2,   315,   256,   318,   159,   316,   517,   375,   319,
   468,     5,    59,   445,   328,   352,   448,   317,    47,    28,
    29,    30,    31,    32,    33,    34,    35,    36,   701,    38,
   320,   318,    41,    42,   275,   319,   766,    48,   501,   329,
    49,   160,   161,   706,   859,   373,    60,   484,   485,   502,
   475,    67,   911,   329,   503,   177,   178,   830,   320,   872,
   162,   489,   319,   489,    50,   106,   707,   374,    51,   179,
   180,   811,   299,   812,   463,   653,    59,    52,   562,   563,
   490,   623,   490,   181,    61,   833,   624,   813,   486,   814,
   715,   890,   487,   548,    54,    57,   551,   564,   299,   623,
   659,   459,   464,   209,   624,   211,   813,   214,   818,    62,
    60,   218,   535,    63,   562,   563,   760,   761,   375,   491,
   227,   491,   182,    58,   231,   299,   233,   625,   145,    80,
   237,   762,   540,   564,   170,   165,   612,    81,    82,   847,
   520,   848,   166,   167,   524,   625,   172,   712,    61,   626,
   257,   644,    83,   627,   813,   259,   913,   168,   763,   261,
   169,    84,    85,    86,    87,    88,   611,   626,   270,    89,
   931,   627,   932,    62,   764,   765,    90,    63,    91,   606,
   607,   608,   609,   755,   173,   623,   184,    92,   185,   186,
   624,   187,   188,   189,   190,    93,   191,   222,   192,   195,
   196,   665,   197,   198,   199,   200,   201,   906,   202,   908,
   203,   204,   590,   205,   206,    94,   207,   208,   210,   656,
    95,    96,   320,   212,    97,   661,   766,   215,   216,    98,
   217,   625,    99,   219,   100,   223,   101,   224,   107,   102,
   225,   226,   228,   103,    69,    70,   229,   230,   289,   108,
   232,   235,   497,   626,   236,   238,   239,   627,   854,   150,
   242,   243,   631,   151,   220,   245,    71,   246,   152,   815,
   247,   153,   154,   155,   109,   248,   714,   249,    72,   498,
   250,   110,   251,   252,   649,   111,   253,   112,   156,   769,
   254,   292,   258,   743,   260,   499,    73,   262,   264,    74,
   113,   157,   265,   114,   266,   267,   268,   269,   271,   150,
   158,   500,   272,   151,   273,   276,   277,   159,   152,   278,
   279,   153,   154,   155,   115,   897,   116,   746,   280,   281,
   117,   282,    75,   118,    76,   283,   284,    77,   156,   119,
   120,   788,   285,   286,   904,   287,   288,   293,   121,   298,
   501,   157,   122,   160,   161,   299,   303,   304,   123,   305,
   158,   502,   477,   306,   310,   307,   503,   159,   308,   309,
   126,   127,   162,   240,   311,   313,   323,   332,   128,   333,
   334,   337,   411,   335,   336,   129,   341,   693,   342,   343,
   344,   477,   345,   348,   130,   131,   132,   133,   134,   126,
   127,   349,   135,   160,   161,   350,   372,   128,   751,   752,
   378,   379,   380,   381,   129,   382,   384,   385,   387,   386,
   136,   478,   162,   130,   131,   132,   133,   134,   388,   389,
   390,   135,   392,   394,   396,   719,   395,   274,   397,   355,
   398,   402,   404,   852,   407,   853,   428,   406,   356,   136,
   478,   357,   408,   410,   358,   462,   412,   413,   415,   416,
   414,   417,   860,   861,   418,   137,   419,   359,   420,   138,
   421,   422,   423,   465,   360,   424,   479,   429,   430,   431,
   432,   433,   434,   435,   361,   362,   425,   426,   427,   447,
   438,   983,   439,   440,   137,   355,   441,   633,   138,   442,
   986,   443,   363,   444,   356,   479,   909,   357,   446,   449,
   358,   453,   896,   888,   898,   899,   891,  1002,   893,   451,
  1005,   452,   454,   359,   483,   455,   688,   456,   457,   902,
   360,   903,   458,    10,   460,   461,   507,   466,   364,   365,
   361,   362,   471,   472,   865,   473,   867,   868,   869,   870,
   871,   366,   367,   126,   127,   474,   510,   368,   363,   494,
   369,   128,   495,    11,   496,   508,    12,   509,   129,    13,
   511,   534,   512,   514,   515,   516,   519,   130,   131,   132,
   133,   134,   521,   522,    14,   135,   523,   525,   526,   527,
   528,    15,   529,    10,   364,   365,   530,   531,   532,   533,
    16,   537,   538,   136,   539,    17,    18,   366,   367,   543,
    19,   544,    20,   368,    21,   546,   369,   547,   549,   550,
   553,   555,   355,    11,    22,   554,    12,   717,    23,    13,
    24,   356,   556,   557,   357,   558,   559,   358,   567,   568,
   579,   569,   570,   571,    14,   616,   572,   573,   137,   575,
   359,    15,   138,   576,   577,    25,   578,   360,   581,   580,
    16,   582,   583,   584,   585,    17,    18,   361,   362,   586,
    19,   591,    20,   587,    21,   588,   589,   981,   982,   599,
   255,   592,   593,   594,    22,   363,   984,   985,    23,   497,
    24,   595,   596,   597,   600,   601,   150,   602,   603,   604,
   151,   613,   605,  1000,  1001,   152,  1003,  1004,   153,   154,
   155,   614,   615,   107,   620,    43,   498,   617,   618,   621,
   622,   364,   365,   630,   108,   156,   632,   635,   636,   836,
   637,   638,   499,   639,   366,   367,   477,   640,   157,   641,
   368,   642,   643,   369,   126,   127,   646,   158,   500,   109,
   647,   648,   128,   657,   159,   650,   110,   651,   652,   129,
   111,   655,   112,   658,   660,   667,    69,    70,   130,   131,
   132,   133,   134,   662,   664,   113,   135,   668,   114,   669,
   709,   690,   694,   830,   692,   696,   695,   501,    71,   697,
   160,   161,   698,   699,   136,   478,   710,   711,   502,   115,
    72,   116,    80,   503,   716,   117,   718,   720,   118,   162,
    81,    82,   721,   722,   119,   120,   723,   724,    73,   725,
   726,    74,   734,   121,   727,    83,   728,   122,   729,   730,
   731,   732,   733,   123,    84,    85,    86,    87,    88,   137,
   735,   736,    89,   138,   737,   784,   738,   739,   741,    90,
   479,    91,   740,   150,    75,   742,    76,   151,   744,    77,
    92,   747,   152,   748,   749,   153,   154,   155,    93,   750,
   757,   863,   193,   753,   754,   758,   759,   770,   771,   670,
   671,   772,   156,   773,   774,   775,   670,   671,    94,   776,
   777,   778,   779,    95,    96,   157,   780,    97,   781,   782,
   783,   672,    98,   785,   158,    99,   786,   100,   672,   101,
   789,   159,   102,   673,   674,   790,   103,   791,   792,   793,
   673,   674,   794,   795,   796,   797,   798,   799,   126,   127,
   800,   675,   801,   802,   676,   803,   128,   804,   675,   805,
   806,   676,   816,   129,   817,   819,   820,   160,   161,   821,
   822,   677,   130,   131,   132,   133,   134,   823,   677,   824,
   135,   825,   826,   827,   828,   829,   162,   678,   679,   680,
   834,   835,   681,   837,   678,   679,   680,   838,   136,   681,
   839,   840,   841,   598,   842,   807,   843,   844,   574,   845,
   846,   849,  1019,   850,   851,   855,   856,   857,   875,   858,
   862,   866,  1020,   874,   876,   877,   878,   879,   880,   881,
   687,   883,   882,   884,   885,   886,   887,   910,   889,   892,
   968,   894,   895,   137,   900,   901,   905,   138,   907,   915,
   914,   916,   917,   918,   919,   920,   921,   922,   923,   619,
    27,   924,   925,   926,   927,   928,   929,   930,   937,   933,
   934,   935,   938,   936,   513,   808,   713,   939,   940,   941,
   942,   943,   944,   945,   946,   947,   948,   949,   950,   951,
   241,   952,   953,   954,   955,   956,   957,   958,   959,   960,
   961,   962,   963,   964,   965,   966,   967,   969,   970,   194,
   971,   972,   973,   974,   975,   976,   977,   978,   979,   980,
   987,   171,   541,   988,   989,   990,   991,   992,   993,   994,
   995,   996,   997,   998,   999,   912,  1006,  1007,  1008,  1009,
  1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,   518,   221,
   645,   545,   873,     0,   476,   542,     0,   536
};

static const short yycheck[] = {   190,
   191,   192,   118,   225,   252,   187,   188,   525,   370,   388,
   321,   617,   128,   539,   205,    47,    52,   481,     7,   537,
    31,   269,    50,   505,    93,   136,     6,     7,   250,    58,
   107,   138,     7,   224,   138,    52,   152,   138,   628,    71,
     4,    21,    55,     8,   137,   267,   139,    11,   239,    14,
   137,    15,   139,    18,   138,    28,    20,    74,    31,    23,
    24,    25,   139,   545,    29,   130,   131,    31,    48,     8,
   139,   262,   536,   264,   265,    14,    40,   138,    43,    18,
    69,   138,   273,    47,    64,    65,    59,   138,     5,    53,
    29,    47,     9,    10,    69,   138,     8,   687,    62,    63,
    89,   129,    14,   139,    43,    69,    18,   139,   125,    74,
   123,     2,    17,   304,    89,    71,   307,    29,   138,    10,
    11,    12,    13,    14,    15,    16,    17,    18,   139,    20,
   321,    43,    23,    24,   163,    74,   116,   138,   102,   128,
   138,   105,   106,   116,   750,    52,    51,    61,    62,   113,
   139,   136,   139,   128,   118,    72,    73,   144,   349,   139,
   124,    49,    74,    49,   138,   136,   139,    74,   138,    86,
    87,   137,   137,   139,   139,   139,    17,   138,   106,   107,
    68,    55,    68,   100,    89,   711,    60,   137,   102,   139,
   569,   797,   106,   384,   138,   138,   387,   125,   137,    55,
   139,   317,   513,    94,    60,    96,   137,    98,   139,   114,
    51,   102,   574,   118,   106,   107,     6,     7,   125,   107,
   111,   107,   139,   138,   115,   137,   117,   101,   139,     4,
   121,    21,   139,   125,   139,   138,   458,    12,    13,   137,
   356,   139,   138,   138,   360,   101,   139,   139,    89,   123,
   141,   139,    27,   127,   137,   146,   139,   138,    48,   150,
   138,    36,    37,    38,    39,    40,   457,   123,   159,    44,
   137,   127,   139,   114,    64,    65,    51,   118,    53,   132,
   133,   134,   135,   139,   139,    55,   138,    62,   138,   138,
    60,   138,   138,   138,   138,    70,   138,   140,   138,   138,
   138,   523,   138,   138,   138,   138,   138,   825,   138,   827,
   138,   138,   428,   138,   138,    90,   138,   138,   138,   510,
    95,    96,   513,   138,    99,   516,   116,   138,   138,   104,
   138,   101,   107,   138,   109,   138,   111,   138,     4,   114,
   138,   138,   138,   118,    33,    34,   138,   138,   137,    15,
   138,   138,     4,   123,   138,   138,   138,   127,   737,    11,
   138,   138,   478,    15,   139,   138,    55,   138,    20,   139,
   138,    23,    24,    25,    40,   138,   567,   138,    67,    31,
   138,    47,   138,   138,   500,    51,   138,    53,    40,   637,
   138,   137,   139,   615,   139,    47,    85,   138,   138,    88,
    66,    53,   138,    69,   138,   138,   138,   138,   138,    11,
    62,    63,   138,    15,   138,   136,   136,    69,    20,   136,
   136,    23,    24,    25,    90,   804,    92,   618,   136,   138,
    96,   138,   121,    99,   123,   138,   138,   126,    40,   105,
   106,   663,   138,   138,   823,   138,   138,   137,   114,   137,
   102,    53,   118,   105,   106,   137,   136,   138,   124,   136,
    62,   113,     4,   137,   136,   138,   118,    69,   138,   137,
    12,    13,   124,   139,   137,   137,   136,   138,    20,   136,
   138,   136,   141,   139,   138,    27,   137,   139,   138,   136,
   136,     4,   136,   136,    36,    37,    38,    39,    40,    12,
    13,   138,    44,   105,   106,   136,   138,    20,   624,   625,
   138,   137,   136,   138,    27,   136,   138,   136,   138,   137,
    62,    63,   124,    36,    37,    38,    39,    40,   138,   137,
   136,    44,   137,   136,   138,   142,   137,   139,   138,     7,
   138,   137,   136,   734,   137,   736,    46,   138,    16,    62,
    63,    19,   136,   139,    22,   140,   139,   139,   137,   137,
   141,   137,   753,   754,   137,   107,   137,    35,   137,   111,
   137,   137,   137,   141,    42,   139,   118,    77,    78,    79,
    80,    81,    82,    83,    52,    53,   139,   137,   139,   137,
   139,   970,   139,   139,   107,     7,   139,   139,   111,   139,
   979,   139,    70,   139,    16,   118,   828,    19,   139,   137,
    22,   137,   803,   795,   805,   806,   798,   996,   800,   139,
   999,   139,   137,    35,   141,   139,   139,   138,   138,   820,
    42,   822,   138,    17,   138,   138,   141,   139,   106,   107,
    52,    53,   138,   138,   760,   138,   762,   763,   764,   765,
   766,   119,   120,    12,    13,   138,   140,   125,    70,   139,
   128,    20,   139,    47,   139,   139,    50,   139,    27,    53,
   137,   139,   141,   139,   138,   138,   138,    36,    37,    38,
    39,    40,   138,   138,    68,    44,   138,   138,   138,   138,
   138,    75,   138,    17,   106,   107,   138,   138,   138,   138,
    84,   138,   138,    62,   138,    89,    90,   119,   120,   139,
    94,   139,    96,   125,    98,   141,   128,   139,   139,   137,
   139,   137,     7,    47,   108,   139,    50,   139,   112,    53,
   114,    16,   139,   139,    19,   139,   139,    22,   140,   139,
   136,   140,   139,   137,    68,   136,   139,   139,   107,   139,
    35,    75,   111,   139,   139,   139,   137,    42,   137,   139,
    84,   137,   137,   137,   137,    89,    90,    52,    53,   137,
    94,   138,    96,   139,    98,   137,   137,   968,   969,   139,
   139,   138,   138,   138,   108,    70,   977,   978,   112,     4,
   114,   138,   138,   138,   137,   139,    11,   137,   139,   137,
    15,   137,   139,   994,   995,    20,   997,   998,    23,    24,
    25,   137,   137,     4,   137,   139,    31,   138,   138,   136,
   136,   106,   107,   138,    15,    40,   138,   136,   138,   143,
   138,   138,    47,   138,   119,   120,     4,   139,    53,   138,
   125,   138,   138,   128,    12,    13,   138,    62,    63,    40,
   138,   138,    20,   139,    69,   138,    47,   138,   138,    27,
    51,   136,    53,   136,   136,   136,    33,    34,    36,    37,
    38,    39,    40,   137,   137,    66,    44,   136,    69,   136,
   138,   137,   136,   144,   139,   137,   139,   102,    55,   139,
   105,   106,   139,   139,    62,    63,   138,   138,   113,    90,
    67,    92,     4,   118,   139,    96,   139,   137,    99,   124,
    12,    13,   137,   137,   105,   106,   137,   137,    85,   137,
   137,    88,   138,   114,   137,    27,   137,   118,   137,   137,
   137,   137,   137,   124,    36,    37,    38,    39,    40,   107,
   139,   138,    44,   111,   138,   141,   139,   139,   137,    51,
   118,    53,   139,    11,   121,   139,   123,    15,   139,   126,
    62,   139,    20,   139,   139,    23,    24,    25,    70,   138,
   136,   141,   139,   138,   138,   136,   138,   136,   136,    33,
    34,   137,    40,   136,   136,   136,    33,    34,    90,   136,
   136,   136,   136,    95,    96,    53,   136,    99,   139,   137,
   139,    55,   104,   139,    62,   107,   139,   109,    55,   111,
   139,    69,   114,    67,    68,   139,   118,   139,   139,   139,
    67,    68,   139,   138,   138,   138,   138,   138,    12,    13,
   138,    85,   138,   138,    88,   138,    20,   138,    85,   138,
   138,    88,   139,    27,   139,   139,   138,   105,   106,   139,
   138,   105,    36,    37,    38,    39,    40,   138,   105,   138,
    44,   138,   138,   138,   138,   136,   124,   121,   122,   123,
   137,   139,   126,   137,   121,   122,   123,   137,    62,   126,
   137,   137,   137,   436,   137,   139,   137,   139,   406,   139,
   139,   139,     0,   139,   139,   139,   137,   139,   141,   139,
   139,   138,     0,   139,   139,   139,   139,   139,   139,   139,
   533,   139,   141,   139,   141,   139,   136,   139,   137,   136,
   138,   137,   137,   107,   137,   137,   136,   111,   136,   136,
   139,   137,   137,   137,   137,   137,   137,   137,   137,   469,
     9,   139,   139,   139,   139,   139,   139,   136,   139,   137,
   136,   136,   139,   136,   349,   682,   565,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   137,   139,
   124,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   137,   139,   138,   138,    78,
   139,   139,   139,   139,   139,   139,   138,   138,   138,   137,
   137,    64,   376,   139,   139,   139,   139,   139,   139,   138,
   138,   138,   138,   138,   138,   831,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   353,   104,
   492,   381,   767,    -1,   330,   378,    -1,   372
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 257 "plugins/csstdldr/stdparse.y"
{ yyval.string = NULL; ;
    break;}
case 3:
#line 263 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 4:
#line 264 "plugins/csstdldr/stdparse.y"
{ yyval.ival = false; ;
    break;}
case 5:
#line 269 "plugins/csstdldr/stdparse.y"
{ CSCOLOR (yyval.color).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 6:
#line 274 "plugins/csstdldr/stdparse.y"
{ CSVECTOR3 (yyval.vect).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 7:
#line 279 "plugins/csstdldr/stdparse.y"
{ yyval.vect.x = yyval.vect.y = yyval.vect.z = 0; ;
    break;}
case 9:
#line 285 "plugins/csstdldr/stdparse.y"
{ CSVECTOR2 (yyval.vect2).Set (yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 10:
#line 293 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &THIS->matrix;
    yyval.matrix->Set (yyvsp[-8].fval, yyvsp[-7].fval, yyvsp[-6].fval, yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval);
  ;
    break;}
case 11:
#line 298 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &THIS->matrix;
    yyval.matrix->Set (yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval);
  ;
    break;}
case 12:
#line 303 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &THIS->matrix;
    yyval.matrix->Identity ();
  ;
    break;}
case 16:
#line 317 "plugins/csstdldr/stdparse.y"
{ THIS->matrix.Identity (); ;
    break;}
case 17:
#line 319 "plugins/csstdldr/stdparse.y"
{
    printf ("ROT_X(%g)\n", yyvsp[-1].fval);
    THIS->matrix *= csXRotMatrix3 (yyvsp[-1].fval);
  ;
    break;}
case 18:
#line 324 "plugins/csstdldr/stdparse.y"
{ THIS->matrix *= csYRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 19:
#line 326 "plugins/csstdldr/stdparse.y"
{ THIS->matrix *= csZRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 20:
#line 328 "plugins/csstdldr/stdparse.y"
{ THIS->matrix *= yyvsp[-1].fval; ;
    break;}
case 21:
#line 330 "plugins/csstdldr/stdparse.y"
{ THIS->matrix *= csMatrix3 (yyvsp[-3].fval, 0, 0, 0, yyvsp[-2].fval, 0, 0, 0, yyvsp[-1].fval); ;
    break;}
case 22:
#line 332 "plugins/csstdldr/stdparse.y"
{ THIS->matrix *= csXScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 23:
#line 334 "plugins/csstdldr/stdparse.y"
{ THIS->matrix *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 24:
#line 336 "plugins/csstdldr/stdparse.y"
{ THIS->matrix *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 27:
#line 346 "plugins/csstdldr/stdparse.y"
{
    yyval.transform = &THIS->transform;
    *yyval.transform = csTransform ();
  ;
    break;}
case 31:
#line 360 "plugins/csstdldr/stdparse.y"
{ THIS->transform.SetO2T (*yyvsp[-1].matrix); ;
    break;}
case 32:
#line 362 "plugins/csstdldr/stdparse.y"
{ THIS->transform.SetO2TTranslation (CSVECTOR3 (yyvsp[-1].vect)); ;
    break;}
case 35:
#line 373 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 36:
#line 375 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 37:
#line 377 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 38:
#line 379 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 39:
#line 381 "plugins/csstdldr/stdparse.y"
{ printf ("GOURAUD ()\n"); ;
    break;}
case 40:
#line 383 "plugins/csstdldr/stdparse.y"
{ printf ("FLATCOL (%g,%g,%g)\n", yyvsp[-1].color.red, yyvsp[-1].color.green, yyvsp[-1].color.blue); ;
    break;}
case 41:
#line 385 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 42:
#line 387 "plugins/csstdldr/stdparse.y"
{ printf ("UV (...)\n"); ;
    break;}
case 43:
#line 389 "plugins/csstdldr/stdparse.y"
{ printf ("UVA (...)\n"); ;
    break;}
case 44:
#line 391 "plugins/csstdldr/stdparse.y"
{ printf ("COLORS (...)\n"); ;
    break;}
case 45:
#line 393 "plugins/csstdldr/stdparse.y"
{ printf ("COSFACT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 46:
#line 395 "plugins/csstdldr/stdparse.y"
{ printf ("CLIP ()\n"); ;
    break;}
case 47:
#line 397 "plugins/csstdldr/stdparse.y"
{ printf ("PORTAL (%s)\n", yyvsp[-1].string); ;
    break;}
case 48:
#line 399 "plugins/csstdldr/stdparse.y"
{ printf ("WARP (...)\n"); ;
    break;}
case 49:
#line 401 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 51:
#line 407 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 60:
#line 435 "plugins/csstdldr/stdparse.y"
{ printf ("MATRIX (...)\n"); ;
    break;}
case 61:
#line 437 "plugins/csstdldr/stdparse.y"
{ printf ("V (...)\n"); ;
    break;}
case 62:
#line 439 "plugins/csstdldr/stdparse.y"
{ printf ("W (...)\n"); ;
    break;}
case 63:
#line 441 "plugins/csstdldr/stdparse.y"
{ printf ("MIRROR ()\n"); ;
    break;}
case 64:
#line 443 "plugins/csstdldr/stdparse.y"
{ printf ("STATIC ()\n"); ;
    break;}
case 67:
#line 453 "plugins/csstdldr/stdparse.y"
{ printf ("ORIG (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 68:
#line 454 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 69:
#line 455 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 70:
#line 456 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 71:
#line 457 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 72:
#line 458 "plugins/csstdldr/stdparse.y"
{ printf ("UVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 73:
#line 459 "plugins/csstdldr/stdparse.y"
{ printf ("VVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 74:
#line 461 "plugins/csstdldr/stdparse.y"
{
    printf ("MATRIX (\n  %g, %g, %g\n  %g, %g, %g\n  %g, %g, %g\n)\n",
    yyvsp[-1].matrix->m11, yyvsp[-1].matrix->m12, yyvsp[-1].matrix->m13, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m22, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m31, yyvsp[-1].matrix->m32, yyvsp[-1].matrix->m33);
  ;
    break;}
case 75:
#line 465 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 76:
#line 467 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 77:
#line 469 "plugins/csstdldr/stdparse.y"
{ printf ("PLANE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 78:
#line 471 "plugins/csstdldr/stdparse.y"
{ printf ("UV_SHIFT (%g, %g)\n", yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 81:
#line 482 "plugins/csstdldr/stdparse.y"
{ printf ("<pos> <radius> <color> <dynamic-flag>\n"); ;
    break;}
case 82:
#line 484 "plugins/csstdldr/stdparse.y"
{ printf ("CENTER (...)\n"); ;
    break;}
case 83:
#line 486 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 84:
#line 488 "plugins/csstdldr/stdparse.y"
{ printf ("DYNAMIC ()\n"); ;
    break;}
case 85:
#line 490 "plugins/csstdldr/stdparse.y"
{ printf ("COLOR ( ... )\n"); ;
    break;}
case 86:
#line 492 "plugins/csstdldr/stdparse.y"
{ printf ("HALO (%g,%g)\n", yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 92:
#line 507 "plugins/csstdldr/stdparse.y"
{
#if YYDEBUG
    yydebug = 1;
#endif
    printf ("--> Starting world [%s]\n", yyvsp[-1].string);
  ;
    break;}
case 93:
#line 514 "plugins/csstdldr/stdparse.y"
{
    printf ("WORLD: [%s]\n", yyvsp[-4].string);
  ;
    break;}
case 97:
#line 528 "plugins/csstdldr/stdparse.y"
{ printf ("LIBRARY '%s' (%s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 98:
#line 529 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURES\n"); ;
    break;}
case 99:
#line 530 "plugins/csstdldr/stdparse.y"
{ printf ("SOUNDS\n"); ;
    break;}
case 100:
#line 531 "plugins/csstdldr/stdparse.y"
{ printf ("START\n"); ;
    break;}
case 101:
#line 532 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR [%s]\n", yyvsp[-3].string); ;
    break;}
case 102:
#line 533 "plugins/csstdldr/stdparse.y"
{ printf ("PLANE [%s]\n", yyvsp[-3].string); ;
    break;}
case 103:
#line 535 "plugins/csstdldr/stdparse.y"
{ printf ("KEY [%s]\n", yyvsp[-3].string); ;
    break;}
case 104:
#line 537 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION [%s]\n", yyvsp[-3].string); ;
    break;}
case 105:
#line 539 "plugins/csstdldr/stdparse.y"
{ printf ("SCRIPT '%s' (%s: %s)\n", yyvsp[-5].string, yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 106:
#line 540 "plugins/csstdldr/stdparse.y"
{ printf ("TEX_SET [%s]\n", yyvsp[-3].string); ;
    break;}
case 107:
#line 541 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX [%s]\n", yyvsp[-3].string); ;
    break;}
case 108:
#line 542 "plugins/csstdldr/stdparse.y"
{ printf ("THING_tpl [%s]\n", yyvsp[-3].string); ;
    break;}
case 109:
#line 543 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE [%s]\n", yyvsp[-3].string); ;
    break;}
case 110:
#line 544 "plugins/csstdldr/stdparse.y"
{ printf ("ROOM [%s]\n", yyvsp[-3].string); ;
    break;}
case 111:
#line 546 "plugins/csstdldr/stdparse.y"
{ printf ("SIXFACE [%s]\n", yyvsp[-3].string); ;
    break;}
case 114:
#line 558 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE '%s'\n", yyvsp[-3].string); ;
    break;}
case 117:
#line 567 "plugins/csstdldr/stdparse.y"
{ printf ("MIPMAP (%d)\n", yyvsp[-1].ival); ;
    break;}
case 118:
#line 568 "plugins/csstdldr/stdparse.y"
{ printf ("DITHER (%d)\n", yyvsp[-1].ival); ;
    break;}
case 119:
#line 569 "plugins/csstdldr/stdparse.y"
{ printf ("FILE (%s)\n", yyvsp[-1].string); ;
    break;}
case 120:
#line 570 "plugins/csstdldr/stdparse.y"
{ printf ("TRANSPARENT (%g,%g,%g)\n", yyvsp[-1].color.red, yyvsp[-1].color.green, yyvsp[-1].color.blue); ;
    break;}
case 126:
#line 590 "plugins/csstdldr/stdparse.y"
{ printf ("FILE (%s)\n", yyvsp[-1].string); ;
    break;}
case 129:
#line 602 "plugins/csstdldr/stdparse.y"
{ printf ("VERTEX (%g,%g,%g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 130:
#line 604 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON (...)\n"); ;
    break;}
case 131:
#line 606 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 132:
#line 608 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 133:
#line 610 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 134:
#line 612 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 135:
#line 614 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 136:
#line 616 "plugins/csstdldr/stdparse.y"
{ printf ("STATBSP ()\n"); ;
    break;}
case 137:
#line 618 "plugins/csstdldr/stdparse.y"
{ printf ("THING '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 138:
#line 620 "plugins/csstdldr/stdparse.y"
{ printf ("SIXFACE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 139:
#line 622 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 140:
#line 624 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 141:
#line 626 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 142:
#line 629 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 143:
#line 631 "plugins/csstdldr/stdparse.y"
{ printf ("SKYDOME (...)\n"); ;
    break;}
case 144:
#line 633 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 145:
#line 635 "plugins/csstdldr/stdparse.y"
{ printf ("NODE (...)\n"); ;
    break;}
case 148:
#line 645 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 149:
#line 647 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 150:
#line 649 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 153:
#line 659 "plugins/csstdldr/stdparse.y"
{ printf ("POSITION (...)\n"); ;
    break;}
case 154:
#line 661 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 157:
#line 672 "plugins/csstdldr/stdparse.y"
{ printf ("ORIG (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 158:
#line 673 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 159:
#line 674 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 160:
#line 675 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 161:
#line 676 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 162:
#line 677 "plugins/csstdldr/stdparse.y"
{ printf ("UVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 163:
#line 678 "plugins/csstdldr/stdparse.y"
{ printf ("VVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 164:
#line 680 "plugins/csstdldr/stdparse.y"
{
    printf ("MATRIX (\n  %g, %g, %g\n  %g, %g, %g\n  %g, %g, %g\n)\n",
    yyvsp[-1].matrix->m11, yyvsp[-1].matrix->m12, yyvsp[-1].matrix->m13, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m22, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m31, yyvsp[-1].matrix->m32, yyvsp[-1].matrix->m33);
  ;
    break;}
case 165:
#line 684 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 170:
#line 706 "plugins/csstdldr/stdparse.y"
{ printf ("THING ('%s')\n", yyvsp[-1].string); ;
    break;}
case 171:
#line 708 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION ('%s')\n", yyvsp[-1].string); ;
    break;}
case 172:
#line 710 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT ('%s':%g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 173:
#line 712 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER ('%s', '%s' -> '%s')\n", yyvsp[-6].string, yyvsp[-4].string, yyvsp[-1].string); ;
    break;}
case 174:
#line 714 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 178:
#line 730 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 179:
#line 731 "plugins/csstdldr/stdparse.y"
{ printf ("STATELESS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 180:
#line 733 "plugins/csstdldr/stdparse.y"
{ printf ("PRIMARY_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 181:
#line 735 "plugins/csstdldr/stdparse.y"
{ printf ("SECONDARY_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 182:
#line 737 "plugins/csstdldr/stdparse.y"
{ printf ("BECOMING_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 183:
#line 739 "plugins/csstdldr/stdparse.y"
{ printf ("PRIMARY_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 184:
#line 741 "plugins/csstdldr/stdparse.y"
{ printf ("SECONDARY_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 185:
#line 743 "plugins/csstdldr/stdparse.y"
{ printf ("BECOMING_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 188:
#line 755 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON_tpl '%s' ()\n", yyvsp[-3].string); ;
    break;}
case 189:
#line 757 "plugins/csstdldr/stdparse.y"
{ printf ("VERTEX (%g,%g,%g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 190:
#line 759 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 191:
#line 761 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 192:
#line 763 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 193:
#line 765 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 194:
#line 767 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 195:
#line 769 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX ()\n"); ;
    break;}
case 196:
#line 772 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 197:
#line 774 "plugins/csstdldr/stdparse.y"
{ printf ("BEZIER '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 198:
#line 776 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECENTER (...)\n"); ;
    break;}
case 199:
#line 778 "plugins/csstdldr/stdparse.y"
{ printf ("CURVESCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 200:
#line 780 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECONTROL (...)\n"); ;
    break;}
case 204:
#line 791 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 205:
#line 793 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 206:
#line 795 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 207:
#line 797 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 208:
#line 799 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE ()\n"); ;
    break;}
case 209:
#line 801 "plugins/csstdldr/stdparse.y"
{ printf ("TEX_SET_SELECT ('%s')\n", yyvsp[-1].string); ;
    break;}
case 210:
#line 803 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 213:
#line 813 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 214:
#line 815 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 215:
#line 817 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 222:
#line 844 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE_LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 223:
#line 846 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE_SCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 224:
#line 848 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 225:
#line 850 "plugins/csstdldr/stdparse.y"
{ printf ("TEX '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 226:
#line 852 "plugins/csstdldr/stdparse.y"
{ printf ("CEIL_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 227:
#line 854 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 228:
#line 856 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 229:
#line 858 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT (...)\n"); ;
    break;}
case 230:
#line 860 "plugins/csstdldr/stdparse.y"
{ printf ("DIM (%g, %g, %g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 231:
#line 862 "plugins/csstdldr/stdparse.y"
{ printf ("HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 232:
#line 864 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 233:
#line 866 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR_CEILING ((%g,%g) (%g,%g) (%g,%g) (%g,%g))\n",
      yyvsp[-11].vect2.x, yyvsp[-11].vect2.y, yyvsp[-8].vect2.x, yyvsp[-8].vect2.y, yyvsp[-5].vect2.x, yyvsp[-5].vect2.y, yyvsp[-2].vect2.x, yyvsp[-2].vect2.y);
  ;
    break;}
case 234:
#line 871 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR ( (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) )\n",
      yyvsp[-11].vect.x, yyvsp[-11].vect.y, yyvsp[-11].vect.z, yyvsp[-8].vect.x, yyvsp[-8].vect.y, yyvsp[-8].vect.z,
      yyvsp[-5].vect.x, yyvsp[-5].vect.y, yyvsp[-5].vect.z, yyvsp[-2].vect.x, yyvsp[-2].vect.y, yyvsp[-2].vect.z);
  ;
    break;}
case 235:
#line 877 "plugins/csstdldr/stdparse.y"
{ printf ("CEILING ()\n"); ;
    break;}
case 236:
#line 879 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 237:
#line 881 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 238:
#line 883 "plugins/csstdldr/stdparse.y"
{ printf ("STATBSP ()\n"); ;
    break;}
case 239:
#line 885 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 240:
#line 887 "plugins/csstdldr/stdparse.y"
{ printf ("SIXFACE [%s]\n", yyvsp[-3].string); ;
    break;}
case 241:
#line 889 "plugins/csstdldr/stdparse.y"
{ printf ("THING '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 242:
#line 891 "plugins/csstdldr/stdparse.y"
{ printf ("PORTAL (...)\n"); ;
    break;}
case 243:
#line 893 "plugins/csstdldr/stdparse.y"
{ printf ("SPLIT (%s, %s, ...)\n", yyvsp[-6].string, yyvsp[-4].string); ;
    break;}
case 244:
#line 895 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 245:
#line 897 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 248:
#line 907 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 249:
#line 909 "plugins/csstdldr/stdparse.y"
{ printf ("PLANE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 250:
#line 911 "plugins/csstdldr/stdparse.y"
{ printf ("LEN ('%g')\n", yyvsp[-1].fval); ;
    break;}
case 253:
#line 921 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON ('%s')\n", yyvsp[-1].string); ;
    break;}
case 254:
#line 923 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 255:
#line 925 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 256:
#line 927 "plugins/csstdldr/stdparse.y"
{ printf ("WARP (...)\n"); ;
    break;}
case 259:
#line 937 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 260:
#line 939 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 261:
#line 941 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 262:
#line 943 "plugins/csstdldr/stdparse.y"
{ printf ("MIXMODE (...)\n"); ;
    break;}
case 269:
#line 957 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 274:
#line 971 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 275:
#line 973 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE_SCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 276:
#line 975 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 277:
#line 977 "plugins/csstdldr/stdparse.y"
{ printf ("CEIL_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 278:
#line 979 "plugins/csstdldr/stdparse.y"
{ printf ("DIM (%g, %g, %g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 279:
#line 981 "plugins/csstdldr/stdparse.y"
{ printf ("HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 280:
#line 983 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 281:
#line 985 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR_CEILING ((%g,%g) (%g,%g) (%g,%g) (%g,%g))\n",
      yyvsp[-11].vect2.x, yyvsp[-11].vect2.y, yyvsp[-8].vect2.x, yyvsp[-8].vect2.y, yyvsp[-5].vect2.x, yyvsp[-5].vect2.y, yyvsp[-2].vect2.x, yyvsp[-2].vect2.y);
  ;
    break;}
case 282:
#line 990 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 283:
#line 992 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR ( (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) )\n",
      yyvsp[-11].vect.x, yyvsp[-11].vect.y, yyvsp[-11].vect.z, yyvsp[-8].vect.x, yyvsp[-8].vect.y, yyvsp[-8].vect.z,
      yyvsp[-5].vect.x, yyvsp[-5].vect.y, yyvsp[-5].vect.z, yyvsp[-2].vect.x, yyvsp[-2].vect.y, yyvsp[-2].vect.z);
  ;
    break;}
case 284:
#line 998 "plugins/csstdldr/stdparse.y"
{ printf ("CEILING ()\n"); ;
    break;}
case 285:
#line 1000 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 286:
#line 1002 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX ()\n"); ;
    break;}
case 290:
#line 1013 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 291:
#line 1015 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 292:
#line 1017 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE ()\n"); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1022 "plugins/csstdldr/stdparse.y"
 /* End of grammar */

/* On initialization, register keyword list with the C++ parser */
extern int init_token_table (const char * const *yytname);
int __parser_init = init_token_table (yytname);
