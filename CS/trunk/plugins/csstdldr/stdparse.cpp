
/*  A Bison parser, made from plugins/csstdldr/stdparse.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	KW_ACTION	258
#define	KW_ACTIVATE	259
#define	KW_ADD	260
#define	KW_ALPHA	261
#define	KW_ATTENUATION	262
#define	KW_BEZIER	263
#define	KW_CAMERA	264
#define	KW_CENTER	265
#define	KW_CIRCLE	266
#define	KW_CLIP	267
#define	KW_COLLECTION	268
#define	KW_COLOR	269
#define	KW_COLORS	270
#define	KW_CONVEX	271
#define	KW_COPY	272
#define	KW_COSFACT	273
#define	KW_CURVECENTER	274
#define	KW_CURVECONTROL	275
#define	KW_CURVESCALE	276
#define	KW_DETAIL	277
#define	KW_DITHER	278
#define	KW_DYNAMIC	279
#define	KW_F	280
#define	KW_FILE	281
#define	KW_FIRST	282
#define	KW_FIRST_LEN	283
#define	KW_FLATCOL	284
#define	KW_FOG	285
#define	KW_FOR_2D	286
#define	KW_FOR_3D	287
#define	KW_FORWARD	288
#define	KW_FRAME	289
#define	KW_GOURAUD	290
#define	KW_HALO	291
#define	KW_HEIGHTMAP	292
#define	KW_IDENTITY	293
#define	KW_KEY	294
#define	KW_KEYCOLOR	295
#define	KW_LEN	296
#define	KW_LIBRARY	297
#define	KW_LIGHT	298
#define	KW_LIGHTING	299
#define	KW_LIMB	300
#define	KW_MATRIX	301
#define	KW_MERGE_NORMALS	302
#define	KW_MERGE_TEXELS	303
#define	KW_MERGE_VERTICES	304
#define	KW_MIPMAP	305
#define	KW_MIRROR	306
#define	KW_MIXMODE	307
#define	KW_MOVE	308
#define	KW_MOVEABLE	309
#define	KW_MULTIPLY	310
#define	KW_MULTIPLY2	311
#define	KW_NODE	312
#define	KW_ORIG	313
#define	KW_PLANE	314
#define	KW_POLYGON	315
#define	KW_PORTAL	316
#define	KW_POSITION	317
#define	KW_RADIUS	318
#define	KW_ROT	319
#define	KW_ROT_X	320
#define	KW_ROT_Y	321
#define	KW_ROT_Z	322
#define	KW_SCALE	323
#define	KW_SCALE_X	324
#define	KW_SCALE_Y	325
#define	KW_SCALE_Z	326
#define	KW_SCRIPT	327
#define	KW_SECOND	328
#define	KW_SECOND_LEN	329
#define	KW_SECTOR	330
#define	KW_SKELETON	331
#define	KW_SKYDOME	332
#define	KW_SOUND	333
#define	KW_SOUNDS	334
#define	KW_SPRITE	335
#define	KW_SPRITE2D	336
#define	KW_START	337
#define	KW_STATBSP	338
#define	KW_STATIC	339
#define	KW_TEMPLATE	340
#define	KW_TERRAIN	341
#define	KW_TEX	342
#define	KW_TEXLEN	343
#define	KW_TEXNR	344
#define	KW_TEXTURE	345
#define	KW_TEXTURES	346
#define	KW_TEXTURE_LIGHTING	347
#define	KW_TEXTURE_MIPMAP	348
#define	KW_TEXTURE_SCALE	349
#define	KW_TEX_SET	350
#define	KW_TEX_SET_SELECT	351
#define	KW_THING	352
#define	KW_TRANSFORM	353
#define	KW_TRANSPARENT	354
#define	KW_TRIANGLE	355
#define	KW_TRIGGER	356
#define	KW_UPWARD	357
#define	KW_UV	358
#define	KW_UVA	359
#define	KW_UVEC	360
#define	KW_UV_SHIFT	361
#define	KW_V	362
#define	KW_VERTEX	363
#define	KW_VERTICES	364
#define	KW_VVEC	365
#define	KW_W	366
#define	KW_WARP	367
#define	KW_WORLD	368
#define	KW_yes	369
#define	KW_no	370
#define	KW_none	371
#define	KW_linear	372
#define	KW_inverse	373
#define	KW_realistic	374
#define	PARSER_VERSION	375
#define	STRING	376
#define	NUMBER	377

#line 20 "plugins/csstdldr/stdparse.y"
 /* Startup C++ code */

#include "cssysdef.h"
#include "stdldr.h"
#include "csutil/cscolor.h"
#include "csgeom/math2d.h"
#include "csgeom/math3d.h"

#include "iworld.h"
#include "itxtmgr.h"
#include "isector.h"
#include "ipolyset.h"
#include "ipolygon.h"
#include "ithing.h"

/* Define this to debug parser */
//#define YYDEBUG	1

/* yyparse is a member function */
#define yyparse csStandardLoader::yyparse

/* Provide detailed info about parse errors */
#define YYERROR_VERBOSE	1
/* Avoid some "signed vs unsigned comparison" warnings */
#define sizeof	(int)sizeof

// Macros for accessing yylval as different data types
#define CSCOLOR(x)	(*(csColor *)&x)
#define CSVECTOR2(x)	(*(csVector2 *)&x)
#define CSVECTOR3(x)	(*(csVector3 *)&x)
#define CSMATRIX3(x)	(*(csMatrix3 *)&x)

// More shortcuts
#define TEX		storage.tex
#define CAMERA		storage.camera
#define PLANE		storage.plane
#define SECTOR		storage.sector

#define ABORTMSG							\
  { yyerror ("loading error, aborting"); YYABORT; }

#define YYERROR_EXTENDED(msg)						\
  if (yychar == STRING)							\
  {									\
    msg = (char *) realloc(msg, size += 14 + strlen (yylval.string));	\
    sprintf (strchr (msg, 0), " (value = `%s')", yylval.string);	\
  }									\
  else if (yychar == NUMBER)						\
  {									\
    msg = (char *) realloc(msg, size += 14 + 20);			\
    sprintf (strchr (msg, 0), " (value = `%g')", yylval.fval);		\
  }


#line 90 "plugins/csstdldr/stdparse.y"
typedef union
{
  // Just a number
  float fval;
  // A integer number
  int ival;
  // A boolean value
  bool bval;
  // A string value
  char *string;
  // A color
  csPColor color;
  // A 2D point
  csPVector2 vect2;
  // A 3D point
  csPVector3 vect;
  // A transformation matrix
  csMatrix3 *matrix;
  // A transformation matrix/vector
  csStandardLoader::yystorage *transform;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		735
#define	YYFLAG		-32768
#define	YYNTBASE	130

#define YYTRANSLATE(x) ((unsigned)(x) <= 378 ? yytranslate[x] : 212)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   123,
   124,     2,     2,   125,   127,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   126,     2,     2,
     2,   128,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   129
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     8,     9,    16,    17,    20,    25,    26,    33,
    38,    43,    50,    51,    58,    59,    66,    67,    74,    80,
    86,    94,   100,   106,   107,   110,   111,   118,   119,   122,
   123,   129,   134,   139,   144,   149,   154,   155,   158,   164,
   165,   168,   173,   175,   178,   183,   184,   191,   196,   201,
   206,   213,   216,   217,   224,   230,   236,   242,   250,   255,
   261,   266,   268,   271,   276,   281,   286,   287,   290,   292,
   295,   300,   307,   309,   312,   317,   322,   327,   332,   337,
   342,   347,   352,   357,   359,   362,   368,   373,   378,   381,
   386,   392,   397,   399,   401,   403,   405,   407,   410,   415,
   420,   427,   437,   442,   444,   447,   448,   455,   460,   465,
   470,   475,   481,   484,   492,   498,   503,   508,   515,   517,
   520,   522,   529,   534,   541,   546,   549,   554,   559,   561,
   564,   569,   574,   579,   581,   584,   586,   588,   591,   596,
   602,   608,   615,   620,   625,   626,   629,   636,   637,   640,
   647,   649,   652,   657,   664,   669,   674,   676,   679,   682,
   685,   688,   691,   696,   699,   702,   703,   706,   711,   716,
   721,   726,   727,   729,   731,   733,   737,   741,   743,   745,
   748,   758,   760,   761,   764,   766,   769,   772,   777,   782,
   787,   792,   799,   804,   809,   814,   815,   818,   819,   822,
   824,   827,   832,   837,   839,   842,   847,   852,   853,   859,
   864,   867,   872,   877,   882,   887,   892,   897,   900,   905,
   910,   911,   914,   915,   918,   919,   923,   924,   929,   931,
   934,   939,   944,   949,   952,   955,   957,   960,   965,   970,
   975,   980,   985,   990,   995,  1000,  1005,  1010
};

static const short yyrhs[] = {    -1,
   113,   186,   123,   131,   133,   124,     0,     0,    42,   186,
   123,   132,   133,   124,     0,     0,   133,   134,     0,    91,
   123,   139,   124,     0,     0,    95,   186,   123,   135,   139,
   124,     0,    42,   123,   121,   124,     0,    79,   123,   145,
   124,     0,    82,   123,   121,   125,   189,   124,     0,     0,
     9,   186,   123,   136,   184,   124,     0,     0,    59,   186,
   123,   137,   158,   124,     0,     0,    75,   186,   123,   138,
   149,   124,     0,    39,   121,   123,   121,   124,     0,    13,
   186,   123,   163,   124,     0,    72,   186,   123,   121,   126,
   121,   124,     0,    97,   186,   123,   165,   124,     0,    80,
   186,   123,   174,   124,     0,     0,   139,   140,     0,     0,
    90,   186,   123,   141,   142,   124,     0,     0,   142,   143,
     0,     0,    50,   123,   187,   124,   144,     0,    23,   123,
   187,   124,     0,    26,   123,   121,   124,     0,    99,   123,
   188,   124,     0,    32,   123,   187,   124,     0,    31,   123,
   187,   124,     0,     0,   145,   146,     0,    78,   186,   123,
   147,   124,     0,     0,   147,   148,     0,    26,   123,   121,
   124,     0,   150,     0,   149,   150,     0,   108,   123,   189,
   124,     0,     0,    60,   186,   123,   151,   201,   124,     0,
    89,   123,   121,   124,     0,    88,   123,   122,   124,     0,
     4,   123,   121,   124,     0,   101,   123,   121,   125,   121,
   124,     0,    83,   196,     0,     0,    97,   186,   123,   152,
   168,   124,     0,    43,   186,   123,   160,   124,     0,    80,
   186,   123,   180,   124,     0,    30,   123,   188,   122,   124,
     0,    11,   123,   189,   126,   189,   122,   124,     0,    77,
   123,   153,   124,     0,    39,   121,   123,   121,   124,     0,
    57,   123,   156,   124,     0,   154,     0,   153,   154,     0,
    63,   123,   122,   124,     0,   109,   123,   155,   124,     0,
    44,   123,   187,   124,     0,     0,   155,   122,     0,   157,
     0,   156,   157,     0,    62,   123,   189,   124,     0,    39,
   123,   121,   125,   121,   124,     0,   159,     0,   158,   159,
     0,    58,   123,   190,   124,     0,    27,   123,   190,   124,
     0,    73,   123,   190,   124,     0,    28,   123,   122,   124,
     0,    74,   123,   122,   124,     0,   105,   123,   189,   124,
     0,   110,   123,   189,   124,     0,    46,   123,   192,   124,
     0,   107,   123,   189,   124,     0,   161,     0,   160,   161,
     0,   189,   126,   122,   188,   122,     0,    10,   123,   189,
   124,     0,    63,   123,   122,   124,     0,    24,   196,     0,
    14,   123,   188,   124,     0,    36,   123,   122,   122,   124,
     0,     7,   123,   162,   124,     0,   116,     0,   117,     0,
   118,     0,   119,     0,   164,     0,   163,   164,     0,    97,
   123,   121,   124,     0,    13,   123,   121,   124,     0,    43,
   123,   121,   125,   122,   124,     0,   101,   123,   121,   125,
   121,   127,   128,   121,   124,     0,    75,   123,   121,   124,
     0,   166,     0,   165,   166,     0,     0,    60,   186,   123,
   167,   201,   124,     0,   108,   123,   189,   124,     0,    89,
   123,   121,   124,     0,    88,   123,   122,   124,     0,    53,
   123,   197,   124,     0,    30,   123,   188,   122,   124,     0,
    16,   196,     0,    11,   123,   189,   126,   189,   122,   124,
     0,     8,   186,   123,   170,   124,     0,    19,   123,   189,
   124,     0,    21,   123,   122,   124,     0,    20,   123,   189,
   126,   191,   124,     0,   169,     0,   168,   169,     0,   166,
     0,    39,   123,   121,   125,   121,   124,     0,     4,   123,
   121,   124,     0,   101,   123,   121,   125,   121,   124,     0,
    85,   123,   121,   124,     0,    54,   196,     0,    96,   123,
   121,   124,     0,    26,   123,   121,   124,     0,   171,     0,
   170,   171,     0,    89,   123,   121,   124,     0,    90,   123,
   172,   124,     0,   109,   123,   155,   124,     0,   173,     0,
   172,   173,     0,   129,     0,   175,     0,   174,   175,     0,
    89,   123,   121,   124,     0,    34,   186,   123,   176,   124,
     0,     3,   186,   123,   178,   124,     0,   100,   123,   122,
   122,   122,   124,     0,    26,   123,   121,   124,     0,    48,
   123,   187,   124,     0,     0,   176,   177,     0,   107,   123,
   189,   126,   191,   124,     0,     0,   178,   179,     0,    25,
   123,   121,   125,   122,   124,     0,   181,     0,   180,   181,
     0,    53,   123,   197,   124,     0,    85,   123,   121,   125,
   121,   124,     0,    89,   123,   121,   124,     0,    52,   123,
   182,   124,     0,   183,     0,   182,   183,     0,    17,   196,
     0,    55,   196,     0,    56,   196,     0,     5,   196,     0,
     6,   123,   122,   124,     0,    99,   196,     0,    40,   196,
     0,     0,   184,   185,     0,    62,   123,   189,   124,     0,
    33,   123,   189,   124,     0,   102,   123,   189,   124,     0,
    75,   123,   121,   124,     0,     0,   121,     0,   114,     0,
   115,     0,   122,   122,   122,     0,   122,   122,   122,     0,
   122,     0,   189,     0,   122,   122,     0,   122,   122,   122,
   122,   122,   122,   122,   122,   122,     0,   122,     0,     0,
   193,   194,     0,   195,     0,   194,   195,     0,    38,   196,
     0,    65,   123,   122,   124,     0,    66,   123,   122,   124,
     0,    67,   123,   122,   124,     0,    68,   123,   122,   124,
     0,    68,   123,   122,   122,   122,   124,     0,    69,   123,
   122,   124,     0,    70,   123,   122,   124,     0,    71,   123,
   122,   124,     0,     0,   123,   124,     0,     0,   198,   199,
     0,   200,     0,   199,   200,     0,    46,   123,   192,   124,
     0,   107,   123,   189,   124,     0,   202,     0,   201,   202,
     0,    89,   123,   121,   124,     0,    44,   123,   187,   124,
     0,     0,    90,   123,   203,   210,   124,     0,   109,   123,
   205,   124,     0,    35,   196,     0,    29,   123,   188,   124,
     0,     6,   123,   122,   124,     0,   103,   123,   206,   124,
     0,   104,   123,   207,   124,     0,    15,   123,   204,   124,
     0,    18,   123,   122,   124,     0,    12,   196,     0,    61,
   123,   121,   124,     0,   112,   123,   208,   124,     0,     0,
   204,   188,     0,     0,   205,   122,     0,     0,   206,   122,
   122,     0,     0,   207,   122,   122,   122,     0,   209,     0,
   208,   209,     0,    46,   123,   192,   124,     0,   107,   123,
   189,   124,     0,   111,   123,   189,   124,     0,    51,   196,
     0,    84,   196,     0,   211,     0,   210,   211,     0,    58,
   123,   190,   124,     0,    27,   123,   190,   124,     0,    73,
   123,   190,   124,     0,    28,   123,   122,   124,     0,    74,
   123,   122,   124,     0,   105,   123,   189,   124,     0,   110,
   123,   189,   124,     0,    46,   123,   192,   124,     0,   107,
   123,   189,   124,     0,    59,   123,   121,   124,     0,   106,
   123,   191,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   267,   270,   271,   273,   278,   280,   283,   285,   287,   289,
   291,   293,   299,   301,   303,   308,   310,   324,   331,   333,
   335,   337,   339,   345,   347,   350,   353,   357,   359,   362,
   364,   370,   377,   379,   381,   388,   399,   401,   404,   408,
   410,   413,   419,   421,   424,   427,   433,   439,   441,   443,
   445,   447,   449,   462,   467,   469,   471,   473,   476,   478,
   480,   484,   486,   489,   492,   494,   498,   500,   504,   506,
   509,   512,   518,   520,   523,   529,   534,   539,   544,   549,
   555,   561,   566,   575,   577,   580,   584,   586,   588,   590,
   592,   594,   597,   599,   600,   601,   606,   608,   611,   614,
   616,   618,   620,   626,   628,   631,   638,   644,   646,   648,
   650,   657,   659,   661,   664,   666,   668,   670,   674,   676,
   679,   681,   683,   685,   687,   689,   691,   693,   699,   701,
   704,   707,   709,   713,   715,   718,   725,   727,   730,   733,
   735,   737,   739,   741,   754,   756,   759,   764,   766,   769,
   774,   776,   779,   782,   784,   786,   790,   792,   795,   797,
   798,   799,   800,   802,   803,   808,   810,   813,   816,   818,
   820,   834,   837,   841,   844,   849,   855,   861,   865,   869,
   875,   883,   888,   894,   896,   898,   901,   904,   906,   908,
   910,   912,   914,   916,   918,   922,   924,   928,   936,   938,
   940,   943,   949,   957,   959,   962,   965,   967,   972,   974,
   975,   977,   979,   981,   983,   985,   987,   989,   991,   993,
   997,   999,  1003,  1005,  1009,  1011,  1015,  1017,  1022,  1024,
  1027,  1030,  1032,  1034,  1036,  1041,  1043,  1046,  1052,  1057,
  1062,  1067,  1072,  1078,  1084,  1089,  1094,  1099
};
#endif

#define YYNTOKENS 130
#define YYNNTS 82
#define YYNRULES 248
#define YYNSTATES 736
#define YYMAXUTOK 378

static const char * const yytname[] = {   "$","error","$undefined.","KW_ACTION",
"KW_ACTIVATE","KW_ADD","KW_ALPHA","KW_ATTENUATION","KW_BEZIER","KW_CAMERA","KW_CENTER",
"KW_CIRCLE","KW_CLIP","KW_COLLECTION","KW_COLOR","KW_COLORS","KW_CONVEX","KW_COPY",
"KW_COSFACT","KW_CURVECENTER","KW_CURVECONTROL","KW_CURVESCALE","KW_DETAIL",
"KW_DITHER","KW_DYNAMIC","KW_F","KW_FILE","KW_FIRST","KW_FIRST_LEN","KW_FLATCOL",
"KW_FOG","KW_FOR_2D","KW_FOR_3D","KW_FORWARD","KW_FRAME","KW_GOURAUD","KW_HALO",
"KW_HEIGHTMAP","KW_IDENTITY","KW_KEY","KW_KEYCOLOR","KW_LEN","KW_LIBRARY","KW_LIGHT",
"KW_LIGHTING","KW_LIMB","KW_MATRIX","KW_MERGE_NORMALS","KW_MERGE_TEXELS","KW_MERGE_VERTICES",
"KW_MIPMAP","KW_MIRROR","KW_MIXMODE","KW_MOVE","KW_MOVEABLE","KW_MULTIPLY","KW_MULTIPLY2",
"KW_NODE","KW_ORIG","KW_PLANE","KW_POLYGON","KW_PORTAL","KW_POSITION","KW_RADIUS",
"KW_ROT","KW_ROT_X","KW_ROT_Y","KW_ROT_Z","KW_SCALE","KW_SCALE_X","KW_SCALE_Y",
"KW_SCALE_Z","KW_SCRIPT","KW_SECOND","KW_SECOND_LEN","KW_SECTOR","KW_SKELETON",
"KW_SKYDOME","KW_SOUND","KW_SOUNDS","KW_SPRITE","KW_SPRITE2D","KW_START","KW_STATBSP",
"KW_STATIC","KW_TEMPLATE","KW_TERRAIN","KW_TEX","KW_TEXLEN","KW_TEXNR","KW_TEXTURE",
"KW_TEXTURES","KW_TEXTURE_LIGHTING","KW_TEXTURE_MIPMAP","KW_TEXTURE_SCALE","KW_TEX_SET",
"KW_TEX_SET_SELECT","KW_THING","KW_TRANSFORM","KW_TRANSPARENT","KW_TRIANGLE",
"KW_TRIGGER","KW_UPWARD","KW_UV","KW_UVA","KW_UVEC","KW_UV_SHIFT","KW_V","KW_VERTEX",
"KW_VERTICES","KW_VVEC","KW_W","KW_WARP","KW_WORLD","KW_yes","KW_no","KW_none",
"KW_linear","KW_inverse","KW_realistic","PARSER_VERSION","STRING","NUMBER","'('",
"')'","','","':'","'-'","'>'","\"unused\"","input","@1","@2","world_ops","world_op",
"@3","@4","@5","@6","textures","texture","@7","texture_ops","texture_op","@8",
"sounds","sound","sound_ops","sound_op","sector_ops","sector_op","@9","@10",
"skydome_ops","skydome_op","vertex_indices","node_ops","node_op","plane_ops",
"plane_op","light_ops","light_op","attenuation_op","collection_ops","collection_op",
"thing_tpl_ops","thing_tpl_op","@11","thing_ops","thing_op","bezier_ops","bezier_op",
"bezier_texture_ops","bezier_texture_op","sprite_tpl_ops","sprite_tpl_op","sprite_verts",
"sprite_vert","sprite_actions","sprite_action","sprite_ops","sprite_op","mixmode_ops",
"mixmode_op","camera_ops","camera_op","name","yesno","color","vector","vect_idx",
"vector2","matrix","@12","matrix_ops","matrix_op","noargs","move","@13","move_ops",
"move_op","polygon_ops","polygon_op","@14","colors","polygon_vertex_indices",
"tex_coordinates","uva_coordinates","warp_ops","warp_op","polygon_texture_ops",
"polygon_texture_op", NULL
};
static const short yytoknum[] = { 0,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
   376,   377,    40,    41,    44,    58,    45,    62,   378,     0
};

static const short yyr1[] = {     0,
   131,   130,   132,   130,   133,   133,   134,   135,   134,   134,
   134,   134,   136,   134,   137,   134,   138,   134,   134,   134,
   134,   134,   134,   139,   139,   141,   140,   142,   142,   144,
   143,   143,   143,   143,   143,   143,   145,   145,   146,   147,
   147,   148,   149,   149,   150,   151,   150,   150,   150,   150,
   150,   150,   152,   150,   150,   150,   150,   150,   150,   150,
   150,   153,   153,   154,   154,   154,   155,   155,   156,   156,
   157,   157,   158,   158,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   160,   160,   161,   161,   161,   161,   161,
   161,   161,   162,   162,   162,   162,   163,   163,   164,   164,
   164,   164,   164,   165,   165,   167,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   168,   168,
   169,   169,   169,   169,   169,   169,   169,   169,   170,   170,
   171,   171,   171,   172,   172,   173,   174,   174,   175,   175,
   175,   175,   175,   175,   176,   176,   177,   178,   178,   179,
   180,   180,   181,   181,   181,   181,   182,   182,   183,   183,
   183,   183,   183,   183,   183,   184,   184,   185,   185,   185,
   185,   186,   186,   187,   187,   188,   189,   190,   190,   191,
   192,   192,   193,   192,   194,   194,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   196,   196,   198,   197,   199,
   199,   200,   200,   201,   201,   202,   202,   203,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   204,   204,   205,   205,   206,   206,   207,   207,   208,   208,
   209,   209,   209,   209,   209,   210,   210,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211
};

static const short yyr2[] = {     0,
     0,     6,     0,     6,     0,     2,     4,     0,     6,     4,
     4,     6,     0,     6,     0,     6,     0,     6,     5,     5,
     7,     5,     5,     0,     2,     0,     6,     0,     2,     0,
     5,     4,     4,     4,     4,     4,     0,     2,     5,     0,
     2,     4,     1,     2,     4,     0,     6,     4,     4,     4,
     6,     2,     0,     6,     5,     5,     5,     7,     4,     5,
     4,     1,     2,     4,     4,     4,     0,     2,     1,     2,
     4,     6,     1,     2,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     1,     2,     5,     4,     4,     2,     4,
     5,     4,     1,     1,     1,     1,     1,     2,     4,     4,
     6,     9,     4,     1,     2,     0,     6,     4,     4,     4,
     4,     5,     2,     7,     5,     4,     4,     6,     1,     2,
     1,     6,     4,     6,     4,     2,     4,     4,     1,     2,
     4,     4,     4,     1,     2,     1,     1,     2,     4,     5,
     5,     6,     4,     4,     0,     2,     6,     0,     2,     6,
     1,     2,     4,     6,     4,     4,     1,     2,     2,     2,
     2,     2,     4,     2,     2,     0,     2,     4,     4,     4,
     4,     0,     1,     1,     1,     3,     3,     1,     1,     2,
     9,     1,     0,     2,     1,     2,     2,     4,     4,     4,
     4,     6,     4,     4,     4,     0,     2,     0,     2,     1,
     2,     4,     4,     1,     2,     4,     4,     0,     5,     4,
     2,     4,     4,     4,     4,     4,     4,     2,     4,     4,
     0,     2,     0,     2,     0,     3,     0,     4,     1,     2,
     4,     4,     4,     2,     2,     1,     2,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4
};

static const short yydefact[] = {     0,
   172,   172,   173,     0,     0,     3,     1,     5,     5,     0,
     0,   172,   172,     0,     0,   172,   172,   172,     0,   172,
     0,     0,   172,   172,     4,     6,     2,     0,     0,     0,
     0,     0,     0,     0,    37,     0,     0,    24,     0,     0,
    13,     0,     0,     0,    15,     0,    17,     0,     0,     0,
     0,     8,     0,   166,     0,     0,     0,     0,     0,     0,
    97,     0,    10,     0,     0,     0,   172,    11,    38,   172,
     0,   172,     0,     0,     0,     0,   137,     0,   172,     7,
    25,    24,   172,     0,   196,     0,     0,     0,     0,     0,
   172,     0,     0,     0,     0,   104,     0,     0,     0,     0,
     0,     0,    20,    98,    19,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    73,     0,     0,     0,     0,
     0,   172,     0,   172,     0,   172,   196,     0,     0,   172,
     0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     0,    23,   138,     0,     0,     0,     0,     0,     0,     0,
   113,     0,     0,     0,     0,   198,     0,     0,     0,     0,
    22,   105,     0,     0,     0,     0,    14,   167,     0,     0,
     0,     0,     0,     0,     0,   183,     0,     0,     0,     0,
     0,     0,    16,    74,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,     0,     0,     0,     0,     0,
    18,    44,    40,   148,     0,   145,   174,   175,     0,     0,
     0,     0,    12,    26,     9,     0,     0,   197,     0,     0,
     0,     0,     0,     0,     0,   106,     0,     0,     0,     0,
     0,     0,     0,   100,     0,   103,    99,     0,   178,   179,
     0,     0,   182,     0,     0,     0,     0,     0,     0,     0,
     0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
    69,    46,     0,     0,     0,     0,    62,     0,     0,     0,
    53,     0,     0,     0,     0,   143,     0,   144,   139,     0,
   177,    28,     0,     0,     0,     0,   129,     0,   116,     0,
   117,     0,     0,   111,     0,     0,   199,   200,     0,   110,
   109,   108,     0,     0,     0,     0,     0,     0,    76,    78,
     0,    82,   196,     0,     0,     0,     0,     0,     0,     0,
   184,   185,    75,    77,    79,    80,    83,    81,    50,     0,
     0,     0,     0,     0,     0,   196,     0,     0,     0,    84,
     0,     0,     0,    61,    70,     0,     0,     0,    67,    59,
    63,     0,     0,     0,     0,     0,   151,    49,    48,     0,
     0,    45,     0,    39,    41,     0,   141,   149,     0,   140,
   146,     0,     0,     0,     0,    67,   115,   130,     0,     0,
     0,   176,   112,   183,     0,   201,     0,   196,     0,     0,
     0,   196,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   204,   169,   168,   171,   170,   101,     0,     0,   187,
     0,     0,     0,     0,     0,     0,     0,   186,     0,    57,
    60,     0,     0,     0,    89,     0,     0,    55,    85,     0,
     0,     0,     0,     0,     0,     0,     0,   198,     0,     0,
    56,   152,     0,     0,     0,   196,     0,     0,     0,   121,
     0,   119,     0,     0,     0,     0,   142,     0,     0,     0,
     0,     0,     0,    27,    29,     0,   136,     0,   134,     0,
     0,   180,   118,     0,     0,     0,   218,   221,     0,     0,
   211,     0,     0,     0,   208,   225,   227,   223,     0,   107,
   205,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    93,    94,    95,    96,     0,     0,     0,     0,     0,
     0,     0,    71,    47,    66,    64,    68,    65,   196,     0,
   196,   196,   196,   196,   196,     0,   157,     0,     0,     0,
     0,     0,     0,   126,     0,     0,     0,    54,   120,    51,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
   132,   135,   133,   114,   202,   203,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   196,   196,
     0,     0,     0,   229,     0,     0,   188,   189,   190,     0,
   191,   193,   194,   195,    58,    92,    87,    90,     0,    88,
     0,     0,   162,     0,   159,   165,   160,   161,   164,   156,
   158,   153,     0,   155,     0,     0,     0,     0,     0,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,   213,
   216,   222,   217,   212,   207,   219,   206,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   236,
     0,   214,     0,   215,   224,   210,   183,   234,   235,     0,
     0,   220,   230,   102,     0,     0,    91,    86,    72,     0,
     0,   123,   128,     0,   125,   127,     0,     0,     0,    32,
    33,    36,    35,    30,    34,     0,     0,   183,     0,     0,
     0,     0,     0,     0,     0,     0,   209,   237,   226,     0,
     0,     0,     0,     0,   192,   163,   154,     0,     0,   150,
   147,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   228,   231,   232,   233,     0,   122,   124,
   239,   241,   245,   238,   247,   240,   242,   243,   248,   246,
   244,   181,     0,     0,     0
};

static const short yydefgoto[] = {   733,
     9,     8,    10,    26,    82,    54,    64,    66,    51,    81,
   282,   373,   465,   702,    48,    69,   274,   365,   133,   134,
   346,   360,   266,   267,   436,   260,   261,   115,   116,   339,
   340,   506,    60,    61,    95,   450,   299,   451,   452,   286,
   287,   468,   469,    76,    77,   277,   371,   275,   368,   356,
   357,   526,   527,    97,   168,     4,   209,   223,   240,   241,
   381,   244,   245,   321,   322,   151,   224,   225,   297,   298,
   401,   402,   564,   558,   567,   565,   566,   573,   574,   639,
   640
};

static const short yypact[] = {   -33,
   -51,   -51,-32768,   -35,    -2,-32768,-32768,-32768,-32768,   343,
   377,   -51,   -51,     3,    21,   -51,   -51,   -51,    26,   -51,
    33,    46,   -51,   -51,-32768,-32768,-32768,    49,    64,    73,
     8,    80,    86,   103,-32768,   111,    72,-32768,   112,   114,
-32768,   170,    79,   -19,-32768,   109,-32768,   -38,   147,   117,
   -63,-32768,   373,-32768,   120,   123,   125,   126,   127,    70,
-32768,   130,-32768,   583,   136,   537,   -51,-32768,-32768,   -51,
   149,   -51,   150,   152,   153,     7,-32768,   137,   -51,-32768,
-32768,-32768,   -51,   154,   155,   156,   162,   165,   167,   168,
   -51,   169,   171,   172,   320,-32768,   -12,   135,   176,   180,
   182,   183,-32768,-32768,-32768,   185,   186,   187,   188,   193,
   194,   200,   201,   202,   485,-32768,   184,   203,   214,   215,
   211,   -51,   221,   -51,   228,   -51,   155,   230,   232,   -51,
   237,   241,   131,-32768,   244,   247,   250,   249,   102,   254,
   246,-32768,-32768,   255,   234,   253,   -55,   260,   137,   263,
-32768,   137,   137,   257,   266,-32768,   268,   274,   283,   137,
-32768,-32768,   282,   284,   287,   288,-32768,-32768,   289,   281,
   290,   293,   295,   299,   302,   305,   299,   299,   307,   137,
   137,   137,-32768,-32768,   306,   291,   137,   266,   308,   309,
     0,   312,   -16,   314,-32768,   317,   321,   325,   322,   137,
-32768,-32768,-32768,-32768,   327,-32768,-32768,-32768,   330,   331,
   336,   338,-32768,-32768,-32768,    11,   337,-32768,   341,   340,
   345,   351,   354,   353,   -26,-32768,   356,   358,   360,   137,
   137,   364,   137,-32768,   367,-32768,-32768,   369,   255,-32768,
   368,   370,   376,   371,   516,   375,   378,   380,   383,   384,
   385,-32768,   386,   365,   389,   393,   144,   392,   394,   -25,
-32768,-32768,   395,   396,   399,     9,-32768,   133,   402,   404,
-32768,   391,   405,   -14,   -18,-32768,   -90,-32768,-32768,   401,
-32768,-32768,   407,   409,   410,   -58,-32768,   137,-32768,   412,
-32768,   413,   416,-32768,   414,   419,   -26,-32768,   435,-32768,
-32768,-32768,   421,   422,   425,   426,   427,   166,-32768,-32768,
   431,-32768,   155,   434,   437,   438,   439,   441,   442,   443,
   516,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   137,
   447,   450,   454,   455,   456,   155,   466,   468,   101,-32768,
   470,   415,   137,-32768,-32768,   435,   102,   471,-32768,-32768,
-32768,   475,   476,   479,   480,   -37,-32768,-32768,-32768,   467,
   483,-32768,   489,-32768,-32768,   490,-32768,-32768,   495,-32768,
-32768,   482,   134,   498,   492,-32768,-32768,-32768,   500,   501,
   503,-32768,-32768,   305,   137,-32768,   505,   155,   507,   508,
   509,   155,   510,   512,   513,   514,   517,   519,   520,   521,
   209,-32768,-32768,-32768,-32768,-32768,-32768,   496,   524,-32768,
   528,   529,   531,   532,   533,   536,   538,-32768,   539,-32768,
-32768,    59,   137,   266,-32768,   540,   541,-32768,-32768,   543,
   534,   515,   245,   544,   545,   -86,   142,-32768,   546,   549,
-32768,-32768,   548,   550,   551,   155,   552,   553,   554,-32768,
    38,-32768,   555,   557,   559,   137,-32768,   558,   560,   561,
   562,   563,   564,-32768,-32768,   565,-32768,   -64,-32768,    -8,
   567,-32768,-32768,   568,   570,   573,-32768,-32768,   574,   266,
-32768,   102,   576,   577,-32768,-32768,-32768,-32768,   236,-32768,
-32768,   578,   579,   580,   581,   582,    -5,   584,   585,   586,
   587,-32768,-32768,-32768,-32768,   588,   589,   590,   593,   592,
   266,   596,-32768,-32768,-32768,-32768,-32768,-32768,   155,   595,
   155,   155,   155,   155,   155,    39,-32768,   597,   547,   598,
   599,   602,   603,-32768,   604,   605,   606,-32768,-32768,-32768,
   607,   575,   556,   102,   608,   102,   102,   102,   266,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   609,    19,   610,   611,
   612,   613,   614,   256,    68,    77,   107,   616,   155,   155,
   617,   618,   235,-32768,   619,   620,-32768,-32768,-32768,   622,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   621,-32768,
   624,   623,-32768,   626,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   628,-32768,   627,   629,   594,   630,   631,   625,
-32768,   634,   412,   633,   635,   636,   637,   638,   639,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   641,   642,   643,
   644,   645,   646,   647,   648,   649,   650,   651,   542,-32768,
   653,-32768,   654,-32768,-32768,-32768,   305,-32768,-32768,   137,
   137,-32768,-32768,-32768,   655,   656,-32768,-32768,-32768,   657,
   658,-32768,-32768,   662,-32768,-32768,   663,   661,   664,-32768,
-32768,-32768,-32768,-32768,-32768,   299,   665,   305,   299,   668,
   299,   669,   137,   412,   137,   137,-32768,-32768,-32768,   670,
   666,   671,   672,   675,-32768,-32768,-32768,   674,   676,-32768,
-32768,-32768,   677,   678,   679,   680,   681,   682,   683,   684,
   685,   686,   687,-32768,-32768,-32768,-32768,   690,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   702,   703,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   698,-32768,-32768,-32768,-32768,-32768,   696,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   660,
-32768,-32768,-32768,   398,   352,-32768,   472,-32768,   615,-32768,
   440,-32768,-32768,   692,-32768,   -28,-32768,-32768,   335,-32768,
   527,-32768,   326,-32768,   723,-32768,-32768,-32768,-32768,-32768,
   458,-32768,   292,-32768,-32768,     6,  -342,  -184,   -78,  -176,
  -600,  -378,-32768,-32768,   494,  -124,   379,-32768,-32768,   461,
   473,  -390,-32768,-32768,-32768,-32768,-32768,-32768,   243,-32768,
   181
};


#define	YYLAST		820


static const short yytable[] = {   145,
   246,   247,   195,   255,   434,   474,   366,     5,     1,    70,
   491,   363,   669,   258,   352,   353,   369,    28,    29,   295,
   163,    32,    33,    34,    96,    36,    79,   263,    39,    40,
   283,   284,    71,   370,    79,   517,   259,   518,   258,    67,
    72,   443,   491,   519,   520,    83,   264,   354,    84,   164,
   285,   355,   263,    85,    73,   521,    86,    87,    88,   551,
    80,   259,   165,   444,   467,   377,   162,    89,   215,     3,
   217,   264,   135,   219,   220,   136,   445,   138,   522,     2,
   296,   229,    55,   711,   146,    68,   441,     6,   148,   166,
    90,   446,   265,   523,   524,    74,   157,    91,   344,   283,
   284,   249,   250,   251,    63,   367,    75,   333,   254,   364,
   334,   167,    56,   517,   335,   553,   580,   265,   581,   285,
     7,   273,   447,    30,   336,    92,    93,   190,    44,   192,
   142,   194,   350,   448,   118,   198,   337,   525,   449,   561,
   222,   119,   621,    31,    57,    94,   519,   520,    35,    70,
   333,   303,   304,   334,   306,    37,   458,   335,   521,   459,
   120,   538,   600,   338,   460,   461,    58,   336,    38,   121,
    59,    41,    71,   122,   502,   503,   504,   505,   341,   337,
    72,   522,    55,   462,   352,   353,    42,   123,   410,   641,
   124,   642,    50,   103,    73,    43,   523,   524,   643,    62,
   644,   614,    45,   616,   617,   618,   338,   125,    46,   379,
   126,   425,    56,   127,   387,   207,   208,   354,   128,   129,
   388,   355,   144,   389,   428,    47,   390,   130,   645,    65,
   646,   131,   463,    49,    52,    74,    53,   391,   132,   508,
   525,    78,    98,   392,    57,    99,    75,   100,   101,   102,
   387,   419,   393,   105,   201,   169,   388,   464,   144,   389,
   341,   117,   390,   477,   432,   144,    58,   481,   691,   394,
    59,   137,   139,   391,   140,   141,   149,   150,   152,   392,
   568,   568,   628,   629,   153,   569,   569,   154,   393,   155,
   156,   158,   408,   159,   160,   560,   170,   395,   396,   705,
   171,   630,   172,   173,   185,   394,   475,   174,   175,   176,
   177,   397,   398,   631,   632,   178,   179,   399,   570,   570,
   400,   534,   180,   181,   182,   186,   591,    83,   633,   634,
    84,   189,   490,   395,   396,    85,   187,   188,    86,    87,
    88,   571,   571,   191,   507,   572,   572,   397,   398,    89,
   193,    12,   196,   399,   197,    13,   400,   213,   652,   199,
   635,   636,   637,   200,   619,   638,   203,   211,   514,   204,
   205,   206,    90,   622,   210,   214,   212,   543,   221,    91,
    83,    14,   216,    84,    15,    12,   218,   222,    85,    13,
   226,    86,    87,    88,   593,   227,   595,   596,   597,   598,
   599,    16,    89,   228,   230,   235,   231,    92,    93,   232,
   233,   253,   234,   236,    17,    14,   237,    18,    15,   238,
   239,    19,    20,   242,    21,    90,   243,    94,   248,   252,
   256,   257,    91,    22,   262,    16,   268,    23,   269,    24,
   387,   270,   272,   161,   648,   649,   388,   271,    17,   389,
   276,    18,   390,   278,   279,    19,    20,   280,    21,   281,
    92,    93,   288,   391,   289,   290,    25,    22,   291,   392,
   443,    23,   292,    24,    83,   293,   294,    84,   393,   300,
    94,   301,    85,   302,   305,    86,    87,    88,   307,   308,
   330,   309,   444,   310,   312,   394,    89,   311,   323,   703,
    27,   324,   706,   325,   708,   445,   326,   327,   328,   329,
   331,   106,   107,   332,   342,   361,   343,   347,   348,    90,
   446,   349,   372,   395,   396,   358,    91,   359,   362,   374,
   108,   375,   376,   380,   382,   431,   384,   397,   398,   383,
   118,   385,   109,   399,   403,   404,   400,   119,   405,   406,
   407,   447,   409,   313,    92,    93,   411,   110,   111,   412,
   413,   414,   448,   415,   416,   417,   120,   449,   628,   629,
   420,   692,   693,   421,    94,   121,   422,   423,   424,   122,
   314,   315,   316,   317,   318,   319,   320,   630,   426,   112,
   427,   113,   435,   123,   114,   430,   124,   437,   438,   631,
   632,   439,   440,   453,   710,   457,   712,   713,   183,   106,
   107,   454,   455,   125,   633,   634,   126,   456,   466,   127,
   467,   471,   472,   492,   128,   129,   473,   476,   108,   478,
   479,   480,   482,   130,   483,   484,   485,   131,   513,   486,
   109,   487,   488,   489,   132,   493,   635,   636,   637,   494,
   495,   638,   496,   497,   498,   110,   111,   499,   512,   500,
   501,   509,   510,   351,   511,   687,   529,   515,   516,   530,
   531,   603,   532,   533,   535,   536,   537,   541,   540,   542,
   544,   613,   545,   546,   547,   548,   549,   112,   550,   113,
   554,   555,   114,   556,   557,   559,   562,   563,   575,   612,
   576,   734,   735,   577,   578,   579,    11,   582,   583,   584,
   585,   586,   587,   588,   589,   590,   592,   594,   664,   605,
   602,   604,   606,   607,   608,   609,   610,   470,   615,   184,
   611,   345,   620,   623,   624,   625,   626,   627,   647,   650,
   651,   655,   654,   656,   657,   658,   659,   660,   661,   667,
   662,   104,   663,   665,   666,   668,   670,   386,   671,   672,
   673,   674,   675,   676,   677,   678,   679,   680,   681,   682,
   683,   684,   685,   686,   689,   690,   694,   147,   429,   695,
   696,   697,   698,   699,   700,   539,   704,   701,   707,   715,
   709,   714,   202,   552,   716,   717,   718,   719,   143,   720,
   721,   722,   723,   724,   725,   726,   727,   728,   729,   730,
   731,   732,   378,   442,   418,   653,   528,   601,   433,   688
};

static const short yycheck[] = {    78,
   177,   178,   127,   188,   347,   384,    25,     2,    42,     3,
   401,    26,   613,    39,    52,    53,   107,    12,    13,    46,
    33,    16,    17,    18,    53,    20,    90,    44,    23,    24,
    89,    90,    26,   124,    90,   122,    62,   124,    39,    78,
    34,     4,   433,     5,     6,     8,    63,    85,    11,    62,
   109,    89,    44,    16,    48,    17,    19,    20,    21,   124,
   124,    62,    75,    26,   129,   124,    95,    30,   124,   121,
   149,    63,    67,   152,   153,    70,    39,    72,    40,   113,
   107,   160,    13,   684,    79,   124,   124,   123,    83,   102,
    53,    54,   109,    55,    56,    89,    91,    60,   124,    89,
    90,   180,   181,   182,   124,   124,   100,     7,   187,   124,
    10,   124,    43,   122,    14,   124,   122,   109,   124,   109,
   123,   200,    85,   121,    24,    88,    89,   122,   121,   124,
   124,   126,   124,    96,     4,   130,    36,    99,   101,   482,
   122,    11,   124,   123,    75,   108,     5,     6,   123,     3,
     7,   230,   231,    10,   233,   123,    23,    14,    17,    26,
    30,   124,   124,    63,    31,    32,    97,    24,   123,    39,
   101,   123,    26,    43,   116,   117,   118,   119,   257,    36,
    34,    40,    13,    50,    52,    53,   123,    57,   313,   122,
    60,   124,   121,   124,    48,   123,    55,    56,   122,   121,
   124,   544,   123,   546,   547,   548,    63,    77,   123,   288,
    80,   336,    43,    83,     6,   114,   115,    85,    88,    89,
    12,    89,   122,    15,   124,   123,    18,    97,   122,   121,
   124,   101,    99,   123,   123,    89,   123,    29,   108,   424,
    99,   125,   123,    35,    75,   123,   100,   123,   123,   123,
     6,   330,    44,   124,   124,   121,    12,   124,   122,    15,
   339,   126,    18,   388,   343,   122,    97,   392,   647,    61,
   101,   123,   123,    29,   123,   123,   123,   123,   123,    35,
    46,    46,    27,    28,   123,    51,    51,   123,    44,   123,
   123,   123,   127,   123,   123,   480,   121,    89,    90,   678,
   121,    46,   121,   121,   121,    61,   385,   123,   123,   123,
   123,   103,   104,    58,    59,   123,   123,   109,    84,    84,
   112,   446,   123,   123,   123,   123,   511,     8,    73,    74,
    11,   121,   124,    89,    90,    16,   123,   123,    19,    20,
    21,   107,   107,   123,   423,   111,   111,   103,   104,    30,
   123,     9,   123,   109,   123,    13,   112,   124,   124,   123,
   105,   106,   107,   123,   549,   110,   123,   122,   124,   123,
   121,   123,    53,   558,   121,   123,   122,   456,   122,    60,
     8,    39,   123,    11,    42,     9,   124,   122,    16,    13,
   123,    19,    20,    21,   519,   122,   521,   522,   523,   524,
   525,    59,    30,   121,   123,   125,   123,    88,    89,   123,
   123,   121,   124,   124,    72,    39,   124,    75,    42,   125,
   122,    79,    80,   122,    82,    53,   122,   108,   122,   124,
   123,   123,    60,    91,   123,    59,   123,    95,   122,    97,
     6,   121,   121,   124,   569,   570,    12,   123,    72,    15,
   124,    75,    18,   124,   124,    79,    80,   122,    82,   122,
    88,    89,   126,    29,   124,   126,   124,    91,   124,    35,
     4,    95,   122,    97,     8,   122,   124,    11,    44,   124,
   108,   124,    16,   124,   121,    19,    20,    21,   122,   121,
   126,   124,    26,   124,   124,    61,    30,   122,   124,   676,
   124,   124,   679,   124,   681,    39,   124,   124,   124,   124,
   122,    27,    28,   121,   123,   125,   123,   123,   123,    53,
    54,   123,   122,    89,    90,   124,    60,   124,   124,   123,
    46,   123,   123,   122,   122,   121,   123,   103,   104,   124,
     4,   123,    58,   109,   124,   124,   112,    11,   124,   124,
   124,    85,   122,    38,    88,    89,   123,    73,    74,   123,
   123,   123,    96,   123,   123,   123,    30,   101,    27,    28,
   124,   650,   651,   124,   108,    39,   123,   123,   123,    43,
    65,    66,    67,    68,    69,    70,    71,    46,   123,   105,
   123,   107,   122,    57,   110,   126,    60,   123,   123,    58,
    59,   123,   123,   121,   683,   124,   685,   686,   124,    27,
    28,   123,   123,    77,    73,    74,    80,   123,   121,    83,
   129,   122,   122,   128,    88,    89,   124,   123,    46,   123,
   123,   123,   123,    97,   123,   123,   123,   101,   124,   123,
    58,   123,   123,   123,   108,   122,   105,   106,   107,   122,
   122,   110,   122,   122,   122,    73,    74,   122,   125,   122,
   122,   122,   122,   266,   122,   124,   121,   124,   124,   121,
   123,   125,   123,   123,   123,   123,   123,   121,   124,   121,
   123,   126,   123,   123,   123,   123,   123,   105,   124,   107,
   124,   124,   110,   124,   122,   122,   121,   121,   121,   125,
   122,     0,     0,   124,   124,   124,     9,   124,   124,   124,
   124,   124,   124,   124,   122,   124,   121,   123,   125,   121,
   124,   124,   121,   121,   121,   121,   121,   376,   121,   115,
   124,   260,   124,   124,   124,   124,   124,   124,   123,   123,
   123,   122,   124,   122,   124,   122,   124,   122,   121,   125,
   124,    60,   124,   124,   124,   122,   124,   297,   124,   124,
   124,   124,   124,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   122,   122,   122,    82,   339,   124,
   124,   124,   121,   121,   124,   451,   122,   124,   121,   124,
   122,   122,   133,   468,   124,   124,   122,   124,    76,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   122,   286,   356,   321,   573,   438,   526,   346,   639
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/*
   This file is almost identical to bison.simple except that it has some
   compilation warnings removed and also some K&R C-style things are removed
   to be able to use yyparse() as a class member function plus some support
   for better syntax error reporting.
*/

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 269 "plugins/csstdldr/stdparse.y"
{ world->SelectLibrary (storage.cur_library = yyvsp[-1].string); ;
    break;}
case 3:
#line 272 "plugins/csstdldr/stdparse.y"
{ world->SelectLibrary (storage.cur_library = yyvsp[-1].string); ;
    break;}
case 8:
#line 286 "plugins/csstdldr/stdparse.y"
{ storage.tex_prefix = yyvsp[-1].string; ;
    break;}
case 9:
#line 288 "plugins/csstdldr/stdparse.y"
{ storage.tex_prefix = NULL; ;
    break;}
case 10:
#line 290 "plugins/csstdldr/stdparse.y"
{ if (!RecursiveLoad (yyvsp[-1].string)) YYABORT; ;
    break;}
case 11:
#line 292 "plugins/csstdldr/stdparse.y"
{ printf ("SOUNDS\n"); ;
    break;}
case 12:
#line 294 "plugins/csstdldr/stdparse.y"
{
    if (!world->CreateCamera ("Start", yyvsp[-3].string,
      (csVector3 &)yyvsp[-1].vect, csVector3 (0, 0, 1), csVector3 (0, 1, 0)))
      YYABORT;
  ;
    break;}
case 13:
#line 300 "plugins/csstdldr/stdparse.y"
{ InitCamera (yyvsp[-1].string); ;
    break;}
case 14:
#line 302 "plugins/csstdldr/stdparse.y"
{ if (!CreateCamera ()) YYABORT; ;
    break;}
case 15:
#line 304 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode = pmNONE;
    polygon.first_len = polygon.second_len = 0.0;
  ;
    break;}
case 16:
#line 309 "plugins/csstdldr/stdparse.y"
{ if (!CreatePlane (yyvsp[-4].string)) YYABORT; ;
    break;}
case 17:
#line 311 "plugins/csstdldr/stdparse.y"
{
    SECTOR.object = world->CreateSector (yyvsp[-1].string);
    SECTOR.polyset = QUERY_INTERFACE (SECTOR.object, iPolygonSet);
    if (!SECTOR.polyset)
    {
      SECTOR.object->DecRef ();
      yyerror ("engine created an invalid iSector object!");
      YYABORT;
    }
    SECTOR.texname = NULL;
    SECTOR.texlen = 1.0;
    SECTOR.statbsp = false;
  ;
    break;}
case 18:
#line 325 "plugins/csstdldr/stdparse.y"
{
    SECTOR.polyset->CompressVertices ();
    if (SECTOR.statbsp) SECTOR.object->CreateBSP ();
    SECTOR.polyset->DecRef ();
    SECTOR.object->DecRef ();
  ;
    break;}
case 19:
#line 332 "plugins/csstdldr/stdparse.y"
{ if (!world->CreateKey (yyvsp[-3].string, yyvsp[-1].string)) ABORTMSG; ;
    break;}
case 20:
#line 334 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION [%s]\n", yyvsp[-3].string); ;
    break;}
case 21:
#line 336 "plugins/csstdldr/stdparse.y"
{ printf ("SCRIPT '%s' (%s: %s)\n", yyvsp[-5].string, yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 22:
#line 338 "plugins/csstdldr/stdparse.y"
{ printf ("THING_tpl [%s]\n", yyvsp[-3].string); ;
    break;}
case 23:
#line 340 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE [%s]\n", yyvsp[-3].string); ;
    break;}
case 26:
#line 352 "plugins/csstdldr/stdparse.y"
{ InitTexture (yyvsp[-1].string); ;
    break;}
case 27:
#line 354 "plugins/csstdldr/stdparse.y"
{ if (!CreateTexture ()) ABORTMSG; ;
    break;}
case 30:
#line 363 "plugins/csstdldr/stdparse.y"
{ printf ("MIPMAP (%d)\n", yyvsp[-1].ival); ;
    break;}
case 31:
#line 364 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-2].ival)
      TEX.flags = (TEX.flags & ~CS_TEXTURE_NOMIPMAPS);
    else
      TEX.flags |= CS_TEXTURE_NOMIPMAPS;
  ;
    break;}
case 32:
#line 371 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_DITHER;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_DITHER);
  ;
    break;}
case 33:
#line 378 "plugins/csstdldr/stdparse.y"
{ TEX.filename = yyvsp[-1].string; ;
    break;}
case 34:
#line 380 "plugins/csstdldr/stdparse.y"
{ TEX.transp = yyvsp[-1].color; TEX.do_transp = true; ;
    break;}
case 35:
#line 382 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_3D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_3D);
  ;
    break;}
case 36:
#line 389 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_2D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_2D);
  ;
    break;}
case 42:
#line 414 "plugins/csstdldr/stdparse.y"
{ printf ("FILE (%s)\n", yyvsp[-1].string); ;
    break;}
case 45:
#line 426 "plugins/csstdldr/stdparse.y"
{ SECTOR.polyset->CreateVertex (CSVECTOR3 (yyvsp[-1].vect)); ;
    break;}
case 46:
#line 428 "plugins/csstdldr/stdparse.y"
{
    polygon.object = SECTOR.polyset->CreatePolygon (yyvsp[-1].string);
    polygon.texname = SECTOR.texname;
    polygon.texlen = SECTOR.texlen;
  ;
    break;}
case 47:
#line 434 "plugins/csstdldr/stdparse.y"
{
    if (!CreateTexturePlane (polygon.object))
    { polygon.object->DecRef (); YYABORT; }
    polygon.object->DecRef ();
  ;
    break;}
case 48:
#line 440 "plugins/csstdldr/stdparse.y"
{ SECTOR.texname = yyvsp[-1].string; ;
    break;}
case 49:
#line 442 "plugins/csstdldr/stdparse.y"
{ SECTOR.texlen = yyvsp[-1].fval; ;
    break;}
case 50:
#line 444 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 51:
#line 446 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 52:
#line 448 "plugins/csstdldr/stdparse.y"
{ SECTOR.statbsp = true; ;
    break;}
case 53:
#line 450 "plugins/csstdldr/stdparse.y"
{
    thing.object = world->CreateThing (yyvsp[-1].string, SECTOR.object);
    thing.polyset = QUERY_INTERFACE (thing.object, iPolygonSet);
    if (!thing.polyset)
    {
      thing.object->DecRef ();
      yyerror ("engine created an invalid iThing object!");
      YYABORT;
    }
    thing.texname = NULL;
    thing.texlen = 1.0;
  ;
    break;}
case 54:
#line 463 "plugins/csstdldr/stdparse.y"
{
    thing.polyset->DecRef ();
    thing.object->DecRef ();
  ;
    break;}
case 55:
#line 468 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 56:
#line 470 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 57:
#line 472 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 58:
#line 475 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 59:
#line 477 "plugins/csstdldr/stdparse.y"
{ printf ("SKYDOME (...)\n"); ;
    break;}
case 60:
#line 479 "plugins/csstdldr/stdparse.y"
{ if (!SECTOR.polyset->CreateKey (yyvsp[-3].string, yyvsp[-1].string)) ABORTMSG; ;
    break;}
case 61:
#line 481 "plugins/csstdldr/stdparse.y"
{ printf ("NODE (...)\n"); ;
    break;}
case 64:
#line 491 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 65:
#line 493 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 66:
#line 495 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 68:
#line 501 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 71:
#line 511 "plugins/csstdldr/stdparse.y"
{ printf ("POSITION (...)\n"); ;
    break;}
case 72:
#line 513 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 75:
#line 525 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmORIGIN;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 76:
#line 530 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.first.Set (yyvsp[-1].vect);
  ;
    break;}
case 77:
#line 535 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.second.Set (yyvsp[-1].vect);
  ;
    break;}
case 78:
#line 540 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.first_len = yyvsp[-1].fval;
  ;
    break;}
case 79:
#line 545 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.second_len = yyvsp[-1].fval;
  ;
    break;}
case 80:
#line 550 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmVECTORS;
    PLANE.first = yyvsp[-1].vect;
    PLANE.first_len = 1.0;
  ;
    break;}
case 81:
#line 556 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmVECTORS;
    PLANE.second = yyvsp[-1].vect;
    PLANE.second_len = 1.0;
  ;
    break;}
case 82:
#line 562 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmMATRIX;
    PLANE.matrix.Set (*yyvsp[-1].matrix);
  ;
    break;}
case 83:
#line 567 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmMATRIX;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 86:
#line 583 "plugins/csstdldr/stdparse.y"
{ printf ("<pos> <radius> <color> <dynamic-flag>\n"); ;
    break;}
case 87:
#line 585 "plugins/csstdldr/stdparse.y"
{ printf ("CENTER (...)\n"); ;
    break;}
case 88:
#line 587 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 89:
#line 589 "plugins/csstdldr/stdparse.y"
{ printf ("DYNAMIC ()\n"); ;
    break;}
case 90:
#line 591 "plugins/csstdldr/stdparse.y"
{ printf ("COLOR ( ... )\n"); ;
    break;}
case 91:
#line 593 "plugins/csstdldr/stdparse.y"
{ printf ("HALO (%g,%g)\n", yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 99:
#line 613 "plugins/csstdldr/stdparse.y"
{ printf ("THING ('%s')\n", yyvsp[-1].string); ;
    break;}
case 100:
#line 615 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION ('%s')\n", yyvsp[-1].string); ;
    break;}
case 101:
#line 617 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT ('%s':%g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 102:
#line 619 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER ('%s', '%s' -> '%s')\n", yyvsp[-6].string, yyvsp[-4].string, yyvsp[-1].string); ;
    break;}
case 103:
#line 621 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 106:
#line 633 "plugins/csstdldr/stdparse.y"
{
    polygon.object = thing.polyset->CreatePolygon (yyvsp[-1].string);
    polygon.texname = thing.texname;
    polygon.texlen = thing.texlen;
  ;
    break;}
case 107:
#line 639 "plugins/csstdldr/stdparse.y"
{
    if (!CreateTexturePlane (polygon.object))
    { polygon.object->DecRef (); YYABORT; }
    polygon.object->DecRef ();
  ;
    break;}
case 108:
#line 645 "plugins/csstdldr/stdparse.y"
{ thing.polyset->CreateVertex (CSVECTOR3 (yyvsp[-1].vect)); ;
    break;}
case 109:
#line 647 "plugins/csstdldr/stdparse.y"
{ thing.texname = yyvsp[-1].string; ;
    break;}
case 110:
#line 649 "plugins/csstdldr/stdparse.y"
{ thing.texlen = yyvsp[-1].fval; ;
    break;}
case 111:
#line 651 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].transform->matrix_valid)
      thing.object->SetTransform (CSMATRIX3 (yyvsp[-1].transform->matrix));
    if (yyvsp[-1].transform->vector_valid)
      thing.object->SetPosition (CSVECTOR3 (yyvsp[-1].transform->vector));
  ;
    break;}
case 112:
#line 658 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 113:
#line 660 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX ()\n"); ;
    break;}
case 114:
#line 663 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 115:
#line 665 "plugins/csstdldr/stdparse.y"
{ printf ("BEZIER '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 116:
#line 667 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECENTER (...)\n"); ;
    break;}
case 117:
#line 669 "plugins/csstdldr/stdparse.y"
{ printf ("CURVESCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 118:
#line 671 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECONTROL (...)\n"); ;
    break;}
case 122:
#line 682 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 123:
#line 684 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 124:
#line 686 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 125:
#line 688 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 126:
#line 690 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE ()\n"); ;
    break;}
case 127:
#line 692 "plugins/csstdldr/stdparse.y"
{ printf ("TEX_SET_SELECT ('%s')\n", yyvsp[-1].string); ;
    break;}
case 128:
#line 694 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 131:
#line 706 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 132:
#line 708 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 133:
#line 710 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 139:
#line 732 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 140:
#line 734 "plugins/csstdldr/stdparse.y"
{ printf ("FRAME '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 141:
#line 736 "plugins/csstdldr/stdparse.y"
{ printf ("ACTION '%s' ( ... )\n", yyvsp[-3].string); ;
    break;}
case 142:
#line 738 "plugins/csstdldr/stdparse.y"
{ printf ("TRIANGLE (%g,%g,%g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 143:
#line 740 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 144:
#line 742 "plugins/csstdldr/stdparse.y"
{ printf ("MERGE_TEXELS (%d)\n", yyvsp[-1].ival); ;
    break;}
case 147:
#line 761 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g,%g,%g:%g,%g)\n", yyvsp[-3].vect.x, yyvsp[-3].vect.y, yyvsp[-3].vect.z, yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 150:
#line 771 "plugins/csstdldr/stdparse.y"
{ printf ("F ('%s', %g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 153:
#line 781 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 154:
#line 783 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 155:
#line 785 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 156:
#line 787 "plugins/csstdldr/stdparse.y"
{ printf ("MIXMODE (...)\n"); ;
    break;}
case 163:
#line 801 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 168:
#line 815 "plugins/csstdldr/stdparse.y"
{ CAMERA.pos.Set (yyvsp[-1].vect); ;
    break;}
case 169:
#line 817 "plugins/csstdldr/stdparse.y"
{ CAMERA.forward.Set (yyvsp[-1].vect); ;
    break;}
case 170:
#line 819 "plugins/csstdldr/stdparse.y"
{ CAMERA.upward.Set (yyvsp[-1].vect); ;
    break;}
case 171:
#line 821 "plugins/csstdldr/stdparse.y"
{ CAMERA.sector = yyvsp[-1].string;  ;
    break;}
case 172:
#line 836 "plugins/csstdldr/stdparse.y"
{ yyval.string = NULL; ;
    break;}
case 174:
#line 843 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 175:
#line 845 "plugins/csstdldr/stdparse.y"
{ yyval.ival = false; ;
    break;}
case 176:
#line 851 "plugins/csstdldr/stdparse.y"
{ CSCOLOR (yyval.color).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 177:
#line 857 "plugins/csstdldr/stdparse.y"
{ yyval.vect.Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 178:
#line 864 "plugins/csstdldr/stdparse.y"
{ yyval.vect.x = yyval.vect.y = yyval.vect.z = 0; ;
    break;}
case 180:
#line 871 "plugins/csstdldr/stdparse.y"
{ yyval.vect2.Set (yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 181:
#line 879 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Set (yyvsp[-8].fval, yyvsp[-7].fval, yyvsp[-6].fval, yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval);
  ;
    break;}
case 182:
#line 884 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Set (yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval);
  ;
    break;}
case 183:
#line 889 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Identity ();
  ;
    break;}
case 187:
#line 903 "plugins/csstdldr/stdparse.y"
{ storage.matrix2.Identity (); ;
    break;}
case 188:
#line 905 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csXRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 189:
#line 907 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 190:
#line 909 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csZRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 191:
#line 911 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= yyvsp[-1].fval; ;
    break;}
case 192:
#line 913 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csMatrix3 (yyvsp[-3].fval, 0, 0, 0, yyvsp[-2].fval, 0, 0, 0, yyvsp[-1].fval); ;
    break;}
case 193:
#line 915 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csXScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 194:
#line 917 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 195:
#line 919 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 198:
#line 929 "plugins/csstdldr/stdparse.y"
{
    yyval.transform = &storage;
    yyval.transform->matrix.Identity ();
    yyval.transform->matrix_valid = false;
    yyval.transform->vector_valid = false;
  ;
    break;}
case 202:
#line 945 "plugins/csstdldr/stdparse.y"
{
    storage.matrix = *yyvsp[-1].matrix;
    storage.matrix_valid = true;
  ;
    break;}
case 203:
#line 950 "plugins/csstdldr/stdparse.y"
{
    storage.vector = CSVECTOR3 (yyvsp[-1].vect);
    storage.vector_valid = true;
  ;
    break;}
case 206:
#line 964 "plugins/csstdldr/stdparse.y"
{ polygon.texname = yyvsp[-1].string; ;
    break;}
case 207:
#line 966 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 208:
#line 968 "plugins/csstdldr/stdparse.y"
{
    polygon.mode = pmNONE;
    polygon.first_len = polygon.second_len = polygon.texlen;
  ;
    break;}
case 209:
#line 973 "plugins/csstdldr/stdparse.y"
{ if (!CreateTexturePlane (polygon.object)) YYABORT; ;
    break;}
case 211:
#line 976 "plugins/csstdldr/stdparse.y"
{ printf ("GOURAUD ()\n"); ;
    break;}
case 212:
#line 978 "plugins/csstdldr/stdparse.y"
{ printf ("FLATCOL (%g,%g,%g)\n", yyvsp[-1].color.red, yyvsp[-1].color.green, yyvsp[-1].color.blue); ;
    break;}
case 213:
#line 980 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 214:
#line 982 "plugins/csstdldr/stdparse.y"
{ printf ("UV (...)\n"); ;
    break;}
case 215:
#line 984 "plugins/csstdldr/stdparse.y"
{ printf ("UVA (...)\n"); ;
    break;}
case 216:
#line 986 "plugins/csstdldr/stdparse.y"
{ printf ("COLORS (...)\n"); ;
    break;}
case 217:
#line 988 "plugins/csstdldr/stdparse.y"
{ printf ("COSFACT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 218:
#line 990 "plugins/csstdldr/stdparse.y"
{ printf ("CLIP ()\n"); ;
    break;}
case 219:
#line 992 "plugins/csstdldr/stdparse.y"
{ printf ("PORTAL (%s)\n", yyvsp[-1].string); ;
    break;}
case 220:
#line 994 "plugins/csstdldr/stdparse.y"
{ printf ("WARP (...)\n"); ;
    break;}
case 222:
#line 1000 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 224:
#line 1006 "plugins/csstdldr/stdparse.y"
{ polygon.object->CreateVertex (yyvsp[0].fval); ;
    break;}
case 231:
#line 1029 "plugins/csstdldr/stdparse.y"
{ printf ("MATRIX (...)\n"); ;
    break;}
case 232:
#line 1031 "plugins/csstdldr/stdparse.y"
{ printf ("V (...)\n"); ;
    break;}
case 233:
#line 1033 "plugins/csstdldr/stdparse.y"
{ printf ("W (...)\n"); ;
    break;}
case 234:
#line 1035 "plugins/csstdldr/stdparse.y"
{ printf ("MIRROR ()\n"); ;
    break;}
case 235:
#line 1037 "plugins/csstdldr/stdparse.y"
{ printf ("STATIC ()\n"); ;
    break;}
case 238:
#line 1048 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmORIGIN;
    polygon.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 239:
#line 1053 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.first.Set (yyvsp[-1].vect);
  ;
    break;}
case 240:
#line 1058 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.second.Set (yyvsp[-1].vect);
  ;
    break;}
case 241:
#line 1063 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.first_len = yyvsp[-1].fval;
  ;
    break;}
case 242:
#line 1068 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.second_len = yyvsp[-1].fval;
  ;
    break;}
case 243:
#line 1073 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmVECTORS;
    polygon.first = yyvsp[-1].vect;
    polygon.first_len = 1.0;
  ;
    break;}
case 244:
#line 1079 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmVECTORS;
    polygon.second = yyvsp[-1].vect;
    polygon.second_len = 1.0;
  ;
    break;}
case 245:
#line 1085 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmMATRIX;
    polygon.matrix.Set (*yyvsp[-1].matrix);
  ;
    break;}
case 246:
#line 1090 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmMATRIX;
    polygon.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 247:
#line 1095 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmPLANEREF;
    polygon.planetpl = yyvsp[-1].string;
  ;
    break;}
case 248:
#line 1100 "plugins/csstdldr/stdparse.y"
{ printf ("UV_SHIFT (%g, %g)\n", yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size += 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      /*if (count < 5)*/
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
              char errchar [2];
              if (yychar < 255) { errchar [0] = yychar; errchar [1] = 0; }
              sprintf (strchr (msg, 0), ", got `%s'",
                yychar < 255 ? errchar : yytname [yychar - 255]);
#ifdef YYERROR_EXTENDED
              YYERROR_EXTENDED(msg)
#endif
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1103 "plugins/csstdldr/stdparse.y"
 /* End of grammar */

/* On initialization, register keyword list with the C++ parser */
extern int init_token_table (const char * const *yytname);
struct __parser_init
{
  __parser_init ()
  {
    init_token_table (yytname);
#if YYDEBUG
    yydebug = 1;
#endif
  }
} __parser_init_dummy;
