
/*  A Bison parser, made from plugins/csstdldr/stdparse.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	KW_ACTION	258
#define	KW_ADD	259
#define	KW_ALPHA	260
#define	KW_ATTENUATION	261
#define	KW_BEZIER	262
#define	KW_CAMERA	263
#define	KW_CENTER	264
#define	KW_CIRCLE	265
#define	KW_CLIP	266
#define	KW_COLLECTION	267
#define	KW_COLOR	268
#define	KW_COLORS	269
#define	KW_CONVEX	270
#define	KW_COPY	271
#define	KW_CURVECENTER	272
#define	KW_CURVECONTROL	273
#define	KW_CURVESCALE	274
#define	KW_DETAIL	275
#define	KW_DITHER	276
#define	KW_DYNAMIC	277
#define	KW_F	278
#define	KW_FILE	279
#define	KW_FIRST	280
#define	KW_FIRST_LEN	281
#define	KW_FLATCOL	282
#define	KW_FOG	283
#define	KW_FOR_2D	284
#define	KW_FOR_3D	285
#define	KW_FORWARD	286
#define	KW_FRAME	287
#define	KW_GOURAUD	288
#define	KW_HALO	289
#define	KW_HEIGHTMAP	290
#define	KW_IDENTITY	291
#define	KW_KEY	292
#define	KW_KEYCOLOR	293
#define	KW_LEN	294
#define	KW_LIBRARY	295
#define	KW_LIGHT	296
#define	KW_LIGHTING	297
#define	KW_LIMB	298
#define	KW_MATERIAL	299
#define	KW_MATRIX	300
#define	KW_MIPMAP	301
#define	KW_MIRROR	302
#define	KW_MIXMODE	303
#define	KW_MOVE	304
#define	KW_MOVEABLE	305
#define	KW_MULTIPLY	306
#define	KW_MULTIPLY2	307
#define	KW_NODE	308
#define	KW_ORIG	309
#define	KW_PLANE	310
#define	KW_POLYGON	311
#define	KW_PORTAL	312
#define	KW_POSITION	313
#define	KW_RADIUS	314
#define	KW_ROT	315
#define	KW_ROT_X	316
#define	KW_ROT_Y	317
#define	KW_ROT_Z	318
#define	KW_SCALE	319
#define	KW_SCALE_X	320
#define	KW_SCALE_Y	321
#define	KW_SCALE_Z	322
#define	KW_SCRIPT	323
#define	KW_SECOND	324
#define	KW_SECOND_LEN	325
#define	KW_SECTOR	326
#define	KW_SKELETON	327
#define	KW_SKYDOME	328
#define	KW_SOUND	329
#define	KW_SOUNDS	330
#define	KW_SPRITE	331
#define	KW_SPRITE2D	332
#define	KW_START	333
#define	KW_STATBSP	334
#define	KW_STATIC	335
#define	KW_TEMPLATE	336
#define	KW_TERRAIN	337
#define	KW_TEX	338
#define	KW_TEXLEN	339
#define	KW_TEXMAP	340
#define	KW_TEXNR	341
#define	KW_TEXTURE	342
#define	KW_TEXTURES	343
#define	KW_TEXTURE_LIGHTING	344
#define	KW_TEXTURE_MIPMAP	345
#define	KW_TEXTURE_SCALE	346
#define	KW_TEX_SET	347
#define	KW_TEX_SET_SELECT	348
#define	KW_THING	349
#define	KW_TRANSFORM	350
#define	KW_TRANSPARENT	351
#define	KW_TRIANGLE	352
#define	KW_UPWARD	353
#define	KW_UV	354
#define	KW_UVA	355
#define	KW_UVEC	356
#define	KW_UV_SHIFT	357
#define	KW_V	358
#define	KW_VERTEX	359
#define	KW_VERTICES	360
#define	KW_VVEC	361
#define	KW_W	362
#define	KW_WORLD	363
#define	KW_ZFILL	364
#define	KW_yes	365
#define	KW_no	366
#define	KW_none	367
#define	KW_linear	368
#define	KW_inverse	369
#define	KW_realistic	370
#define	PARSER_VERSION	371
#define	STRING	372
#define	NUMBER	373

#line 20 "plugins/csstdldr/stdparse.y"
 /* Startup C++ code */

#include "cssysdef.h"
#include "stdldr.h"
#include "csutil/cscolor.h"
#include "csgeom/math2d.h"
#include "csgeom/math3d.h"

#include "iworld.h"
#include "itxtmgr.h"
#include "isector.h"
#include "ipolyset.h"
#include "ipolygon.h"
#include "ithing.h"
#include "iportal.h"

/* Define this to debug parser */
//#define YYDEBUG	1

/* yyparse is a member function */
#define yyparse csStandardLoader::yyparse

/* Provide detailed info about parse errors */
#define YYERROR_VERBOSE	1
/* Avoid some "signed vs unsigned comparison" warnings */
#define sizeof	(int)sizeof

// More shortcuts
#define TEX		storage.tex
#define CAMERA		storage.camera
#define PLANE		storage.plane
#define SECTOR		storage.sector

#define ABORTMSG							\
  { yyerror ("loading error, aborting"); YYABORT; }

#define YYERROR_EXTENDED(msg)						\
  if (yychar == STRING)							\
  {									\
    msg = (char *) realloc(msg, size += 14 + strlen (yylval.string));	\
    sprintf (strchr (msg, 0), " (value = `%s')", yylval.string);	\
  }									\
  else if (yychar == NUMBER)						\
  {									\
    msg = (char *) realloc(msg, size += 14 + 20);			\
    sprintf (strchr (msg, 0), " (value = `%g')", yylval.fval);		\
  }


#line 85 "plugins/csstdldr/stdparse.y"
typedef union
{
  // Just a number
  float fval;
  // A integer number
  int ival;
  // A boolean value
  bool bval;
  // A string value
  char *string;
  // A color
  csPColor color;
  // A 2D point
  csPVector2 vect2;
  // A 3D point
  csPVector3 vect;
  // A transformation matrix
  csMatrix3 *matrix;
  // A transformation matrix/vector
  csStandardLoader::yystorage *transform;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		692
#define	YYFLAG		-32768
#define	YYNTBASE	124

#define YYTRANSLATE(x) ((unsigned)(x) <= 374 ? yytranslate[x] : 207)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   119,
   120,     2,     2,   121,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   122,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   123
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     8,     9,    16,    17,    20,    25,    26,    33,
    38,    43,    50,    51,    58,    59,    66,    67,    74,    80,
    86,    94,   100,   106,   107,   110,   111,   118,   119,   122,
   125,   128,   133,   138,   141,   144,   145,   148,   154,   155,
   158,   163,   165,   168,   173,   174,   181,   186,   191,   194,
   195,   202,   208,   214,   220,   228,   233,   239,   244,   246,
   249,   254,   259,   262,   263,   266,   268,   271,   276,   283,
   285,   288,   293,   298,   303,   308,   313,   318,   323,   328,
   333,   335,   338,   344,   349,   354,   357,   362,   368,   373,
   375,   377,   379,   381,   383,   386,   391,   396,   403,   408,
   410,   413,   414,   421,   426,   431,   436,   441,   447,   450,
   458,   464,   469,   474,   481,   483,   486,   488,   495,   500,
   503,   508,   513,   515,   518,   523,   528,   533,   535,   538,
   540,   542,   545,   550,   556,   562,   569,   574,   575,   578,
   585,   586,   589,   596,   598,   601,   606,   613,   618,   623,
   625,   628,   631,   634,   637,   640,   645,   648,   651,   652,
   655,   660,   665,   670,   675,   676,   678,   680,   682,   683,
   686,   690,   694,   698,   700,   702,   705,   715,   717,   718,
   721,   723,   726,   729,   734,   739,   744,   749,   756,   761,
   766,   771,   772,   775,   776,   779,   781,   784,   789,   794,
   796,   799,   804,   807,   808,   814,   819,   822,   827,   832,
   837,   842,   847,   848,   854,   855,   858,   859,   862,   863,
   867,   868,   873,   875,   878,   883,   888,   893,   898,   901,
   904,   907,   910,   912,   915,   920,   925,   930,   935,   940,
   945,   950,   955,   960,   965
};

static const short yyrhs[] = {    -1,
   108,   179,   119,   125,   127,   120,     0,     0,    40,   179,
   119,   126,   127,   120,     0,     0,   127,   128,     0,    88,
   119,   133,   120,     0,     0,    92,   179,   119,   129,   133,
   120,     0,    40,   119,   117,   120,     0,    75,   119,   138,
   120,     0,    78,   119,   117,   121,   183,   120,     0,     0,
     8,   179,   119,   130,   177,   120,     0,     0,    55,   179,
   119,   131,   151,   120,     0,     0,    71,   179,   119,   132,
   142,   120,     0,    37,   117,   119,   117,   120,     0,    12,
   179,   119,   156,   120,     0,    68,   179,   119,   117,   122,
   117,   120,     0,    94,   179,   119,   158,   120,     0,    76,
   179,   119,   167,   120,     0,     0,   133,   134,     0,     0,
    87,   179,   119,   135,   136,   120,     0,     0,   136,   137,
     0,    46,   181,     0,    21,   181,     0,    24,   119,   117,
   120,     0,    96,   119,   182,   120,     0,    30,   181,     0,
    29,   181,     0,     0,   138,   139,     0,    74,   179,   119,
   140,   120,     0,     0,   140,   141,     0,    24,   119,   117,
   120,     0,   143,     0,   142,   143,     0,   104,   119,   183,
   120,     0,     0,    56,   179,   119,   144,   195,   120,     0,
    86,   119,   117,   120,     0,    84,   119,   118,   120,     0,
    79,   181,     0,     0,    94,   179,   119,   145,   161,   120,
     0,    41,   179,   119,   153,   120,     0,    76,   179,   119,
   173,   120,     0,    28,   119,   182,   118,   120,     0,    10,
   119,   183,   122,   183,   118,   120,     0,    73,   119,   146,
   120,     0,    37,   117,   119,   117,   120,     0,    53,   119,
   149,   120,     0,   147,     0,   146,   147,     0,    59,   119,
   118,   120,     0,   105,   119,   148,   120,     0,    42,   181,
     0,     0,   148,   118,     0,   150,     0,   149,   150,     0,
    58,   119,   183,   120,     0,    37,   119,   117,   121,   117,
   120,     0,   152,     0,   151,   152,     0,    54,   119,   184,
   120,     0,    25,   119,   184,   120,     0,    69,   119,   184,
   120,     0,    26,   119,   118,   120,     0,    70,   119,   118,
   120,     0,   101,   119,   183,   120,     0,   106,   119,   183,
   120,     0,    45,   119,   186,   120,     0,   103,   119,   183,
   120,     0,   154,     0,   153,   154,     0,   183,   122,   118,
   182,   118,     0,     9,   119,   183,   120,     0,    59,   119,
   118,   120,     0,    22,   181,     0,    13,   119,   182,   120,
     0,    34,   119,   118,   118,   120,     0,     6,   119,   155,
   120,     0,   112,     0,   113,     0,   114,     0,   115,     0,
   157,     0,   156,   157,     0,    94,   119,   117,   120,     0,
    12,   119,   117,   120,     0,    41,   119,   117,   121,   118,
   120,     0,    71,   119,   117,   120,     0,   159,     0,   158,
   159,     0,     0,    56,   179,   119,   160,   195,   120,     0,
   104,   119,   183,   120,     0,    86,   119,   117,   120,     0,
    84,   119,   118,   120,     0,    49,   119,   191,   120,     0,
    28,   119,   182,   118,   120,     0,    15,   181,     0,    10,
   119,   183,   122,   183,   118,   120,     0,     7,   179,   119,
   163,   120,     0,    17,   119,   183,   120,     0,    19,   119,
   118,   120,     0,    18,   119,   183,   122,   185,   120,     0,
   162,     0,   161,   162,     0,   159,     0,    37,   119,   117,
   121,   117,   120,     0,    81,   119,   117,   120,     0,    50,
   181,     0,    93,   119,   117,   120,     0,    24,   119,   117,
   120,     0,   164,     0,   163,   164,     0,    86,   119,   117,
   120,     0,    87,   119,   165,   120,     0,   105,   119,   148,
   120,     0,   166,     0,   165,   166,     0,   123,     0,   168,
     0,   167,   168,     0,    86,   119,   117,   120,     0,    32,
   179,   119,   169,   120,     0,     3,   179,   119,   171,   120,
     0,    97,   119,   118,   118,   118,   120,     0,    24,   119,
   117,   120,     0,     0,   169,   170,     0,   103,   119,   183,
   122,   185,   120,     0,     0,   171,   172,     0,    23,   119,
   117,   121,   118,   120,     0,   174,     0,   173,   174,     0,
    49,   119,   191,   120,     0,    81,   119,   117,   121,   117,
   120,     0,    86,   119,   117,   120,     0,    48,   119,   175,
   120,     0,   176,     0,   175,   176,     0,    16,   190,     0,
    51,   190,     0,    52,   190,     0,     4,   190,     0,     5,
   119,   118,   120,     0,    96,   190,     0,    38,   190,     0,
     0,   177,   178,     0,    58,   119,   183,   120,     0,    31,
   119,   183,   120,     0,    98,   119,   183,   120,     0,    71,
   119,   117,   120,     0,     0,   117,     0,   110,     0,   111,
     0,     0,   119,   120,     0,   119,   180,   120,     0,   118,
   118,   118,     0,   118,   118,   118,     0,   118,     0,   183,
     0,   118,   118,     0,   118,   118,   118,   118,   118,   118,
   118,   118,   118,     0,   118,     0,     0,   187,   188,     0,
   189,     0,   188,   189,     0,    36,   190,     0,    61,   119,
   118,   120,     0,    62,   119,   118,   120,     0,    63,   119,
   118,   120,     0,    64,   119,   118,   120,     0,    64,   119,
   118,   118,   118,   120,     0,    65,   119,   118,   120,     0,
    66,   119,   118,   120,     0,    67,   119,   118,   120,     0,
     0,   119,   120,     0,     0,   192,   193,     0,   194,     0,
   193,   194,     0,    45,   119,   186,   120,     0,   103,   119,
   183,   120,     0,   196,     0,   195,   196,     0,    86,   119,
   117,   120,     0,    42,   181,     0,     0,    85,   119,   197,
   205,   120,     0,   105,   119,   200,   120,     0,    33,   181,
     0,    27,   119,   182,   120,     0,     5,   119,   118,   120,
     0,    99,   119,   201,   120,     0,   100,   119,   202,   120,
     0,    14,   119,   199,   120,     0,     0,    57,   119,   198,
   203,   120,     0,     0,   199,   182,     0,     0,   200,   118,
     0,     0,   201,   118,   118,     0,     0,   202,   118,   118,
   118,     0,   204,     0,   203,   204,     0,    71,   119,   117,
   120,     0,    45,   119,   186,   120,     0,   103,   119,   183,
   120,     0,   107,   119,   183,   120,     0,    47,   181,     0,
    80,   181,     0,    11,   181,     0,   109,   181,     0,   206,
     0,   205,   206,     0,    54,   119,   184,   120,     0,    25,
   119,   184,   120,     0,    69,   119,   184,   120,     0,    26,
   119,   118,   120,     0,    70,   119,   118,   120,     0,   101,
   119,   183,   120,     0,   106,   119,   183,   120,     0,    45,
   119,   186,   120,     0,   103,   119,   183,   120,     0,    55,
   119,   117,   120,     0,   102,   119,   185,   120,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   259,   262,   263,   265,   270,   272,   275,   277,   279,   281,
   283,   285,   291,   293,   295,   300,   302,   310,   316,   318,
   320,   322,   324,   330,   332,   335,   338,   342,   344,   347,
   355,   362,   364,   366,   373,   384,   386,   389,   393,   395,
   398,   404,   406,   409,   412,   418,   419,   421,   423,   425,
   432,   436,   438,   440,   442,   445,   447,   449,   453,   455,
   458,   461,   463,   467,   469,   473,   475,   478,   481,   487,
   489,   492,   498,   503,   508,   513,   518,   524,   530,   535,
   544,   546,   549,   553,   555,   557,   559,   561,   563,   566,
   568,   569,   570,   575,   577,   580,   583,   585,   587,   593,
   595,   598,   605,   606,   608,   610,   612,   619,   621,   623,
   626,   628,   630,   632,   636,   638,   641,   643,   645,   647,
   649,   651,   657,   659,   662,   665,   667,   671,   673,   676,
   683,   685,   688,   691,   693,   695,   697,   705,   707,   710,
   715,   717,   720,   725,   727,   730,   733,   735,   737,   741,
   743,   746,   748,   749,   750,   751,   753,   754,   759,   761,
   764,   767,   769,   771,   785,   788,   792,   795,   800,   803,
   805,   810,   816,   822,   826,   830,   836,   844,   849,   855,
   857,   859,   862,   865,   867,   869,   871,   873,   875,   877,
   879,   883,   885,   889,   897,   899,   901,   904,   910,   918,
   920,   923,   926,   928,   933,   938,   939,   941,   943,   945,
   947,   949,   951,   953,   963,   965,   969,   971,   975,   977,
   981,   983,   988,   990,   993,   996,   998,  1000,  1002,  1004,
  1006,  1008,  1013,  1015,  1018,  1024,  1029,  1034,  1039,  1044,
  1050,  1056,  1061,  1066,  1071
};
#endif

#define YYNTOKENS 124
#define YYNNTS 83
#define YYNRULES 245
#define YYNSTATES 693
#define YYMAXUTOK 374

static const char * const yytname[] = {   "$","error","$undefined.","KW_ACTION",
"KW_ADD","KW_ALPHA","KW_ATTENUATION","KW_BEZIER","KW_CAMERA","KW_CENTER","KW_CIRCLE",
"KW_CLIP","KW_COLLECTION","KW_COLOR","KW_COLORS","KW_CONVEX","KW_COPY","KW_CURVECENTER",
"KW_CURVECONTROL","KW_CURVESCALE","KW_DETAIL","KW_DITHER","KW_DYNAMIC","KW_F",
"KW_FILE","KW_FIRST","KW_FIRST_LEN","KW_FLATCOL","KW_FOG","KW_FOR_2D","KW_FOR_3D",
"KW_FORWARD","KW_FRAME","KW_GOURAUD","KW_HALO","KW_HEIGHTMAP","KW_IDENTITY",
"KW_KEY","KW_KEYCOLOR","KW_LEN","KW_LIBRARY","KW_LIGHT","KW_LIGHTING","KW_LIMB",
"KW_MATERIAL","KW_MATRIX","KW_MIPMAP","KW_MIRROR","KW_MIXMODE","KW_MOVE","KW_MOVEABLE",
"KW_MULTIPLY","KW_MULTIPLY2","KW_NODE","KW_ORIG","KW_PLANE","KW_POLYGON","KW_PORTAL",
"KW_POSITION","KW_RADIUS","KW_ROT","KW_ROT_X","KW_ROT_Y","KW_ROT_Z","KW_SCALE",
"KW_SCALE_X","KW_SCALE_Y","KW_SCALE_Z","KW_SCRIPT","KW_SECOND","KW_SECOND_LEN",
"KW_SECTOR","KW_SKELETON","KW_SKYDOME","KW_SOUND","KW_SOUNDS","KW_SPRITE","KW_SPRITE2D",
"KW_START","KW_STATBSP","KW_STATIC","KW_TEMPLATE","KW_TERRAIN","KW_TEX","KW_TEXLEN",
"KW_TEXMAP","KW_TEXNR","KW_TEXTURE","KW_TEXTURES","KW_TEXTURE_LIGHTING","KW_TEXTURE_MIPMAP",
"KW_TEXTURE_SCALE","KW_TEX_SET","KW_TEX_SET_SELECT","KW_THING","KW_TRANSFORM",
"KW_TRANSPARENT","KW_TRIANGLE","KW_UPWARD","KW_UV","KW_UVA","KW_UVEC","KW_UV_SHIFT",
"KW_V","KW_VERTEX","KW_VERTICES","KW_VVEC","KW_W","KW_WORLD","KW_ZFILL","KW_yes",
"KW_no","KW_none","KW_linear","KW_inverse","KW_realistic","PARSER_VERSION","STRING",
"NUMBER","'('","')'","','","':'","\"unused\"","input","@1","@2","world_ops",
"world_op","@3","@4","@5","@6","textures","texture","@7","texture_ops","texture_op",
"sounds","sound","sound_ops","sound_op","sector_ops","sector_op","@8","@9","skydome_ops",
"skydome_op","vertex_indices","node_ops","node_op","plane_ops","plane_op","light_ops",
"light_op","attenuation_op","collection_ops","collection_op","thing_tpl_ops",
"thing_tpl_op","@10","thing_ops","thing_op","bezier_ops","bezier_op","bezier_texture_ops",
"bezier_texture_op","sprite_tpl_ops","sprite_tpl_op","sprite_verts","sprite_vert",
"sprite_actions","sprite_action","sprite_ops","sprite_op","mixmode_ops","mixmode_op",
"camera_ops","camera_op","name","yesno","yesno_onearg","color","vector","vect_idx",
"vector2","matrix","@11","matrix_ops","matrix_op","noargs","move","@12","move_ops",
"move_op","polygon_ops","polygon_op","@13","@14","colors","polygon_vertex_indices",
"tex_coordinates","uva_coordinates","portal_ops","portal_op","polygon_texture_ops",
"polygon_texture_op", NULL
};
static const short yytoknum[] = { 0,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
   366,   367,   368,   369,   370,   371,   372,   373,    40,    41,
    44,    58,   374,     0
};

static const short yyr1[] = {     0,
   125,   124,   126,   124,   127,   127,   128,   129,   128,   128,
   128,   128,   130,   128,   131,   128,   132,   128,   128,   128,
   128,   128,   128,   133,   133,   135,   134,   136,   136,   137,
   137,   137,   137,   137,   137,   138,   138,   139,   140,   140,
   141,   142,   142,   143,   144,   143,   143,   143,   143,   145,
   143,   143,   143,   143,   143,   143,   143,   143,   146,   146,
   147,   147,   147,   148,   148,   149,   149,   150,   150,   151,
   151,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   153,   153,   154,   154,   154,   154,   154,   154,   154,   155,
   155,   155,   155,   156,   156,   157,   157,   157,   157,   158,
   158,   160,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   161,   161,   162,   162,   162,   162,
   162,   162,   163,   163,   164,   164,   164,   165,   165,   166,
   167,   167,   168,   168,   168,   168,   168,   169,   169,   170,
   171,   171,   172,   173,   173,   174,   174,   174,   174,   175,
   175,   176,   176,   176,   176,   176,   176,   176,   177,   177,
   178,   178,   178,   178,   179,   179,   180,   180,   181,   181,
   181,   182,   183,   184,   184,   185,   186,   186,   187,   186,
   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   190,   190,   192,   191,   193,   193,   194,   194,   195,
   195,   196,   196,   197,   196,   196,   196,   196,   196,   196,
   196,   196,   198,   196,   199,   199,   200,   200,   201,   201,
   202,   202,   203,   203,   204,   204,   204,   204,   204,   204,
   204,   204,   205,   205,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206
};

static const short yyr2[] = {     0,
     0,     6,     0,     6,     0,     2,     4,     0,     6,     4,
     4,     6,     0,     6,     0,     6,     0,     6,     5,     5,
     7,     5,     5,     0,     2,     0,     6,     0,     2,     2,
     2,     4,     4,     2,     2,     0,     2,     5,     0,     2,
     4,     1,     2,     4,     0,     6,     4,     4,     2,     0,
     6,     5,     5,     5,     7,     4,     5,     4,     1,     2,
     4,     4,     2,     0,     2,     1,     2,     4,     6,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     1,     2,     5,     4,     4,     2,     4,     5,     4,     1,
     1,     1,     1,     1,     2,     4,     4,     6,     4,     1,
     2,     0,     6,     4,     4,     4,     4,     5,     2,     7,
     5,     4,     4,     6,     1,     2,     1,     6,     4,     2,
     4,     4,     1,     2,     4,     4,     4,     1,     2,     1,
     1,     2,     4,     5,     5,     6,     4,     0,     2,     6,
     0,     2,     6,     1,     2,     4,     6,     4,     4,     1,
     2,     2,     2,     2,     2,     4,     2,     2,     0,     2,
     4,     4,     4,     4,     0,     1,     1,     1,     0,     2,
     3,     3,     3,     1,     1,     2,     9,     1,     0,     2,
     1,     2,     2,     4,     4,     4,     4,     6,     4,     4,
     4,     0,     2,     0,     2,     1,     2,     4,     4,     1,
     2,     4,     2,     0,     5,     4,     2,     4,     4,     4,
     4,     4,     0,     5,     0,     2,     0,     2,     0,     3,
     0,     4,     1,     2,     4,     4,     4,     4,     2,     2,
     2,     2,     1,     2,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4
};

static const short yydefact[] = {     0,
   165,   165,   166,     0,     0,     3,     1,     5,     5,     0,
     0,   165,   165,     0,     0,   165,   165,   165,     0,   165,
     0,     0,   165,   165,     4,     6,     2,     0,     0,     0,
     0,     0,     0,     0,    36,     0,     0,    24,     0,     0,
    13,     0,     0,     0,    15,     0,    17,     0,     0,     0,
     0,     8,     0,   159,     0,     0,     0,     0,     0,    94,
     0,    10,     0,     0,     0,   165,    11,    37,   165,     0,
   165,     0,     0,     0,   131,     0,   165,     7,    25,    24,
   165,     0,   169,     0,     0,     0,     0,     0,   165,     0,
     0,     0,     0,   100,     0,     0,     0,     0,     0,    20,
    95,    19,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    70,     0,     0,     0,     0,   165,     0,   165,
     0,   165,   169,     0,     0,   165,     0,     0,    42,     0,
     0,     0,     0,     0,     0,    23,   132,     0,     0,     0,
     0,     0,     0,     0,   109,     0,     0,     0,     0,   194,
     0,     0,     0,     0,    22,   101,     0,     0,     0,     0,
    14,   160,     0,     0,     0,     0,     0,     0,   179,     0,
     0,     0,     0,     0,     0,    16,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    49,     0,     0,     0,
     0,    18,    43,    39,   141,     0,   138,     0,     0,     0,
    12,    26,     9,     0,     0,   167,   168,   170,     0,     0,
     0,     0,     0,     0,     0,     0,   102,     0,     0,     0,
     0,     0,     0,     0,    97,     0,    99,    96,   174,   175,
     0,     0,   178,     0,     0,     0,     0,     0,     0,     0,
     0,    21,     0,     0,     0,     0,     0,     0,     0,    66,
    45,   169,     0,     0,     0,    59,     0,     0,     0,    50,
     0,     0,     0,   137,     0,   133,     0,   173,    28,     0,
     0,     0,     0,   123,     0,   171,   112,     0,   113,     0,
     0,   107,     0,     0,   195,   196,     0,   106,   105,   104,
     0,     0,     0,     0,     0,    73,    75,     0,    79,   192,
     0,     0,     0,     0,     0,     0,     0,   180,   181,    72,
    74,    76,    77,    80,    78,     0,     0,     0,     0,     0,
     0,   169,     0,     0,     0,    81,     0,     0,     0,    58,
    67,     0,    63,     0,    64,    56,    60,     0,     0,     0,
     0,     0,   144,    48,    47,     0,    44,     0,    38,    40,
     0,   135,   142,     0,   134,   139,     0,     0,     0,     0,
    64,   111,   124,     0,     0,     0,   172,   108,   179,     0,
   197,     0,     0,     0,   169,   169,     0,     0,     0,     0,
     0,     0,     0,   200,   162,   161,   164,   163,    98,     0,
     0,   183,     0,     0,     0,     0,     0,     0,     0,   182,
     0,    54,    57,     0,     0,     0,    86,     0,     0,    52,
    82,     0,     0,     0,     0,     0,     0,     0,   194,     0,
     0,    53,   145,     0,     0,   169,     0,     0,   117,     0,
   115,     0,     0,     0,   136,   169,     0,   169,   169,   169,
     0,    27,    29,     0,   130,     0,   128,     0,     0,   176,
   114,     0,     0,     0,   215,     0,   207,   203,   213,   204,
     0,   219,   221,   217,   103,   201,     0,   193,     0,     0,
     0,     0,     0,     0,     0,     0,    90,    91,    92,    93,
     0,     0,     0,     0,     0,     0,     0,    68,    46,    61,
    65,    62,   192,     0,   192,   192,   192,   192,   192,     0,
   150,     0,     0,     0,     0,     0,   120,     0,     0,    51,
   116,     0,     0,     0,    31,     0,    35,    34,    30,     0,
   125,   126,   129,   127,   110,   198,   199,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   184,   185,   186,
     0,   187,   189,   190,   191,    55,    89,    84,    87,     0,
    85,     0,     0,   155,     0,   152,   158,   153,   154,   157,
   149,   151,   146,     0,   148,     0,     0,     0,     0,    41,
     0,     0,     0,     0,   209,   212,   216,   208,   169,     0,
   169,     0,   169,     0,     0,   169,     0,   223,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   233,   202,     0,   210,     0,   211,   218,   206,     0,     0,
    88,    83,    69,     0,     0,   122,     0,   119,   121,     0,
     0,    32,    33,   231,   179,   229,     0,   230,     0,     0,
   232,   214,   224,     0,     0,   179,     0,     0,     0,     0,
     0,     0,     0,     0,   205,   234,   220,     0,     0,   188,
   156,   147,     0,   143,   140,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   222,     0,   118,   226,   225,   227,   228,   236,   238,   242,
   235,   244,   237,   239,   240,   245,   243,   241,   177,     0,
     0,     0
};

static const short yydefgoto[] = {   690,
     9,     8,    10,    26,    80,    54,    63,    65,    51,    79,
   269,   358,   443,    48,    68,   262,   350,   128,   129,   332,
   346,   255,   256,   417,   249,   250,   112,   113,   325,   326,
   481,    59,    60,    93,   429,   287,   430,   431,   273,   274,
   446,   447,    74,    75,   265,   356,   263,   353,   342,   343,
   500,   501,    95,   162,     4,   209,   145,   214,   230,   231,
   366,   234,   235,   308,   309,   392,   215,   216,   285,   286,
   383,   384,   532,   531,   529,   536,   534,   535,   587,   588,
   600,   601
};

static const short yypact[] = {   -32,
   -98,   -98,-32768,   -94,   -77,-32768,-32768,-32768,-32768,   271,
   301,   -98,   -98,   -68,   -55,   -98,   -98,   -98,   -46,   -98,
   -40,    -3,   -98,   -98,-32768,-32768,-32768,    -2,    22,    33,
    13,    36,    52,    58,-32768,    63,    66,-32768,    69,    74,
-32768,   135,    90,    88,-32768,    97,-32768,   -60,   202,    94,
   -67,-32768,   472,-32768,   105,   109,   114,   118,    49,-32768,
   126,-32768,   501,   125,   504,   -98,-32768,-32768,   -98,   132,
   -98,   144,   154,     8,-32768,   159,   -98,-32768,-32768,-32768,
   -98,   162,   163,   166,   167,   171,   172,   176,   -98,   182,
   186,   196,   203,-32768,    91,   161,   200,   205,   207,-32768,
-32768,-32768,   206,   208,   211,   213,   215,   216,   224,   226,
   233,   267,-32768,   237,   236,   241,   244,   -98,   243,   -98,
   245,   -98,   163,   252,   259,   -98,   261,   347,-32768,   262,
   263,   249,   266,   269,   272,-32768,-32768,   274,   276,   275,
   -51,   278,   159,   -48,-32768,   159,   159,   280,   281,-32768,
   282,   284,   287,   159,-32768,-32768,   286,   288,   289,   290,
-32768,-32768,   291,   292,   294,   295,   298,   299,   300,   298,
   298,   304,   159,   159,   159,-32768,-32768,   305,   159,   281,
   310,   311,     7,   315,   133,   317,-32768,   306,   302,   318,
   159,-32768,-32768,-32768,-32768,   319,-32768,   325,   320,   328,
-32768,-32768,-32768,    86,   326,-32768,-32768,-32768,   330,   332,
   333,   334,   340,   342,   344,   -29,-32768,   349,   353,   356,
   159,   159,   360,   159,-32768,   362,-32768,-32768,   274,-32768,
   358,   363,   366,   365,   548,   368,   372,   373,   374,   375,
   376,-32768,   364,   379,   381,    32,   380,   382,   -11,-32768,
-32768,   163,   383,   388,    92,-32768,   146,   390,   392,-32768,
   393,   -18,   -16,-32768,   -81,-32768,   397,-32768,-32768,   398,
   404,   405,   130,-32768,   159,-32768,-32768,   407,-32768,   412,
   396,-32768,   414,   415,   -29,-32768,    79,-32768,-32768,-32768,
   411,   416,   417,   418,   420,-32768,-32768,   424,-32768,   428,
   431,   432,   433,   440,   442,   443,   447,   548,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   159,   423,   449,   453,   454,
   455,   163,   456,   459,    24,-32768,   413,   427,   159,-32768,
-32768,    79,-32768,   461,-32768,-32768,-32768,   462,   463,   466,
   467,   -31,-32768,-32768,-32768,   425,-32768,   468,-32768,-32768,
   470,-32768,-32768,   473,-32768,-32768,   471,    89,   476,   478,
-32768,-32768,-32768,   481,   485,   474,-32768,-32768,   300,   159,
-32768,   486,   487,   497,   163,   163,   498,   499,   500,   502,
   503,   505,    54,-32768,-32768,-32768,-32768,-32768,-32768,   507,
   506,-32768,   509,   510,   511,   512,   513,   514,   515,-32768,
   516,-32768,-32768,   155,   159,   281,-32768,   517,   518,-32768,
-32768,   519,   520,   522,    81,   523,     6,   152,-32768,   521,
   527,-32768,-32768,   526,   528,   163,   529,   530,-32768,   247,
-32768,   533,   534,   159,-32768,   163,   535,   163,   163,   163,
   536,-32768,-32768,   532,-32768,   -72,-32768,    40,   537,-32768,
-32768,   538,   539,   542,-32768,   281,-32768,-32768,-32768,-32768,
   544,-32768,-32768,-32768,-32768,-32768,   545,-32768,   546,   547,
   549,    80,   550,   551,   552,   553,-32768,-32768,-32768,-32768,
   554,   555,   556,   559,   558,   281,   562,-32768,-32768,-32768,
-32768,-32768,   428,   543,   428,   428,   428,   428,   428,     5,
-32768,   560,   525,   561,   565,   566,-32768,   567,   568,-32768,
-32768,   569,   570,   531,-32768,   571,-32768,-32768,-32768,   281,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   572,   140,   573,
   303,   494,   574,   156,   180,   184,   577,-32768,-32768,-32768,
   578,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   579,
-32768,   580,   581,-32768,   582,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   585,-32768,   583,   576,   584,   586,-32768,
   587,   407,   588,   589,-32768,-32768,-32768,-32768,   163,   591,
   163,   592,   163,   593,   594,   163,   116,-32768,   595,   596,
   597,   598,   599,   600,   601,   602,   603,   604,   605,   402,
-32768,-32768,   607,-32768,   608,-32768,-32768,-32768,   609,   610,
-32768,-32768,-32768,   611,   612,-32768,   590,-32768,-32768,   613,
   614,-32768,-32768,-32768,   300,-32768,   618,-32768,   159,   159,
-32768,-32768,-32768,   298,   619,   300,   298,   621,   298,   622,
   159,   407,   159,   159,-32768,-32768,-32768,   623,   624,-32768,
-32768,-32768,   616,-32768,-32768,   625,   626,   627,   628,   629,
   630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
-32768,   642,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   620,
   640,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   647,-32768,-32768,-32768,-32768,-32768,   606,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   495,-32768,
-32768,-32768,   384,   307,-32768,   438,-32768,   617,-32768,   339,
-32768,-32768,   669,-32768,   -41,-32768,-32768,   235,-32768,   488,
-32768,   293,-32768,   670,-32768,-32768,-32768,-32768,-32768,   348,
-32768,   264,-32768,-32768,    11,-32768,  -120,  -176,   -76,  -169,
  -557,  -364,-32768,-32768,   435,  -254,   343,-32768,-32768,   480,
   434,  -308,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   181,
-32768,   169
};


#define	YYLAST		769


static const short yytable[] = {   139,
   236,   237,   187,   244,   452,   348,   351,     1,   493,   494,
    69,    94,     5,    66,   621,   283,   338,   339,     3,    77,
   495,   354,    28,    29,     6,   247,    32,    33,    34,   319,
    36,    70,   320,    39,    40,    77,   321,   319,   355,    71,
   320,     7,   496,   247,   321,   322,   248,   522,    30,   340,
   445,   156,    78,   322,   341,   497,   498,   323,   372,    67,
    55,   206,   207,    31,   248,   323,   205,   373,   203,   210,
   211,   208,    35,   284,   466,     2,   130,   220,    37,   131,
   374,   133,   324,   372,   668,   372,   375,   140,   422,    56,
   324,   142,   373,    72,   373,   376,   239,   240,   241,   151,
   499,   349,   243,   352,    73,   374,   466,   374,   330,   436,
   377,   375,   437,   375,   261,    38,    41,   438,   439,    57,
   376,   157,   376,   491,   561,   492,   579,   136,   182,    44,
   184,   333,   186,   252,   440,   377,   190,   377,   378,   379,
    42,   138,    58,   410,   291,   292,    55,   294,   158,   138,
   253,    43,   380,   381,    45,   493,   494,   491,   382,   524,
   580,   159,   581,   378,   379,   378,   379,   495,   100,   327,
    46,   270,   271,   465,   252,    56,    47,   380,   381,   380,
   381,    49,    50,   382,   441,   382,   582,    52,   160,   496,
   272,   253,    53,   338,   339,   583,   254,   541,   364,   542,
   489,   407,   497,   498,    69,    57,    61,    62,   442,    81,
   161,   336,    82,    64,    76,   270,   271,    83,   584,    84,
    85,    86,   585,    96,   586,    70,   340,    97,    58,   483,
    87,   341,    98,    71,   272,   632,    99,   254,   554,   401,
   556,   557,   558,   559,   560,   102,   114,   499,   327,   362,
   132,    88,   414,    81,   457,   458,    82,   213,    89,   576,
   656,    83,   134,    84,    85,    86,   477,   478,   479,   480,
   424,   662,   135,   603,    87,   604,   138,   163,    12,   530,
   143,   144,    13,   425,   146,   147,    90,    72,    91,   148,
   149,   103,   104,   453,   150,    88,   426,   605,    73,   606,
   152,   607,    89,   608,   153,   507,    92,    14,    12,   552,
    15,   105,    13,   579,   154,   515,   164,   517,   518,   519,
   106,   165,   155,   166,   167,    16,   168,   427,   482,   169,
    90,   170,    91,   171,   172,   107,   108,    14,    17,   428,
    15,    18,   173,   574,   174,    19,    20,   580,    21,   581,
    92,   175,   577,   178,   179,    16,   115,   514,    22,   180,
   181,   183,    23,   185,    24,   196,   510,   109,    17,   110,
   188,    18,   111,   582,   116,    19,    20,   189,    21,   191,
   194,   195,   583,   117,   197,   198,   176,   118,    22,   199,
    25,   200,    23,   202,    24,   201,   204,   212,   213,   119,
   217,   218,   120,   219,   221,   584,   222,   223,   224,   585,
   225,   586,   226,   227,   228,   229,   232,   233,   259,   121,
    27,   238,   122,   258,   242,   123,   589,   590,   245,   246,
   124,    81,   125,   251,    82,   257,   260,   267,   264,    83,
   126,    84,    85,    86,   266,   268,   591,   275,   424,   276,
   127,   277,    87,   279,   278,   592,   593,   280,   624,   281,
   626,   425,   628,   282,   660,   631,   192,   663,   288,   665,
   594,   595,   289,    88,   426,   290,   293,   296,    81,   295,
    89,    82,   297,   298,   299,   316,    83,   310,    84,    85,
    86,   311,   312,   313,   314,   315,   317,   318,   328,    87,
   329,   334,   596,   597,   598,   427,   335,   599,    90,   344,
    91,   345,   347,   115,   357,   368,   359,   428,   589,   590,
    88,   645,   360,   361,   365,   103,   104,    89,    92,   367,
   385,   116,   369,   370,   412,   386,   387,   388,   591,   389,
   117,   390,   402,   413,   118,   105,   391,   592,   593,   393,
   394,   395,   658,   659,   106,    90,   119,    91,   396,   120,
   397,   398,   594,   595,   667,   399,   669,   670,   403,   107,
   108,   404,   405,   406,   408,    92,   121,   409,   416,   122,
   418,   419,   123,   300,   420,   421,   432,   124,   433,   125,
   435,   434,   444,   451,   596,   597,   598,   126,   449,   599,
   445,   109,   450,   110,   454,   455,   111,   127,   301,   302,
   303,   304,   305,   306,   307,   456,   459,   460,   461,   691,
   462,   463,   193,   464,   467,   468,   469,   470,   471,   472,
   473,   474,   475,   476,   484,   485,   486,   503,   337,   692,
   487,   488,   490,   504,   505,   564,   506,   508,   509,   512,
   513,   521,   572,   516,   520,    11,   525,   526,   527,   528,
   533,   555,   537,   411,   511,   538,   539,   448,   540,   543,
   544,   545,   546,   547,   548,   549,   550,   551,   553,   563,
   565,   566,   567,   568,   569,   141,   331,   573,   570,   423,
   571,   575,   578,   602,   609,   610,   617,   612,   611,   614,
   613,   615,   616,   618,   620,   619,   653,   622,   623,   625,
   627,   629,   630,   634,   635,   636,   637,   638,   639,   640,
   641,   642,   643,   644,   647,   648,   649,   101,   177,   650,
   651,   652,   654,   655,   657,   673,   661,   664,   523,   666,
   671,   672,   400,   137,   674,   675,   676,   677,   678,   679,
   680,   681,   682,   683,   684,   685,   686,   687,   688,   689,
   363,   502,     0,   562,   371,   415,     0,   633,   646
};

static const short yycheck[] = {    76,
   170,   171,   123,   180,   369,    24,    23,    40,     4,     5,
     3,    53,     2,    74,   572,    45,    48,    49,   117,    87,
    16,   103,    12,    13,   119,    37,    16,    17,    18,     6,
    20,    24,     9,    23,    24,    87,    13,     6,   120,    32,
     9,   119,    38,    37,    13,    22,    58,   120,   117,    81,
   123,    93,   120,    22,    86,    51,    52,    34,     5,   120,
    12,   110,   111,   119,    58,    34,   143,    14,   120,   146,
   147,   120,   119,   103,   383,   108,    66,   154,   119,    69,
    27,    71,    59,     5,   642,     5,    33,    77,   120,    41,
    59,    81,    14,    86,    14,    42,   173,   174,   175,    89,
    96,   120,   179,   120,    97,    27,   415,    27,   120,    21,
    57,    33,    24,    33,   191,   119,   119,    29,    30,    71,
    42,    31,    42,   118,   120,   120,    11,   120,   118,   117,
   120,   252,   122,    42,    46,    57,   126,    57,    85,    86,
   119,   118,    94,   120,   221,   222,    12,   224,    58,   118,
    59,   119,    99,   100,   119,     4,     5,   118,   105,   120,
    45,    71,    47,    85,    86,    85,    86,    16,   120,   246,
   119,    86,    87,   120,    42,    41,   119,    99,   100,    99,
   100,   119,   117,   105,    96,   105,    71,   119,    98,    38,
   105,    59,   119,    48,    49,    80,   105,   118,   275,   120,
   120,   322,    51,    52,     3,    71,   117,   120,   120,     7,
   120,   120,    10,   117,   121,    86,    87,    15,   103,    17,
    18,    19,   107,   119,   109,    24,    81,   119,    94,   406,
    28,    86,   119,    32,   105,   120,   119,   105,   493,   316,
   495,   496,   497,   498,   499,   120,   122,    96,   325,   120,
   119,    49,   329,     7,   375,   376,    10,   118,    56,   120,
   625,    15,   119,    17,    18,    19,   112,   113,   114,   115,
    24,   636,   119,   118,    28,   120,   118,   117,     8,   456,
   119,   119,    12,    37,   119,   119,    84,    86,    86,   119,
   119,    25,    26,   370,   119,    49,    50,   118,    97,   120,
   119,   118,    56,   120,   119,   426,   104,    37,     8,   486,
    40,    45,    12,    11,   119,   436,   117,   438,   439,   440,
    54,   117,   120,   117,   119,    55,   119,    81,   405,   119,
    84,   119,    86,   119,   119,    69,    70,    37,    68,    93,
    40,    71,   119,   520,   119,    75,    76,    45,    78,    47,
   104,   119,   529,   117,   119,    55,    10,   434,    88,   119,
   117,   119,    92,   119,    94,   117,   120,   101,    68,   103,
   119,    71,   106,    71,    28,    75,    76,   119,    78,   119,
   119,   119,    80,    37,   119,   117,   120,    41,    88,   118,
   120,   118,    92,   119,    94,   120,   119,   118,   118,    53,
   119,   118,    56,   117,   119,   103,   119,   119,   119,   107,
   120,   109,   121,   120,   120,   118,   118,   118,   117,    73,
   120,   118,    76,   118,   120,    79,    25,    26,   119,   119,
    84,     7,    86,   119,    10,   119,   119,   118,   120,    15,
    94,    17,    18,    19,   120,   118,    45,   122,    24,   120,
   104,   120,    28,   120,   122,    54,    55,   118,   579,   118,
   581,    37,   583,   120,   634,   586,   120,   637,   120,   639,
    69,    70,   120,    49,    50,   120,   117,   120,     7,   118,
    56,    10,   120,   118,   120,   122,    15,   120,    17,    18,
    19,   120,   120,   120,   120,   120,   118,   117,   119,    28,
   119,   119,   101,   102,   103,    81,   119,   106,    84,   120,
    86,   120,   120,    10,   118,   120,   119,    93,    25,    26,
    49,   120,   119,   119,   118,    25,    26,    56,   104,   118,
   120,    28,   119,   119,   122,   120,   120,   120,    45,   120,
    37,   118,   120,   117,    41,    45,   119,    54,    55,   119,
   119,   119,   629,   630,    54,    84,    53,    86,   119,    56,
   119,   119,    69,    70,   641,   119,   643,   644,   120,    69,
    70,   119,   119,   119,   119,   104,    73,   119,   118,    76,
   119,   119,    79,    36,   119,   119,   119,    84,   119,    86,
   120,   119,   117,   120,   101,   102,   103,    94,   118,   106,
   123,   101,   118,   103,   119,   119,   106,   104,    61,    62,
    63,    64,    65,    66,    67,   119,   119,   119,   119,     0,
   119,   119,   128,   119,   118,   120,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   117,   255,     0,
   121,   120,   120,   117,   119,   121,   119,   119,   119,   117,
   117,   120,   122,   119,   119,     9,   120,   120,   120,   118,
   117,   119,   118,   325,   430,   120,   120,   361,   120,   120,
   120,   120,   120,   120,   120,   120,   118,   120,   117,   120,
   120,   117,   117,   117,   117,    80,   249,   117,   120,   342,
   121,   120,   120,   120,   118,   118,   121,   118,   120,   118,
   120,   117,   120,   120,   118,   120,   117,   120,   120,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   118,   118,   118,    59,   112,   120,
   120,   120,   120,   120,   117,   120,   118,   117,   446,   118,
   118,   118,   308,    74,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   118,
   273,   419,    -1,   500,   285,   332,    -1,   587,   600
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/*
   This file is almost identical to bison.simple except that it has some
   compilation warnings removed and also some K&R C-style things are removed
   to be able to use yyparse() as a class member function plus some support
   for better syntax error reporting.
*/

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/
  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 261 "plugins/csstdldr/stdparse.y"
{ world->SelectLibrary (storage.cur_library = yyvsp[-1].string); ;
    break;}
case 3:
#line 264 "plugins/csstdldr/stdparse.y"
{ world->SelectLibrary (storage.cur_library = yyvsp[-1].string); ;
    break;}
case 8:
#line 278 "plugins/csstdldr/stdparse.y"
{ storage.tex_prefix = yyvsp[-1].string; ;
    break;}
case 9:
#line 280 "plugins/csstdldr/stdparse.y"
{ storage.tex_prefix = NULL; ;
    break;}
case 10:
#line 282 "plugins/csstdldr/stdparse.y"
{ if (!RecursiveLoad (yyvsp[-1].string)) YYABORT; ;
    break;}
case 11:
#line 284 "plugins/csstdldr/stdparse.y"
{ printf ("SOUNDS\n"); ;
    break;}
case 12:
#line 286 "plugins/csstdldr/stdparse.y"
{
    if (!world->CreateCamera ("Start", yyvsp[-3].string,
      (csVector3 &)yyvsp[-1].vect, csVector3 (0, 0, 1), csVector3 (0, 1, 0)))
      YYABORT;
  ;
    break;}
case 13:
#line 292 "plugins/csstdldr/stdparse.y"
{ InitCamera (yyvsp[-1].string); ;
    break;}
case 14:
#line 294 "plugins/csstdldr/stdparse.y"
{ if (!CreateCamera ()) YYABORT; ;
    break;}
case 15:
#line 296 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode = pmNONE;
    polygon.first_len = polygon.second_len = 0.0;
  ;
    break;}
case 16:
#line 301 "plugins/csstdldr/stdparse.y"
{ if (!CreatePlane (yyvsp[-4].string)) YYABORT; ;
    break;}
case 17:
#line 303 "plugins/csstdldr/stdparse.y"
{
    SECTOR.object = world->CreateSector (yyvsp[-1].string);
    SECTOR.polyset = QUERY_INTERFACE (SECTOR.object, iPolygonSet);
    SECTOR.texname = NULL;
    SECTOR.texlen = 1.0;
    SECTOR.statbsp = false;
  ;
    break;}
case 18:
#line 311 "plugins/csstdldr/stdparse.y"
{
    SECTOR.polyset->CompressVertices ();
    if (SECTOR.statbsp) SECTOR.object->CreateBSP ();
    SECTOR.polyset->DecRef ();
  ;
    break;}
case 19:
#line 317 "plugins/csstdldr/stdparse.y"
{ if (!world->CreateKey (yyvsp[-3].string, yyvsp[-1].string)) ABORTMSG; ;
    break;}
case 20:
#line 319 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION [%s]\n", yyvsp[-3].string); ;
    break;}
case 21:
#line 321 "plugins/csstdldr/stdparse.y"
{ printf ("SCRIPT '%s' (%s: %s)\n", yyvsp[-5].string, yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 22:
#line 323 "plugins/csstdldr/stdparse.y"
{ printf ("THING_tpl [%s]\n", yyvsp[-3].string); ;
    break;}
case 23:
#line 325 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE [%s]\n", yyvsp[-3].string); ;
    break;}
case 26:
#line 337 "plugins/csstdldr/stdparse.y"
{ InitTexture (yyvsp[-1].string); ;
    break;}
case 27:
#line 339 "plugins/csstdldr/stdparse.y"
{ if (!CreateTexture ()) ABORTMSG; ;
    break;}
case 30:
#line 349 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[0].ival)
      TEX.flags = (TEX.flags & ~CS_TEXTURE_NOMIPMAPS);
    else
      TEX.flags |= CS_TEXTURE_NOMIPMAPS;
  ;
    break;}
case 31:
#line 356 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[0].ival)
      TEX.flags |= CS_TEXTURE_DITHER;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_DITHER);
  ;
    break;}
case 32:
#line 363 "plugins/csstdldr/stdparse.y"
{ TEX.filename = yyvsp[-1].string; ;
    break;}
case 33:
#line 365 "plugins/csstdldr/stdparse.y"
{ TEX.transp = yyvsp[-1].color; TEX.do_transp = true; ;
    break;}
case 34:
#line 367 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[0].ival)
      TEX.flags |= CS_TEXTURE_3D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_3D);
  ;
    break;}
case 35:
#line 374 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[0].ival)
      TEX.flags |= CS_TEXTURE_2D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_2D);
  ;
    break;}
case 41:
#line 399 "plugins/csstdldr/stdparse.y"
{ printf ("FILE (%s)\n", yyvsp[-1].string); ;
    break;}
case 44:
#line 411 "plugins/csstdldr/stdparse.y"
{ SECTOR.polyset->CreateVertex (CSVECTOR3 (yyvsp[-1].vect)); ;
    break;}
case 45:
#line 413 "plugins/csstdldr/stdparse.y"
{
    polygon.object = SECTOR.polyset->CreatePolygon (yyvsp[-1].string);
    polygon.texname = SECTOR.texname;
    polygon.texlen = SECTOR.texlen;
  ;
    break;}
case 47:
#line 420 "plugins/csstdldr/stdparse.y"
{ SECTOR.texname = yyvsp[-1].string; ;
    break;}
case 48:
#line 422 "plugins/csstdldr/stdparse.y"
{ SECTOR.texlen = yyvsp[-1].fval; ;
    break;}
case 49:
#line 424 "plugins/csstdldr/stdparse.y"
{ SECTOR.statbsp = yyvsp[0].ival; ;
    break;}
case 50:
#line 426 "plugins/csstdldr/stdparse.y"
{
    thing.object = world->CreateThing (yyvsp[-1].string, SECTOR.object);
    thing.polyset = QUERY_INTERFACE (thing.object, iPolygonSet);
    thing.texname = NULL;
    thing.texlen = 1.0;
  ;
    break;}
case 51:
#line 433 "plugins/csstdldr/stdparse.y"
{
    thing.polyset->DecRef ();
  ;
    break;}
case 52:
#line 437 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 53:
#line 439 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 54:
#line 441 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 55:
#line 444 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 56:
#line 446 "plugins/csstdldr/stdparse.y"
{ printf ("SKYDOME (...)\n"); ;
    break;}
case 57:
#line 448 "plugins/csstdldr/stdparse.y"
{ if (!SECTOR.polyset->CreateKey (yyvsp[-3].string, yyvsp[-1].string)) ABORTMSG; ;
    break;}
case 58:
#line 450 "plugins/csstdldr/stdparse.y"
{ printf ("NODE (...)\n"); ;
    break;}
case 61:
#line 460 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 62:
#line 462 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 63:
#line 464 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[0].ival); ;
    break;}
case 65:
#line 470 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 68:
#line 480 "plugins/csstdldr/stdparse.y"
{ printf ("POSITION (...)\n"); ;
    break;}
case 69:
#line 482 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 72:
#line 494 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmORIGIN;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 73:
#line 499 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.first.Set (yyvsp[-1].vect);
  ;
    break;}
case 74:
#line 504 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.second.Set (yyvsp[-1].vect);
  ;
    break;}
case 75:
#line 509 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.first_len = yyvsp[-1].fval;
  ;
    break;}
case 76:
#line 514 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.second_len = yyvsp[-1].fval;
  ;
    break;}
case 77:
#line 519 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmVECTORS;
    PLANE.first = yyvsp[-1].vect;
    PLANE.first_len = 1.0;
  ;
    break;}
case 78:
#line 525 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmVECTORS;
    PLANE.second = yyvsp[-1].vect;
    PLANE.second_len = 1.0;
  ;
    break;}
case 79:
#line 531 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmMATRIX;
    PLANE.matrix.Set (*yyvsp[-1].matrix);
  ;
    break;}
case 80:
#line 536 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmMATRIX;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 83:
#line 552 "plugins/csstdldr/stdparse.y"
{ printf ("<pos> <radius> <color> <dynamic-flag>\n"); ;
    break;}
case 84:
#line 554 "plugins/csstdldr/stdparse.y"
{ printf ("CENTER (...)\n"); ;
    break;}
case 85:
#line 556 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 86:
#line 558 "plugins/csstdldr/stdparse.y"
{ printf ("DYNAMIC (%d)\n", yyvsp[0].ival); ;
    break;}
case 87:
#line 560 "plugins/csstdldr/stdparse.y"
{ printf ("COLOR ( ... )\n"); ;
    break;}
case 88:
#line 562 "plugins/csstdldr/stdparse.y"
{ printf ("HALO (%g,%g)\n", yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 96:
#line 582 "plugins/csstdldr/stdparse.y"
{ printf ("THING ('%s')\n", yyvsp[-1].string); ;
    break;}
case 97:
#line 584 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION ('%s')\n", yyvsp[-1].string); ;
    break;}
case 98:
#line 586 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT ('%s':%g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 99:
#line 588 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 102:
#line 600 "plugins/csstdldr/stdparse.y"
{
    polygon.object = thing.polyset->CreatePolygon (yyvsp[-1].string);
    polygon.texname = thing.texname;
    polygon.texlen = thing.texlen;
  ;
    break;}
case 104:
#line 607 "plugins/csstdldr/stdparse.y"
{ thing.polyset->CreateVertex (CSVECTOR3 (yyvsp[-1].vect)); ;
    break;}
case 105:
#line 609 "plugins/csstdldr/stdparse.y"
{ thing.texname = yyvsp[-1].string; ;
    break;}
case 106:
#line 611 "plugins/csstdldr/stdparse.y"
{ thing.texlen = yyvsp[-1].fval; ;
    break;}
case 107:
#line 613 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].transform->matrix_valid)
      thing.object->SetTransform (CSMATRIX3 (yyvsp[-1].transform->matrix));
    if (yyvsp[-1].transform->vector_valid)
      thing.object->SetPosition (CSVECTOR3 (yyvsp[-1].transform->vector));
  ;
    break;}
case 108:
#line 620 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 109:
#line 622 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX (%d)\n", yyvsp[0].ival); ;
    break;}
case 110:
#line 625 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 111:
#line 627 "plugins/csstdldr/stdparse.y"
{ printf ("BEZIER '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 112:
#line 629 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECENTER (...)\n"); ;
    break;}
case 113:
#line 631 "plugins/csstdldr/stdparse.y"
{ printf ("CURVESCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 114:
#line 633 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECONTROL (...)\n"); ;
    break;}
case 118:
#line 644 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 119:
#line 646 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 120:
#line 648 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE (%d)\n", yyvsp[0].ival); ;
    break;}
case 121:
#line 650 "plugins/csstdldr/stdparse.y"
{ printf ("TEX_SET_SELECT ('%s')\n", yyvsp[-1].string); ;
    break;}
case 122:
#line 652 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 125:
#line 664 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 126:
#line 666 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 127:
#line 668 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 133:
#line 690 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 134:
#line 692 "plugins/csstdldr/stdparse.y"
{ printf ("FRAME '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 135:
#line 694 "plugins/csstdldr/stdparse.y"
{ printf ("ACTION '%s' ( ... )\n", yyvsp[-3].string); ;
    break;}
case 136:
#line 696 "plugins/csstdldr/stdparse.y"
{ printf ("TRIANGLE (%g,%g,%g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 137:
#line 698 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 140:
#line 712 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g,%g,%g:%g,%g)\n", yyvsp[-3].vect.x, yyvsp[-3].vect.y, yyvsp[-3].vect.z, yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 143:
#line 722 "plugins/csstdldr/stdparse.y"
{ printf ("F ('%s', %g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 146:
#line 732 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 147:
#line 734 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 148:
#line 736 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 149:
#line 738 "plugins/csstdldr/stdparse.y"
{ printf ("MIXMODE (...)\n"); ;
    break;}
case 156:
#line 752 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 161:
#line 766 "plugins/csstdldr/stdparse.y"
{ CAMERA.pos.Set (yyvsp[-1].vect); ;
    break;}
case 162:
#line 768 "plugins/csstdldr/stdparse.y"
{ CAMERA.forward.Set (yyvsp[-1].vect); ;
    break;}
case 163:
#line 770 "plugins/csstdldr/stdparse.y"
{ CAMERA.upward.Set (yyvsp[-1].vect); ;
    break;}
case 164:
#line 772 "plugins/csstdldr/stdparse.y"
{ CAMERA.sector = yyvsp[-1].string;  ;
    break;}
case 165:
#line 787 "plugins/csstdldr/stdparse.y"
{ yyval.string = NULL; ;
    break;}
case 167:
#line 794 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 168:
#line 796 "plugins/csstdldr/stdparse.y"
{ yyval.ival = false; ;
    break;}
case 169:
#line 802 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 170:
#line 804 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 171:
#line 806 "plugins/csstdldr/stdparse.y"
{ yyval.ival = yyvsp[-1].ival; ;
    break;}
case 172:
#line 812 "plugins/csstdldr/stdparse.y"
{ CSCOLOR (yyval.color).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 173:
#line 818 "plugins/csstdldr/stdparse.y"
{ yyval.vect.Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 174:
#line 825 "plugins/csstdldr/stdparse.y"
{ yyval.vect.x = yyval.vect.y = yyval.vect.z = 0; ;
    break;}
case 176:
#line 832 "plugins/csstdldr/stdparse.y"
{ yyval.vect2.Set (yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 177:
#line 840 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Set (yyvsp[-8].fval, yyvsp[-7].fval, yyvsp[-6].fval, yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval);
  ;
    break;}
case 178:
#line 845 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Set (yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval);
  ;
    break;}
case 179:
#line 850 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Identity ();
  ;
    break;}
case 183:
#line 864 "plugins/csstdldr/stdparse.y"
{ storage.matrix2.Identity (); ;
    break;}
case 184:
#line 866 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csXRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 185:
#line 868 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 186:
#line 870 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csZRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 187:
#line 872 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= yyvsp[-1].fval; ;
    break;}
case 188:
#line 874 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csMatrix3 (yyvsp[-3].fval, 0, 0, 0, yyvsp[-2].fval, 0, 0, 0, yyvsp[-1].fval); ;
    break;}
case 189:
#line 876 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csXScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 190:
#line 878 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 191:
#line 880 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 194:
#line 890 "plugins/csstdldr/stdparse.y"
{
    yyval.transform = &storage;
    yyval.transform->matrix.Identity ();
    yyval.transform->matrix_valid = false;
    yyval.transform->vector_valid = false;
  ;
    break;}
case 198:
#line 906 "plugins/csstdldr/stdparse.y"
{
    storage.matrix = *yyvsp[-1].matrix;
    storage.matrix_valid = true;
  ;
    break;}
case 199:
#line 911 "plugins/csstdldr/stdparse.y"
{
    storage.vector = CSVECTOR3 (yyvsp[-1].vect);
    storage.vector_valid = true;
  ;
    break;}
case 202:
#line 925 "plugins/csstdldr/stdparse.y"
{ polygon.texname = yyvsp[-1].string; ;
    break;}
case 203:
#line 927 "plugins/csstdldr/stdparse.y"
{ polygon.object->SetFlags (CS_POLY_LIGHTING, yyvsp[0].ival ? CS_POLY_LIGHTING : 0); ;
    break;}
case 204:
#line 929 "plugins/csstdldr/stdparse.y"
{
    polygon.mode = pmNONE;
    polygon.first_len = polygon.second_len = polygon.texlen;
  ;
    break;}
case 205:
#line 934 "plugins/csstdldr/stdparse.y"
{
    if (!CreateTexturePlane (polygon.object))
      YYABORT;
  ;
    break;}
case 207:
#line 940 "plugins/csstdldr/stdparse.y"
{ polygon.object->SetLightingMode (yyvsp[0].ival); ;
    break;}
case 208:
#line 942 "plugins/csstdldr/stdparse.y"
{ polygon.object->SetFlatColor (CSCOLOR (yyvsp[-1].color)); ;
    break;}
case 209:
#line 944 "plugins/csstdldr/stdparse.y"
{ polygon.object->SetAlpha (yyvsp[-1].fval); ;
    break;}
case 210:
#line 946 "plugins/csstdldr/stdparse.y"
{ printf ("UV (...)\n"); ;
    break;}
case 211:
#line 948 "plugins/csstdldr/stdparse.y"
{ printf ("UVA (...)\n"); ;
    break;}
case 212:
#line 950 "plugins/csstdldr/stdparse.y"
{ printf ("COLORS (...)\n"); ;
    break;}
case 213:
#line 952 "plugins/csstdldr/stdparse.y"
{ portals->Push (polygon.portal = new csPPortal (polygon.object)); ;
    break;}
case 214:
#line 954 "plugins/csstdldr/stdparse.y"
{
    if (!polygon.portal->Check ())
    {
      yyerror ("invalid portal definition");
      YYABORT;
    }
  ;
    break;}
case 216:
#line 966 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 218:
#line 972 "plugins/csstdldr/stdparse.y"
{ polygon.object->CreateVertex (yyvsp[0].fval); ;
    break;}
case 225:
#line 995 "plugins/csstdldr/stdparse.y"
{ polygon.portal->destsec = yyvsp[-1].string; ;
    break;}
case 226:
#line 997 "plugins/csstdldr/stdparse.y"
{ polygon.portal->mode = csPPortal::pmWarp; ;
    break;}
case 227:
#line 999 "plugins/csstdldr/stdparse.y"
{ polygon.portal->mode = csPPortal::pmWarp; ;
    break;}
case 228:
#line 1001 "plugins/csstdldr/stdparse.y"
{ polygon.portal->mode = csPPortal::pmWarp; ;
    break;}
case 229:
#line 1003 "plugins/csstdldr/stdparse.y"
{ polygon.portal->mode = csPPortal::pmMirror; ;
    break;}
case 230:
#line 1005 "plugins/csstdldr/stdparse.y"
{ polygon.portal->SetFlags (CS_PORTAL_STATICDEST, yyvsp[0].ival); ;
    break;}
case 231:
#line 1007 "plugins/csstdldr/stdparse.y"
{ polygon.portal->SetFlags (CS_PORTAL_CLIPDEST, yyvsp[0].ival); ;
    break;}
case 232:
#line 1009 "plugins/csstdldr/stdparse.y"
{ polygon.portal->SetFlags (CS_PORTAL_ZFILL, yyvsp[0].ival); ;
    break;}
case 235:
#line 1020 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmORIGIN;
    polygon.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 236:
#line 1025 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.first.Set (yyvsp[-1].vect);
  ;
    break;}
case 237:
#line 1030 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.second.Set (yyvsp[-1].vect);
  ;
    break;}
case 238:
#line 1035 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.first_len = yyvsp[-1].fval;
  ;
    break;}
case 239:
#line 1040 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.second_len = yyvsp[-1].fval;
  ;
    break;}
case 240:
#line 1045 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmVECTORS;
    polygon.first = yyvsp[-1].vect;
    polygon.first_len = 1.0;
  ;
    break;}
case 241:
#line 1051 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmVECTORS;
    polygon.second = yyvsp[-1].vect;
    polygon.second_len = 1.0;
  ;
    break;}
case 242:
#line 1057 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmMATRIX;
    polygon.matrix.Set (*yyvsp[-1].matrix);
  ;
    break;}
case 243:
#line 1062 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmMATRIX;
    polygon.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 244:
#line 1067 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmPLANEREF;
    polygon.planetpl = yyvsp[-1].string;
  ;
    break;}
case 245:
#line 1072 "plugins/csstdldr/stdparse.y"
{ printf ("UV_SHIFT (%g, %g)\n", yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size += 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      /*if (count < 5)*/
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
              char errchar [2];
              if (yychar < 255) { errchar [0] = yychar; errchar [1] = 0; }
              sprintf (strchr (msg, 0), ", got `%s'",
                yychar < 255 ? errchar : yytname [yychar - 255]);
#ifdef YYERROR_EXTENDED
              YYERROR_EXTENDED(msg)
#endif
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1075 "plugins/csstdldr/stdparse.y"
 /* End of grammar */

/* On initialization, register keyword list with the C++ parser */
extern int init_token_table (const char * const *yytname);
struct __parser_init
{
  __parser_init ()
  {
    init_token_table (yytname);
#if YYDEBUG
    yydebug = 1;
#endif
  }
} __parser_init_dummy;
