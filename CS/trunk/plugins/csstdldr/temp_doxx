$$$
$$$ This is the (I hope complete) difference list between old loader
$$$ (libs/csparser/csloader.cpp) and the stdldr plugin.
$$$
$$$ The differences between old loader and the new loader plugin
$$$ are caused by the need to balance between 100% compatibility with
$$$ the legacy worlds and a more logical and strict format. Another
$$$ goal was to simplify the loader by removing obsolete keywords,
$$$ duplicate functionality and so on. Thus in the end we don't have
$$$ 100% compatibility, but the loader should perfectly load world
$$$ files written by map2cs and MazeD. In general, worlds that use
$$$ deprecated keywords (e.g. ROOM, SIXFACE etc) should be loaded into
$$$ MazeD (while its using the old loader) and saved back; this will
$$$ automatically make them compatible with the new loader. Thus when
$$$ MazeD will be able to save worlds without data loss (e.g. scripts,
$$$ beziers) the legacy world files should be converted and the old
$$$ loader should be deprecated.
$$$

-*- Whenever possible, enclose strings in quotes. Quotes are accepted
    everywhere, both ' and " quotes are accepted. If the string has no
    quotes, it can start with any alphabet or "_/!@$#~" characters and
    can consist of any alphanumeric characters plus one of ".*+-" characters.
    Thus FILE (/lev/texture.gif) is accepted, but in any case it would be
    better to write FILE ('/lev/texture.gif').

-*- In general, the syntax requirements are not that strict as before. Since
    tokenizer enforces same set of rules across entire file (e.g. it is not
    context-dependent), you for example can use string quotes even in places
    where before this would be a syntax error. Another thing is that keywords
    that have no arguments can be written without round brackets, e.g.
    instead of POLYGON (GOURAUD () MIRROR ()) you can write just
    POLYGON (GOURAUD MIRROR). Also since at tokenization time the ','
    symbols between numbers are removed to conserve space, you can ommit
    these symbols even in the input file, e.g. VERTEX (1.25 2.34).

-*- The TEXTURES and TEXTURE keywords have been changed into MATERIAL.
    The MATERIAL keyword can have not only a texture assigned, but a flat
    color as well, along with many other parameters. For example:

	MATERIAL 'marble floor' (TEXTURE ('/tex/marble.png'))
	MATERIAL 'white plastic' (FLATCOL (1,1,1))
	SECTOR 'room'
	(
	  POLYGON (MATERIAL ('marble floor') ...)
	  POLYGON (MATERIAL ('white plastic') ...)
	)

    Because of this, TEXTURES and TEXTURE keywords are not accepted anymore
    (TEXTURE() is accepted only inside MATERIAL() context and stands for
    former FILE(), TEXTURES() is considered syntax error).

-*- Obsolete keywords are considered syntax error. I think now it's the right
    time to get rid of old stuff :-) Obsolete keywords:

	- FOG in polygon descriptor
	- NUM_TEXTURES()
	- BSP()
	- TEXTURE() in beziers do not accept any keywords inside brackets.
	  They are unused anyway, and I doubt the old way of describing
	  bezier texture is useful - it has to be done somewhat differently.
	- ROOM and SIXFACE are not supported anymore.
	- LIGHTX
	- SCRIPT
	- TRIGGER
	- ACTIVATE (due to Jorrit's changes in the old loader)
	- TEXTURES (replaced by MATERIAL())
        - COSFACT (don't see a real need to specify per-polygon cosinus factor)
	- WARP (see below about portal specification format change)

-*- Added CAMERA keyword. The format for this command is:

	CAMERA <camera-name> '(' { <camera-comp> } ')'
	<camera-comp> ::= <position> | <forward> | <upward> | <camerasec>
	<position> ::= 'POSITION' '(' <coordinate> ')' 
	<forward> ::= 'FORWARD' '(' <vector-3d> ')'
	<upward> ::= 'UPWARD' '(' <vector-3d> ')'
	<camerasec> ::= 'SECTOR '(' <sector-name> ')'

    CAMERA defines an arbitrary position in the world, all required
    parameters to be able to rigidly fix the camera at any given position
    looking into any specific direction. You define the position of the
    camera, the "forward-looking" vector (which goes from your eyes straight
    ahead) and the "up" vector, e.g. the vector that goes up along your height.

    Objects of this type are tied to the entire world, they are not
    object-specific (e.g. you cannot define a CAMERA() inside a SECTOR()).

    The START(room,pos) keyword is equivalent to

	CAMERA 'Start' (SECTOR (room), POSITION (pos))

-*- Improved much template support. Now all options non-related to thing
    instances are useable while before thing templates and thing instances
    had different possibilities (e.g. UV(), COLORS(), UVA() were accessible
    from thing instances but not from templates). Now thing instances are
    just a superset of tning templates, and contain just the additional
    options that do not make sense for thing templates.

-*- Added texture parameters FOR_3D (yes|no) and FOR_2D (yes|no). Now you can
    use lines like these:

    TEXTURE 'marble' (FILE ('/lib/tex/marble7.gif') FOR_3D (no) FOR_2D (yes))

    By default 3D usage is on, 2D usage is off.

-*- TEXTURES won't delete all textures loaded previously into engine.
    In general, the goal of the loader is to *merge* data into engine,
    without automatically clearing the data that is already loaded.
    Thus YOU decide when to clear the world by calling iWorld::DeleteAll()
    method.

-*- The KEY () format has been changed. The old format is:

	'KEY' '(' <key-name> ',' <key-value> ')'

    The new format is:

	'KEY' <key-name> '(' <key-value> ')'

-*- LIBRARY keyword is absolutely equivalent to WORLD now. Both WORLD and
    LIBRARY can have a name assigned:

	WORLD 'one'
	(
	  ...
	)

	and

	LIBRARY 'one'
	(
	  ...
	)

    are absolutely equivalent.

-*- POLYGON (TEXTURE (...)) keyword has been renamed into
    POLYGON (TEXMAP (...)). TEXTURE() was a bad name for what it means,
    since TEXTURE() was really used for defining texture mapping parameters.

-*- Portal syntax has been changed a little. Instead of

	POLYGON ( PORTAL ('sector_name') WARP ( MATRIX (...) V (...) W (...)
		MIRROR (...) ZFILL (...) ...) )

    the format is now:

	POLYGON ( PORTAL ( SECTOR ('sector_name') MATRIX (...) V (...) W (...)
		MIRROR (...) ZFILL (...) ...) )

    e.g. the WARP keyword is obsolete now.
