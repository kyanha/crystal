/*
 * FILE : plugins/cscript/cslua/cs_lua.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : Lua */

#define LUA_MS

extern "C" {
#include <lua.h>
}
#include <string.h>

/*****************************************************************************
 * $Header$
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strcpy(temp_type,tp->name);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr


  #include "css.h"
//***** SCF Wrappers
  int MakeVersion(int version0, int version1, int version2)
  {
    return SCF_CONSTRUCT_VERSION(version0, version1, version2);
  }

#include "isys/system.h"
#include "csparser/csloader.h"
#include "plugins/cscript/cspython/cspython.h"
iSystem* GetSystem()
{
  return thisclass->Sys;
}

void* GetMyPtr() { return NULL; }
static int _wrap_MakeVersion(lua_State *lua_state) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  _arg0 = (int ) lua_tonumber (lua_state,  1 );
#else
  _arg0 = (int ) lua_tonumber ( 1 );
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    _result = (int )MakeVersion(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
static int _wrap_GetSystem(lua_State *lua_state) {

    iSystem * _result;

    _result = (iSystem *)GetSystem();
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static int _wrap_GetMyPtr(lua_State *lua_state) {

    void * _result;

    _result = (void *)GetMyPtr();
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static void *SwigiSCFToiBase(void *ptr) {
    iSCF *src;
    iBase *dest;
    src = (iSCF *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iSCF_scfCreateInstance(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->scfCreateInstance(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iSCF_scfCreateInstance(lua_State *lua_state) {

    void * _result;
    iSCF * _arg0;
    char * _arg1;
    char * _arg2;
    int  _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iSCF *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iSCF *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (char*) lua_tostring (lua_state,  3 );
#else
  _arg2 = (char*) lua_tostring ( 3 );
#endif
}
{
#ifdef LUA_MS
  _arg3 = (int ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (int ) lua_tonumber ( 4 );
#endif
}
    _result = (void *)iSCF_scfCreateInstance(_arg0,_arg1,_arg2,_arg3);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define csVector3_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
static int _wrap_csVector3_x_set(lua_State *lua_state) {

    float  _result;
    csVector3 * _arg0;
    float  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csVector3 *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csVector3 *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (float ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (float ) lua_tonumber ( 2 );
#endif
}
    _result = (float )csVector3_x_set(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csVector3_x_get(_swigobj) ((float ) _swigobj->x)
static int _wrap_csVector3_x_get(lua_State *lua_state) {

    float  _result;
    csVector3 * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csVector3 *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csVector3 *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (float )csVector3_x_get(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csVector3_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
static int _wrap_csVector3_y_set(lua_State *lua_state) {

    float  _result;
    csVector3 * _arg0;
    float  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csVector3 *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csVector3 *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (float ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (float ) lua_tonumber ( 2 );
#endif
}
    _result = (float )csVector3_y_set(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csVector3_y_get(_swigobj) ((float ) _swigobj->y)
static int _wrap_csVector3_y_get(lua_State *lua_state) {

    float  _result;
    csVector3 * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csVector3 *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csVector3 *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (float )csVector3_y_get(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csVector3_z_set(_swigobj,_swigval) (_swigobj->z = _swigval,_swigval)
static int _wrap_csVector3_z_set(lua_State *lua_state) {

    float  _result;
    csVector3 * _arg0;
    float  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csVector3 *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csVector3 *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (float ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (float ) lua_tonumber ( 2 );
#endif
}
    _result = (float )csVector3_z_set(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csVector3_z_get(_swigobj) ((float ) _swigobj->z)
static int _wrap_csVector3_z_get(lua_State *lua_state) {

    float  _result;
    csVector3 * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csVector3 *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csVector3 *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (float )csVector3_z_get(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define new_csVector3(_swigarg0,_swigarg1,_swigarg2) (new csVector3(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_new_csVector3(lua_State *lua_state) {

    csVector3 * _result;
    float  _arg0;
    float  _arg1;
    float  _arg2;

{
#ifdef LUA_MS
  _arg0 = (float ) lua_tonumber (lua_state,  1 );
#else
  _arg0 = (float ) lua_tonumber ( 1 );
#endif
}
{
#ifdef LUA_MS
  _arg1 = (float ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (float ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (float ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (float ) lua_tonumber ( 3 );
#endif
}
    _result = (csVector3 *)new_csVector3(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define csRGBpixel_red_set(_swigobj,_swigval) (_swigobj->red = _swigval,_swigval)
static int _wrap_csRGBpixel_red_set(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (unsigned char ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (unsigned char ) lua_tonumber ( 2 );
#endif
}
    _result = (unsigned char )csRGBpixel_red_set(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csRGBpixel_red_get(_swigobj) ((unsigned char ) _swigobj->red)
static int _wrap_csRGBpixel_red_get(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (unsigned char )csRGBpixel_red_get(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csRGBpixel_green_set(_swigobj,_swigval) (_swigobj->green = _swigval,_swigval)
static int _wrap_csRGBpixel_green_set(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (unsigned char ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (unsigned char ) lua_tonumber ( 2 );
#endif
}
    _result = (unsigned char )csRGBpixel_green_set(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csRGBpixel_green_get(_swigobj) ((unsigned char ) _swigobj->green)
static int _wrap_csRGBpixel_green_get(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (unsigned char )csRGBpixel_green_get(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csRGBpixel_blue_set(_swigobj,_swigval) (_swigobj->blue = _swigval,_swigval)
static int _wrap_csRGBpixel_blue_set(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (unsigned char ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (unsigned char ) lua_tonumber ( 2 );
#endif
}
    _result = (unsigned char )csRGBpixel_blue_set(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csRGBpixel_blue_get(_swigobj) ((unsigned char ) _swigobj->blue)
static int _wrap_csRGBpixel_blue_get(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (unsigned char )csRGBpixel_blue_get(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csRGBpixel_alpha_set(_swigobj,_swigval) (_swigobj->alpha = _swigval,_swigval)
static int _wrap_csRGBpixel_alpha_set(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (unsigned char ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (unsigned char ) lua_tonumber ( 2 );
#endif
}
    _result = (unsigned char )csRGBpixel_alpha_set(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define csRGBpixel_alpha_get(_swigobj) ((unsigned char ) _swigobj->alpha)
static int _wrap_csRGBpixel_alpha_get(lua_State *lua_state) {

    unsigned char  _result;
    csRGBpixel * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (csRGBpixel *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (csRGBpixel *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (unsigned char )csRGBpixel_alpha_get(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
static void *SwigiPluginToiBase(void *ptr) {
    iPlugin *src;
    iBase *dest;
    src = (iPlugin *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPlugin_Initialize(_swigobj,_swigarg0)  (_swigobj->Initialize(_swigarg0))
static int _wrap_iPlugin_Initialize(lua_State *lua_state) {

    bool  _result;
    iPlugin * _arg0;
    iSystem * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPlugin *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPlugin *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (iSystem *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (iSystem *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    _result = (bool )iPlugin_Initialize(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPlugin_HandleEvent(_swigobj,_swigarg0)  (_swigobj->HandleEvent(_swigarg0))
static int _wrap_iPlugin_HandleEvent(lua_State *lua_state) {

    bool  _result;
    iPlugin * _arg0;
    iEvent * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPlugin *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPlugin *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (iEvent *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (iEvent *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    _result = (bool )iPlugin_HandleEvent(_arg0,*_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
static void *SwigiTextureWrapperToiBase(void *ptr) {
    iTextureWrapper *src;
    iBase *dest;
    src = (iTextureWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static void *SwigiTextureHandleToiBase(void *ptr) {
    iTextureHandle *src;
    iBase *dest;
    src = (iTextureHandle *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iTextureHandle_GetMipMapDimensions(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMipMapDimensions(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iTextureHandle_GetMipMapDimensions(lua_State *lua_state) {

    bool  _result;
    iTextureHandle * _arg0;
    int  _arg1;
    int * _arg2;
    int * _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (int *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (int *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  4 ))
    _arg3 = (int *) lua_touserdata (lua_state,  4 );
  else _arg3 = NULL;
#else
  if (!lua_isnil ( 4 )) _arg3 = (int *) lua_touserdata ( 4 );
  else _arg3 = NULL;
#endif
}
    _result = (bool )iTextureHandle_GetMipMapDimensions(_arg0,_arg1,*_arg2,*_arg3);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iTextureHandle_GetMeanColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMeanColor(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iTextureHandle_GetMeanColor(lua_State *lua_state) {

    iTextureHandle * _arg0;
    UByte * _arg1;
    UByte * _arg2;
    UByte * _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (UByte *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (UByte *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (UByte *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (UByte *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  4 ))
    _arg3 = (UByte *) lua_touserdata (lua_state,  4 );
  else _arg3 = NULL;
#else
  if (!lua_isnil ( 4 )) _arg3 = (UByte *) lua_touserdata ( 4 );
  else _arg3 = NULL;
#endif
}
    iTextureHandle_GetMeanColor(_arg0,*_arg1,*_arg2,*_arg3);
    return 1;
}
#define iTextureHandle_GetCacheData(_swigobj)  (_swigobj->GetCacheData())
static int _wrap_iTextureHandle_GetCacheData(lua_State *lua_state) {

    void * _result;
    iTextureHandle * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (void *)iTextureHandle_GetCacheData(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iTextureHandle_SetCacheData(_swigobj,_swigarg0)  (_swigobj->SetCacheData(_swigarg0))
static int _wrap_iTextureHandle_SetCacheData(lua_State *lua_state) {

    iTextureHandle * _arg0;
    void * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (void *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (void *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iTextureHandle_SetCacheData(_arg0,_arg1);
    return 1;
}
#define iTextureHandle_GetPrivateObject(_swigobj)  (_swigobj->GetPrivateObject())
static int _wrap_iTextureHandle_GetPrivateObject(lua_State *lua_state) {

    void * _result;
    iTextureHandle * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (void *)iTextureHandle_GetPrivateObject(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static void *SwigiMaterialHandleToiBase(void *ptr) {
    iMaterialHandle *src;
    iBase *dest;
    src = (iMaterialHandle *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMaterialHandle_GetTexture(_swigobj)  (_swigobj->GetTexture())
static int _wrap_iMaterialHandle_GetTexture(lua_State *lua_state) {

    iTextureHandle * _result;
    iMaterialHandle * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iMaterialHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iMaterialHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iTextureHandle *)iMaterialHandle_GetTexture(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iMaterialHandle_GetFlatColor(_swigobj,_swigarg0)  (_swigobj->GetFlatColor(_swigarg0))
static int _wrap_iMaterialHandle_GetFlatColor(lua_State *lua_state) {

    iMaterialHandle * _arg0;
    csRGBpixel * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iMaterialHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iMaterialHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csRGBpixel *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csRGBpixel *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iMaterialHandle_GetFlatColor(_arg0,*_arg1);
    return 1;
}
#define iMaterialHandle_GetReflection(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetReflection(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iMaterialHandle_GetReflection(lua_State *lua_state) {

    iMaterialHandle * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iMaterialHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iMaterialHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (float *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (float *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (float *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (float *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  4 ))
    _arg3 = (float *) lua_touserdata (lua_state,  4 );
  else _arg3 = NULL;
#else
  if (!lua_isnil ( 4 )) _arg3 = (float *) lua_touserdata ( 4 );
  else _arg3 = NULL;
#endif
}
    iMaterialHandle_GetReflection(_arg0,*_arg1,*_arg2,*_arg3);
    return 1;
}
#define iMaterialHandle_Prepare(_swigobj)  (_swigobj->Prepare())
static int _wrap_iMaterialHandle_Prepare(lua_State *lua_state) {

    iMaterialHandle * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iMaterialHandle *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iMaterialHandle *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iMaterialHandle_Prepare(_arg0);
    return 1;
}
static void *SwigiMaterialWrapperToiBase(void *ptr) {
    iMaterialWrapper *src;
    iBase *dest;
    src = (iMaterialWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMaterialWrapper_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
static int _wrap_iMaterialWrapper_GetMaterialHandle(lua_State *lua_state) {

    iMaterialHandle * _result;
    iMaterialWrapper * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iMaterialWrapper *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iMaterialWrapper *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iMaterialHandle *)iMaterialWrapper_GetMaterialHandle(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static void *SwigiGraphics3DToiPlugin(void *ptr) {
    iGraphics3D *src;
    iPlugin *dest;
    src = (iGraphics3D *) ptr;
    dest = (iPlugin *) src;
    return (void *) dest;
}

static void *SwigiGraphics3DToiBase(void *ptr) {
    iGraphics3D *src;
    iBase *dest;
    src = (iGraphics3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iGraphics3D_Initialize(_swigobj,_swigarg0)  (_swigobj->Initialize(_swigarg0))
static int _wrap_iGraphics3D_Initialize(lua_State *lua_state) {

    bool  _result;
    iGraphics3D * _arg0;
    iSystem * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (iSystem *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (iSystem *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    _result = (bool )iGraphics3D_Initialize(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iGraphics3D_Open(_swigobj,_swigarg0)  (_swigobj->Open(_swigarg0))
static int _wrap_iGraphics3D_Open(lua_State *lua_state) {

    bool  _result;
    iGraphics3D * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    _result = (bool )iGraphics3D_Open(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iGraphics3D_Close(_swigobj)  (_swigobj->Close())
static int _wrap_iGraphics3D_Close(lua_State *lua_state) {

    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iGraphics3D_Close(_arg0);
    return 1;
}
#define iGraphics3D_SetDimensions(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetDimensions(_swigarg0,_swigarg1))
static int _wrap_iGraphics3D_SetDimensions(lua_State *lua_state) {

    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    iGraphics3D_SetDimensions(_arg0,_arg1,_arg2);
    return 1;
}
#define iGraphics3D_BeginDraw(_swigobj,_swigarg0)  (_swigobj->BeginDraw(_swigarg0))
static int _wrap_iGraphics3D_BeginDraw(lua_State *lua_state) {

    bool  _result;
    iGraphics3D * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    _result = (bool )iGraphics3D_BeginDraw(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iGraphics3D_FinishDraw(_swigobj)  (_swigobj->FinishDraw())
static int _wrap_iGraphics3D_FinishDraw(lua_State *lua_state) {

    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iGraphics3D_FinishDraw(_arg0);
    return 1;
}
#define iGraphics3D_Print(_swigobj,_swigarg0)  (_swigobj->Print(_swigarg0))
static int _wrap_iGraphics3D_Print(lua_State *lua_state) {

    iGraphics3D * _arg0;
    csRect * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csRect *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csRect *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_Print(_arg0,_arg1);
    return 1;
}
#define iGraphics3D_DrawPolygon(_swigobj,_swigarg0)  (_swigobj->DrawPolygon(_swigarg0))
static int _wrap_iGraphics3D_DrawPolygon(lua_State *lua_state) {

    iGraphics3D * _arg0;
    G3DPolygonDP * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (G3DPolygonDP *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (G3DPolygonDP *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_DrawPolygon(_arg0,*_arg1);
    return 1;
}
#define iGraphics3D_DrawPolygonDebug(_swigobj,_swigarg0)  (_swigobj->DrawPolygonDebug(_swigarg0))
static int _wrap_iGraphics3D_DrawPolygonDebug(lua_State *lua_state) {

    iGraphics3D * _arg0;
    G3DPolygonDP * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (G3DPolygonDP *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (G3DPolygonDP *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_DrawPolygonDebug(_arg0,*_arg1);
    return 1;
}
#define iGraphics3D_DrawLine(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->DrawLine(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int _wrap_iGraphics3D_DrawLine(lua_State *lua_state) {

    iGraphics3D * _arg0;
    csVector3 * _arg1;
    csVector3 * _arg2;
    float  _arg3;
    int  _arg4;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csVector3 *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csVector3 *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (csVector3 *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (csVector3 *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg3 = (float ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (float ) lua_tonumber ( 4 );
#endif
}
{
#ifdef LUA_MS
  _arg4 = (int ) lua_tonumber (lua_state,  5 );
#else
  _arg4 = (int ) lua_tonumber ( 5 );
#endif
}
    iGraphics3D_DrawLine(_arg0,*_arg1,*_arg2,_arg3,_arg4);
    return 1;
}
#define iGraphics3D_DrawTriangleMesh(_swigobj,_swigarg0)  (_swigobj->DrawTriangleMesh(_swigarg0))
static int _wrap_iGraphics3D_DrawTriangleMesh(lua_State *lua_state) {

    iGraphics3D * _arg0;
    G3DTriangleMesh * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (G3DTriangleMesh *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (G3DTriangleMesh *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_DrawTriangleMesh(_arg0,*_arg1);
    return 1;
}
#define iGraphics3D_DrawPolygonMesh(_swigobj,_swigarg0)  (_swigobj->DrawPolygonMesh(_swigarg0))
static int _wrap_iGraphics3D_DrawPolygonMesh(lua_State *lua_state) {

    iGraphics3D * _arg0;
    G3DPolygonMesh * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (G3DPolygonMesh *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (G3DPolygonMesh *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_DrawPolygonMesh(_arg0,*_arg1);
    return 1;
}
#define iGraphics3D_OpenFogObject(_swigobj,_swigarg0,_swigarg1)  (_swigobj->OpenFogObject(_swigarg0,_swigarg1))
static int _wrap_iGraphics3D_OpenFogObject(lua_State *lua_state) {

    iGraphics3D * _arg0;
    CS_ID * _arg1;
    csFog * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (CS_ID *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (CS_ID *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (csFog *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (csFog *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
    iGraphics3D_OpenFogObject(_arg0,*_arg1,_arg2);
    return 1;
}
#define iGraphics3D_DrawFogPolygon(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->DrawFogPolygon(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iGraphics3D_DrawFogPolygon(lua_State *lua_state) {

    iGraphics3D * _arg0;
    CS_ID * _arg1;
    G3DPolygonDFP * _arg2;
    int  _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (CS_ID *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (CS_ID *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (G3DPolygonDFP *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (G3DPolygonDFP *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg3 = (int ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (int ) lua_tonumber ( 4 );
#endif
}
    iGraphics3D_DrawFogPolygon(_arg0,*_arg1,*_arg2,_arg3);
    return 1;
}
#define iGraphics3D_CloseFogObject(_swigobj,_swigarg0)  (_swigobj->CloseFogObject(_swigarg0))
static int _wrap_iGraphics3D_CloseFogObject(lua_State *lua_state) {

    iGraphics3D * _arg0;
    CS_ID * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (CS_ID *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (CS_ID *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_CloseFogObject(_arg0,*_arg1);
    return 1;
}
#define iGraphics3D_GetCaps(_swigobj)  (_swigobj->GetCaps())
static int _wrap_iGraphics3D_GetCaps(lua_State *lua_state) {

    csGraphics3DCaps * _result;
    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (csGraphics3DCaps *)iGraphics3D_GetCaps(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iGraphics3D_GetZBuffAt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetZBuffAt(_swigarg0,_swigarg1))
static int _wrap_iGraphics3D_GetZBuffAt(lua_State *lua_state) {

    unsigned long * _result;
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    _result = (unsigned long *)iGraphics3D_GetZBuffAt(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iGraphics3D_GetZBuffValue(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetZBuffValue(_swigarg0,_swigarg1))
static int _wrap_iGraphics3D_GetZBuffValue(lua_State *lua_state) {

    float  _result;
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    _result = (float )iGraphics3D_GetZBuffValue(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iGraphics3D_DumpCache(_swigobj)  (_swigobj->DumpCache())
static int _wrap_iGraphics3D_DumpCache(lua_State *lua_state) {

    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iGraphics3D_DumpCache(_arg0);
    return 1;
}
#define iGraphics3D_ClearCache(_swigobj)  (_swigobj->ClearCache())
static int _wrap_iGraphics3D_ClearCache(lua_State *lua_state) {

    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iGraphics3D_ClearCache(_arg0);
    return 1;
}
#define iGraphics3D_RemoveFromCache(_swigobj,_swigarg0)  (_swigobj->RemoveFromCache(_swigarg0))
static int _wrap_iGraphics3D_RemoveFromCache(lua_State *lua_state) {

    iGraphics3D * _arg0;
    iPolygonTexture * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (iPolygonTexture *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (iPolygonTexture *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_RemoveFromCache(_arg0,_arg1);
    return 1;
}
#define iGraphics3D_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int _wrap_iGraphics3D_GetWidth(lua_State *lua_state) {

    int  _result;
    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iGraphics3D_GetWidth(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iGraphics3D_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int _wrap_iGraphics3D_GetHeight(lua_State *lua_state) {

    int  _result;
    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iGraphics3D_GetHeight(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iGraphics3D_SetPerspectiveCenter(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetPerspectiveCenter(_swigarg0,_swigarg1))
static int _wrap_iGraphics3D_SetPerspectiveCenter(lua_State *lua_state) {

    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    iGraphics3D_SetPerspectiveCenter(_arg0,_arg1,_arg2);
    return 1;
}
#define iGraphics3D_SetPerspectiveAspect(_swigobj,_swigarg0)  (_swigobj->SetPerspectiveAspect(_swigarg0))
static int _wrap_iGraphics3D_SetPerspectiveAspect(lua_State *lua_state) {

    iGraphics3D * _arg0;
    float  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (float ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (float ) lua_tonumber ( 2 );
#endif
}
    iGraphics3D_SetPerspectiveAspect(_arg0,_arg1);
    return 1;
}
#define iGraphics3D_SetObjectToCamera(_swigobj,_swigarg0)  (_swigobj->SetObjectToCamera(_swigarg0))
static int _wrap_iGraphics3D_SetObjectToCamera(lua_State *lua_state) {

    iGraphics3D * _arg0;
    csReversibleTransform * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csReversibleTransform *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csReversibleTransform *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iGraphics3D_SetObjectToCamera(_arg0,_arg1);
    return 1;
}
#define iGraphics3D_SetClipper(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetClipper(_swigarg0,_swigarg1))
static int _wrap_iGraphics3D_SetClipper(lua_State *lua_state) {

    iGraphics3D * _arg0;
    csVector2 * _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csVector2 *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csVector2 *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    iGraphics3D_SetClipper(_arg0,_arg1,_arg2);
    return 1;
}
#define iGraphics3D_GetDriver2D(_swigobj)  (_swigobj->GetDriver2D())
static int _wrap_iGraphics3D_GetDriver2D(lua_State *lua_state) {

    iGraphics2D * _result;
    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iGraphics2D *)iGraphics3D_GetDriver2D(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iGraphics3D_GetTextureManager(_swigobj)  (_swigobj->GetTextureManager())
static int _wrap_iGraphics3D_GetTextureManager(lua_State *lua_state) {

    iTextureManager * _result;
    iGraphics3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iTextureManager *)iGraphics3D_GetTextureManager(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iGraphics3D_CreateHalo(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->CreateHalo(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static int _wrap_iGraphics3D_CreateHalo(lua_State *lua_state) {

    iHalo * _result;
    iGraphics3D * _arg0;
    float  _arg1;
    float  _arg2;
    float  _arg3;
    unsigned char * _arg4;
    int  _arg5;
    int  _arg6;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (float ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (float ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (float ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (float ) lua_tonumber ( 3 );
#endif
}
{
#ifdef LUA_MS
  _arg3 = (float ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (float ) lua_tonumber ( 4 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  5 ))
    _arg4 = (unsigned char *) lua_touserdata (lua_state,  5 );
  else _arg4 = NULL;
#else
  if (!lua_isnil ( 5 )) _arg4 = (unsigned char *) lua_touserdata ( 5 );
  else _arg4 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg5 = (int ) lua_tonumber (lua_state,  6 );
#else
  _arg5 = (int ) lua_tonumber ( 6 );
#endif
}
{
#ifdef LUA_MS
  _arg6 = (int ) lua_tonumber (lua_state,  7 );
#else
  _arg6 = (int ) lua_tonumber ( 7 );
#endif
}
    _result = (iHalo *)iGraphics3D_CreateHalo(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iGraphics3D_DrawPixmap(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8)  (_swigobj->DrawPixmap(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8))
static int _wrap_iGraphics3D_DrawPixmap(lua_State *lua_state) {

    iGraphics3D * _arg0;
    iTextureHandle * _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;
    int  _arg6;
    int  _arg7;
    int  _arg8;
    int  _arg9;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iGraphics3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iGraphics3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (iTextureHandle *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (iTextureHandle *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
{
#ifdef LUA_MS
  _arg3 = (int ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (int ) lua_tonumber ( 4 );
#endif
}
{
#ifdef LUA_MS
  _arg4 = (int ) lua_tonumber (lua_state,  5 );
#else
  _arg4 = (int ) lua_tonumber ( 5 );
#endif
}
{
#ifdef LUA_MS
  _arg5 = (int ) lua_tonumber (lua_state,  6 );
#else
  _arg5 = (int ) lua_tonumber ( 6 );
#endif
}
{
#ifdef LUA_MS
  _arg6 = (int ) lua_tonumber (lua_state,  7 );
#else
  _arg6 = (int ) lua_tonumber ( 7 );
#endif
}
{
#ifdef LUA_MS
  _arg7 = (int ) lua_tonumber (lua_state,  8 );
#else
  _arg7 = (int ) lua_tonumber ( 8 );
#endif
}
{
#ifdef LUA_MS
  _arg8 = (int ) lua_tonumber (lua_state,  9 );
#else
  _arg8 = (int ) lua_tonumber ( 9 );
#endif
}
{
#ifdef LUA_MS
  _arg9 = (int ) lua_tonumber (lua_state,  10 );
#else
  _arg9 = (int ) lua_tonumber ( 10 );
#endif
}
    iGraphics3D_DrawPixmap(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);
    return 1;
}
static void *SwigiCameraToiBase(void *ptr) {
    iCamera *src;
    iBase *dest;
    src = (iCamera *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iCamera_GetFOV(_swigobj)  (_swigobj->GetFOV())
static int _wrap_iCamera_GetFOV(lua_State *lua_state) {

    float  _result;
    iCamera * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iCamera *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iCamera *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (float )iCamera_GetFOV(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iCamera_GetInvFOV(_swigobj)  (_swigobj->GetInvFOV())
static int _wrap_iCamera_GetInvFOV(lua_State *lua_state) {

    float  _result;
    iCamera * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iCamera *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iCamera *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (float )iCamera_GetInvFOV(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
static void *SwigiSectorToiBase(void *ptr) {
    iSector *src;
    iBase *dest;
    src = (iSector *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iSector_CreateBSP(_swigobj)  (_swigobj->CreateBSP())
static int _wrap_iSector_CreateBSP(lua_State *lua_state) {

    iSector * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iSector *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iSector *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iSector_CreateBSP(_arg0);
    return 1;
}
static void *SwigiThingToiBase(void *ptr) {
    iThing *src;
    iBase *dest;
    src = (iThing *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iThing_GetName(_swigobj)  (_swigobj->GetName())
static int _wrap_iThing_GetName(lua_State *lua_state) {

    char * _result;
    iThing * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (char *)iThing_GetName(_arg0);
{
#ifdef LUA_MS
  lua_pushstring (lua_state, _result);
#else
  lua_pushstring (_result);
#endif
}
    return 1;
}
#define iThing_SetName(_swigobj,_swigarg0)  (_swigobj->SetName(_swigarg0))
static int _wrap_iThing_SetName(lua_State *lua_state) {

    iThing * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    iThing_SetName(_arg0,_arg1);
    return 1;
}
#define iThing_CompressVertices(_swigobj)  (_swigobj->CompressVertices())
static int _wrap_iThing_CompressVertices(lua_State *lua_state) {

    iThing * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iThing_CompressVertices(_arg0);
    return 1;
}
#define iThing_GetPolygonCount(_swigobj)  (_swigobj->GetPolygonCount())
static int _wrap_iThing_GetPolygonCount(lua_State *lua_state) {

    int  _result;
    iThing * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iThing_GetPolygonCount(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iThing_GetPolygon(_swigobj,_swigarg0)  (_swigobj->GetPolygon(_swigarg0))
static int _wrap_iThing_GetPolygon(lua_State *lua_state) {

    iPolygon3D * _result;
    iThing * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    _result = (iPolygon3D *)iThing_GetPolygon(_arg0,_arg1);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iThing_CreatePolygon(_swigobj,_swigarg0)  (_swigobj->CreatePolygon(_swigarg0))
static int _wrap_iThing_CreatePolygon(lua_State *lua_state) {

    iPolygon3D * _result;
    iThing * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    _result = (iPolygon3D *)iThing_CreatePolygon(_arg0,_arg1);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iThing_GetVertexCount(_swigobj)  (_swigobj->GetVertexCount())
static int _wrap_iThing_GetVertexCount(lua_State *lua_state) {

    int  _result;
    iThing * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iThing_GetVertexCount(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iThing_GetVertex(_swigobj,_swigarg0)  (_swigobj->GetVertex(_swigarg0))
static int _wrap_iThing_GetVertex(lua_State *lua_state) {

    csVector3 * _result;
    iThing * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    csVector3 & _result_ref = iThing_GetVertex(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iThing_GetVertexW(_swigobj,_swigarg0)  (_swigobj->GetVertexW(_swigarg0))
static int _wrap_iThing_GetVertexW(lua_State *lua_state) {

    csVector3 * _result;
    iThing * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    csVector3 & _result_ref = iThing_GetVertexW(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iThing_GetVertexC(_swigobj,_swigarg0)  (_swigobj->GetVertexC(_swigarg0))
static int _wrap_iThing_GetVertexC(lua_State *lua_state) {

    csVector3 * _result;
    iThing * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    csVector3 & _result_ref = iThing_GetVertexC(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iThing_CreateVertex(_swigobj,_swigarg0)  (_swigobj->CreateVertex(_swigarg0))
static int _wrap_iThing_CreateVertex(lua_State *lua_state) {

    int  _result;
    iThing * _arg0;
    csVector3 * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csVector3 *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csVector3 *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    _result = (int )iThing_CreateVertex(_arg0,*_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iThing_CreateKey(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreateKey(_swigarg0,_swigarg1))
static int _wrap_iThing_CreateKey(lua_State *lua_state) {

    bool  _result;
    iThing * _arg0;
    char * _arg1;
    char * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iThing *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iThing *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (char*) lua_tostring (lua_state,  3 );
#else
  _arg2 = (char*) lua_tostring ( 3 );
#endif
}
    _result = (bool )iThing_CreateKey(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
static void *SwigiPolygon3DToiBase(void *ptr) {
    iPolygon3D *src;
    iBase *dest;
    src = (iPolygon3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPolygon3D_GetName(_swigobj)  (_swigobj->GetName())
static int _wrap_iPolygon3D_GetName(lua_State *lua_state) {

    char * _result;
    iPolygon3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (char *)iPolygon3D_GetName(_arg0);
{
#ifdef LUA_MS
  lua_pushstring (lua_state, _result);
#else
  lua_pushstring (_result);
#endif
}
    return 1;
}
#define iPolygon3D_SetName(_swigobj,_swigarg0)  (_swigobj->SetName(_swigarg0))
static int _wrap_iPolygon3D_SetName(lua_State *lua_state) {

    iPolygon3D * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    iPolygon3D_SetName(_arg0,_arg1);
    return 1;
}
#define iPolygon3D_GetLightMap(_swigobj)  (_swigobj->GetLightMap())
static int _wrap_iPolygon3D_GetLightMap(lua_State *lua_state) {

    iLightMap * _result;
    iPolygon3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iLightMap *)iPolygon3D_GetLightMap(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygon3D_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
static int _wrap_iPolygon3D_GetMaterialHandle(lua_State *lua_state) {

    iMaterialHandle * _result;
    iPolygon3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iMaterialHandle *)iPolygon3D_GetMaterialHandle(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygon3D_SetMaterial(_swigobj,_swigarg0)  (_swigobj->SetMaterial(_swigarg0))
static int _wrap_iPolygon3D_SetMaterial(lua_State *lua_state) {

    iPolygon3D * _arg0;
    iMaterialWrapper * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (iMaterialWrapper *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (iMaterialWrapper *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    iPolygon3D_SetMaterial(_arg0,_arg1);
    return 1;
}
#define iPolygon3D_GetVertexCount(_swigobj)  (_swigobj->GetVertexCount())
static int _wrap_iPolygon3D_GetVertexCount(lua_State *lua_state) {

    int  _result;
    iPolygon3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygon3D_GetVertexCount(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygon3D_GetVertex(_swigobj,_swigarg0)  (_swigobj->GetVertex(_swigarg0))
static int _wrap_iPolygon3D_GetVertex(lua_State *lua_state) {

    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    csVector3 & _result_ref = iPolygon3D_GetVertex(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygon3D_GetVertexW(_swigobj,_swigarg0)  (_swigobj->GetVertexW(_swigarg0))
static int _wrap_iPolygon3D_GetVertexW(lua_State *lua_state) {

    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    csVector3 & _result_ref = iPolygon3D_GetVertexW(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygon3D_GetVertexC(_swigobj,_swigarg0)  (_swigobj->GetVertexC(_swigarg0))
static int _wrap_iPolygon3D_GetVertexC(lua_State *lua_state) {

    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    csVector3 & _result_ref = iPolygon3D_GetVertexC(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygon3D_CreateVertexByIndex(_swigobj,_swigarg0)  (_swigobj->CreateVertex(_swigarg0))
static int _wrap_iPolygon3D_CreateVertexByIndex(lua_State *lua_state) {

    int  _result;
    iPolygon3D * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    _result = (int )iPolygon3D_CreateVertexByIndex(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygon3D_CreateVertex(_swigobj,_swigarg0)  (_swigobj->CreateVertex(_swigarg0))
static int _wrap_iPolygon3D_CreateVertex(lua_State *lua_state) {

    int  _result;
    iPolygon3D * _arg0;
    csVector3 * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csVector3 *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csVector3 *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
    _result = (int )iPolygon3D_CreateVertex(_arg0,*_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygon3D_GetAlpha(_swigobj)  (_swigobj->GetAlpha())
static int _wrap_iPolygon3D_GetAlpha(lua_State *lua_state) {

    int  _result;
    iPolygon3D * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygon3D_GetAlpha(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygon3D_SetAlpha(_swigobj,_swigarg0)  (_swigobj->SetAlpha(_swigarg0))
static int _wrap_iPolygon3D_SetAlpha(lua_State *lua_state) {

    iPolygon3D * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    iPolygon3D_SetAlpha(_arg0,_arg1);
    return 1;
}
#define iPolygon3D_CreatePlane(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreatePlane(_swigarg0,_swigarg1))
static int _wrap_iPolygon3D_CreatePlane(lua_State *lua_state) {

    iPolygon3D * _arg0;
    csVector3 * _arg1;
    csMatrix3 * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csVector3 *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csVector3 *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (csMatrix3 *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (csMatrix3 *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
    iPolygon3D_CreatePlane(_arg0,*_arg1,*_arg2);
    return 1;
}
#define iPolygon3D_SetPlane(_swigobj,_swigarg0)  (_swigobj->SetPlane(_swigarg0))
static int _wrap_iPolygon3D_SetPlane(lua_State *lua_state) {

    bool  _result;
    iPolygon3D * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    _result = (bool )iPolygon3D_SetPlane(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygon3D_SetTextureSpace(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->SetTextureSpace(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iPolygon3D_SetTextureSpace(lua_State *lua_state) {

    iPolygon3D * _arg0;
    csVector3 * _arg1;
    csVector3 * _arg2;
    float  _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygon3D *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygon3D *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (csVector3 *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (csVector3 *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (csVector3 *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (csVector3 *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg3 = (float ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (float ) lua_tonumber ( 4 );
#endif
}
    iPolygon3D_SetTextureSpace(_arg0,*_arg1,*_arg2,_arg3);
    return 1;
}
static void *SwigiImageToiBase(void *ptr) {
    iImage *src;
    iBase *dest;
    src = (iImage *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iImage_GetImageData(_swigobj)  (_swigobj->GetImageData())
static int _wrap_iImage_GetImageData(lua_State *lua_state) {

    void * _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (void *)iImage_GetImageData(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iImage_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int _wrap_iImage_GetWidth(lua_State *lua_state) {

    int  _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iImage_GetWidth(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iImage_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int _wrap_iImage_GetHeight(lua_State *lua_state) {

    int  _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iImage_GetHeight(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iImage_GetSize(_swigobj)  (_swigobj->GetSize())
static int _wrap_iImage_GetSize(lua_State *lua_state) {

    int  _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iImage_GetSize(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iImage_Rescale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Rescale(_swigarg0,_swigarg1))
static int _wrap_iImage_Rescale(lua_State *lua_state) {

    iImage * _arg0;
    int  _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    iImage_Rescale(_arg0,_arg1,_arg2);
    return 1;
}
#define iImage_MipMap(_swigobj,_swigarg0,_swigarg1)  (_swigobj->MipMap(_swigarg0,_swigarg1))
static int _wrap_iImage_MipMap(lua_State *lua_state) {

    iImage * _result;
    iImage * _arg0;
    int  _arg1;
    csRGBpixel * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (csRGBpixel *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (csRGBpixel *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
    _result = (iImage *)iImage_MipMap(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iImage_SetName(_swigobj,_swigarg0)  (_swigobj->SetName(_swigarg0))
static int _wrap_iImage_SetName(lua_State *lua_state) {

    iImage * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    iImage_SetName(_arg0,_arg1);
    return 1;
}
#define iImage_GetName(_swigobj)  (_swigobj->GetName())
static int _wrap_iImage_GetName(lua_State *lua_state) {

    char * _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (char *)iImage_GetName(_arg0);
{
#ifdef LUA_MS
  lua_pushstring (lua_state, _result);
#else
  lua_pushstring (_result);
#endif
}
    return 1;
}
#define iImage_GetFormat(_swigobj)  (_swigobj->GetFormat())
static int _wrap_iImage_GetFormat(lua_State *lua_state) {

    int  _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iImage_GetFormat(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iImage_GetPalette(_swigobj)  (_swigobj->GetPalette())
static int _wrap_iImage_GetPalette(lua_State *lua_state) {

    csRGBpixel * _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (csRGBpixel *)iImage_GetPalette(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iImage_GetAlpha(_swigobj)  (_swigobj->GetAlpha())
static int _wrap_iImage_GetAlpha(lua_State *lua_state) {

    UByte * _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (UByte *)iImage_GetAlpha(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iImage_SetFormat(_swigobj,_swigarg0)  (_swigobj->SetFormat(_swigarg0))
static int _wrap_iImage_SetFormat(lua_State *lua_state) {

    iImage * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    iImage_SetFormat(_arg0,_arg1);
    return 1;
}
#define iImage_Clone(_swigobj)  (_swigobj->Clone())
static int _wrap_iImage_Clone(lua_State *lua_state) {

    iImage * _result;
    iImage * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iImage *)iImage_Clone(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iImage_Crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->Crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int _wrap_iImage_Crop(lua_State *lua_state) {

    iImage * _result;
    iImage * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iImage *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iImage *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
{
#ifdef LUA_MS
  _arg3 = (int ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (int ) lua_tonumber ( 4 );
#endif
}
{
#ifdef LUA_MS
  _arg4 = (int ) lua_tonumber (lua_state,  5 );
#else
  _arg4 = (int ) lua_tonumber ( 5 );
#endif
}
    _result = (iImage *)iImage_Crop(_arg0,_arg1,_arg2,_arg3,_arg4);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static void *SwigiTextureManagerToiBase(void *ptr) {
    iTextureManager *src;
    iBase *dest;
    src = (iTextureManager *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iTextureManager_RegisterTexture(_swigobj,_swigarg0,_swigarg1)  (_swigobj->RegisterTexture(_swigarg0,_swigarg1))
static int _wrap_iTextureManager_RegisterTexture(lua_State *lua_state) {

    iTextureHandle * _result;
    iTextureManager * _arg0;
    iImage * _arg1;
    int  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (iImage *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (iImage *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
    _result = (iTextureHandle *)iTextureManager_RegisterTexture(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iTextureManager_PrepareTextures(_swigobj)  (_swigobj->PrepareTextures())
static int _wrap_iTextureManager_PrepareTextures(lua_State *lua_state) {

    iTextureManager * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iTextureManager_PrepareTextures(_arg0);
    return 1;
}
#define iTextureManager_FreeImages(_swigobj)  (_swigobj->FreeImages())
static int _wrap_iTextureManager_FreeImages(lua_State *lua_state) {

    iTextureManager * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iTextureManager_FreeImages(_arg0);
    return 1;
}
#define iTextureManager_ResetPalette(_swigobj)  (_swigobj->ResetPalette())
static int _wrap_iTextureManager_ResetPalette(lua_State *lua_state) {

    iTextureManager * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iTextureManager_ResetPalette(_arg0);
    return 1;
}
#define iTextureManager_ReserveColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->ReserveColor(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iTextureManager_ReserveColor(lua_State *lua_state) {

    iTextureManager * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
{
#ifdef LUA_MS
  _arg3 = (int ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (int ) lua_tonumber ( 4 );
#endif
}
    iTextureManager_ReserveColor(_arg0,_arg1,_arg2,_arg3);
    return 1;
}
#define iTextureManager_FindRGB(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->FindRGB(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iTextureManager_FindRGB(lua_State *lua_state) {

    int  _result;
    iTextureManager * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (int ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (int ) lua_tonumber ( 3 );
#endif
}
{
#ifdef LUA_MS
  _arg3 = (int ) lua_tonumber (lua_state,  4 );
#else
  _arg3 = (int ) lua_tonumber ( 4 );
#endif
}
    _result = (int )iTextureManager_FindRGB(_arg0,_arg1,_arg2,_arg3);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iTextureManager_SetPalette(_swigobj)  (_swigobj->SetPalette())
static int _wrap_iTextureManager_SetPalette(lua_State *lua_state) {

    iTextureManager * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iTextureManager_SetPalette(_arg0);
    return 1;
}
#define iTextureManager_SetVerbose(_swigobj,_swigarg0)  (_swigobj->SetVerbose(_swigarg0))
static int _wrap_iTextureManager_SetVerbose(lua_State *lua_state) {

    iTextureManager * _arg0;
    bool  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (bool ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (bool ) lua_tonumber ( 2 );
#endif
}
    iTextureManager_SetVerbose(_arg0,_arg1);
    return 1;
}
#define iTextureManager_GetTextureFormat(_swigobj)  (_swigobj->GetTextureFormat())
static int _wrap_iTextureManager_GetTextureFormat(lua_State *lua_state) {

    int  _result;
    iTextureManager * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iTextureManager *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iTextureManager *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iTextureManager_GetTextureFormat(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
static void *SwigiPolygonTextureToiBase(void *ptr) {
    iPolygonTexture *src;
    iBase *dest;
    src = (iPolygonTexture *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPolygonTexture_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
static int _wrap_iPolygonTexture_GetMaterialHandle(lua_State *lua_state) {

    iMaterialHandle * _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iMaterialHandle *)iPolygonTexture_GetMaterialHandle(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygonTexture_GetFDU(_swigobj)  (_swigobj->GetFDU())
static int _wrap_iPolygonTexture_GetFDU(lua_State *lua_state) {

    float  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (float )iPolygonTexture_GetFDU(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetFDV(_swigobj)  (_swigobj->GetFDV())
static int _wrap_iPolygonTexture_GetFDV(lua_State *lua_state) {

    float  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (float )iPolygonTexture_GetFDV(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int _wrap_iPolygonTexture_GetWidth(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetWidth(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int _wrap_iPolygonTexture_GetHeight(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetHeight(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetShiftU(_swigobj)  (_swigobj->GetShiftU())
static int _wrap_iPolygonTexture_GetShiftU(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetShiftU(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetIMinU(_swigobj)  (_swigobj->GetIMinU())
static int _wrap_iPolygonTexture_GetIMinU(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetIMinU(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetIMinV(_swigobj)  (_swigobj->GetIMinV())
static int _wrap_iPolygonTexture_GetIMinV(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetIMinV(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetTextureBox(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->GetTextureBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int _wrap_iPolygonTexture_GetTextureBox(lua_State *lua_state) {

    iPolygonTexture * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    float * _arg4;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  2 ))
    _arg1 = (float *) lua_touserdata (lua_state,  2 );
  else _arg1 = NULL;
#else
  if (!lua_isnil ( 2 )) _arg1 = (float *) lua_touserdata ( 2 );
  else _arg1 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (float *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (float *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  4 ))
    _arg3 = (float *) lua_touserdata (lua_state,  4 );
  else _arg3 = NULL;
#else
  if (!lua_isnil ( 4 )) _arg3 = (float *) lua_touserdata ( 4 );
  else _arg3 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  5 ))
    _arg4 = (float *) lua_touserdata (lua_state,  5 );
  else _arg4 = NULL;
#else
  if (!lua_isnil ( 5 )) _arg4 = (float *) lua_touserdata ( 5 );
  else _arg4 = NULL;
#endif
}
    iPolygonTexture_GetTextureBox(_arg0,*_arg1,*_arg2,*_arg3,*_arg4);
    return 1;
}
#define iPolygonTexture_GetOriginalWidth(_swigobj)  (_swigobj->GetOriginalWidth())
static int _wrap_iPolygonTexture_GetOriginalWidth(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetOriginalWidth(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetPolygon(_swigobj)  (_swigobj->GetPolygon())
static int _wrap_iPolygonTexture_GetPolygon(lua_State *lua_state) {

    iPolygon3D * _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iPolygon3D *)iPolygonTexture_GetPolygon(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygonTexture_DynamicLightsDirty(_swigobj)  (_swigobj->DynamicLightsDirty())
static int _wrap_iPolygonTexture_DynamicLightsDirty(lua_State *lua_state) {

    bool  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (bool )iPolygonTexture_DynamicLightsDirty(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_RecalculateDynamicLights(_swigobj)  (_swigobj->RecalculateDynamicLights())
static int _wrap_iPolygonTexture_RecalculateDynamicLights(lua_State *lua_state) {

    bool  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (bool )iPolygonTexture_RecalculateDynamicLights(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetLightMap(_swigobj)  (_swigobj->GetLightMap())
static int _wrap_iPolygonTexture_GetLightMap(lua_State *lua_state) {

    iLightMap * _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iLightMap *)iPolygonTexture_GetLightMap(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygonTexture_GetLightCellSize(_swigobj)  (_swigobj->GetLightCellSize())
static int _wrap_iPolygonTexture_GetLightCellSize(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetLightCellSize(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetLightCellShift(_swigobj)  (_swigobj->GetLightCellShift())
static int _wrap_iPolygonTexture_GetLightCellShift(lua_State *lua_state) {

    int  _result;
    iPolygonTexture * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iPolygonTexture_GetLightCellShift(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iPolygonTexture_GetCacheData(_swigobj,_swigarg0)  (_swigobj->GetCacheData(_swigarg0))
static int _wrap_iPolygonTexture_GetCacheData(lua_State *lua_state) {

    void * _result;
    iPolygonTexture * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    _result = (void *)iPolygonTexture_GetCacheData(_arg0,_arg1);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iPolygonTexture_SetCacheData(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetCacheData(_swigarg0,_swigarg1))
static int _wrap_iPolygonTexture_SetCacheData(lua_State *lua_state) {

    iPolygonTexture * _arg0;
    int  _arg1;
    void * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iPolygonTexture *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iPolygonTexture *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (void *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (void *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
    iPolygonTexture_SetCacheData(_arg0,_arg1,_arg2);
    return 1;
}
static void *SwigiEngineToiPlugin(void *ptr) {
    iEngine *src;
    iPlugin *dest;
    src = (iEngine *) ptr;
    dest = (iPlugin *) src;
    return (void *) dest;
}

static void *SwigiEngineToiBase(void *ptr) {
    iEngine *src;
    iBase *dest;
    src = (iEngine *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iEngine_GetTextureFormat(_swigobj)  (_swigobj->GetTextureFormat())
static int _wrap_iEngine_GetTextureFormat(lua_State *lua_state) {

    int  _result;
    iEngine * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (int )iEngine_GetTextureFormat(_arg0);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iEngine_SelectLibrary(_swigobj,_swigarg0)  (_swigobj->SelectLibrary(_swigarg0))
static int _wrap_iEngine_SelectLibrary(lua_State *lua_state) {

    iEngine * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    iEngine_SelectLibrary(_arg0,_arg1);
    return 1;
}
#define iEngine_DeleteLibrary(_swigobj,_swigarg0)  (_swigobj->DeleteLibrary(_swigarg0))
static int _wrap_iEngine_DeleteLibrary(lua_State *lua_state) {

    bool  _result;
    iEngine * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    _result = (bool )iEngine_DeleteLibrary(_arg0,_arg1);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iEngine_DeleteAll(_swigobj)  (_swigobj->DeleteAll())
static int _wrap_iEngine_DeleteAll(lua_State *lua_state) {

    iEngine * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    iEngine_DeleteAll(_arg0);
    return 1;
}
#define iEngine_CreateTexture(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->CreateTexture(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int _wrap_iEngine_CreateTexture(lua_State *lua_state) {

    iTextureWrapper * _result;
    iEngine * _arg0;
    char * _arg1;
    char * _arg2;
    csColor * _arg3;
    int  _arg4;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (char*) lua_tostring (lua_state,  3 );
#else
  _arg2 = (char*) lua_tostring ( 3 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  4 ))
    _arg3 = (csColor *) lua_touserdata (lua_state,  4 );
  else _arg3 = NULL;
#else
  if (!lua_isnil ( 4 )) _arg3 = (csColor *) lua_touserdata ( 4 );
  else _arg3 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg4 = (int ) lua_tonumber (lua_state,  5 );
#else
  _arg4 = (int ) lua_tonumber ( 5 );
#endif
}
    _result = (iTextureWrapper *)iEngine_CreateTexture(_arg0,_arg1,_arg2,_arg3,_arg4);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iEngine_CreateCamera(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->CreateCamera(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static int _wrap_iEngine_CreateCamera(lua_State *lua_state) {

    bool  _result;
    iEngine * _arg0;
    char * _arg1;
    char * _arg2;
    csVector3 * _arg3;
    csVector3 * _arg4;
    csVector3 * _arg5;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (char*) lua_tostring (lua_state,  3 );
#else
  _arg2 = (char*) lua_tostring ( 3 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  4 ))
    _arg3 = (csVector3 *) lua_touserdata (lua_state,  4 );
  else _arg3 = NULL;
#else
  if (!lua_isnil ( 4 )) _arg3 = (csVector3 *) lua_touserdata ( 4 );
  else _arg3 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  5 ))
    _arg4 = (csVector3 *) lua_touserdata (lua_state,  5 );
  else _arg4 = NULL;
#else
  if (!lua_isnil ( 5 )) _arg4 = (csVector3 *) lua_touserdata ( 5 );
  else _arg4 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  6 ))
    _arg5 = (csVector3 *) lua_touserdata (lua_state,  6 );
  else _arg5 = NULL;
#else
  if (!lua_isnil ( 6 )) _arg5 = (csVector3 *) lua_touserdata ( 6 );
  else _arg5 = NULL;
#endif
}
    _result = (bool )iEngine_CreateCamera(_arg0,_arg1,_arg2,*_arg3,*_arg4,*_arg5);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iEngine_CreateKey(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreateKey(_swigarg0,_swigarg1))
static int _wrap_iEngine_CreateKey(lua_State *lua_state) {

    bool  _result;
    iEngine * _arg0;
    char * _arg1;
    char * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (char*) lua_tostring (lua_state,  3 );
#else
  _arg2 = (char*) lua_tostring ( 3 );
#endif
}
    _result = (bool )iEngine_CreateKey(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iEngine_CreatePlane(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->CreatePlane(_swigarg0,_swigarg1,_swigarg2))
static int _wrap_iEngine_CreatePlane(lua_State *lua_state) {

    bool  _result;
    iEngine * _arg0;
    char * _arg1;
    csVector3 * _arg2;
    csMatrix3 * _arg3;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (csVector3 *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (csVector3 *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  4 ))
    _arg3 = (csMatrix3 *) lua_touserdata (lua_state,  4 );
  else _arg3 = NULL;
#else
  if (!lua_isnil ( 4 )) _arg3 = (csMatrix3 *) lua_touserdata ( 4 );
  else _arg3 = NULL;
#endif
}
    _result = (bool )iEngine_CreatePlane(_arg0,_arg1,*_arg2,*_arg3);
{
#ifdef LUA_MS
  lua_pushnumber (lua_state, (double) _result);
#else
  lua_pushnumber ((double) _result);
#endif
}
    return 1;
}
#define iEngine_CreateSector(_swigobj,_swigarg0)  (_swigobj->CreateSector(_swigarg0))
static int _wrap_iEngine_CreateSector(lua_State *lua_state) {

    iSector * _result;
    iEngine * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    _result = (iSector *)iEngine_CreateSector(_arg0,_arg1);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iEngine_FindSector(_swigobj,_swigarg0)  (_swigobj->FindSector(_swigarg0))
static int _wrap_iEngine_FindSector(lua_State *lua_state) {

    iSector * _result;
    iEngine * _arg0;
    char * _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
    _result = (iSector *)iEngine_FindSector(_arg0,_arg1);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iEngine_GetSector(_swigobj,_swigarg0)  (_swigobj->GetSector(_swigarg0))
static int _wrap_iEngine_GetSector(lua_State *lua_state) {

    iSector * _result;
    iEngine * _arg0;
    int  _arg1;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
    _result = (iSector *)iEngine_GetSector(_arg0,_arg1);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iEngine_CreateThing(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreateThing(_swigarg0,_swigarg1))
static int _wrap_iEngine_CreateThing(lua_State *lua_state) {

    iThing * _result;
    iEngine * _arg0;
    char * _arg1;
    iSector * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  3 ))
    _arg2 = (iSector *) lua_touserdata (lua_state,  3 );
  else _arg2 = NULL;
#else
  if (!lua_isnil ( 3 )) _arg2 = (iSector *) lua_touserdata ( 3 );
  else _arg2 = NULL;
#endif
}
    _result = (iThing *)iEngine_CreateThing(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
#define iEngine_FindMaterial(_swigobj,_swigarg0,_swigarg1)  (_swigobj->FindMaterial(_swigarg0,_swigarg1))
static int _wrap_iEngine_FindMaterial(lua_State *lua_state) {

    iMaterialWrapper * _result;
    iEngine * _arg0;
    char * _arg1;
    bool  _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iEngine *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iEngine *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (char*) lua_tostring (lua_state,  2 );
#else
  _arg1 = (char*) lua_tostring ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (bool ) lua_tonumber (lua_state,  3 );
#else
  _arg2 = (bool ) lua_tonumber ( 3 );
#endif
}
    _result = (iMaterialWrapper *)iEngine_FindMaterial(_arg0,_arg1,_arg2);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static void *SwigiSystemToiBase(void *ptr) {
    iSystem *src;
    iBase *dest;
    src = (iSystem *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static iEngine * iSystem_Query_iEngine(iSystem *self) {
      return CS_QUERY_PLUGIN(self, iEngine);
    }
static int _wrap_iSystem_Query_iEngine(lua_State *lua_state) {

    iEngine * _result;
    iSystem * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iSystem *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iSystem *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iEngine *)iSystem_Query_iEngine(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static iGraphics3D * iSystem_Query_iGraphics3D(iSystem *self) {
      return CS_QUERY_PLUGIN(self, iGraphics3D);
    }
static int _wrap_iSystem_Query_iGraphics3D(lua_State *lua_state) {

    iGraphics3D * _result;
    iSystem * _arg0;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iSystem *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iSystem *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
    _result = (iGraphics3D *)iSystem_Query_iGraphics3D(_arg0);
{
#ifdef LUA_MS
  if (_result != NULL) lua_pushuserdata (lua_state, _result);
  else lua_pushnil (lua_state);
#else
  if (_result != NULL) lua_pushuserdata (_result);
  else lua_pushnil ();
#endif
}
    return 1;
}
static void  iSystem_Print(iSystem *self,int  mode,const char * format) {
      self->Printf(mode, format); 
    }
static int _wrap_iSystem_Print(lua_State *lua_state) {

    iSystem * _arg0;
    int  _arg1;
    char * _arg2;

{
#ifdef LUA_MS
  if (!lua_isnil (lua_state,  1 ))
    _arg0 = (iSystem *) lua_touserdata (lua_state,  1 );
  else _arg0 = NULL;
#else
  if (!lua_isnil ( 1 )) _arg0 = (iSystem *) lua_touserdata ( 1 );
  else _arg0 = NULL;
#endif
}
{
#ifdef LUA_MS
  _arg1 = (int ) lua_tonumber (lua_state,  2 );
#else
  _arg1 = (int ) lua_tonumber ( 2 );
#endif
}
{
#ifdef LUA_MS
  _arg2 = (char*) lua_tostring (lua_state,  3 );
#else
  _arg2 = (char*) lua_tostring ( 3 );
#endif
}
    iSystem_Print(_arg0,_arg1,_arg2);
    return 1;
}
void cspace_init (lua_State *lua_state) {
	 lua_register (lua_state, "MakeVersion",_wrap_MakeVersion);
	 lua_register (lua_state, "GetSystem",_wrap_GetSystem);
	 lua_register (lua_state, "GetMyPtr",_wrap_GetMyPtr);
	 lua_register (lua_state, "iSCF_scfCreateInstance",_wrap_iSCF_scfCreateInstance);
	 lua_register (lua_state, "csVector3_x_set",_wrap_csVector3_x_set);
	 lua_register (lua_state, "csVector3_x_get",_wrap_csVector3_x_get);
	 lua_register (lua_state, "csVector3_y_set",_wrap_csVector3_y_set);
	 lua_register (lua_state, "csVector3_y_get",_wrap_csVector3_y_get);
	 lua_register (lua_state, "csVector3_z_set",_wrap_csVector3_z_set);
	 lua_register (lua_state, "csVector3_z_get",_wrap_csVector3_z_get);
	 lua_register (lua_state, "new_csVector3",_wrap_new_csVector3);
	 lua_register (lua_state, "csRGBpixel_red_set",_wrap_csRGBpixel_red_set);
	 lua_register (lua_state, "csRGBpixel_red_get",_wrap_csRGBpixel_red_get);
	 lua_register (lua_state, "csRGBpixel_green_set",_wrap_csRGBpixel_green_set);
	 lua_register (lua_state, "csRGBpixel_green_get",_wrap_csRGBpixel_green_get);
	 lua_register (lua_state, "csRGBpixel_blue_set",_wrap_csRGBpixel_blue_set);
	 lua_register (lua_state, "csRGBpixel_blue_get",_wrap_csRGBpixel_blue_get);
	 lua_register (lua_state, "csRGBpixel_alpha_set",_wrap_csRGBpixel_alpha_set);
	 lua_register (lua_state, "csRGBpixel_alpha_get",_wrap_csRGBpixel_alpha_get);
	 lua_register (lua_state, "iPlugin_Initialize",_wrap_iPlugin_Initialize);
	 lua_register (lua_state, "iPlugin_HandleEvent",_wrap_iPlugin_HandleEvent);
	 lua_register (lua_state, "iTextureHandle_GetMipMapDimensions",_wrap_iTextureHandle_GetMipMapDimensions);
	 lua_register (lua_state, "iTextureHandle_GetMeanColor",_wrap_iTextureHandle_GetMeanColor);
	 lua_register (lua_state, "iTextureHandle_GetCacheData",_wrap_iTextureHandle_GetCacheData);
	 lua_register (lua_state, "iTextureHandle_SetCacheData",_wrap_iTextureHandle_SetCacheData);
	 lua_register (lua_state, "iTextureHandle_GetPrivateObject",_wrap_iTextureHandle_GetPrivateObject);
	 lua_register (lua_state, "iMaterialHandle_GetTexture",_wrap_iMaterialHandle_GetTexture);
	 lua_register (lua_state, "iMaterialHandle_GetFlatColor",_wrap_iMaterialHandle_GetFlatColor);
	 lua_register (lua_state, "iMaterialHandle_GetReflection",_wrap_iMaterialHandle_GetReflection);
	 lua_register (lua_state, "iMaterialHandle_Prepare",_wrap_iMaterialHandle_Prepare);
	 lua_register (lua_state, "iMaterialWrapper_GetMaterialHandle",_wrap_iMaterialWrapper_GetMaterialHandle);
	 lua_register (lua_state, "iGraphics3D_Initialize",_wrap_iGraphics3D_Initialize);
	 lua_register (lua_state, "iGraphics3D_Open",_wrap_iGraphics3D_Open);
	 lua_register (lua_state, "iGraphics3D_Close",_wrap_iGraphics3D_Close);
	 lua_register (lua_state, "iGraphics3D_SetDimensions",_wrap_iGraphics3D_SetDimensions);
	 lua_register (lua_state, "iGraphics3D_BeginDraw",_wrap_iGraphics3D_BeginDraw);
	 lua_register (lua_state, "iGraphics3D_FinishDraw",_wrap_iGraphics3D_FinishDraw);
	 lua_register (lua_state, "iGraphics3D_Print",_wrap_iGraphics3D_Print);
	 lua_register (lua_state, "iGraphics3D_DrawPolygon",_wrap_iGraphics3D_DrawPolygon);
	 lua_register (lua_state, "iGraphics3D_DrawPolygonDebug",_wrap_iGraphics3D_DrawPolygonDebug);
	 lua_register (lua_state, "iGraphics3D_DrawLine",_wrap_iGraphics3D_DrawLine);
	 lua_register (lua_state, "iGraphics3D_DrawTriangleMesh",_wrap_iGraphics3D_DrawTriangleMesh);
	 lua_register (lua_state, "iGraphics3D_DrawPolygonMesh",_wrap_iGraphics3D_DrawPolygonMesh);
	 lua_register (lua_state, "iGraphics3D_OpenFogObject",_wrap_iGraphics3D_OpenFogObject);
	 lua_register (lua_state, "iGraphics3D_DrawFogPolygon",_wrap_iGraphics3D_DrawFogPolygon);
	 lua_register (lua_state, "iGraphics3D_CloseFogObject",_wrap_iGraphics3D_CloseFogObject);
	 lua_register (lua_state, "iGraphics3D_GetCaps",_wrap_iGraphics3D_GetCaps);
	 lua_register (lua_state, "iGraphics3D_GetZBuffAt",_wrap_iGraphics3D_GetZBuffAt);
	 lua_register (lua_state, "iGraphics3D_GetZBuffValue",_wrap_iGraphics3D_GetZBuffValue);
	 lua_register (lua_state, "iGraphics3D_DumpCache",_wrap_iGraphics3D_DumpCache);
	 lua_register (lua_state, "iGraphics3D_ClearCache",_wrap_iGraphics3D_ClearCache);
	 lua_register (lua_state, "iGraphics3D_RemoveFromCache",_wrap_iGraphics3D_RemoveFromCache);
	 lua_register (lua_state, "iGraphics3D_GetWidth",_wrap_iGraphics3D_GetWidth);
	 lua_register (lua_state, "iGraphics3D_GetHeight",_wrap_iGraphics3D_GetHeight);
	 lua_register (lua_state, "iGraphics3D_SetPerspectiveCenter",_wrap_iGraphics3D_SetPerspectiveCenter);
	 lua_register (lua_state, "iGraphics3D_SetPerspectiveAspect",_wrap_iGraphics3D_SetPerspectiveAspect);
	 lua_register (lua_state, "iGraphics3D_SetObjectToCamera",_wrap_iGraphics3D_SetObjectToCamera);
	 lua_register (lua_state, "iGraphics3D_SetClipper",_wrap_iGraphics3D_SetClipper);
	 lua_register (lua_state, "iGraphics3D_GetDriver2D",_wrap_iGraphics3D_GetDriver2D);
	 lua_register (lua_state, "iGraphics3D_GetTextureManager",_wrap_iGraphics3D_GetTextureManager);
	 lua_register (lua_state, "iGraphics3D_CreateHalo",_wrap_iGraphics3D_CreateHalo);
	 lua_register (lua_state, "iGraphics3D_DrawPixmap",_wrap_iGraphics3D_DrawPixmap);
	 lua_register (lua_state, "iGraphics3D_HandleEvent",_wrap_iPlugin_HandleEvent);
	 lua_register (lua_state, "iCamera_GetFOV",_wrap_iCamera_GetFOV);
	 lua_register (lua_state, "iCamera_GetInvFOV",_wrap_iCamera_GetInvFOV);
	 lua_register (lua_state, "iSector_CreateBSP",_wrap_iSector_CreateBSP);
	 lua_register (lua_state, "iThing_GetName",_wrap_iThing_GetName);
	 lua_register (lua_state, "iThing_SetName",_wrap_iThing_SetName);
	 lua_register (lua_state, "iThing_CompressVertices",_wrap_iThing_CompressVertices);
	 lua_register (lua_state, "iThing_GetPolygonCount",_wrap_iThing_GetPolygonCount);
	 lua_register (lua_state, "iThing_GetPolygon",_wrap_iThing_GetPolygon);
	 lua_register (lua_state, "iThing_CreatePolygon",_wrap_iThing_CreatePolygon);
	 lua_register (lua_state, "iThing_GetVertexCount",_wrap_iThing_GetVertexCount);
	 lua_register (lua_state, "iThing_GetVertex",_wrap_iThing_GetVertex);
	 lua_register (lua_state, "iThing_GetVertexW",_wrap_iThing_GetVertexW);
	 lua_register (lua_state, "iThing_GetVertexC",_wrap_iThing_GetVertexC);
	 lua_register (lua_state, "iThing_CreateVertex",_wrap_iThing_CreateVertex);
	 lua_register (lua_state, "iThing_CreateKey",_wrap_iThing_CreateKey);
	 lua_register (lua_state, "iPolygon3D_GetName",_wrap_iPolygon3D_GetName);
	 lua_register (lua_state, "iPolygon3D_SetName",_wrap_iPolygon3D_SetName);
	 lua_register (lua_state, "iPolygon3D_GetLightMap",_wrap_iPolygon3D_GetLightMap);
	 lua_register (lua_state, "iPolygon3D_GetMaterialHandle",_wrap_iPolygon3D_GetMaterialHandle);
	 lua_register (lua_state, "iPolygon3D_SetMaterial",_wrap_iPolygon3D_SetMaterial);
	 lua_register (lua_state, "iPolygon3D_GetVertexCount",_wrap_iPolygon3D_GetVertexCount);
	 lua_register (lua_state, "iPolygon3D_GetVertex",_wrap_iPolygon3D_GetVertex);
	 lua_register (lua_state, "iPolygon3D_GetVertexW",_wrap_iPolygon3D_GetVertexW);
	 lua_register (lua_state, "iPolygon3D_GetVertexC",_wrap_iPolygon3D_GetVertexC);
	 lua_register (lua_state, "iPolygon3D_CreateVertexByIndex",_wrap_iPolygon3D_CreateVertexByIndex);
	 lua_register (lua_state, "iPolygon3D_CreateVertex",_wrap_iPolygon3D_CreateVertex);
	 lua_register (lua_state, "iPolygon3D_GetAlpha",_wrap_iPolygon3D_GetAlpha);
	 lua_register (lua_state, "iPolygon3D_SetAlpha",_wrap_iPolygon3D_SetAlpha);
	 lua_register (lua_state, "iPolygon3D_CreatePlane",_wrap_iPolygon3D_CreatePlane);
	 lua_register (lua_state, "iPolygon3D_SetPlane",_wrap_iPolygon3D_SetPlane);
	 lua_register (lua_state, "iPolygon3D_SetTextureSpace",_wrap_iPolygon3D_SetTextureSpace);
	 lua_register (lua_state, "iImage_GetImageData",_wrap_iImage_GetImageData);
	 lua_register (lua_state, "iImage_GetWidth",_wrap_iImage_GetWidth);
	 lua_register (lua_state, "iImage_GetHeight",_wrap_iImage_GetHeight);
	 lua_register (lua_state, "iImage_GetSize",_wrap_iImage_GetSize);
	 lua_register (lua_state, "iImage_Rescale",_wrap_iImage_Rescale);
	 lua_register (lua_state, "iImage_MipMap",_wrap_iImage_MipMap);
	 lua_register (lua_state, "iImage_SetName",_wrap_iImage_SetName);
	 lua_register (lua_state, "iImage_GetName",_wrap_iImage_GetName);
	 lua_register (lua_state, "iImage_GetFormat",_wrap_iImage_GetFormat);
	 lua_register (lua_state, "iImage_GetPalette",_wrap_iImage_GetPalette);
	 lua_register (lua_state, "iImage_GetAlpha",_wrap_iImage_GetAlpha);
	 lua_register (lua_state, "iImage_SetFormat",_wrap_iImage_SetFormat);
	 lua_register (lua_state, "iImage_Clone",_wrap_iImage_Clone);
	 lua_register (lua_state, "iImage_Crop",_wrap_iImage_Crop);
	 lua_register (lua_state, "iTextureManager_RegisterTexture",_wrap_iTextureManager_RegisterTexture);
	 lua_register (lua_state, "iTextureManager_PrepareTextures",_wrap_iTextureManager_PrepareTextures);
	 lua_register (lua_state, "iTextureManager_FreeImages",_wrap_iTextureManager_FreeImages);
	 lua_register (lua_state, "iTextureManager_ResetPalette",_wrap_iTextureManager_ResetPalette);
	 lua_register (lua_state, "iTextureManager_ReserveColor",_wrap_iTextureManager_ReserveColor);
	 lua_register (lua_state, "iTextureManager_FindRGB",_wrap_iTextureManager_FindRGB);
	 lua_register (lua_state, "iTextureManager_SetPalette",_wrap_iTextureManager_SetPalette);
	 lua_register (lua_state, "iTextureManager_SetVerbose",_wrap_iTextureManager_SetVerbose);
	 lua_register (lua_state, "iTextureManager_GetTextureFormat",_wrap_iTextureManager_GetTextureFormat);
	 lua_register (lua_state, "iPolygonTexture_GetMaterialHandle",_wrap_iPolygonTexture_GetMaterialHandle);
	 lua_register (lua_state, "iPolygonTexture_GetFDU",_wrap_iPolygonTexture_GetFDU);
	 lua_register (lua_state, "iPolygonTexture_GetFDV",_wrap_iPolygonTexture_GetFDV);
	 lua_register (lua_state, "iPolygonTexture_GetWidth",_wrap_iPolygonTexture_GetWidth);
	 lua_register (lua_state, "iPolygonTexture_GetHeight",_wrap_iPolygonTexture_GetHeight);
	 lua_register (lua_state, "iPolygonTexture_GetShiftU",_wrap_iPolygonTexture_GetShiftU);
	 lua_register (lua_state, "iPolygonTexture_GetIMinU",_wrap_iPolygonTexture_GetIMinU);
	 lua_register (lua_state, "iPolygonTexture_GetIMinV",_wrap_iPolygonTexture_GetIMinV);
	 lua_register (lua_state, "iPolygonTexture_GetTextureBox",_wrap_iPolygonTexture_GetTextureBox);
	 lua_register (lua_state, "iPolygonTexture_GetOriginalWidth",_wrap_iPolygonTexture_GetOriginalWidth);
	 lua_register (lua_state, "iPolygonTexture_GetPolygon",_wrap_iPolygonTexture_GetPolygon);
	 lua_register (lua_state, "iPolygonTexture_DynamicLightsDirty",_wrap_iPolygonTexture_DynamicLightsDirty);
	 lua_register (lua_state, "iPolygonTexture_RecalculateDynamicLights",_wrap_iPolygonTexture_RecalculateDynamicLights);
	 lua_register (lua_state, "iPolygonTexture_GetLightMap",_wrap_iPolygonTexture_GetLightMap);
	 lua_register (lua_state, "iPolygonTexture_GetLightCellSize",_wrap_iPolygonTexture_GetLightCellSize);
	 lua_register (lua_state, "iPolygonTexture_GetLightCellShift",_wrap_iPolygonTexture_GetLightCellShift);
	 lua_register (lua_state, "iPolygonTexture_GetCacheData",_wrap_iPolygonTexture_GetCacheData);
	 lua_register (lua_state, "iPolygonTexture_SetCacheData",_wrap_iPolygonTexture_SetCacheData);
	 lua_register (lua_state, "iEngine_GetTextureFormat",_wrap_iEngine_GetTextureFormat);
	 lua_register (lua_state, "iEngine_SelectLibrary",_wrap_iEngine_SelectLibrary);
	 lua_register (lua_state, "iEngine_DeleteLibrary",_wrap_iEngine_DeleteLibrary);
	 lua_register (lua_state, "iEngine_DeleteAll",_wrap_iEngine_DeleteAll);
	 lua_register (lua_state, "iEngine_CreateTexture",_wrap_iEngine_CreateTexture);
	 lua_register (lua_state, "iEngine_CreateCamera",_wrap_iEngine_CreateCamera);
	 lua_register (lua_state, "iEngine_CreateKey",_wrap_iEngine_CreateKey);
	 lua_register (lua_state, "iEngine_CreatePlane",_wrap_iEngine_CreatePlane);
	 lua_register (lua_state, "iEngine_CreateSector",_wrap_iEngine_CreateSector);
	 lua_register (lua_state, "iEngine_FindSector",_wrap_iEngine_FindSector);
	 lua_register (lua_state, "iEngine_GetSector",_wrap_iEngine_GetSector);
	 lua_register (lua_state, "iEngine_CreateThing",_wrap_iEngine_CreateThing);
	 lua_register (lua_state, "iEngine_FindMaterial",_wrap_iEngine_FindMaterial);
	 lua_register (lua_state, "iEngine_Initialize",_wrap_iPlugin_Initialize);
	 lua_register (lua_state, "iEngine_HandleEvent",_wrap_iPlugin_HandleEvent);
	 lua_register (lua_state, "iSystem_Query_iEngine",_wrap_iSystem_Query_iEngine);
	 lua_register (lua_state, "iSystem_Query_iGraphics3D",_wrap_iSystem_Query_iGraphics3D);
	 lua_register (lua_state, "iSystem_Print",_wrap_iSystem_Print);
/*
 * These are the pointer type-equivalency mappings. 
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("_signed_long","_long",0);
	 SWIG_RegisterMapping("_struct_iPlugin","_struct_iEngine",SwigiEngineToiPlugin);
	 SWIG_RegisterMapping("_struct_iPlugin","_iEngine",SwigiEngineToiPlugin);
	 SWIG_RegisterMapping("_struct_iPlugin","_struct_iGraphics3D",SwigiGraphics3DToiPlugin);
	 SWIG_RegisterMapping("_struct_iPlugin","_iGraphics3D",SwigiGraphics3DToiPlugin);
	 SWIG_RegisterMapping("_struct_iPlugin","_iPlugin",0);
	 SWIG_RegisterMapping("_iEngine","_struct_iEngine",0);
	 SWIG_RegisterMapping("_struct_iSystem","_iSystem",0);
	 SWIG_RegisterMapping("_long","_unsigned_long",0);
	 SWIG_RegisterMapping("_long","_signed_long",0);
	 SWIG_RegisterMapping("_csRGBpixel","_struct_csRGBpixel",0);
	 SWIG_RegisterMapping("_struct_iTextureHandle","_iTextureHandle",0);
	 SWIG_RegisterMapping("_iSCF","_struct_iSCF",0);
	 SWIG_RegisterMapping("_iCamera","_struct_iCamera",0);
	 SWIG_RegisterMapping("_struct_iSector","_iSector",0);
	 SWIG_RegisterMapping("_struct_iMaterialWrapper","_iMaterialWrapper",0);
	 SWIG_RegisterMapping("_struct_csRGBpixel","_csRGBpixel",0);
	 SWIG_RegisterMapping("_struct_iEngine","_iEngine",0);
	 SWIG_RegisterMapping("_iMaterialWrapper","_struct_iMaterialWrapper",0);
	 SWIG_RegisterMapping("_struct_iSCF","_iSCF",0);
	 SWIG_RegisterMapping("_struct_iThing","_iThing",0);
	 SWIG_RegisterMapping("_unsigned_long","_long",0);
	 SWIG_RegisterMapping("_struct_iCamera","_iCamera",0);
	 SWIG_RegisterMapping("_iGraphics3D","_struct_iGraphics3D",0);
	 SWIG_RegisterMapping("_signed_int","_int",0);
	 SWIG_RegisterMapping("_struct_iTextureWrapper","_iTextureWrapper",0);
	 SWIG_RegisterMapping("_iTextureWrapper","_struct_iTextureWrapper",0);
	 SWIG_RegisterMapping("_unsigned_short","_short",0);
	 SWIG_RegisterMapping("_iTextureHandle","_struct_iTextureHandle",0);
	 SWIG_RegisterMapping("_csVector3","_class_csVector3",0);
	 SWIG_RegisterMapping("_struct_iImage","_iImage",0);
	 SWIG_RegisterMapping("_signed_short","_short",0);
	 SWIG_RegisterMapping("_iPolygon3D","_struct_iPolygon3D",0);
	 SWIG_RegisterMapping("_unsigned_int","_int",0);
	 SWIG_RegisterMapping("_short","_unsigned_short",0);
	 SWIG_RegisterMapping("_short","_signed_short",0);
	 SWIG_RegisterMapping("_struct_iPolygonTexture","_iPolygonTexture",0);
	 SWIG_RegisterMapping("_int","_unsigned_int",0);
	 SWIG_RegisterMapping("_int","_signed_int",0);
	 SWIG_RegisterMapping("_class_csVector3","_csVector3",0);
	 SWIG_RegisterMapping("_iThing","_struct_iThing",0);
	 SWIG_RegisterMapping("_iPolygonTexture","_struct_iPolygonTexture",0);
	 SWIG_RegisterMapping("_iPlugin","_struct_iEngine",SwigiEngineToiPlugin);
	 SWIG_RegisterMapping("_iPlugin","_iEngine",SwigiEngineToiPlugin);
	 SWIG_RegisterMapping("_iPlugin","_struct_iGraphics3D",SwigiGraphics3DToiPlugin);
	 SWIG_RegisterMapping("_iPlugin","_iGraphics3D",SwigiGraphics3DToiPlugin);
	 SWIG_RegisterMapping("_iPlugin","_struct_iPlugin",0);
	 SWIG_RegisterMapping("_struct_iTextureManager","_iTextureManager",0);
	 SWIG_RegisterMapping("_iTextureManager","_struct_iTextureManager",0);
	 SWIG_RegisterMapping("_struct_iPolygon3D","_iPolygon3D",0);
	 SWIG_RegisterMapping("_iSystem","_struct_iSystem",0);
	 SWIG_RegisterMapping("_struct_iMaterialHandle","_iMaterialHandle",0);
	 SWIG_RegisterMapping("_iMaterialHandle","_struct_iMaterialHandle",0);
	 SWIG_RegisterMapping("_struct_iGraphics3D","_iGraphics3D",0);
	 SWIG_RegisterMapping("_iImage","_struct_iImage",0);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iSystem",SwigiSystemToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iSystem",SwigiSystemToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iEngine",SwigiEngineToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iEngine",SwigiEngineToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iPolygonTexture",SwigiPolygonTextureToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iPolygonTexture",SwigiPolygonTextureToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iTextureManager",SwigiTextureManagerToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iTextureManager",SwigiTextureManagerToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iImage",SwigiImageToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iImage",SwigiImageToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iPolygon3D",SwigiPolygon3DToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iPolygon3D",SwigiPolygon3DToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iThing",SwigiThingToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iThing",SwigiThingToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iSector",SwigiSectorToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iSector",SwigiSectorToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iCamera",SwigiCameraToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iCamera",SwigiCameraToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iGraphics3D",SwigiGraphics3DToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iGraphics3D",SwigiGraphics3DToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iMaterialWrapper",SwigiMaterialWrapperToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iMaterialWrapper",SwigiMaterialWrapperToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iMaterialHandle",SwigiMaterialHandleToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iMaterialHandle",SwigiMaterialHandleToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iTextureHandle",SwigiTextureHandleToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iTextureHandle",SwigiTextureHandleToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iTextureWrapper",SwigiTextureWrapperToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iTextureWrapper",SwigiTextureWrapperToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iPlugin",SwigiPluginToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iPlugin",SwigiPluginToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_struct_iSCF",SwigiSCFToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iSCF",SwigiSCFToiBase);
	 SWIG_RegisterMapping("_struct_iBase","_iBase",0);
	 SWIG_RegisterMapping("_iSector","_struct_iSector",0);
	 SWIG_RegisterMapping("_iBase","_struct_iSystem",SwigiSystemToiBase);
	 SWIG_RegisterMapping("_iBase","_iSystem",SwigiSystemToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iEngine",SwigiEngineToiBase);
	 SWIG_RegisterMapping("_iBase","_iEngine",SwigiEngineToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iPolygonTexture",SwigiPolygonTextureToiBase);
	 SWIG_RegisterMapping("_iBase","_iPolygonTexture",SwigiPolygonTextureToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iTextureManager",SwigiTextureManagerToiBase);
	 SWIG_RegisterMapping("_iBase","_iTextureManager",SwigiTextureManagerToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iImage",SwigiImageToiBase);
	 SWIG_RegisterMapping("_iBase","_iImage",SwigiImageToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iPolygon3D",SwigiPolygon3DToiBase);
	 SWIG_RegisterMapping("_iBase","_iPolygon3D",SwigiPolygon3DToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iThing",SwigiThingToiBase);
	 SWIG_RegisterMapping("_iBase","_iThing",SwigiThingToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iSector",SwigiSectorToiBase);
	 SWIG_RegisterMapping("_iBase","_iSector",SwigiSectorToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iCamera",SwigiCameraToiBase);
	 SWIG_RegisterMapping("_iBase","_iCamera",SwigiCameraToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iGraphics3D",SwigiGraphics3DToiBase);
	 SWIG_RegisterMapping("_iBase","_iGraphics3D",SwigiGraphics3DToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iMaterialWrapper",SwigiMaterialWrapperToiBase);
	 SWIG_RegisterMapping("_iBase","_iMaterialWrapper",SwigiMaterialWrapperToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iMaterialHandle",SwigiMaterialHandleToiBase);
	 SWIG_RegisterMapping("_iBase","_iMaterialHandle",SwigiMaterialHandleToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iTextureHandle",SwigiTextureHandleToiBase);
	 SWIG_RegisterMapping("_iBase","_iTextureHandle",SwigiTextureHandleToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iTextureWrapper",SwigiTextureWrapperToiBase);
	 SWIG_RegisterMapping("_iBase","_iTextureWrapper",SwigiTextureWrapperToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iPlugin",SwigiPluginToiBase);
	 SWIG_RegisterMapping("_iBase","_iPlugin",SwigiPluginToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iSCF",SwigiSCFToiBase);
	 SWIG_RegisterMapping("_iBase","_iSCF",SwigiSCFToiBase);
	 SWIG_RegisterMapping("_iBase","_struct_iBase",0);
}
