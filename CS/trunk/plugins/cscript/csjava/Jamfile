SubDir TOP plugins cscript csjava ;

if ! $(CSJAVA.MODULE.PREFIX) && ! $(CSJAVA.MODULE.SUFFIX)
{
  switch $(TARGET.OS)
  {
  case WIN32 :
    CSJAVA.MODULE.PREFIX = ;
    CSJAVA.MODULE.SUFFIX = .dll ;
  case MACOS_X :
    CSJAVA.MODULE.PREFIX = lib ;
    CSJAVA.MODULE.SUFFIX = .jnilib ;
  case UNIX :
    CSJAVA.MODULE.PREFIX = lib ;
    CSJAVA.MODULE.SUFFIX = .so ;
  case * :
    CSJAVA.MODULE.PREFIX = lib ;
    CSJAVA.MODULE.SUFFIX = .so ;
  }
}

if $(JAVA.AVAILABLE) = "yes" && $(ANT) && $(CMD.SWIG) &&
  ! [ Property build : projgen ]
{
  local common = [ DoSourceGrist csjava.cpp ] ;

  local javabase = [ ConcatDirs $(LOCATE_TARGET) src ] ;
  local javadir = [ ConcatDirs $(javabase) com crystalspace ] ;
  Depends $(common) : $(javadir:G=dir) ;
  MkDir $(javadir:G=dir) ;

  {
    local LOCATE_TARGET = $(javadir) ;
    Swig $(common) :
      [ DoSourceGrist cspace.i ] :
      java :
      -c++ -java -package com.crystalspace :
      [ ConcatDirs $(TOP) include ] :
      [ ConcatDirs $(TOP) include ivaria ] ;
  }
  CleanDir javaswigclean : $(javabase) ;
  Depends csjavaclean : javaswigclean ;

  NotFile csjava ;
  Depends plugins : csjava ;

  local desc = "pure Java module" ;
  Description csjava : $(desc) ;
  Help csjava : "Build the $(desc)" ;

  local javamod = "$(CSJAVA.MODULE.PREFIX)csjava$(CSJAVA.MODULE.SUFFIX)" ;
  local javamodsrc = $(common) [ Wildcard *.cpp ] ;
  local javamodobj = [ CompileObjects $(javamodsrc) ] ;
  javamod_TARGET = $(javamod) ;
  javamod_SOURCES = $(javamodsrc) ;
  javamod_OBJECTS = $(javamodobj) ;
  LinkWith javamod : cstool csgfx csgeom csutil ;
  ExternalLibs javamod : JAVA ;
  CFlags javamod : $(PLUGIN.CFLAGS) $(COMPILER.C++FLAGS.EXCEPTIONS.ENABLE) ;
  LFlags javamod : $(PLUGIN.LFLAGS) ;
  Depends csjava : $(javamod) ;
  MakeLocate $(javamod) : $(LOCATE_TARGET) ;
  Depends $(javamod) : $(javamodobj) ;
  LinkPlugin $(javamod) : $(javamodobj) ;

  local jar_extra = [ Wildcard [ ConcatDirs com crystalspace ] : *.java ] ;
  SEARCH on $(jar_extra) = $(SEARCH_SOURCE) ;
  MakeLocate $(jar_extra:BSG=built) : $(javadir) ;
  Clean csjavaclean : $(jar_extra:BSG=built) ;
  local i ;
  for i in $(jar_extra)
  {
    Depends $(i:BSG=built) : $(i) ;
    Copy $(i:BSG=built) : $(i) ;
  }

  local buildbase = [ ConcatDirs $(LOCATE_TARGET) build ] ;
  local buildxml = build.xml ;
  local classdir = [ ConcatDirs $(LOCATE_TARGET) classes ] ;
  local jar = crystalspace.jar ;
  jar = $(jar:G=csjava) ;
  SEARCH on $(buildxml) = $(SEARCH_SOURCE) ;
  Depends $(buildxml:G=build) : $(buildxml) ;
  MakeLocate $(buildxml:G=build) : $(LOCATE_TARGET) ;
  Copy $(buildxml:G=build) : $(buildxml) ;
  Clean csjavaclean : $(buildxml:G=build) ;
  Depends $(jar) : $(common) $(buildxml:G=build) $(jar_extra:BSG=built) ;
  Depends csjava : $(jar) ;
  MakeLocate $(jar) : $(LOCATE_TARGET) ;

  actions Ant
  {
    $(ANT) -quiet -emacs -Dbuild.compiler.emacs=true -buildfile $(>)
  }
  Ant $(jar) : $(buildxml:G=build) ;
  Clean csjavaclean : $(jar) ;
  CleanDir csjavaclean : $(buildbase) ;

  rule InstallJavaJar
  {
    local SUBDIR = $(2) ;
    InstallData $(1) : $(3) ;
  }
  InstallJavaJar $(jar) : $(LOCATE_TARGET) : java ;

  rule InstallJavamod
  {
    local plugindir = $(appdatadir) ;
    SystemInstallPlugin $(1) : $(2) ;
  }
  InstallJavamod $(javamod) : java ;

  Always csjavaclean ;
  NotFile csjavaclean ;
  Clean csjavaclean : $(javamod) $(javamodobj) ;
  Depends clean : csjavaclean ;
}
