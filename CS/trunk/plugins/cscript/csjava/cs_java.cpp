/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3u-20000807-1546 (Alpha 3)
 * 
 * Portions Copyright (c) 1995-2000
 * The University of Utah, The Regents of the University of California, and
 * The University of Chicago.  Permission is hereby granted to use, modify, 
 * and distribute this file in any manner provided this notice remains intact.
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/* Implementation : Java */

#include <jni.h>
#include <stdlib.h>

#ifdef __cplusplus
#define JCALL(func, jenv) jenv->func(
#else
#define JCALL(func, jenv) (*jenv)->func(jenv,
#endif

#define J_CLASSNAME cspace
#define J_PACKAGE

  #include "css.h"
//  #include "ispawn.h"

//***** SCF Wrappers
  int MakeVersion(int version0, int version1, int version2) {
    return SCF_CONSTRUCT_VERSION(version0, version1, version2);
  }

#include "isys/system.h"
#include "csparser/csloader.h"
iSystem* GetSystem() {
	return NULL;
}

void* GetMyPtr() { return NULL; }

extern "C"
JNIEXPORT jint JNICALL Java_cspace_%types(JNIEnv *jenv, jclass jcls, jintArray jarg0, jshortArray jarg1, jlongArray jarg2, jfloatArray jarg3, jdoubleArray jarg4, jstring jarg5, jlongArray jarg6, jlong jarg7) {
    jint _jresult = 0 ;
    int *arg0 ;
    short *arg1 ;
    long *arg2 ;
    float *arg3 ;
    double *arg4 ;
    char *arg5 ;
    char **arg6 ;
    void *arg7 ;
    jint* arg01 ;
    jsize arg02 = jenv->GetArrayLength(jarg0) ;
    int i;
    jshort* arg11 ;
    jsize arg12 = jenv->GetArrayLength(jarg1) ;
    int i1;
    jlong* arg21 ;
    jsize arg22 = jenv->GetArrayLength(jarg2) ;
    int i2;
    jfloat* arg31 ;
    jsize arg32 = jenv->GetArrayLength(jarg3) ;
    int i3;
    jdouble* arg41 ;
    jsize arg42 = jenv->GetArrayLength(jarg4) ;
    int i4;
    jlong* arg61 ;
    jsize arg62 = jenv->GetArrayLength(jarg6) ;
    int i5;
    int result ;
    
    arg01 = jenv->GetIntArrayElements(jarg0, 0);
    arg0 = (int *) malloc(arg02 * sizeof(int ));
    for(i=0; i<arg02; i++)
    arg0[i] = (int )arg01[i];
    arg11 = jenv->GetShortArrayElements(jarg1, 0);
    arg1 = (short *) malloc(arg12 * sizeof(short ));
    for(i=0; i<arg12; i++)
    arg1[i] = (short )arg11[i];
    arg21 = jenv->GetLongArrayElements(jarg2, 0);
    arg2 = (long *) malloc(arg22 * sizeof(long ));
    for(i=0; i<arg22; i++)
    arg2[i] = (long )arg21[i];
    arg31 = jenv->GetFloatArrayElements(jarg3, 0);
    arg3 = (float *) malloc(arg32 * sizeof(float ));
    for(i=0; i<arg32; i++)
    arg3[i] = (float )arg31[i];
    arg41 = jenv->GetDoubleArrayElements(jarg4, 0);
    arg4 = (double *) malloc(arg42 * sizeof(double ));
    for(i=0; i<arg42; i++)
    arg4[i] = (double )arg41[i];
    arg5 = (jarg5) ? (char *)jenv->GetStringUTFChars(jarg5, 0) : NULL;
    arg61 = jenv->GetLongArrayElements(jarg6, 0);
    arg6 = (char **) malloc(arg62 * sizeof(char *));
    for(i=0; i<arg62; i++)
    arg6[i] = *(char **)&arg61[i];
    arg7 = *(void **)&jarg7;
    result = %types(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    _jresult = (jint) result;
    for(i=0; i< 134913696; i++)
    arg01[i] = (jint) arg0[i];
    jenv->ReleaseIntArrayElements(jarg0, arg01, 0);
    free(arg0);
    for(i=0; i< 134915936; i++)
    arg11[i] = (jshort) arg1[i];
    jenv->ReleaseShortArrayElements(jarg1, arg11, 0);
    free(arg1);
    for(i=0; i< 134915624; i++)
    arg21[i] = (jlong) arg2[i];
    jenv->ReleaseLongArrayElements(jarg2, arg21, 0);
    free(arg2);
    for(i=0; i< 134915624; i++)
    arg31[i] = (jfloat) arg3[i];
    jenv->ReleaseFloatArrayElements(jarg3, arg31, 0);
    free(arg3);
    for(i=0; i< 134919624; i++)
    arg41[i] = (jdouble) arg4[i];
    jenv->ReleaseDoubleArrayElements(jarg4, arg41, 0);
    free(arg4);
    if(arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
    for(i=0; i< 134923936; i++)
    *(char **)&arg61[i] = arg6[i];
    jenv->ReleaseLongArrayElements(jarg6, arg61, 0);
    free(arg6);
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_MakeVersion(JNIEnv *jenv, jclass jcls, jint jarg0, jint jarg1, jint jarg2) {
    jint _jresult = 0 ;
    int arg0 ;
    int arg1 ;
    int arg2 ;
    int result ;
    
    arg0 = (int ) jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    result = MakeVersion(arg0,arg1,arg2);
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_GetSystem(JNIEnv *jenv, jclass jcls) {
    jlong _jresult = 0 ;
    iSystem *result ;
    
    result = GetSystem();
    *(iSystem **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_GetMyPtr(JNIEnv *jenv, jclass jcls) {
    jlong _jresult = 0 ;
    void *result ;
    
    result = GetMyPtr();
    *(void **)&_jresult = result;
    return _jresult;
}


static void *SwigiSCFToiBase(void *ptr) {
    iSCF *src;
    iBase *dest;
    src = (iSCF *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iSCF_1scfCreateInstance(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1, jstring jarg2, jint jarg3) {
    jlong _jresult = 0 ;
    iSCF *arg0 ;
    char *arg1 ;
    char *arg2 ;
    int arg3 ;
    void *result ;
    
    arg0 = *(iSCF **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg2 = (jarg2) ? (char *)jenv->GetStringUTFChars(jarg2, 0) : NULL;
    arg3 = (int ) jarg3;
    result = arg0->scfCreateInstance((const char*)arg1,(const char*)arg2,arg3);
    *(void **)&_jresult = result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    if(arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_set_1csVector3_1x(JNIEnv *jenv, jclass jcls, jlong jarg0, jfloat jarg1) {
    jfloat _jresult = 0 ;
    csVector3 *arg0 ;
    float arg1 ;
    float result ;
    
    arg0 = *(csVector3 **)&jarg0;
    arg1 = (float ) jarg1;
    result =  (arg0->x = arg1);
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_get_1csVector3_1x(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jfloat _jresult = 0 ;
    csVector3 *arg0 ;
    float result ;
    
    arg0 = *(csVector3 **)&jarg0;
    result =  (arg0->x);
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_set_1csVector3_1y(JNIEnv *jenv, jclass jcls, jlong jarg0, jfloat jarg1) {
    jfloat _jresult = 0 ;
    csVector3 *arg0 ;
    float arg1 ;
    float result ;
    
    arg0 = *(csVector3 **)&jarg0;
    arg1 = (float ) jarg1;
    result =  (arg0->y = arg1);
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_get_1csVector3_1y(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jfloat _jresult = 0 ;
    csVector3 *arg0 ;
    float result ;
    
    arg0 = *(csVector3 **)&jarg0;
    result =  (arg0->y);
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_set_1csVector3_1z(JNIEnv *jenv, jclass jcls, jlong jarg0, jfloat jarg1) {
    jfloat _jresult = 0 ;
    csVector3 *arg0 ;
    float arg1 ;
    float result ;
    
    arg0 = *(csVector3 **)&jarg0;
    arg1 = (float ) jarg1;
    result =  (arg0->z = arg1);
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_get_1csVector3_1z(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jfloat _jresult = 0 ;
    csVector3 *arg0 ;
    float result ;
    
    arg0 = *(csVector3 **)&jarg0;
    result =  (arg0->z);
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_new_1csVector3(JNIEnv *jenv, jclass jcls, jfloat jarg0, jfloat jarg1, jfloat jarg2) {
    jlong _jresult = 0 ;
    float arg0 ;
    float arg1 ;
    float arg2 ;
    csVector3 *result ;
    
    arg0 = (float ) jarg0;
    arg1 = (float ) jarg1;
    arg2 = (float ) jarg2;
    result = new csVector3(arg0,arg1,arg2);
    *(csVector3 **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_set_1csRGBpixel_1red(JNIEnv *jenv, jclass jcls, jlong jarg0, jbyte jarg1) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char arg1 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    arg1 = (unsigned char ) jarg1;
    result =  (arg0->red = arg1);
    _jresult = (jbyte) result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_get_1csRGBpixel_1red(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    result =  (arg0->red);
    _jresult = (jbyte) result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_set_1csRGBpixel_1green(JNIEnv *jenv, jclass jcls, jlong jarg0, jbyte jarg1) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char arg1 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    arg1 = (unsigned char ) jarg1;
    result =  (arg0->green = arg1);
    _jresult = (jbyte) result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_get_1csRGBpixel_1green(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    result =  (arg0->green);
    _jresult = (jbyte) result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_set_1csRGBpixel_1blue(JNIEnv *jenv, jclass jcls, jlong jarg0, jbyte jarg1) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char arg1 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    arg1 = (unsigned char ) jarg1;
    result =  (arg0->blue = arg1);
    _jresult = (jbyte) result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_get_1csRGBpixel_1blue(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    result =  (arg0->blue);
    _jresult = (jbyte) result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_set_1csRGBpixel_1alpha(JNIEnv *jenv, jclass jcls, jlong jarg0, jbyte jarg1) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char arg1 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    arg1 = (unsigned char ) jarg1;
    result =  (arg0->alpha = arg1);
    _jresult = (jbyte) result;
    return _jresult;
}


extern "C"
JNIEXPORT jbyte JNICALL Java_cspace_get_1csRGBpixel_1alpha(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jbyte _jresult = 0 ;
    csRGBpixel *arg0 ;
    unsigned char result ;
    
    arg0 = *(csRGBpixel **)&jarg0;
    result =  (arg0->alpha);
    _jresult = (jbyte) result;
    return _jresult;
}


static void *SwigiPlugInToiBase(void *ptr) {
    iPlugIn *src;
    iBase *dest;
    src = (iPlugIn *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iPlugIn_1Initialize(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    jboolean _jresult = 0 ;
    iPlugIn *arg0 ;
    iSystem *arg1 ;
    bool result ;
    
    arg0 = *(iPlugIn **)&jarg0;
    arg1 = *(iSystem **)&jarg1;
    result = arg0->Initialize(arg1);
    _jresult = (jboolean) result;
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iPlugIn_1HandleEvent(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    jboolean _jresult = 0 ;
    iPlugIn *arg0 ;
    iEvent *arg1 ;
    bool result ;
    
    arg0 = *(iPlugIn **)&jarg0;
    arg1 = *(iEvent **)&jarg1;
    result = arg0->HandleEvent(*arg1);
    _jresult = (jboolean) result;
    return _jresult;
}


static void *SwigiTextureHandleToiBase(void *ptr) {
    iTextureHandle *src;
    iBase *dest;
    src = (iTextureHandle *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iTextureHandle_1GetMipMapDimensions(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jintArray jarg2, jintArray jarg3) {
    jboolean _jresult = 0 ;
    iTextureHandle *arg0 ;
    int arg1 ;
    int *arg2 ;
    int *arg3 ;
    jint* arg21 ;
    jsize arg22 = jenv->GetArrayLength(jarg2) ;
    int i;
    jint* arg31 ;
    jsize arg32 = jenv->GetArrayLength(jarg3) ;
    int i1;
    bool result ;
    
    arg0 = *(iTextureHandle **)&jarg0;
    arg1 = (int ) jarg1;
    arg21 = jenv->GetIntArrayElements(jarg2, 0);
    arg2 = (int *) malloc(arg22 * sizeof(int ));
    for(i=0; i<arg22; i++)
    arg2[i] = (int )arg21[i];
    arg31 = jenv->GetIntArrayElements(jarg3, 0);
    arg3 = (int *) malloc(arg32 * sizeof(int ));
    for(i=0; i<arg32; i++)
    arg3[i] = (int )arg31[i];
    result = arg0->GetMipMapDimensions(arg1,*arg2,*arg3);
    _jresult = (jboolean) result;
    for(i=0; i< 135249008; i++)
    arg21[i] = (jint) arg2[i];
    jenv->ReleaseIntArrayElements(jarg2, arg21, 0);
    free(arg2);
    for(i=0; i< 135242848; i++)
    arg31[i] = (jint) arg3[i];
    jenv->ReleaseIntArrayElements(jarg3, arg31, 0);
    free(arg3);
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureHandle_1GetMeanColor(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jlong jarg2, jlong jarg3) {
    iTextureHandle *arg0 ;
    UByte *arg1 ;
    UByte *arg2 ;
    UByte *arg3 ;
    
    arg0 = *(iTextureHandle **)&jarg0;
    arg1 = *(UByte **)&jarg1;
    arg2 = *(UByte **)&jarg2;
    arg3 = *(UByte **)&jarg3;
    arg0->GetMeanColor(*arg1,*arg2,*arg3);
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iTextureHandle_1GetCacheData(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iTextureHandle *arg0 ;
    void *result ;
    
    arg0 = *(iTextureHandle **)&jarg0;
    result = arg0->GetCacheData();
    *(void **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureHandle_1SetCacheData(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iTextureHandle *arg0 ;
    void *arg1 ;
    
    arg0 = *(iTextureHandle **)&jarg0;
    arg1 = *(void **)&jarg1;
    arg0->SetCacheData(arg1);
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iTextureHandle_1GetPrivateObject(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iTextureHandle *arg0 ;
    void *result ;
    
    arg0 = *(iTextureHandle **)&jarg0;
    result = arg0->GetPrivateObject();
    *(void **)&_jresult = result;
    return _jresult;
}


static void *SwigiGraphics3DToiPlugIn(void *ptr) {
    iGraphics3D *src;
    iPlugIn *dest;
    src = (iGraphics3D *) ptr;
    dest = (iPlugIn *) src;
    return (void *) dest;
}

static void *SwigiGraphics3DToiBase(void *ptr) {
    iGraphics3D *src;
    iBase *dest;
    src = (iGraphics3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iGraphics3D_1Initialize(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    jboolean _jresult = 0 ;
    iGraphics3D *arg0 ;
    iSystem *arg1 ;
    bool result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(iSystem **)&jarg1;
    result = arg0->Initialize(arg1);
    _jresult = (jboolean) result;
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iGraphics3D_1Open(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    jboolean _jresult = 0 ;
    iGraphics3D *arg0 ;
    char *arg1 ;
    bool result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    result = arg0->Open((const char*)arg1);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1Close(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iGraphics3D *arg0 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg0->Close();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1SetDimensions(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2) {
    iGraphics3D *arg0 ;
    int arg1 ;
    int arg2 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    arg0->SetDimensions(arg1,arg2);
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iGraphics3D_1BeginDraw(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jboolean _jresult = 0 ;
    iGraphics3D *arg0 ;
    int arg1 ;
    bool result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (int ) jarg1;
    result = arg0->BeginDraw(arg1);
    _jresult = (jboolean) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1FinishDraw(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iGraphics3D *arg0 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg0->FinishDraw();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1Print(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    csRect *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(csRect **)&jarg1;
    arg0->Print(arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DrawPolygon(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    G3DPolygonDP *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(G3DPolygonDP **)&jarg1;
    arg0->DrawPolygon(*arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DrawPolygonDebug(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    G3DPolygonDP *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(G3DPolygonDP **)&jarg1;
    arg0->DrawPolygonDebug(*arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DrawLine(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jlong jarg2, jfloat jarg3, jint jarg4) {
    iGraphics3D *arg0 ;
    csVector3 *arg1 ;
    csVector3 *arg2 ;
    float arg3 ;
    int arg4 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(csVector3 **)&jarg1;
    arg2 = *(csVector3 **)&jarg2;
    arg3 = (float ) jarg3;
    arg4 = (int ) jarg4;
    arg0->DrawLine((const csVector3&)*arg1,(const csVector3&)*arg2,arg3,arg4);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DrawTriangleMesh(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    G3DTriangleMesh *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(G3DTriangleMesh **)&jarg1;
    arg0->DrawTriangleMesh(*arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DrawPolygonMesh(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    G3DPolygonMesh *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(G3DPolygonMesh **)&jarg1;
    arg0->DrawPolygonMesh(*arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1OpenFogObject(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jlong jarg2) {
    iGraphics3D *arg0 ;
    CS_ID *arg1 ;
    csFog *arg2 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (CS_ID ) jarg1;
    arg2 = *(csFog **)&jarg2;
    arg0->OpenFogObject(*arg1,arg2);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DrawFogPolygon(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jlong jarg2, jint jarg3) {
    iGraphics3D *arg0 ;
    CS_ID *arg1 ;
    G3DPolygonDFP *arg2 ;
    int arg3 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (CS_ID ) jarg1;
    arg2 = *(G3DPolygonDFP **)&jarg2;
    arg3 = (int ) jarg3;
    arg0->DrawFogPolygon(*arg1,*arg2,arg3);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1CloseFogObject(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    CS_ID *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (CS_ID ) jarg1;
    arg0->CloseFogObject(*arg1);
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iGraphics3D_1GetCaps(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iGraphics3D *arg0 ;
    csGraphics3DCaps *result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    result = arg0->GetCaps();
    *(csGraphics3DCaps **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlongArray JNICALL Java_cspace_iGraphics3D_1GetZBuffAt(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2) {
    jlongArray _jresult = 0 ;
    iGraphics3D *arg0 ;
    int arg1 ;
    int arg2 ;
    unsigned long *result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    result = arg0->GetZBuffAt(arg1,arg2);
    *(unsigned long **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_iGraphics3D_1GetZBuffValue(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2) {
    jfloat _jresult = 0 ;
    iGraphics3D *arg0 ;
    int arg1 ;
    int arg2 ;
    float result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    result = arg0->GetZBuffValue(arg1,arg2);
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DumpCache(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iGraphics3D *arg0 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg0->DumpCache();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1ClearCache(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iGraphics3D *arg0 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg0->ClearCache();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1RemoveFromCache(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    iPolygonTexture *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(iPolygonTexture **)&jarg1;
    arg0->RemoveFromCache(arg1);
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iGraphics3D_1GetWidth(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iGraphics3D *arg0 ;
    int result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    result = arg0->GetWidth();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iGraphics3D_1GetHeight(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iGraphics3D *arg0 ;
    int result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    result = arg0->GetHeight();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1SetPerspectiveCenter(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2) {
    iGraphics3D *arg0 ;
    int arg1 ;
    int arg2 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    arg0->SetPerspectiveCenter(arg1,arg2);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1SetPerspectiveAspect(JNIEnv *jenv, jclass jcls, jlong jarg0, jfloat jarg1) {
    iGraphics3D *arg0 ;
    float arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (float ) jarg1;
    arg0->SetPerspectiveAspect(arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1SetObjectToCamera(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iGraphics3D *arg0 ;
    csReversibleTransform *arg1 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(csReversibleTransform **)&jarg1;
    arg0->SetObjectToCamera(arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1SetClipper(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jint jarg2) {
    iGraphics3D *arg0 ;
    csVector2 *arg1 ;
    int arg2 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(csVector2 **)&jarg1;
    arg2 = (int ) jarg2;
    arg0->SetClipper(arg1,arg2);
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iGraphics3D_1GetDriver2D(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iGraphics3D *arg0 ;
    iGraphics2D *result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    result = arg0->GetDriver2D();
    *(iGraphics2D **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iGraphics3D_1GetTextureManager(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iGraphics3D *arg0 ;
    iTextureManager *result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    result = arg0->GetTextureManager();
    *(iTextureManager **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iGraphics3D_1CreateHalo(JNIEnv *jenv, jclass jcls, jlong jarg0, jfloat jarg1, jfloat jarg2, jfloat jarg3, jbyteArray jarg4, jint jarg5, jint jarg6) {
    jlong _jresult = 0 ;
    iGraphics3D *arg0 ;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    unsigned char *arg4 ;
    int arg5 ;
    int arg6 ;
    jbyte* arg41 ;
    jsize arg42 = jenv->GetArrayLength(jarg4) ;
    int i;
    iHalo *result ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = (float ) jarg1;
    arg2 = (float ) jarg2;
    arg3 = (float ) jarg3;
    arg41 = jenv->GetByteArrayElements(jarg4, 0);
    arg4 = (unsigned char *) malloc(arg42 * sizeof(unsigned char ));
    for(i=0; i<arg42; i++)
    arg4[i] = (unsigned char )arg41[i];
    arg5 = (int ) jarg5;
    arg6 = (int ) jarg6;
    result = arg0->CreateHalo(arg1,arg2,arg3,arg4,arg5,arg6);
    *(iHalo **)&_jresult = result;
    for(i=0; i< 135450216; i++)
    arg41[i] = (jbyte) arg4[i];
    jenv->ReleaseByteArrayElements(jarg4, arg41, 0);
    free(arg4);
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iGraphics3D_1DrawPixmap(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jint jarg9) {
    iGraphics3D *arg0 ;
    iTextureHandle *arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    
    arg0 = *(iGraphics3D **)&jarg0;
    arg1 = *(iTextureHandle **)&jarg1;
    arg2 = (int ) jarg2;
    arg3 = (int ) jarg3;
    arg4 = (int ) jarg4;
    arg5 = (int ) jarg5;
    arg6 = (int ) jarg6;
    arg7 = (int ) jarg7;
    arg8 = (int ) jarg8;
    arg9 = (int ) jarg9;
    arg0->DrawPixmap(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


static void *SwigiCameraToiBase(void *ptr) {
    iCamera *src;
    iBase *dest;
    src = (iCamera *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_iCamera_1GetAspect(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jfloat _jresult = 0 ;
    iCamera *arg0 ;
    float result ;
    
    arg0 = *(iCamera **)&jarg0;
    result = arg0->GetAspect();
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_iCamera_1GetInvAspect(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jfloat _jresult = 0 ;
    iCamera *arg0 ;
    float result ;
    
    arg0 = *(iCamera **)&jarg0;
    result = arg0->GetInvAspect();
    _jresult = (jfloat) result;
    return _jresult;
}


static void *SwigiPolygonSetToiBase(void *ptr) {
    iPolygonSet *src;
    iBase *dest;
    src = (iPolygonSet *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jstring JNICALL Java_cspace_iPolygonSet_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jstring _jresult = 0 ;
    iPolygonSet *arg0 ;
    char *result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    result = (char *)arg0->GetName();
    if(result != NULL)
    _jresult = (jstring)jenv->NewStringUTF(result);
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iPolygonSet_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    iPolygonSet *arg0 ;
    char *arg1 ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg0->SetName((const char*)arg1);
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iPolygonSet_1CompressVertices(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iPolygonSet *arg0 ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg0->CompressVertices();
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonSet_1GetPolygonCount(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonSet *arg0 ;
    int result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    result = arg0->GetPolygonCount();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonSet_1GetPolygon(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygonSet *arg0 ;
    int arg1 ;
    iPolygon3D *result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = (int ) jarg1;
    result = arg0->GetPolygon(arg1);
    *(iPolygon3D **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonSet_1CreatePolygon(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    jlong _jresult = 0 ;
    iPolygonSet *arg0 ;
    char *arg1 ;
    iPolygon3D *result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    result = arg0->CreatePolygon((const char*)arg1);
    *(iPolygon3D **)&_jresult = result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonSet_1GetVertexCount(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonSet *arg0 ;
    int result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    result = arg0->GetVertexCount();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonSet_1GetVertex(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygonSet *arg0 ;
    int arg1 ;
    csVector3 *result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = (int ) jarg1;
    csVector3 &_result_ref = arg0->GetVertex(arg1);
    result = (csVector3 *) &_result_ref;
    *(csVector3 **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonSet_1GetVertexW(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygonSet *arg0 ;
    int arg1 ;
    csVector3 *result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = (int ) jarg1;
    csVector3 &_result_ref = arg0->GetVertexW(arg1);
    result = (csVector3 *) &_result_ref;
    *(csVector3 **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonSet_1GetVertexC(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygonSet *arg0 ;
    int arg1 ;
    csVector3 *result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = (int ) jarg1;
    csVector3 &_result_ref = arg0->GetVertexC(arg1);
    result = (csVector3 *) &_result_ref;
    *(csVector3 **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonSet_1CreateVertex(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    jint _jresult = 0 ;
    iPolygonSet *arg0 ;
    csVector3 *arg1 ;
    int result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = *(csVector3 **)&jarg1;
    result = arg0->CreateVertex(*arg1);
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iPolygonSet_1CreateKey(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1, jstring jarg2) {
    jboolean _jresult = 0 ;
    iPolygonSet *arg0 ;
    char *arg1 ;
    char *arg2 ;
    bool result ;
    
    arg0 = *(iPolygonSet **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg2 = (jarg2) ? (char *)jenv->GetStringUTFChars(jarg2, 0) : NULL;
    result = arg0->CreateKey((const char*)arg1,(const char*)arg2);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    if(arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
    return _jresult;
}


static void *SwigiSectorToiBase(void *ptr) {
    iSector *src;
    iBase *dest;
    src = (iSector *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT void JNICALL Java_cspace_iSector_1CreateBSP(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iSector *arg0 ;
    
    arg0 = *(iSector **)&jarg0;
    arg0->CreateBSP();
}


static void *SwigiThingToiPolygonSet(void *ptr) {
    iThing *src;
    iPolygonSet *dest;
    src = (iThing *) ptr;
    dest = (iPolygonSet *) src;
    return (void *) dest;
}

static void *SwigiThingToiBase(void *ptr) {
    iThing *src;
    iBase *dest;
    src = (iThing *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT void JNICALL Java_cspace_iThing_1SetPosition(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iThing *arg0 ;
    csVector3 *arg1 ;
    
    arg0 = *(iThing **)&jarg0;
    arg1 = *(csVector3 **)&jarg1;
    arg0->SetPosition((const csVector3&)*arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iThing_1SetSector(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iThing *arg0 ;
    iSector *arg1 ;
    
    arg0 = *(iThing **)&jarg0;
    arg1 = *(iSector **)&jarg1;
    arg0->SetPosition(arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iThing_1SetTransform(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iThing *arg0 ;
    csMatrix3 *arg1 ;
    
    arg0 = *(iThing **)&jarg0;
    arg1 = *(csMatrix3 **)&jarg1;
    arg0->SetTransform((const csMatrix3&)*arg1);
}


static void *SwigiPolygon3DToiBase(void *ptr) {
    iPolygon3D *src;
    iBase *dest;
    src = (iPolygon3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jstring JNICALL Java_cspace_iPolygon3D_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jstring _jresult = 0 ;
    iPolygon3D *arg0 ;
    char *result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    result = (char *)arg0->GetName();
    if(result != NULL)
    _jresult = (jstring)jenv->NewStringUTF(result);
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iPolygon3D_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    iPolygon3D *arg0 ;
    char *arg1 ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg0->SetName((const char*)arg1);
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygon3D_1GetContainer(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iPolygon3D *arg0 ;
    iPolygonSet *result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    result = arg0->GetContainer();
    *(iPolygonSet **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygon3D_1GetLightMap(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iPolygon3D *arg0 ;
    iLightMap *result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    result = arg0->GetLightMap();
    *(iLightMap **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygon3D_1GetMaterialHandle(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iPolygon3D *arg0 ;
    iMaterialHandle *result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    result = arg0->GetMaterialHandle();
    *(iMaterialHandle **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygon3D_1GetVertexCount(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygon3D *arg0 ;
    int result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    result = arg0->GetVertexCount();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygon3D_1GetVertex(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygon3D *arg0 ;
    int arg1 ;
    csVector3 *result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = (int ) jarg1;
    csVector3 &_result_ref = arg0->GetVertex(arg1);
    result = (csVector3 *) &_result_ref;
    *(csVector3 **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygon3D_1GetVertexW(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygon3D *arg0 ;
    int arg1 ;
    csVector3 *result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = (int ) jarg1;
    csVector3 &_result_ref = arg0->GetVertexW(arg1);
    result = (csVector3 *) &_result_ref;
    *(csVector3 **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygon3D_1GetVertexC(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygon3D *arg0 ;
    int arg1 ;
    csVector3 *result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = (int ) jarg1;
    csVector3 &_result_ref = arg0->GetVertexC(arg1);
    result = (csVector3 *) &_result_ref;
    *(csVector3 **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygon3D_1CreateVertexByIndex(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jint _jresult = 0 ;
    iPolygon3D *arg0 ;
    int arg1 ;
    int result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = (int ) jarg1;
    result = arg0->CreateVertex(arg1);
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygon3D_1CreateVertex(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    jint _jresult = 0 ;
    iPolygon3D *arg0 ;
    csVector3 *arg1 ;
    int result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = *(csVector3 **)&jarg1;
    result = arg0->CreateVertex((const csVector3&)*arg1);
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygon3D_1GetAlpha(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygon3D *arg0 ;
    int result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    result = arg0->GetAlpha();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iPolygon3D_1SetAlpha(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    iPolygon3D *arg0 ;
    int arg1 ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = (int ) jarg1;
    arg0->SetAlpha(arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iPolygon3D_1CreatePlane(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jlong jarg2) {
    iPolygon3D *arg0 ;
    csVector3 *arg1 ;
    csMatrix3 *arg2 ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = *(csVector3 **)&jarg1;
    arg2 = *(csMatrix3 **)&jarg2;
    arg0->CreatePlane((const csVector3&)*arg1,(const csMatrix3&)*arg2);
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iPolygon3D_1SetPlane(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    jboolean _jresult = 0 ;
    iPolygon3D *arg0 ;
    char *arg1 ;
    bool result ;
    
    arg0 = *(iPolygon3D **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    result = arg0->SetPlane((const char*)arg1);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    return _jresult;
}


static void *SwigiImageToiBase(void *ptr) {
    iImage *src;
    iBase *dest;
    src = (iImage *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iImage_1GetImageData(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iImage *arg0 ;
    void *result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->GetImageData();
    *(void **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iImage_1GetWidth(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iImage *arg0 ;
    int result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->GetWidth();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iImage_1GetHeight(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iImage *arg0 ;
    int result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->GetHeight();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iImage_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iImage *arg0 ;
    int result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->GetSize();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iImage_1Rescale(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2) {
    iImage *arg0 ;
    int arg1 ;
    int arg2 ;
    
    arg0 = *(iImage **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    arg0->Rescale(arg1,arg2);
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iImage_1MipMap(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jlong jarg2) {
    jlong _jresult = 0 ;
    iImage *arg0 ;
    int arg1 ;
    csRGBpixel *arg2 ;
    iImage *result ;
    
    arg0 = *(iImage **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = *(csRGBpixel **)&jarg2;
    result = arg0->MipMap(arg1,arg2);
    *(iImage **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iImage_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    iImage *arg0 ;
    char *arg1 ;
    
    arg0 = *(iImage **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg0->SetName((const char*)arg1);
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


extern "C"
JNIEXPORT jstring JNICALL Java_cspace_iImage_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jstring _jresult = 0 ;
    iImage *arg0 ;
    char *result ;
    
    arg0 = *(iImage **)&jarg0;
    result = (char *)arg0->GetName();
    if(result != NULL)
    _jresult = (jstring)jenv->NewStringUTF(result);
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iImage_1GetFormat(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iImage *arg0 ;
    int result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->GetFormat();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iImage_1GetPalette(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iImage *arg0 ;
    csRGBpixel *result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->GetPalette();
    *(csRGBpixel **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iImage_1GetAlpha(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iImage *arg0 ;
    UByte *result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->GetAlpha();
    *(UByte **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iImage_1SetFormat(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    iImage *arg0 ;
    int arg1 ;
    
    arg0 = *(iImage **)&jarg0;
    arg1 = (int ) jarg1;
    arg0->SetFormat(arg1);
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iImage_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iImage *arg0 ;
    iImage *result ;
    
    arg0 = *(iImage **)&jarg0;
    result = arg0->Clone();
    *(iImage **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iImage_1Crop(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
    jlong _jresult = 0 ;
    iImage *arg0 ;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    iImage *result ;
    
    arg0 = *(iImage **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    arg3 = (int ) jarg3;
    arg4 = (int ) jarg4;
    result = arg0->Crop(arg1,arg2,arg3,arg4);
    *(iImage **)&_jresult = result;
    return _jresult;
}


static void *SwigiTextureManagerToiBase(void *ptr) {
    iTextureManager *src;
    iBase *dest;
    src = (iTextureManager *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iTextureManager_1RegisterTexture(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1, jint jarg2) {
    jlong _jresult = 0 ;
    iTextureManager *arg0 ;
    iImage *arg1 ;
    int arg2 ;
    iTextureHandle *result ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg1 = *(iImage **)&jarg1;
    arg2 = (int ) jarg2;
    result = arg0->RegisterTexture(arg1,arg2);
    *(iTextureHandle **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1UnregisterTexture(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iTextureManager *arg0 ;
    iTextureHandle *arg1 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg1 = *(iTextureHandle **)&jarg1;
    arg0->UnregisterTexture(arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1PrepareTexture(JNIEnv *jenv, jclass jcls, jlong jarg0, jlong jarg1) {
    iTextureManager *arg0 ;
    iTextureHandle *arg1 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg1 = *(iTextureHandle **)&jarg1;
    arg0->PrepareTexture(arg1);
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1PrepareTextures(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iTextureManager *arg0 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg0->PrepareTextures();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1FreeImages(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iTextureManager *arg0 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg0->FreeImages();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1ResetPalette(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iTextureManager *arg0 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg0->ResetPalette();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1ReserveColor(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2, jint jarg3) {
    iTextureManager *arg0 ;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    arg3 = (int ) jarg3;
    arg0->ReserveColor(arg1,arg2,arg3);
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iTextureManager_1FindRGB(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jint jarg2, jint jarg3) {
    jint _jresult = 0 ;
    iTextureManager *arg0 ;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int result ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = (int ) jarg2;
    arg3 = (int ) jarg3;
    result = arg0->FindRGB(arg1,arg2,arg3);
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1SetPalette(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iTextureManager *arg0 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg0->SetPalette();
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iTextureManager_1SetVerbose(JNIEnv *jenv, jclass jcls, jlong jarg0, jboolean jarg1) {
    iTextureManager *arg0 ;
    bool arg1 ;
    
    arg0 = *(iTextureManager **)&jarg0;
    arg1 = (bool ) jarg1;
    arg0->SetVerbose(arg1);
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iTextureManager_1GetTextureFormat(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iTextureManager *arg0 ;
    int result ;
    
    arg0 = *(iTextureManager **)&jarg0;
    result = arg0->GetTextureFormat();
    _jresult = (jint) result;
    return _jresult;
}


static void *SwigiPolygonTextureToiBase(void *ptr) {
    iPolygonTexture *src;
    iBase *dest;
    src = (iPolygonTexture *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonTexture_1GetMaterialHandle(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iPolygonTexture *arg0 ;
    iMaterialHandle *result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetMaterialHandle();
    *(iMaterialHandle **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_iPolygonTexture_1GetFDU(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jfloat _jresult = 0 ;
    iPolygonTexture *arg0 ;
    float result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetFDU();
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jfloat JNICALL Java_cspace_iPolygonTexture_1GetFDV(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jfloat _jresult = 0 ;
    iPolygonTexture *arg0 ;
    float result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetFDV();
    _jresult = (jfloat) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetWidth(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetWidth();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetHeight(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetHeight();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetShiftU(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetShiftU();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetIMinU(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetIMinU();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetIMinV(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetIMinV();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iPolygonTexture_1GetTextureBox(JNIEnv *jenv, jclass jcls, jlong jarg0, jfloatArray jarg1, jfloatArray jarg2, jfloatArray jarg3, jfloatArray jarg4) {
    iPolygonTexture *arg0 ;
    float *arg1 ;
    float *arg2 ;
    float *arg3 ;
    float *arg4 ;
    jfloat* arg11 ;
    jsize arg12 = jenv->GetArrayLength(jarg1) ;
    int i;
    jfloat* arg21 ;
    jsize arg22 = jenv->GetArrayLength(jarg2) ;
    int i1;
    jfloat* arg31 ;
    jsize arg32 = jenv->GetArrayLength(jarg3) ;
    int i2;
    jfloat* arg41 ;
    jsize arg42 = jenv->GetArrayLength(jarg4) ;
    int i3;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    arg11 = jenv->GetFloatArrayElements(jarg1, 0);
    arg1 = (float *) malloc(arg12 * sizeof(float ));
    for(i=0; i<arg12; i++)
    arg1[i] = (float )arg11[i];
    arg21 = jenv->GetFloatArrayElements(jarg2, 0);
    arg2 = (float *) malloc(arg22 * sizeof(float ));
    for(i=0; i<arg22; i++)
    arg2[i] = (float )arg21[i];
    arg31 = jenv->GetFloatArrayElements(jarg3, 0);
    arg3 = (float *) malloc(arg32 * sizeof(float ));
    for(i=0; i<arg32; i++)
    arg3[i] = (float )arg31[i];
    arg41 = jenv->GetFloatArrayElements(jarg4, 0);
    arg4 = (float *) malloc(arg42 * sizeof(float ));
    for(i=0; i<arg42; i++)
    arg4[i] = (float )arg41[i];
    arg0->GetTextureBox(*arg1,*arg2,*arg3,*arg4);
    for(i=0; i< 135792552; i++)
    arg11[i] = (jfloat) arg1[i];
    jenv->ReleaseFloatArrayElements(jarg1, arg11, 0);
    free(arg1);
    for(i=0; i< 135791696; i++)
    arg21[i] = (jfloat) arg2[i];
    jenv->ReleaseFloatArrayElements(jarg2, arg21, 0);
    free(arg2);
    for(i=0; i< 135791696; i++)
    arg31[i] = (jfloat) arg3[i];
    jenv->ReleaseFloatArrayElements(jarg3, arg31, 0);
    free(arg3);
    for(i=0; i< 135797800; i++)
    arg41[i] = (jfloat) arg4[i];
    jenv->ReleaseFloatArrayElements(jarg4, arg41, 0);
    free(arg4);
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetOriginalWidth(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetOriginalWidth();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonTexture_1GetPolygon(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iPolygonTexture *arg0 ;
    iPolygon3D *result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetPolygon();
    *(iPolygon3D **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iPolygonTexture_1DynamicLightsDirty(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jboolean _jresult = 0 ;
    iPolygonTexture *arg0 ;
    bool result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->DynamicLightsDirty();
    _jresult = (jboolean) result;
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iPolygonTexture_1RecalculateDynamicLights(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jboolean _jresult = 0 ;
    iPolygonTexture *arg0 ;
    bool result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->RecalculateDynamicLights();
    _jresult = (jboolean) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonTexture_1GetLightMap(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jlong _jresult = 0 ;
    iPolygonTexture *arg0 ;
    iLightMap *result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetLightMap();
    *(iLightMap **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetLightCellSize(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetLightCellSize();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jint JNICALL Java_cspace_iPolygonTexture_1GetLightCellShift(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    result = arg0->GetLightCellShift();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iPolygonTexture_1GetCacheData(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1) {
    jlong _jresult = 0 ;
    iPolygonTexture *arg0 ;
    int arg1 ;
    void *result ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    arg1 = (int ) jarg1;
    result = arg0->GetCacheData(arg1);
    *(void **)&_jresult = result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iPolygonTexture_1SetCacheData(JNIEnv *jenv, jclass jcls, jlong jarg0, jint jarg1, jlong jarg2) {
    iPolygonTexture *arg0 ;
    int arg1 ;
    void *arg2 ;
    
    arg0 = *(iPolygonTexture **)&jarg0;
    arg1 = (int ) jarg1;
    arg2 = *(void **)&jarg2;
    arg0->SetCacheData(arg1,arg2);
}


static void *SwigiEngineToiPlugIn(void *ptr) {
    iEngine *src;
    iPlugIn *dest;
    src = (iEngine *) ptr;
    dest = (iPlugIn *) src;
    return (void *) dest;
}

static void *SwigiEngineToiBase(void *ptr) {
    iEngine *src;
    iBase *dest;
    src = (iEngine *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

extern "C"
JNIEXPORT jint JNICALL Java_cspace_iEngine_1GetTextureFormat(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    jint _jresult = 0 ;
    iEngine *arg0 ;
    int result ;
    
    arg0 = *(iEngine **)&jarg0;
    result = arg0->GetTextureFormat();
    _jresult = (jint) result;
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iEngine_1SelectLibrary(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    iEngine *arg0 ;
    char *arg1 ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg0->SelectLibrary((const char*)arg1);
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iEngine_1DeleteLibrary(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    jboolean _jresult = 0 ;
    iEngine *arg0 ;
    char *arg1 ;
    bool result ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    result = arg0->DeleteLibrary((const char*)arg1);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    return _jresult;
}


extern "C"
JNIEXPORT void JNICALL Java_cspace_iEngine_1DeleteAll(JNIEnv *jenv, jclass jcls, jlong jarg0) {
    iEngine *arg0 ;
    
    arg0 = *(iEngine **)&jarg0;
    arg0->DeleteAll();
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iEngine_1CreateTexture(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1, jstring jarg2, jlong jarg3, jint jarg4) {
    jboolean _jresult = 0 ;
    iEngine *arg0 ;
    char *arg1 ;
    char *arg2 ;
    csColor *arg3 ;
    int arg4 ;
    bool result ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg2 = (jarg2) ? (char *)jenv->GetStringUTFChars(jarg2, 0) : NULL;
    arg3 = *(csColor **)&jarg3;
    arg4 = (int ) jarg4;
    result = arg0->CreateTexture((const char*)arg1,(const char*)arg2,arg3,arg4);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    if(arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iEngine_1CreateCamera(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jboolean _jresult = 0 ;
    iEngine *arg0 ;
    char *arg1 ;
    char *arg2 ;
    csVector3 *arg3 ;
    csVector3 *arg4 ;
    csVector3 *arg5 ;
    bool result ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg2 = (jarg2) ? (char *)jenv->GetStringUTFChars(jarg2, 0) : NULL;
    arg3 = *(csVector3 **)&jarg3;
    arg4 = *(csVector3 **)&jarg4;
    arg5 = *(csVector3 **)&jarg5;
    result = arg0->CreateCamera((const char*)arg1,(const char*)arg2,(const csVector3&)*arg3,(const csVector3&)*arg4,(const csVector3&)*arg5);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    if(arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iEngine_1CreateKey(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1, jstring jarg2) {
    jboolean _jresult = 0 ;
    iEngine *arg0 ;
    char *arg1 ;
    char *arg2 ;
    bool result ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg2 = (jarg2) ? (char *)jenv->GetStringUTFChars(jarg2, 0) : NULL;
    result = arg0->CreateKey((const char*)arg1,(const char*)arg2);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    if(arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
    return _jresult;
}


extern "C"
JNIEXPORT jboolean JNICALL Java_cspace_iEngine_1CreatePlane(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1, jlong jarg2, jlong jarg3) {
    jboolean _jresult = 0 ;
    iEngine *arg0 ;
    char *arg1 ;
    csVector3 *arg2 ;
    csMatrix3 *arg3 ;
    bool result ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg2 = *(csVector3 **)&jarg2;
    arg3 = *(csMatrix3 **)&jarg3;
    result = arg0->CreatePlane((const char*)arg1,(const csVector3&)*arg2,(const csMatrix3&)*arg3);
    _jresult = (jboolean) result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iEngine_1CreateSector(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1) {
    jlong _jresult = 0 ;
    iEngine *arg0 ;
    char *arg1 ;
    iSector *result ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    result = arg0->CreateSector((const char*)arg1);
    *(iSector **)&_jresult = result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    return _jresult;
}


extern "C"
JNIEXPORT jlong JNICALL Java_cspace_iEngine_1CreateThing(JNIEnv *jenv, jclass jcls, jlong jarg0, jstring jarg1, jlong jarg2) {
    jlong _jresult = 0 ;
    iEngine *arg0 ;
    char *arg1 ;
    iSector *arg2 ;
    iThing *result ;
    
    arg0 = *(iEngine **)&jarg0;
    arg1 = (jarg1) ? (char *)jenv->GetStringUTFChars(jarg1, 0) : NULL;
    arg2 = *(iSector **)&jarg2;
    result = arg0->CreateThing((const char*)arg1,arg2);
    *(iThing **)&_jresult = result;
    if(arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
    return _jresult;
}


static void *SwigiSystemToiBase(void *ptr) {
    iSystem *src;
    iBase *dest;
    src = (iSystem *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

