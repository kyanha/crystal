SubDir TOP plugins cscript ;

if $(PYTHON.AVAILABLE) = "yes"
{
  if $(CMD.SWIG)
  {
    if $(PYTHON.VERSION) >= "2.5"
    {
      if $(CMD.SWIG.VERSION) >= "1.3.31"
      {
        DO_SWIG_PYTHON = "yes" ;
      }
    }
    else
    {
      if $(CMD.SWIG.VERSION) >= "1.3.28"
      {
        DO_SWIG_PYTHON = "yes" ;
      }
    }
  }
  if $(DO_SWIG_PYTHON)
  {
    # global python freeze target
    Help pythonfreeze : "Freeze generated Swig files for all python modules" ;
  }
  ##  PyBindingModule target : module name : glue : LinkWith : ExternalLibs : desc ;
  rule PyBindingModule
  {
    local target = $(1) ;
    local module = $(2) ;
    #--------
    # Swig-generated files for 'target'.
    #--------
    local common = cs_$(module).cpp ;
    local modulepy = [ DoSourceGrist $(module).py ] ;
    MakeLocate $(modulepy) : [ ConcatDirs $(LOCATE.OBJECTS) bindings python cspace ] ;
  
    if ! [ Property build : projgen ]
    {
      common = [ DoSourceGrist $(common) ] ;

      if $(DO_SWIG_PYTHON)
      {
	Swig $(common) $(modulepy) :
	  [ DoSourceGrist $(module).i ] :
	  python :
	  -c++ -shadow -modern :
	  [ ConcatDirs $(TOP) include ]
	  [ ConcatDirs $(BUILDTOP) include ] :
	  [ ConcatDirs $(TOP) include bindings ]
	  [ ConcatDirs $(TOP) include bindings python ] :
	  $(SEARCH_SOURCE) [ ConcatDirs $(TOP) scripts python frozen cspace ] :
	  $(module) :
	  [ on $(modulepy) GetVar LOCATE ] ;
	Depends $(module)clean : $(module)swigclean ;
      }
      else
      {
	SEARCH on $(common) = $(SEARCH_SOURCE) ;
	local frozenpy = $(modulepy:G=frozenmodulepy) ;
	SEARCH on $(frozenpy) = [ ConcatDirs $(TOP) scripts python frozen cspace ] ;
	Copy $(modulepy) : $(frozenpy) ;
	Depends $(modulepy) : $(frozenpy) ;
      }
    }
    Clean $(module)clean : $(modulepy) ;
    Depends bindingsclean : $(module)clean ;
    Depends clean : $(module)clean ;
  
    InstallBindingsData $(modulepy) : [ on $(<) GetVar LOCATE ] : bindings python cspace ;
  
  
    #--------
    # core -- Pure Python module
    #--------
    PythMod $(target) : _$(module) : 
	  $(3) $(common) : 
	  bindings python cspace :
	  crystalspace $(4) : 
	  $(5) : 
	  $(6) ;
    Depends $(target) : $(modulepy) ;
    CFlags $(target) : [ FDefines SWIG_GLOBAL ] $(COMPILER.C++FLAGS.STRICTALIASING.DISABLE) $(COMPILER.C++FLAGS.WARNING.NO_UNINITIALIZED) ;
    Depends bindingsclean : $(target)clean ;
  }
}

SubInclude TOP plugins cscript csjava ;
SubInclude TOP plugins cscript csperl5 ;
SubInclude TOP plugins cscript cspython ;
SubInclude TOP plugins cscript pycscegui ;
SubInclude TOP plugins cscript pycore ;
SubInclude TOP plugins cscript pyimesh ;
SubInclude TOP plugins cscript pyisndsys ;
SubInclude TOP plugins cscript pyivaria ;
SubInclude TOP plugins cscript pyiengine ;
SubInclude TOP plugins cscript pycstool ;
SubInclude TOP plugins cscript pyivideo ;
SubInclude TOP plugins cscript pyimap ;
SubInclude TOP plugins cscript pycsgfx ;
SubInclude TOP plugins cscript pycsgeom ;

rule PythModDepends
{
  for d in $(1)
  {
    Depends pythmod : $(1) ;
    Depends pythmodclean : $(1)clean ;
  }
}

Description pythmod : "build all python bindings modules" ;
PythModDepends coremod imeshmod isndsysmod ivariamod ienginemod cstoolmod
  ivideomod imapmod csgfxmod csgeommod ;
Depends bindings : pythmod ;

# rule to move __init__.py file to the generated python bindings
# folder.

rule CopyCspaceInitPy
{
  local init_py = __init__.py ;
  local init_py_dir = [ ConcatDirs $(TOP) scripts python frozen cspace ] ;
  SEARCH on $(init_py:G=src) = $(init_py_dir) ;
  
  MakeLocate $(init_py:G=out) : [ ConcatDirs $(LOCATE.OBJECTS) bindings python cspace ] ;
  Copy $(init_py:G=out) : $(init_py:G=src) ;
  Depends $(init_py:G=out) : $(init_py:G=src) ;
  Depends pythmod : $(init_py:G=out) ;
  Depends pythmodclean : $(init_py:G=out) ;
  InstallBindingsData $(init_py:G=src) : $(init_py_dir) : bindings python cspace ;
}

# rule to generate a python .pth file on install.
# this allows to have cspace module in cs install location, but still
# have python find it.

actions CspacePthGen bind PACKAGEPATH
{
  echo $(PACKAGEPATH) > $(<)
}

rule InstallCspacePth
{
  local cspace_pth = cspace.pth ;
  MakeLocate $(cspace_pth) : [ ConcatDirs $(libdir) python$(PYTHON.VERSION) site-packages ] ;
  local destdir = [ ConcatDirs $(appdatadir) bindings python ] ;
  NotFile $(destdir) ;
  PACKAGEPATH on $(cspace_pth) = $(destdir) ;
  CspacePthGen $(cspace_pth) ;
  Depends install_bindings : $(cspace_pth) ;
}

if $(PYTHON.AVAILABLE) = "yes"
{
  CopyCspaceInitPy ;
  InstallCspacePth ;
}

