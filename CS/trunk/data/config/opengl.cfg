;-------------------------------------------
; OpenGL specific stuff
;-------------------------------------------
Video.OpenGL =

; Override the detected graphics capabilities. 
; For broken drivers or unknown cards you can uncomment and set
; the following values. If commented, a nice default will be used instead.
;Video.OpenGL.Caps.CanClip = no
;Video.OpenGL.Caps.minTexHeight = 2
;Video.OpenGL.Caps.minTexWidth = 2
;Video.OpenGL.Caps.maxTexHeight = 1024
;Video.OpenGL.Caps.maxTexWidth = 1024
;Video.OpenGL.Caps.NeedsPO2Maps = yes
;Video.OpenGL.Caps.MaxAspectRatio = 32768

; Enable if you have hardware stencil buffer
;Video.OpenGL.Caps.Stencil = yes

; Enable if OpenGL seems to crash for you. It is possible that this is
; caused by not correctly clipping geometry to screen boundaries.
;Video.OpenGL.Caps.NeedScreenClipping = yes

; Clipping modes:
;    n (no clipping): don't use clipping at all but rely on z-buffer
;      to do the clipping for us. Only works when the object is rendered
;      using either ztest or zuse.
;    z (zbuf clipping): this is a variant of 'no clipping' specifically
;      for the outer polygon (or view). In this case the outside of that
;      portal (i.e. the places on the window/screen where CS will never
;      render) will be filled with z-buffer.
;    s (stencil clipping): use the stencil buffer for clipping.
;    p (plane clipping): use OpenGL plane clipping.
;    0 (software clipping): use the software clipper.
; All of these modes (except software clipping) have an uppercase variant
; which adds lazy clipping before doing the other operation. Lazy clipping
; means that a quick test on all triangles will discard all triangles that
; are totally invisible but keep all the others without clipping.
;
; Below are clipping modes for various operations. In addition to the
; modes described above you can also use 'auto' which will try to
; autodetect the most efficient operation. You can also use multiple
; modes in which case these modes will be used in case the first one
; is not possible for some reason. One example is that 'n' cannot be
; used on objects that are rendered with zfill or znone. In that case
; you need other modes. If you don't specify other modes then 0 will
; automatically be used (software clipping).

; Clipping mode to use for portals with optional clipping (i.e. most
; regular portals). Possible values are n,N,s,S,p,P, or 0. Usually 'n'
; or 'N' is recommended. 'n' is better if you are on fast hardware that
; doesn't mind overdraw. 'N' is better if you have hardware for which
; overdraw is relatively expensive.
Video.OpenGL.ClipOptional = nsp0

; Clipping mode to use for portals with required clipping (for special
; cases like floating portals). Possible values are s,S,p,P, or 0.
Video.OpenGL.ClipRequired = sp0

; Clipping modes to use for the outer portal. Possible values are z,
; Z,s,S,p,P, or 0.
Video.OpenGL.ClipOuter = zsp0

; Enable Dither mode.
Video.OpenGL.EnableDither = yes

; Enable Bilinear texture mapping (slower, especially
; if you don't have hardware acceleration).
Video.OpenGL.EnableBilinearMap = yes

; If this is set to 'yes' then you don't care about good perspective
; correction. This may mean that textures are rendered faster.
; Wether or not this hint is honored depends on the implementation.
Video.OpenGL.HintPerspectiveFast = no

; This tells how to blend lightmaps with their underlying textures.
; Legal modes are 'multiplydouble', 'multiply' (the default), 'coloradd',
; 'add', and 'auto'. Choose to fit your hardware and taste.  The 'multiply' mode
; is supported on most hardware but is often too dark.  If your hardware
; supports it, 'multiplydouble' often gives a better scene.
Video.OpenGL.LightmapMode = multiplydouble

; If this option is enabled, the OpenGL renderer will use an extra
; flag to further brighten textures. This is especially useful in
; combination with LightmapMode=multiply as this simulates the
; desired 2*SRC*DST mode on cards that don't directly support
; 2*SRC*DST (i.e. multiplydouble). Of course this slows down
; the renderer (until we use multi-texturing).
Video.OpenGL.ExtraBright = no

; Uncomment one of the following to choose procedural texture implementation.

; Utilise a 32bit software renderer to write the procedural textures, in some 
; circumstances this is faster than the back buffer version, because the 
; glCopyTexImage is unoptimised/very slow with some opengl implementations
Video.OpenGL.ProceduralTexture = software

; Currently this is the 'hardware accelerated version'
; For the most part it just beats the software renderer with my voodoo2, the
; improvement is more marked though on cards with better implementation of 
; glCopyTexImage.
;Video.OpenGL.ProceduralTexture = back_buffer

; Not yet available
;Video.OpenGL.ProceduralTexture = auxiliary_buffer

Video.OpenGL.BlendMipmap = no

;Video.OpenGL.Canvas = crystalspace.graphics2d.glx
;Video.OpenGL.Canvas = crystalspace.graphics2d.glwin32
;Video.OpenGL.Canvas = crystalspace.graphics2d.glos2
;Video.OpenGL.Canvas = crystalspace.graphics2d.glmac
;Video.OpenGL.Canvas = crystalspace.graphics2d.glbe
;Video.OpenGL.Driver = crystalspace.graphics2d.glx.disp.glide
