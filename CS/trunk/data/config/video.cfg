; Width/height of CrystalSpace visual
Video.ScreenWidth = 640
Video.ScreenHeight = 480
; Screen depth (currently supports 8, 15, 16, and 32 bits, NO 24 bits!)
Video.ScreenDepth = 32
; Use full-screen mode if available
Video.FullScreen = no

; Use libshm if available (X-Windows only)
Video.XSHM = yes
; Simulate another depth (supported only by some video drivers)
;Video.SimulateDepth = 8
; Use system mouse cursor (yes) or software-simulated (no)
Video.SystemMouseCursor = yes

; Display Frequency (if supported by canvas)
;Video.DisplayFrequency = 100

; How many pixels of font glyphs are cached at max?
;Video.FontCache.MaxSize = 1048576


; Alpha bits (default 0 OR/8 NR)
;Video.OpenGL.AlphaBits = 0
; Depth bits (default 32)
;Video.OpenGL.DepthBits = 0
; Stencil bits (default 1 OR/8 NR)
;Video.OpenGL.StencilBits = 0
; Accum buffer color bits (default 0)
;Video.OpenGL.AccumColorBits = 0
; Accum buffer alpha bits (default 0)
;Video.OpenGL.AccumAlphaBits = 0

; Whether full (ie ICD on Win32) or generic (ie MCD on Win32) acceleration
; should be used. Default is 'full'. However, some features (e.g. accum
; buffer) may only be available with generic acceleration.
;Video.OpenGL.FullAcceleration = false

; Order in which the GL pixel format picker reduces settings until an
; accelerated mode is found.
;  c - Color
;  d - depth
;  a - alpha
;  s - stencil
;  m - multisamples, 
;  C - accum color
;  A - accum alpha
Video.OpenGL.FormatPicker.ReductionOrder = mACasdc

; Alternate values to try.
; The picker first looks for the value closest to the setting requested by
; the user. Then, the respective lists are iterated rightwards. The value that
; is changed is determined by the current reduction order.
Video.OpenGL.FormatPicker.ColorBits = 32,24,16,15,12,0
Video.OpenGL.FormatPicker.DepthBits = 32,24,16,0
Video.OpenGL.FormatPicker.AlphaBits = 8,0
Video.OpenGL.FormatPicker.StencilBits = 8,1,0
Video.OpenGL.FormatPicker.AccumColorBits = 32,24,16,15,12,0
Video.OpenGL.FormatPicker.AccumAlphaBits = 8,0
Video.OpenGL.FormatPicker.MultiSamples = 16,8,6,4,2,0

; There are currently 3 ways to draw text:
; 1) Using a special multitexture setup that blends the FG and BG color.
;    Preferred, as we save the texture environment switch.
;    Obviously requires MT.
; 2) Using "Blend" environment which has the same effect as (1).
;    Not all HW properly supports this.
; 3) Most ugly: separate passes for FG and BG - needs two textures (one 
;    with background, one with foreground transparency), and doesn't always 
;    look right with AA! (We ignore that until someone complains.)

; Enable method 1.
Video.OpenGL.FontCache.UseMultiTexturing = yes
; Disable method 2, as a number HW/drivers don't seem to grok it.
Video.OpenGL.FontCache.UseIntensityBlend = no
