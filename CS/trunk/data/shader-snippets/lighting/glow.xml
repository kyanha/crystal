<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />
    
    <input file="/shader-snippets/texCoord.inp"	
      condition='vars."tex glow".texture' />
    
    <input name="texGlow" type="tex2d" default="complex"
	condition='vars."tex glow".texture'>
      <block location="cg:pass">
	<texture name="tex glow" destination="fragmentIn.texGlow" />
      </block>
      
      <block location="glsl:pass">
        <texture name="tex glow" destination="in_texGlow" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texGlow" />
      </block>
      
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGlow" />
      </block>
      
      <block location="cg:fragmentMain">
	texGlow = fragmentIn.texGlow;
      </block>

      <block location="glsl:fragmentMain">
        #sampler_assign texGlow in_texGlow
      </block>
    </input>
    
    <input name="surfaceColor" type="rgba" />
   
    <!-- In PS1.x you can't use the same texcoords for multiple TUs,
         so the glow coordinates have to be copied in tbe VP. -->
    <block location="cg:vertexToFragment">
      <varying type="texcoord2" name="texCoordGlow" />
    </block>
    
    <block location="cg:vertexMain">
      surfaceWithGlow = surfaceColor;
      texCoordGlow = texCoord;
    </block>
    <block location="glsl:vertexMain">
      surfaceWithGlow = surfaceColor;
    </block>

    <block location="cg:fragmentMain">
    #if FRAGMENT_PROGRAM_LEVEL >= 0x200
      texCoordGlow = texCoord;
    #endif
      surfaceWithGlow = surfaceColor;
      <?if vars."tex glow".texture ?>
	surfaceWithGlow.rgb += tex2D (texGlow, texCoordGlow).rgb;
      <?endif?>
    </block>
    <block location="glsl:fragmentMain">
      surfaceWithGlow = surfaceColor;
      <?if vars."tex glow".texture ?>
        surfaceWithGlow.rgb += texture2D (texGlow, texCoord).rgb;
      <?endif?>
    </block>
    
    <output name="surfaceWithGlow" type="rgba" />
  </technique>
  </snippet>
