<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein
            (C) 2012 by Matthieu Kraus

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />

    <input name="texAccum0" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex accumulation 0" destination="fragmentIn.Accum0" />
      </block>
      <block location="glsl:pass">
        <texture name="tex accumulation 0" destination="in_texAccum0" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texAccum0" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texAccum0" />
      </block>
      
      <block location="cg:fragmentMain">
        texAccum0 = fragmentIn.texAccum0;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texAccum0 in_texAccum0
      </block>
    </input>

    <input name="texAccum1" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex accumulation 1" destination="fragmentIn.Accum1" />
      </block>
      <block location="glsl:pass">
        <texture name="tex accumulation 1" destination="in_texAccum1" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texAccum1" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texAccum1" />
      </block>
      
      <block location="cg:fragmentMain">
        texAccum1 = fragmentIn.texAccum1;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texAccum1 in_texAccum1
      </block>
    </input>

    <input name="buffer_scaleoffset" type="translateScale2" default="complex">
      <block location="shadervars">
         <shadervar name="gbuffer scaleoffset" type="vector4">0.5,0.5,0.5,0.5</shadervar>
      </block> 

      <block location="cg:variablemap">
	  <variablemap variable="gbuffer scaleoffset" destination="fragmentIn.buffer_scaleoffset" />
      </block>

      <block location="glsl:variablemap">
	  <variablemap variable="gbuffer scaleoffset" destination="in_buffer_scaleoffset" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="float4" name="buffer_scaleoffset" />
      </block>

      <block location="glsl:inputs">
	  <uniform type="float4" name="in_buffer_scaleoffset" />
      </block>
      
      <block location="cg:fragmentMain">
	  buffer_scaleoffset = fragmentIn.buffer_scaleoffset;
      </block>

      <block location="glsl:fragmentMain">
	  buffer_scaleoffset = in_buffer_scaleoffset;
      </block>
    </input>

    <input name="positionS" type="position4_screen" />

    <block location="cg:vertexMain">
      diffuseColor = float3(0.0);
      specularColor = float3(0.0);
    </block>
    <block location="glsl:vertexMain">
      diffuseColor = vec3(0.0);
      specularColor = vec3(0.0);
    </block>

    <block location="cg:fragmentMain">
      float2 screenXY = positionS.xy / positionS.w;
      float2 texCoord = screenXY * buffer_scaleoffset.xy + buffer_scaleoffset.zw;

      diffuseColor = tex2D(texAccum0, texCoord).rgb;
      diffuseColor_attr_perfragment = true;
      specularColor = tex2D(texAccum1, texCoord).rgb;
      specularColor_attr_perfragment = true;
    </block>
    <block location="glsl:fragmentMain">
      vec2 screenXY = positionS.xy / positionS.w;
      vec2 texCoord = screenXY * buffer_scaleoffset.xy + buffer_scaleoffset.zw;

      diffuseColor = texture2D(texAccum0, texCoord).rgb;
      diffuseColor_attr_perfragment = true;
      specularColor = texture2D(texAccum1, texCoord).rgb;
      specularColor_attr_perfragment = true;
    </block>
    
    <output name="diffuseColor" type="rgb">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="specularColor" type="rgb">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
