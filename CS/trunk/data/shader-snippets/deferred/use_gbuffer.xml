<!--
  Copyright (C) 2012 by Matthieu Kraus

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />

    <input name="texGBuffer0" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex gbuffer 0" destination="fragmentIn.GBuffer0" />
      </block>
      <block location="glsl:pass">
        <texture name="tex gbuffer 0" destination="in_texGBuffer0" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texGBuffer0" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGBuffer0" />
      </block>
      
      <block location="cg:fragmentMain">
        texGBuffer0 = fragmentIn.texGBuffer0;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texGBuffer0 in_texGBuffer0
      </block>
    </input>

    <input name="texGBufferDepth" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex gbuffer depth" destination="fragmentIn.GBufferDepth" />
      </block>
      <block location="glsl:pass">
        <texture name="tex gbuffer depth" destination="in_texGBufferDepth" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texGBufferDepth" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGBufferDepth" />
      </block>
      
      <block location="cg:fragmentMain">
        texGBufferDepth = fragmentIn.texGBufferDepth;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texGBufferDepth in_texGBufferDepth
      </block>
    </input>

    <input name="ProjInv" type="float4x4" default="complex">
      <block location="cg:variablemap">
        <variablemap variable="projection transform inverse" destination="fragmentIn.ProjInv" />
      </block>
      <block location="glsl:variablemap">
        <variablemap variable="projection transform inverse" destination="in_ProjInv" />
      </block>

      <block location="cg:fragmentIn">
	<uniform type="float4x4" name="ProjInv" />
      </block>
      <block location="glsl:inputs">
        <uniform type="float4x4" name="in_ProjInv" />
      </block>
      
      <block location="cg:fragmentMain">
	ProjInv = fragmentIn.ProjInv;
      </block>

      <block location="glsl:fragmentMain">
        ProjInv = in_ProjInv;
      </block>
    </input>

    <input name="buffer_scaleoffset" type="translateScale2" default="complex">
      <block location="shadervars">
         <shadervar name="gbuffer scaleoffset" type="vector4">0.5,0.5,0.5,0.5</shadervar>
      </block> 

      <block location="cg:variablemap">
	  <variablemap variable="gbuffer scaleoffset" destination="fragmentIn.buffer_scaleoffset" />
      </block>

      <block location="glsl:variablemap">
	  <variablemap variable="gbuffer scaleoffset" destination="in_buffer_scaleoffset" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="float4" name="buffer_scaleoffset" />
      </block>

      <block location="glsl:inputs">
	  <uniform type="float4" name="in_buffer_scaleoffset" />
      </block>
      
      <block location="cg:fragmentMain">
	  buffer_scaleoffset = fragmentIn.buffer_scaleoffset;
      </block>

      <block location="glsl:fragmentMain">
	  buffer_scaleoffset = in_buffer_scaleoffset;
      </block>
    </input>

    <input name="positionS" type="position4_screen" />

    <block location="cg:vertexMain">
      normal    = float3(0.0, 0.0, 1.0);
      shininess = 0.0;
      position  = positionS;
    </block>

    <block location="glsl:vertexMain">
      normal   = vec3(0.0, 0.0, 1.0);
      shininess = 0.0;
      position = positionS;
    </block>

    <block location="cg:fragmentMain">
      float2 screenXY = positionS.xy / positionS.w;
      texCoord = screenXY * buffer_scaleoffset.xy + buffer_scaleoffset.zw;
      texCoord_attr_perfragment = true;

      float4 gBuffer0     = tex2D (texGBuffer0,     texCoord);
      depth               = tex2D (texGBufferDepth, texCoord).x;
      depth_attr_perfragment = true;

      normal.xyz = gBuffer0.xyz * 2.0 - 1.0;
      normal_attr_perfragment = true;
      shininess = gBuffer0.w;
      shininess_attr_perfragment = true;
      position  = mul(ProjInv, float4(screenXY.x, -screenXY.y, 1.0 - 2.0 * depth, 1.0));
      position /= position.w;
      position_attr_perfragment = true;
    </block>

    <block location="glsl:fragmentMain">
      vec2 screenXY = positionS.xy / positionS.w;
      texCoord = screenXY * buffer_scaleoffset.xy + buffer_scaleoffset.zw;
      texCoord_attr_perfragment = true;

      vec4  gBuffer0     = texture2D (texGBuffer0,     texCoord);
      depth              = texture2D (texGBufferDepth, texCoord).x;
      depth_attr_perfragment = true;

      normal.xyz = gBuffer0.xyz * 2.0 - 1.0;
      normal_attr_perfragment = true;
      shininess = gBuffer0.w;
      shininess_attr_perfragment = true;
      position  = ProjInv * vec4(screenXY.x, -screenXY.y, 1.0 - 2.0 * depth, 1.0);
      position /= position.w;
      position_attr_perfragment = true;
    </block>

    <output name="shininess" type="float">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="normal" type="normal_tangent">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="position" type="position4_world">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="depth" type="depth">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="texCoord" type="texcoord2">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
