<!--
  Copyright (C) 2012 by Matthieu Kraus

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />

    <input name="texGBuffer0" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex gbuffer 0" destination="fragmentIn.GBuffer0" />
      </block>
      <block location="glsl:pass">
        <texture name="tex gbuffer 0" destination="in_texGBuffer0" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texGBuffer0" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGBuffer0" />
      </block>
      <block location="cg:variablemap">
        <variablemap variable="projection transform inverse" destination="fragmentIn.ProjInv" />
      </block>
      
      <block location="cg:fragmentMain">
        texGBuffer0 = fragmentIn.texGBuffer0;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texGBuffer0 in_texGBuffer0
      </block>
    </input>

    <input name="texGBuffer1" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex gbuffer 1" destination="fragmentIn.GBuffer1" />
      </block>
      <block location="glsl:pass">
        <texture name="tex gbuffer 1" destination="in_texGBuffer1" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texGBuffer1" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGBuffer1" />
      </block>
      
      <block location="cg:fragmentMain">
        texGBuffer1 = fragmentIn.texGBuffer1;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texGBuffer1 in_texGBuffer1
      </block>
    </input>

    <input name="texGBuffer2" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex gbuffer 2" destination="fragmentIn.GBuffer2" />
      </block>
      <block location="glsl:pass">
        <texture name="tex gbuffer 2" destination="in_texGBuffer2" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texGBuffer2" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGBuffer2" />
      </block>
      
      <block location="cg:fragmentMain">
        texGBuffer2 = fragmentIn.texGBuffer2;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texGBuffer2 in_texGBuffer2
      </block>
    </input>

    <input name="texGBuffer3" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex gbuffer 3" destination="fragmentIn.GBuffer3" />
      </block>
      <block location="glsl:pass">
        <texture name="tex gbuffer 3" destination="in_texGBuffer3" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texGBuffer3" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGBuffer3" />
      </block>
      
      <block location="cg:fragmentMain">
        texGBuffer3 = fragmentIn.texGBuffer3;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texGBuffer3 in_texGBuffer3
      </block>
    </input>

    <input name="texGBufferDepth" type="tex2d" default="complex">
      <block location="cg:pass">
        <texture name="tex gbuffer depth" destination="fragmentIn.GBufferDepth" />
      </block>
      <block location="glsl:pass">
        <texture name="tex gbuffer depth" destination="in_texGBufferDepth" />
      </block>
      
      <block location="cg:fragmentIn">
        <uniform type="tex2d" name="texGBufferDepth" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texGBufferDepth" />
      </block>
      
      <block location="cg:fragmentMain">
        texGBufferDepth = fragmentIn.texGBufferDepth;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texGBufferDepth in_texGBufferDepth
      </block>
    </input>

    <input name="ProjInv" type="float4x4" default="complex">
      <block location="cg:variablemap">
        <variablemap variable="projection transform inverse" destination="fragmentIn.ProjInv" />
      </block>
      <block location="glsl:variablemap">
        <variablemap variable="projection transform inverse" destination="in_ProjInv" />
      </block>

      <block location="cg:fragmentIn">
	<uniform type="float4x4" name="ProjInv" />
      </block>
      <block location="glsl:inputs">
        <uniform type="float4x4" name="in_ProjInv" />
      </block>
      
      <block location="cg:fragmentMain">
	ProjInv = fragmentIn.ProjInv;
      </block>

      <block location="glsl:fragmentMain">
        ProjInv = in_ProjInv;
      </block>
    </input>

    <input name="positionS" type="position4_screen" />

    <block location="cg:vertexMain">
      diffuse   = float4(0.0);
      normal    = float3(0.0, 0.0, 1.0);
      ambient   = float3(0.0);
      specular  = float3(0.0);
      glow      = float4(0.0);
      shininess = 0.0;
      position  = positionS;
    </block>

    <block location="glsl:vertexMain">
      diffuse  = vec4(0.0);
      normal   = vec3(0.0, 0.0, 1.0);
      ambient  = vec3(0.0);
      specular = vec3(0.0);
      glow     = vec4(0.0);
      shininess = 0.0;
      position = positionS;
    </block>

    <block location="cg:fragmentMain">
      float2 screenXY = positionS.xy / positionS.w;
      float2 texCoord = screenXY * 0.5 + 0.5;

      float4 gBuffer0     = tex2D (texGBuffer0,     texCoord);
      float4 gBuffer1     = tex2D (texGBuffer1,     texCoord);
      float4 gBuffer2     = tex2D (texGBuffer2,     texCoord);
      float4 gBuffer3     = tex2D (texGBuffer3,     texCoord);
      float  gBufferDepth = tex2D (texGBufferDepth, texCoord).x;

      diffuse   = gBuffer0;
      diffuse_attr_perfragment = true;
      normal.xy = gBuffer1.xy * 2.0 - 1.0;
      normal.z  = -sqrt (1.0 - saturate(dot (normal.xy, normal.xy)));
      normal_attr_perfragment = true;
      shininess = gBuffer1.z;
      shininess_attr_perfragment = true;
      ambient   = gBuffer2.rgb;
      ambient_attr_perfragment = true;
      specular  = float3(gBuffer1.a, gBuffer2.a, gBuffer3.a);
      specular_attr_perfragment = true;
      glow      = float4(gBuffer3.rgb, 0.0);
      glow_attr_perfragment = true;
      position  = mul(ProjInv, float4(screenXY.x, -screenXY.y, 1.0 - 2.0 * gBufferDepth, 1.0));
      position /= position.w;
      position_attr_perfragment = true;
    </block>

    <block location="glsl:fragmentMain">
      vec2 screenXY = positionS.xy / positionS.w;
      vec2 texCoord = screenXY * 0.5 + 0.5;

      vec4  gBuffer0     = texture2D (texGBuffer0,     texCoord);
      vec4  gBuffer1     = texture2D (texGBuffer1,     texCoord);
      vec4  gBuffer2     = texture2D (texGBuffer2,     texCoord);
      vec4  gBuffer3     = texture2D (texGBuffer3,     texCoord);
      float gBufferDepth = texture2D (texGBufferDepth, texCoord).x;

      diffuse   = vec4(gBuffer0);
      diffuse_attr_perfragment = true;
      normal.xy = gBuffer1.xy * 2.0 - 1.0;
      normal.z  = -sqrt (1.0 - clamp(dot (normal.xy, normal.xy), 0.0, 1.0));
      normal_attr_perfragment = true;
      shininess = gBuffer1.z;
      shininess_attr_perfragment = true;
      ambient   = gBuffer2.rgb;
      ambient_attr_perfragment = true;
      specular  = vec3(gBuffer1.a, gBuffer2.a, gBuffer3.a);
      specular_attr_perfragment = true;
      glow      = vec4(gBuffer3.rgb, 0.0);
      glow_attr_perfragment = true;
      position  = ProjInv * vec4(screenXY.x, -screenXY.y, 1.0 - 2.0 * gBufferDepth, 1.0);
      position /= position.w;
      position_attr_perfragment = true;
    </block>

    <output name="diffuse" type="rgba">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="ambient" type="rgb">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="specular" type="rgb">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="glow" type="rgba">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="shininess" type="float">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="normal" type="normal_tangent">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="position" type="position4_world">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
