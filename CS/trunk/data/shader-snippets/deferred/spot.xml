<?xml version="1.0" encoding="utf-8" ?>
<!--
  Copyright (C) 2008 by Frank Richter
                2012 by Matthieu Kraus

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet id="lighting">
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />

    <block location="pass">
      <?Include /shader-snippets/deferred/lighting-tools.inc ?>
    </block>

    <block location="glsl:variablemap">
      <? Lighting_Variablemaps ?>
    </block>
    <block location="cg:variablemap">
      <? Lighting_Variablemaps ?>
    </block>

    <block location="cg:definitions">
      <?Include /shader-snippets/deferred/lighting-common.cginc ?>
    </block>
    <block location="glsl:definitions">
      <?Include /shader-snippets/deferred/lighting-common.glsli?>
    </block>


    <input name="position" type="position4_camera" />
    <!-- Surface normal -->
    <input name="normal" type="normal_camera" />

    <!-- Shininess value for specular reflection -->
    <input name="shininess" type="float" default="value" defval="32" />

    <block location="cg:vertexMain">
      diffuseColor = float3(0.0);
      specularColor = float3(0.0);

      diffuseColor_attr_perfragment = true;
      specularColor_attr_perfragment = true;
    </block>
    <block location="glsl:vertexMain">
      diffuseColor = vec3(0.0);
      specularColor = vec3(0.0);

      diffuseColor_attr_perfragment = true;
      specularColor_attr_perfragment = true;
    </block>
	
    <block location="cg:fragmentMain">
      diffuseColor = float3(0.0);
      specularColor = float3(0.0);

      float3 L = lightPosition - position.xyz;
      float dist = length (L);
      L = normalize (L);

      // Since we are in view space we know that the eye position is at the origin.
      float3 V = -normalize (position.xyz); 
      float3 H = normalize (L + V);

      // Compute Attenuation
      float attn = Attenuate(dist, lightAttenuation);

      // Compute spotlight attenuation
      attn *= Light_Spot (L, -lightDirection, lightInnerFalloff, lightOuterFalloff);

      // Compute phong lighting.
      diffuseColor = lightDiffuse * saturate (dot (normal, L));
      specularColor = lightSpecular * pow (saturate (dot (normal, H)), shininess);

      diffuseColor_attr_perfragment = true;
      specularColor_attr_perfragment = true;
    </block>
    <block location="glsl:fragmentMain">
      diffuseColor = vec3(0.0);
      specularColor = vec3(0.0);

      vec3 L = lightPosition - position.xyz;
      float dist = length (L);
      L /= dist;

      // Since we are in view space we know that the eye position is at the origin.
      vec3 V = -normalize (position.xyz); 
      vec3 H = normalize (L + V);

      // Compute Attenuation
      float attn = Attenuate(dist, lightAttenuation);

      // Compute spotlight attenuation
      attn *= Light_Spot (L, -lightDirection, lightInnerFalloff, lightOuterFalloff);

      // Compute phong lighting.
      diffuseColor = attn * lightDiffuse * clamp (dot (normal, L), 0.0, 1.0);
      specularColor = attn * lightSpecular * pow (clamp (dot (normal, H), 0.0, 1.0), shininess);

      diffuseColor_attr_perfragment = true;
      specularColor_attr_perfragment = true;
    </block>

    <output name="diffuseColor" type="rgb">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="specularColor" type="rgb">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
