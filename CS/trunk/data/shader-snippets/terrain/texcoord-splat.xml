<!--
  Copyright (C) 2007-2010 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />
    
    <input file="/shader-snippets/texCoord.inp"	/>

    <input name="texture_scale" type="scale2" default="complex" private="yes">
      <block location="shadervars">
	  <shadervar name="texture scale" type="vector2">1,1</shadervar>
      </block>
      
      <block location="cg:variablemap">
	  <variablemap variable="texture scale" destination="vertexIn.texture_scale" />
	  <variablemap variable="texture scale" destination="fragmentIn.texture_scale" />
      </block>

      <block location="glsl:variablemap">
	  <variablemap variable="texture scale" destination="in_texture_scale" />
      </block>
      
      <block location="cg:vertexIn">
	  <uniform type="float2" name="texture_scale" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="float2" name="texture_scale" />
      </block>
      
      <block location="glsl:inputs">
	  <uniform type="float2" name="in_texture_scale" />
      </block>
            
      <block location="cg:vertexMain">
	  texture_scale = vertexIn.texture_scale;
      </block>

      <block location="cg:fragmentMain">
	  texture_scale = fragmentIn.texture_scale;
      </block>

      <block location="glsl:vertexMain">
	  texture_scale = in_texture_scale;
      </block>
      
      <block location="glsl:fragmentMain">
	  texture_scale = in_texture_scale;
      </block>
    </input>
    
    <block location="cg:vertexMain">
      splatCoord = texCoord*texture_scale;
    </block>
    
    <block location="cg:fragmentMain">
      splatCoord = texCoord*texture_scale;
    </block>

    <block location="glsl:vertexMain">
      splatCoord = texCoord*texture_scale;
    </block>

    <block location="glsl:fragmentMain">
      splatCoord = texCoord*texture_scale;
    </block>
    
    <output name="splatCoord" type="texcoord2" />
  </technique>
</snippet>

