<!--
  Copyright (C) 2008 by Mike Gist

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->

<snippet>
  <technique priority="100">
      <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
      <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />

    <input name="inputColor" type="rgba" />
    <input file="/shader-snippets/meshgen-extra.inp" private="yes" />
    <input file="/shader-snippets/instancingTransforms.inp" private="yes" />
    <input file="/shader-snippets/ModelView.inp" private="yes" />
    <input name="meshgenFadeInfo" type="float4" default="complex" private="yes">
      <block location="cg:vertexIn">
        <uniform type="float4" name="meshgenFadeInfo" />
      </block>
      <block location="cg:fragmentIn">
        <uniform type="float4" name="meshgenFadeInfo" />
      </block>
      <block location="glsl:inputs">
        <uniform type="float4" name="in_meshgenFadeInfo" />
      </block>
      
      <block location="cg:vertexMain">
        meshgenFadeInfo = vertexIn.meshgenFadeInfo;
      </block>
      <block location="cg:fragmentMain">
        meshgenFadeInfo = fragmentIn.meshgenFadeInfo;
      </block>
      <block location="glsl:vertexMain">
        meshgenFadeInfo = in_meshgenFadeInfo;
      </block>
      <block location="glsl:fragmentMain">
        meshgenFadeInfo = in_meshgenFadeInfo;
      </block>

      <block location="cg:variablemap">
        <variablemap variable="meshgen fade info" 
          destination="vertexIn.meshgenFadeInfo" />
        <variablemap variable="meshgen fade info" 
          destination="fragmentIn.meshgenFadeInfo" />
      </block>
      <block location="glsl:variablemap">
        <variablemap variable="meshgen fade info" 
          destination="in_meshgenFadeInfo" />
      </block>
    </input>

    <block location="cg:vertexToFragment">
      <varying type="float" name="alpha_color" />
    </block>
    <block location="glsl:vertexToFragment">
      <varying type="float" name="alpha_color" />
    </block>

    <block location="cg:vertexMain">
      // Compute alpha at instance origin
      float4 origin_obj = mul (instancingTransforms, float4 (0, 0, 0, 1));
      float4 origin_eye = mul (ModelView, origin_obj);
      float dist = length (origin_eye.xyz);
      float2 fade_values = float2(dist) * meshgenFadeInfo.xz + meshgenFadeInfo.yw;
      alpha_color = saturate (min (fade_values.x, fade_values.y));
      
      outputColor.rgb = inputColor.rgb;
      outputColor.a = inputColor.a * alpha_color;
    </block>

    <block location="glsl:vertexMain">
      // Compute alpha at instance origin
      vec4 origin_obj = instancingTransforms * vec4 (0, 0, 0, 1);
      vec4 origin_eye = ModelView * origin_obj;
      float dist = length (origin_eye.xyz);
      vec2 fade_values = vec2(dist) * meshgenFadeInfo.xz + meshgenFadeInfo.yw;
      alpha_color = clamp (min (fade_values.x, fade_values.y), 0.0, 1.0);
      
      outputColor.rgb = inputColor.rgb;
      outputColor.a = inputColor.a * alpha_color;
    </block>

    <block location="cg:fragmentMain">
      outputColor.rgb = inputColor.rgb;
      outputColor.a = inputColor.a * alpha_color;
    </block>

    <block location="glsl:fragmentMain">
      outputColor.rgb = inputColor.rgb;
      outputColor.a = inputColor.a * alpha_color;
    </block>

    <output name="outputColor" type="rgba" />
  </technique>
</snippet>
