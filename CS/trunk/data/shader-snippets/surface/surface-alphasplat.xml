<?xml version="1.0" encoding="utf-8" ?> 
<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />
    
    <input name="texCoordSplat" type="texcoord2" />
    <input file="/shader-snippets/texCoord.inp"	private="yes" />

    <input name="texAlpha1" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex alpha map 1" destination="fragmentIn.texAlpha1" />
      </block>
      <block location="glsl:pass">
        <texture name="tex alpha map 1" destination="in_texAlpha1" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texAlpha1" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texAlpha1" />
      </block>
      
      <block location="cg:fragmentMain">
	texAlpha1 = fragmentIn.texAlpha1;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texAlpha1 in_texAlpha1
      </block>
    </input>
    <input name="texAlpha2" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex alpha map 2" destination="fragmentIn.texAlpha2" />
      </block>
      <block location="glsl:pass">
        <texture name="tex alpha map 2" destination="in_texAlpha2" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texAlpha2" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texAlpha2" />
      </block>
      
      <block location="cg:fragmentMain">
	texAlpha2 = fragmentIn.texAlpha2;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texAlpha2 in_texAlpha2
      </block>
    </input>
    <input name="texAlpha3" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex alpha map 3" destination="fragmentIn.texAlpha3" />
      </block>
      <block location="glsl:pass">
        <texture name="tex alpha map 3" destination="in_texAlpha3" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texAlpha3" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texAlpha3" />
      </block>
      
      <block location="cg:fragmentMain">
	texAlpha3 = fragmentIn.texAlpha3;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texAlpha3 in_texAlpha3
      </block>
    </input>

    <input name="texDiffuse1" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 1" destination="fragmentIn.texDiffuse1" fallback="tex diffuse" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 1" destination="in_texDiffuse1" fallback="tex diffuse" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse1" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse1" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse1 = fragmentIn.texDiffuse1;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse1 in_texDiffuse1
      </block>
    </input>

    <input name="texDiffuse2" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 2" destination="fragmentIn.texDiffuse2" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 2" destination="in_texDiffuse2" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse2" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse2" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse2 = fragmentIn.texDiffuse2;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse2 in_texDiffuse2
      </block>
    </input>

    <input name="texDiffuse3" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 3" destination="fragmentIn.texDiffuse3" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 3" destination="in_texDiffuse3" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse3" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse3" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse3 = fragmentIn.texDiffuse3;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse3 in_texDiffuse3
      </block>
    </input>

    <input name="texDiffuse4" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 4" destination="fragmentIn.texDiffuse4" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 4" destination="in_texDiffuse4" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse4" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse4" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse4 = fragmentIn.texDiffuse4;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse4 in_texDiffuse4
      </block>
    </input>

    <input name="texDiffuse5" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 5" destination="fragmentIn.texDiffuse5" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 5" destination="in_texDiffuse5" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse5" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse5" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse5 = fragmentIn.texDiffuse5;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse5 in_texDiffuse5
      </block>
    </input>

    <input name="texDiffuse6" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 6" destination="fragmentIn.texDiffuse6" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 6" destination="in_texDiffuse6" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse6" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse6" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse6 = fragmentIn.texDiffuse6;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse6 in_texDiffuse6
      </block>
    </input>

    <input name="texDiffuse7" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 7" destination="fragmentIn.texDiffuse7" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 7" destination="in_texDiffuse7" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse7" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse7" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse7 = fragmentIn.texDiffuse7;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse7 in_texDiffuse7
      </block>
    </input>

    <input name="texDiffuse8" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 8" destination="fragmentIn.texDiffuse8" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 8" destination="in_texDiffuse8" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse8" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse8" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse8 = fragmentIn.texDiffuse8;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse8 in_texDiffuse8
      </block>
    </input>

    <input name="texDiffuse9" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 9" destination="fragmentIn.texDiffuse9" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 9" destination="in_texDiffuse9" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse9" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse9" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse9 = fragmentIn.texDiffuse9;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse9 in_texDiffuse9
      </block>
    </input>

    <input name="texDiffuse10" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 10" destination="fragmentIn.texDiffuse10" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 10" destination="in_texDiffuse10" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse10" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse10" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse10 = fragmentIn.texDiffuse10;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse10 in_texDiffuse10
      </block>
    </input>

    <input name="texDiffuse11" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 11" destination="fragmentIn.texDiffuse11" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 11" destination="in_texDiffuse11" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse11" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse11" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse11 = fragmentIn.texDiffuse11;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse11 in_texDiffuse11
      </block>
    </input>

    <input name="texDiffuse12" type="tex2d" default="complex">
      <block location="cg:pass">
	<texture name="tex diffuse 12" destination="fragmentIn.texDiffuse12" fallback="standardtex black" />
      </block>
      <block location="glsl:pass">
        <texture name="tex diffuse 12" destination="in_texDiffuse12" fallback="standardtex black" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texDiffuse12" />
      </block>
      <block location="glsl:inputs">
        <uniform type="tex2d" name="in_texDiffuse12" />
      </block>
      
      <block location="cg:fragmentMain">
	texDiffuse12 = fragmentIn.texDiffuse12;
      </block>
      <block location="glsl:fragmentMain">
        #sampler_assign texDiffuse12 in_texDiffuse12
      </block>
    </input>

    <input name="alpha_scaleoffset" type="translateScale2" default="complex">
      <block location="shadervars">
         <shadervar name="alpha scaleoffset" type="vector4">1,1,0,0</shadervar>
      </block> 

      <block location="cg:variablemap">
	  <variablemap variable="alpha scaleoffset" destination="fragmentIn.alpha_scaleoffset" />
      </block>

      <block location="glsl:variablemap">
	  <variablemap variable="alpha scaleoffset" destination="in_alpha_scaleoffset" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="float4" name="alpha_scaleoffset" />
      </block>

      <block location="glsl:inputs">
	  <uniform type="float4" name="in_alpha_scaleoffset" />
      </block>
      
      <block location="cg:fragmentMain">
	  alpha_scaleoffset = fragmentIn.alpha_scaleoffset;
      </block>

      <block location="glsl:fragmentMain">
	  alpha_scaleoffset = in_alpha_scaleoffset;
      </block>
    </input>
    
    <block location="cg:vertexMain">
      surfaceColor = float4(0);
      surfaceColor_attr_perfragment = true;
    </block>

    <block location="glsl:vertexMain">
      surfaceColor = vec4(0);
      surfaceColor_attr_perfragment = true;
    </block>

    <block location="cg:fragmentMain">
      float2 offsetAlphaCoord = (texCoord * alpha_scaleoffset.xy) + alpha_scaleoffset.zw;

      float4x4 texValues = float4x4(
        tex2D (texDiffuse1, texCoordSplat),
        tex2D (texDiffuse2, texCoordSplat),
        tex2D (texDiffuse3, texCoordSplat),
        tex2D (texDiffuse4, texCoordSplat));
      surfaceColor = mul(tex2D (texAlpha1, offsetAlphaCoord), texValues);
      <?if vars."tex alpha map 2".texture ?>
        texValues = float4x4(
          tex2D (texDiffuse5, texCoordSplat),
          tex2D (texDiffuse6, texCoordSplat),
          tex2D (texDiffuse7, texCoordSplat),
          tex2D (texDiffuse8, texCoordSplat));
        surfaceColor += mul(tex2D (texAlpha2, offsetAlphaCoord), texValues);
      <?if vars."tex alpha map 3".texture ?>
        texValues = float4x4(
          tex2D (texDiffuse9, texCoordSplat),
          tex2D (texDiffuse10, texCoordSplat),
          tex2D (texDiffuse11, texCoordSplat),
          tex2D (texDiffuse12, texCoordSplat));
        surfaceColor += mul(tex2D (texAlpha3, offsetAlphaCoord), texValues);
      <?endif?><?! vars."tex alpha map 3".texture ?>
      <?endif?><?! vars."tex alpha map 2".texture ?>

      surfaceColor_attr_perfragment = true;
    </block>

    <block location="glsl:fragmentMain">
      vec2 offsetAlphaCoord = (texCoord * alpha_scaleoffset.xy) + alpha_scaleoffset.zw;

      mat4 texValues = mat4(
        texture2D (texDiffuse1, texCoordSplat),
        texture2D (texDiffuse2, texCoordSplat),
        texture2D (texDiffuse3, texCoordSplat),
        texture2D (texDiffuse4, texCoordSplat));
      surfaceColor = texValues * texture2D (texAlpha1, offsetAlphaCoord);
      <?if vars."tex alpha map 2".texture ?>
        texValues = mat4(
          texture2D (texDiffuse5, texCoordSplat),
          texture2D (texDiffuse6, texCoordSplat),
          texture2D (texDiffuse7, texCoordSplat),
          texture2D (texDiffuse8, texCoordSplat));
        surfaceColor += texValues * texture2D (texAlpha2, offsetAlphaCoord);
      <?if vars."tex alpha map 3".texture ?>
        texValues = mat4(
          texture2D (texDiffuse9, texCoordSplat),
          texture2D (texDiffuse10, texCoordSplat),
          texture2D (texDiffuse11, texCoordSplat),
          texture2D (texDiffuse12, texCoordSplat));
        surfaceColor += texValues * texture2D (texAlpha3, offsetAlphaCoord);
      <?endif?><?! vars."tex alpha map 3".texture ?>
      <?endif?><?! vars."tex alpha map 2".texture ?>

      surfaceColor_attr_perfragment = true;
    </block>
    
    <output name="surfaceColor" type="rgba">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
