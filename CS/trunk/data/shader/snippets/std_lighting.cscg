<!--
  Copyright (C) 2006 by Frank Richter
	    (C) 2006 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<include>
<?! This inserts the variable maps required by the snippets. ?>
<?InsertList VariableMaps ?>
<program>

<?! The snippets themselves likely provide their functionality as Cg.
    Include that code here. ?>
<?InsertList Includes?>

/* For a shader, information needs to flow from the application to the vertex
   program, the application to the fragment program and the vertex program
   to the fragment program:
     +-----+       +------------------+
     | App |------>|  Vertex Program  |
     +-----+\      +------------------+
	     \		    |
	      \		    v
	       \   +------------------+
	        \->| Fragment Program |
	           +------------------+
  
  Currently, the VP->FP direction is realized with a structure returned from 
  the VP entry point (VertToFrag) and the app->FP and app->VP directions by 
  global variables of the snippets (they are mapped invisibly to the user).
 */

/* This structure contains the information passed from the VP to the FP.
 */
struct VertToFrag
{
  // The projected vertex position.
  float4 Hposition : POSITION;
  
  // Information the snippets pass around.
  VertToFrag_Surface surface;
  VertToFrag_Fog fog;
  VertToFrag_Lighting lighting;
};

// The vertex program.
VertToFrag VertexMain (float4 Position : POSITION,
		       /* The matrices are bound with the state.matrix.... semantics.
			* For more info see the Cg and ARB_vertex_program docs.
			*/
		       uniform float4x4 ModelViewProj : state.matrix.mvp)
{
  VertToFrag V2F;

  V2F.Hposition = mul (ModelViewProj, Position);
  
  /* Let the snippets set up the data needed in the fragment program. For all
   * the snippet's vertex-to-fragment structures you need to call the Setup()
   * method.
   */
  V2F.surface.Setup ();
  V2F.lighting.Setup ();
  V2F.fog.Setup ();

  return V2F;
}

// The fragment program.
float4 FragmentMain (VertToFrag V2F) : COLOR
{
  // The snippets fragment-related structures.
  Frag_Surface surface;
  Frag_Lighting lighting;
  Frag_Fog fog;
  
  /* Let the snippets pull in the data they set up in the vertex program, so
   * call the Setup() methods of the fragment-related structures with the
   * vertex-to-fragment data. */
  surface.Setup (V2F.surface);
  lighting.Setup (V2F.lighting);
  fog.Setup (V2F.fog);
  
  /* Up to now, everything was initialization goop. The "meat" of the fragment
   * program is below.
   */
  /* Compute the illuminated fragment color. The "light" snippet will query
   * all information (diffuse color etc.) from the surface structure. */
  float4 color = lighting.Illuminate (surface);
  // Apply any fog.
  return fog.ApplyFog (color);
}

</program>
</include>
