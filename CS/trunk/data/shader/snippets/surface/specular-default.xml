<!--
  Copyright (C) 2008 by Frank Richter

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    
    <input file="/shader/snippets/texCoord.inp"	/>
    
    <input name="texSpecular" type="tex2d" default="complex">
      <block location="pass">
	<texture name="tex specular" destination="fragmentIn.texSpecular" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texSpecular" />
      </block>
      
      <block location="cg:fragmentMain">
	texSpecular = fragmentIn.texSpecular;
      </block>
    </input>
    
    <input name="alpha" type="float" default="value" defval="1">
      <attribute name="perfragment" type="bool" defval="true" />
    </input>
    
    <input name="specular" type="rgb" default="complex" private="yes">
      <block location="cg:variablemap">
	<variablemap variable="specular" destination="fragmentIn.specular" />
	<variablemap variable="specular" destination="vertexIn.specular" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="rgb" name="specular" />
      </block>
      
      <block location="cg:vertexIn">
	<uniform type="rgb" name="specular" />
      </block>
      
      <block location="cg:fragmentMain">
	specular = fragmentIn.specular;
      </block>

      <block location="cg:vertexMain">
	specular = vertexIn.specular;
      </block>
    </input>
      
    <block location="cg:vertexMain">
      specularColor = specular*alpha;
      <?if vars."tex specular".texture?>
        specularColor_attr_perfragment = true;
      <?else?>
        specularColor_attr_perfragment = alpha_attr_perfragment;
      <?endif?>
    </block>
    
    <block location="cg:fragmentMain">
      <?if vars."tex specular".texture?>
        specularColor = tex2D (texSpecular, texCoord).rgb;
	specularColor_attr_perfragment = true;
      <?else?>
        specularColor = specular;
	specularColor_attr_perfragment = alpha_attr_perfragment;
      <?endif?>
      specularColor *= alpha;
    </block>
    
    <output name="specularColor" type="rgb">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
