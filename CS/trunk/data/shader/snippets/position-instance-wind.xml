<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    
    <input name="Hposition" type="position4_object" default="complex">
      <block location="cg:vertexIn">
	<varying type="position4" name="Hposition" binding="POSITION" />
      </block>
      
      <block location="cg:vertexMain">
	Hposition = vertexIn.Hposition;
      </block>
    </input>
    
    <!-- Slightly dirty: float4x4 is no weaver type, so gets written out 
	 verbatim -->
    <input name="ModelViewProj" type="float4x4" default="complex">
      <block location="cg:vertexIn">
	<uniform type="float4x4" name="ModelViewProj" binding="state.matrix.mvp" />
      </block>
      
      <block location="cg:vertexMain">
	ModelViewProj = vertexIn.ModelViewProj;
      </block>
    </input>

    <!-- Direction (x,z), random factor, bias. -->
    <input name="wind_data" type="float4" default="complex">
      <block location="cg:vertexIn">
        <varying type="float4" name="wind_data" />
      </block>
  
      <block location="cg:vertexMain">
        wind_data= vertexIn.wind_data;
      </block>

      <block location="pass">
        <instanceparam source="wind data" destination="vertexIn.wind_data" />
      </block>
    </input>

    <input name="wind_speed" type="float" default="complex">
      <block location="cg:vertexIn">
        <varying type="float" name="wind_speed" />
      </block>
  
      <block location="cg:vertexMain">
        wind_speed = vertexIn.wind_speed;
      </block>

      <block location="pass">
        <instanceparam source="wind speed" destination="vertexIn.wind_speed" />
      </block>
    </input>

    <input name="standard_time" type="float" default="complex" private="yes">
      <block location="cg:variablemap">
	  <variablemap variable="standard time" destination="vertexIn.standard_time" />
      </block>
      
      <block location="cg:vertexIn">
	  <uniform type="float" name="standard_time" />
      </block>
      
      <block location="cg:vertexMain">
	  standard_time = vertexIn.standard_time;
      </block>
    </input>

    <input file="/shader/snippets/ModelView.inp" private="yes" />

    <input file="/shader/snippets/instancingTransforms.inp" private="yes" />

    <block location="cg:vertexToFragment">
      <varying type="position4" name="position" binding="POSITION" />
      <!-- This is needed since POSITION semantics can't be used for input in an FP -->
      <varying type="position4" name="position_screen" />
      <varying type="position4" name="position_object"/>
      <varying type="position4" name="position_world"/>
      <varying type="position4" name="position_camera"/>
      <varying type="float3x4" name="o2w"/>
    </block>
    
    <block location="cg:clips">
      <!-- Clip for reflection/refraction rendering -->
      <clip space="object">
	<plane type="shadervar">clip plane reflection</plane>
      </clip>
    </block>
  
    <block location="cg:definitions">
      <?Include /shader/snippets/cg-global_objectToWorld.cginc?>
    </block>
	
    <block location="cg:vertexMain">
      position_world = mul (instancingTransforms, Hposition);

      float posOffset = dot(position_world.xz, wind_data.xy) + wind_data.z;
      float2 offset = clamp(Hposition.y, 0.0, Hposition.y) * (wind_data.xy * ((wind_data.w-1)/wind_data.w + sin(wind_speed*standard_time+posOffset)/(wind_data.w)));
      Hposition.x += offset.x;
      Hposition.z += offset.y;
      position_world = mul (instancingTransforms, Hposition);

      position_object = Hposition;
      position_screen = position = mul (ModelViewProj, position_world);
      position_camera = mul (ModelView, position_world);
      
      APPLY_CLIPPING_VP(position_camera, position_world, position_object);
      
      /* The objectToWorld transform is needed in other places, so there is a 
	 global variable for it. Set that */
      SetGlobalObjectToWorld (instancingTransforms);
      // instanced params are only available in VPs, forward to FP manually
      o2w = float3x4(instancingTransforms[0],
	instancingTransforms[1], 
	instancingTransforms[2]);
    </block>
    
    <block location="cg:fragmentMain">
      APPLY_CLIPPING_FP;
      
      position = position_screen;
      
      /* The objectToWorld transform is needed in other places, so there is a 
	 global variable for it. Set that */
      SetGlobalObjectToWorld (
	float4x4 (o2w[0], o2w[1], o2w[2], float4 (0, 0, 0, 1)));
    </block>
    
    <output name="position" type="position4_screen" />
    <!-- @@@ FIXME: Other blocks may need the world space input as well... 
         Pass through. But is there a better (ie automatic) way? -->
    <output name="position_world" type="position4_world" />
    <output name="position_object" type="position4_object" />
    <output name="position_camera" type="position4_camera" />
  </technique>
</snippet>
