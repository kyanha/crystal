animfact = animfactlay->CreateAnimationFactory ();
animfact->SetName ("run");
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Hand");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Hand");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.61763 );
m *= csYRotMatrix3 ( 0.0216784 );
m *= csZRotMatrix3 ( -0.144693 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.41525 );
m *= csYRotMatrix3 ( -0.125149 );
m *= csZRotMatrix3 ( -0.114379 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.28109 );
m *= csYRotMatrix3 ( -0.225063 );
m *= csZRotMatrix3 ( -0.0759137 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.28959 );
m *= csYRotMatrix3 ( -0.219038 );
m *= csZRotMatrix3 ( -0.0787119 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.3461 );
m *= csYRotMatrix3 ( -0.177869 );
m *= csZRotMatrix3 ( -0.0961124 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.58714 );
m *= csYRotMatrix3 ( 0.0142755 );
m *= csZRotMatrix3 ( -0.144045 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57714 );
m *= csYRotMatrix3 ( 0.00594421 );
m *= csZRotMatrix3 ( -0.142968 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( -0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Forearm");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Forearm");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.317163 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.350466 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.458874 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.766658 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.02658 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.03066 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.977843 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.675032 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.589416 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.539664 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.4972 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.479083 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.463247 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.449843 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.478056 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.505135 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.486349 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.317163 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Toe11");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Toe11");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Foot");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Foot");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0681131 );
m *= csYRotMatrix3 ( -0.238179 );
m *= csZRotMatrix3 ( 0.0596955 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.159114 );
m *= csYRotMatrix3 ( -0.211372 );
m *= csZRotMatrix3 ( -0.138815 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.160524 );
m *= csYRotMatrix3 ( -0.176178 );
m *= csZRotMatrix3 ( -0.203674 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0903682 );
m *= csYRotMatrix3 ( -0.131107 );
m *= csZRotMatrix3 ( -0.168099 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.031677 );
m *= csYRotMatrix3 ( 0.172624 );
m *= csZRotMatrix3 ( -0.0657217 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0140336 );
m *= csYRotMatrix3 ( 0.196251 );
m *= csZRotMatrix3 ( -0.054979 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.015706 );
m *= csYRotMatrix3 ( 0.162293 );
m *= csZRotMatrix3 ( -0.0600672 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0404711 );
m *= csYRotMatrix3 ( -0.0413668 );
m *= csZRotMatrix3 ( -0.107789 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0638272 );
m *= csYRotMatrix3 ( -0.182696 );
m *= csZRotMatrix3 ( -0.0177112 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0669393 );
m *= csYRotMatrix3 ( -0.169225 );
m *= csZRotMatrix3 ( 0.0452976 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0958538 );
m *= csYRotMatrix3 ( -0.030824 );
m *= csZRotMatrix3 ( 0.0411102 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.109949 );
m *= csYRotMatrix3 ( -0.00849231 );
m *= csZRotMatrix3 ( 0.0322319 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.118845 );
m *= csYRotMatrix3 ( -0.0305989 );
m *= csZRotMatrix3 ( 0.0253342 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.120831 );
m *= csYRotMatrix3 ( -0.116352 );
m *= csZRotMatrix3 ( 0.0311431 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.121083 );
m *= csYRotMatrix3 ( -0.300639 );
m *= csZRotMatrix3 ( 0.0519151 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.113578 );
m *= csYRotMatrix3 ( -0.363277 );
m *= csZRotMatrix3 ( 0.0579184 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.107617 );
m *= csYRotMatrix3 ( -0.376563 );
m *= csZRotMatrix3 ( 0.0595936 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0681151 );
m *= csYRotMatrix3 ( -0.238184 );
m *= csZRotMatrix3 ( 0.0596958 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger01");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger01");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.977801 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.08068 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.0494 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.05 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.04008 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.03486 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.02269 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.986395 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.974206 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.967433 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.961703 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.959218 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.956983 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.954992 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.955526 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.960212 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.962692 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.977801 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger21");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger21");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.833469 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.856021 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.877298 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.86972 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.852323 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.843546 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.823266 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.771939 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.766522 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.768135 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.772017 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.774299 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.776534 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.778519 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.785916 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.797017 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.802689 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.833469 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Toe11");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Toe11");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089134900000000003, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.089135000000000006, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Foot");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Foot");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0632789 );
m *= csYRotMatrix3 ( -0.0709735 );
m *= csZRotMatrix3 ( 0.0900126 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.194633 );
m *= csYRotMatrix3 ( -0.153092 );
m *= csZRotMatrix3 ( -0.0732768 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.260176 );
m *= csYRotMatrix3 ( -0.31209 );
m *= csZRotMatrix3 ( -0.0822358 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.212362 );
m *= csYRotMatrix3 ( 0.0530589 );
m *= csZRotMatrix3 ( -0.00556475 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.200947 );
m *= csYRotMatrix3 ( -0.186443 );
m *= csZRotMatrix3 ( -0.0376885 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.205161 );
m *= csYRotMatrix3 ( -0.266455 );
m *= csZRotMatrix3 ( -0.0498785 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.227679 );
m *= csYRotMatrix3 ( -0.332554 );
m *= csZRotMatrix3 ( -0.0574613 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.241168 );
m *= csYRotMatrix3 ( -0.114221 );
m *= csZRotMatrix3 ( -0.0565605 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0932531 );
m *= csYRotMatrix3 ( -0.115397 );
m *= csZRotMatrix3 ( -0.0274137 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0355288 );
m *= csYRotMatrix3 ( -0.154188 );
m *= csZRotMatrix3 ( 0.00325971 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.116141 );
m *= csYRotMatrix3 ( -0.150356 );
m *= csZRotMatrix3 ( 0.024563 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.117863 );
m *= csYRotMatrix3 ( -0.153243 );
m *= csZRotMatrix3 ( 0.0263502 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0954584 );
m *= csYRotMatrix3 ( -0.154703 );
m *= csZRotMatrix3 ( 0.0231721 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0603938 );
m *= csYRotMatrix3 ( -0.127136 );
m *= csZRotMatrix3 ( 0.0181615 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00643645 );
m *= csYRotMatrix3 ( 0.185991 );
m *= csZRotMatrix3 ( 0.0218494 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0179641 );
m *= csYRotMatrix3 ( 0.15887 );
m *= csZRotMatrix3 ( 0.0544218 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0210814 );
m *= csYRotMatrix3 ( 0.119986 );
m *= csZRotMatrix3 ( 0.0672895 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0632789 );
m *= csYRotMatrix3 ( -0.0709735 );
m *= csZRotMatrix3 ( 0.0900126 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.35239999999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger0");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger0");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.67591 );
m *= csYRotMatrix3 ( -0.622803 );
m *= csZRotMatrix3 ( 0.255317 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.72446 );
m *= csYRotMatrix3 ( -0.61392 );
m *= csZRotMatrix3 ( 0.339049 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.67878 );
m *= csYRotMatrix3 ( -0.622374 );
m *= csZRotMatrix3 ( 0.260249 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.59859 );
m *= csYRotMatrix3 ( -0.629917 );
m *= csZRotMatrix3 ( 0.123554 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.52242 );
m *= csYRotMatrix3 ( -0.62884 );
m *= csZRotMatrix3 ( -0.00573432 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.51594 );
m *= csYRotMatrix3 ( -0.62838 );
m *= csZRotMatrix3 ( -0.0167531 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.51666 );
m *= csYRotMatrix3 ( -0.628433 );
m *= csZRotMatrix3 ( -0.0155345 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.55885 );
m *= csYRotMatrix3 ( -0.630349 );
m *= csZRotMatrix3 ( 0.0561228 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494499999999993, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57425 );
m *= csYRotMatrix3 ( -0.630439 );
m *= csZRotMatrix3 ( 0.0822475 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144100000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5844 );
m *= csYRotMatrix3 ( -0.63032 );
m *= csZRotMatrix3 ( 0.0994678 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.59124 );
m *= csYRotMatrix3 ( -0.630161 );
m *= csZRotMatrix3 ( 0.11107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.59084 );
m *= csYRotMatrix3 ( -0.630172 );
m *= csZRotMatrix3 ( 0.110404 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.58723 );
m *= csYRotMatrix3 ( -0.630262 );
m *= csZRotMatrix3 ( 0.104269 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.58313 );
m *= csYRotMatrix3 ( -0.630343 );
m *= csZRotMatrix3 ( 0.0973145 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.58444 );
m *= csYRotMatrix3 ( -0.630319 );
m *= csZRotMatrix3 ( 0.0995443 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144100000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.60191 );
m *= csYRotMatrix3 ( -0.629783 );
m *= csZRotMatrix3 ( 0.129179 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144100000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.61317 );
m *= csYRotMatrix3 ( -0.629215 );
m *= csZRotMatrix3 ( 0.148314 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494499999999993, 0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.67591 );
m *= csYRotMatrix3 ( -0.622803 );
m *= csZRotMatrix3 ( 0.255317 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, 0.11189499999999999, 0.023144000000000001) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0165991 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.062881000000000006, 0.82505700000000004, 0.043242599999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00850133 );
m *= csYRotMatrix3 ( -0.0897151 );
m *= csZRotMatrix3 ( 0.00129374 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.072472599999999998, 0.80336399999999997, 0.032467099999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0184567 );
m *= csYRotMatrix3 ( -0.124354 );
m *= csZRotMatrix3 ( 0.00241433 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.072656799999999994, 0.79606200000000005, 0.0275503) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0196804 );
m *= csYRotMatrix3 ( -0.1184 );
m *= csZRotMatrix3 ( 0.00236288 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.071441699999999997, 0.78777200000000003, 0.0226371) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0182674 );
m *= csYRotMatrix3 ( -0.0982314 );
m *= csZRotMatrix3 ( 0.00183711 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.069286, 0.78066199999999997, 0.017960899999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0175833 );
m *= csYRotMatrix3 ( -0.087818 );
m *= csZRotMatrix3 ( 0.001571 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.067998600000000006, 0.77952600000000005, 0.015784599999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0160675 );
m *= csYRotMatrix3 ( -0.0664615 );
m *= csZRotMatrix3 ( 0.00105033 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.065291600000000005, 0.78630800000000001, 0.011901399999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0075575 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.060238899999999998, 0.83672400000000002, 0.0061085100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00425938 );
m *= csYRotMatrix3 ( 0.0432403 );
m *= csZRotMatrix3 ( 0.000448647 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.060348899999999997, 0.82568299999999994, 0.0076542099999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0143574 );
m *= csYRotMatrix3 ( 0.0729854 );
m *= csZRotMatrix3 ( 0.00130834 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.060527900000000003, 0.80999399999999999, 0.01017) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0222752 );
m *= csYRotMatrix3 ( 0.0923956 );
m *= csZRotMatrix3 ( 0.00213455 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.060772899999999998, 0.79606600000000005, 0.0136142) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0243369 );
m *= csYRotMatrix3 ( 0.0952644 );
m *= csZRotMatrix3 ( 0.00231538 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.060915299999999999, 0.78989900000000002, 0.0156148) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0252508 );
m *= csYRotMatrix3 ( 0.093995 );
m *= csZRotMatrix3 ( 0.0023275 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.061068200000000003, 0.78302099999999997, 0.017763999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0256198 );
m *= csYRotMatrix3 ( 0.090411 );
m *= csZRotMatrix3 ( 0.00225533 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.061229699999999998, 0.77691100000000002, 0.020033800000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0250373 );
m *= csYRotMatrix3 ( 0.0776214 );
m *= csZRotMatrix3 ( 0.00191331 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0615705, 0.77292400000000006, 0.024824100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0232203 );
m *= csYRotMatrix3 ( 0.0595405 );
m *= csZRotMatrix3 ( 0.00141319 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.061921900000000002, 0.78113600000000005, 0.029762899999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0220454 );
m *= csYRotMatrix3 ( 0.0493421 );
m *= csZRotMatrix3 ( 0.00114201 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.062096600000000002, 0.78745299999999996, 0.032218400000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0165991 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.062881000000000006, 0.82505700000000004, 0.043242599999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger2");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger2");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00113007 );
m *= csYRotMatrix3 ( -0.844994 );
m *= csZRotMatrix3 ( 0.341649 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00118301 );
m *= csYRotMatrix3 ( -0.884042 );
m *= csZRotMatrix3 ( 0.341579 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00113525 );
m *= csYRotMatrix3 ( -0.849024 );
m *= csZRotMatrix3 ( 0.341642 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00101387 );
m *= csYRotMatrix3 ( -0.738035 );
m *= csZRotMatrix3 ( 0.341812 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.0475241, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000930691 );
m *= csYRotMatrix3 ( -0.633539 );
m *= csZRotMatrix3 ( 0.341943 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000924635 );
m *= csYRotMatrix3 ( -0.624614 );
m *= csZRotMatrix3 ( 0.341953 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000925325 );
m *= csYRotMatrix3 ( -0.625602 );
m *= csZRotMatrix3 ( 0.341952 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000967386 );
m *= csYRotMatrix3 ( -0.683556 );
m *= csZRotMatrix3 ( 0.341883 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000984586 );
m *= csYRotMatrix3 ( -0.704659 );
m *= csZRotMatrix3 ( 0.341856 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523900000000001, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000996412 );
m *= csYRotMatrix3 ( -0.71857 );
m *= csZRotMatrix3 ( 0.341838 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00100476 );
m *= csYRotMatrix3 ( -0.727945 );
m *= csZRotMatrix3 ( 0.341826 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.0475241, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00100428 );
m *= csYRotMatrix3 ( -0.727406 );
m *= csZRotMatrix3 ( 0.341826 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.0475241, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00099981 );
m *= csYRotMatrix3 ( -0.722449 );
m *= csZRotMatrix3 ( 0.341833 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.0475241, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000994905 );
m *= csYRotMatrix3 ( -0.716831 );
m *= csZRotMatrix3 ( 0.341841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000996489 );
m *= csYRotMatrix3 ( -0.718632 );
m *= csZRotMatrix3 ( 0.341838 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00101807 );
m *= csYRotMatrix3 ( -0.742583 );
m *= csZRotMatrix3 ( 0.341806 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00103291 );
m *= csYRotMatrix3 ( -0.75806 );
m *= csZRotMatrix3 ( 0.341784 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00113007 );
m *= csYRotMatrix3 ( -0.844994 );
m *= csZRotMatrix3 ( 0.341649 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, -0.047523999999999997, -0.016069699999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger3");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger3");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000991203 );
m *= csYRotMatrix3 ( -0.845176 );
m *= csZRotMatrix3 ( 0.598045 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727358) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00101792 );
m *= csYRotMatrix3 ( -0.868228 );
m *= csZRotMatrix3 ( 0.598009 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727357) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000995768 );
m *= csYRotMatrix3 ( -0.849206 );
m *= csZRotMatrix3 ( 0.598039 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000889283 );
m *= csYRotMatrix3 ( -0.738216 );
m *= csZRotMatrix3 ( 0.598188 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727357) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000816235 );
m *= csYRotMatrix3 ( -0.63372 );
m *= csZRotMatrix3 ( 0.598303 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072735600000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000810983 );
m *= csYRotMatrix3 ( -0.624796 );
m *= csZRotMatrix3 ( 0.598312 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072735500000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000811567 );
m *= csYRotMatrix3 ( -0.625783 );
m *= csZRotMatrix3 ( 0.598311 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072735999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00084844 );
m *= csYRotMatrix3 ( -0.683737 );
m *= csZRotMatrix3 ( 0.59825 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072735600000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000863566 );
m *= csYRotMatrix3 ( -0.70484 );
m *= csZRotMatrix3 ( 0.598227 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111431, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000873977 );
m *= csYRotMatrix3 ( -0.718752 );
m *= csZRotMatrix3 ( 0.598211 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727357) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000881293 );
m *= csYRotMatrix3 ( -0.728126 );
m *= csZRotMatrix3 ( 0.5982 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072735500000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000880802 );
m *= csYRotMatrix3 ( -0.727588 );
m *= csZRotMatrix3 ( 0.5982 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727357) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000876926 );
m *= csYRotMatrix3 ( -0.722631 );
m *= csZRotMatrix3 ( 0.598206 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727357) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000872695 );
m *= csYRotMatrix3 ( -0.717012 );
m *= csZRotMatrix3 ( 0.598213 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000873982 );
m *= csYRotMatrix3 ( -0.718814 );
m *= csZRotMatrix3 ( 0.598211 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072736199999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000892991 );
m *= csYRotMatrix3 ( -0.742764 );
m *= csZRotMatrix3 ( 0.598182 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.0072736099999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000905943 );
m *= csYRotMatrix3 ( -0.758241 );
m *= csZRotMatrix3 ( 0.598163 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727357) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000991203 );
m *= csYRotMatrix3 ( -0.845176 );
m *= csZRotMatrix3 ( 0.598045 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, -0.111432, 0.00727358) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger31");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger31");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.934376 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.957428 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.938406 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.827416 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.72292 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.713996 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.714983 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.772937 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.79404 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.807952 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.817326 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.816788 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.811831 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.806212 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.808013 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.831963 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.84744 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.934376 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L UpperArm");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L UpperArm");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.162272 );
m *= csYRotMatrix3 ( 0.288196 );
m *= csZRotMatrix3 ( 1.45784 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00425735 );
m *= csYRotMatrix3 ( 0.516276 );
m *= csZRotMatrix3 ( 1.31148 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00437256 );
m *= csYRotMatrix3 ( 0.50747 );
m *= csZRotMatrix3 ( 1.27461 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0280751 );
m *= csYRotMatrix3 ( 0.365328 );
m *= csZRotMatrix3 ( 1.31837 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.106266 );
m *= csYRotMatrix3 ( 0.181605 );
m *= csZRotMatrix3 ( 1.38742 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.183198 );
m *= csYRotMatrix3 ( 0.129406 );
m *= csZRotMatrix3 ( 1.41403 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.3422 );
m *= csYRotMatrix3 ( 0.0214591 );
m *= csZRotMatrix3 ( 1.43754 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.793342 );
m *= csYRotMatrix3 ( -0.175138 );
m *= csZRotMatrix3 ( 1.34626 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, -1.2592999999999999e-07, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.916322 );
m *= csYRotMatrix3 ( -0.129239 );
m *= csZRotMatrix3 ( 1.33861 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.957672 );
m *= csYRotMatrix3 ( -0.0721717 );
m *= csZRotMatrix3 ( 1.36858 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.950239 );
m *= csYRotMatrix3 ( -0.0316273 );
m *= csZRotMatrix3 ( 1.41503 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.924041 );
m *= csYRotMatrix3 ( -0.02443 );
m *= csZRotMatrix3 ( 1.43976 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.884581 );
m *= csYRotMatrix3 ( -0.0241532 );
m *= csZRotMatrix3 ( 1.46361 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.836113 );
m *= csYRotMatrix3 ( -0.0295316 );
m *= csZRotMatrix3 ( 1.48478 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.730561 );
m *= csYRotMatrix3 ( -0.00926347 );
m *= csZRotMatrix3 ( 1.52386 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.616518 );
m *= csYRotMatrix3 ( 0.0534637 );
m *= csZRotMatrix3 ( 1.5499 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.552138 );
m *= csYRotMatrix3 ( 0.0862995 );
m *= csZRotMatrix3 ( 1.55548 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.162272 );
m *= csYRotMatrix3 ( 0.288196 );
m *= csZRotMatrix3 ( 1.45784 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger11");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger11");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.90577 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.928823 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.909801 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.79881 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.694315 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.685391 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.686378 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.744332 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.765435 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.779346 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.788721 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.788183 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.783226 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.777607 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.779408 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.803358 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.818835 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.90577 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 Spine2");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 Spine2");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.149179 );
m *= csYRotMatrix3 ( -0.396815 );
m *= csZRotMatrix3 ( -0.0817249 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081299300000000005, 1.16052e-05, -5.9070200000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.376088 );
m *= csYRotMatrix3 ( -0.475914 );
m *= csZRotMatrix3 ( -0.0724293 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081301399999999996, 2.5706599999999999e-05, -5.3506700000000001e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.41172 );
m *= csYRotMatrix3 ( -0.490802 );
m *= csZRotMatrix3 ( -0.0661334 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081301700000000005, 2.76896e-05, -5.2313199999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.362694 );
m *= csYRotMatrix3 ( -0.478544 );
m *= csZRotMatrix3 ( -0.0535405 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081302100000000002, 2.44202e-05, -5.3723200000000001e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.25919 );
m *= csYRotMatrix3 ( -0.450741 );
m *= csZRotMatrix3 ( -0.0367139 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081302100000000002, 1.7578700000000002e-05, -5.6323699999999997e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.200487 );
m *= csYRotMatrix3 ( -0.435906 );
m *= csZRotMatrix3 ( -0.0264557 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081301799999999994, 1.35891e-05, -5.7543700000000003e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0951659 );
m *= csYRotMatrix3 ( -0.413348 );
m *= csZRotMatrix3 ( -0.00453413 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081301399999999996, 6.2692e-06, -5.9000499999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.156681 );
m *= csYRotMatrix3 ( -0.39404 );
m *= csZRotMatrix3 ( 0.0622113 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081299399999999994, -1.1606999999999999e-05, -5.9002200000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.298122 );
m *= csYRotMatrix3 ( -0.424942 );
m *= csZRotMatrix3 ( 0.0479962 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081299999999999997, -2.0210199999999998e-05, -5.6353600000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.383049 );
m *= csYRotMatrix3 ( -0.449746 );
m *= csZRotMatrix3 ( 0.0248876 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081300999999999998, -2.4828600000000001e-05, -5.4071699999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.416613 );
m *= csYRotMatrix3 ( -0.466291 );
m *= csZRotMatrix3 ( 0.00394607 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081301999999999999, -2.62944e-05, -5.2895800000000003e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.403278 );
m *= csYRotMatrix3 ( -0.47105 );
m *= csZRotMatrix3 ( -0.00310253 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081302600000000003, -2.5313800000000001e-05, -5.3047599999999997e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.371739 );
m *= csYRotMatrix3 ( -0.475267 );
m *= csZRotMatrix3 ( -0.00906101 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081303299999999995, -2.3257100000000001e-05, -5.3635099999999997e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.326852 );
m *= csYRotMatrix3 ( -0.478615 );
m *= csZRotMatrix3 ( -0.0140897 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081304000000000001, -2.0378899999999999e-05, -5.4397300000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.216725 );
m *= csYRotMatrix3 ( -0.481156 );
m *= csZRotMatrix3 ( -0.0225989 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081304899999999999, -1.32539e-05, -5.6095699999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.112711 );
m *= csYRotMatrix3 ( -0.475501 );
m *= csZRotMatrix3 ( -0.0320441 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081305199999999994, -6.3332699999999996e-06, -5.7148599999999997e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0688577 );
m *= csYRotMatrix3 ( -0.467592 );
m *= csZRotMatrix3 ( -0.0381053 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081304799999999997, -3.3429199999999999e-06, -5.7627000000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.149179 );
m *= csYRotMatrix3 ( -0.396815 );
m *= csZRotMatrix3 ( -0.0817249 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081299300000000005, 1.16052e-05, -5.9070200000000002e-05) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 Spine1");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 Spine1");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00949082 );
m *= csYRotMatrix3 ( 0.20252 );
m *= csZRotMatrix3 ( -0.0469697 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262399999999999, 0.0, -6.3386000000000006e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.115772 );
m *= csYRotMatrix3 ( 0.202005 );
m *= csZRotMatrix3 ( -0.0129179 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262399999999999, 7.3036599999999998e-06, -6.2977699999999998e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.139543 );
m *= csYRotMatrix3 ( 0.202746 );
m *= csZRotMatrix3 ( 0.000113651 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262600000000004, 9.0055000000000004e-06, -6.2769399999999996e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.137673 );
m *= csYRotMatrix3 ( 0.202875 );
m *= csZRotMatrix3 ( 0.0020258 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, 8.9051000000000005e-06, -6.2779000000000003e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.118649 );
m *= csYRotMatrix3 ( 0.202677 );
m *= csZRotMatrix3 ( -0.00105495 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, 7.6471399999999994e-06, -6.2942300000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.105913 );
m *= csYRotMatrix3 ( 0.202618 );
m *= csZRotMatrix3 ( -0.00231132 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262600000000004, 6.8116500000000002e-06, -6.3031200000000001e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.08041 );
m *= csYRotMatrix3 ( 0.202741 );
m *= csZRotMatrix3 ( 6.58761e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, 5.1980299999999996e-06, -6.3171900000000004e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00970447 );
m *= csYRotMatrix3 ( 0.20251 );
m *= csZRotMatrix3 ( 0.0480284 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, 0.0, -6.3387999999999997e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0736717 );
m *= csYRotMatrix3 ( 0.201598 );
m *= csZRotMatrix3 ( 0.031585 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262399999999999, -4.35194e-06, -6.3231999999999994e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.115558 );
m *= csYRotMatrix3 ( 0.202006 );
m *= csZRotMatrix3 ( 0.0129197 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, -7.29463e-06, -6.2966500000000001e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.139543 );
m *= csYRotMatrix3 ( 0.202746 );
m *= csZRotMatrix3 ( -0.000112516 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, -9.0030199999999997e-06, -6.2778899999999996e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.14138 );
m *= csYRotMatrix3 ( 0.20289 );
m *= csZRotMatrix3 ( -0.00218915 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262600000000004, -9.1482399999999993e-06, -6.2751900000000005e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.13765 );
m *= csYRotMatrix3 ( 0.202883 );
m *= csZRotMatrix3 ( -0.0021348 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262600000000004, -8.9061999999999995e-06, -6.2783399999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.129636 );
m *= csYRotMatrix3 ( 0.20279 );
m *= csZRotMatrix3 ( -0.000810959 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, -8.3774099999999995e-06, -6.2853899999999998e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.10589 );
m *= csYRotMatrix3 ( 0.202624 );
m *= csZRotMatrix3 ( 0.00219869 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262600000000004, -6.8113499999999996e-06, -6.3032000000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0804102 );
m *= csYRotMatrix3 ( 0.202741 );
m *= csZRotMatrix3 ( -6.47351e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, -5.2010099999999997e-06, -6.3185199999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0678716 );
m *= csYRotMatrix3 ( 0.202903 );
m *= csZRotMatrix3 ( -0.004955 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262500000000001, -4.4555300000000004e-06, -6.3235600000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00949082 );
m *= csYRotMatrix3 ( 0.20252 );
m *= csZRotMatrix3 ( -0.0469697 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081262399999999999, 0.0, -6.3386000000000006e-05) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 Neck");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 Neck");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 6.65555e-07 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -2.02763e-06 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353400000000006, 0.0, -0.000106938) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.151953 );
m *= csYRotMatrix3 ( -0.624034 );
m *= csZRotMatrix3 ( -0.136593 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353800000000004, -9.4317499999999999e-06, -0.000106111) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.177914 );
m *= csYRotMatrix3 ( -0.621446 );
m *= csZRotMatrix3 ( -0.15988 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081354099999999999, -1.1049100000000001e-05, -0.000105843) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.168931 );
m *= csYRotMatrix3 ( -0.622402 );
m *= csZRotMatrix3 ( -0.151782 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353999999999996, -1.04956e-05, -0.00010593499999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.145458 );
m *= csYRotMatrix3 ( -0.624612 );
m *= csZRotMatrix3 ( -0.130658 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353800000000004, -9.03758e-06, -0.000106143) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.129881 );
m *= csYRotMatrix3 ( -0.625852 );
m *= csZRotMatrix3 ( -0.11664 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353599999999998, -8.07217e-06, -0.000106278) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0942789 );
m *= csYRotMatrix3 ( -0.628012 );
m *= csZRotMatrix3 ( -0.0845925 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353599999999998, -5.87354e-06, -0.000106548) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000375037 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( 0.000609331 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353200000000001, 0.0, -0.00010692999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00898489 );
m *= csYRotMatrix3 ( -0.629032 );
m *= csZRotMatrix3 ( 0.00825259 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353300000000003, 5.44188e-07, -0.00010694800000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00373672 );
m *= csYRotMatrix3 ( -0.629164 );
m *= csZRotMatrix3 ( 0.00342637 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353200000000001, 2.18212e-07, -0.000106919) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 6.5591e-07 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -2.0194e-06 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353300000000003, 0.0, -0.000106947) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.6625e-05 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -2.80399e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353200000000001, 0.0, -0.000106919) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.75572e-05 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -4.57941e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353300000000003, 0.0, -0.00010694199999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 3.39846e-05 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -5.62663e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353300000000003, 0.0, -0.000106932) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 3.622e-05 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -5.98946e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353300000000003, 0.0, -0.000106928) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.86565e-05 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -4.75904e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353200000000001, 0.0, -0.00010692300000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.28826e-05 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -3.81912e-05 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353300000000003, 0.0, -0.000106945) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 6.65555e-07 );
m *= csYRotMatrix3 ( -0.629246 );
m *= csZRotMatrix3 ( -2.02763e-06 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081353400000000006, 0.0, -0.000106938) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Thigh");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Thigh");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0122556 );
m *= csYRotMatrix3 ( -0.507089 );
m *= csZRotMatrix3 ( 3.04733 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.069014300000000001, -0.073950000000000002, -0.0070454100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.193754 );
m *= csYRotMatrix3 ( -0.484079 );
m *= csZRotMatrix3 ( 3.05989 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.076849399999999998, -0.070926199999999995, -0.0107458) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.214682 );
m *= csYRotMatrix3 ( -0.487808 );
m *= csZRotMatrix3 ( 3.06487 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.079109700000000005, -0.069943000000000005, -0.0114165) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.203385 );
m *= csYRotMatrix3 ( -0.521463 );
m *= csZRotMatrix3 ( 3.07999 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.080029600000000006, -0.069908899999999996, -0.0108629) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.187084 );
m *= csYRotMatrix3 ( -0.525193 );
m *= csZRotMatrix3 ( 3.09648 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.080109100000000003, -0.070448200000000002, -0.0095312999999999995) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.163155 );
m *= csYRotMatrix3 ( -0.499403 );
m *= csZRotMatrix3 ( 3.11229 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0802147, -0.070665699999999998, -0.0088253600000000008) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0850144 );
m *= csYRotMatrix3 ( -0.403414 );
m *= csZRotMatrix3 ( -3.11562 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.081324499999999994, -0.070476899999999995, -0.0078563599999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0603975 );
m *= csYRotMatrix3 ( 0.171734 );
m *= csZRotMatrix3 ( -3.00164 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.091947899999999999, -0.063914100000000001, -0.0084317000000000003) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.038318 );
m *= csYRotMatrix3 ( 0.330851 );
m *= csZRotMatrix3 ( -3.08202 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.089285299999999998, -0.066517900000000005, -0.0055469100000000004) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00606388 );
m *= csYRotMatrix3 ( 0.433299 );
m *= csZRotMatrix3 ( 3.12058 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.085819300000000001, -0.069179099999999993, -0.0031329000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00647125 );
m *= csYRotMatrix3 ( 0.504076 );
m *= csZRotMatrix3 ( 3.05224 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.082723099999999994, -0.070888000000000007, -0.00187615) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00216028 );
m *= csYRotMatrix3 ( 0.527672 );
m *= csZRotMatrix3 ( 3.03559 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.081717999999999999, -0.071148900000000001, -0.0020702699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0182584 );
m *= csYRotMatrix3 ( 0.541925 );
m *= csZRotMatrix3 ( 3.03261 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.080981600000000001, -0.071141700000000002, -0.0027414900000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0342185 );
m *= csYRotMatrix3 ( 0.540664 );
m *= csZRotMatrix3 ( 3.04201 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.080363400000000001, -0.070960099999999998, -0.0037190299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0411141 );
m *= csYRotMatrix3 ( 0.442008 );
m *= csZRotMatrix3 ( 3.08372 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.079165299999999994, -0.070445900000000006, -0.0059438599999999996) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0271866 );
m *= csYRotMatrix3 ( 0.106826 );
m *= csZRotMatrix3 ( 3.10462 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.077499100000000001, -0.070407899999999995, -0.0074837799999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0230373 );
m *= csYRotMatrix3 ( -0.0606381 );
m *= csZRotMatrix3 ( 3.10324 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.076337199999999994, -0.070772000000000002, -0.0077363700000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0122556 );
m *= csYRotMatrix3 ( -0.507089 );
m *= csZRotMatrix3 ( 3.04733 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.069014300000000001, -0.073950000000000002, -0.0070454100000000002) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R ForeTwist");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R ForeTwist");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262731 );
m *= csYRotMatrix3 ( 0.675032 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0164917 );
m *= csYRotMatrix3 ( 0.567996 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262758 );
m *= csYRotMatrix3 ( 0.533322 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0565739 );
m *= csYRotMatrix3 ( 0.498781 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.103925 );
m *= csYRotMatrix3 ( 0.466564 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.100969 );
m *= csYRotMatrix3 ( 0.44835 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0811564 );
m *= csYRotMatrix3 ( 0.405981 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262731 );
m *= csYRotMatrix3 ( 0.317164 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00607405 );
m *= csYRotMatrix3 ( 0.329035 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00237652 );
m *= csYRotMatrix3 ( 0.37026 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262754 );
m *= csYRotMatrix3 ( 0.458874 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00026276 );
m *= csYRotMatrix3 ( 0.55309 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262735 );
m *= csYRotMatrix3 ( 0.693289 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262752 );
m *= csYRotMatrix3 ( 0.843151 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262783 );
m *= csYRotMatrix3 ( 1.02658 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262801 );
m *= csYRotMatrix3 ( 1.00683 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262808 );
m *= csYRotMatrix3 ( 0.96573 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262731 );
m *= csYRotMatrix3 ( 0.675032 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Calf");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Calf");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.16759 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.309802 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.370414 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.551394 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.822717 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.863142 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.862351 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.19014 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0834446 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0677795 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.101743 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.148356 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.223428 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.32023 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.552354 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.935779 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.07946 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.16759 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Thigh");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Thigh");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0565529 );
m *= csYRotMatrix3 ( 0.195254 );
m *= csZRotMatrix3 ( 3.01072 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.092083100000000001, 0.065101300000000001, -0.00854041) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0790298 );
m *= csYRotMatrix3 ( 0.383027 );
m *= csZRotMatrix3 ( 3.13172 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0844834, 0.069704000000000002, -0.0048678699999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0514907 );
m *= csYRotMatrix3 ( 0.418597 );
m *= csZRotMatrix3 ( -3.08415 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.082230399999999995, 0.070794599999999999, -0.0041462399999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0423676 );
m *= csYRotMatrix3 ( 0.361082 );
m *= csZRotMatrix3 ( -3.05736 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.081309599999999996, 0.070910299999999996, -0.0047003599999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.104028 );
m *= csYRotMatrix3 ( 0.208157 );
m *= csZRotMatrix3 ( -3.10616 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.081230999999999998, 0.070464200000000005, -0.0060541400000000004) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0924383 );
m *= csYRotMatrix3 ( 0.139803 );
m *= csZRotMatrix3 ( -3.11549 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.081124600000000005, 0.070276099999999994, -0.0067632100000000004) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0350605 );
m *= csYRotMatrix3 ( -0.0139205 );
m *= csZRotMatrix3 ( -3.11312 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.080015600000000006, 0.070476800000000006, -0.0077292699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000243281 );
m *= csYRotMatrix3 ( -0.459441 );
m *= csZRotMatrix3 ( -2.99802 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0689998, 0.075159299999999998, -0.0071542999999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.147677 );
m *= csYRotMatrix3 ( -0.467262 );
m *= csZRotMatrix3 ( -2.9987 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.071899199999999996, 0.073289000000000007, -0.010176299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.219233 );
m *= csYRotMatrix3 ( -0.405054 );
m *= csZRotMatrix3 ( -3.05224 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.075502799999999995, 0.071088899999999997, -0.012521600000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.240671 );
m *= csYRotMatrix3 ( -0.4273 );
m *= csZRotMatrix3 ( -3.07769 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.078617099999999995, 0.069519200000000003, -0.013650300000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.243116 );
m *= csYRotMatrix3 ( -0.49292 );
m *= csZRotMatrix3 ( -3.07297 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.079619099999999998, 0.069335900000000006, -0.013440499999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.236696 );
m *= csYRotMatrix3 ( -0.548199 );
m *= csZRotMatrix3 ( -3.07072 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.080355700000000002, 0.069458599999999995, -0.0127835) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.220834 );
m *= csYRotMatrix3 ( -0.553284 );
m *= csZRotMatrix3 ( -3.0812 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.080975699999999998, 0.069764699999999999, -0.0118323) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.173238 );
m *= csYRotMatrix3 ( -0.500542 );
m *= csZRotMatrix3 ( -3.11791 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.082174800000000006, 0.070433300000000004, -0.0096416499999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.122288 );
m *= csYRotMatrix3 ( -0.391327 );
m *= csZRotMatrix3 ( 3.12385 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.083841100000000002, 0.070407800000000006, -0.0081018900000000005) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.105243 );
m *= csYRotMatrix3 ( -0.323126 );
m *= csZRotMatrix3 ( 3.10438 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.085000400000000004, 0.069921300000000006, -0.0078512300000000007) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0565512 );
m *= csYRotMatrix3 ( 0.195249 );
m *= csZRotMatrix3 ( 3.01072 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.092083100000000001, 0.065101300000000001, -0.00854041) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Toe0");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Toe0");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.73092 );
m *= csYRotMatrix3 ( -0.986696 );
m *= csZRotMatrix3 ( 1.75053 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.05985 );
m *= csYRotMatrix3 ( -1.23994 );
m *= csZRotMatrix3 ( 2.27295 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.32366 );
m *= csYRotMatrix3 ( -1.21167 );
m *= csZRotMatrix3 ( 2.56045 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.75828 );
m *= csYRotMatrix3 ( -1.14231 );
m *= csZRotMatrix3 ( 1.9866 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.81135 );
m *= csYRotMatrix3 ( -0.964646 );
m *= csZRotMatrix3 ( 1.8575 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.83342 );
m *= csYRotMatrix3 ( -0.961296 );
m *= csZRotMatrix3 ( 1.88528 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.89784 );
m *= csYRotMatrix3 ( -0.949192 );
m *= csZRotMatrix3 ( 1.96689 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.36876 );
m *= csYRotMatrix3 ( -0.981073 );
m *= csZRotMatrix3 ( 1.32916 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.33943 );
m *= csYRotMatrix3 ( -0.941571 );
m *= csZRotMatrix3 ( 1.26928 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.32616 );
m *= csYRotMatrix3 ( -0.920345 );
m *= csZRotMatrix3 ( 1.23972 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.31802 );
m *= csYRotMatrix3 ( -0.905972 );
m *= csZRotMatrix3 ( 1.2206 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.37925 );
m *= csYRotMatrix3 ( -0.93383 );
m *= csZRotMatrix3 ( 1.30451 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.44658 );
m *= csYRotMatrix3 ( -0.958366 );
m *= csZRotMatrix3 ( 1.39432 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.48385 );
m *= csYRotMatrix3 ( -0.96964 );
m *= csZRotMatrix3 ( 1.44318 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.6045 );
m *= csYRotMatrix3 ( -0.996829 );
m *= csZRotMatrix3 ( 1.59841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.62328 );
m *= csYRotMatrix3 ( -0.996006 );
m *= csZRotMatrix3 ( 1.62094 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.644 );
m *= csYRotMatrix3 ( -0.994827 );
m *= csZRotMatrix3 ( 1.64583 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.73092 );
m *= csYRotMatrix3 ( -0.986696 );
m *= csZRotMatrix3 ( 1.75053 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, -0.12239700000000001, 0.16284999999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Toe1");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Toe1");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.508223 );
m *= csYRotMatrix3 ( -1.38506 );
m *= csZRotMatrix3 ( 0.521073 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762212 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.416271 );
m *= csYRotMatrix3 ( -1.33564 );
m *= csZRotMatrix3 ( 0.449524 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762212 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762212 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( 0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, -0.018724500000000002, 0.18709899999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Toe2");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Toe2");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.22577 );
m *= csYRotMatrix3 ( -1.16068 );
m *= csZRotMatrix3 ( -1.20496 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.061044099999999997, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.10184 );
m *= csYRotMatrix3 ( -1.14412 );
m *= csZRotMatrix3 ( -1.07329 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.061044099999999997, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.061044099999999997, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.35724 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( -1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, 0.0610442, 0.12055299999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger1");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger1");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00118931 );
m *= csYRotMatrix3 ( -0.844624 );
m *= csZRotMatrix3 ( -0.129748 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00126384 );
m *= csYRotMatrix3 ( -0.895846 );
m *= csZRotMatrix3 ( -0.129845 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00119477 );
m *= csYRotMatrix3 ( -0.848655 );
m *= csZRotMatrix3 ( -0.129755 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00106711 );
m *= csYRotMatrix3 ( -0.737665 );
m *= csZRotMatrix3 ( -0.129576 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000979601 );
m *= csYRotMatrix3 ( -0.633169 );
m *= csZRotMatrix3 ( -0.129438 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000973254 );
m *= csYRotMatrix3 ( -0.624245 );
m *= csZRotMatrix3 ( -0.129427 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000973987 );
m *= csYRotMatrix3 ( -0.625232 );
m *= csZRotMatrix3 ( -0.129428 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00101822 );
m *= csYRotMatrix3 ( -0.683186 );
m *= csZRotMatrix3 ( -0.129501 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00103628 );
m *= csYRotMatrix3 ( -0.704289 );
m *= csZRotMatrix3 ( -0.129529 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612399999999999, -0.019366999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00104875 );
m *= csYRotMatrix3 ( -0.7182 );
m *= csZRotMatrix3 ( -0.129548 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00105749 );
m *= csYRotMatrix3 ( -0.727575 );
m *= csZRotMatrix3 ( -0.129562 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00105696 );
m *= csYRotMatrix3 ( -0.727037 );
m *= csZRotMatrix3 ( -0.129561 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00105232 );
m *= csYRotMatrix3 ( -0.72208 );
m *= csZRotMatrix3 ( -0.129554 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00104718 );
m *= csYRotMatrix3 ( -0.716461 );
m *= csZRotMatrix3 ( -0.129546 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00104884 );
m *= csYRotMatrix3 ( -0.718262 );
m *= csZRotMatrix3 ( -0.129548 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00107153 );
m *= csYRotMatrix3 ( -0.742213 );
m *= csZRotMatrix3 ( -0.129583 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019366999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00108711 );
m *= csYRotMatrix3 ( -0.75769 );
m *= csZRotMatrix3 ( -0.129605 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00118931 );
m *= csYRotMatrix3 ( -0.844624 );
m *= csZRotMatrix3 ( -0.129748 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, 0.047612300000000003, -0.019367100000000002) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Clavicle");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Clavicle");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.52277 );
m *= csYRotMatrix3 ( 0.392876 );
m *= csZRotMatrix3 ( -1.66354 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0164114, 0.000132213) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.53934 );
m *= csYRotMatrix3 ( 0.269493 );
m *= csZRotMatrix3 ( -1.41194 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0018135899999999999, 0.0162688, 0.0013025000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.53745 );
m *= csYRotMatrix3 ( 0.241341 );
m *= csZRotMatrix3 ( -1.35438 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0021242000000000001, 0.0162156, 0.00150249) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.537 );
m *= csYRotMatrix3 ( 0.240388 );
m *= csZRotMatrix3 ( -1.36573 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.00201615, 0.016234999999999999, 0.0014336399999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.53737 );
m *= csYRotMatrix3 ( 0.257394 );
m *= csZRotMatrix3 ( -1.41382 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0017345800000000001, 0.016280900000000001, 0.0012534200000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.53766 );
m *= csYRotMatrix3 ( 0.269467 );
m *= csZRotMatrix3 ( -1.44028 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0015479300000000001, 0.016307499999999999, 0.00113389) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.53556 );
m *= csYRotMatrix3 ( 0.294854 );
m *= csZRotMatrix3 ( -1.5035 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.00112207, 0.016356800000000001, 0.00086053400000000004) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.52276 );
m *= csYRotMatrix3 ( 0.392892 );
m *= csZRotMatrix3 ( -1.66403 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-7.99831e-06, 0.0164114, 0.00013184399999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.53609 );
m *= csYRotMatrix3 ( 0.465228 );
m *= csZRotMatrix3 ( -1.6599 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.000109448, 0.016410899999999999, 6.4398000000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.55576 );
m *= csYRotMatrix3 ( 0.519521 );
m *= csZRotMatrix3 ( -1.63177 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-4.5398500000000002e-05, 0.0164113, 0.00010389499999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.58045 );
m *= csYRotMatrix3 ( 0.57222 );
m *= csZRotMatrix3 ( -1.59899 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0164114, 0.000132173) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.59291 );
m *= csYRotMatrix3 ( 0.595753 );
m *= csZRotMatrix3 ( -1.58447 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (4.7442300000000001e-07, 0.0164114, 0.000132146) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.60404 );
m *= csYRotMatrix3 ( 0.615448 );
m *= csZRotMatrix3 ( -1.572 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (5.3846300000000005e-07, 0.0164114, 0.00013227000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.61262 );
m *= csYRotMatrix3 ( 0.630334 );
m *= csZRotMatrix3 ( -1.56307 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (8.0153799999999996e-07, 0.0164114, 0.000132206) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.6061 );
m *= csYRotMatrix3 ( 0.618533 );
m *= csZRotMatrix3 ( -1.56943 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (8.56992e-07, 0.0164114, 0.00013217099999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.58244 );
m *= csYRotMatrix3 ( 0.571048 );
m *= csZRotMatrix3 ( -1.59319 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (6.8254600000000003e-07, 0.0164114, 0.000132161) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.5714 );
m *= csYRotMatrix3 ( 0.545821 );
m *= csZRotMatrix3 ( -1.60476 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (5.0069699999999995e-07, 0.0164114, 0.00013219300000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 2.52277 );
m *= csYRotMatrix3 ( 0.392876 );
m *= csZRotMatrix3 ( -1.66354 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0164114, 0.000132213) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Hand");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Hand");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57355 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57159 );
m *= csYRotMatrix3 ( 0.0013582 );
m *= csZRotMatrix3 ( 0.14179 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.58073 );
m *= csYRotMatrix3 ( 0.00915687 );
m *= csZRotMatrix3 ( 0.139693 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.49255 );
m *= csYRotMatrix3 ( -0.0641682 );
m *= csZRotMatrix3 ( 0.158059 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.42178 );
m *= csYRotMatrix3 ( -0.123952 );
m *= csZRotMatrix3 ( 0.168399 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.34993 );
m *= csYRotMatrix3 ( -0.187115 );
m *= csZRotMatrix3 ( 0.173756 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.31732 );
m *= csYRotMatrix3 ( -0.217039 );
m *= csZRotMatrix3 ( 0.174076 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.28894 );
m *= csYRotMatrix3 ( -0.244279 );
m *= csZRotMatrix3 ( 0.172895 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.26639 );
m *= csYRotMatrix3 ( -0.26767 );
m *= csZRotMatrix3 ( 0.170439 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.2619 );
m *= csYRotMatrix3 ( -0.304312 );
m *= csZRotMatrix3 ( 0.153759 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.30792 );
m *= csYRotMatrix3 ( -0.293553 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.3433 );
m *= csYRotMatrix3 ( -0.260221 );
m *= csZRotMatrix3 ( 0.144419 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.142147 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.27485599999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Toe21");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Toe21");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger11");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger11");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.717125 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.790157 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.788721 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.789319 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.779408 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.77418 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.762012 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.725718 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.71353 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.706756 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.701026 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.698542 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.696306 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.694315 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.69485 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.699536 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.702015 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655199999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.717125 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.083655099999999996, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L ForeTwist");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L ForeTwist");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262749 );
m *= csYRotMatrix3 ( 0.317163 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000909774 );
m *= csYRotMatrix3 ( 0.350466 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262786 );
m *= csYRotMatrix3 ( 0.458874 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00026271 );
m *= csYRotMatrix3 ( 0.766658 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262776 );
m *= csYRotMatrix3 ( 1.02658 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00032542 );
m *= csYRotMatrix3 ( 1.03066 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00370491 );
m *= csYRotMatrix3 ( 0.977843 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262769 );
m *= csYRotMatrix3 ( 0.675032 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0291604 );
m *= csYRotMatrix3 ( 0.589416 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0561413 );
m *= csYRotMatrix3 ( 0.539664 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0841053 );
m *= csYRotMatrix3 ( 0.4972 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0969868 );
m *= csYRotMatrix3 ( 0.479083 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.108306 );
m *= csYRotMatrix3 ( 0.463247 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.117412 );
m *= csYRotMatrix3 ( 0.449843 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.120651 );
m *= csYRotMatrix3 ( 0.478056 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.103573 );
m *= csYRotMatrix3 ( 0.505135 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0895777 );
m *= csYRotMatrix3 ( 0.486349 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262749 );
m *= csYRotMatrix3 ( 0.317163 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R UpperArm");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R UpperArm");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.548773 );
m *= csYRotMatrix3 ( -0.124698 );
m *= csZRotMatrix3 ( -1.50729 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.913679 );
m *= csYRotMatrix3 ( -0.00405816 );
m *= csZRotMatrix3 ( -1.60491 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.99584 );
m *= csYRotMatrix3 ( 0.0277841 );
m *= csZRotMatrix3 ( -1.61668 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.940562 );
m *= csYRotMatrix3 ( -0.0265806 );
m *= csZRotMatrix3 ( -1.5515 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.834822 );
m *= csYRotMatrix3 ( -0.0835465 );
m *= csZRotMatrix3 ( -1.49128 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.790829 );
m *= csYRotMatrix3 ( -0.0730419 );
m *= csZRotMatrix3 ( -1.48794 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.720639 );
m *= csYRotMatrix3 ( -0.0112965 );
m *= csZRotMatrix3 ( -1.48357 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.501616 );
m *= csYRotMatrix3 ( 0.298174 );
m *= csZRotMatrix3 ( -1.43457 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, -1.81335e-07, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.290439 );
m *= csYRotMatrix3 ( 0.441932 );
m *= csZRotMatrix3 ( -1.41309 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.126906 );
m *= csYRotMatrix3 ( 0.506482 );
m *= csZRotMatrix3 ( -1.38707 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.030359 );
m *= csYRotMatrix3 ( 0.521056 );
m *= csZRotMatrix3 ( -1.36792 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0306763 );
m *= csYRotMatrix3 ( 0.493936 );
m *= csZRotMatrix3 ( -1.37008 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0594391 );
m *= csYRotMatrix3 ( 0.436284 );
m *= csZRotMatrix3 ( -1.38001 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.104596 );
m *= csYRotMatrix3 ( 0.364538 );
m *= csZRotMatrix3 ( -1.39251 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.204623 );
m *= csYRotMatrix3 ( 0.243625 );
m *= csZRotMatrix3 ( -1.42371 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.288654 );
m *= csYRotMatrix3 ( 0.167089 );
m *= csZRotMatrix3 ( -1.47003 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.327608 );
m *= csYRotMatrix3 ( 0.124316 );
m *= csZRotMatrix3 ( -1.49039 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.548773 );
m *= csYRotMatrix3 ( -0.124698 );
m *= csZRotMatrix3 ( -1.50729 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.20478299999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Toe21");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Toe21");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080360600000000004, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger31");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger31");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.74573 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.801007 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.817326 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.817924 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162400000000005, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.808013 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.802785 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.790618 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.754323 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.742135 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.735361 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.729631 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.727147 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.724911 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.72292 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.723455 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.728141 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162599999999997, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.73062 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.74573 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.076162499999999994, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Toe01");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Toe01");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger2");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger2");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000946794 );
m *= csYRotMatrix3 ( -0.656348 );
m *= csZRotMatrix3 ( -0.341916 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00100454 );
m *= csYRotMatrix3 ( -0.727791 );
m *= csZRotMatrix3 ( -0.341826 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00100472 );
m *= csYRotMatrix3 ( -0.727945 );
m *= csZRotMatrix3 ( -0.341826 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00100525 );
m *= csYRotMatrix3 ( -0.728543 );
m *= csZRotMatrix3 ( -0.341825 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000996505 );
m *= csYRotMatrix3 ( -0.718632 );
m *= csZRotMatrix3 ( -0.341838 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000991999 );
m *= csYRotMatrix3 ( -0.713404 );
m *= csZRotMatrix3 ( -0.341845 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000981669 );
m *= csYRotMatrix3 ( -0.701236 );
m *= csZRotMatrix3 ( -0.341861 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000953099 );
m *= csYRotMatrix3 ( -0.664942 );
m *= csZRotMatrix3 ( -0.341906 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00094415 );
m *= csYRotMatrix3 ( -0.652754 );
m *= csZRotMatrix3 ( -0.341921 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000939304 );
m *= csYRotMatrix3 ( -0.64598 );
m *= csZRotMatrix3 ( -0.341929 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000935346 );
m *= csYRotMatrix3 ( -0.64025 );
m *= csZRotMatrix3 ( -0.341935 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000933575 );
m *= csYRotMatrix3 ( -0.637766 );
m *= csZRotMatrix3 ( -0.341938 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000932022 );
m *= csYRotMatrix3 ( -0.63553 );
m *= csZRotMatrix3 ( -0.341941 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000930682 );
m *= csYRotMatrix3 ( -0.633539 );
m *= csZRotMatrix3 ( -0.341943 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.0160696) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000931047 );
m *= csYRotMatrix3 ( -0.634073 );
m *= csZRotMatrix3 ( -0.341943 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000934272 );
m *= csYRotMatrix3 ( -0.638759 );
m *= csZRotMatrix3 ( -0.341937 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000936002 );
m *= csYRotMatrix3 ( -0.641239 );
m *= csZRotMatrix3 ( -0.341934 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000946794 );
m *= csYRotMatrix3 ( -0.656348 );
m *= csZRotMatrix3 ( -0.341916 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.22269600000000001, 0.047523999999999997, -0.016069699999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger3");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger3");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00083041 );
m *= csYRotMatrix3 ( -0.65653 );
m *= csZRotMatrix3 ( -0.598279 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000868643 );
m *= csYRotMatrix3 ( -0.711807 );
m *= csZRotMatrix3 ( -0.598219 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000881206 );
m *= csYRotMatrix3 ( -0.728126 );
m *= csZRotMatrix3 ( -0.5982 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000881724 );
m *= csYRotMatrix3 ( -0.728724 );
m *= csZRotMatrix3 ( -0.598199 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072736099999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000874068 );
m *= csYRotMatrix3 ( -0.718813 );
m *= csZRotMatrix3 ( -0.59821 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735600000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000870052 );
m *= csYRotMatrix3 ( -0.713585 );
m *= csZRotMatrix3 ( -0.598217 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000861035 );
m *= csYRotMatrix3 ( -0.701417 );
m *= csZRotMatrix3 ( -0.59823 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072736099999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000835972 );
m *= csYRotMatrix3 ( -0.665123 );
m *= csZRotMatrix3 ( -0.59827 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000828105 );
m *= csYRotMatrix3 ( -0.652935 );
m *= csZRotMatrix3 ( -0.598283 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735400000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00082381 );
m *= csYRotMatrix3 ( -0.646161 );
m *= csZRotMatrix3 ( -0.59829 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072736199999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000820349 );
m *= csYRotMatrix3 ( -0.640431 );
m *= csZRotMatrix3 ( -0.598296 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072736099999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000818823 );
m *= csYRotMatrix3 ( -0.637947 );
m *= csZRotMatrix3 ( -0.598298 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111431, 0.0072736099999999998) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000817472 );
m *= csYRotMatrix3 ( -0.635711 );
m *= csZRotMatrix3 ( -0.598301 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072736199999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000816254 );
m *= csYRotMatrix3 ( -0.63372 );
m *= csZRotMatrix3 ( -0.598303 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072736199999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000816581 );
m *= csYRotMatrix3 ( -0.634255 );
m *= csZRotMatrix3 ( -0.598302 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000819423 );
m *= csYRotMatrix3 ( -0.638941 );
m *= csZRotMatrix3 ( -0.598297 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000820947 );
m *= csYRotMatrix3 ( -0.64142 );
m *= csZRotMatrix3 ( -0.598295 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00083041 );
m *= csYRotMatrix3 ( -0.65653 );
m *= csZRotMatrix3 ( -0.598279 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.18158299999999999, 0.111432, 0.0072735899999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger0");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger0");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.53901 );
m *= csYRotMatrix3 ( -0.629754 );
m *= csZRotMatrix3 ( -0.0224575 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.58803 );
m *= csYRotMatrix3 ( -0.630243 );
m *= csZRotMatrix3 ( -0.10563 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494699999999999, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.59124 );
m *= csYRotMatrix3 ( -0.630161 );
m *= csZRotMatrix3 ( -0.11107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.59167 );
m *= csYRotMatrix3 ( -0.630148 );
m *= csZRotMatrix3 ( -0.11181 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.58444 );
m *= csYRotMatrix3 ( -0.630319 );
m *= csZRotMatrix3 ( -0.0995442 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494499999999993, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.58063 );
m *= csYRotMatrix3 ( -0.630381 );
m *= csZRotMatrix3 ( -0.0930727 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494499999999993, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.57175 );
m *= csYRotMatrix3 ( -0.630446 );
m *= csZRotMatrix3 ( -0.0780097 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.54527 );
m *= csYRotMatrix3 ( -0.63 );
m *= csZRotMatrix3 ( -0.0330874 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.53639 );
m *= csYRotMatrix3 ( -0.629635 );
m *= csZRotMatrix3 ( -0.0180121 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494499999999993, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.53146 );
m *= csYRotMatrix3 ( -0.629386 );
m *= csZRotMatrix3 ( -0.00963796 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.5273 );
m *= csYRotMatrix3 ( -0.629148 );
m *= csZRotMatrix3 ( -0.00255601 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144100000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.52549 );
m *= csYRotMatrix3 ( -0.629038 );
m *= csZRotMatrix3 ( 0.000513193 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.52387 );
m *= csYRotMatrix3 ( -0.628935 );
m *= csZRotMatrix3 ( 0.00327488 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494499999999993, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.52242 );
m *= csYRotMatrix3 ( -0.62884 );
m *= csZRotMatrix3 ( 0.00573436 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494499999999993, -0.11189499999999999, 0.023144100000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.52281 );
m *= csYRotMatrix3 ( -0.628866 );
m *= csZRotMatrix3 ( 0.00507386 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.52621 );
m *= csYRotMatrix3 ( -0.629083 );
m *= csZRotMatrix3 ( -0.000714761 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.52802 );
m *= csYRotMatrix3 ( -0.629191 );
m *= csZRotMatrix3 ( -0.00377866 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.53901 );
m *= csYRotMatrix3 ( -0.629754 );
m *= csZRotMatrix3 ( -0.0224575 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.092494599999999996, -0.11189499999999999, 0.023144000000000001) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Finger1");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Finger1");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000996544 );
m *= csYRotMatrix3 ( -0.655979 );
m *= csZRotMatrix3 ( 0.129466 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019366999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00105814 );
m *= csYRotMatrix3 ( -0.728259 );
m *= csZRotMatrix3 ( 0.129563 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00105747 );
m *= csYRotMatrix3 ( -0.727575 );
m *= csZRotMatrix3 ( 0.129562 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612399999999999, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00105806 );
m *= csYRotMatrix3 ( -0.728173 );
m *= csZRotMatrix3 ( 0.129562 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612399999999999, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00104888 );
m *= csYRotMatrix3 ( -0.718262 );
m *= csZRotMatrix3 ( 0.129549 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00104405 );
m *= csYRotMatrix3 ( -0.713034 );
m *= csZRotMatrix3 ( 0.129541 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00103325 );
m *= csYRotMatrix3 ( -0.700866 );
m *= csZRotMatrix3 ( 0.129525 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00100322 );
m *= csYRotMatrix3 ( -0.664572 );
m *= csZRotMatrix3 ( 0.129477 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000993783 );
m *= csYRotMatrix3 ( -0.652384 );
m *= csZRotMatrix3 ( 0.129462 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000988662 );
m *= csYRotMatrix3 ( -0.64561 );
m *= csZRotMatrix3 ( 0.129453 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000984513 );
m *= csYRotMatrix3 ( -0.63988 );
m *= csZRotMatrix3 ( 0.129446 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00098267 );
m *= csYRotMatrix3 ( -0.637396 );
m *= csZRotMatrix3 ( 0.129443 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000981012 );
m *= csYRotMatrix3 ( -0.63516 );
m *= csZRotMatrix3 ( 0.12944 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000979613 );
m *= csYRotMatrix3 ( -0.633169 );
m *= csZRotMatrix3 ( 0.129438 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000979972 );
m *= csYRotMatrix3 ( -0.633704 );
m *= csZRotMatrix3 ( 0.129439 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000983377 );
m *= csYRotMatrix3 ( -0.63839 );
m *= csZRotMatrix3 ( 0.129444 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000985211 );
m *= csYRotMatrix3 ( -0.640869 );
m *= csZRotMatrix3 ( 0.129447 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019367100000000002) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000996544 );
m *= csYRotMatrix3 ( -0.655979 );
m *= csZRotMatrix3 ( 0.129466 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.219226, -0.047612300000000003, -0.019366999999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Clavicle");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Clavicle");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.52277 );
m *= csYRotMatrix3 ( 0.392871 );
m *= csZRotMatrix3 ( 1.66354 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, -0.0164114, 0.000132297) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.58404 );
m *= csYRotMatrix3 ( 0.666722 );
m *= csZRotMatrix3 ( 1.69807 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0018134, -0.016268899999999999, -0.00103805) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.6165 );
m *= csYRotMatrix3 ( 0.737757 );
m *= csZRotMatrix3 ( 1.68603 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0021241699999999999, -0.016215500000000001, -0.0012379800000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.62289 );
m *= csYRotMatrix3 ( 0.741687 );
m *= csZRotMatrix3 ( 1.67375 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.002016, -0.016234999999999999, -0.0011691900000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.60456 );
m *= csYRotMatrix3 ( 0.698743 );
m *= csZRotMatrix3 ( 1.67399 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.00173438, -0.016280900000000001, -0.00098906899999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.59276 );
m *= csYRotMatrix3 ( 0.669928 );
m *= csZRotMatrix3 ( 1.675 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0015477500000000001, -0.016307499999999999, -0.00086954299999999997) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.56585 );
m *= csYRotMatrix3 ( 0.600693 );
m *= csZRotMatrix3 ( 1.68148 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.00112206, -0.016356800000000001, -0.00059604099999999995) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.52277 );
m *= csYRotMatrix3 ( 0.392855 );
m *= csZRotMatrix3 ( 1.66304 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (8.1408699999999999e-06, -0.0164114, 0.00013252899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.53624 );
m *= csYRotMatrix3 ( 0.347033 );
m *= csZRotMatrix3 ( 1.5861 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.00010956299999999999, -0.016410899999999999, 0.00020006599999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.54841 );
m *= csYRotMatrix3 ( 0.333835 );
m *= csZRotMatrix3 ( 1.52233 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (4.5647199999999999e-05, -0.0164113, 0.00016037199999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.55472 );
m *= csYRotMatrix3 ( 0.323783 );
m *= csZRotMatrix3 ( 1.47943 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, -0.0164114, 0.00013230199999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.5548 );
m *= csYRotMatrix3 ( 0.319449 );
m *= csZRotMatrix3 ( 1.47351 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-2.4179800000000001e-07, -0.0164114, 0.00013224499999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.55374 );
m *= csYRotMatrix3 ( 0.317666 );
m *= csZRotMatrix3 ( 1.47735 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-5.6695899999999996e-07, -0.0164114, 0.00013226500000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.55201 );
m *= csYRotMatrix3 ( 0.318202 );
m *= csZRotMatrix3 ( 1.48787 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-6.2920899999999998e-07, -0.0164114, 0.00013224499999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.5481 );
m *= csYRotMatrix3 ( 0.325323 );
m *= csZRotMatrix3 ( 1.51669 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-6.8158300000000002e-07, -0.0164114, 0.00013221500000000001) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.54416 );
m *= csYRotMatrix3 ( 0.338796 );
m *= csZRotMatrix3 ( 1.54818 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-5.50858e-07, -0.0164114, 0.000132242) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.54162 );
m *= csYRotMatrix3 ( 0.347148 );
m *= csZRotMatrix3 ( 1.56615 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-5.4211800000000004e-07, -0.0164114, 0.000132337) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -2.52277 );
m *= csYRotMatrix3 ( 0.392871 );
m *= csZRotMatrix3 ( 1.66354 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, -0.0164114, 0.000132297) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R ForeTwist1");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R ForeTwist1");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262747 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0164917 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262746 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0565739 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.103925 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.100969 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0811564 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262748 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00607409 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00237654 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262719 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262757 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262736 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00026274 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00026276 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262756 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262741 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262747 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger21");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger21");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.951992 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.9952 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.98379 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.878004 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.778519 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.773244 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.783076 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.860677 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.873778 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.877233 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.877298 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.873336 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.865248 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.856643 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.852323 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.869688 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.881832 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.951992 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.086901800000000001, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 Head");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 Head");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.217697 );
m *= csYRotMatrix3 ( 0.510928 );
m *= csZRotMatrix3 ( 0.0485324 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.327841 );
m *= csYRotMatrix3 ( 0.704527 );
m *= csZRotMatrix3 ( 0.164383 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.343789 );
m *= csYRotMatrix3 ( 0.742685 );
m *= csZRotMatrix3 ( 0.178691 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.279777 );
m *= csYRotMatrix3 ( 0.732821 );
m *= csZRotMatrix3 ( 0.132416 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.161349 );
m *= csYRotMatrix3 ( 0.691978 );
m *= csZRotMatrix3 ( 0.0629122 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0996475 );
m *= csYRotMatrix3 ( 0.663967 );
m *= csZRotMatrix3 ( 0.0292735 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000262301 );
m *= csYRotMatrix3 ( 0.606196 );
m *= csZRotMatrix3 ( -0.0248262 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.222475 );
m *= csYRotMatrix3 ( 0.503227 );
m *= csZRotMatrix3 ( -0.0716097 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.30322 );
m *= csYRotMatrix3 ( 0.590264 );
m *= csZRotMatrix3 ( -0.0372616 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.345045 );
m *= csYRotMatrix3 ( 0.680052 );
m *= csZRotMatrix3 ( -0.0136443 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.35518 );
m *= csYRotMatrix3 ( 0.733175 );
m *= csZRotMatrix3 ( 0.00589553 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.338598 );
m *= csYRotMatrix3 ( 0.739438 );
m *= csZRotMatrix3 ( 0.0172929 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.306075 );
m *= csYRotMatrix3 ( 0.741204 );
m *= csZRotMatrix3 ( 0.0307086 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.26195 );
m *= csYRotMatrix3 ( 0.738221 );
m *= csZRotMatrix3 ( 0.0450933 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.157138 );
m *= csYRotMatrix3 ( 0.717992 );
m *= csZRotMatrix3 ( 0.0713046 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0594135 );
m *= csYRotMatrix3 ( 0.680979 );
m *= csZRotMatrix3 ( 0.0864892 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0162094 );
m *= csYRotMatrix3 ( 0.656069 );
m *= csZRotMatrix3 ( 0.0883124 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.217697 );
m *= csYRotMatrix3 ( 0.510928 );
m *= csZRotMatrix3 ( 0.0485324 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.16605, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 Spine");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 Spine");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00538194 );
m *= csYRotMatrix3 ( 0.0969495 );
m *= csZRotMatrix3 ( 0.165176 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080555399999999999, -0.0089003199999999998, -6.4418200000000006e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0470387 );
m *= csYRotMatrix3 ( 0.0968139 );
m *= csZRotMatrix3 ( 0.0544364 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0809729, -0.0034333100000000002, -6.4348499999999996e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.053768 );
m *= csYRotMatrix3 ( 0.0970983 );
m *= csZRotMatrix3 ( 0.0222438 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081025399999999997, -0.0018096200000000001, -6.4325099999999998e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0446173 );
m *= csYRotMatrix3 ( 0.0971383 );
m *= csZRotMatrix3 ( 0.0091221 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081040699999999993, -0.00089246699999999998, -6.4351799999999996e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0254447 );
m *= csYRotMatrix3 ( 0.0970671 );
m *= csZRotMatrix3 ( 0.00799559 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081044199999999997, -0.00045777099999999999, -6.4393400000000006e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0152574 );
m *= csYRotMatrix3 ( 0.0970677 );
m *= csZRotMatrix3 ( 0.00648393 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081045300000000001, -0.00021184599999999999, -6.4405200000000005e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -4.17874e-06 );
m *= csYRotMatrix3 ( 0.0970971 );
m *= csZRotMatrix3 ( -0.00933119 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081042000000000003, 0.00075619599999999999, -6.44094e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00684901 );
m *= csYRotMatrix3 ( 0.096858 );
m *= csZRotMatrix3 ( -0.164305 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080686099999999997, 0.00762439, -6.4397899999999995e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0450789 );
m *= csYRotMatrix3 ( 0.0960613 );
m *= csZRotMatrix3 ( -0.124233 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080798400000000006, 0.0063242799999999998, -6.4340500000000005e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0739322 );
m *= csYRotMatrix3 ( 0.0963998 );
m *= csZRotMatrix3 ( -0.0735973 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080924300000000005, 0.0044319600000000004, -6.4228199999999996e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0865011 );
m *= csYRotMatrix3 ( 0.0971 );
m *= csZRotMatrix3 ( -0.0292724 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081010600000000002, 0.0023831999999999998, -6.4158400000000006e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0822137 );
m *= csYRotMatrix3 ( 0.097229 );
m *= csZRotMatrix3 ( -0.0149626 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081032099999999996, 0.00147912, -6.4185700000000004e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0717357 );
m *= csYRotMatrix3 ( 0.0972198 );
m *= csZRotMatrix3 ( -0.00446282 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081043000000000004, 0.00064470499999999997, -6.4238899999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.057168 );
m *= csYRotMatrix3 ( 0.0971493 );
m *= csZRotMatrix3 ( 0.00436352 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081045400000000004, -0.000201227, -6.4303599999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.0241639 );
m *= csYRotMatrix3 ( 0.0970699 );
m *= csZRotMatrix3 ( 0.0214507 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.081022800000000006, -0.00192034, -6.4388300000000002e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -4.16762e-06 );
m *= csYRotMatrix3 ( 0.0970972 );
m *= csZRotMatrix3 ( 0.0452177 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080962800000000001, -0.0036634900000000001, -6.4408999999999999e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00517892 );
m *= csYRotMatrix3 ( 0.0970824 );
m *= csZRotMatrix3 ( 0.0617874 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080918299999999999, -0.0045395899999999996, -6.4413999999999997e-05) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.00538194 );
m *= csYRotMatrix3 ( 0.0969495 );
m *= csZRotMatrix3 ( 0.165176 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.080555399999999999, -0.0089003199999999998, -6.4418200000000006e-05) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Finger01");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Finger01");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.16645 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.22731 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.17048 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.05949 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.954992 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.946067 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -0.947055 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.00501 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.02611 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.04002 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.0494 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.04886 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.0439 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.03828 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.04008 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.06404 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.07951 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268900000000002, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.16645 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.093268799999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Toe01");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Toe01");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.057186500000000001, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L Calf");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L Calf");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.236685 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.212579 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.259717 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.49476 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.786955 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.884866 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.00998 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.09254 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.702594 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.174096 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.236993 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.449159 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.665946 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.78548 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.898017 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.872203 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.829314 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.236695 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.31433699999999998, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Toe2");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Toe2");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.27664 );
m *= csYRotMatrix3 ( -1.18396 );
m *= csZRotMatrix3 ( 1.26632 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.18476 );
m *= csYRotMatrix3 ( -1.16319 );
m *= csZRotMatrix3 ( 1.18159 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35285 );
m *= csYRotMatrix3 ( -1.19071 );
m *= csZRotMatrix3 ( 1.33696 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.12438 );
m *= csYRotMatrix3 ( -1.16101 );
m *= csZRotMatrix3 ( 1.12526 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.91967 );
m *= csYRotMatrix3 ( -1.10869 );
m *= csZRotMatrix3 ( 0.938594 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.061044099999999997, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.35725 );
m *= csYRotMatrix3 ( -1.18714 );
m *= csZRotMatrix3 ( 1.34107 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.11198900000000001, -0.0610442, 0.12055299999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Toe0");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Toe0");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.36876 );
m *= csYRotMatrix3 ( -0.981073 );
m *= csZRotMatrix3 ( -1.32916 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.32811 );
m *= csYRotMatrix3 ( -0.914086 );
m *= csZRotMatrix3 ( -1.24224 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.32052 );
m *= csYRotMatrix3 ( -0.898284 );
m *= csZRotMatrix3 ( -1.22378 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.44431 );
m *= csYRotMatrix3 ( -0.979786 );
m *= csZRotMatrix3 ( -1.39959 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.56401 );
m *= csYRotMatrix3 ( -0.976545 );
m *= csZRotMatrix3 ( -1.54807 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.60333 );
m *= csYRotMatrix3 ( -0.973276 );
m *= csZRotMatrix3 ( -1.59699 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.63314 );
m *= csYRotMatrix3 ( -0.9679 );
m *= csZRotMatrix3 ( -1.63004 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.79456 );
m *= csYRotMatrix3 ( -0.926179 );
m *= csZRotMatrix3 ( -1.81046 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.81708 );
m *= csYRotMatrix3 ( -0.939335 );
m *= csZRotMatrix3 ( -1.86766 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.83491 );
m *= csYRotMatrix3 ( -0.965751 );
m *= csZRotMatrix3 ( -1.92693 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.97762 );
m *= csYRotMatrix3 ( -0.933853 );
m *= csZRotMatrix3 ( -2.06378 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.97012 );
m *= csYRotMatrix3 ( -0.92951 );
m *= csZRotMatrix3 ( -2.05939 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.81636 );
m *= csYRotMatrix3 ( -0.962766 );
m *= csZRotMatrix3 ( -1.93893 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.63445 );
m *= csYRotMatrix3 ( -0.986395 );
m *= csZRotMatrix3 ( -1.79303 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.94046 );
m *= csYRotMatrix3 ( -0.916889 );
m *= csZRotMatrix3 ( -2.04274 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.74047 );
m *= csYRotMatrix3 ( -0.971593 );
m *= csZRotMatrix3 ( -1.7811 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.66599 );
m *= csYRotMatrix3 ( -0.982546 );
m *= csZRotMatrix3 ( -1.68626 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 1.36876 );
m *= csYRotMatrix3 ( -0.981073 );
m *= csZRotMatrix3 ( -1.32916 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.10699, 0.12239700000000001, 0.16284999999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Toe1");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Toe1");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.662734 );
m *= csYRotMatrix3 ( -1.39833 );
m *= csZRotMatrix3 ( -0.658658 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.509562 );
m *= csYRotMatrix3 ( -1.36857 );
m *= csZRotMatrix3 ( -0.508136 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.777443 );
m *= csYRotMatrix3 ( -1.42118 );
m *= csZRotMatrix3 ( -0.77194 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.490108 );
m *= csYRotMatrix3 ( -1.34483 );
m *= csZRotMatrix3 ( -0.490032 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.336933 );
m *= csYRotMatrix3 ( -1.25254 );
m *= csZRotMatrix3 ( -0.343246 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756842 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.76221 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.762211 );
m *= csYRotMatrix3 ( -1.4244 );
m *= csZRotMatrix3 ( -0.756841 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.097092999999999999, 0.018724500000000002, 0.18709899999999999) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 R Forearm");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 R Forearm");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.675032 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.567996 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.533322 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.498781 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.466564 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.44835 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.405981 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.317164 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.329035 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.37026 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.458874 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.55309 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.693289 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.843151 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.02658 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 1.00683 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.96573 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( 0.675032 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.25294800000000001, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("root");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "root");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0 );
m *= csYRotMatrix3 ( -1.5708 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.0, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 L ForeTwist1");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 L ForeTwist1");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262752 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000909786 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262768 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262737 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262741 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.000325402 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -0.00370491 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262753 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0291604 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0561413 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0841053 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0969868 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.108306 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.117412 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.120651 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.103573 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.0895777 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( 0.000262752 );
m *= csYRotMatrix3 ( 0.0 );
m *= csZRotMatrix3 ( 0.0 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (0.13742799999999999, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
animchan = animfactlay->CreateAnimationFactoryChannel ();
boneid = myskel->FindBoneIDByName ("Bip01 Pelvis");
if (boneid < 0)
{
  csReport (object_reg, CS_REPORTER_SEVERITY_ERROR,
      "crystalspace.application.isotest",
      "Error finding bone id for '%s'!", "Bip01 Pelvis");
  return false;
}
animchan->SetID (boneid);
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57079 );
m *= csYRotMatrix3 ( -0.11004 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (40.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.0423384 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.0222869 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.010976 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.00562776 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (480.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57079 );
m *= csYRotMatrix3 ( -0.00260163 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (520.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( 0.00933106 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (600.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57079 );
m *= csYRotMatrix3 ( 0.0942152 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (840.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( 0.0780812 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (960.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( 0.0546552 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1040.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( 0.0293414 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1120.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( 0.0181862 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1160.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( 0.00789789 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1200.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.00252821 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1240.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.0237155 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1320.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.0452179 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1400.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.5708 );
m *= csYRotMatrix3 ( -0.056038 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1440.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
{
csMatrix3 m;
m *= csXRotMatrix3 ( -1.57079 );
m *= csYRotMatrix3 ( -0.11004 );
m *= csZRotMatrix3 ( -1.5708 );
csQuaternion q;
q.SetMatrix (m);
animchan->AddKeyframe (1640.000000f, csTuple2<csQuaternion, csVector3> (
  q,
  csVector3 (-0.0152084, 0.0, 0.0) ));
}
animfact->AddChannel (animchan);
animfact->SetAnimationLength ( 1640.0 );
