/**
 * WARNING - This file is automagically generated from scripts/glextgen/glextgen.py
 */

/*
  Copyright (C) 2002 by Anders Stenberg

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

/*

 Please be careful when changing this file. It's the result of roughly
 78 hours of work, where approximately 14 liters of coffee where consumed,
 the keyboard been replaced 4 times due to worn-out cut'n'paste combo keys
 and two ambulance calls because of near-fatal RSI syndroms. Every line has
 been thought of carefully and has been highly optimized by 3 members of a
 Zen buddhist religion in a Tibetian monastry. Thus modifications, as they
 touch the core OpenGL support, could severely affect performance. Beware!
 Okay, maybe this was a bit exagerated... this file is autogenerated.
 
 */

/**\file
 * WGL extensions manager
 */

#ifndef __CS_WGLEXTENSIONMANAGER_H__
#define __CS_WGLEXTENSIONMANAGER_H__

/**********************************************************************
 * Begin system-specific stuff.
 */
#if defined(__BEOS__)
#include <stdlib.h>     /* to get some BeOS-isms */
#endif

#if !defined(OPENSTEP) && (defined(NeXT) || defined(NeXT_PDO))
#define OPENSTEP
#endif

#if defined(_WIN32) && !defined(__WIN32__) && !defined(__CYGWIN__)
#define __WIN32__
#endif

#if !defined(GLAPI)
#  if !defined(OPENSTEP) && (defined(__WIN32__) && !defined(__CYGWIN__))
#    if defined(_MSC_VER) && defined(BUILD_GL32) /* tag specify we're building mesa as a DLL */
#      define GLAPI __declspec(dllexport)
#    elif defined(_MSC_VER) && defined(_DLL) /* tag specifying we're building for DLL runtime support */
#      define GLAPI __declspec(dllimport)
#    else /* for use with static link lib build of Win32 edition only */
#      define GLAPI extern
#    endif /* _STATIC_MESA support */
#    define GLAPIENTRY __stdcall
#  else
/* non-Windows compilation */
/* In most cases, it seems safest to avoid defining these at all. Please report
 *  if this causes trouble.
 * #define GLAPI extern
 * #define GLAPI
 * #define GLAPIENTRY
 */
#  endif /* WIN32 / CYGWIN bracket */
#endif

//#if defined(_WIN32) && !defined(_WINGDI_) && !defined(__CYGWIN__) && !defined(_GNU_H_WINDOWS32_DEFINES) && !defined(OPENSTEP)
//#include <gl/mesa_wgl.h>
//#endif

#if defined(macintosh) && PRAGMA_IMPORT_SUPPORTED
#pragma import on
#endif

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#endif

#ifndef csAPIENTRY
#ifndef APIENTRY
#define csAPIENTRY
#else
#define csAPIENTRY APIENTRY
#endif
#endif

// In CS, we ignore Cygwin's graphical offerings and use the Windows versions.
#if defined(__CYGWIN__) && !defined(_WIN32)
#define _WIN32
#endif

// Assume that GLX is used on Unix platforms (except OS/X)
#if defined(CS_PLATFORM_UNIX) && !defined(CS_PLATFORM_MACOSX)
#define CS_OPENGL_GLX
/* NOTE: CS_GLEXTMANAGER_USE_GLX must be defined to get the Init*
   functions for GLX extensions. (This was done to avoid pulling X
   headers into every component using the GL extension manager.) */
#endif

/*
 * End system-specific stuff.
 **********************************************************************/

#ifdef DOXYGEN_RUN
typedef void GLvoid;
typedef int GLint;
typedef uint GLuint;
typedef int GLsizei;
typedef uint GLenum;
typedef float GLfloat;
typedef double GLdouble;
typedef unsigned char GLubyte;
#  define _WIN32
#else
#  if defined(CS_OPENGL_PATH)
#    include CS_HEADER_GLOBAL(CS_OPENGL_PATH,gl.h)
#  else
#    include <GL/gl.h>
#  endif
#endif

#include "cssysdef.h"

/*
  Appear in the ARB_shader_objects ext spec.
 */
#ifndef CS_HAVE_GLCHARARB_T
typedef char GLcharARB;
#endif
#ifndef CS_HAVE_GLHANDLEARB_T
typedef unsigned int GLhandleARB;
#endif
/* Identifiers after promotion to core */
#ifndef CS_HAVE_GLCHAR_T
typedef GLcharARB GLchar;
#endif
/* Newer GL type identifiers */
#ifndef CS_HAVE_GLINTPTR_T
typedef intptr_t GLintptr;
#endif
#ifndef CS_HAVE_GLSIZEIPTR_T
typedef uintptr_t GLsizeiptr;
#endif
#ifndef CS_HAVE_GLINT64_T
typedef int64 GLint64;
#endif
#ifndef CS_HAVE_GLUINT64_T
typedef uint64 GLuint64;
#endif

#include "iutil/cmdline.h"
#include "iutil/objreg.h"
#include "iutil/verbositymanager.h"
#include "ivaria/reporter.h"
#include "ivideo/graph2d.h"
#include "csutil/cfgacc.h"
#include "csutil/stringquote.h"
#include "csplugincommon/iopengl/openglinterface.h"

#ifdef _WIN32
/**\name WGL_ARB_extensions_string constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt">http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt</a>.
 * @{ */

/** @} */

/**\name WGL_ARB_extensions_string functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt">http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt</a>.
 * @{ */
typedef char* (csAPIENTRY* csWGLGETEXTENSIONSSTRINGARB) (HDC hdc);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_ARB_buffer_region constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt">http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt</a>.
 * @{ */
#ifndef WGL_FRONT_COLOR_BUFFER_BIT_ARB
#define WGL_FRONT_COLOR_BUFFER_BIT_ARB                                    1
#endif

#ifndef WGL_BACK_COLOR_BUFFER_BIT_ARB
#define WGL_BACK_COLOR_BUFFER_BIT_ARB                                     2
#endif

#ifndef WGL_DEPTH_BUFFER_BIT_ARB
#define WGL_DEPTH_BUFFER_BIT_ARB                                          4
#endif

#ifndef WGL_STENCIL_BUFFER_BIT_ARB
#define WGL_STENCIL_BUFFER_BIT_ARB                                        8
#endif


/** @} */

/**\name WGL_ARB_buffer_region functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt">http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt</a>.
 * @{ */
typedef HANDLE (csAPIENTRY* csWGLCREATEBUFFERREGIONARB) (HDC hDC, GLint iLayerPlane, GLuint uType);
typedef GLvoid (csAPIENTRY* csWGLDELETEBUFFERREGIONARB) (HANDLE hRegion);
typedef BOOL (csAPIENTRY* csWGLSAVEBUFFERREGIONARB) (HANDLE hRegion, GLint x, GLint y, GLint width, GLint height);
typedef BOOL (csAPIENTRY* csWGLRESTOREBUFFERREGIONARB) (HANDLE hRegion, GLint x, GLint y, GLint width, GLint height, GLint xSrc, GLint ySrc);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_I3D_image_buffer constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt">http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt</a>.
 * @{ */
#ifndef WGL_IMAGE_BUFFER_MIN_ACCESS_I3D
#define WGL_IMAGE_BUFFER_MIN_ACCESS_I3D                                   1
#endif

#ifndef WGL_IMAGE_BUFFER_LOCK_I3D
#define WGL_IMAGE_BUFFER_LOCK_I3D                                         2
#endif


/** @} */

/**\name WGL_I3D_image_buffer functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt">http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt</a>.
 * @{ */
typedef GLvoid* (csAPIENTRY* csWGLCREATEIMAGEBUFFERI3D) (HDC hDC, DWORD dwSize, UINT uFlags);
typedef BOOL (csAPIENTRY* csWGLDESTROYIMAGEBUFFERI3D) (HDC hDC, GLvoid* pAddress);
typedef BOOL (csAPIENTRY* csWGLASSOCIATEIMAGEBUFFEREVENTSI3D) (HDC hdc, HANDLE* pEvent, GLvoid* pAddress, DWORD* pSize, UINT count);
typedef BOOL (csAPIENTRY* csWGLRELEASEIMAGEBUFFEREVENTSI3D) (HDC hdc, GLvoid* pAddress, UINT count);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_I3D_swap_frame_lock constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt">http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt</a>.
 * @{ */

/** @} */

/**\name WGL_I3D_swap_frame_lock functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt">http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLENABLEFRAMELOCKI3D) ();
typedef BOOL (csAPIENTRY* csWGLDISABLEFRAMELOCKI3D) ();
typedef BOOL (csAPIENTRY* csWGLISENABLEDFRAMELOCKI3D) (BOOL* pFlag);
typedef BOOL (csAPIENTRY* csWGLQUERYFRAMELOCKMASTERI3D) (BOOL* pFlag);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_I3D_swap_frame_usage constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt">http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt</a>.
 * @{ */

/** @} */

/**\name WGL_I3D_swap_frame_usage functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt">http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLGETFRAMEUSAGEI3D) (GLfloat* pUsage);
typedef BOOL (csAPIENTRY* csWGLBEGINFRAMETRACKINGI3D) ();
typedef BOOL (csAPIENTRY* csWGLENDFRAMETRACKINGI3D) ();
typedef BOOL (csAPIENTRY* csWGLQUERYFRAMETRACKINGI3D) (DWORD* pFrameCount, DWORD* pMissedFrames, GLfloat* pLastMissedUsage);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_ARB_pixel_format constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt">http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt</a>.
 * @{ */
#ifndef WGL_NUMBER_PIXEL_FORMATS_ARB
#define WGL_NUMBER_PIXEL_FORMATS_ARB                                   8192
#endif

#ifndef WGL_DRAW_TO_WINDOW_ARB
#define WGL_DRAW_TO_WINDOW_ARB                                         8193
#endif

#ifndef WGL_DRAW_TO_BITMAP_ARB
#define WGL_DRAW_TO_BITMAP_ARB                                         8194
#endif

#ifndef WGL_ACCELERATION_ARB
#define WGL_ACCELERATION_ARB                                           8195
#endif

#ifndef WGL_NEED_PALETTE_ARB
#define WGL_NEED_PALETTE_ARB                                           8196
#endif

#ifndef WGL_NEED_SYSTEM_PALETTE_ARB
#define WGL_NEED_SYSTEM_PALETTE_ARB                                    8197
#endif

#ifndef WGL_SWAP_LAYER_BUFFERS_ARB
#define WGL_SWAP_LAYER_BUFFERS_ARB                                     8198
#endif

#ifndef WGL_SWAP_METHOD_ARB
#define WGL_SWAP_METHOD_ARB                                            8199
#endif

#ifndef WGL_NUMBER_OVERLAYS_ARB
#define WGL_NUMBER_OVERLAYS_ARB                                        8200
#endif

#ifndef WGL_NUMBER_UNDERLAYS_ARB
#define WGL_NUMBER_UNDERLAYS_ARB                                       8201
#endif

#ifndef WGL_TRANSPARENT_ARB
#define WGL_TRANSPARENT_ARB                                            8202
#endif

#ifndef WGL_TRANSPARENT_RED_VALUE_ARB
#define WGL_TRANSPARENT_RED_VALUE_ARB                                  8247
#endif

#ifndef WGL_TRANSPARENT_GREEN_VALUE_ARB
#define WGL_TRANSPARENT_GREEN_VALUE_ARB                                8248
#endif

#ifndef WGL_TRANSPARENT_BLUE_VALUE_ARB
#define WGL_TRANSPARENT_BLUE_VALUE_ARB                                 8249
#endif

#ifndef WGL_TRANSPARENT_ALPHA_VALUE_ARB
#define WGL_TRANSPARENT_ALPHA_VALUE_ARB                                8250
#endif

#ifndef WGL_TRANSPARENT_INDEX_VALUE_ARB
#define WGL_TRANSPARENT_INDEX_VALUE_ARB                                8251
#endif

#ifndef WGL_SHARE_DEPTH_ARB
#define WGL_SHARE_DEPTH_ARB                                            8204
#endif

#ifndef WGL_SHARE_STENCIL_ARB
#define WGL_SHARE_STENCIL_ARB                                          8205
#endif

#ifndef WGL_SHARE_ACCUM_ARB
#define WGL_SHARE_ACCUM_ARB                                            8206
#endif

#ifndef WGL_SUPPORT_GDI_ARB
#define WGL_SUPPORT_GDI_ARB                                            8207
#endif

#ifndef WGL_SUPPORT_OPENGL_ARB
#define WGL_SUPPORT_OPENGL_ARB                                         8208
#endif

#ifndef WGL_DOUBLE_BUFFER_ARB
#define WGL_DOUBLE_BUFFER_ARB                                          8209
#endif

#ifndef WGL_STEREO_ARB
#define WGL_STEREO_ARB                                                 8210
#endif

#ifndef WGL_PIXEL_TYPE_ARB
#define WGL_PIXEL_TYPE_ARB                                             8211
#endif

#ifndef WGL_COLOR_BITS_ARB
#define WGL_COLOR_BITS_ARB                                             8212
#endif

#ifndef WGL_RED_BITS_ARB
#define WGL_RED_BITS_ARB                                               8213
#endif

#ifndef WGL_RED_SHIFT_ARB
#define WGL_RED_SHIFT_ARB                                              8214
#endif

#ifndef WGL_GREEN_BITS_ARB
#define WGL_GREEN_BITS_ARB                                             8215
#endif

#ifndef WGL_GREEN_SHIFT_ARB
#define WGL_GREEN_SHIFT_ARB                                            8216
#endif

#ifndef WGL_BLUE_BITS_ARB
#define WGL_BLUE_BITS_ARB                                              8217
#endif

#ifndef WGL_BLUE_SHIFT_ARB
#define WGL_BLUE_SHIFT_ARB                                             8218
#endif

#ifndef WGL_ALPHA_BITS_ARB
#define WGL_ALPHA_BITS_ARB                                             8219
#endif

#ifndef WGL_ALPHA_SHIFT_ARB
#define WGL_ALPHA_SHIFT_ARB                                            8220
#endif

#ifndef WGL_ACCUM_BITS_ARB
#define WGL_ACCUM_BITS_ARB                                             8221
#endif

#ifndef WGL_ACCUM_RED_BITS_ARB
#define WGL_ACCUM_RED_BITS_ARB                                         8222
#endif

#ifndef WGL_ACCUM_GREEN_BITS_ARB
#define WGL_ACCUM_GREEN_BITS_ARB                                       8223
#endif

#ifndef WGL_ACCUM_BLUE_BITS_ARB
#define WGL_ACCUM_BLUE_BITS_ARB                                        8224
#endif

#ifndef WGL_ACCUM_ALPHA_BITS_ARB
#define WGL_ACCUM_ALPHA_BITS_ARB                                       8225
#endif

#ifndef WGL_DEPTH_BITS_ARB
#define WGL_DEPTH_BITS_ARB                                             8226
#endif

#ifndef WGL_STENCIL_BITS_ARB
#define WGL_STENCIL_BITS_ARB                                           8227
#endif

#ifndef WGL_AUX_BUFFERS_ARB
#define WGL_AUX_BUFFERS_ARB                                            8228
#endif

#ifndef WGL_NO_ACCELERATION_ARB
#define WGL_NO_ACCELERATION_ARB                                        8229
#endif

#ifndef WGL_GENERIC_ACCELERATION_ARB
#define WGL_GENERIC_ACCELERATION_ARB                                   8230
#endif

#ifndef WGL_FULL_ACCELERATION_ARB
#define WGL_FULL_ACCELERATION_ARB                                      8231
#endif

#ifndef WGL_SWAP_EXCHANGE_ARB
#define WGL_SWAP_EXCHANGE_ARB                                          8232
#endif

#ifndef WGL_SWAP_COPY_ARB
#define WGL_SWAP_COPY_ARB                                              8233
#endif

#ifndef WGL_SWAP_UNDEFINED_ARB
#define WGL_SWAP_UNDEFINED_ARB                                         8234
#endif

#ifndef WGL_TYPE_RGBA_ARB
#define WGL_TYPE_RGBA_ARB                                              8235
#endif

#ifndef WGL_TYPE_COLORINDEX_ARB
#define WGL_TYPE_COLORINDEX_ARB                                        8236
#endif


/** @} */

/**\name WGL_ARB_pixel_format functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt">http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLGETPIXELFORMATATTRIBIVARB) (HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, const GLint* piAttributes, GLint* piValues);
typedef BOOL (csAPIENTRY* csWGLGETPIXELFORMATATTRIBFVARB) (HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, const GLint* piAttributes, GLfloat* pfValues);
typedef BOOL (csAPIENTRY* csWGLCHOOSEPIXELFORMATARB) (HDC hdc, const GLint* piAttribIList, const GLfloat* pfAttribFList, GLuint nMaxFormats, GLint* piFormats, GLuint* nNumFormats);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_ARB_make_current_read constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt">http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt</a>.
 * @{ */
#ifndef WGL_ERROR_INVALID_PIXEL_TYPE_ARB
#define WGL_ERROR_INVALID_PIXEL_TYPE_ARB                               8259
#endif

#ifndef WGL_ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB
#define WGL_ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB                     8276
#endif


/** @} */

/**\name WGL_ARB_make_current_read functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt">http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLMAKECONTEXTCURRENTARB) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef HDC (csAPIENTRY* csWGLGETCURRENTREADDCARB) ();

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_ARB_pbuffer constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt">http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt</a>.
 * @{ */
#ifndef WGL_DRAW_TO_PBUFFER_ARB
#define WGL_DRAW_TO_PBUFFER_ARB                                        8237
#endif

#ifndef WGL_DRAW_TO_PBUFFER_ARB
#define WGL_DRAW_TO_PBUFFER_ARB                                        8237
#endif

#ifndef WGL_MAX_PBUFFER_PIXELS_ARB
#define WGL_MAX_PBUFFER_PIXELS_ARB                                     8238
#endif

#ifndef WGL_MAX_PBUFFER_WIDTH_ARB
#define WGL_MAX_PBUFFER_WIDTH_ARB                                      8239
#endif

#ifndef WGL_MAX_PBUFFER_HEIGHT_ARB
#define WGL_MAX_PBUFFER_HEIGHT_ARB                                     8240
#endif

#ifndef WGL_PBUFFER_LARGEST_ARB
#define WGL_PBUFFER_LARGEST_ARB                                        8243
#endif

#ifndef WGL_PBUFFER_WIDTH_ARB
#define WGL_PBUFFER_WIDTH_ARB                                          8244
#endif

#ifndef WGL_PBUFFER_HEIGHT_ARB
#define WGL_PBUFFER_HEIGHT_ARB                                         8245
#endif

#ifndef WGL_PBUFFER_LOST_ARB
#define WGL_PBUFFER_LOST_ARB                                           8246
#endif


/** @} */

/**\name WGL_ARB_pbuffer functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt">http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt</a>.
 * @{ */
typedef HANDLE (csAPIENTRY* csWGLCREATEPBUFFERARB) (HDC hDC, GLint iPixelFormat, GLint iWidth, GLint iHeight, const GLint* piAttribList);
typedef HDC (csAPIENTRY* csWGLGETPBUFFERDCARB) (HANDLE hPbuffer);
typedef GLint (csAPIENTRY* csWGLRELEASEPBUFFERDCARB) (HANDLE hPbuffer, HDC hDC);
typedef BOOL (csAPIENTRY* csWGLDESTROYPBUFFERARB) (HANDLE hPbuffer);
typedef BOOL (csAPIENTRY* csWGLQUERYPBUFFERARB) (HANDLE hPbuffer, GLint iAttribute, GLint* piValue);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_EXT_swap_control constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt">http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt</a>.
 * @{ */

/** @} */

/**\name WGL_EXT_swap_control functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt">http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLSWAPINTERVALEXT) (GLint interval);
typedef GLint (csAPIENTRY* csWGLGETSWAPINTERVALEXT) ();

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_ARB_render_texture constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt">http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt</a>.
 * @{ */
#ifndef WGL_BIND_TO_TEXTURE_RGB_ARB
#define WGL_BIND_TO_TEXTURE_RGB_ARB                                    8304
#endif

#ifndef WGL_BIND_TO_TEXTURE_RGBA_ARB
#define WGL_BIND_TO_TEXTURE_RGBA_ARB                                   8305
#endif

#ifndef WGL_TEXTURE_FORMAT_ARB
#define WGL_TEXTURE_FORMAT_ARB                                         8306
#endif

#ifndef WGL_TEXTURE_TARGET_ARB
#define WGL_TEXTURE_TARGET_ARB                                         8307
#endif

#ifndef WGL_MIPMAP_TEXTURE_ARB
#define WGL_MIPMAP_TEXTURE_ARB                                         8308
#endif

#ifndef WGL_TEXTURE_RGB_ARB
#define WGL_TEXTURE_RGB_ARB                                            8309
#endif

#ifndef WGL_TEXTURE_RGBA_ARB
#define WGL_TEXTURE_RGBA_ARB                                           8310
#endif

#ifndef WGL_NO_TEXTURE_ARB
#define WGL_NO_TEXTURE_ARB                                             8311
#endif

#ifndef WGL_TEXTURE_CUBE_MAP_ARB
#define WGL_TEXTURE_CUBE_MAP_ARB                                       8312
#endif

#ifndef WGL_TEXTURE_1D_ARB
#define WGL_TEXTURE_1D_ARB                                             8313
#endif

#ifndef WGL_TEXTURE_2D_ARB
#define WGL_TEXTURE_2D_ARB                                             8314
#endif

#ifndef WGL_NO_TEXTURE_ARB
#define WGL_NO_TEXTURE_ARB                                             8311
#endif

#ifndef WGL_MIPMAP_LEVEL_ARB
#define WGL_MIPMAP_LEVEL_ARB                                           8315
#endif

#ifndef WGL_CUBE_MAP_FACE_ARB
#define WGL_CUBE_MAP_FACE_ARB                                          8316
#endif

#ifndef WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB                            8317
#endif

#ifndef WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB                            8318
#endif

#ifndef WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB                            8319
#endif

#ifndef WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB                            8320
#endif

#ifndef WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB                            8321
#endif

#ifndef WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB                            8322
#endif

#ifndef WGL_FRONT_LEFT_ARB
#define WGL_FRONT_LEFT_ARB                                             8323
#endif

#ifndef WGL_FRONT_RIGHT_ARB
#define WGL_FRONT_RIGHT_ARB                                            8324
#endif

#ifndef WGL_BACK_LEFT_ARB
#define WGL_BACK_LEFT_ARB                                              8325
#endif

#ifndef WGL_BACK_RIGHT_ARB
#define WGL_BACK_RIGHT_ARB                                             8326
#endif

#ifndef WGL_AUX0_ARB
#define WGL_AUX0_ARB                                                   8327
#endif

#ifndef WGL_AUX1_ARB
#define WGL_AUX1_ARB                                                   8328
#endif

#ifndef WGL_AUX2_ARB
#define WGL_AUX2_ARB                                                   8329
#endif

#ifndef WGL_AUX3_ARB
#define WGL_AUX3_ARB                                                   8330
#endif

#ifndef WGL_AUX4_ARB
#define WGL_AUX4_ARB                                                   8331
#endif

#ifndef WGL_AUX5_ARB
#define WGL_AUX5_ARB                                                   8332
#endif

#ifndef WGL_AUX6_ARB
#define WGL_AUX6_ARB                                                   8333
#endif

#ifndef WGL_AUX7_ARB
#define WGL_AUX7_ARB                                                   8334
#endif

#ifndef WGL_AUX8_ARB
#define WGL_AUX8_ARB                                                   8335
#endif

#ifndef WGL_AUX9_ARB
#define WGL_AUX9_ARB                                                   8336
#endif


/** @} */

/**\name WGL_ARB_render_texture functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt">http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLBINDTEXIMAGEARB) (HANDLE hPbuffer, GLint iBuffer);
typedef BOOL (csAPIENTRY* csWGLRELEASETEXIMAGEARB) (HANDLE hPbuffer, GLint iBuffer);
typedef BOOL (csAPIENTRY* csWGLSETPBUFFERATTRIBARB) (HANDLE hPbuffer, const GLint* piAttribList);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_EXT_extensions_string constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt">http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt</a>.
 * @{ */

/** @} */

/**\name WGL_EXT_extensions_string functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt">http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt</a>.
 * @{ */
typedef char* (csAPIENTRY* csWGLGETEXTENSIONSSTRINGEXT) ();

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_EXT_make_current_read constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt">http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt</a>.
 * @{ */

/** @} */

/**\name WGL_EXT_make_current_read functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt">http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLMAKECONTEXTCURRENTEXT) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef HDC (csAPIENTRY* csWGLGETCURRENTREADDCEXT) ();

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_EXT_pbuffer constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt">http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt</a>.
 * @{ */
#ifndef WGL_DRAW_TO_PBUFFER_EXT
#define WGL_DRAW_TO_PBUFFER_EXT                                        8237
#endif

#ifndef WGL_MAX_PBUFFER_PIXELS_EXT
#define WGL_MAX_PBUFFER_PIXELS_EXT                                     8238
#endif

#ifndef WGL_MAX_PBUFFER_WIDTH_EXT
#define WGL_MAX_PBUFFER_WIDTH_EXT                                      8239
#endif

#ifndef WGL_MAX_PBUFFER_HEIGHT_EXT
#define WGL_MAX_PBUFFER_HEIGHT_EXT                                     8240
#endif

#ifndef WGL_OPTIMAL_PBUFFER_WIDTH_EXT
#define WGL_OPTIMAL_PBUFFER_WIDTH_EXT                                  8241
#endif

#ifndef WGL_OPTIMAL_PBUFFER_HEIGHT_EXT
#define WGL_OPTIMAL_PBUFFER_HEIGHT_EXT                                 8242
#endif

#ifndef WGL_PBUFFER_LARGEST_EXT
#define WGL_PBUFFER_LARGEST_EXT                                        8243
#endif

#ifndef WGL_PBUFFER_WIDTH_EXT
#define WGL_PBUFFER_WIDTH_EXT                                          8244
#endif

#ifndef WGL_PBUFFER_HEIGHT_EXT
#define WGL_PBUFFER_HEIGHT_EXT                                         8245
#endif


/** @} */

/**\name WGL_EXT_pbuffer functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt">http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt</a>.
 * @{ */
typedef HANDLE (csAPIENTRY* csWGLCREATEPBUFFEREXT) (HDC hDC, GLint iPixelFormat, GLint iWidth, GLint iHeight, const GLint* piAttribList);
typedef HDC (csAPIENTRY* csWGLGETPBUFFERDCEXT) (HANDLE hPbuffer);
typedef GLint (csAPIENTRY* csWGLRELEASEPBUFFERDCEXT) (HANDLE hPbuffer, HDC hDC);
typedef BOOL (csAPIENTRY* csWGLDESTROYPBUFFEREXT) (HANDLE hPbuffer);
typedef BOOL (csAPIENTRY* csWGLQUERYPBUFFEREXT) (HANDLE hPbuffer, GLint iAttribute, GLint* piValue);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_EXT_pixel_format constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt">http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt</a>.
 * @{ */
#ifndef WGL_NUMBER_PIXEL_FORMATS_EXT
#define WGL_NUMBER_PIXEL_FORMATS_EXT                                   8192
#endif

#ifndef WGL_DRAW_TO_WINDOW_EXT
#define WGL_DRAW_TO_WINDOW_EXT                                         8193
#endif

#ifndef WGL_DRAW_TO_BITMAP_EXT
#define WGL_DRAW_TO_BITMAP_EXT                                         8194
#endif

#ifndef WGL_ACCELERATION_EXT
#define WGL_ACCELERATION_EXT                                           8195
#endif

#ifndef WGL_NEED_PALETTE_EXT
#define WGL_NEED_PALETTE_EXT                                           8196
#endif

#ifndef WGL_NEED_SYSTEM_PALETTE_EXT
#define WGL_NEED_SYSTEM_PALETTE_EXT                                    8197
#endif

#ifndef WGL_SWAP_LAYER_BUFFERS_EXT
#define WGL_SWAP_LAYER_BUFFERS_EXT                                     8198
#endif

#ifndef WGL_SWAP_METHOD_EXT
#define WGL_SWAP_METHOD_EXT                                            8199
#endif

#ifndef WGL_NUMBER_OVERLAYS_EXT
#define WGL_NUMBER_OVERLAYS_EXT                                        8200
#endif

#ifndef WGL_NUMBER_UNDERLAYS_EXT
#define WGL_NUMBER_UNDERLAYS_EXT                                       8201
#endif

#ifndef WGL_TRANSPARENT_EXT
#define WGL_TRANSPARENT_EXT                                            8202
#endif

#ifndef WGL_TRANSPARENT_VALUE_EXT
#define WGL_TRANSPARENT_VALUE_EXT                                      8203
#endif

#ifndef WGL_SHARE_DEPTH_EXT
#define WGL_SHARE_DEPTH_EXT                                            8204
#endif

#ifndef WGL_SHARE_STENCIL_EXT
#define WGL_SHARE_STENCIL_EXT                                          8205
#endif

#ifndef WGL_SHARE_ACCUM_EXT
#define WGL_SHARE_ACCUM_EXT                                            8206
#endif

#ifndef WGL_SUPPORT_GDI_EXT
#define WGL_SUPPORT_GDI_EXT                                            8207
#endif

#ifndef WGL_SUPPORT_OPENGL_EXT
#define WGL_SUPPORT_OPENGL_EXT                                         8208
#endif

#ifndef WGL_DOUBLE_BUFFER_EXT
#define WGL_DOUBLE_BUFFER_EXT                                          8209
#endif

#ifndef WGL_STEREO_EXT
#define WGL_STEREO_EXT                                                 8210
#endif

#ifndef WGL_PIXEL_TYPE_EXT
#define WGL_PIXEL_TYPE_EXT                                             8211
#endif

#ifndef WGL_COLOR_BITS_EXT
#define WGL_COLOR_BITS_EXT                                             8212
#endif

#ifndef WGL_RED_BITS_EXT
#define WGL_RED_BITS_EXT                                               8213
#endif

#ifndef WGL_RED_SHIFT_EXT
#define WGL_RED_SHIFT_EXT                                              8214
#endif

#ifndef WGL_GREEN_BITS_EXT
#define WGL_GREEN_BITS_EXT                                             8215
#endif

#ifndef WGL_GREEN_SHIFT_EXT
#define WGL_GREEN_SHIFT_EXT                                            8216
#endif

#ifndef WGL_BLUE_BITS_EXT
#define WGL_BLUE_BITS_EXT                                              8217
#endif

#ifndef WGL_BLUE_SHIFT_EXT
#define WGL_BLUE_SHIFT_EXT                                             8218
#endif

#ifndef WGL_ALPHA_BITS_EXT
#define WGL_ALPHA_BITS_EXT                                             8219
#endif

#ifndef WGL_ALPHA_SHIFT_EXT
#define WGL_ALPHA_SHIFT_EXT                                            8220
#endif

#ifndef WGL_ACCUM_BITS_EXT
#define WGL_ACCUM_BITS_EXT                                             8221
#endif

#ifndef WGL_ACCUM_RED_BITS_EXT
#define WGL_ACCUM_RED_BITS_EXT                                         8222
#endif

#ifndef WGL_ACCUM_GREEN_BITS_EXT
#define WGL_ACCUM_GREEN_BITS_EXT                                       8223
#endif

#ifndef WGL_ACCUM_BLUE_BITS_EXT
#define WGL_ACCUM_BLUE_BITS_EXT                                        8224
#endif

#ifndef WGL_ACCUM_ALPHA_BITS_EXT
#define WGL_ACCUM_ALPHA_BITS_EXT                                       8225
#endif

#ifndef WGL_DEPTH_BITS_EXT
#define WGL_DEPTH_BITS_EXT                                             8226
#endif

#ifndef WGL_STENCIL_BITS_EXT
#define WGL_STENCIL_BITS_EXT                                           8227
#endif

#ifndef WGL_AUX_BUFFERS_EXT
#define WGL_AUX_BUFFERS_EXT                                            8228
#endif

#ifndef WGL_NO_ACCELERATION_EXT
#define WGL_NO_ACCELERATION_EXT                                        8229
#endif

#ifndef WGL_GENERIC_ACCELERATION_EXT
#define WGL_GENERIC_ACCELERATION_EXT                                   8230
#endif

#ifndef WGL_FULL_ACCELERATION_EXT
#define WGL_FULL_ACCELERATION_EXT                                      8231
#endif

#ifndef WGL_SWAP_EXCHANGE_EXT
#define WGL_SWAP_EXCHANGE_EXT                                          8232
#endif

#ifndef WGL_SWAP_COPY_EXT
#define WGL_SWAP_COPY_EXT                                              8233
#endif

#ifndef WGL_SWAP_UNDEFINED_EXT
#define WGL_SWAP_UNDEFINED_EXT                                         8234
#endif

#ifndef WGL_TYPE_RGBA_EXT
#define WGL_TYPE_RGBA_EXT                                              8235
#endif

#ifndef WGL_TYPE_COLORINDEX_EXT
#define WGL_TYPE_COLORINDEX_EXT                                        8236
#endif


/** @} */

/**\name WGL_EXT_pixel_format functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt">http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLGETPIXELFORMATATTRIBIVEXT) (HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, GLint* piAttributes, GLint* piValues);
typedef BOOL (csAPIENTRY* csWGLGETPIXELFORMATATTRIBFVEXT) (HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, GLint* piAttributes, GLfloat* pfValues);
typedef BOOL (csAPIENTRY* csWGLCHOOSEPIXELFORMATEXT) (HDC hdc, const GLint* piAttribIList, const GLfloat* pfAttribFList, GLuint nMaxFormats, GLint* piFormats, GLuint* nNumFormats);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_I3D_digital_video_control constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt">http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt</a>.
 * @{ */
#ifndef WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D
#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D                 8272
#endif

#ifndef WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D
#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D                       8273
#endif

#ifndef WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D
#define WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D                          8274
#endif

#ifndef WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D
#define WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D                          8275
#endif


/** @} */

/**\name WGL_I3D_digital_video_control functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt">http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLGETDIGITALVIDEOPARAMETERSI3D) (HDC hDC, GLint iAttribute, GLint* piValue);
typedef BOOL (csAPIENTRY* csWGLSETDIGITALVIDEOPARAMETERSI3D) (HDC hDC, GLint iAttribute, const GLint* piValue);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_I3D_gamma constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt">http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt</a>.
 * @{ */
#ifndef WGL_GAMMA_TABLE_SIZE_I3D
#define WGL_GAMMA_TABLE_SIZE_I3D                                       8270
#endif

#ifndef WGL_GAMMA_EXCLUDE_DESKTOP_I3D
#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D                                  8271
#endif

#ifndef WGL_GAMMA_EXCLUDE_DESKTOP_I3D
#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D                                  8271
#endif


/** @} */

/**\name WGL_I3D_gamma functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt">http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLGETGAMMATABLEPARAMETERSI3D) (HDC hDC, GLint iAttribute, GLint* piValue);
typedef BOOL (csAPIENTRY* csWGLSETGAMMATABLEPARAMETERSI3D) (HDC hDC, GLint iAttribute, const GLint* piValue);
typedef BOOL (csAPIENTRY* csWGLGETGAMMATABLEI3D) (HDC hDC, GLint iEntries, GLushort* puRed, GLushort* puGreen, GLushort* puBlue);
typedef BOOL (csAPIENTRY* csWGLSETGAMMATABLEI3D) (HDC hDC, GLint iEntries, const GLushort* puRed, const GLushort* puGreen, const GLushort* puBlue);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_I3D_genlock constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt">http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt</a>.
 * @{ */
#ifndef WGL_GENLOCK_SOURCE_MULTIVIEW_I3D
#define WGL_GENLOCK_SOURCE_MULTIVIEW_I3D                               8260
#endif

#ifndef WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D
#define WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D                           8261
#endif

#ifndef WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D
#define WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D                          8262
#endif

#ifndef WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D
#define WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D                            8263
#endif

#ifndef WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D
#define WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D                            8264
#endif

#ifndef WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D
#define WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D                           8265
#endif

#ifndef WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D
#define WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D                            8266
#endif

#ifndef WGL_GENLOCK_SOURCE_EDGE_RISING_I3D
#define WGL_GENLOCK_SOURCE_EDGE_RISING_I3D                             8267
#endif

#ifndef WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D
#define WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D                               8268
#endif


/** @} */

/**\name WGL_I3D_genlock functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt">http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt</a>.
 * @{ */
typedef BOOL (csAPIENTRY* csWGLENABLEGENLOCKI3D) (HDC hDC);
typedef BOOL (csAPIENTRY* csWGLDISABLEGENLOCKI3D) (HDC hDC);
typedef BOOL (csAPIENTRY* csWGLISENABLEDGENLOCKI3D) (HDC hDC, BOOL* pFlag);
typedef BOOL (csAPIENTRY* csWGLGENLOCKSOURCEI3D) (HDC hDC, GLuint uSource);
typedef BOOL (csAPIENTRY* csWGLGETGENLOCKSOURCEI3D) (HDC hDC, GLuint* uSource);
typedef BOOL (csAPIENTRY* csWGLGENLOCKSOURCEEDGEI3D) (HDC hDC, GLuint uEdge);
typedef BOOL (csAPIENTRY* csWGLGETGENLOCKSOURCEEDGEI3D) (HDC hDC, GLuint* uEdge);
typedef BOOL (csAPIENTRY* csWGLGENLOCKSAMPLERATEI3D) (HDC hDC, GLuint uRate);
typedef BOOL (csAPIENTRY* csWGLGETGENLOCKSAMPLERATEI3D) (HDC hDC, GLuint* uRate);
typedef BOOL (csAPIENTRY* csWGLGENLOCKSOURCEDELAYI3D) (HDC hDC, GLuint uDelay);
typedef BOOL (csAPIENTRY* csWGLGETGENLOCKSOURCEDELAYI3D) (HDC hDC, GLuint* uDelay);
typedef BOOL (csAPIENTRY* csWGLQUERYGENLOCKMAXSOURCEDELAYI3D) (HDC hDC, GLuint* uMaxLineDelay, GLuint* uMaxPixelDelay);

/** @} */
#endif

#ifdef _WIN32
/**\name WGL_ARB_framebuffer_sRGB constants
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt">http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt</a>.
 * @{ */
#ifndef WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB
#define WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB                             0x20A9
#endif


/** @} */

/**\name WGL_ARB_framebuffer_sRGB functions
 * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt">http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt</a>.
 * @{ */

/** @} */
#endif



// end of definitions

#ifdef CS_DEBUG
#  define REPORT_MISSING_ENTRIES true
#else
#  define REPORT_MISSING_ENTRIES false
#endif

#define EXTMGR_FUNC_INIT(nameNC, nameUC)				\
      funcTest =							\
	((nameNC = (cs##nameUC) gl->GetProcAddress (#nameNC)) != 0);	\
      if (!funcTest && config->GetBool (				\
	"Video.OpenGL.ReportMissingEntries",				\
	REPORT_MISSING_ENTRIES))					\
      {									\
	Report (msgExtRetrieveFail, #nameNC); 				\
      }									\
      allclear &= funcTest;

#define EXTMGR_REPORT_INIT_RESULT(exttype, nameNC)			\
      CS_##nameNC = allclear;						\
      if (CS_##nameNC) 					                \
      {									\
        CS_##nameNC &= config->GetBool (cfgkey, defaultUse);		\
        if (CS_##nameNC)						\
        {								\
          Report (msgExtFoundAndUsed, exttype, CS::Quote::Single (ext));\
        }								\
        else								\
        {								\
          Report (msgExtFoundAndNotUsed, exttype,			\
		  CS::Quote::Single (ext));				\
        }								\
      }									\
      else								\
      {									\
        Report (msgExtInitFail, exttype, CS::Quote::Single (ext));	\
      }

namespace CS
{

/// Struct containing all WGL extension functions.
struct WGLExtensionFunctions
{
public:
#ifdef _WIN32
  /**\name WGL_ARB_extensions_string functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt">http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt</a>.
   * @{ */
  #ifndef WGLGETEXTENSIONSSTRINGARB_DECL
  #define WGLGETEXTENSIONSSTRINGARB_DECL
  csWGLGETEXTENSIONSSTRINGARB wglGetExtensionsStringARB;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_ARB_buffer_region functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt">http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt</a>.
   * @{ */
  #ifndef WGLCREATEBUFFERREGIONARB_DECL
  #define WGLCREATEBUFFERREGIONARB_DECL
  csWGLCREATEBUFFERREGIONARB wglCreateBufferRegionARB;
  #endif

  #ifndef WGLDELETEBUFFERREGIONARB_DECL
  #define WGLDELETEBUFFERREGIONARB_DECL
  csWGLDELETEBUFFERREGIONARB wglDeleteBufferRegionARB;
  #endif

  #ifndef WGLSAVEBUFFERREGIONARB_DECL
  #define WGLSAVEBUFFERREGIONARB_DECL
  csWGLSAVEBUFFERREGIONARB wglSaveBufferRegionARB;
  #endif

  #ifndef WGLRESTOREBUFFERREGIONARB_DECL
  #define WGLRESTOREBUFFERREGIONARB_DECL
  csWGLRESTOREBUFFERREGIONARB wglRestoreBufferRegionARB;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_I3D_image_buffer functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt">http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt</a>.
   * @{ */
  #ifndef WGLCREATEIMAGEBUFFERI3D_DECL
  #define WGLCREATEIMAGEBUFFERI3D_DECL
  csWGLCREATEIMAGEBUFFERI3D wglCreateImageBufferI3D;
  #endif

  #ifndef WGLDESTROYIMAGEBUFFERI3D_DECL
  #define WGLDESTROYIMAGEBUFFERI3D_DECL
  csWGLDESTROYIMAGEBUFFERI3D wglDestroyImageBufferI3D;
  #endif

  #ifndef WGLASSOCIATEIMAGEBUFFEREVENTSI3D_DECL
  #define WGLASSOCIATEIMAGEBUFFEREVENTSI3D_DECL
  csWGLASSOCIATEIMAGEBUFFEREVENTSI3D wglAssociateImageBufferEventsI3D;
  #endif

  #ifndef WGLRELEASEIMAGEBUFFEREVENTSI3D_DECL
  #define WGLRELEASEIMAGEBUFFEREVENTSI3D_DECL
  csWGLRELEASEIMAGEBUFFEREVENTSI3D wglReleaseImageBufferEventsI3D;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_I3D_swap_frame_lock functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt">http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt</a>.
   * @{ */
  #ifndef WGLENABLEFRAMELOCKI3D_DECL
  #define WGLENABLEFRAMELOCKI3D_DECL
  csWGLENABLEFRAMELOCKI3D wglEnableFrameLockI3D;
  #endif

  #ifndef WGLDISABLEFRAMELOCKI3D_DECL
  #define WGLDISABLEFRAMELOCKI3D_DECL
  csWGLDISABLEFRAMELOCKI3D wglDisableFrameLockI3D;
  #endif

  #ifndef WGLISENABLEDFRAMELOCKI3D_DECL
  #define WGLISENABLEDFRAMELOCKI3D_DECL
  csWGLISENABLEDFRAMELOCKI3D wglIsEnabledFrameLockI3D;
  #endif

  #ifndef WGLQUERYFRAMELOCKMASTERI3D_DECL
  #define WGLQUERYFRAMELOCKMASTERI3D_DECL
  csWGLQUERYFRAMELOCKMASTERI3D wglQueryFrameLockMasterI3D;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_I3D_swap_frame_usage functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt">http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt</a>.
   * @{ */
  #ifndef WGLGETFRAMEUSAGEI3D_DECL
  #define WGLGETFRAMEUSAGEI3D_DECL
  csWGLGETFRAMEUSAGEI3D wglGetFrameUsageI3D;
  #endif

  #ifndef WGLBEGINFRAMETRACKINGI3D_DECL
  #define WGLBEGINFRAMETRACKINGI3D_DECL
  csWGLBEGINFRAMETRACKINGI3D wglBeginFrameTrackingI3D;
  #endif

  #ifndef WGLENDFRAMETRACKINGI3D_DECL
  #define WGLENDFRAMETRACKINGI3D_DECL
  csWGLENDFRAMETRACKINGI3D wglEndFrameTrackingI3D;
  #endif

  #ifndef WGLQUERYFRAMETRACKINGI3D_DECL
  #define WGLQUERYFRAMETRACKINGI3D_DECL
  csWGLQUERYFRAMETRACKINGI3D wglQueryFrameTrackingI3D;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_ARB_pixel_format functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt">http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt</a>.
   * @{ */
  #ifndef WGLGETPIXELFORMATATTRIBIVARB_DECL
  #define WGLGETPIXELFORMATATTRIBIVARB_DECL
  csWGLGETPIXELFORMATATTRIBIVARB wglGetPixelFormatAttribivARB;
  #endif

  #ifndef WGLGETPIXELFORMATATTRIBFVARB_DECL
  #define WGLGETPIXELFORMATATTRIBFVARB_DECL
  csWGLGETPIXELFORMATATTRIBFVARB wglGetPixelFormatAttribfvARB;
  #endif

  #ifndef WGLCHOOSEPIXELFORMATARB_DECL
  #define WGLCHOOSEPIXELFORMATARB_DECL
  csWGLCHOOSEPIXELFORMATARB wglChoosePixelFormatARB;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_ARB_make_current_read functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt">http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt</a>.
   * @{ */
  #ifndef WGLMAKECONTEXTCURRENTARB_DECL
  #define WGLMAKECONTEXTCURRENTARB_DECL
  csWGLMAKECONTEXTCURRENTARB wglMakeContextCurrentARB;
  #endif

  #ifndef WGLGETCURRENTREADDCARB_DECL
  #define WGLGETCURRENTREADDCARB_DECL
  csWGLGETCURRENTREADDCARB wglGetCurrentReadDCARB;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_ARB_pbuffer functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt">http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt</a>.
   * @{ */
  #ifndef WGLCREATEPBUFFERARB_DECL
  #define WGLCREATEPBUFFERARB_DECL
  csWGLCREATEPBUFFERARB wglCreatePbufferARB;
  #endif

  #ifndef WGLGETPBUFFERDCARB_DECL
  #define WGLGETPBUFFERDCARB_DECL
  csWGLGETPBUFFERDCARB wglGetPbufferDCARB;
  #endif

  #ifndef WGLRELEASEPBUFFERDCARB_DECL
  #define WGLRELEASEPBUFFERDCARB_DECL
  csWGLRELEASEPBUFFERDCARB wglReleasePbufferDCARB;
  #endif

  #ifndef WGLDESTROYPBUFFERARB_DECL
  #define WGLDESTROYPBUFFERARB_DECL
  csWGLDESTROYPBUFFERARB wglDestroyPbufferARB;
  #endif

  #ifndef WGLQUERYPBUFFERARB_DECL
  #define WGLQUERYPBUFFERARB_DECL
  csWGLQUERYPBUFFERARB wglQueryPbufferARB;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_EXT_swap_control functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt">http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt</a>.
   * @{ */
  #ifndef WGLSWAPINTERVALEXT_DECL
  #define WGLSWAPINTERVALEXT_DECL
  csWGLSWAPINTERVALEXT wglSwapIntervalEXT;
  #endif

  #ifndef WGLGETSWAPINTERVALEXT_DECL
  #define WGLGETSWAPINTERVALEXT_DECL
  csWGLGETSWAPINTERVALEXT wglGetSwapIntervalEXT;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_ARB_render_texture functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt">http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt</a>.
   * @{ */
  #ifndef WGLBINDTEXIMAGEARB_DECL
  #define WGLBINDTEXIMAGEARB_DECL
  csWGLBINDTEXIMAGEARB wglBindTexImageARB;
  #endif

  #ifndef WGLRELEASETEXIMAGEARB_DECL
  #define WGLRELEASETEXIMAGEARB_DECL
  csWGLRELEASETEXIMAGEARB wglReleaseTexImageARB;
  #endif

  #ifndef WGLSETPBUFFERATTRIBARB_DECL
  #define WGLSETPBUFFERATTRIBARB_DECL
  csWGLSETPBUFFERATTRIBARB wglSetPbufferAttribARB;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_EXT_extensions_string functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt">http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt</a>.
   * @{ */
  #ifndef WGLGETEXTENSIONSSTRINGEXT_DECL
  #define WGLGETEXTENSIONSSTRINGEXT_DECL
  csWGLGETEXTENSIONSSTRINGEXT wglGetExtensionsStringEXT;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_EXT_make_current_read functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt">http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt</a>.
   * @{ */
  #ifndef WGLMAKECONTEXTCURRENTEXT_DECL
  #define WGLMAKECONTEXTCURRENTEXT_DECL
  csWGLMAKECONTEXTCURRENTEXT wglMakeContextCurrentEXT;
  #endif

  #ifndef WGLGETCURRENTREADDCEXT_DECL
  #define WGLGETCURRENTREADDCEXT_DECL
  csWGLGETCURRENTREADDCEXT wglGetCurrentReadDCEXT;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_EXT_pbuffer functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt">http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt</a>.
   * @{ */
  #ifndef WGLCREATEPBUFFEREXT_DECL
  #define WGLCREATEPBUFFEREXT_DECL
  csWGLCREATEPBUFFEREXT wglCreatePbufferEXT;
  #endif

  #ifndef WGLGETPBUFFERDCEXT_DECL
  #define WGLGETPBUFFERDCEXT_DECL
  csWGLGETPBUFFERDCEXT wglGetPbufferDCEXT;
  #endif

  #ifndef WGLRELEASEPBUFFERDCEXT_DECL
  #define WGLRELEASEPBUFFERDCEXT_DECL
  csWGLRELEASEPBUFFERDCEXT wglReleasePbufferDCEXT;
  #endif

  #ifndef WGLDESTROYPBUFFEREXT_DECL
  #define WGLDESTROYPBUFFEREXT_DECL
  csWGLDESTROYPBUFFEREXT wglDestroyPbufferEXT;
  #endif

  #ifndef WGLQUERYPBUFFEREXT_DECL
  #define WGLQUERYPBUFFEREXT_DECL
  csWGLQUERYPBUFFEREXT wglQueryPbufferEXT;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_EXT_pixel_format functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt">http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt</a>.
   * @{ */
  #ifndef WGLGETPIXELFORMATATTRIBIVEXT_DECL
  #define WGLGETPIXELFORMATATTRIBIVEXT_DECL
  csWGLGETPIXELFORMATATTRIBIVEXT wglGetPixelFormatAttribivEXT;
  #endif

  #ifndef WGLGETPIXELFORMATATTRIBFVEXT_DECL
  #define WGLGETPIXELFORMATATTRIBFVEXT_DECL
  csWGLGETPIXELFORMATATTRIBFVEXT wglGetPixelFormatAttribfvEXT;
  #endif

  #ifndef WGLCHOOSEPIXELFORMATEXT_DECL
  #define WGLCHOOSEPIXELFORMATEXT_DECL
  csWGLCHOOSEPIXELFORMATEXT wglChoosePixelFormatEXT;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_I3D_digital_video_control functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt">http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt</a>.
   * @{ */
  #ifndef WGLGETDIGITALVIDEOPARAMETERSI3D_DECL
  #define WGLGETDIGITALVIDEOPARAMETERSI3D_DECL
  csWGLGETDIGITALVIDEOPARAMETERSI3D wglGetDigitalVideoParametersI3D;
  #endif

  #ifndef WGLSETDIGITALVIDEOPARAMETERSI3D_DECL
  #define WGLSETDIGITALVIDEOPARAMETERSI3D_DECL
  csWGLSETDIGITALVIDEOPARAMETERSI3D wglSetDigitalVideoParametersI3D;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_I3D_gamma functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt">http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt</a>.
   * @{ */
  #ifndef WGLGETGAMMATABLEPARAMETERSI3D_DECL
  #define WGLGETGAMMATABLEPARAMETERSI3D_DECL
  csWGLGETGAMMATABLEPARAMETERSI3D wglGetGammaTableParametersI3D;
  #endif

  #ifndef WGLSETGAMMATABLEPARAMETERSI3D_DECL
  #define WGLSETGAMMATABLEPARAMETERSI3D_DECL
  csWGLSETGAMMATABLEPARAMETERSI3D wglSetGammaTableParametersI3D;
  #endif

  #ifndef WGLGETGAMMATABLEI3D_DECL
  #define WGLGETGAMMATABLEI3D_DECL
  csWGLGETGAMMATABLEI3D wglGetGammaTableI3D;
  #endif

  #ifndef WGLSETGAMMATABLEI3D_DECL
  #define WGLSETGAMMATABLEI3D_DECL
  csWGLSETGAMMATABLEI3D wglSetGammaTableI3D;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_I3D_genlock functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt">http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt</a>.
   * @{ */
  #ifndef WGLENABLEGENLOCKI3D_DECL
  #define WGLENABLEGENLOCKI3D_DECL
  csWGLENABLEGENLOCKI3D wglEnableGenlockI3D;
  #endif

  #ifndef WGLDISABLEGENLOCKI3D_DECL
  #define WGLDISABLEGENLOCKI3D_DECL
  csWGLDISABLEGENLOCKI3D wglDisableGenlockI3D;
  #endif

  #ifndef WGLISENABLEDGENLOCKI3D_DECL
  #define WGLISENABLEDGENLOCKI3D_DECL
  csWGLISENABLEDGENLOCKI3D wglIsEnabledGenlockI3D;
  #endif

  #ifndef WGLGENLOCKSOURCEI3D_DECL
  #define WGLGENLOCKSOURCEI3D_DECL
  csWGLGENLOCKSOURCEI3D wglGenlockSourceI3D;
  #endif

  #ifndef WGLGETGENLOCKSOURCEI3D_DECL
  #define WGLGETGENLOCKSOURCEI3D_DECL
  csWGLGETGENLOCKSOURCEI3D wglGetGenlockSourceI3D;
  #endif

  #ifndef WGLGENLOCKSOURCEEDGEI3D_DECL
  #define WGLGENLOCKSOURCEEDGEI3D_DECL
  csWGLGENLOCKSOURCEEDGEI3D wglGenlockSourceEdgeI3D;
  #endif

  #ifndef WGLGETGENLOCKSOURCEEDGEI3D_DECL
  #define WGLGETGENLOCKSOURCEEDGEI3D_DECL
  csWGLGETGENLOCKSOURCEEDGEI3D wglGetGenlockSourceEdgeI3D;
  #endif

  #ifndef WGLGENLOCKSAMPLERATEI3D_DECL
  #define WGLGENLOCKSAMPLERATEI3D_DECL
  csWGLGENLOCKSAMPLERATEI3D wglGenlockSampleRateI3D;
  #endif

  #ifndef WGLGETGENLOCKSAMPLERATEI3D_DECL
  #define WGLGETGENLOCKSAMPLERATEI3D_DECL
  csWGLGETGENLOCKSAMPLERATEI3D wglGetGenlockSampleRateI3D;
  #endif

  #ifndef WGLGENLOCKSOURCEDELAYI3D_DECL
  #define WGLGENLOCKSOURCEDELAYI3D_DECL
  csWGLGENLOCKSOURCEDELAYI3D wglGenlockSourceDelayI3D;
  #endif

  #ifndef WGLGETGENLOCKSOURCEDELAYI3D_DECL
  #define WGLGETGENLOCKSOURCEDELAYI3D_DECL
  csWGLGETGENLOCKSOURCEDELAYI3D wglGetGenlockSourceDelayI3D;
  #endif

  #ifndef WGLQUERYGENLOCKMAXSOURCEDELAYI3D_DECL
  #define WGLQUERYGENLOCKMAXSOURCEDELAYI3D_DECL
  csWGLQUERYGENLOCKMAXSOURCEDELAYI3D wglQueryGenlockMaxSourceDelayI3D;
  #endif


  /** @} */
#endif // _WIN32

#ifdef _WIN32
  /**\name WGL_ARB_framebuffer_sRGB functions
   * For a description of what this ext does, see <a href="http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt">http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt</a>.
   * @{ */

  /** @} */
#endif // _WIN32


// end of functions
};

/// Struct containing all WGL extension test flags.
struct WGLExtensionFlags
{
public:
  /** Whether the <a href="http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt">WGL_ARB_extensions_string</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_ARB_extensions_string(). */
  bool CS_WGL_ARB_extensions_string;
  /** Whether the <a href="http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt">WGL_ARB_buffer_region</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_ARB_buffer_region(). */
  bool CS_WGL_ARB_buffer_region;
  /** Whether the <a href="http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt">WGL_I3D_image_buffer</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_I3D_image_buffer(). */
  bool CS_WGL_I3D_image_buffer;
  /** Whether the <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt">WGL_I3D_swap_frame_lock</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_I3D_swap_frame_lock(). */
  bool CS_WGL_I3D_swap_frame_lock;
  /** Whether the <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt">WGL_I3D_swap_frame_usage</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_I3D_swap_frame_usage(). */
  bool CS_WGL_I3D_swap_frame_usage;
  /** Whether the <a href="http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt">WGL_ARB_pixel_format</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_ARB_pixel_format(). */
  bool CS_WGL_ARB_pixel_format;
  /** Whether the <a href="http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt">WGL_ARB_make_current_read</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_ARB_make_current_read(). */
  bool CS_WGL_ARB_make_current_read;
  /** Whether the <a href="http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt">WGL_ARB_pbuffer</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_ARB_pbuffer(). */
  bool CS_WGL_ARB_pbuffer;
  /** Whether the <a href="http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt">WGL_EXT_swap_control</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_EXT_swap_control(). */
  bool CS_WGL_EXT_swap_control;
  /** Whether the <a href="http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt">WGL_ARB_render_texture</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_ARB_render_texture(). */
  bool CS_WGL_ARB_render_texture;
  /** Whether the <a href="http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt">WGL_EXT_extensions_string</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_EXT_extensions_string(). */
  bool CS_WGL_EXT_extensions_string;
  /** Whether the <a href="http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt">WGL_EXT_make_current_read</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_EXT_make_current_read(). */
  bool CS_WGL_EXT_make_current_read;
  /** Whether the <a href="http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt">WGL_EXT_pbuffer</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_EXT_pbuffer(). */
  bool CS_WGL_EXT_pbuffer;
  /** Whether the <a href="http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt">WGL_EXT_pixel_format</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_EXT_pixel_format(). */
  bool CS_WGL_EXT_pixel_format;
  /** Whether the <a href="http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt">WGL_I3D_digital_video_control</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_I3D_digital_video_control(). */
  bool CS_WGL_I3D_digital_video_control;
  /** Whether the <a href="http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt">WGL_I3D_gamma</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_I3D_gamma(). */
  bool CS_WGL_I3D_gamma;
  /** Whether the <a href="http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt">WGL_I3D_genlock</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_I3D_genlock(). */
  bool CS_WGL_I3D_genlock;
  /** Whether the <a href="http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt">WGL_ARB_framebuffer_sRGB</a> extension was found. 
   * Set by csGLExtensionManager::InitWGL_ARB_framebuffer_sRGB(). */
  bool CS_WGL_ARB_framebuffer_sRGB;

protected:
  bool tested_CS_WGL_ARB_extensions_string;
  bool tested_CS_WGL_ARB_buffer_region;
  bool tested_CS_WGL_I3D_image_buffer;
  bool tested_CS_WGL_I3D_swap_frame_lock;
  bool tested_CS_WGL_I3D_swap_frame_usage;
  bool tested_CS_WGL_ARB_pixel_format;
  bool tested_CS_WGL_ARB_make_current_read;
  bool tested_CS_WGL_ARB_pbuffer;
  bool tested_CS_WGL_EXT_swap_control;
  bool tested_CS_WGL_ARB_render_texture;
  bool tested_CS_WGL_EXT_extensions_string;
  bool tested_CS_WGL_EXT_make_current_read;
  bool tested_CS_WGL_EXT_pbuffer;
  bool tested_CS_WGL_EXT_pixel_format;
  bool tested_CS_WGL_I3D_digital_video_control;
  bool tested_CS_WGL_I3D_gamma;
  bool tested_CS_WGL_I3D_genlock;
  bool tested_CS_WGL_ARB_framebuffer_sRGB;

};

/**
 * WGL extensions manager. Checks for the presence of specific GL extensions
 * and fetches all function pointers if present.
 */
struct WGLExtensionManager : public WGLExtensionFunctions,
			      public WGLExtensionFlags
{
private:
  iObjectRegistry* object_reg;
  csConfigAccess config;
  iOpenGLInterface* gl;
  bool doVerbose;
  bool defaultUse;
  
  const char* extstrGL;
  const char* msgExtRetrieveFail;
  const char* msgExtFoundAndUsed;
  const char* msgExtFoundAndNotUsed;
  const char* msgExtInitFail;
  const char* msgExtNotFound;
  const char* msgDependencyNotFound;

#ifdef __WIN32__
  const char* extstrWGL;
  void SetupWGLextStr (HDC hDC)
  {
    if (extstrWGL != 0) return;
  
    if (!tested_CS_WGL_ARB_extensions_string) InitWGL_ARB_extensions_string (hDC);
    if (CS_WGL_ARB_extensions_string)
    {
      extstrWGL = wglGetExtensionsStringARB (hDC);
    }
    else
    {
      extstrWGL = extstrGL;
    }
  }
#endif

#ifdef CS_OPENGL_GLX
  const char* extstrGLX;
#ifdef CS_GLEXTMANAGER_USE_GLX
  void SetupGLXextStr (Display* glxDisplay, int glxScreen)
  {
    if (extstrGLX != 0) return;
  
    extstrGLX = glXQueryExtensionsString (glxDisplay, glxScreen);
  }
#endif
#endif

  void Report (const char* msg, ...)
  {
    if (!doVerbose)
      return;
    
    va_list arg;
    va_start (arg, msg);
    csReportV (object_reg, CS_REPORTER_SEVERITY_NOTIFY,
      "crystalspace.canvas.opengl.extmgr", msg, arg);
    va_end (arg);
  }

  /**
   * Check if the extension \a extToCheck is present in the GL/WGL/GLX
   * extensions list \a extensions. Takes care that no substrings are picked
   * up.
   */
  bool CheckExtension (const char* extensions, const char* extToCheck)
  {
    size_t extLen = strlen (extToCheck);
    do
    {
      const char* extStrPos = strstr (extensions, extToCheck);
      if (extStrPos == 0) return false;
      
      /* If no space is before and after the ext string it's a substring
       * of another ext */
      char endch;
      if (((extStrPos > extensions) && (*(extStrPos-1) != ' '))
        || (((endch = *(extStrPos + extLen)) != 0) && (endch != ' ')))
      {
        extensions = extStrPos + extLen;
        continue;
      }
      break;
    }
    while (true);
    return true;
  }
public:
  void Initialize (iObjectRegistry* object_reg, iOpenGLInterface* gli)
  {
    this->object_reg = object_reg;
    gl = gli;
    // Low priority so canvas/renderer cfgs may override the settings
    config.AddConfig (object_reg, "/config/glext.cfg", true,
      iConfigManager::ConfigPriorityPlugin - 1);

    csRef<iVerbosityManager> verbosemgr (csQueryRegistry<iVerbosityManager> (
      object_reg));
    doVerbose = verbosemgr->Enabled ("renderer");
  }
  
  void Open () 
  { 
    extstrGL = (const char*)glGetString (GL_EXTENSIONS);
    defaultUse = config->GetBool ("Video.OpenGL.UseExtension.ALL", true);
    if (!defaultUse)
      Report ("ALL extensions are disabled by default");
  }
  
  void Close () { }
public:
  void Reset ()
  {
    extstrGL = 0;
#ifdef __WIN32__
    extstrWGL = 0;
#endif
#ifdef CS_OPENGL_GLX
    extstrGLX = 0;
#endif

    memset ((WGLExtensionFunctions*)this, 0, 
      sizeof (WGLExtensionFunctions));
    memset ((WGLExtensionFlags*)this, 0, sizeof (WGLExtensionFlags));
  }
  
  WGLExtensionManager () : object_reg (0), gl (0), doVerbose (false),
    defaultUse (true)
  {
    msgExtRetrieveFail = "Failed to retrieve %s";
    msgExtFoundAndUsed = "%s Extension %s found and used.";
    msgExtFoundAndNotUsed = "%s Extension %s found, but not used.";
    msgExtInitFail = "%s Extension %s failed to initialize.";
    msgExtNotFound = "%s Extension %s not found.";
    msgDependencyNotFound = "%s Extension %s depends on %s which did "
      "not initialize.";
    
    Reset ();
  }
  
#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/ARB/wgl_extensions_string.txt">WGL_ARB_extensions_string</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_ARB_extensions_string. */
  void InitWGL_ARB_extensions_string (HDC hDC)
  {
    if (tested_CS_WGL_ARB_extensions_string) return;
    tested_CS_WGL_ARB_extensions_string = true;
    const char* ext = "WGL_ARB_extensions_string";
    char cfgkey[26 + 25 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_ARB_extensions_string = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_ARB_extensions_string;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglGetExtensionsStringARB, WGLGETEXTENSIONSSTRINGARB);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_ARB_extensions_string)
      CS_WGL_ARB_extensions_string &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/ARB/wgl_buffer_region.txt">WGL_ARB_buffer_region</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_ARB_buffer_region. */
  void InitWGL_ARB_buffer_region (HDC hDC)
  {
    if (tested_CS_WGL_ARB_buffer_region) return;
    tested_CS_WGL_ARB_buffer_region = true;
    const char* ext = "WGL_ARB_buffer_region";
    char cfgkey[26 + 21 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_ARB_buffer_region = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_ARB_buffer_region;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglCreateBufferRegionARB, WGLCREATEBUFFERREGIONARB);
      EXTMGR_FUNC_INIT(wglDeleteBufferRegionARB, WGLDELETEBUFFERREGIONARB);
      EXTMGR_FUNC_INIT(wglSaveBufferRegionARB, WGLSAVEBUFFERREGIONARB);
      EXTMGR_FUNC_INIT(wglRestoreBufferRegionARB, WGLRESTOREBUFFERREGIONARB);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_ARB_buffer_region)
      CS_WGL_ARB_buffer_region &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/I3D/wgl_image_buffer.txt">WGL_I3D_image_buffer</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_I3D_image_buffer. */
  void InitWGL_I3D_image_buffer (HDC hDC)
  {
    if (tested_CS_WGL_I3D_image_buffer) return;
    tested_CS_WGL_I3D_image_buffer = true;
    const char* ext = "WGL_I3D_image_buffer";
    char cfgkey[26 + 20 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_I3D_image_buffer = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_I3D_image_buffer;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglCreateImageBufferI3D, WGLCREATEIMAGEBUFFERI3D);
      EXTMGR_FUNC_INIT(wglDestroyImageBufferI3D, WGLDESTROYIMAGEBUFFERI3D);
      EXTMGR_FUNC_INIT(wglAssociateImageBufferEventsI3D, WGLASSOCIATEIMAGEBUFFEREVENTSI3D);
      EXTMGR_FUNC_INIT(wglReleaseImageBufferEventsI3D, WGLRELEASEIMAGEBUFFEREVENTSI3D);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_I3D_image_buffer)
      CS_WGL_I3D_image_buffer &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_lock.txt">WGL_I3D_swap_frame_lock</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_I3D_swap_frame_lock. */
  void InitWGL_I3D_swap_frame_lock (HDC hDC)
  {
    if (tested_CS_WGL_I3D_swap_frame_lock) return;
    tested_CS_WGL_I3D_swap_frame_lock = true;
    const char* ext = "WGL_I3D_swap_frame_lock";
    char cfgkey[26 + 23 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_I3D_swap_frame_lock = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_I3D_swap_frame_lock;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglEnableFrameLockI3D, WGLENABLEFRAMELOCKI3D);
      EXTMGR_FUNC_INIT(wglDisableFrameLockI3D, WGLDISABLEFRAMELOCKI3D);
      EXTMGR_FUNC_INIT(wglIsEnabledFrameLockI3D, WGLISENABLEDFRAMELOCKI3D);
      EXTMGR_FUNC_INIT(wglQueryFrameLockMasterI3D, WGLQUERYFRAMELOCKMASTERI3D);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_I3D_swap_frame_lock)
      CS_WGL_I3D_swap_frame_lock &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/I3D/wgl_swap_frame_usage.txt">WGL_I3D_swap_frame_usage</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_I3D_swap_frame_usage. */
  void InitWGL_I3D_swap_frame_usage (HDC hDC)
  {
    if (tested_CS_WGL_I3D_swap_frame_usage) return;
    tested_CS_WGL_I3D_swap_frame_usage = true;
    const char* ext = "WGL_I3D_swap_frame_usage";
    char cfgkey[26 + 24 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_I3D_swap_frame_usage = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_I3D_swap_frame_usage;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglGetFrameUsageI3D, WGLGETFRAMEUSAGEI3D);
      EXTMGR_FUNC_INIT(wglBeginFrameTrackingI3D, WGLBEGINFRAMETRACKINGI3D);
      EXTMGR_FUNC_INIT(wglEndFrameTrackingI3D, WGLENDFRAMETRACKINGI3D);
      EXTMGR_FUNC_INIT(wglQueryFrameTrackingI3D, WGLQUERYFRAMETRACKINGI3D);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_I3D_swap_frame_usage)
      CS_WGL_I3D_swap_frame_usage &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/ARB/wgl_pixel_format.txt">WGL_ARB_pixel_format</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_ARB_pixel_format. */
  void InitWGL_ARB_pixel_format (HDC hDC)
  {
    if (tested_CS_WGL_ARB_pixel_format) return;
    tested_CS_WGL_ARB_pixel_format = true;
    const char* ext = "WGL_ARB_pixel_format";
    char cfgkey[26 + 20 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_ARB_pixel_format = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_ARB_pixel_format;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglGetPixelFormatAttribivARB, WGLGETPIXELFORMATATTRIBIVARB);
      EXTMGR_FUNC_INIT(wglGetPixelFormatAttribfvARB, WGLGETPIXELFORMATATTRIBFVARB);
      EXTMGR_FUNC_INIT(wglChoosePixelFormatARB, WGLCHOOSEPIXELFORMATARB);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_ARB_pixel_format)
      CS_WGL_ARB_pixel_format &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/ARB/wgl_make_current_read.txt">WGL_ARB_make_current_read</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_ARB_make_current_read. */
  void InitWGL_ARB_make_current_read (HDC hDC)
  {
    if (tested_CS_WGL_ARB_make_current_read) return;
    tested_CS_WGL_ARB_make_current_read = true;
    const char* ext = "WGL_ARB_make_current_read";
    char cfgkey[26 + 25 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_ARB_make_current_read = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_ARB_make_current_read;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglMakeContextCurrentARB, WGLMAKECONTEXTCURRENTARB);
      EXTMGR_FUNC_INIT(wglGetCurrentReadDCARB, WGLGETCURRENTREADDCARB);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_ARB_make_current_read)
      CS_WGL_ARB_make_current_read &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/ARB/wgl_pbuffer.txt">WGL_ARB_pbuffer</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_ARB_pbuffer. */
  void InitWGL_ARB_pbuffer (HDC hDC)
  {
    if (tested_CS_WGL_ARB_pbuffer) return;
    tested_CS_WGL_ARB_pbuffer = true;
    const char* ext = "WGL_ARB_pbuffer";
    char cfgkey[26 + 15 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_ARB_pbuffer = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_ARB_pbuffer;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglCreatePbufferARB, WGLCREATEPBUFFERARB);
      EXTMGR_FUNC_INIT(wglGetPbufferDCARB, WGLGETPBUFFERDCARB);
      EXTMGR_FUNC_INIT(wglReleasePbufferDCARB, WGLRELEASEPBUFFERDCARB);
      EXTMGR_FUNC_INIT(wglDestroyPbufferARB, WGLDESTROYPBUFFERARB);
      EXTMGR_FUNC_INIT(wglQueryPbufferARB, WGLQUERYPBUFFERARB);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_ARB_pbuffer)
      CS_WGL_ARB_pbuffer &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/EXT/wgl_swap_control.txt">WGL_EXT_swap_control</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_EXT_swap_control. */
  void InitWGL_EXT_swap_control (HDC hDC)
  {
    if (tested_CS_WGL_EXT_swap_control) return;
    tested_CS_WGL_EXT_swap_control = true;
    const char* ext = "WGL_EXT_swap_control";
    char cfgkey[26 + 20 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_EXT_swap_control = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_EXT_swap_control;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglSwapIntervalEXT, WGLSWAPINTERVALEXT);
      EXTMGR_FUNC_INIT(wglGetSwapIntervalEXT, WGLGETSWAPINTERVALEXT);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_EXT_swap_control)
      CS_WGL_EXT_swap_control &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/ARB/wgl_render_texture.txt">WGL_ARB_render_texture</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_ARB_render_texture. */
  void InitWGL_ARB_render_texture (HDC hDC)
  {
    if (tested_CS_WGL_ARB_render_texture) return;
    tested_CS_WGL_ARB_render_texture = true;
    const char* ext = "WGL_ARB_render_texture";
    char cfgkey[26 + 22 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_ARB_render_texture = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_ARB_render_texture;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglBindTexImageARB, WGLBINDTEXIMAGEARB);
      EXTMGR_FUNC_INIT(wglReleaseTexImageARB, WGLRELEASETEXIMAGEARB);
      EXTMGR_FUNC_INIT(wglSetPbufferAttribARB, WGLSETPBUFFERATTRIBARB);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_ARB_render_texture)
      CS_WGL_ARB_render_texture &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/EXT/wgl_extensions_string.txt">WGL_EXT_extensions_string</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_EXT_extensions_string. */
  void InitWGL_EXT_extensions_string (HDC hDC)
  {
    if (tested_CS_WGL_EXT_extensions_string) return;
    tested_CS_WGL_EXT_extensions_string = true;
    const char* ext = "WGL_EXT_extensions_string";
    char cfgkey[26 + 25 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_EXT_extensions_string = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_EXT_extensions_string;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglGetExtensionsStringEXT, WGLGETEXTENSIONSSTRINGEXT);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_EXT_extensions_string)
      CS_WGL_EXT_extensions_string &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/EXT/wgl_make_current_read.txt">WGL_EXT_make_current_read</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_EXT_make_current_read. */
  void InitWGL_EXT_make_current_read (HDC hDC)
  {
    if (tested_CS_WGL_EXT_make_current_read) return;
    tested_CS_WGL_EXT_make_current_read = true;
    const char* ext = "WGL_EXT_make_current_read";
    char cfgkey[26 + 25 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_EXT_make_current_read = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_EXT_make_current_read;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglMakeContextCurrentEXT, WGLMAKECONTEXTCURRENTEXT);
      EXTMGR_FUNC_INIT(wglGetCurrentReadDCEXT, WGLGETCURRENTREADDCEXT);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_EXT_make_current_read)
      CS_WGL_EXT_make_current_read &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/EXT/wgl_pbuffer.txt">WGL_EXT_pbuffer</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_EXT_pbuffer. */
  void InitWGL_EXT_pbuffer (HDC hDC)
  {
    if (tested_CS_WGL_EXT_pbuffer) return;
    tested_CS_WGL_EXT_pbuffer = true;
    const char* ext = "WGL_EXT_pbuffer";
    char cfgkey[26 + 15 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_EXT_pbuffer = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_EXT_pbuffer;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglCreatePbufferEXT, WGLCREATEPBUFFEREXT);
      EXTMGR_FUNC_INIT(wglGetPbufferDCEXT, WGLGETPBUFFERDCEXT);
      EXTMGR_FUNC_INIT(wglReleasePbufferDCEXT, WGLRELEASEPBUFFERDCEXT);
      EXTMGR_FUNC_INIT(wglDestroyPbufferEXT, WGLDESTROYPBUFFEREXT);
      EXTMGR_FUNC_INIT(wglQueryPbufferEXT, WGLQUERYPBUFFEREXT);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_EXT_pbuffer)
      CS_WGL_EXT_pbuffer &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/EXT/wgl_pixel_format.txt">WGL_EXT_pixel_format</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_EXT_pixel_format. */
  void InitWGL_EXT_pixel_format (HDC hDC)
  {
    if (tested_CS_WGL_EXT_pixel_format) return;
    tested_CS_WGL_EXT_pixel_format = true;
    const char* ext = "WGL_EXT_pixel_format";
    char cfgkey[26 + 20 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_EXT_pixel_format = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_EXT_pixel_format;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglGetPixelFormatAttribivEXT, WGLGETPIXELFORMATATTRIBIVEXT);
      EXTMGR_FUNC_INIT(wglGetPixelFormatAttribfvEXT, WGLGETPIXELFORMATATTRIBFVEXT);
      EXTMGR_FUNC_INIT(wglChoosePixelFormatEXT, WGLCHOOSEPIXELFORMATEXT);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_EXT_pixel_format)
      CS_WGL_EXT_pixel_format &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/I3D/wgl_digital_video_control.txt">WGL_I3D_digital_video_control</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_I3D_digital_video_control. */
  void InitWGL_I3D_digital_video_control (HDC hDC)
  {
    if (tested_CS_WGL_I3D_digital_video_control) return;
    tested_CS_WGL_I3D_digital_video_control = true;
    const char* ext = "WGL_I3D_digital_video_control";
    char cfgkey[26 + 29 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_I3D_digital_video_control = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_I3D_digital_video_control;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglGetDigitalVideoParametersI3D, WGLGETDIGITALVIDEOPARAMETERSI3D);
      EXTMGR_FUNC_INIT(wglSetDigitalVideoParametersI3D, WGLSETDIGITALVIDEOPARAMETERSI3D);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_I3D_digital_video_control)
      CS_WGL_I3D_digital_video_control &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/I3D/wgl_gamma.txt">WGL_I3D_gamma</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_I3D_gamma. */
  void InitWGL_I3D_gamma (HDC hDC)
  {
    if (tested_CS_WGL_I3D_gamma) return;
    tested_CS_WGL_I3D_gamma = true;
    const char* ext = "WGL_I3D_gamma";
    char cfgkey[26 + 13 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_I3D_gamma = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_I3D_gamma;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglGetGammaTableParametersI3D, WGLGETGAMMATABLEPARAMETERSI3D);
      EXTMGR_FUNC_INIT(wglSetGammaTableParametersI3D, WGLSETGAMMATABLEPARAMETERSI3D);
      EXTMGR_FUNC_INIT(wglGetGammaTableI3D, WGLGETGAMMATABLEI3D);
      EXTMGR_FUNC_INIT(wglSetGammaTableI3D, WGLSETGAMMATABLEI3D);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_I3D_gamma)
      CS_WGL_I3D_gamma &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/I3D/wgl_genlock.txt">WGL_I3D_genlock</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_I3D_genlock. */
  void InitWGL_I3D_genlock (HDC hDC)
  {
    if (tested_CS_WGL_I3D_genlock) return;
    tested_CS_WGL_I3D_genlock = true;
    const char* ext = "WGL_I3D_genlock";
    char cfgkey[26 + 15 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_I3D_genlock = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_I3D_genlock;
    allclear = true;
    if (init)
    {
      EXTMGR_FUNC_INIT(wglEnableGenlockI3D, WGLENABLEGENLOCKI3D);
      EXTMGR_FUNC_INIT(wglDisableGenlockI3D, WGLDISABLEGENLOCKI3D);
      EXTMGR_FUNC_INIT(wglIsEnabledGenlockI3D, WGLISENABLEDGENLOCKI3D);
      EXTMGR_FUNC_INIT(wglGenlockSourceI3D, WGLGENLOCKSOURCEI3D);
      EXTMGR_FUNC_INIT(wglGetGenlockSourceI3D, WGLGETGENLOCKSOURCEI3D);
      EXTMGR_FUNC_INIT(wglGenlockSourceEdgeI3D, WGLGENLOCKSOURCEEDGEI3D);
      EXTMGR_FUNC_INIT(wglGetGenlockSourceEdgeI3D, WGLGETGENLOCKSOURCEEDGEI3D);
      EXTMGR_FUNC_INIT(wglGenlockSampleRateI3D, WGLGENLOCKSAMPLERATEI3D);
      EXTMGR_FUNC_INIT(wglGetGenlockSampleRateI3D, WGLGETGENLOCKSAMPLERATEI3D);
      EXTMGR_FUNC_INIT(wglGenlockSourceDelayI3D, WGLGENLOCKSOURCEDELAYI3D);
      EXTMGR_FUNC_INIT(wglGetGenlockSourceDelayI3D, WGLGETGENLOCKSOURCEDELAYI3D);
      EXTMGR_FUNC_INIT(wglQueryGenlockMaxSourceDelayI3D, WGLQUERYGENLOCKMAXSOURCEDELAYI3D);

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_I3D_genlock)
      CS_WGL_I3D_genlock &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif

#ifdef _WIN32
  /** Initialize <a href="http://www.opengl.org/registry/specs/ARB/wgl_framebuffer_sRGB.txt">WGL_ARB_framebuffer_sRGB</a> extension. 
   * Check presence with csGLExtensionFlags::CS_WGL_ARB_framebuffer_sRGB. */
  void InitWGL_ARB_framebuffer_sRGB (HDC hDC)
  {
    if (tested_CS_WGL_ARB_framebuffer_sRGB) return;
    tested_CS_WGL_ARB_framebuffer_sRGB = true;
    const char* ext = "WGL_ARB_framebuffer_sRGB";
    char cfgkey[26 + 24 + 1];
    sprintf (cfgkey, "Video.OpenGL.UseExtension.%s", ext);
    
    (void)hDC;      // avoid `unused variable' warning.
    SetupWGLextStr (hDC);
    if (!extstrWGL) return;
    CS_WGL_ARB_framebuffer_sRGB = CheckExtension (extstrWGL, ext);

    bool allclear, funcTest;
    (void)funcTest; // avoid `unused variable' warning.
    bool init = CS_WGL_ARB_framebuffer_sRGB;
    allclear = true;
    if (init)
    {

      EXTMGR_REPORT_INIT_RESULT("WGL", WGL_ARB_framebuffer_sRGB)
      CS_WGL_ARB_framebuffer_sRGB &= allclear;
    }
    else
    {
      Report (msgExtNotFound, "WGL", CS::Quote::Single (ext));
    }
  }
#endif


};

#undef REPORT_MISSING_ENTRIES

#undef EXTMGR_FUNC_INIT
#undef EXTMGR_REPORT_INIT_RESULT

} // namespace CS



#endif // __CS_WGLEXTENSIONMANAGER_H__

