#==============================================================================
# jobber-svn-howto.cfg
#
# Copyright (C) 2000-2012 by Eric Sunshine <sunshine@sunshineco.com>
#
# This HOWTO presents how a local fake SVN repository can be created and used
# in order to test new or changed features of the jobber-svn.pl script, or to
# test new jobber tasks. This HOWTO is also a configuration file that can be
# used for these tests.  Reasons why creation of a local fake SVN repository is
# beneficial include:
#
#   - Sandboxing: Changes you commit to the repository to test jobber how
#     jobber reacts, and changes jobber makes during its run are kept local;
#     they do not pollute or corrupt the real SVN repository. This is
#     especially important if the changes are experimental or being developed
#     piecewise.
#   - Speed: Testing is faster since jobber performs only local file://
#     checkouts and commits rather slow network-based operations.
#
# The local SVN repository that will be created in this example is using a copy
# of the Crystal Space repository, and suppose that you already checked it out
# in a directory '/home/username/CS' on your system. The local copy will be
# created in the repository '/home/username/CS.localrepo'. A third directory
# will be used in order to place the documentation files that are generated by
# the jobber tasks, this directory is '/home/username/CS.docs'.
#
# In order to create the local copy of the Crystal Space SVN repository, you
# can do the following:
#
#   cd /home/username/CS
#   jam distclean
#   cd ..
#   svnadmin create CS.localrepo
#   svn import -m 'Initial import' CS file:///home/username/CS.localrepo
#
# It is not actually necessary to make a manual checkout from this local
# repository just to test jobber since jobber itself performs a checkout into
# '/tmp' as part of its normal function. A manual checkout, however, can be
# handy if you want to commit changes between each jobber test-run to see how
# jobber deals with those changes. If a local checkout of your local repository
# is desired, do so as detailed earlier (after invoking the above commands):
#
#   svn checkout file:///home/username/CS.localrepo CS.temp
#   cd CS.temp
#   # make & commit changes and then run jobber to see how it reacts
#
# In order to test the modifications you made to the jobber-svn.pl script, you
# can use the configuration settings that are in the file that you are
# currently reading. This file is a copy of the file 'jobber-svn.cfg', modified
# in order to suit to the local fake repository, and with most jobber tasks
# commented out since they are time-consuming and are not always relevant for
# the specific features you may be working on.
#
# Before using this file, you would first need to edit and modify the paths to
# the aforementioned directories in order to suit your needs. You may also need
# to edit the list of tasks to be performed in order to be able to test the
# functionalities you are working on.
#
# With this custom .cfg file, you can invoke jobber like this:
#
#   ./jobber-svn.pl --config ./jobber-svn-howto.cfg --set svnuser=username
#
# The 'svnuser' argument is not actually meaningful in this case since the local
# repository is accessed via file:// and thus does not require authentication,
# but our jobber configuration expects 'svnuser' on the command-line, so it's
# present merely to pacify the script.
#
# One final note: When you commit changes to jobber or its configuration file,
# you need to check them out manually on crystalspace3d.org so that those
# changes are actually employed when jobber runs on that machine. The changes
# do not get checked out automatically. To do so, sign in as
# crystal@crystalspace3d.org (once we set you up with SSH) and then invoke:
#
#   cd /home/username/CS/bin
#   svn update
#
#==============================================================================

# Minimum jobber-svn.pl version expected by this configuration.
jobber_require(35);


#==============================================================================
# *** External Client Configuration Section ***
#
# Use this section to configure tools or environment which might impact
# jobber-svn.pl indirectly. For instance, you might augment the PATH
# environment variable or set the SVN_RSH environment variable. At the
# command-line, jobber-svn.pl allows users to define arbitrary run-time
# properties via the --set option. These properties can be accessed by
# consulting the %jobber_properties hash. For instance, the command-line
# argument "--set foo=bar" sets "bar" as the value of $jobber_properties{foo}.
#==============================================================================

#------------------------------------------------------------------------------
# We prefer that the SVN username is specified on the command-line via
# "--set svnuser=someone".
#------------------------------------------------------------------------------
exists $jobber_properties{'svnuser'} or
  die "ERROR: you must set the SVN username via '--set svnuser=someone'\n";
$jobber_svn_user = $jobber_properties{'svnuser'};

#------------------------------------------------------------------------------
# The parent location where browseable and downloadable Crystal Space
# documentation is placed. Used in the composition of $jobber_browseable_dir
# and $jobber_package_dir.
#------------------------------------------------------------------------------
my $cs_base_doc_dir = '/home/username/CS.docs';

#------------------------------------------------------------------------------
# Command to configure project after checkout but before the jobber tasks are
# run.
#------------------------------------------------------------------------------
my $configure = "./configure --quiet --with-perl --disable-make-emulation";

#------------------------------------------------------------------------------
# Ensure that various tools can be found.
#------------------------------------------------------------------------------
$ENV{'PATH'} .= ':/usr/local/bin';


#==============================================================================
# *** Jobber Configuration Section ***
#==============================================================================

#------------------------------------------------------------------------------
# $jobber_project_root [required]
#     Root directory of the project.  This is the top-level directory created
#     as a side-effect of retrieving the files from SVN. No default.
#------------------------------------------------------------------------------
$jobber_project_root = 'CS.localrepo';

#------------------------------------------------------------------------------
# $jobber_svn_base_url [required]
#     The URL used as base url when invoking SVN commands.  The specified value
#     must allow "write" access to the repository if files are to be committed
#     back to the repository. No default.
#------------------------------------------------------------------------------
$jobber_svn_base_url = "file:///home/username/CS.localrepo";

#------------------------------------------------------------------------------
# $jobber_svn_mirror_url [optional]
#     The URL of a read-only local repository mirror. If specified, is used
#     only as an optimization to speed up the initial checkout.  All other SVN
#     interaction is via $jobber_svn_base_url.  No default.
#------------------------------------------------------------------------------
#$jobber_svn_mirror_url = "file:///home/username/CS.localrepo";

#------------------------------------------------------------------------------
# $jobber_svn_flags [optional]
#     Additional flags to pass to each of the `svn' command invocations. 
#     No default.
#------------------------------------------------------------------------------
$jobber_svn_flags = '-q';

#------------------------------------------------------------------------------
# $jobber_browseable_dir [conditional]
#     Absolute path of directory into which generated documentation should be
#     copied for online browsing. This setting is required if any tasks publish
#     documentation, otherwise it is optional. No default.
#------------------------------------------------------------------------------
$jobber_browseable_dir = "$cs_base_doc_dir/online";

#------------------------------------------------------------------------------
# $jobber_package_dir [conditional]
#     Absolute path of directory into which archives of generated documentation
#     are placed to make them available for download in package form.  This
#     setting is required if any tasks publish documentation, otherwise it is
#     optional.  No default.
#------------------------------------------------------------------------------
$jobber_package_dir = "$cs_base_doc_dir/download";

#------------------------------------------------------------------------------
# $jobber_public_group [optional]
#     Group name to which to assign ownership of all directories which will
#     exist after script's termination (such as the "browseable" directory).
#     May be 'undef' if no special group should be assigned. Default: undef
#------------------------------------------------------------------------------
#$jobber_public_group = 'crystal';

#------------------------------------------------------------------------------
# $jobber_public_mode [optional]
#     Mode to which to assign all directories which will exist after script's
#     termination (such as the "browseable" directory).  Use this in
#     conjunction with $jobber_public_group to make directories group-writable,
#     for example. For this purpose, set it to the octal value 0775.  May be
#     'undef' if no special mode should be assigned. Default: undef
#------------------------------------------------------------------------------
$jobber_public_mode = 0775;

#------------------------------------------------------------------------------
# $jobber_temp_dir [optional]
#     Absolute path of temporary working directory where all processing should
#     occur.  The script cleans up after itself, so nothing will be left in
#     this directory after the script terminates. Default: "/tmp"
#------------------------------------------------------------------------------
#$jobber_temp_dir = '/tmp';

#------------------------------------------------------------------------------
# $jobber_state_file [optional]
#     Absolute path of file in which to save state between invocations of this
#     script. This file will be created the first time the script is invoked.
#     Saved state is consulted to determine whether changes have been committed
#     to the repository since the previous invocation. If no commits are
#     detected, then all processing is skipped, otherwise the project is
#     checked out and @jobber_tasks invoked as usual.  If value is 'undef',
#     then processing occurs unconditionally.  Default: undef
#------------------------------------------------------------------------------
$jobber_state_file = "/home/username/jobber-svn-howto.state";

#------------------------------------------------------------------------------
# @jobber_tasks [required]
#     A list of tasks to perform on the checked-out source tree.  Typical tasks
#     are those which repair outdated files, and those which generate
#     human-consumable documentation from various sources.  Files generated or
#     repaired by the tasks can then optionally be committed back to the SVN
#     repository and/or published for browsing or download. Each task's
#     "command" is invoked in the top-level directory of the project tree
#     ($jobber_project_root).
#
#     Many projects need to be "configured" before various tasks can be
#     performed (often by running some sort of configuration script). If this
#     true for your project, then your very first task should invoke the
#     command(s) which configure the project.
#
#     Each task record is a dictionary which contains the following keys:
#
#     name [required]
#         Human-readable name for this task; used in status messages.
#     action [required]
#         Human-readable verb which describes the action performed by this
#         target. It is combined with the value of the "name" key to construct
#         an informative diagnositc message.
#     command [optional]
#         The actual command which is invoked to perform this task. It may
#         repair outdated files or generate a set of files (such as HTML
#         documentation).
#     newdirs [optional]
#         Refers to an array of directories into which files are generated by
#         this task.  This key should only be present if new files are created
#         by this target.
#     olddirs [optional]
#         Refers to an array of existing directories where files generated by
#         this task are stored in the SVN repository.  If the "newdirs" key is
#         omitted, then the directories mentioned by "olddirs" are those
#         containing files modified in-place by the command, rather than
#         generated anew in a different location.  If both "newdirs" and
#         "olddirs" are present, then entries in "newdirs" must correspond to
#         entries in "olddirs", and each directory in "newdirs" must exactly
#         mirror the layout and hierarchy of each corresponding directory in
#         "olddirs".
#     log [optional]
#         Log message to use for SVN transactions involving this target.  The
#         keys "olddirs" and "log" should be present only if the files
#         generated by this target should be committed back into the SVN
#         repository.
#     export [optional]
#         Refers to a sub-dictionary which describes how to export the target.
#         This key should be present only if the files generated by the task
#         should be published for browsing and downloading.  If this key is
#         used, then one or both of "olddirs" and "newdirs" must also be
#         present.  The sub-dictionary referenced by the "export" entry may
#         contain the following keys:
#
#         dir [required]
#             Directory name into which files for this task are published.
#             Online browseable files are placed into
#             $jobber_browseable_dir/$dir, and downloadable packages are placed
#             into $jobber_package_dir/$dir.
#         name [required]
#             Base package name used when generating downloadable packages via
#             @jobber_archivers (see below).  When published, the base package
#             name is combined with the archiver's file extension and placed
#             within the appropriate subdirectory of $jobber_package_dir.
#             *NOTE* Presently, the implementation is limited to only exporting
#             the first directory referenced by the sibling "newdirs" key.
#         appear [optional]
#             Controls the appearance of the directory in the generated
#             package.  For example, when packaging files from a temporary
#             build directory named "./out/docs/html/manual", it might be
#             preferable if it actually appeared as "CS/docs/html/manual" in
#             the downloadable package.
#         browseable-postprocess [optional]
#             Allows specification of a post-processing step for documentation
#             which is being made available for online browsing.  The value of
#             this key is any valid shell command.  It is invoked after the
#             files have been copied to the browseable directory. If the
#             meta-token ~T appears in the command, then the path of the
#             directory into which the files have been published is
#             interpolated into the command in its place.
#------------------------------------------------------------------------------
@jobber_tasks =
    ({ 'name'    => 'build environment',
       'action'  => 'Configuring',
       'command' => $configure },
     { 'name'    => 'master header files',
       'action'  => 'Repairing',
       'command' => 'jam freezemasterheaders',
       'olddirs' => ['include'],
       'log'     => 'Automated master header file repair.' },
#     { 'name'    => 'Visual-C++ project files',
#       'action'  => 'Repairing',
#       'command' => 'jam -sMSVCGEN_SILENT=yes msvcgen',
#       'newdirs' => ['out/mk/msvc', 'out/mk/msvc8', 'out/mk/msvc9', 'out/mk/msv#c10'],
#       'olddirs' => ['mk/msvc', 'mk/msvc8', 'mk/msvc9', 'mk/msvc10'],
#       'log'     => 'Automated Visual-C++ project file repair.' },
     { 'name'    => 'Texinfo files',
       'action'  => 'Repairing @node and @menu directives in',
       'command' => 'jam repairdoc',
       'olddirs' => ['docs/texinfo'],
       'log'     => 'Automated Texinfo @node and @menu repair.' },
#     { 'name'    => 'Swig Python files',
#       'action'  => 'Repairing',
#       'command' => 'jam pythonfreeze',
#       'olddirs' => ['plugins/cscript', 'scripts/python/frozen/cspace'],
#       'log'     => 'Automated Swig Python file repair.' },
#     { 'name'    => 'Swig Perl5 files',
#       'action'  => 'Repairing',
#       'command' => 'jam perl5freeze',
#       'olddirs' => ['scripts/perl5'],
#       'log'     => 'Automated Swig Perl5 file repair.' },
#     { 'name'    => 'User\'s Manual',
#       'action'  => 'Generating',
#       'command' => 'jam manualhtml',
#       'newdirs' => ['out/docs/html/manual'],
#       'olddirs' => ['docs/html/manual'],
#       'log'     => 'Automated Texinfo to HTML conversion.',
#       'export'  =>
#	   { 'dir'    => 'manual',
# 	     'name'   => 'csmanual-html',
#	     'appear' => "$jobber_project_root/docs/html/manual",
#	     'browseable-postprocess' =>
#	         'sh docs/support/prepare_online_publish.sh ~T' }},
     { 'name'    => 'csver.h',
       'action'  => 'Updating',
       'command' => 'bin/rcsrev update_header',
       'olddirs' => ['include'],
       'log'     => 'Automated csver.h regeneration.' },
#     { 'name'    => 'Public API Reference',
#       'action'  => 'Generating',
#       'command' => 'jam apihtml && rm -f out/docs/html/api/*.m??',
#       'newdirs' => ['out/docs/html/api'],
##      'olddirs' => ['docs/html/api'], # No longer stored in SVN repository.
#       'log'     => 'Automated API reference generation.',
#       'export'  =>
#	   { 'dir'    => 'api',
#	     'name'   => 'csapi-html',
#	     'appear' => "$jobber_project_root/docs/html/api",
# 	     'browseable-postprocess' =>
#	         'sh docs/support/prepare_online_publish.sh ~T' }},
#     { 'name'    => 'Public API .tag file',
#       'action'  => 'Generating',
#       'command' => 'jam apitags',
#       'newdirs' => ['out/docs/doxytag'],
#       'log'     => 'API reference .tag file generation.',
#       'export'  =>
#	   { 'dir'    => 'tag',
#	     'name'   => 'csapi-tag',
#	     'appear' => "$jobber_project_root/docs/doxytag"}},
#      { 'name'    => 'Developer API Reference',
#        'action'  => 'Generating',
#        'command' => 'jam apidevhtml && rm -f out/docs/html/apidev/*.m??',
#        'newdirs' => ['out/docs/html/apidev'],
#        'export'  =>
# 	   { 'dir'    => 'apidev',
# 	     'name'   => 'csapidev-html',
# 	     'appear' => "$jobber_project_root/docs/html/apidev",
# 	     'browseable-postprocess' =>
#	         'sh docs/support/prepare_online_publish.sh ~T' }}
     );

#------------------------------------------------------------------------------
# @jobber_archivers [optional]
#     A list of archiver records.  An archiver is used to generate a package
#     from an input directory.  Each entry in this list is a dictionary which
#     contains the following keys:
#
#     name [required]
#         Specifies the archiver's printable name.
#     extension [required]
#         File extension for the generated archive file.
#     command [required]
#         Command template which describes how to generate the given archive.
#         The template may contain the meta-token ~S and ~D.  The name of the
#         source directory is interpolated into the command in place of ~S, and
#         the destination package name is interpolated in place of ~D.
#
#     As a convenience, jobber-svn.pl defines several pre-fabricated archiver
#     dictionaries:
#
#     $ARCHIVER_BZIP2
#         Archives with 'tar' and compresses with 'bzip2'. Extension: .tar.bz2
#     $ARCHIVER_GZIP
#         Archives with 'tar' and compresses with 'gzip'. Extension: .tgz
#     $ARCHIVER_ZIP
#         Archives and compresses with 'zip'. Extension: .zip
#     $ARCHIVER_LZMA
#         Archives with 'tar' and compresses with 'lzma'. Extension: .tar.lzma
#
#     Default: ($ARCHIVER_BZIP2, $ARCHIVER_GZIP, $ARCHIVER_ZIP, $ARCHIVER_LZMA)
#------------------------------------------------------------------------------
# @jobber_archivers = ($ARCHIVER_BZIP2, $ARCHIVER_GZIP, $ARCHIVER_ZIP, $ARCHIVER_LZMA);
