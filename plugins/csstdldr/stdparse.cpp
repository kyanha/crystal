
/*  A Bison parser, made from plugins/csstdldr/stdparse.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	KW_ACTION	258
#define	KW_ACTIVATE	259
#define	KW_ADD	260
#define	KW_ALPHA	261
#define	KW_ATTENUATION	262
#define	KW_BEZIER	263
#define	KW_CAMERA	264
#define	KW_CENTER	265
#define	KW_CIRCLE	266
#define	KW_CLIP	267
#define	KW_COLLECTION	268
#define	KW_COLOR	269
#define	KW_COLORS	270
#define	KW_CONVEX	271
#define	KW_COPY	272
#define	KW_COSFACT	273
#define	KW_CURVECENTER	274
#define	KW_CURVECONTROL	275
#define	KW_CURVESCALE	276
#define	KW_DETAIL	277
#define	KW_DITHER	278
#define	KW_DYNAMIC	279
#define	KW_F	280
#define	KW_FILE	281
#define	KW_FIRST	282
#define	KW_FIRST_LEN	283
#define	KW_FLATCOL	284
#define	KW_FOG	285
#define	KW_FOR_2D	286
#define	KW_FOR_3D	287
#define	KW_FORWARD	288
#define	KW_FRAME	289
#define	KW_GOURAUD	290
#define	KW_HALO	291
#define	KW_HEIGHTMAP	292
#define	KW_IDENTITY	293
#define	KW_KEY	294
#define	KW_KEYCOLOR	295
#define	KW_LEN	296
#define	KW_LIBRARY	297
#define	KW_LIGHT	298
#define	KW_LIGHTING	299
#define	KW_LIMB	300
#define	KW_MATRIX	301
#define	KW_MERGE_NORMALS	302
#define	KW_MERGE_TEXELS	303
#define	KW_MERGE_VERTICES	304
#define	KW_MIPMAP	305
#define	KW_MIRROR	306
#define	KW_MIXMODE	307
#define	KW_MOVE	308
#define	KW_MOVEABLE	309
#define	KW_MULTIPLY	310
#define	KW_MULTIPLY2	311
#define	KW_NODE	312
#define	KW_ORIG	313
#define	KW_PLANE	314
#define	KW_POLYGON	315
#define	KW_PORTAL	316
#define	KW_POSITION	317
#define	KW_RADIUS	318
#define	KW_ROT	319
#define	KW_ROT_X	320
#define	KW_ROT_Y	321
#define	KW_ROT_Z	322
#define	KW_SCALE	323
#define	KW_SCALE_X	324
#define	KW_SCALE_Y	325
#define	KW_SCALE_Z	326
#define	KW_SCRIPT	327
#define	KW_SECOND	328
#define	KW_SECOND_LEN	329
#define	KW_SECTOR	330
#define	KW_SKELETON	331
#define	KW_SKYDOME	332
#define	KW_SOUND	333
#define	KW_SOUNDS	334
#define	KW_SPRITE	335
#define	KW_SPRITE2D	336
#define	KW_START	337
#define	KW_STATBSP	338
#define	KW_STATIC	339
#define	KW_TEMPLATE	340
#define	KW_TERRAIN	341
#define	KW_TEX	342
#define	KW_TEXLEN	343
#define	KW_TEXNR	344
#define	KW_TEXTURE	345
#define	KW_TEXTURES	346
#define	KW_TEXTURE_LIGHTING	347
#define	KW_TEXTURE_MIPMAP	348
#define	KW_TEXTURE_SCALE	349
#define	KW_TEX_SET	350
#define	KW_TEX_SET_SELECT	351
#define	KW_THING	352
#define	KW_TRANSFORM	353
#define	KW_TRANSPARENT	354
#define	KW_TRIANGLE	355
#define	KW_TRIGGER	356
#define	KW_UPWARD	357
#define	KW_UV	358
#define	KW_UVA	359
#define	KW_UVEC	360
#define	KW_UV_SHIFT	361
#define	KW_V	362
#define	KW_VERTEX	363
#define	KW_VERTICES	364
#define	KW_VVEC	365
#define	KW_W	366
#define	KW_WARP	367
#define	KW_WORLD	368
#define	KW_yes	369
#define	KW_no	370
#define	KW_none	371
#define	KW_linear	372
#define	KW_inverse	373
#define	KW_realistic	374
#define	PARSER_VERSION	375
#define	STRING	376
#define	NUMBER	377

#line 20 "plugins/csstdldr/stdparse.y"
 /* Startup C++ code */

#include "sysdef.h"
#include "stdldr.h"
#include "csutil/cscolor.h"
#include "csgeom/math2d.h"
#include "csgeom/math3d.h"

#include "iworld.h"
#include "itxtmgr.h"
#include "isector.h"
#include "ipolyset.h"
#include "ipolygon.h"

/* Define this to debug parser */
//#define YYDEBUG	1

/* yyparse is a member function */
#define yyparse csStandardLoader::yyparse

/* Provide detailed info about parse errors */
#define YYERROR_VERBOSE	1
/* Avoid some "signed vs unsigned comparison" warnings */
#define sizeof	(int)sizeof

// Macros for accessing yylval as different data types
#define CSCOLOR(x)	(*(csColor *)&x)
#define CSVECTOR2(x)	(*(csVector2 *)&x)
#define CSVECTOR3(x)	(*(csVector3 *)&x)

// More shortcuts
#define TEX		storage.tex
#define CAMERA		storage.camera
#define PLANE		storage.plane
#define SECTOR		storage.sector

#define ABORTMSG							\
  { yyerror ("loading error, aborting"); YYABORT; }

#define YYERROR_EXTENDED(msg)						\
  if (yychar == STRING)							\
  {									\
    msg = (char *) realloc(msg, size += 14 + strlen (yylval.string));	\
    sprintf (strchr (msg, 0), " (value = `%s')", yylval.string);	\
  }									\
  else if (yychar == NUMBER)						\
  {									\
    msg = (char *) realloc(msg, size += 14 + 20);			\
    sprintf (strchr (msg, 0), " (value = `%g')", yylval.fval);		\
  }


#line 88 "plugins/csstdldr/stdparse.y"
typedef union
{
  // Just a number
  float fval;
  // A integer number
  int ival;
  // A boolean value
  bool bval;
  // A string value
  char *string;
  // A color
  csPColor color;
  // A 2D point
  csPVector2 vect2;
  // A 3D point
  csPVector3 vect;
  // A transformation matrix
  csMatrix3 *matrix;
  // A transformation matrix/vector
  csStandardLoader::yystorage *transform;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		733
#define	YYFLAG		-32768
#define	YYNTBASE	130

#define YYTRANSLATE(x) ((unsigned)(x) <= 378 ? yytranslate[x] : 209)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   123,
   124,     2,     2,   125,   127,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   126,     2,     2,
     2,   128,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   129
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     8,     9,    16,    17,    20,    25,    26,    33,
    38,    43,    50,    51,    58,    59,    66,    67,    74,    80,
    86,    94,   100,   106,   107,   110,   111,   118,   119,   122,
   123,   129,   134,   139,   144,   149,   154,   155,   158,   164,
   165,   168,   173,   175,   178,   183,   184,   191,   196,   201,
   206,   213,   216,   222,   228,   234,   240,   248,   253,   260,
   265,   267,   270,   275,   280,   285,   287,   290,   295,   302,
   304,   307,   312,   317,   322,   327,   332,   337,   342,   347,
   352,   354,   357,   363,   368,   373,   376,   381,   387,   392,
   394,   396,   398,   400,   402,   405,   410,   415,   422,   432,
   437,   439,   442,   448,   453,   458,   463,   468,   474,   477,
   485,   491,   496,   501,   508,   510,   513,   515,   522,   527,
   534,   539,   542,   547,   552,   554,   557,   562,   567,   572,
   574,   577,   579,   581,   584,   589,   595,   601,   608,   613,
   618,   619,   622,   629,   630,   633,   640,   642,   645,   650,
   657,   662,   667,   669,   672,   675,   678,   681,   684,   689,
   692,   695,   696,   699,   704,   709,   714,   719,   720,   722,
   724,   726,   730,   734,   736,   738,   741,   751,   753,   754,
   757,   759,   762,   765,   770,   775,   780,   785,   792,   797,
   802,   807,   808,   811,   812,   815,   817,   820,   825,   830,
   832,   835,   840,   845,   846,   852,   857,   860,   865,   870,
   875,   880,   885,   890,   893,   898,   903,   904,   907,   908,
   911,   912,   916,   917,   922,   924,   927,   932,   937,   942,
   945,   948,   950,   953,   958,   963,   968,   973,   978,   983,
   988,   993,   998,  1003
};

static const short yyrhs[] = {    -1,
   113,   183,   123,   131,   133,   124,     0,     0,    42,   183,
   123,   132,   133,   124,     0,     0,   133,   134,     0,    91,
   123,   139,   124,     0,     0,    95,   183,   123,   135,   139,
   124,     0,    42,   123,   121,   124,     0,    79,   123,   145,
   124,     0,    82,   123,   121,   125,   186,   124,     0,     0,
     9,   183,   123,   136,   181,   124,     0,     0,    59,   183,
   123,   137,   156,   124,     0,     0,    75,   183,   123,   138,
   149,   124,     0,    39,   183,   123,   121,   124,     0,    13,
   183,   123,   161,   124,     0,    72,   183,   123,   121,   126,
   121,   124,     0,    97,   183,   123,   163,   124,     0,    80,
   183,   123,   171,   124,     0,     0,   139,   140,     0,     0,
    90,   183,   123,   141,   142,   124,     0,     0,   142,   143,
     0,     0,    50,   123,   184,   124,   144,     0,    23,   123,
   184,   124,     0,    26,   123,   121,   124,     0,    99,   123,
   185,   124,     0,    32,   123,   184,   124,     0,    31,   123,
   184,   124,     0,     0,   145,   146,     0,    78,   183,   123,
   147,   124,     0,     0,   147,   148,     0,    26,   123,   121,
   124,     0,   150,     0,   149,   150,     0,   108,   123,   186,
   124,     0,     0,    60,   183,   123,   151,   198,   124,     0,
    89,   123,   121,   124,     0,    88,   123,   122,   124,     0,
     4,   123,   121,   124,     0,   101,   123,   121,   125,   121,
   124,     0,    83,   193,     0,    97,   183,   123,   165,   124,
     0,    43,   183,   123,   158,   124,     0,    80,   183,   123,
   177,   124,     0,    30,   123,   185,   122,   124,     0,    11,
   123,   186,   126,   186,   122,   124,     0,    77,   123,   152,
   124,     0,    39,   123,   121,   125,   121,   124,     0,    57,
   123,   154,   124,     0,   153,     0,   152,   153,     0,    63,
   123,   122,   124,     0,   109,   123,   202,   124,     0,    44,
   123,   184,   124,     0,   155,     0,   154,   155,     0,    62,
   123,   186,   124,     0,    39,   123,   121,   125,   121,   124,
     0,   157,     0,   156,   157,     0,    58,   123,   187,   124,
     0,    27,   123,   187,   124,     0,    73,   123,   187,   124,
     0,    28,   123,   122,   124,     0,    74,   123,   122,   124,
     0,   105,   123,   186,   124,     0,   110,   123,   186,   124,
     0,    46,   123,   189,   124,     0,   107,   123,   186,   124,
     0,   159,     0,   158,   159,     0,   186,   126,   122,   185,
   122,     0,    10,   123,   186,   124,     0,    63,   123,   122,
   124,     0,    24,   193,     0,    14,   123,   185,   124,     0,
    36,   123,   122,   122,   124,     0,     7,   123,   160,   124,
     0,   116,     0,   117,     0,   118,     0,   119,     0,   162,
     0,   161,   162,     0,    97,   123,   121,   124,     0,    13,
   123,   121,   124,     0,    43,   123,   121,   125,   122,   124,
     0,   101,   123,   121,   125,   121,   127,   128,   121,   124,
     0,    75,   123,   121,   124,     0,   164,     0,   163,   164,
     0,    60,   183,   123,   198,   124,     0,   108,   123,   186,
   124,     0,    89,   123,   121,   124,     0,    88,   123,   122,
   124,     0,    53,   123,   194,   124,     0,    30,   123,   185,
   122,   124,     0,    16,   193,     0,    11,   123,   186,   126,
   186,   122,   124,     0,     8,   183,   123,   167,   124,     0,
    19,   123,   186,   124,     0,    21,   123,   122,   124,     0,
    20,   123,   186,   126,   188,   124,     0,   166,     0,   165,
   166,     0,   164,     0,    39,   123,   121,   125,   121,   124,
     0,     4,   123,   121,   124,     0,   101,   123,   121,   125,
   121,   124,     0,    85,   123,   121,   124,     0,    54,   193,
     0,    96,   123,   121,   124,     0,    26,   123,   121,   124,
     0,   168,     0,   167,   168,     0,    89,   123,   121,   124,
     0,    90,   123,   169,   124,     0,   109,   123,   202,   124,
     0,   170,     0,   169,   170,     0,   129,     0,   172,     0,
   171,   172,     0,    89,   123,   121,   124,     0,    34,   183,
   123,   173,   124,     0,     3,   183,   123,   175,   124,     0,
   100,   123,   122,   122,   122,   124,     0,    26,   123,   121,
   124,     0,    48,   123,   184,   124,     0,     0,   173,   174,
     0,   107,   123,   186,   126,   188,   124,     0,     0,   175,
   176,     0,    25,   123,   121,   125,   122,   124,     0,   178,
     0,   177,   178,     0,    53,   123,   194,   124,     0,    85,
   123,   121,   125,   121,   124,     0,    89,   123,   121,   124,
     0,    52,   123,   179,   124,     0,   180,     0,   179,   180,
     0,    17,   193,     0,    55,   193,     0,    56,   193,     0,
     5,   193,     0,     6,   123,   122,   124,     0,    99,   193,
     0,    40,   193,     0,     0,   181,   182,     0,    62,   123,
   186,   124,     0,    33,   123,   186,   124,     0,   102,   123,
   186,   124,     0,    75,   123,   121,   124,     0,     0,   121,
     0,   114,     0,   115,     0,   122,   122,   122,     0,   122,
   122,   122,     0,   122,     0,   186,     0,   122,   122,     0,
   122,   122,   122,   122,   122,   122,   122,   122,   122,     0,
   122,     0,     0,   190,   191,     0,   192,     0,   191,   192,
     0,    38,   193,     0,    65,   123,   122,   124,     0,    66,
   123,   122,   124,     0,    67,   123,   122,   124,     0,    68,
   123,   122,   124,     0,    68,   123,   122,   122,   122,   124,
     0,    69,   123,   122,   124,     0,    70,   123,   122,   124,
     0,    71,   123,   122,   124,     0,     0,   123,   124,     0,
     0,   195,   196,     0,   197,     0,   196,   197,     0,    46,
   123,   189,   124,     0,   107,   123,   186,   124,     0,   199,
     0,   198,   199,     0,    89,   123,   121,   124,     0,    44,
   123,   184,   124,     0,     0,    90,   123,   200,   207,   124,
     0,   109,   123,   202,   124,     0,    35,   193,     0,    29,
   123,   185,   124,     0,     6,   123,   122,   124,     0,   103,
   123,   203,   124,     0,   104,   123,   204,   124,     0,    15,
   123,   201,   124,     0,    18,   123,   122,   124,     0,    12,
   193,     0,    61,   123,   121,   124,     0,   112,   123,   205,
   124,     0,     0,   201,   185,     0,     0,   202,   122,     0,
     0,   203,   122,   122,     0,     0,   204,   122,   122,   122,
     0,   206,     0,   205,   206,     0,    46,   123,   189,   124,
     0,   107,   123,   186,   124,     0,   111,   123,   186,   124,
     0,    51,   193,     0,    84,   193,     0,   208,     0,   207,
   208,     0,    58,   123,   187,   124,     0,    27,   123,   187,
   124,     0,    73,   123,   187,   124,     0,    28,   123,   122,
   124,     0,    74,   123,   122,   124,     0,   105,   123,   186,
   124,     0,   110,   123,   186,   124,     0,    46,   123,   189,
   124,     0,   107,   123,   186,   124,     0,    59,   123,   121,
   124,     0,   106,   123,   188,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   265,   268,   269,   271,   276,   278,   281,   283,   285,   287,
   289,   291,   297,   299,   301,   306,   308,   321,   326,   328,
   330,   332,   334,   340,   342,   345,   348,   352,   354,   357,
   359,   365,   372,   374,   376,   383,   394,   396,   399,   403,
   405,   408,   414,   416,   419,   422,   427,   432,   434,   436,
   438,   440,   442,   444,   446,   448,   450,   453,   455,   457,
   461,   463,   466,   469,   471,   475,   477,   480,   483,   489,
   491,   494,   500,   505,   510,   515,   520,   526,   532,   537,
   546,   548,   551,   555,   557,   559,   561,   563,   565,   568,
   570,   571,   572,   577,   579,   582,   585,   587,   589,   591,
   597,   599,   602,   605,   607,   609,   611,   613,   615,   617,
   620,   622,   624,   626,   630,   632,   635,   637,   639,   641,
   643,   645,   647,   649,   655,   657,   660,   663,   665,   669,
   671,   674,   681,   683,   686,   689,   691,   693,   695,   697,
   710,   712,   715,   720,   722,   725,   730,   732,   735,   738,
   740,   742,   746,   748,   751,   753,   754,   755,   756,   758,
   759,   764,   766,   769,   772,   774,   776,   790,   793,   797,
   800,   805,   811,   817,   821,   825,   831,   839,   844,   850,
   852,   854,   857,   860,   862,   864,   866,   868,   870,   872,
   874,   878,   880,   884,   892,   894,   896,   899,   905,   913,
   915,   918,   921,   923,   928,   930,   932,   934,   936,   938,
   940,   942,   944,   946,   948,   950,   954,   956,   960,   962,
   965,   967,   971,   973,   978,   980,   983,   986,   988,   990,
   992,   997,   999,  1002,  1008,  1013,  1018,  1023,  1028,  1034,
  1040,  1045,  1050,  1055
};
#endif

#define YYNTOKENS 130
#define YYNNTS 79
#define YYNRULES 244
#define YYNSTATES 734
#define YYMAXUTOK 378

static const char * const yytname[] = {   "$","error","$undefined.","KW_ACTION",
"KW_ACTIVATE","KW_ADD","KW_ALPHA","KW_ATTENUATION","KW_BEZIER","KW_CAMERA","KW_CENTER",
"KW_CIRCLE","KW_CLIP","KW_COLLECTION","KW_COLOR","KW_COLORS","KW_CONVEX","KW_COPY",
"KW_COSFACT","KW_CURVECENTER","KW_CURVECONTROL","KW_CURVESCALE","KW_DETAIL",
"KW_DITHER","KW_DYNAMIC","KW_F","KW_FILE","KW_FIRST","KW_FIRST_LEN","KW_FLATCOL",
"KW_FOG","KW_FOR_2D","KW_FOR_3D","KW_FORWARD","KW_FRAME","KW_GOURAUD","KW_HALO",
"KW_HEIGHTMAP","KW_IDENTITY","KW_KEY","KW_KEYCOLOR","KW_LEN","KW_LIBRARY","KW_LIGHT",
"KW_LIGHTING","KW_LIMB","KW_MATRIX","KW_MERGE_NORMALS","KW_MERGE_TEXELS","KW_MERGE_VERTICES",
"KW_MIPMAP","KW_MIRROR","KW_MIXMODE","KW_MOVE","KW_MOVEABLE","KW_MULTIPLY","KW_MULTIPLY2",
"KW_NODE","KW_ORIG","KW_PLANE","KW_POLYGON","KW_PORTAL","KW_POSITION","KW_RADIUS",
"KW_ROT","KW_ROT_X","KW_ROT_Y","KW_ROT_Z","KW_SCALE","KW_SCALE_X","KW_SCALE_Y",
"KW_SCALE_Z","KW_SCRIPT","KW_SECOND","KW_SECOND_LEN","KW_SECTOR","KW_SKELETON",
"KW_SKYDOME","KW_SOUND","KW_SOUNDS","KW_SPRITE","KW_SPRITE2D","KW_START","KW_STATBSP",
"KW_STATIC","KW_TEMPLATE","KW_TERRAIN","KW_TEX","KW_TEXLEN","KW_TEXNR","KW_TEXTURE",
"KW_TEXTURES","KW_TEXTURE_LIGHTING","KW_TEXTURE_MIPMAP","KW_TEXTURE_SCALE","KW_TEX_SET",
"KW_TEX_SET_SELECT","KW_THING","KW_TRANSFORM","KW_TRANSPARENT","KW_TRIANGLE",
"KW_TRIGGER","KW_UPWARD","KW_UV","KW_UVA","KW_UVEC","KW_UV_SHIFT","KW_V","KW_VERTEX",
"KW_VERTICES","KW_VVEC","KW_W","KW_WARP","KW_WORLD","KW_yes","KW_no","KW_none",
"KW_linear","KW_inverse","KW_realistic","PARSER_VERSION","STRING","NUMBER","'('",
"')'","','","':'","'-'","'>'","\"unused\"","input","@1","@2","world_ops","world_op",
"@3","@4","@5","@6","textures","texture","@7","texture_ops","texture_op","@8",
"sounds","sound","sound_ops","sound_op","sector_ops","sector_op","@9","skydome_ops",
"skydome_op","node_ops","node_op","plane_ops","plane_op","light_ops","light_op",
"attenuation_op","collection_ops","collection_op","thing_tpl_ops","thing_tpl_op",
"thing_ops","thing_op","bezier_ops","bezier_op","bezier_texture_ops","bezier_texture_op",
"sprite_tpl_ops","sprite_tpl_op","sprite_verts","sprite_vert","sprite_actions",
"sprite_action","sprite_ops","sprite_op","mixmode_ops","mixmode_op","camera_ops",
"camera_op","name","yesno","color","vector","vect_idx","vector2","matrix","@10",
"matrix_ops","matrix_op","noargs","move","@11","move_ops","move_op","polygon_ops",
"polygon_op","@12","colors","vertex_indices","tex_coordinates","uva_coordinates",
"warp_ops","warp_op","polygon_texture_ops","polygon_texture_op", NULL
};
static const short yytoknum[] = { 0,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
   376,   377,    40,    41,    44,    58,    45,    62,   378,     0
};

static const short yyr1[] = {     0,
   131,   130,   132,   130,   133,   133,   134,   135,   134,   134,
   134,   134,   136,   134,   137,   134,   138,   134,   134,   134,
   134,   134,   134,   139,   139,   141,   140,   142,   142,   144,
   143,   143,   143,   143,   143,   143,   145,   145,   146,   147,
   147,   148,   149,   149,   150,   151,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   152,   152,   153,   153,   153,   154,   154,   155,   155,   156,
   156,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   158,   158,   159,   159,   159,   159,   159,   159,   159,   160,
   160,   160,   160,   161,   161,   162,   162,   162,   162,   162,
   163,   163,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   165,   165,   166,   166,   166,   166,
   166,   166,   166,   166,   167,   167,   168,   168,   168,   169,
   169,   170,   171,   171,   172,   172,   172,   172,   172,   172,
   173,   173,   174,   175,   175,   176,   177,   177,   178,   178,
   178,   178,   179,   179,   180,   180,   180,   180,   180,   180,
   180,   181,   181,   182,   182,   182,   182,   183,   183,   184,
   184,   185,   186,   187,   187,   188,   189,   189,   190,   189,
   191,   191,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   193,   193,   195,   194,   196,   196,   197,   197,   198,
   198,   199,   199,   200,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   201,   201,   202,   202,
   203,   203,   204,   204,   205,   205,   206,   206,   206,   206,
   206,   207,   207,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208
};

static const short yyr2[] = {     0,
     0,     6,     0,     6,     0,     2,     4,     0,     6,     4,
     4,     6,     0,     6,     0,     6,     0,     6,     5,     5,
     7,     5,     5,     0,     2,     0,     6,     0,     2,     0,
     5,     4,     4,     4,     4,     4,     0,     2,     5,     0,
     2,     4,     1,     2,     4,     0,     6,     4,     4,     4,
     6,     2,     5,     5,     5,     5,     7,     4,     6,     4,
     1,     2,     4,     4,     4,     1,     2,     4,     6,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     1,     2,     5,     4,     4,     2,     4,     5,     4,     1,
     1,     1,     1,     1,     2,     4,     4,     6,     9,     4,
     1,     2,     5,     4,     4,     4,     4,     5,     2,     7,
     5,     4,     4,     6,     1,     2,     1,     6,     4,     6,
     4,     2,     4,     4,     1,     2,     4,     4,     4,     1,
     2,     1,     1,     2,     4,     5,     5,     6,     4,     4,
     0,     2,     6,     0,     2,     6,     1,     2,     4,     6,
     4,     4,     1,     2,     2,     2,     2,     2,     4,     2,
     2,     0,     2,     4,     4,     4,     4,     0,     1,     1,
     1,     3,     3,     1,     1,     2,     9,     1,     0,     2,
     1,     2,     2,     4,     4,     4,     4,     6,     4,     4,
     4,     0,     2,     0,     2,     1,     2,     4,     4,     1,
     2,     4,     4,     0,     5,     4,     2,     4,     4,     4,
     4,     4,     4,     2,     4,     4,     0,     2,     0,     2,
     0,     3,     0,     4,     1,     2,     4,     4,     4,     2,
     2,     1,     2,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4
};

static const short yydefact[] = {     0,
   168,   168,   169,     0,     0,     3,     1,     5,     5,     0,
     0,   168,   168,   168,     0,   168,   168,   168,     0,   168,
     0,     0,   168,   168,     4,     6,     2,     0,     0,     0,
     0,     0,     0,     0,    37,     0,     0,    24,     0,     0,
    13,     0,     0,     0,    15,     0,    17,     0,     0,     0,
     0,     8,     0,   162,     0,     0,     0,     0,     0,     0,
    94,     0,    10,     0,     0,     0,   168,    11,    38,   168,
     0,   168,     0,     0,     0,     0,   133,     0,   168,     7,
    25,    24,   168,     0,   192,     0,     0,     0,     0,     0,
   168,     0,     0,     0,     0,   101,     0,     0,     0,     0,
     0,     0,    20,    95,    19,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    70,     0,     0,     0,     0,
     0,   168,     0,   168,     0,   168,   192,     0,     0,   168,
     0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     0,    23,   134,     0,     0,     0,     0,     0,     0,     0,
   109,     0,     0,     0,     0,   194,     0,     0,     0,     0,
    22,   102,     0,     0,     0,     0,    14,   163,     0,     0,
     0,     0,     0,     0,     0,   179,     0,     0,     0,     0,
     0,     0,    16,    71,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,     0,     0,     0,     0,     0,
    18,    44,    40,   144,     0,   141,   170,   171,     0,     0,
     0,     0,    12,    26,     9,     0,     0,   193,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    97,     0,   100,    96,     0,   174,   175,
     0,     0,   178,     0,     0,     0,     0,     0,     0,     0,
     0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
    66,    46,     0,     0,     0,     0,    61,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,   140,   135,     0,
   173,    28,     0,     0,     0,     0,   125,     0,   112,     0,
   113,     0,     0,   107,     0,     0,   195,   196,     0,   192,
     0,     0,     0,   192,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   200,   106,   105,   104,     0,     0,     0,
     0,     0,     0,    73,    75,     0,    79,   192,     0,     0,
     0,     0,     0,     0,     0,   180,   181,    72,    74,    76,
    77,    80,    78,    50,     0,     0,     0,     0,     0,     0,
   192,     0,     0,     0,    81,     0,     0,     0,    60,    67,
     0,     0,     0,   219,    58,    62,     0,     0,     0,     0,
     0,   147,    49,    48,     0,     0,     0,   192,     0,     0,
     0,   117,     0,   115,     0,    45,     0,    39,    41,     0,
   137,   145,     0,   136,   142,     0,     0,     0,     0,   219,
   111,   126,     0,     0,     0,   172,   108,   179,     0,   197,
     0,   214,   217,     0,     0,   207,     0,     0,     0,   204,
   221,   223,   219,     0,   103,   201,   165,   164,   167,   166,
    98,     0,     0,   183,     0,     0,     0,     0,     0,     0,
     0,   182,     0,    56,     0,     0,     0,     0,    86,     0,
     0,    54,    82,     0,     0,     0,     0,     0,     0,     0,
     0,   194,     0,     0,    55,   148,     0,     0,     0,   122,
     0,     0,     0,    53,   116,     0,     0,     0,     0,   138,
     0,     0,     0,     0,     0,     0,    27,    29,     0,   132,
     0,   130,     0,     0,   176,   114,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   192,   192,     0,     0,     0,   225,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    59,    90,    91,    92,
    93,     0,     0,     0,     0,     0,     0,     0,    68,    47,
    65,    63,   220,    64,   192,     0,   192,   192,   192,   192,
   192,     0,   153,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   127,   128,   131,   129,   110,   198,   199,   209,
   212,   218,   213,   208,   203,   215,   202,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   232,
     0,   210,     0,   211,   206,   179,   230,   231,     0,     0,
   216,   226,     0,     0,   184,   185,   186,     0,   187,   189,
   190,   191,    57,    89,    84,    87,     0,    85,     0,     0,
   158,     0,   155,   161,   156,   157,   160,   152,   154,   149,
     0,   151,   119,   124,     0,   121,   123,     0,    42,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   179,
     0,     0,     0,     0,     0,     0,     0,     0,   205,   233,
   222,     0,     0,     0,     0,    99,     0,     0,    88,    83,
    69,     0,     0,     0,     0,     0,     0,    32,    33,    36,
    35,    30,    34,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   224,   227,   228,   229,     0,   188,
   159,   150,   118,   120,   146,   143,    31,   235,   237,   241,
   234,   243,   236,   238,   239,   244,   242,   240,     0,   177,
     0,     0,     0
};

static const short yydefgoto[] = {   731,
     9,     8,    10,    26,    82,    54,    64,    66,    51,    81,
   282,   397,   488,   717,    48,    69,   274,   389,   133,   134,
   361,   266,   267,   260,   261,   115,   116,   354,   355,   532,
    60,    61,    95,   382,   383,   384,   286,   287,   491,   492,
    76,    77,   277,   395,   275,   392,   371,   372,   552,   553,
    97,   168,     4,   209,   223,   240,   241,   405,   244,   245,
   336,   337,   151,   224,   225,   297,   298,   313,   314,   506,
   500,   460,   507,   508,   515,   516,   599,   600
};

static const short yypact[] = {     8,
  -109,  -109,-32768,   -98,   -84,-32768,-32768,-32768,-32768,   285,
   357,  -109,  -109,  -109,   -71,  -109,  -109,  -109,   -44,  -109,
   -33,   -28,  -109,  -109,-32768,-32768,-32768,   -22,     1,    18,
   -35,    24,    27,    37,-32768,    40,    -3,-32768,    47,    55,
-32768,   132,    36,     5,-32768,    66,-32768,   -43,   135,    70,
   -79,-32768,   506,-32768,    82,    85,    98,   115,   116,    19,
-32768,   122,-32768,   589,   124,   480,  -109,-32768,-32768,  -109,
   141,  -109,   149,   150,   152,     7,-32768,   130,  -109,-32768,
-32768,-32768,  -109,   156,   161,   162,   164,   165,   169,   172,
  -109,   179,   180,   181,   270,-32768,   -19,   134,   197,   200,
   208,   212,-32768,-32768,-32768,   188,   213,   214,   218,   219,
   220,   222,   225,   226,   518,-32768,   217,   227,   228,   230,
   238,  -109,   240,  -109,   249,  -109,   161,   250,   252,  -109,
   254,   256,   129,-32768,   258,   261,   235,   263,    52,   269,
   160,-32768,-32768,   224,   211,   272,   -59,   274,   130,   268,
-32768,   130,   130,   271,   276,-32768,   279,   281,   283,   130,
-32768,-32768,   282,   287,   288,   289,-32768,-32768,   290,   293,
   291,   295,   297,   298,   306,   308,   298,   298,   309,   130,
   130,   130,-32768,-32768,   310,   286,   130,   276,   292,   312,
    -2,   315,   110,   317,-32768,   311,   320,   319,   322,   130,
-32768,-32768,-32768,-32768,   323,-32768,-32768,-32768,   325,   326,
   329,   331,-32768,-32768,-32768,   107,   280,-32768,   332,   318,
   334,   333,   340,   339,   -37,   356,   343,   346,   347,   130,
   130,   354,   130,-32768,   355,-32768,-32768,   359,   224,-32768,
   352,   362,   366,   365,   428,   376,   377,   378,   379,   380,
   381,-32768,   384,   364,   387,   353,   233,   388,   389,   -18,
-32768,-32768,   392,   393,   395,   -10,-32768,    96,   396,   397,
   453,   399,   404,   -11,   -12,-32768,    -7,-32768,-32768,   407,
-32768,-32768,   410,   411,   412,   223,-32768,   130,-32768,   408,
-32768,   417,   419,-32768,   421,   424,   -37,-32768,   425,   161,
   427,   430,   432,   161,   433,   435,   439,   442,   444,   448,
   449,   450,   159,-32768,-32768,-32768,-32768,   454,   455,   456,
   460,   461,   459,-32768,-32768,   474,-32768,   161,   476,   477,
   478,   479,   481,   484,   485,   428,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   130,   486,   482,   488,   489,   490,
   161,   492,   495,   101,-32768,   483,   498,   130,-32768,-32768,
   356,    52,   500,-32768,-32768,-32768,   501,   503,   504,   509,
    -5,-32768,-32768,-32768,   510,   513,   514,   161,   515,   516,
   517,-32768,    38,-32768,   520,-32768,   521,-32768,-32768,   522,
-32768,-32768,   523,-32768,-32768,   519,   284,   528,   210,-32768,
-32768,-32768,   529,   533,   526,-32768,-32768,   308,   130,-32768,
   534,-32768,-32768,   536,   276,-32768,    52,   538,   539,-32768,
-32768,-32768,-32768,   215,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   537,   542,-32768,   544,   545,   546,   548,   549,   550,
   551,-32768,   552,-32768,   553,    74,   130,   276,-32768,   554,
   556,-32768,-32768,   557,   555,   558,   216,   559,   560,   -86,
   253,-32768,   540,   564,-32768,-32768,   565,   566,   567,-32768,
   568,   569,   570,-32768,-32768,   571,   572,   576,   130,-32768,
   575,   577,   578,   579,   580,   581,-32768,-32768,   582,-32768,
   -36,-32768,    20,   583,-32768,-32768,   584,   585,   586,    34,
   587,   588,   590,   591,   592,   547,    60,    76,    77,   594,
   161,   161,   595,   596,   190,-32768,   599,   600,   597,   601,
   602,   120,   603,   604,   605,   606,-32768,-32768,-32768,-32768,
-32768,   607,   608,   609,   612,   611,   276,   615,-32768,-32768,
-32768,-32768,-32768,-32768,   161,   614,   161,   161,   161,   161,
   161,    11,-32768,   616,   598,   617,   618,   619,   613,   620,
   621,   622,-32768,   624,   625,   543,    52,   628,    52,    52,
    52,   276,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   623,   629,   630,
   631,   632,   633,   634,   635,   636,   637,   638,   524,-32768,
   640,-32768,   641,-32768,-32768,   308,-32768,-32768,   130,   130,
-32768,-32768,   627,   642,-32768,-32768,-32768,   643,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   644,-32768,   645,   646,
-32768,   647,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   650,-32768,-32768,-32768,   651,-32768,-32768,   652,-32768,   653,
   408,   654,   655,   656,   657,   658,   659,   298,   662,   308,
   298,   664,   298,   665,   130,   408,   130,   130,-32768,-32768,
-32768,   666,   667,   668,   669,-32768,   672,   671,-32768,-32768,
-32768,   673,   674,   675,   676,   677,   678,-32768,-32768,-32768,
-32768,-32768,-32768,   679,   680,   681,   682,   683,   684,   685,
   686,   687,   688,   689,-32768,-32768,-32768,-32768,   692,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   693,-32768,
   705,   713,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   715,-32768,-32768,-32768,-32768,-32768,   593,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   663,
-32768,-32768,   415,-32768,   530,-32768,   661,-32768,   338,-32768,
-32768,   706,-32768,   -26,-32768,   391,-32768,   491,-32768,   248,
-32768,   710,-32768,-32768,-32768,-32768,-32768,   418,-32768,   264,
-32768,-32768,     6,  -356,  -183,   -78,  -176,  -579,  -404,-32768,
-32768,   487,  -124,   358,-32768,-32768,   525,   457,  -306,-32768,
-32768,  -360,-32768,-32768,-32768,   302,-32768,   229
};


#define	YYLAST		828


static const short yytable[] = {   145,
   246,   247,   195,   497,   255,   458,   426,     5,   295,    70,
    79,     3,   390,   163,   387,   545,   546,    28,    29,    30,
   258,    32,    33,    34,     6,    36,    96,   547,    39,    40,
    79,    55,    71,   263,    67,   543,   258,   544,     7,   493,
    72,   375,   164,   259,    80,    83,   367,   368,    84,     1,
   548,    31,   264,    85,    73,   165,    86,    87,    88,   259,
   503,    56,   509,   376,   215,   549,   550,    89,   162,   296,
   217,   687,   135,   219,   220,   136,   377,   138,    35,   369,
    68,   229,   166,   370,   146,    44,   702,   574,   148,    37,
    90,   378,   490,    57,    38,    74,   157,    91,   265,   393,
    41,   249,   250,   251,   167,   359,    75,   348,   254,   551,
   349,   391,   388,   365,   350,    58,   394,    50,   465,    59,
     2,   273,   379,    42,   351,    92,    93,   190,    63,   192,
   142,   194,   118,   380,   638,   198,   352,    70,   381,   119,
    43,   543,   103,   576,    55,    94,    45,   367,   368,    46,
   426,   318,   319,   263,   321,   222,    62,   581,   120,    47,
    71,   474,    49,   353,   299,   207,   208,   121,    72,    52,
   300,   122,   264,   301,    56,   412,   302,    53,   356,   416,
   369,   601,    73,   602,   370,   123,    65,   303,   124,   528,
   529,   530,   531,   304,    78,   283,   284,   603,   543,   604,
   605,   673,   305,   434,    98,   125,    57,    99,   126,   403,
   652,   127,   654,   655,   656,   285,   128,   129,   265,   306,
   100,   299,   144,    74,   452,   130,   449,   300,    58,   131,
   301,   502,    59,   302,    75,   510,   132,   101,   102,   348,
   511,   618,   349,   619,   303,   105,   350,   307,   308,   117,
   304,   144,   201,   470,   169,   696,   351,   545,   546,   305,
   510,   309,   310,   137,   534,   511,   443,   311,   352,   547,
   312,   139,   140,   512,   141,   356,   306,    83,   149,   456,
    84,   211,   425,   150,   152,    85,   153,   154,    86,    87,
    88,   155,   548,    12,   156,   353,   513,    13,   512,    89,
   514,   158,   159,   160,   307,   308,   481,   549,   550,   482,
   174,   283,   284,   611,   483,   484,   582,   170,   309,   310,
   171,   513,    90,    14,   311,   514,    15,   312,   172,    91,
   498,   285,   173,   485,   213,   175,   176,   185,   490,   540,
   177,   178,   179,    16,   180,   212,   401,   181,   182,   186,
   187,   551,   188,   629,   144,   205,    17,    92,    93,    18,
   189,   299,   191,    19,    20,    12,    21,   300,   533,    13,
   301,   193,   196,   302,   197,    22,   199,    94,   200,    23,
   203,    24,   486,   204,   303,   206,   607,   608,   657,   210,
   304,   218,   221,   161,   214,    14,   216,   222,    15,   305,
   566,   226,   227,   228,   230,   288,   253,   487,    25,   231,
   232,   233,   256,   234,   236,    16,   306,   235,   237,   239,
   631,   238,   633,   634,   635,   636,   637,   242,    17,   243,
   248,    18,   269,   252,   257,    19,    20,   262,    21,   268,
   270,   271,   272,   290,   307,   308,   276,    22,   278,   279,
   280,    23,   281,    24,   292,   289,   375,   291,   309,   310,
    83,   293,   294,    84,   311,   328,   315,   312,    85,   316,
   317,    86,    87,    88,   320,   324,   322,   347,   376,   323,
    27,   694,    89,   118,   697,   325,   699,   326,   327,   345,
   119,   377,   329,   330,   331,   332,   333,   334,   335,   338,
   339,   340,   341,   342,   343,    90,   378,   344,   346,   120,
   357,   358,    91,    83,   362,   363,    84,   364,   121,   373,
   374,    85,   122,   385,    86,    87,    88,   386,   396,   404,
   674,   675,   398,   399,   400,    89,   123,   379,   406,   124,
    92,    93,   407,   408,   106,   107,   409,   411,   380,   413,
   588,   589,   414,   381,   415,   417,   125,   418,    90,   126,
    94,   419,   127,   108,   420,    91,   421,   128,   129,   590,
   422,   423,   424,   588,   589,   109,   130,   427,   428,   429,
   131,   591,   592,   430,   431,   432,   701,   132,   703,   704,
   110,   111,   590,    92,    93,   433,   593,   594,   435,   436,
   437,   438,   445,   439,   591,   592,   440,   441,   454,   444,
   446,   447,   448,    94,   450,   106,   107,   451,   455,   593,
   594,   459,   112,   461,   113,   462,   463,   114,   595,   596,
   597,   464,   467,   598,   108,   468,   469,   471,   472,   473,
   476,   183,   480,   477,   478,   479,   109,   669,   489,   496,
   494,   595,   596,   597,   495,   499,   598,   501,   504,   505,
   555,   110,   111,   518,   517,   519,   520,   521,   651,   522,
   523,   524,   525,   526,   147,   535,   527,   536,   537,   538,
   366,   539,   541,   542,   556,   557,   558,   559,   560,   561,
   562,   453,   564,   112,   563,   113,   565,   567,   114,   568,
   569,   570,   571,   572,   732,   573,   577,   578,   579,   580,
   583,   584,   733,   585,   586,   587,   606,   609,   610,   613,
   615,   614,   641,    11,   616,   617,   620,   621,   622,   623,
   624,   625,   626,   627,   628,   630,   632,   645,   575,   640,
   642,   643,   644,   646,   647,   658,   648,   649,   653,   650,
   676,   659,   660,   661,   662,   663,   664,   665,   666,   667,
   668,   671,   672,   677,   678,   104,   680,   679,   682,   681,
   683,   684,   685,   475,   686,   184,   402,   688,   689,   690,
   691,   692,   693,   695,   698,   143,   700,   705,   466,   360,
   706,   707,   708,   709,   710,   202,   711,   712,   713,   714,
   715,   716,   718,   719,   720,   721,   722,   723,   724,   725,
   726,   727,   728,   729,   730,   639,   612,   457,     0,   554,
     0,   410,   442,     0,     0,     0,     0,   670
};

static const short yycheck[] = {    78,
   177,   178,   127,   408,   188,   362,   313,     2,    46,     3,
    90,   121,    25,    33,    26,     5,     6,    12,    13,    14,
    39,    16,    17,    18,   123,    20,    53,    17,    23,    24,
    90,    13,    26,    44,    78,   122,    39,   124,   123,   400,
    34,     4,    62,    62,   124,     8,    52,    53,    11,    42,
    40,   123,    63,    16,    48,    75,    19,    20,    21,    62,
   417,    43,   423,    26,   124,    55,    56,    30,    95,   107,
   149,   651,    67,   152,   153,    70,    39,    72,   123,    85,
   124,   160,   102,    89,    79,   121,   666,   124,    83,   123,
    53,    54,   129,    75,   123,    89,    91,    60,   109,   107,
   123,   180,   181,   182,   124,   124,   100,     7,   187,    99,
    10,   124,   124,   124,    14,    97,   124,   121,   124,   101,
   113,   200,    85,   123,    24,    88,    89,   122,   124,   124,
   124,   126,     4,    96,   124,   130,    36,     3,   101,    11,
   123,   122,   124,   124,    13,   108,   123,    52,    53,   123,
   457,   230,   231,    44,   233,   122,   121,   124,    30,   123,
    26,   124,   123,    63,     6,   114,   115,    39,    34,   123,
    12,    43,    63,    15,    43,   300,    18,   123,   257,   304,
    85,   122,    48,   124,    89,    57,   121,    29,    60,   116,
   117,   118,   119,    35,   125,    89,    90,   122,   122,   124,
   124,   606,    44,   328,   123,    77,    75,   123,    80,   288,
   567,    83,   569,   570,   571,   109,    88,    89,   109,    61,
   123,     6,   122,    89,   124,    97,   351,    12,    97,   101,
    15,   415,   101,    18,   100,    46,   108,   123,   123,     7,
    51,   122,    10,   124,    29,   124,    14,    89,    90,   126,
    35,   122,   124,   378,   121,   660,    24,     5,     6,    44,
    46,   103,   104,   123,   448,    51,   345,   109,    36,    17,
   112,   123,   123,    84,   123,   354,    61,     8,   123,   358,
    11,   122,   124,   123,   123,    16,   123,   123,    19,    20,
    21,   123,    40,     9,   123,    63,   107,    13,    84,    30,
   111,   123,   123,   123,    89,    90,    23,    55,    56,    26,
   123,    89,    90,   124,    31,    32,   500,   121,   103,   104,
   121,   107,    53,    39,   109,   111,    42,   112,   121,    60,
   409,   109,   121,    50,   124,   123,   123,   121,   129,   124,
   123,   123,   123,    59,   123,   122,   124,   123,   123,   123,
   123,    99,   123,   537,   122,   121,    72,    88,    89,    75,
   123,     6,   123,    79,    80,     9,    82,    12,   447,    13,
    15,   123,   123,    18,   123,    91,   123,   108,   123,    95,
   123,    97,    99,   123,    29,   123,   511,   512,   572,   121,
    35,   124,   122,   124,   123,    39,   123,   122,    42,    44,
   479,   123,   122,   121,   123,   126,   121,   124,   124,   123,
   123,   123,   121,   124,   124,    59,    61,   125,   124,   122,
   545,   125,   547,   548,   549,   550,   551,   122,    72,   122,
   122,    75,   122,   124,   123,    79,    80,   123,    82,   123,
   121,   123,   121,   126,    89,    90,   124,    91,   124,   124,
   122,    95,   122,    97,   122,   124,     4,   124,   103,   104,
     8,   122,   124,    11,   109,    38,   124,   112,    16,   124,
   124,    19,    20,    21,   121,   124,   122,   125,    26,   121,
   124,   658,    30,     4,   661,   124,   663,   122,   124,   126,
    11,    39,    65,    66,    67,    68,    69,    70,    71,   124,
   124,   124,   124,   124,   124,    53,    54,   124,   122,    30,
   123,   123,    60,     8,   123,   123,    11,   123,    39,   124,
   124,    16,    43,   125,    19,    20,    21,   124,   122,   122,
   609,   610,   123,   123,   123,    30,    57,    85,   122,    60,
    88,    89,   124,   123,    27,    28,   123,   123,    96,   123,
    27,    28,   123,   101,   123,   123,    77,   123,    53,    80,
   108,   123,    83,    46,   123,    60,   123,    88,    89,    46,
   123,   123,   123,    27,    28,    58,    97,   124,   124,   124,
   101,    58,    59,   124,   124,   127,   665,   108,   667,   668,
    73,    74,    46,    88,    89,   122,    73,    74,   123,   123,
   123,   123,   121,   123,    58,    59,   123,   123,   126,   124,
   123,   123,   123,   108,   123,    27,    28,   123,   121,    73,
    74,   122,   105,   123,   107,   123,   123,   110,   105,   106,
   107,   123,   123,   110,    46,   123,   123,   123,   123,   123,
   121,   124,   124,   123,   123,   123,    58,   124,   121,   124,
   122,   105,   106,   107,   122,   122,   110,   122,   121,   121,
   121,    73,    74,   122,   128,   122,   122,   122,   126,   122,
   122,   122,   122,   122,    82,   122,   124,   122,   122,   125,
   266,   124,   124,   124,   121,   121,   121,   121,   121,   121,
   121,   354,   121,   105,   124,   107,   121,   123,   110,   123,
   123,   123,   123,   123,     0,   124,   124,   124,   124,   124,
   124,   124,     0,   124,   124,   124,   123,   123,   123,   121,
   124,   122,   125,     9,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   122,   124,   121,   123,   125,   491,   124,
   124,   124,   124,   124,   124,   123,   125,   124,   121,   125,
   124,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   122,   122,   122,   122,    60,   122,   124,   122,   124,
   121,   121,   121,   383,   122,   115,   286,   124,   124,   124,
   124,   124,   124,   122,   121,    76,   122,   122,   371,   260,
   124,   124,   124,   122,   124,   133,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   122,   122,   552,   515,   361,    -1,   462,
    -1,   297,   336,    -1,    -1,    -1,    -1,   599
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/*
   This file is almost identical to bison.simple except that it has some
   compilation warnings removed and also some K&R C-style things are removed
   to be able to use yyparse() as a class member function plus some support
   for better syntax error reporting.
*/

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 267 "plugins/csstdldr/stdparse.y"
{ world->SelectLibrary (storage.cur_library = yyvsp[-1].string); ;
    break;}
case 3:
#line 270 "plugins/csstdldr/stdparse.y"
{ world->SelectLibrary (storage.cur_library = yyvsp[-1].string); ;
    break;}
case 8:
#line 284 "plugins/csstdldr/stdparse.y"
{ storage.tex_prefix = yyvsp[-1].string; ;
    break;}
case 9:
#line 286 "plugins/csstdldr/stdparse.y"
{ storage.tex_prefix = NULL; ;
    break;}
case 10:
#line 288 "plugins/csstdldr/stdparse.y"
{ if (!RecursiveLoad (yyvsp[-1].string)) YYABORT; ;
    break;}
case 11:
#line 290 "plugins/csstdldr/stdparse.y"
{ printf ("SOUNDS\n"); ;
    break;}
case 12:
#line 292 "plugins/csstdldr/stdparse.y"
{
    if (!world->CreateCamera ("Start", yyvsp[-3].string,
      (csVector3 &)yyvsp[-1].vect, csVector3 (0, 0, 1), csVector3 (0, 1, 0)))
      YYABORT;
  ;
    break;}
case 13:
#line 298 "plugins/csstdldr/stdparse.y"
{ InitCamera (yyvsp[-1].string); ;
    break;}
case 14:
#line 300 "plugins/csstdldr/stdparse.y"
{ if (!CreateCamera ()) YYABORT; ;
    break;}
case 15:
#line 302 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode = pmNONE;
    polygon.first_len = polygon.second_len = 0.0;
  ;
    break;}
case 16:
#line 307 "plugins/csstdldr/stdparse.y"
{ if (!CreatePlane (yyvsp[-4].string)) YYABORT; ;
    break;}
case 17:
#line 309 "plugins/csstdldr/stdparse.y"
{
    SECTOR.sector = world->CreateSector (yyvsp[-1].string);
    SECTOR.polyset = QUERY_INTERFACE (SECTOR.sector, iPolygonSet);
    if (!SECTOR.polyset)
    {
      SECTOR.sector->DecRef ();
      yyerror ("engine created an invalid iSector object!");
      YYABORT;
    }
    SECTOR.texname = NULL;
    SECTOR.texlen = 1.0;
  ;
    break;}
case 18:
#line 322 "plugins/csstdldr/stdparse.y"
{
    SECTOR.polyset->DecRef ();
    SECTOR.sector->DecRef ();
  ;
    break;}
case 19:
#line 327 "plugins/csstdldr/stdparse.y"
{ if (!CreateKey (yyvsp[-3].string, yyvsp[-1].string)) YYABORT; ;
    break;}
case 20:
#line 329 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION [%s]\n", yyvsp[-3].string); ;
    break;}
case 21:
#line 331 "plugins/csstdldr/stdparse.y"
{ printf ("SCRIPT '%s' (%s: %s)\n", yyvsp[-5].string, yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 22:
#line 333 "plugins/csstdldr/stdparse.y"
{ printf ("THING_tpl [%s]\n", yyvsp[-3].string); ;
    break;}
case 23:
#line 335 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE [%s]\n", yyvsp[-3].string); ;
    break;}
case 26:
#line 347 "plugins/csstdldr/stdparse.y"
{ InitTexture (yyvsp[-1].string); ;
    break;}
case 27:
#line 349 "plugins/csstdldr/stdparse.y"
{ if (!CreateTexture ()) ABORTMSG; ;
    break;}
case 30:
#line 358 "plugins/csstdldr/stdparse.y"
{ printf ("MIPMAP (%d)\n", yyvsp[-1].ival); ;
    break;}
case 31:
#line 359 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-2].ival)
      TEX.flags = (TEX.flags & ~CS_TEXTURE_NOMIPMAPS);
    else
      TEX.flags |= CS_TEXTURE_NOMIPMAPS;
  ;
    break;}
case 32:
#line 366 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_DITHER;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_DITHER);
  ;
    break;}
case 33:
#line 373 "plugins/csstdldr/stdparse.y"
{ TEX.filename = yyvsp[-1].string; ;
    break;}
case 34:
#line 375 "plugins/csstdldr/stdparse.y"
{ TEX.transp = yyvsp[-1].color; TEX.do_transp = true; ;
    break;}
case 35:
#line 377 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_3D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_3D);
  ;
    break;}
case 36:
#line 384 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_2D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_2D);
  ;
    break;}
case 42:
#line 409 "plugins/csstdldr/stdparse.y"
{ printf ("FILE (%s)\n", yyvsp[-1].string); ;
    break;}
case 45:
#line 421 "plugins/csstdldr/stdparse.y"
{ SECTOR.polyset->CreateVertex (CSVECTOR3 (yyvsp[-1].vect)); ;
    break;}
case 46:
#line 423 "plugins/csstdldr/stdparse.y"
{
    SECTOR.polygon = SECTOR.polyset->CreatePolygon (yyvsp[-1].string);
    polygon.texlen = SECTOR.texlen;
  ;
    break;}
case 47:
#line 428 "plugins/csstdldr/stdparse.y"
{
    if (!CreateTexturePlane (SECTOR.polygon)) YYABORT;
    SECTOR.polygon->DecRef ();
  ;
    break;}
case 48:
#line 433 "plugins/csstdldr/stdparse.y"
{ SECTOR.texname = yyvsp[-1].string; ;
    break;}
case 49:
#line 435 "plugins/csstdldr/stdparse.y"
{ SECTOR.texlen = yyvsp[-1].fval; ;
    break;}
case 50:
#line 437 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 51:
#line 439 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 52:
#line 441 "plugins/csstdldr/stdparse.y"
{ printf ("STATBSP ()\n"); ;
    break;}
case 53:
#line 443 "plugins/csstdldr/stdparse.y"
{ printf ("THING '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 54:
#line 445 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 55:
#line 447 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 56:
#line 449 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 57:
#line 452 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 58:
#line 454 "plugins/csstdldr/stdparse.y"
{ printf ("SKYDOME (...)\n"); ;
    break;}
case 59:
#line 456 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 60:
#line 458 "plugins/csstdldr/stdparse.y"
{ printf ("NODE (...)\n"); ;
    break;}
case 63:
#line 468 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 64:
#line 470 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 65:
#line 472 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 68:
#line 482 "plugins/csstdldr/stdparse.y"
{ printf ("POSITION (...)\n"); ;
    break;}
case 69:
#line 484 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 72:
#line 496 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmORIGIN;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 73:
#line 501 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.first.Set (yyvsp[-1].vect);
  ;
    break;}
case 74:
#line 506 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.second.Set (yyvsp[-1].vect);
  ;
    break;}
case 75:
#line 511 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.first_len = yyvsp[-1].fval;
  ;
    break;}
case 76:
#line 516 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmFIRSTSECOND;
    PLANE.second_len = yyvsp[-1].fval;
  ;
    break;}
case 77:
#line 521 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmVECTORS;
    PLANE.first = yyvsp[-1].vect;
    PLANE.first_len = 1.0;
  ;
    break;}
case 78:
#line 527 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmVECTORS;
    PLANE.second = yyvsp[-1].vect;
    PLANE.second_len = 1.0;
  ;
    break;}
case 79:
#line 533 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmMATRIX;
    PLANE.matrix.Set (*yyvsp[-1].matrix);
  ;
    break;}
case 80:
#line 538 "plugins/csstdldr/stdparse.y"
{
    PLANE.mode |= pmMATRIX;
    PLANE.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 83:
#line 554 "plugins/csstdldr/stdparse.y"
{ printf ("<pos> <radius> <color> <dynamic-flag>\n"); ;
    break;}
case 84:
#line 556 "plugins/csstdldr/stdparse.y"
{ printf ("CENTER (...)\n"); ;
    break;}
case 85:
#line 558 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 86:
#line 560 "plugins/csstdldr/stdparse.y"
{ printf ("DYNAMIC ()\n"); ;
    break;}
case 87:
#line 562 "plugins/csstdldr/stdparse.y"
{ printf ("COLOR ( ... )\n"); ;
    break;}
case 88:
#line 564 "plugins/csstdldr/stdparse.y"
{ printf ("HALO (%g,%g)\n", yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 96:
#line 584 "plugins/csstdldr/stdparse.y"
{ printf ("THING ('%s')\n", yyvsp[-1].string); ;
    break;}
case 97:
#line 586 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION ('%s')\n", yyvsp[-1].string); ;
    break;}
case 98:
#line 588 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT ('%s':%g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 99:
#line 590 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER ('%s', '%s' -> '%s')\n", yyvsp[-6].string, yyvsp[-4].string, yyvsp[-1].string); ;
    break;}
case 100:
#line 592 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 103:
#line 604 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON_tpl '%s' ()\n", yyvsp[-3].string); ;
    break;}
case 104:
#line 606 "plugins/csstdldr/stdparse.y"
{ printf ("VERTEX (%g,%g,%g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 105:
#line 608 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 106:
#line 610 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 107:
#line 612 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 108:
#line 614 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 109:
#line 616 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX ()\n"); ;
    break;}
case 110:
#line 619 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 111:
#line 621 "plugins/csstdldr/stdparse.y"
{ printf ("BEZIER '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 112:
#line 623 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECENTER (...)\n"); ;
    break;}
case 113:
#line 625 "plugins/csstdldr/stdparse.y"
{ printf ("CURVESCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 114:
#line 627 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECONTROL (...)\n"); ;
    break;}
case 118:
#line 638 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 119:
#line 640 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 120:
#line 642 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 121:
#line 644 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 122:
#line 646 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE ()\n"); ;
    break;}
case 123:
#line 648 "plugins/csstdldr/stdparse.y"
{ printf ("TEX_SET_SELECT ('%s')\n", yyvsp[-1].string); ;
    break;}
case 124:
#line 650 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 127:
#line 662 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 128:
#line 664 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 129:
#line 666 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 135:
#line 688 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 136:
#line 690 "plugins/csstdldr/stdparse.y"
{ printf ("FRAME '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 137:
#line 692 "plugins/csstdldr/stdparse.y"
{ printf ("ACTION '%s' ( ... )\n", yyvsp[-3].string); ;
    break;}
case 138:
#line 694 "plugins/csstdldr/stdparse.y"
{ printf ("TRIANGLE (%g,%g,%g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 139:
#line 696 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 140:
#line 698 "plugins/csstdldr/stdparse.y"
{ printf ("MERGE_TEXELS (%d)\n", yyvsp[-1].ival); ;
    break;}
case 143:
#line 717 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g,%g,%g:%g,%g)\n", yyvsp[-3].vect.x, yyvsp[-3].vect.y, yyvsp[-3].vect.z, yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 146:
#line 727 "plugins/csstdldr/stdparse.y"
{ printf ("F ('%s', %g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 149:
#line 737 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 150:
#line 739 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 151:
#line 741 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 152:
#line 743 "plugins/csstdldr/stdparse.y"
{ printf ("MIXMODE (...)\n"); ;
    break;}
case 159:
#line 757 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 164:
#line 771 "plugins/csstdldr/stdparse.y"
{ CAMERA.pos.Set (yyvsp[-1].vect); ;
    break;}
case 165:
#line 773 "plugins/csstdldr/stdparse.y"
{ CAMERA.forward.Set (yyvsp[-1].vect); ;
    break;}
case 166:
#line 775 "plugins/csstdldr/stdparse.y"
{ CAMERA.upward.Set (yyvsp[-1].vect); ;
    break;}
case 167:
#line 777 "plugins/csstdldr/stdparse.y"
{ CAMERA.sector = yyvsp[-1].string;  ;
    break;}
case 168:
#line 792 "plugins/csstdldr/stdparse.y"
{ yyval.string = NULL; ;
    break;}
case 170:
#line 799 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 171:
#line 801 "plugins/csstdldr/stdparse.y"
{ yyval.ival = false; ;
    break;}
case 172:
#line 807 "plugins/csstdldr/stdparse.y"
{ CSCOLOR (yyval.color).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 173:
#line 813 "plugins/csstdldr/stdparse.y"
{ yyval.vect.Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 174:
#line 820 "plugins/csstdldr/stdparse.y"
{ yyval.vect.x = yyval.vect.y = yyval.vect.z = 0; ;
    break;}
case 176:
#line 827 "plugins/csstdldr/stdparse.y"
{ yyval.vect2.Set (yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 177:
#line 835 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Set (yyvsp[-8].fval, yyvsp[-7].fval, yyvsp[-6].fval, yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval);
  ;
    break;}
case 178:
#line 840 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Set (yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval);
  ;
    break;}
case 179:
#line 845 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &storage.matrix2;
    yyval.matrix->Identity ();
  ;
    break;}
case 183:
#line 859 "plugins/csstdldr/stdparse.y"
{ storage.matrix2.Identity (); ;
    break;}
case 184:
#line 861 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csXRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 185:
#line 863 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 186:
#line 865 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csZRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 187:
#line 867 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= yyvsp[-1].fval; ;
    break;}
case 188:
#line 869 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csMatrix3 (yyvsp[-3].fval, 0, 0, 0, yyvsp[-2].fval, 0, 0, 0, yyvsp[-1].fval); ;
    break;}
case 189:
#line 871 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csXScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 190:
#line 873 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 191:
#line 875 "plugins/csstdldr/stdparse.y"
{ storage.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 194:
#line 885 "plugins/csstdldr/stdparse.y"
{
    yyval.transform = &storage;
    yyval.transform->matrix.Identity ();
    yyval.transform->matrix_valid = false;
    yyval.transform->vector_valid = false;
  ;
    break;}
case 198:
#line 901 "plugins/csstdldr/stdparse.y"
{
    storage.matrix = *yyvsp[-1].matrix;
    storage.matrix_valid = true;
  ;
    break;}
case 199:
#line 906 "plugins/csstdldr/stdparse.y"
{
    storage.vector = CSVECTOR3 (yyvsp[-1].vect);
    storage.vector_valid = true;
  ;
    break;}
case 202:
#line 920 "plugins/csstdldr/stdparse.y"
{ polygon.texname = yyvsp[-1].string; ;
    break;}
case 203:
#line 922 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 204:
#line 924 "plugins/csstdldr/stdparse.y"
{
    polygon.mode = pmNONE;
    polygon.first_len = polygon.second_len = polygon.texlen;
  ;
    break;}
case 205:
#line 929 "plugins/csstdldr/stdparse.y"
{  ;
    break;}
case 206:
#line 931 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 207:
#line 933 "plugins/csstdldr/stdparse.y"
{ printf ("GOURAUD ()\n"); ;
    break;}
case 208:
#line 935 "plugins/csstdldr/stdparse.y"
{ printf ("FLATCOL (%g,%g,%g)\n", yyvsp[-1].color.red, yyvsp[-1].color.green, yyvsp[-1].color.blue); ;
    break;}
case 209:
#line 937 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 210:
#line 939 "plugins/csstdldr/stdparse.y"
{ printf ("UV (...)\n"); ;
    break;}
case 211:
#line 941 "plugins/csstdldr/stdparse.y"
{ printf ("UVA (...)\n"); ;
    break;}
case 212:
#line 943 "plugins/csstdldr/stdparse.y"
{ printf ("COLORS (...)\n"); ;
    break;}
case 213:
#line 945 "plugins/csstdldr/stdparse.y"
{ printf ("COSFACT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 214:
#line 947 "plugins/csstdldr/stdparse.y"
{ printf ("CLIP ()\n"); ;
    break;}
case 215:
#line 949 "plugins/csstdldr/stdparse.y"
{ printf ("PORTAL (%s)\n", yyvsp[-1].string); ;
    break;}
case 216:
#line 951 "plugins/csstdldr/stdparse.y"
{ printf ("WARP (...)\n"); ;
    break;}
case 218:
#line 957 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 227:
#line 985 "plugins/csstdldr/stdparse.y"
{ printf ("MATRIX (...)\n"); ;
    break;}
case 228:
#line 987 "plugins/csstdldr/stdparse.y"
{ printf ("V (...)\n"); ;
    break;}
case 229:
#line 989 "plugins/csstdldr/stdparse.y"
{ printf ("W (...)\n"); ;
    break;}
case 230:
#line 991 "plugins/csstdldr/stdparse.y"
{ printf ("MIRROR ()\n"); ;
    break;}
case 231:
#line 993 "plugins/csstdldr/stdparse.y"
{ printf ("STATIC ()\n"); ;
    break;}
case 234:
#line 1004 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmORIGIN;
    polygon.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 235:
#line 1009 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.first.Set (yyvsp[-1].vect);
  ;
    break;}
case 236:
#line 1014 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.second.Set (yyvsp[-1].vect);
  ;
    break;}
case 237:
#line 1019 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.first_len = yyvsp[-1].fval;
  ;
    break;}
case 238:
#line 1024 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmFIRSTSECOND;
    polygon.second_len = yyvsp[-1].fval;
  ;
    break;}
case 239:
#line 1029 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmVECTORS;
    polygon.first = yyvsp[-1].vect;
    polygon.first_len = 1.0;
  ;
    break;}
case 240:
#line 1035 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmVECTORS;
    polygon.second = yyvsp[-1].vect;
    polygon.second_len = 1.0;
  ;
    break;}
case 241:
#line 1041 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmMATRIX;
    polygon.matrix.Set (*yyvsp[-1].matrix);
  ;
    break;}
case 242:
#line 1046 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmMATRIX;
    polygon.origin.Set (yyvsp[-1].vect);
  ;
    break;}
case 243:
#line 1051 "plugins/csstdldr/stdparse.y"
{
    polygon.mode |= pmPLANEREF;
    polygon.planetpl = yyvsp[-1].string;
  ;
    break;}
case 244:
#line 1056 "plugins/csstdldr/stdparse.y"
{ printf ("UV_SHIFT (%g, %g)\n", yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size += 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      /*if (count < 5)*/
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
              char errchar [2];
              if (yychar < 255) { errchar [0] = yychar; errchar [1] = 0; }
              sprintf (strchr (msg, 0), ", got `%s'",
                yychar < 255 ? errchar : yytname [yychar - 255]);
#ifdef YYERROR_EXTENDED
              YYERROR_EXTENDED(msg)
#endif
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1059 "plugins/csstdldr/stdparse.y"
 /* End of grammar */

/* On initialization, register keyword list with the C++ parser */
extern int init_token_table (const char * const *yytname);
struct __parser_init
{
  __parser_init ()
  {
    init_token_table (yytname);
#if YYDEBUG
    yydebug = 1;
#endif
  }
} __parser_init_dummy;
