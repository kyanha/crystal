
/*  A Bison parser, made from plugins/csstdldr/stdparse.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	KW_ACTION	258
#define	KW_ACTIVATE	259
#define	KW_ACTIVE	260
#define	KW_ADD	261
#define	KW_ALPHA	262
#define	KW_ATTENUATION	263
#define	KW_BECOMING_ACTIVE	264
#define	KW_BECOMING_INACTIVE	265
#define	KW_BEZIER	266
#define	KW_CEILING	267
#define	KW_CEIL_TEXTURE	268
#define	KW_CENTER	269
#define	KW_CIRCLE	270
#define	KW_CLIP	271
#define	KW_COLLECTION	272
#define	KW_COLOR	273
#define	KW_COLORS	274
#define	KW_CONVEX	275
#define	KW_COPY	276
#define	KW_COSFACT	277
#define	KW_CURVECENTER	278
#define	KW_CURVECONTROL	279
#define	KW_CURVESCALE	280
#define	KW_DETAIL	281
#define	KW_DIM	282
#define	KW_DITHER	283
#define	KW_DYNAMIC	284
#define	KW_F	285
#define	KW_FILE	286
#define	KW_FILTER	287
#define	KW_FIRST	288
#define	KW_FIRST_LEN	289
#define	KW_FLATCOL	290
#define	KW_FLOOR	291
#define	KW_FLOOR_CEIL	292
#define	KW_FLOOR_HEIGHT	293
#define	KW_FLOOR_TEXTURE	294
#define	KW_FOG	295
#define	KW_FOR_2D	296
#define	KW_FOR_3D	297
#define	KW_FRAME	298
#define	KW_GOURAUD	299
#define	KW_HALO	300
#define	KW_HEIGHT	301
#define	KW_HEIGHTMAP	302
#define	KW_IDENTITY	303
#define	KW_KEY	304
#define	KW_KEYCOLOR	305
#define	KW_LEN	306
#define	KW_LIBRARY	307
#define	KW_LIGHT	308
#define	KW_LIGHTING	309
#define	KW_LIGHTX	310
#define	KW_LIMB	311
#define	KW_MATRIX	312
#define	KW_MERGE_NORMALS	313
#define	KW_MERGE_TEXELS	314
#define	KW_MERGE_VERTICES	315
#define	KW_MIPMAP	316
#define	KW_MIRROR	317
#define	KW_MIXMODE	318
#define	KW_MOVE	319
#define	KW_MOVEABLE	320
#define	KW_MULTIPLY	321
#define	KW_MULTIPLY2	322
#define	KW_NODE	323
#define	KW_ORIG	324
#define	KW_PLANE	325
#define	KW_POLYGON	326
#define	KW_PORTAL	327
#define	KW_POSITION	328
#define	KW_PRIMARY_ACTIVE	329
#define	KW_PRIMARY_INACTIVE	330
#define	KW_RADIUS	331
#define	KW_ROOM	332
#define	KW_ROT	333
#define	KW_ROT_X	334
#define	KW_ROT_Y	335
#define	KW_ROT_Z	336
#define	KW_SCALE	337
#define	KW_SCALE_X	338
#define	KW_SCALE_Y	339
#define	KW_SCALE_Z	340
#define	KW_SCRIPT	341
#define	KW_SECOND	342
#define	KW_SECONDARY_ACTIVE	343
#define	KW_SECONDARY_INACTIVE	344
#define	KW_SECOND_LEN	345
#define	KW_SECTOR	346
#define	KW_SIXFACE	347
#define	KW_SKELETON	348
#define	KW_SKYDOME	349
#define	KW_SOUND	350
#define	KW_SOUNDS	351
#define	KW_SPLIT	352
#define	KW_SPRITE	353
#define	KW_SPRITE2D	354
#define	KW_START	355
#define	KW_STATBSP	356
#define	KW_STATELESS	357
#define	KW_STATIC	358
#define	KW_TEMPLATE	359
#define	KW_TERRAIN	360
#define	KW_TEX	361
#define	KW_TEXLEN	362
#define	KW_TEXNR	363
#define	KW_TEXTURE	364
#define	KW_TEXTURES	365
#define	KW_TEXTURE_LIGHTING	366
#define	KW_TEXTURE_MIPMAP	367
#define	KW_TEXTURE_SCALE	368
#define	KW_TEX_SET	369
#define	KW_TEX_SET_SELECT	370
#define	KW_THING	371
#define	KW_TRANSFORM	372
#define	KW_TRANSPARENT	373
#define	KW_TRIANGLE	374
#define	KW_TRIGGER	375
#define	KW_UV	376
#define	KW_UVA	377
#define	KW_UVEC	378
#define	KW_UV_SHIFT	379
#define	KW_V	380
#define	KW_VERTEX	381
#define	KW_VERTICES	382
#define	KW_VVEC	383
#define	KW_W	384
#define	KW_WARP	385
#define	KW_WORLD	386
#define	KW_yes	387
#define	KW_no	388
#define	KW_none	389
#define	KW_linear	390
#define	KW_inverse	391
#define	KW_realistic	392
#define	STRING	393
#define	NUMBER	394

#line 20 "plugins/csstdldr/stdparse.y"
 /* Startup C++ code */

#include "sysdef.h"
#include "stdldr.h"
#include "csutil/cscolor.h"
#include "csgeom/math2d.h"
#include "csgeom/math3d.h"

#include "iworld.h"
#include "itxtmgr.h"

// Unfortunately we can't make yyparse a member function because of the
// dumb prototype definition in bison.simple :-(
//#define yyparse csStandardLoader::yyparse

#define YYPARSE_PARAM ldr
#define THIS	((csStandardLoader *)ldr)
#define yyerror THIS->yyerror
#define yylex   THIS->yylex

/* Define this to debug parser */
//#define YYDEBUG	1

// Macros for accessing yylval as different data types
#define CSCOLOR(x)	(*(csColor *)&x)
#define CSVECTOR2(x)	(*(csVector2 *)&x)
#define CSVECTOR3(x)	(*(csVector3 *)&x)

// More shortcuts
#define STORAGE		THIS->storage
#define TEX		THIS->storage.tex


#line 69 "plugins/csstdldr/stdparse.y"
typedef union
{
  // Just a number
  float fval;
  // A integer number
  int ival;
  // A boolean value
  bool bval;
  // A string value
  char *string;
  // A color
  csPColor color;
  // A 2D point
  struct { float x, y; } vect2;
  // A 3D point
  struct { float x, y, z; } vect;
  // A transformation matrix
  csMatrix3 *matrix;
  // A transformation matrix/vector
  csStandardLoader::yystorage *transform;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1077
#define	YYFLAG		-32768
#define	YYNTBASE	147

#define YYTRANSLATE(x) ((unsigned)(x) <= 395 ? yytranslate[x] : 234)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   140,
   141,     2,     2,   143,   144,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   142,     2,     2,
     2,   145,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   146
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     8,     9,    16,    17,    20,    25,    26,    33,
    38,    43,    48,    54,    60,    66,    72,    80,    86,    92,
    98,   104,   110,   111,   114,   115,   122,   123,   126,   127,
   133,   138,   143,   148,   153,   158,   159,   162,   168,   169,
   172,   177,   179,   182,   187,   192,   197,   202,   207,   212,
   219,   222,   228,   234,   240,   246,   252,   260,   265,   272,
   277,   279,   282,   287,   292,   297,   299,   302,   307,   314,
   316,   319,   324,   329,   334,   339,   344,   349,   354,   359,
   364,   365,   366,   368,   371,   376,   381,   388,   398,   403,
   404,   407,   412,   417,   426,   435,   444,   453,   462,   471,
   473,   476,   482,   487,   492,   497,   502,   507,   513,   516,
   524,   530,   535,   540,   547,   549,   552,   554,   561,   566,
   573,   578,   581,   586,   591,   593,   596,   601,   606,   611,
   613,   616,   618,   620,   623,   628,   634,   640,   647,   652,
   657,   658,   661,   668,   669,   672,   679,   681,   684,   689,
   694,   699,   705,   710,   715,   722,   727,   734,   739,   744,
   760,   776,   792,   799,   804,   807,   812,   818,   824,   829,
   839,   845,   851,   853,   856,   861,   866,   871,   873,   876,
   881,   886,   891,   896,   897,   900,   902,   905,   910,   917,
   922,   927,   929,   932,   935,   938,   941,   944,   949,   952,
   955,   957,   960,   965,   970,   975,   980,   987,   992,   997,
  1013,  1018,  1034,  1050,  1056,  1059,  1061,  1064,  1066,  1073,
  1078,  1081,  1082,  1084,  1086,  1088,  1092,  1096,  1098,  1100,
  1103,  1113,  1115,  1116,  1119,  1121,  1124,  1127,  1132,  1137,
  1142,  1147,  1154,  1159,  1164,  1169,  1170,  1173,  1174,  1177,
  1179,  1182,  1187,  1192,  1194,  1197,  1202,  1207,  1212,  1217,
  1220,  1225,  1230,  1235,  1240,  1245,  1250,  1253,  1258,  1263,
  1268,  1269,  1272,  1273,  1276,  1277,  1281,  1282,  1287,  1289,
  1292,  1297,  1302,  1307,  1310,  1313,  1315,  1318,  1323,  1328,
  1333,  1338,  1343,  1348,  1353,  1358,  1363,  1368,  1373,  1378,
  1380,  1383,  1389,  1394,  1399,  1402,  1407,  1413,  1418,  1420,
  1422,  1424
};

static const short yyrhs[] = {    -1,
   131,   206,   140,   148,   150,   141,     0,     0,    52,   206,
   140,   149,   150,   141,     0,     0,   150,   151,     0,   110,
   140,   153,   141,     0,     0,   114,   206,   140,   152,   153,
   141,     0,    52,   140,   138,   141,     0,    96,   140,   159,
   141,     0,   100,   140,   171,   141,     0,    91,   206,   140,
   163,   141,     0,    70,   206,   140,   169,   141,     0,    49,
   206,   140,   172,   141,     0,    17,   206,   140,   173,   141,
     0,    86,   206,   140,   138,   142,   138,   141,     0,    55,
   206,   140,   175,   141,     0,   116,   206,   140,   177,   141,
     0,    98,   206,   140,   185,   141,     0,    77,   206,   140,
   191,   141,     0,    92,   206,   140,   202,   141,     0,     0,
   153,   154,     0,     0,   109,   206,   155,   140,   156,   141,
     0,     0,   156,   157,     0,     0,    61,   140,   207,   141,
   158,     0,    28,   140,   207,   141,     0,    31,   140,   138,
   141,     0,   118,   140,   208,   141,     0,    42,   140,   207,
   141,     0,    41,   140,   207,   141,     0,     0,   159,   160,
     0,    95,   206,   140,   161,   141,     0,     0,   161,   162,
     0,    31,   140,   138,   141,     0,   164,     0,   163,   164,
     0,   126,   140,   209,   141,     0,    71,   140,   221,   141,
     0,   108,   140,   138,   141,     0,   107,   140,   139,   141,
     0,    55,   140,   138,   141,     0,     4,   140,   138,   141,
     0,   120,   140,   138,   143,   138,   141,     0,   101,   216,
     0,   116,   206,   140,   179,   141,     0,    92,   206,   140,
   204,   141,     0,    53,   206,   140,   231,   141,     0,    98,
   206,   140,   198,   141,     0,    40,   140,   208,   139,   141,
     0,    15,   140,   209,   142,   209,   139,   141,     0,    94,
   140,   165,   141,     0,    49,   140,   138,   143,   138,   141,
     0,    68,   140,   167,   141,     0,   166,     0,   165,   166,
     0,    76,   140,   139,   141,     0,   127,   140,   224,   141,
     0,    54,   140,   207,   141,     0,   168,     0,   167,   168,
     0,    73,   140,   209,   141,     0,    49,   140,   138,   143,
   138,   141,     0,   170,     0,   169,   170,     0,    69,   140,
   210,   141,     0,    33,   140,   210,   141,     0,    87,   140,
   210,   141,     0,    34,   140,   139,   141,     0,    90,   140,
   139,   141,     0,   123,   140,   209,   141,     0,   128,   140,
   209,   141,     0,    57,   140,   212,   141,     0,   125,   140,
   209,   141,     0,     0,     0,   174,     0,   173,   174,     0,
   116,   140,   138,   141,     0,    17,   140,   138,   141,     0,
    53,   140,   138,   143,   139,   141,     0,   120,   140,   138,
   143,   138,   144,   145,   138,   141,     0,    91,   140,   138,
   141,     0,     0,   175,   176,     0,     5,   140,   139,   141,
     0,   102,   140,   139,   141,     0,    74,   140,   139,   139,
   139,   139,   139,   141,     0,    88,   140,   139,   139,   139,
   139,   139,   141,     0,     9,   140,   139,   139,   139,   139,
   139,   141,     0,    75,   140,   139,   139,   139,   139,   139,
   141,     0,    89,   140,   139,   139,   139,   139,   139,   141,
     0,    10,   140,   139,   139,   139,   139,   139,   141,     0,
   178,     0,   177,   178,     0,    71,   206,   140,   221,   141,
     0,   126,   140,   209,   141,     0,   108,   140,   138,   141,
     0,   107,   140,   139,   141,     0,    55,   140,   138,   141,
     0,    64,   140,   217,   141,     0,    40,   140,   208,   139,
   141,     0,    20,   216,     0,    15,   140,   209,   142,   209,
   139,   141,     0,    11,   206,   140,   181,   141,     0,    23,
   140,   209,   141,     0,    25,   140,   139,   141,     0,    24,
   140,   209,   142,   211,   141,     0,   180,     0,   179,   180,
     0,   178,     0,    49,   140,   138,   143,   138,   141,     0,
     4,   140,   138,   141,     0,   120,   140,   138,   143,   138,
   141,     0,   104,   140,   138,   141,     0,    65,   216,     0,
   115,   140,   138,   141,     0,    31,   140,   138,   141,     0,
   182,     0,   181,   182,     0,   108,   140,   138,   141,     0,
   109,   140,   183,   141,     0,   127,   140,   224,   141,     0,
   184,     0,   183,   184,     0,   146,     0,   186,     0,   185,
   186,     0,   108,   140,   138,   141,     0,    43,   206,   140,
   187,   141,     0,     3,   206,   140,   189,   141,     0,   119,
   140,   139,   139,   139,   141,     0,    31,   140,   138,   141,
     0,    59,   140,   207,   141,     0,     0,   187,   188,     0,
   125,   140,   209,   142,   211,   141,     0,     0,   189,   190,
     0,    30,   140,   138,   143,   139,   141,     0,   192,     0,
   191,   192,     0,   111,   140,   207,   141,     0,   113,   140,
   139,   141,     0,   109,   140,   138,   141,     0,   106,   206,
   140,   193,   141,     0,    13,   140,   138,   141,     0,    39,
   140,   138,   141,     0,    55,   140,   138,   143,   138,   141,
     0,    53,   140,   231,   141,     0,    27,   140,   139,   139,
   139,   141,     0,    46,   140,   139,   141,     0,    38,   140,
   139,   141,     0,    37,   140,   140,   211,   141,   140,   211,
   141,   140,   211,   141,   140,   211,   141,   141,     0,    36,
   140,   140,   209,   141,   140,   209,   141,   140,   209,   141,
   140,   209,   141,   141,     0,    12,   140,   140,   209,   141,
   140,   209,   141,   140,   209,   141,   140,   209,   141,   141,
     0,   120,   140,   138,   143,   138,   141,     0,     4,   140,
   138,   141,     0,   101,   216,     0,    64,   140,   217,   141,
     0,    92,   206,   140,   204,   141,     0,   116,   206,   140,
   179,   141,     0,    72,   140,   195,   141,     0,    97,   140,
   138,   143,   138,   140,   197,   141,   141,     0,    98,   206,
   140,   198,   141,     0,    40,   140,   208,   139,   141,     0,
   194,     0,   193,   194,     0,   109,   140,   138,   141,     0,
    70,   140,   138,   141,     0,    51,   140,   139,   141,     0,
   196,     0,   195,   196,     0,    71,   140,   138,   141,     0,
    91,   140,   138,   141,     0,     7,   140,   139,   141,     0,
   130,   140,   227,   141,     0,     0,   197,   139,     0,   199,
     0,   198,   199,     0,    64,   140,   217,   141,     0,   104,
   140,   138,   143,   138,   141,     0,   108,   140,   138,   141,
     0,    63,   140,   200,   141,     0,   201,     0,   200,   201,
     0,    21,   216,     0,    66,   216,     0,    67,   216,     0,
     6,   216,     0,     7,   140,   139,   141,     0,   118,   216,
     0,    50,   216,     0,   203,     0,   202,   203,     0,    64,
   140,   217,   141,     0,   113,   140,   139,   141,     0,   109,
   140,   138,   141,     0,    13,   140,   138,   141,     0,    27,
   140,   139,   139,   139,   141,     0,    46,   140,   139,   141,
     0,    38,   140,   139,   141,     0,    37,   140,   140,   211,
   141,   140,   211,   141,   140,   211,   141,   140,   211,   141,
   141,     0,    39,   140,   138,   141,     0,    36,   140,   140,
   209,   141,   140,   209,   141,   140,   209,   141,   140,   209,
   141,   141,     0,    12,   140,   140,   209,   141,   140,   209,
   141,   140,   209,   141,   140,   209,   141,   141,     0,    40,
   140,   208,   139,   141,     0,    20,   216,     0,   205,     0,
   204,   205,     0,   203,     0,   120,   140,   138,   143,   138,
   141,     0,     4,   140,   138,   141,     0,    65,   216,     0,
     0,   138,     0,   132,     0,   133,     0,   139,   139,   139,
     0,   139,   139,   139,     0,   139,     0,   209,     0,   139,
   139,     0,   139,   139,   139,   139,   139,   139,   139,   139,
   139,     0,   139,     0,     0,   213,   214,     0,   215,     0,
   214,   215,     0,    48,   216,     0,    79,   140,   139,   141,
     0,    80,   140,   139,   141,     0,    81,   140,   139,   141,
     0,    82,   140,   139,   141,     0,    82,   140,   139,   139,
   139,   141,     0,    83,   140,   139,   141,     0,    84,   140,
   139,   141,     0,    85,   140,   139,   141,     0,     0,   140,
   141,     0,     0,   218,   219,     0,   220,     0,   219,   220,
     0,    57,   140,   212,   141,     0,   125,   140,   209,   141,
     0,   222,     0,   221,   222,     0,   108,   140,   138,   141,
     0,    54,   140,   207,   141,     0,   109,   140,   229,   141,
     0,   127,   140,   224,   141,     0,    44,   216,     0,    35,
   140,   208,   141,     0,     7,   140,   139,   141,     0,   121,
   140,   225,   141,     0,   122,   140,   226,   141,     0,    19,
   140,   223,   141,     0,    22,   140,   139,   141,     0,    16,
   216,     0,    72,   140,   138,   141,     0,   130,   140,   227,
   141,     0,    55,   140,   138,   141,     0,     0,   223,   208,
     0,     0,   224,   139,     0,     0,   225,   139,   139,     0,
     0,   226,   139,   139,   139,     0,   228,     0,   227,   228,
     0,    57,   140,   212,   141,     0,   125,   140,   209,   141,
     0,   129,   140,   209,   141,     0,    62,   216,     0,   103,
   216,     0,   230,     0,   229,   230,     0,    69,   140,   210,
   141,     0,    33,   140,   210,   141,     0,    87,   140,   210,
   141,     0,    34,   140,   139,   141,     0,    90,   140,   139,
   141,     0,   123,   140,   209,   141,     0,   128,   140,   209,
   141,     0,    57,   140,   212,   141,     0,   125,   140,   209,
   141,     0,   107,   140,   139,   141,     0,    70,   140,   138,
   141,     0,   124,   140,   211,   141,     0,   232,     0,   231,
   232,     0,   209,   142,   139,   208,   139,     0,    14,   140,
   209,   141,     0,    76,   140,   139,   141,     0,    29,   216,
     0,    18,   140,   208,   141,     0,    45,   140,   139,   139,
   141,     0,     8,   140,   233,   141,     0,   134,     0,   135,
     0,   136,     0,   137,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   259,   262,   263,   265,   270,   272,   275,   277,   279,   281,
   283,   285,   287,   289,   291,   293,   295,   297,   299,   301,
   303,   305,   311,   313,   316,   319,   323,   325,   328,   330,
   336,   343,   345,   347,   354,   365,   367,   370,   374,   376,
   379,   385,   387,   390,   393,   395,   397,   399,   401,   403,
   405,   407,   409,   411,   413,   415,   417,   420,   422,   424,
   428,   430,   433,   436,   438,   442,   444,   447,   450,   456,
   458,   461,   463,   464,   465,   466,   467,   468,   469,   474,
   479,   484,   489,   491,   494,   497,   499,   501,   503,   509,
   511,   514,   516,   517,   519,   521,   523,   525,   527,   533,
   535,   538,   541,   543,   545,   547,   549,   551,   553,   555,
   558,   560,   562,   564,   568,   570,   573,   575,   577,   579,
   581,   583,   585,   587,   591,   593,   596,   599,   601,   605,
   607,   610,   617,   619,   622,   625,   627,   629,   631,   633,
   646,   648,   651,   656,   658,   661,   668,   670,   673,   676,
   678,   680,   682,   684,   686,   688,   690,   692,   694,   696,
   701,   707,   709,   711,   713,   715,   717,   719,   721,   723,
   725,   727,   731,   733,   736,   739,   741,   745,   747,   750,
   753,   755,   757,   761,   763,   766,   768,   771,   774,   776,
   778,   782,   784,   787,   789,   790,   791,   792,   794,   795,
   800,   802,   805,   808,   810,   812,   814,   816,   818,   820,
   825,   827,   833,   835,   837,   841,   843,   846,   848,   850,
   852,   866,   869,   873,   875,   879,   884,   889,   891,   895,
   900,   908,   913,   919,   921,   923,   926,   929,   931,   933,
   935,   937,   939,   941,   943,   947,   949,   953,   961,   963,
   965,   968,   974,   982,   984,   987,   990,   992,   994,   996,
   998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,
  1020,  1022,  1026,  1028,  1031,  1033,  1037,  1039,  1044,  1046,
  1049,  1052,  1054,  1056,  1058,  1063,  1065,  1068,  1070,  1071,
  1072,  1073,  1074,  1075,  1076,  1081,  1082,  1084,  1086,  1090,
  1092,  1095,  1099,  1101,  1103,  1105,  1107,  1109,  1112,  1114,
  1115,  1116
};
#endif

#define YYNTOKENS 147
#define YYNNTS 87
#define YYNRULES 312
#define YYNSTATES 1078
#define YYMAXUTOK 395

static const char * const yytname[] = {   "$","error","$undefined.","KW_ACTION",
"KW_ACTIVATE","KW_ACTIVE","KW_ADD","KW_ALPHA","KW_ATTENUATION","KW_BECOMING_ACTIVE",
"KW_BECOMING_INACTIVE","KW_BEZIER","KW_CEILING","KW_CEIL_TEXTURE","KW_CENTER",
"KW_CIRCLE","KW_CLIP","KW_COLLECTION","KW_COLOR","KW_COLORS","KW_CONVEX","KW_COPY",
"KW_COSFACT","KW_CURVECENTER","KW_CURVECONTROL","KW_CURVESCALE","KW_DETAIL",
"KW_DIM","KW_DITHER","KW_DYNAMIC","KW_F","KW_FILE","KW_FILTER","KW_FIRST","KW_FIRST_LEN",
"KW_FLATCOL","KW_FLOOR","KW_FLOOR_CEIL","KW_FLOOR_HEIGHT","KW_FLOOR_TEXTURE",
"KW_FOG","KW_FOR_2D","KW_FOR_3D","KW_FRAME","KW_GOURAUD","KW_HALO","KW_HEIGHT",
"KW_HEIGHTMAP","KW_IDENTITY","KW_KEY","KW_KEYCOLOR","KW_LEN","KW_LIBRARY","KW_LIGHT",
"KW_LIGHTING","KW_LIGHTX","KW_LIMB","KW_MATRIX","KW_MERGE_NORMALS","KW_MERGE_TEXELS",
"KW_MERGE_VERTICES","KW_MIPMAP","KW_MIRROR","KW_MIXMODE","KW_MOVE","KW_MOVEABLE",
"KW_MULTIPLY","KW_MULTIPLY2","KW_NODE","KW_ORIG","KW_PLANE","KW_POLYGON","KW_PORTAL",
"KW_POSITION","KW_PRIMARY_ACTIVE","KW_PRIMARY_INACTIVE","KW_RADIUS","KW_ROOM",
"KW_ROT","KW_ROT_X","KW_ROT_Y","KW_ROT_Z","KW_SCALE","KW_SCALE_X","KW_SCALE_Y",
"KW_SCALE_Z","KW_SCRIPT","KW_SECOND","KW_SECONDARY_ACTIVE","KW_SECONDARY_INACTIVE",
"KW_SECOND_LEN","KW_SECTOR","KW_SIXFACE","KW_SKELETON","KW_SKYDOME","KW_SOUND",
"KW_SOUNDS","KW_SPLIT","KW_SPRITE","KW_SPRITE2D","KW_START","KW_STATBSP","KW_STATELESS",
"KW_STATIC","KW_TEMPLATE","KW_TERRAIN","KW_TEX","KW_TEXLEN","KW_TEXNR","KW_TEXTURE",
"KW_TEXTURES","KW_TEXTURE_LIGHTING","KW_TEXTURE_MIPMAP","KW_TEXTURE_SCALE","KW_TEX_SET",
"KW_TEX_SET_SELECT","KW_THING","KW_TRANSFORM","KW_TRANSPARENT","KW_TRIANGLE",
"KW_TRIGGER","KW_UV","KW_UVA","KW_UVEC","KW_UV_SHIFT","KW_V","KW_VERTEX","KW_VERTICES",
"KW_VVEC","KW_W","KW_WARP","KW_WORLD","KW_yes","KW_no","KW_none","KW_linear",
"KW_inverse","KW_realistic","STRING","NUMBER","'('","')'","':'","','","'-'",
"'>'","\"unused\"","input","@1","@2","world_ops","world_op","@3","textures",
"texture","@4","texture_ops","texture_op","@5","sounds","sound","sound_ops",
"sound_op","sector_ops","sector_op","skydome_ops","skydome_op","node_ops","node_op",
"plane_ops","plane_op","start","key","collection_ops","collection_op","lightx",
"lightx_desc","thing_tpl_ops","thing_tpl_op","thing_ops","thing_op","bezier_ops",
"bezier_op","bezier_texture_ops","bezier_texture_op","sprite_tpl_ops","sprite_tpl_op",
"sprite_verts","sprite_vert","sprite_actions","sprite_action","room_ops","room_op",
"room_tex_ops","room_tex_op","room_portal_ops","room_portal_op","split_list",
"sprite_ops","sprite_op","mixmode_ops","mixmode_op","sixface_tpl_ops","sixface_tpl_op",
"sixface_ops","sixface_op","name","yesno","color","vector","vect_idx","vector2",
"matrix","@6","matrix_ops","matrix_op","noargs","move","@7","move_ops","move_op",
"polygon_ops","polygon_op","colors","vertex_indices","tex_coordinates","uva_coordinates",
"warp_ops","warp_op","polygon_texture_ops","polygon_texture_op","light_ops",
"light_op","attenuation_op", NULL
};
static const short yytoknum[] = { 0,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
   356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
   366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
   376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
   386,   387,   388,   389,   390,   391,   392,   393,   394,    40,
    41,    58,    44,    45,    62,   395,     0
};

static const short yyr1[] = {     0,
   148,   147,   149,   147,   150,   150,   151,   152,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   153,   153,   155,   154,   156,   156,   158,   157,
   157,   157,   157,   157,   157,   159,   159,   160,   161,   161,
   162,   163,   163,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   165,   165,   166,   166,   166,   167,   167,   168,   168,   169,
   169,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   171,   172,   173,   173,   174,   174,   174,   174,   174,   175,
   175,   176,   176,   176,   176,   176,   176,   176,   176,   177,
   177,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   179,   179,   180,   180,   180,   180,
   180,   180,   180,   180,   181,   181,   182,   182,   182,   183,
   183,   184,   185,   185,   186,   186,   186,   186,   186,   186,
   187,   187,   188,   189,   189,   190,   191,   191,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   193,   194,   194,   194,   195,   195,   196,
   196,   196,   196,   197,   197,   198,   198,   199,   199,   199,
   199,   200,   200,   201,   201,   201,   201,   201,   201,   201,
   202,   202,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   204,   204,   205,   205,   205,
   205,   206,   206,   207,   207,   208,   209,   210,   210,   211,
   212,   212,   213,   212,   214,   214,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   216,   216,   218,   217,   219,
   219,   220,   220,   221,   221,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   223,   223,   224,   224,   225,   225,   226,   226,   227,   227,
   228,   228,   228,   228,   228,   229,   229,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   231,
   231,   232,   232,   232,   232,   232,   232,   232,   233,   233,
   233,   233
};

static const short yyr2[] = {     0,
     0,     6,     0,     6,     0,     2,     4,     0,     6,     4,
     4,     4,     5,     5,     5,     5,     7,     5,     5,     5,
     5,     5,     0,     2,     0,     6,     0,     2,     0,     5,
     4,     4,     4,     4,     4,     0,     2,     5,     0,     2,
     4,     1,     2,     4,     4,     4,     4,     4,     4,     6,
     2,     5,     5,     5,     5,     5,     7,     4,     6,     4,
     1,     2,     4,     4,     4,     1,     2,     4,     6,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     0,     0,     1,     2,     4,     4,     6,     9,     4,     0,
     2,     4,     4,     8,     8,     8,     8,     8,     8,     1,
     2,     5,     4,     4,     4,     4,     4,     5,     2,     7,
     5,     4,     4,     6,     1,     2,     1,     6,     4,     6,
     4,     2,     4,     4,     1,     2,     4,     4,     4,     1,
     2,     1,     1,     2,     4,     5,     5,     6,     4,     4,
     0,     2,     6,     0,     2,     6,     1,     2,     4,     4,
     4,     5,     4,     4,     6,     4,     6,     4,     4,    15,
    15,    15,     6,     4,     2,     4,     5,     5,     4,     9,
     5,     5,     1,     2,     4,     4,     4,     1,     2,     4,
     4,     4,     4,     0,     2,     1,     2,     4,     6,     4,
     4,     1,     2,     2,     2,     2,     2,     4,     2,     2,
     1,     2,     4,     4,     4,     4,     6,     4,     4,    15,
     4,    15,    15,     5,     2,     1,     2,     1,     6,     4,
     2,     0,     1,     1,     1,     3,     3,     1,     1,     2,
     9,     1,     0,     2,     1,     2,     2,     4,     4,     4,
     4,     6,     4,     4,     4,     0,     2,     0,     2,     1,
     2,     4,     4,     1,     2,     4,     4,     4,     4,     2,
     4,     4,     4,     4,     4,     4,     2,     4,     4,     4,
     0,     2,     0,     2,     0,     3,     0,     4,     1,     2,
     4,     4,     4,     2,     2,     1,     2,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     1,
     2,     5,     4,     4,     2,     4,     5,     4,     1,     1,
     1,     1
};

static const short yydefact[] = {     0,
   222,   222,   223,     0,     0,     3,     1,     5,     5,     0,
     0,   222,   222,     0,   222,   222,   222,   222,   222,   222,
     0,   222,     0,     0,   222,   222,     4,     6,     2,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
    81,    23,     0,     0,     0,    82,     0,    90,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     0,     0,
     0,     0,     0,     0,     0,    83,     0,    10,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    70,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   222,     0,   222,   246,   222,     0,
     0,     0,   222,     0,     0,   147,     0,     0,     0,     0,
     0,   222,     0,     0,     0,   222,     0,   222,   246,     0,
     0,   222,     0,     0,     0,    42,     0,     0,   246,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   201,   222,    11,    37,   222,     0,   222,     0,     0,     0,
     0,   133,    12,   222,     7,    24,    23,   222,     0,   246,
     0,     0,     0,     0,     0,     0,   222,     0,     0,     0,
     0,   100,     0,     0,     0,     0,     0,    16,    84,    15,
     0,     0,     0,     0,     0,     0,     0,     0,    18,    91,
     0,     0,   233,     0,     0,     0,     0,     0,     0,    14,
    71,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   248,     0,     0,     0,     0,     0,   165,
     0,     0,     0,     0,     0,     0,    21,   148,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    51,     0,     0,     0,     0,     0,    13,    43,     0,     0,
   215,     0,     0,     0,     0,     0,     0,     0,   248,     0,
     0,    22,   202,     0,     0,     0,     0,     0,     0,     0,
    20,   134,    25,     0,     0,     0,   109,     0,     0,     0,
     0,     0,   248,     0,     0,     0,     0,    19,   101,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   228,   229,     0,     0,   232,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   246,     0,     0,     0,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,   178,     0,     0,     0,   247,     0,
     0,   224,   225,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    66,     0,   246,
     0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   254,     0,     0,     0,     0,     0,
    61,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    39,
   144,     0,   141,     0,     0,     0,     0,     9,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    86,     0,    89,    85,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    73,    75,     0,    79,   246,     0,
     0,     0,     0,     0,     0,     0,   234,   235,    72,    74,
    76,    77,    80,    78,   164,     0,   153,     0,     0,     0,
     0,   159,   154,     0,     0,   158,     0,     0,     0,   305,
     0,     0,     0,   156,   301,     0,   166,     0,     0,   249,
   250,     0,     0,     0,     0,   169,   179,     0,   246,     0,
   218,     0,   216,     0,     0,     0,     0,     0,     0,   186,
     0,     0,     0,     0,   173,   151,   149,   150,     0,     0,
     0,   246,     0,     0,     0,   117,     0,   115,     0,    17,
    49,     0,     0,     0,     0,    48,     0,     0,    60,    67,
     0,   267,   271,     0,     0,   260,     0,     0,     0,     0,
     0,   275,   277,   273,     0,    45,   255,     0,     0,     0,
   273,    58,    62,     0,    47,    46,     0,     0,    44,     0,
   206,     0,     0,     0,   209,   211,     0,   208,   203,   205,
   204,     0,     0,   139,     0,   140,   135,     0,    27,     0,
     0,     0,     0,   125,     0,   112,     0,   113,     0,   106,
   107,     0,   105,   104,   103,     0,     0,    92,     0,     0,
     0,     0,     0,     0,    93,   227,     0,   237,     0,     0,
     0,     0,     0,     0,     0,   236,     0,     0,     0,   230,
     0,   226,   172,   309,   310,   311,   312,     0,     0,     0,
     0,     0,     0,     0,   233,     0,   251,     0,     0,     0,
     0,   246,   246,     0,     0,     0,   279,     0,   221,     0,
   167,   217,     0,     0,   248,     0,     0,   171,   187,     0,
     0,     0,   152,   174,     0,     0,     0,   122,     0,     0,
     0,   168,   116,     0,     0,    56,     0,    54,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   286,     0,     0,     0,     0,    53,     0,     0,     0,
    55,    52,     0,     0,     0,     0,     0,   214,     0,    38,
    40,     0,   137,   145,     0,   136,   142,     0,     0,     0,
     0,   273,   111,   126,     0,     0,   108,   102,    87,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   157,     0,     0,   308,   303,
   306,     0,   304,     0,   155,     0,     0,   182,   180,   181,
   233,   284,   285,     0,     0,   183,   280,     0,     0,   184,
   246,     0,   246,   246,   246,   246,   246,     0,   192,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   163,     0,    59,     0,    68,   262,   265,   272,   266,
   261,   257,   270,   268,   256,     0,     0,   233,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   258,   287,     0,
   263,     0,   264,   274,   259,   269,    65,    63,    64,    50,
     0,   207,     0,     0,     0,     0,     0,   138,     0,     0,
     0,     0,     0,     0,    26,    28,     0,   132,     0,   130,
     0,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,   238,   239,   240,     0,   241,   243,   244,   245,     0,
     0,     0,   307,   302,   252,   253,     0,     0,     0,   220,
     0,     0,   197,     0,   194,   200,   195,   196,   199,   191,
   193,   188,     0,   190,   177,   176,   175,   119,   124,     0,
   121,   123,     0,    57,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   276,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   127,   128,   131,   129,   110,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   281,   282,
   283,     0,   185,     0,     0,     0,     0,     0,    69,   289,
   291,   295,   288,   298,   290,   292,   297,   293,   299,   296,
   294,   278,     0,     0,     0,    41,     0,     0,     0,     0,
     0,     0,     0,     0,    88,    96,    99,    94,    97,    95,
    98,     0,   242,     0,     0,     0,   219,   170,   198,   189,
   118,   120,     0,     0,     0,     0,     0,    31,    32,    35,
    34,    29,    33,     0,     0,     0,     0,     0,     0,     0,
   146,   143,    30,   231,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   162,   161,
   160,   213,   212,   210,     0,     0,     0
};

static const short yydefgoto[] = {  1075,
     9,     8,    10,    28,   157,    57,   156,   417,   739,   866,
  1043,    54,   144,   582,   731,   125,   126,   390,   391,   367,
   368,    79,    80,    56,    67,    65,    66,    69,   190,   171,
   526,   527,   528,   593,   594,   869,   870,   151,   152,   585,
   737,   583,   734,   105,   106,   514,   515,   344,   345,   902,
   509,   510,   798,   799,   140,   501,   502,   503,     4,   354,
   326,   304,   305,   471,   308,   309,   457,   458,   220,   338,
   339,   490,   491,   384,   385,   692,   715,   713,   714,   656,
   657,   711,   712,   335,   336,   638
};

static const short yypact[] = {   -32,
  -113,  -113,-32768,  -107,   -74,-32768,-32768,-32768,-32768,   338,
   683,  -113,  -113,   -21,  -113,  -113,  -113,  -113,  -113,  -113,
     2,  -113,    11,    18,  -113,  -113,-32768,-32768,-32768,    29,
    47,   -30,    59,    85,    94,    98,   105,   106,-32768,   109,
-32768,-32768,   116,   117,   144,-32768,   -79,-32768,   450,   906,
    45,   859,  1015,   -76,   133,    76,   -85,-32768,  1023,   119,
   122,   125,   132,   135,    21,-32768,   120,-32768,    79,   136,
   138,   146,   148,   150,   153,   157,   160,   163,   725,-32768,
   166,   168,   169,   173,   174,   175,   179,   180,   184,   188,
   189,   190,   191,   192,  -113,   197,  -113,   199,  -113,   200,
   203,   204,  -113,   207,   176,-32768,   142,   208,   210,   213,
   214,  -113,   222,   227,   229,  -113,   231,  -113,   199,   237,
   240,  -113,   243,   248,   402,-32768,   249,   257,   199,   259,
   260,   265,   272,   278,   282,   283,   293,   297,   299,   554,
-32768,  -113,-32768,-32768,  -113,   301,  -113,   303,   304,   305,
    24,-32768,-32768,  -113,-32768,-32768,-32768,  -113,   310,   199,
   316,   320,   321,   322,   324,   326,  -113,   327,   331,   334,
   540,-32768,   289,   308,   337,   339,   340,-32768,-32768,-32768,
   342,   345,   346,   348,   349,   350,   351,   352,-32768,-32768,
   183,   341,   356,   183,   183,   359,   362,   362,   362,-32768,
-32768,   355,   364,   370,   372,   374,   375,   373,   378,   384,
   385,   225,   379,-32768,    68,   386,   389,   394,   395,-32768,
   398,   397,    77,   403,   401,   406,-32768,-32768,   407,   408,
   362,   384,   409,   412,   410,   -14,   779,   413,    33,   414,
-32768,   417,   421,   422,   423,   362,-32768,-32768,   429,   433,
-32768,   437,   432,   439,   438,   444,   384,   445,-32768,   447,
   457,-32768,-32768,   443,   446,   451,   458,    77,   459,   460,
-32768,-32768,-32768,   -77,   461,   362,-32768,   362,   362,   468,
   384,   470,-32768,   469,   471,   474,   362,-32768,-32768,   475,
   472,   478,   481,   480,   485,   486,   487,   488,   489,   490,
   492,   496,   497,-32768,   491,   502,   499,   504,   723,   508,
   510,   514,   497,   516,   523,   527,   528,   362,   530,   534,
   362,   535,   538,   539,   536,   537,   542,   549,   556,   559,
   199,   561,   562,   563,   182,-32768,   560,   567,   -18,   564,
   569,   570,   571,    15,-32768,   993,   573,   270,-32768,   121,
   572,-32768,-32768,   576,   580,   821,   581,   582,   585,   587,
   575,   584,   225,   589,   591,   593,   -31,-32768,   594,   199,
   596,   597,   601,   199,   602,   603,   605,   606,   607,   608,
   609,   610,   614,   598,-32768,   993,   617,   621,   622,    22,
-32768,   270,   625,   626,   821,   612,   627,   362,   631,   624,
   362,   535,   635,   636,   639,   644,   646,   647,   648,-32768,
-32768,   649,-32768,   650,   651,   641,   656,-32768,     8,   658,
   668,   669,   672,   671,   675,   678,   779,   679,   680,   681,
-32768,   689,-32768,-32768,   574,   688,   691,   692,   696,   698,
   699,   700,   701,   704,-32768,-32768,   708,-32768,   199,   709,
   716,   719,   720,   722,   724,   727,   723,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   728,-32768,   726,   730,   729,
   731,-32768,-32768,   734,   736,-32768,   -64,   362,   384,-32768,
   739,   740,   741,-32768,-32768,   702,-32768,   735,   742,   -18,
-32768,   744,   743,   746,   396,-32768,-32768,   749,   199,   750,
-32768,    65,-32768,   753,   754,   755,   756,   757,   241,-32768,
   758,   762,   763,    43,-32768,-32768,-32768,-32768,   764,   765,
   767,   199,   771,   773,   775,-32768,   287,-32768,   778,-32768,
-32768,   362,   752,   782,   218,-32768,   783,   362,-32768,-32768,
   784,-32768,-32768,   785,   384,-32768,    77,   788,   793,   794,
  1039,-32768,-32768,-32768,   396,-32768,-32768,   493,    77,   795,
-32768,-32768,-32768,   262,-32768,-32768,   361,   797,-32768,   776,
-32768,   798,   781,   799,-32768,-32768,   807,-32768,-32768,-32768,
-32768,    -8,   -13,-32768,    -7,-32768,-32768,   800,-32768,   809,
   810,   814,   110,-32768,   362,-32768,   535,-32768,   815,-32768,
-32768,   643,-32768,-32768,-32768,   817,   811,-32768,   823,   824,
   825,   826,   829,   830,-32768,-32768,   832,-32768,   833,   834,
   835,   837,   838,   841,   842,-32768,   843,   845,   844,-32768,
   847,-32768,-32768,-32768,-32768,-32768,-32768,   848,   849,   850,
   853,   852,   384,   854,   356,   362,-32768,   855,   858,   860,
   862,   199,   199,   868,   869,   306,-32768,   856,-32768,   872,
-32768,-32768,   871,   354,-32768,   876,   878,-32768,-32768,   861,
   880,   883,-32768,-32768,   885,   886,   887,-32768,   898,   899,
   902,-32768,-32768,   900,   910,-32768,   909,-32768,   839,   915,
   918,   -46,   919,   921,   923,   924,   925,   926,   929,   930,
   931,   934,   935,   936,   937,   942,   943,   944,   945,   946,
  1011,-32768,   -19,    16,    38,   615,-32768,   947,   948,    66,
-32768,-32768,   949,   951,   952,   955,   957,-32768,   959,-32768,
-32768,   960,-32768,-32768,   963,-32768,-32768,   964,   238,   954,
   792,-32768,-32768,-32768,   965,   966,-32768,-32768,-32768,   967,
   971,   972,   975,   976,   977,   978,   980,   979,   981,   982,
    82,   984,   986,   991,   362,-32768,   362,   535,-32768,-32768,
-32768,   992,-32768,   998,-32768,   997,   999,-32768,-32768,-32768,
   356,-32768,-32768,   362,   362,-32768,-32768,  1000,  1001,-32768,
   199,  1002,   199,   199,   199,   199,   199,    30,-32768,  1004,
  1005,  1006,  1009,  1010,  1012,  1013,  1014,  1016,  1017,  1019,
  1018,-32768,  1024,-32768,   983,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   183,  1027,   356,   183,  1030,
   183,  1031,  1032,   362,   535,   362,   362,-32768,-32768,  1033,
-32768,  1034,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   362,-32768,   362,   535,  1036,  1037,   362,-32768,  1003,  1029,
  1038,  1040,  1041,  1042,-32768,-32768,  1035,-32768,   -78,-32768,
   103,  1043,-32768,  1045,  1046,  1047,  1048,  1049,  1050,  1051,
  1052,-32768,-32768,-32768,  1053,-32768,-32768,-32768,-32768,  1054,
  1055,  1056,-32768,-32768,-32768,-32768,  1057,  1058,  1059,-32768,
  1063,   114,-32768,  1064,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1066,-32768,-32768,-32768,-32768,-32768,-32768,  1067,
-32768,-32768,  1068,-32768,  1061,  1069,  1070,  1071,  1072,  1073,
  1074,  1075,  1076,  1077,  1078,  1079,  1080,-32768,  1083,  1082,
  1084,  1085,  1086,  1065,   846,    77,  1090,    77,    77,    77,
   384,-32768,-32768,-32768,-32768,-32768,  1088,  1089,  1091,  1092,
  1093,  1094,  1095,  1098,  1097,  1099,  1100,  1101,-32768,-32768,
-32768,  1102,-32768,  1103,  1104,  1105,  1106,  1107,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1109,  1110,  1111,-32768,  1113,   535,  1112,  1114,
  1115,  1116,  1117,  1118,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1121,-32768,   362,   362,   535,-32768,-32768,-32768,-32768,
-32768,-32768,   362,   362,   535,  1120,  1122,-32768,-32768,-32768,
-32768,-32768,-32768,  1123,  1124,  1125,  1126,  1127,  1128,  1129,
-32768,-32768,-32768,-32768,  1131,  1132,  1133,  1134,  1135,  1136,
   362,   362,   535,   362,   362,   535,  1137,  1138,  1139,  1140,
  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,-32768,-32768,
-32768,-32768,-32768,-32768,  1156,  1157,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,  1168,-32768,-32768,  1022,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1152,-32768,   803,-32768,
   827,-32768,  1130,-32768,-32768,-32768,  1159,-32768,-32768,-32768,
   -45,   812,  -506,-32768,   638,-32768,   424,-32768,  1149,-32768,
-32768,-32768,-32768,-32768,  1185,-32768,   777,-32768,   920,-32768,
   903,  -449,-32768,   456,-32768,   -40,   908,  -444,    28,  -264,
  -229,  -197,  -185,  -395,  -634,-32768,-32768,   840,  -103,  -254,
-32768,-32768,   802,   874,  -378,-32768,  -549,-32768,-32768,   687,
  -625,-32768,   588,   933,  -327,-32768
};


#define	YYLAST		1301


static const short yytable[] = {   314,
   315,   316,   361,   414,   407,   557,   574,   485,   310,   311,
   776,   720,   141,   172,   334,   241,   732,   365,   142,     1,
   683,   340,   729,   154,     3,   251,   145,   405,   426,     5,
   787,   154,     6,   360,   365,   791,   792,    60,   488,    30,
    31,   366,    33,    34,    35,    36,    37,    38,   397,    40,
   793,   424,    43,    44,   146,   155,   277,   662,   366,   669,
   683,    68,   953,   418,   143,     7,   147,   868,   498,   634,
   635,   636,   637,    61,   340,   387,   127,   128,   420,   794,
   421,   422,   148,   181,   129,   341,   387,   182,   183,   430,
   787,   130,   325,   511,   818,   795,   796,   388,     2,   263,
   131,   132,   133,   134,   135,   342,   489,    47,   388,   539,
   136,    62,   512,   662,   669,   590,   591,   735,    32,   840,
   466,   841,   216,   469,   218,   289,   221,   733,   137,   499,
   225,   149,   730,   736,   592,   145,    63,   334,   341,   234,
    64,    39,   150,   238,   343,   240,   897,   797,   389,   244,
    41,   513,   184,   185,   842,   496,   843,    42,   342,   389,
    60,   178,   562,   146,   271,   334,   186,   187,    45,   264,
   910,   511,   265,   138,   267,   147,   844,   139,   845,    81,
   188,   273,   107,   673,   500,   275,    46,    82,    83,   328,
   512,   148,   871,   928,   284,   329,    61,   343,    48,   330,
   570,   746,    84,   573,   844,   661,   849,   485,   352,   353,
   331,    85,    86,    87,    88,    89,   153,   590,   591,   189,
   885,    90,   886,   557,    49,   328,   332,   480,    91,   513,
    92,   329,   328,    50,    62,   330,   592,    51,   329,    93,
   149,   844,   330,   955,    52,    53,   331,    94,    55,   640,
   743,   150,   973,   331,   974,    58,    59,   333,   173,    63,
   180,   174,   332,    64,   175,   859,   542,    95,   860,   332,
   546,   176,    96,    97,   177,   191,    98,   192,   861,   862,
   639,    99,   695,   229,   100,   193,   101,   194,   102,   195,
   519,   103,   196,   333,   718,   104,   197,   158,   863,   198,
   333,   159,   199,   505,   506,   202,   160,   203,   204,   161,
   162,   163,   205,   206,   207,   694,   227,   520,   208,   209,
   313,   303,   484,   210,   505,   506,   164,   211,   212,   213,
   214,   215,   505,   506,   685,   521,   217,   334,   219,   222,
   690,   165,   223,   224,   507,   618,   226,   230,   508,   231,
   166,   522,   232,   233,    12,   864,   313,   167,   688,   791,
   792,   235,   651,   313,   519,   507,   236,   652,   237,   508,
   239,   158,   892,   507,   793,   159,   242,   508,   865,   243,
   160,   668,   245,   161,   162,   163,    13,   246,   249,    14,
   523,   520,    15,   168,   169,   659,   250,   745,   252,   253,
   164,   524,   721,   794,   254,   108,   525,    16,   653,   521,
   800,   255,   170,   774,    17,   165,   109,   256,   678,   795,
   796,   257,   258,    18,   166,   522,   290,   682,    19,    20,
   654,   167,   259,    21,   655,    22,   260,    23,   261,   935,
   266,   110,   268,   269,   270,   291,   786,    24,   777,   276,
   111,    25,   651,    26,   112,   278,   113,   652,   942,   279,
   280,   281,   819,   282,   523,   283,   285,   168,   169,   114,
   286,   797,   115,   287,   292,   524,   293,   294,    27,   306,
   525,   295,    70,    71,   296,   297,   170,   298,   299,   300,
   301,   302,   317,   116,   307,   117,   498,   312,   653,   118,
   313,   722,   119,   318,   127,   128,    72,   319,   120,   121,
   320,   323,   129,   321,   322,   324,   337,   122,    73,   130,
   654,   123,   325,   327,   655,   346,   347,   124,   131,   132,
   133,   134,   135,   348,   351,   349,    74,   350,   136,    75,
   356,   355,   247,   357,   358,   359,   362,   364,   782,   783,
   158,   363,   386,   392,   159,   393,   137,   499,   394,   160,
   396,   395,   161,   162,   163,   127,   128,   890,   398,   891,
   399,   401,    76,   129,    77,   400,   403,    78,   402,   164,
   130,   404,   410,   406,   408,   411,   898,   899,   412,   131,
   132,   133,   134,   135,   165,   409,   415,   413,   416,   136,
   419,   138,  1027,   166,   369,   139,   423,   425,   427,   428,
   167,   429,   500,   370,   432,   431,   371,   137,   433,   372,
  1037,   434,   435,   436,   437,   438,   439,   440,   441,  1040,
   442,   445,   373,   717,   443,   444,   934,   447,   936,   937,
   926,   374,   446,   929,   448,   931,   168,   169,   459,   369,
   460,   375,   376,   940,   461,   941,   462,  1059,   370,   945,
  1062,   371,   138,   463,   372,   170,   139,   464,   465,   377,
   467,   651,   468,   470,   474,   475,   652,   373,   472,   473,
   288,   999,   476,  1001,  1002,  1003,   374,   903,   477,   905,
   906,   907,   908,   909,   262,   478,   375,   376,   479,    12,
   481,   482,   486,   492,   483,   378,   379,   487,   493,   494,
   495,   607,   516,   533,   377,   504,   517,   653,   380,   381,
   518,  1004,   530,   529,   382,   531,   534,   383,   532,   536,
   537,    13,   538,   541,    14,   543,   544,    15,   556,   654,
   545,   547,   548,   655,   549,   550,   551,   552,   553,   554,
   378,   379,    16,   555,   568,   846,   559,    70,    71,    17,
   560,   561,   572,   380,   381,   565,   566,   569,    18,   382,
   449,   571,   383,    19,    20,   575,   576,   577,    21,   588,
    22,    72,    23,   748,   578,   369,   579,   580,   581,   584,
   586,   587,    24,    73,   370,   589,    25,   371,    26,   595,
   372,   450,   451,   452,   453,   454,   455,   456,   596,   599,
   597,    74,   598,   373,    75,   600,  1035,  1036,   601,   603,
   604,   605,   374,    29,   519,  1038,  1039,   606,   608,   609,
   610,   158,   375,   376,   611,   159,   612,   613,   614,   644,
   160,   615,   616,   161,   162,   163,   617,    76,   619,    77,
   377,   520,    78,  1057,  1058,   620,  1060,  1061,   621,   622,
   164,   623,   108,   624,   628,   200,   625,   630,   627,   521,
   629,   631,   632,   109,   645,   165,   633,   641,   642,   643,
   649,   646,   648,   650,   166,   522,   378,   379,   658,   660,
   663,   167,   686,   664,   665,   666,   667,   670,   110,   380,
   381,   671,   672,   675,   676,   382,   677,   111,   383,    81,
   679,   112,   680,   113,   681,   684,   724,    82,    83,   687,
   689,   726,   691,   693,   523,   696,   114,   168,   169,   115,
   697,   698,    84,   719,   723,   524,   725,   868,   738,   727,
   525,    85,    86,    87,    88,    89,   170,   728,   740,   741,
   116,    90,   117,   742,   750,   747,   118,   749,    91,   119,
    92,   751,   752,   753,   754,   120,   121,   755,   756,    93,
   757,   758,   759,   760,   122,   761,   762,    94,   123,   763,
   764,   815,   765,   767,   124,   766,   768,   998,   769,   770,
   771,   772,   773,   788,   775,   778,   498,    95,   779,   803,
   780,   781,    96,    97,   127,   128,    98,   784,   785,   789,
   790,    99,   129,   801,   100,   802,   101,   804,   102,   130,
   805,   103,   806,   807,   808,   104,   127,   128,   131,   132,
   133,   134,   135,   158,   129,   809,   810,   159,   136,   811,
   812,   130,   160,   699,   700,   161,   162,   163,   813,   814,
   131,   132,   133,   134,   135,   816,   137,   499,   817,   820,
   136,   821,   164,   822,   823,   824,   825,   701,   826,   827,
   828,   699,   700,   829,   830,   831,   832,   165,   137,   702,
   703,   833,   834,   835,   836,   837,   166,   847,   848,   850,
   851,   867,   852,   167,   853,   701,   854,   704,   855,   856,
   705,   138,   857,   872,   858,   139,   873,   702,   703,   875,
   876,   874,   500,   877,   878,   879,   880,   706,   881,   882,
   925,   883,   884,   138,   887,   704,   888,   139,   705,   168,
   169,   889,   893,   707,   708,   709,   894,   895,   710,   896,
   900,   904,   946,   901,   912,   706,   914,   913,   170,   915,
   916,   838,   917,   918,   919,  1076,  1077,   921,   920,   922,
   923,   707,   708,   709,   924,   927,   710,   930,   947,   932,
   933,   938,   939,   943,   944,   952,    11,   948,   274,   949,
   950,   951,   957,   956,   958,   959,   960,   961,   962,   963,
   964,   965,   563,   540,   966,   967,   968,   969,   970,   971,
   972,   979,   975,   976,   977,   978,   567,   997,   201,   980,
   981,   982,   983,   984,   985,   986,   987,   988,   989,   990,
   991,   992,   993,   179,   994,   995,   996,  1000,  1005,  1006,
   744,  1007,  1008,  1009,  1010,  1011,  1012,  1013,  1014,  1015,
  1016,   716,  1017,  1018,  1019,  1020,  1021,  1022,  1023,  1024,
  1025,  1026,  1028,   911,  1029,  1030,  1031,  1032,  1033,  1034,
  1041,  1044,  1042,   497,  1045,  1046,  1047,  1048,  1049,  1050,
  1051,  1052,  1053,  1054,  1055,  1056,   248,  1063,  1064,  1065,
  1066,  1067,  1068,  1069,  1070,  1071,  1072,  1073,  1074,   228,
   674,   647,   954,   558,   564,   535,   626,     0,   839,   272,
   602
};

static const short yycheck[] = {   197,
   198,   199,   232,   268,   259,   384,   402,   335,   194,   195,
   645,   561,    53,    59,   212,   119,    30,    49,    95,    52,
   527,     7,    31,   109,   138,   129,     3,   257,   283,     2,
   656,   109,   140,   231,    49,     6,     7,    17,    57,    12,
    13,    73,    15,    16,    17,    18,    19,    20,   246,    22,
    21,   281,    25,    26,    31,   141,   160,   502,    73,   509,
   567,   141,   141,   141,   141,   140,    43,   146,     4,   134,
   135,   136,   137,    53,     7,    54,    12,    13,   276,    50,
   278,   279,    59,     5,    20,    71,    54,     9,    10,   287,
   716,    27,   139,    51,   141,    66,    67,    76,   131,   140,
    36,    37,    38,    39,    40,    91,   125,   138,    76,   141,
    46,    91,    70,   558,   564,   108,   109,   125,   140,   139,
   318,   141,    95,   321,    97,   171,    99,   141,    64,    65,
   103,   108,   141,   141,   127,     3,   116,   335,    71,   112,
   120,   140,   119,   116,   130,   118,   781,   118,   127,   122,
   140,   109,    74,    75,   139,   141,   141,   140,    91,   127,
    17,   141,   141,    31,   141,   363,    88,    89,   140,   142,
   141,    51,   145,   109,   147,    43,   139,   113,   141,     4,
   102,   154,   138,   141,   120,   158,   140,    12,    13,     8,
    70,    59,   742,   828,   167,    14,    53,   130,   140,    18,
   398,   597,    27,   401,   139,   141,   141,   535,   132,   133,
    29,    36,    37,    38,    39,    40,   141,   108,   109,   141,
   139,    46,   141,   602,   140,     8,    45,   331,    53,   109,
    55,    14,     8,   140,    91,    18,   127,   140,    14,    64,
   108,   139,    18,   141,   140,   140,    29,    72,   140,   479,
   141,   119,   139,    29,   141,   140,   140,    76,   140,   116,
   141,   140,    45,   120,   140,    28,   370,    92,    31,    45,
   374,   140,    97,    98,   140,   140,   101,   140,    41,    42,
   478,   106,   547,   142,   109,   140,   111,   140,   113,   140,
     4,   116,   140,    76,   559,   120,   140,    11,    61,   140,
    76,    15,   140,    63,    64,   140,    20,   140,   140,    23,
    24,    25,   140,   140,   140,   545,   141,    31,   140,   140,
   139,   139,   141,   140,    63,    64,    40,   140,   140,   140,
   140,   140,    63,    64,   532,    49,   140,   535,   140,   140,
   538,    55,   140,   140,   104,   449,   140,   140,   108,   140,
    64,    65,   140,   140,    17,   118,   139,    71,   141,     6,
     7,   140,    57,   139,     4,   104,   140,    62,   140,   108,
   140,    11,   768,   104,    21,    15,   140,   108,   141,   140,
    20,   141,   140,    23,    24,    25,    49,   140,   140,    52,
   104,    31,    55,   107,   108,   499,   140,   595,   140,   140,
    40,   115,   141,    50,   140,     4,   120,    70,   103,    49,
   665,   140,   126,   643,    77,    55,    15,   140,   522,    66,
    67,   140,   140,    86,    64,    65,   138,   141,    91,    92,
   125,    71,   140,    96,   129,    98,   140,   100,   140,   835,
   140,    40,   140,   140,   140,   138,   141,   110,   646,   140,
    49,   114,    57,   116,    53,   140,    55,    62,   854,   140,
   140,   140,   692,   140,   104,   140,   140,   107,   108,    68,
   140,   118,    71,   140,   138,   115,   138,   138,   141,   139,
   120,   140,    33,    34,   140,   140,   126,   140,   140,   140,
   140,   140,   138,    92,   139,    94,     4,   139,   103,    98,
   139,   141,   101,   140,    12,    13,    57,   138,   107,   108,
   139,   139,    20,   140,   140,   138,   138,   116,    69,    27,
   125,   120,   139,   139,   129,   140,   138,   126,    36,    37,
    38,    39,    40,   140,   138,   141,    87,   140,    46,    90,
   140,   139,   141,   138,   138,   138,   138,   138,   652,   653,
    11,   140,   140,   140,    15,   139,    64,    65,   138,    20,
   138,   140,    23,    24,    25,    12,    13,   765,   140,   767,
   138,   140,   123,    20,   125,   139,   139,   128,   140,    40,
    27,   138,   140,   139,   138,   140,   784,   785,   138,    36,
    37,    38,    39,    40,    55,   139,   138,   140,   139,    46,
   140,   109,   998,    64,     7,   113,   139,   138,   140,   139,
    71,   138,   120,    16,   143,   141,    19,    64,   141,    22,
  1016,   141,   143,   139,   139,   139,   139,   139,   139,  1025,
   139,   141,    35,   141,   139,   139,   834,   139,   836,   837,
   826,    44,   141,   829,   141,   831,   107,   108,   141,     7,
   141,    54,    55,   851,   141,   853,   141,  1053,    16,   857,
  1056,    19,   109,   141,    22,   126,   113,   141,   141,    72,
   141,    57,   139,   139,   139,   139,    62,    35,   141,   141,
   141,   946,   141,   948,   949,   950,    44,   791,   140,   793,
   794,   795,   796,   797,   141,   140,    54,    55,   140,    17,
   140,   140,   143,   140,   142,   108,   109,   141,   140,   140,
   140,   138,   141,   139,    72,   143,   141,   103,   121,   122,
   141,   951,   141,   143,   127,   141,   143,   130,   142,   141,
   140,    49,   140,   140,    52,   140,   140,    55,   141,   125,
   140,   140,   140,   129,   140,   140,   140,   140,   140,   140,
   108,   109,    70,   140,   143,   141,   140,    33,    34,    77,
   140,   140,   139,   121,   122,   141,   141,   141,    86,   127,
    48,   141,   130,    91,    92,   141,   141,   139,    96,   139,
    98,    57,   100,   141,   141,     7,   141,   141,   141,   141,
   141,   141,   110,    69,    16,   140,   114,    19,   116,   142,
    22,    79,    80,    81,    82,    83,    84,    85,   141,   139,
   142,    87,   141,    35,    90,   141,  1014,  1015,   141,   141,
   141,   141,    44,   141,     4,  1023,  1024,   139,   141,   139,
   139,    11,    54,    55,   139,    15,   139,   139,   139,   138,
    20,   141,   139,    23,    24,    25,   139,   123,   140,   125,
    72,    31,   128,  1051,  1052,   140,  1054,  1055,   140,   140,
    40,   140,     4,   140,   139,   141,   140,   139,   141,    49,
   141,   141,   139,    15,   140,    55,   141,   139,   139,   139,
   138,   140,   139,   138,    64,    65,   108,   109,   140,   140,
   138,    71,   141,   140,   140,   140,   140,   140,    40,   121,
   122,   140,   140,   140,   140,   127,   140,    49,   130,     4,
   140,    53,   140,    55,   140,   138,   141,    12,    13,   138,
   138,   141,   139,   139,   104,   138,    68,   107,   108,    71,
   138,   138,    27,   139,   138,   115,   139,   146,   139,   141,
   120,    36,    37,    38,    39,    40,   126,   141,   140,   140,
    92,    46,    94,   140,   144,   141,    98,   141,    53,   101,
    55,   139,   139,   139,   139,   107,   108,   139,   139,    64,
   139,   139,   139,   139,   116,   139,   139,    72,   120,   139,
   139,   143,   140,   140,   126,   141,   140,   142,   141,   141,
   141,   139,   141,   138,   141,   141,     4,    92,   141,   139,
   141,   140,    97,    98,    12,    13,   101,   140,   140,   138,
   140,   106,    20,   138,   109,   138,   111,   138,   113,    27,
   138,   116,   138,   138,   138,   120,    12,    13,    36,    37,
    38,    39,    40,    11,    20,   138,   138,    15,    46,   138,
   141,    27,    20,    33,    34,    23,    24,    25,   139,   141,
    36,    37,    38,    39,    40,   141,    64,    65,   141,   141,
    46,   141,    40,   141,   141,   141,   141,    57,   140,   140,
   140,    33,    34,   140,   140,   140,   140,    55,    64,    69,
    70,   140,   140,   140,   140,   140,    64,   141,   141,   141,
   140,   138,   141,    71,   140,    57,   140,    87,   140,   140,
    90,   109,   140,   139,   141,   113,   141,    69,    70,   139,
   139,   145,   120,   139,   139,   139,   139,   107,   139,   141,
   138,   141,   141,   109,   141,    87,   141,   113,    90,   107,
   108,   141,   141,   123,   124,   125,   139,   141,   128,   141,
   141,   140,   140,   143,   141,   107,   141,   143,   126,   141,
   141,   141,   141,   141,   141,     0,     0,   141,   143,   141,
   143,   123,   124,   125,   141,   139,   128,   138,   140,   139,
   139,   139,   139,   138,   138,   141,     9,   140,   157,   140,
   140,   140,   138,   141,   139,   139,   139,   139,   139,   139,
   139,   139,   390,   367,   141,   141,   141,   141,   141,   141,
   138,   141,   139,   138,   138,   138,   395,   143,    79,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   139,   141,    65,   141,   141,   141,   138,   141,   141,
   593,   141,   141,   141,   141,   141,   139,   141,   140,   140,
   140,   555,   141,   141,   141,   141,   141,   141,   140,   140,
   140,   139,   141,   798,   141,   141,   141,   141,   141,   139,
   141,   139,   141,   344,   141,   141,   141,   141,   141,   141,
   140,   140,   140,   140,   140,   140,   125,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   105,
   514,   490,   869,   386,   392,   363,   457,    -1,   711,   151,
   427
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 261 "plugins/csstdldr/stdparse.y"
{ THIS->world->SelectLibrary (STORAGE.cur_library = yyvsp[-1].string); ;
    break;}
case 3:
#line 264 "plugins/csstdldr/stdparse.y"
{ THIS->world->SelectLibrary (STORAGE.cur_library = yyvsp[-1].string); ;
    break;}
case 8:
#line 278 "plugins/csstdldr/stdparse.y"
{ STORAGE.tex_prefix = yyvsp[-1].string; ;
    break;}
case 9:
#line 280 "plugins/csstdldr/stdparse.y"
{ STORAGE.tex_prefix = NULL; ;
    break;}
case 10:
#line 282 "plugins/csstdldr/stdparse.y"
{ if (!THIS->RecursiveLoad (yyvsp[-1].string)) YYABORT; ;
    break;}
case 11:
#line 284 "plugins/csstdldr/stdparse.y"
{ printf ("SOUNDS\n"); ;
    break;}
case 12:
#line 286 "plugins/csstdldr/stdparse.y"
{ printf ("START\n"); ;
    break;}
case 13:
#line 288 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR [%s]\n", yyvsp[-3].string); ;
    break;}
case 14:
#line 290 "plugins/csstdldr/stdparse.y"
{ printf ("PLANE [%s]\n", yyvsp[-3].string); ;
    break;}
case 15:
#line 292 "plugins/csstdldr/stdparse.y"
{ printf ("KEY [%s]\n", yyvsp[-3].string); ;
    break;}
case 16:
#line 294 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION [%s]\n", yyvsp[-3].string); ;
    break;}
case 17:
#line 296 "plugins/csstdldr/stdparse.y"
{ printf ("SCRIPT '%s' (%s: %s)\n", yyvsp[-5].string, yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 18:
#line 298 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX [%s]\n", yyvsp[-3].string); ;
    break;}
case 19:
#line 300 "plugins/csstdldr/stdparse.y"
{ printf ("THING_tpl [%s]\n", yyvsp[-3].string); ;
    break;}
case 20:
#line 302 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE [%s]\n", yyvsp[-3].string); ;
    break;}
case 21:
#line 304 "plugins/csstdldr/stdparse.y"
{ printf ("ROOM [%s]\n", yyvsp[-3].string); ;
    break;}
case 22:
#line 306 "plugins/csstdldr/stdparse.y"
{ printf ("SIXFACE [%s]\n", yyvsp[-3].string); ;
    break;}
case 25:
#line 318 "plugins/csstdldr/stdparse.y"
{ THIS->InitTexture (yyvsp[0].string); ;
    break;}
case 26:
#line 320 "plugins/csstdldr/stdparse.y"
{ if (!THIS->CreateTexture ()) YYABORT; ;
    break;}
case 29:
#line 329 "plugins/csstdldr/stdparse.y"
{ printf ("MIPMAP (%d)\n", yyvsp[-1].ival); ;
    break;}
case 30:
#line 330 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-2].ival)
      TEX.flags = (TEX.flags & ~CS_TEXTURE_NOMIPMAPS);
    else
      TEX.flags |= CS_TEXTURE_NOMIPMAPS;
  ;
    break;}
case 31:
#line 337 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_DITHER;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_DITHER);
  ;
    break;}
case 32:
#line 344 "plugins/csstdldr/stdparse.y"
{ TEX.filename = yyvsp[-1].string; ;
    break;}
case 33:
#line 346 "plugins/csstdldr/stdparse.y"
{ TEX.transp = yyvsp[-1].color; TEX.do_transp = true; ;
    break;}
case 34:
#line 348 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_3D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_3D);
  ;
    break;}
case 35:
#line 355 "plugins/csstdldr/stdparse.y"
{
    if (yyvsp[-1].ival)
      TEX.flags |= CS_TEXTURE_2D;
    else
      TEX.flags = (TEX.flags & ~CS_TEXTURE_2D);
  ;
    break;}
case 41:
#line 380 "plugins/csstdldr/stdparse.y"
{ printf ("FILE (%s)\n", yyvsp[-1].string); ;
    break;}
case 44:
#line 392 "plugins/csstdldr/stdparse.y"
{ printf ("VERTEX (%g,%g,%g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 45:
#line 394 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON (...)\n"); ;
    break;}
case 46:
#line 396 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 47:
#line 398 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 48:
#line 400 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 49:
#line 402 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 50:
#line 404 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 51:
#line 406 "plugins/csstdldr/stdparse.y"
{ printf ("STATBSP ()\n"); ;
    break;}
case 52:
#line 408 "plugins/csstdldr/stdparse.y"
{ printf ("THING '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 53:
#line 410 "plugins/csstdldr/stdparse.y"
{ printf ("SIXFACE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 54:
#line 412 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 55:
#line 414 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 56:
#line 416 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 57:
#line 419 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 58:
#line 421 "plugins/csstdldr/stdparse.y"
{ printf ("SKYDOME (...)\n"); ;
    break;}
case 59:
#line 423 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 60:
#line 425 "plugins/csstdldr/stdparse.y"
{ printf ("NODE (...)\n"); ;
    break;}
case 63:
#line 435 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 64:
#line 437 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 65:
#line 439 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 68:
#line 449 "plugins/csstdldr/stdparse.y"
{ printf ("POSITION (...)\n"); ;
    break;}
case 69:
#line 451 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 72:
#line 462 "plugins/csstdldr/stdparse.y"
{ printf ("ORIG (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 73:
#line 463 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 74:
#line 464 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 75:
#line 465 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 76:
#line 466 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 77:
#line 467 "plugins/csstdldr/stdparse.y"
{ printf ("UVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 78:
#line 468 "plugins/csstdldr/stdparse.y"
{ printf ("VVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 79:
#line 470 "plugins/csstdldr/stdparse.y"
{
    printf ("MATRIX (\n  %g, %g, %g\n  %g, %g, %g\n  %g, %g, %g\n)\n",
    yyvsp[-1].matrix->m11, yyvsp[-1].matrix->m12, yyvsp[-1].matrix->m13, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m22, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m31, yyvsp[-1].matrix->m32, yyvsp[-1].matrix->m33);
  ;
    break;}
case 80:
#line 474 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 85:
#line 496 "plugins/csstdldr/stdparse.y"
{ printf ("THING ('%s')\n", yyvsp[-1].string); ;
    break;}
case 86:
#line 498 "plugins/csstdldr/stdparse.y"
{ printf ("COLLECTION ('%s')\n", yyvsp[-1].string); ;
    break;}
case 87:
#line 500 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT ('%s':%g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 88:
#line 502 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER ('%s', '%s' -> '%s')\n", yyvsp[-6].string, yyvsp[-4].string, yyvsp[-1].string); ;
    break;}
case 89:
#line 504 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 92:
#line 515 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 93:
#line 516 "plugins/csstdldr/stdparse.y"
{ printf ("STATELESS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 94:
#line 518 "plugins/csstdldr/stdparse.y"
{ printf ("PRIMARY_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 95:
#line 520 "plugins/csstdldr/stdparse.y"
{ printf ("SECONDARY_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 96:
#line 522 "plugins/csstdldr/stdparse.y"
{ printf ("BECOMING_ACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 97:
#line 524 "plugins/csstdldr/stdparse.y"
{ printf ("PRIMARY_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 98:
#line 526 "plugins/csstdldr/stdparse.y"
{ printf ("SECONDARY_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 99:
#line 528 "plugins/csstdldr/stdparse.y"
{ printf ("BECOMING_INACTIVE (%g,%g,%g,%g,%g)\n", yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 102:
#line 540 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON_tpl '%s' ()\n", yyvsp[-3].string); ;
    break;}
case 103:
#line 542 "plugins/csstdldr/stdparse.y"
{ printf ("VERTEX (%g,%g,%g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 104:
#line 544 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 105:
#line 546 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 106:
#line 548 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 107:
#line 550 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 108:
#line 552 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 109:
#line 554 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX ()\n"); ;
    break;}
case 110:
#line 557 "plugins/csstdldr/stdparse.y"
{ printf ("CIRCLE (...)\n"); ;
    break;}
case 111:
#line 559 "plugins/csstdldr/stdparse.y"
{ printf ("BEZIER '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 112:
#line 561 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECENTER (...)\n"); ;
    break;}
case 113:
#line 563 "plugins/csstdldr/stdparse.y"
{ printf ("CURVESCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 114:
#line 565 "plugins/csstdldr/stdparse.y"
{ printf ("CURVECONTROL (...)\n"); ;
    break;}
case 118:
#line 576 "plugins/csstdldr/stdparse.y"
{ printf ("KEY ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 119:
#line 578 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 120:
#line 580 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 121:
#line 582 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 122:
#line 584 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE ()\n"); ;
    break;}
case 123:
#line 586 "plugins/csstdldr/stdparse.y"
{ printf ("TEX_SET_SELECT ('%s')\n", yyvsp[-1].string); ;
    break;}
case 124:
#line 588 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 127:
#line 598 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR (%s)\n", yyvsp[-1].string); ;
    break;}
case 128:
#line 600 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 129:
#line 602 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 135:
#line 624 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 136:
#line 626 "plugins/csstdldr/stdparse.y"
{ printf ("FRAME '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 137:
#line 628 "plugins/csstdldr/stdparse.y"
{ printf ("ACTION '%s' ( ... )\n", yyvsp[-3].string); ;
    break;}
case 138:
#line 630 "plugins/csstdldr/stdparse.y"
{ printf ("TRIANGLE (%g,%g,%g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 139:
#line 632 "plugins/csstdldr/stdparse.y"
{ printf ("FILE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 140:
#line 634 "plugins/csstdldr/stdparse.y"
{ printf ("MERGE_TEXELS (%d)\n", yyvsp[-1].ival); ;
    break;}
case 143:
#line 653 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g,%g,%g:%g,%g)\n", yyvsp[-3].vect.x, yyvsp[-3].vect.y, yyvsp[-3].vect.z, yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 146:
#line 663 "plugins/csstdldr/stdparse.y"
{ printf ("F ('%s', %g)\n", yyvsp[-3].string, yyvsp[-1].fval); ;
    break;}
case 149:
#line 675 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE_LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 150:
#line 677 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE_SCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 151:
#line 679 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 152:
#line 681 "plugins/csstdldr/stdparse.y"
{ printf ("TEX '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 153:
#line 683 "plugins/csstdldr/stdparse.y"
{ printf ("CEIL_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 154:
#line 685 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 155:
#line 687 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 156:
#line 689 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHT (...)\n"); ;
    break;}
case 157:
#line 691 "plugins/csstdldr/stdparse.y"
{ printf ("DIM (%g, %g, %g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 158:
#line 693 "plugins/csstdldr/stdparse.y"
{ printf ("HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 159:
#line 695 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 160:
#line 697 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR_CEILING ((%g,%g) (%g,%g) (%g,%g) (%g,%g))\n",
      yyvsp[-11].vect2.x, yyvsp[-11].vect2.y, yyvsp[-8].vect2.x, yyvsp[-8].vect2.y, yyvsp[-5].vect2.x, yyvsp[-5].vect2.y, yyvsp[-2].vect2.x, yyvsp[-2].vect2.y);
  ;
    break;}
case 161:
#line 702 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR ( (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) )\n",
      yyvsp[-11].vect.x, yyvsp[-11].vect.y, yyvsp[-11].vect.z, yyvsp[-8].vect.x, yyvsp[-8].vect.y, yyvsp[-8].vect.z,
      yyvsp[-5].vect.x, yyvsp[-5].vect.y, yyvsp[-5].vect.z, yyvsp[-2].vect.x, yyvsp[-2].vect.y, yyvsp[-2].vect.z);
  ;
    break;}
case 162:
#line 708 "plugins/csstdldr/stdparse.y"
{ printf ("CEILING ()\n"); ;
    break;}
case 163:
#line 710 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 164:
#line 712 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE (%s)\n", yyvsp[-1].string); ;
    break;}
case 165:
#line 714 "plugins/csstdldr/stdparse.y"
{ printf ("STATBSP ()\n"); ;
    break;}
case 166:
#line 716 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 167:
#line 718 "plugins/csstdldr/stdparse.y"
{ printf ("SIXFACE [%s]\n", yyvsp[-3].string); ;
    break;}
case 168:
#line 720 "plugins/csstdldr/stdparse.y"
{ printf ("THING '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 169:
#line 722 "plugins/csstdldr/stdparse.y"
{ printf ("PORTAL (...)\n"); ;
    break;}
case 170:
#line 724 "plugins/csstdldr/stdparse.y"
{ printf ("SPLIT (%s, %s, ...)\n", yyvsp[-6].string, yyvsp[-4].string); ;
    break;}
case 171:
#line 726 "plugins/csstdldr/stdparse.y"
{ printf ("SPRITE '%s' (...)\n", yyvsp[-3].string); ;
    break;}
case 172:
#line 728 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 175:
#line 738 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 176:
#line 740 "plugins/csstdldr/stdparse.y"
{ printf ("PLANE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 177:
#line 742 "plugins/csstdldr/stdparse.y"
{ printf ("LEN ('%g')\n", yyvsp[-1].fval); ;
    break;}
case 180:
#line 752 "plugins/csstdldr/stdparse.y"
{ printf ("POLYGON ('%s')\n", yyvsp[-1].string); ;
    break;}
case 181:
#line 754 "plugins/csstdldr/stdparse.y"
{ printf ("SECTOR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 182:
#line 756 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 183:
#line 758 "plugins/csstdldr/stdparse.y"
{ printf ("WARP (...)\n"); ;
    break;}
case 188:
#line 773 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 189:
#line 775 "plugins/csstdldr/stdparse.y"
{ printf ("TEMPLATE ('%s', '%s')\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 190:
#line 777 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 191:
#line 779 "plugins/csstdldr/stdparse.y"
{ printf ("MIXMODE (...)\n"); ;
    break;}
case 198:
#line 793 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 203:
#line 807 "plugins/csstdldr/stdparse.y"
{ printf ("MOVE ()\n"); ;
    break;}
case 204:
#line 809 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE_SCALE (%g)\n", yyvsp[-1].fval); ;
    break;}
case 205:
#line 811 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 206:
#line 813 "plugins/csstdldr/stdparse.y"
{ printf ("CEIL_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 207:
#line 815 "plugins/csstdldr/stdparse.y"
{ printf ("DIM (%g, %g, %g)\n", yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
case 208:
#line 817 "plugins/csstdldr/stdparse.y"
{ printf ("HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 209:
#line 819 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_HEIGHT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 210:
#line 821 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR_CEILING ((%g,%g) (%g,%g) (%g,%g) (%g,%g))\n",
      yyvsp[-11].vect2.x, yyvsp[-11].vect2.y, yyvsp[-8].vect2.x, yyvsp[-8].vect2.y, yyvsp[-5].vect2.x, yyvsp[-5].vect2.y, yyvsp[-2].vect2.x, yyvsp[-2].vect2.y);
  ;
    break;}
case 211:
#line 826 "plugins/csstdldr/stdparse.y"
{ printf ("FLOOR_TEXTURE (%s)\n", yyvsp[-1].string); ;
    break;}
case 212:
#line 828 "plugins/csstdldr/stdparse.y"
{
    printf ("FLOOR ( (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) (%g,%g,%g) )\n",
      yyvsp[-11].vect.x, yyvsp[-11].vect.y, yyvsp[-11].vect.z, yyvsp[-8].vect.x, yyvsp[-8].vect.y, yyvsp[-8].vect.z,
      yyvsp[-5].vect.x, yyvsp[-5].vect.y, yyvsp[-5].vect.z, yyvsp[-2].vect.x, yyvsp[-2].vect.y, yyvsp[-2].vect.z);
  ;
    break;}
case 213:
#line 834 "plugins/csstdldr/stdparse.y"
{ printf ("CEILING ()\n"); ;
    break;}
case 214:
#line 836 "plugins/csstdldr/stdparse.y"
{ printf ("FOG (%g,%g,%g : %g)\n", yyvsp[-2].color.red, yyvsp[-2].color.green, yyvsp[-2].color.blue, yyvsp[-1].fval); ;
    break;}
case 215:
#line 838 "plugins/csstdldr/stdparse.y"
{ printf ("CONVEX ()\n"); ;
    break;}
case 219:
#line 849 "plugins/csstdldr/stdparse.y"
{ printf ("TRIGGER (%s, %s)\n", yyvsp[-3].string, yyvsp[-1].string); ;
    break;}
case 220:
#line 851 "plugins/csstdldr/stdparse.y"
{ printf ("ACTIVATE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 221:
#line 853 "plugins/csstdldr/stdparse.y"
{ printf ("MOVEABLE ()\n"); ;
    break;}
case 222:
#line 868 "plugins/csstdldr/stdparse.y"
{ yyval.string = NULL; ;
    break;}
case 224:
#line 874 "plugins/csstdldr/stdparse.y"
{ yyval.ival = true; ;
    break;}
case 225:
#line 875 "plugins/csstdldr/stdparse.y"
{ yyval.ival = false; ;
    break;}
case 226:
#line 880 "plugins/csstdldr/stdparse.y"
{ CSCOLOR (yyval.color).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 227:
#line 885 "plugins/csstdldr/stdparse.y"
{ CSVECTOR3 (yyval.vect).Set (yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 228:
#line 890 "plugins/csstdldr/stdparse.y"
{ yyval.vect.x = yyval.vect.y = yyval.vect.z = 0; ;
    break;}
case 230:
#line 896 "plugins/csstdldr/stdparse.y"
{ CSVECTOR2 (yyval.vect2).Set (yyvsp[-1].fval, yyvsp[0].fval); ;
    break;}
case 231:
#line 904 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &STORAGE.matrix2;
    yyval.matrix->Set (yyvsp[-8].fval, yyvsp[-7].fval, yyvsp[-6].fval, yyvsp[-5].fval, yyvsp[-4].fval, yyvsp[-3].fval, yyvsp[-2].fval, yyvsp[-1].fval, yyvsp[0].fval);
  ;
    break;}
case 232:
#line 909 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &STORAGE.matrix2;
    yyval.matrix->Set (yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval, 0, 0, 0, yyvsp[0].fval);
  ;
    break;}
case 233:
#line 914 "plugins/csstdldr/stdparse.y"
{
    yyval.matrix = &STORAGE.matrix2;
    yyval.matrix->Identity ();
  ;
    break;}
case 237:
#line 928 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2.Identity (); ;
    break;}
case 238:
#line 930 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csXRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 239:
#line 932 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csYRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 240:
#line 934 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csZRotMatrix3 (yyvsp[-1].fval); ;
    break;}
case 241:
#line 936 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= yyvsp[-1].fval; ;
    break;}
case 242:
#line 938 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csMatrix3 (yyvsp[-3].fval, 0, 0, 0, yyvsp[-2].fval, 0, 0, 0, yyvsp[-1].fval); ;
    break;}
case 243:
#line 940 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csXScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 244:
#line 942 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 245:
#line 944 "plugins/csstdldr/stdparse.y"
{ STORAGE.matrix2 *= csYScaleMatrix3 (yyvsp[-1].fval); ;
    break;}
case 248:
#line 954 "plugins/csstdldr/stdparse.y"
{
    yyval.transform = &STORAGE;
    yyval.transform->matrix.Identity ();
    yyval.transform->matrix_valid = false;
    yyval.transform->vector_valid = false;
  ;
    break;}
case 252:
#line 970 "plugins/csstdldr/stdparse.y"
{
    STORAGE.matrix = *yyvsp[-1].matrix;
    STORAGE.matrix_valid = true;
  ;
    break;}
case 253:
#line 975 "plugins/csstdldr/stdparse.y"
{
    STORAGE.vector = CSVECTOR3 (yyvsp[-1].vect);
    STORAGE.vector_valid = true;
  ;
    break;}
case 256:
#line 989 "plugins/csstdldr/stdparse.y"
{ printf ("TEXNR ('%s')\n", yyvsp[-1].string); ;
    break;}
case 257:
#line 991 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTING (%d)\n", yyvsp[-1].ival); ;
    break;}
case 258:
#line 993 "plugins/csstdldr/stdparse.y"
{ printf ("TEXTURE (...)\n"); ;
    break;}
case 259:
#line 995 "plugins/csstdldr/stdparse.y"
{ printf ("VERTICES (...)\n"); ;
    break;}
case 260:
#line 997 "plugins/csstdldr/stdparse.y"
{ printf ("GOURAUD ()\n"); ;
    break;}
case 261:
#line 999 "plugins/csstdldr/stdparse.y"
{ printf ("FLATCOL (%g,%g,%g)\n", yyvsp[-1].color.red, yyvsp[-1].color.green, yyvsp[-1].color.blue); ;
    break;}
case 262:
#line 1001 "plugins/csstdldr/stdparse.y"
{ printf ("ALPHA (%g)\n", yyvsp[-1].fval); ;
    break;}
case 263:
#line 1003 "plugins/csstdldr/stdparse.y"
{ printf ("UV (...)\n"); ;
    break;}
case 264:
#line 1005 "plugins/csstdldr/stdparse.y"
{ printf ("UVA (...)\n"); ;
    break;}
case 265:
#line 1007 "plugins/csstdldr/stdparse.y"
{ printf ("COLORS (...)\n"); ;
    break;}
case 266:
#line 1009 "plugins/csstdldr/stdparse.y"
{ printf ("COSFACT (%g)\n", yyvsp[-1].fval); ;
    break;}
case 267:
#line 1011 "plugins/csstdldr/stdparse.y"
{ printf ("CLIP ()\n"); ;
    break;}
case 268:
#line 1013 "plugins/csstdldr/stdparse.y"
{ printf ("PORTAL (%s)\n", yyvsp[-1].string); ;
    break;}
case 269:
#line 1015 "plugins/csstdldr/stdparse.y"
{ printf ("WARP (...)\n"); ;
    break;}
case 270:
#line 1017 "plugins/csstdldr/stdparse.y"
{ printf ("LIGHTX ('%s')\n", yyvsp[-1].string); ;
    break;}
case 272:
#line 1023 "plugins/csstdldr/stdparse.y"
{ ;
    break;}
case 281:
#line 1051 "plugins/csstdldr/stdparse.y"
{ printf ("MATRIX (...)\n"); ;
    break;}
case 282:
#line 1053 "plugins/csstdldr/stdparse.y"
{ printf ("V (...)\n"); ;
    break;}
case 283:
#line 1055 "plugins/csstdldr/stdparse.y"
{ printf ("W (...)\n"); ;
    break;}
case 284:
#line 1057 "plugins/csstdldr/stdparse.y"
{ printf ("MIRROR ()\n"); ;
    break;}
case 285:
#line 1059 "plugins/csstdldr/stdparse.y"
{ printf ("STATIC ()\n"); ;
    break;}
case 288:
#line 1069 "plugins/csstdldr/stdparse.y"
{ printf ("ORIG (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 289:
#line 1070 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 290:
#line 1071 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 291:
#line 1072 "plugins/csstdldr/stdparse.y"
{ printf ("FIRST_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 292:
#line 1073 "plugins/csstdldr/stdparse.y"
{ printf ("SECOND_LEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 293:
#line 1074 "plugins/csstdldr/stdparse.y"
{ printf ("UVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 294:
#line 1075 "plugins/csstdldr/stdparse.y"
{ printf ("VVEC (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 295:
#line 1077 "plugins/csstdldr/stdparse.y"
{
    printf ("MATRIX (\n  %g, %g, %g\n  %g, %g, %g\n  %g, %g, %g\n)\n",
    yyvsp[-1].matrix->m11, yyvsp[-1].matrix->m12, yyvsp[-1].matrix->m13, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m22, yyvsp[-1].matrix->m21, yyvsp[-1].matrix->m31, yyvsp[-1].matrix->m32, yyvsp[-1].matrix->m33);
  ;
    break;}
case 296:
#line 1081 "plugins/csstdldr/stdparse.y"
{ printf ("V (%g, %g, %g)\n", yyvsp[-1].vect.x, yyvsp[-1].vect.y, yyvsp[-1].vect.z); ;
    break;}
case 297:
#line 1083 "plugins/csstdldr/stdparse.y"
{ printf ("TEXLEN (%g)\n", yyvsp[-1].fval); ;
    break;}
case 298:
#line 1085 "plugins/csstdldr/stdparse.y"
{ printf ("PLANE ('%s')\n", yyvsp[-1].string); ;
    break;}
case 299:
#line 1087 "plugins/csstdldr/stdparse.y"
{ printf ("UV_SHIFT (%g, %g)\n", yyvsp[-1].vect2.x, yyvsp[-1].vect2.y); ;
    break;}
case 302:
#line 1098 "plugins/csstdldr/stdparse.y"
{ printf ("<pos> <radius> <color> <dynamic-flag>\n"); ;
    break;}
case 303:
#line 1100 "plugins/csstdldr/stdparse.y"
{ printf ("CENTER (...)\n"); ;
    break;}
case 304:
#line 1102 "plugins/csstdldr/stdparse.y"
{ printf ("RADIUS (%g)\n", yyvsp[-1].fval); ;
    break;}
case 305:
#line 1104 "plugins/csstdldr/stdparse.y"
{ printf ("DYNAMIC ()\n"); ;
    break;}
case 306:
#line 1106 "plugins/csstdldr/stdparse.y"
{ printf ("COLOR ( ... )\n"); ;
    break;}
case 307:
#line 1108 "plugins/csstdldr/stdparse.y"
{ printf ("HALO (%g,%g)\n", yyvsp[-2].fval, yyvsp[-1].fval); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1119 "plugins/csstdldr/stdparse.y"
 /* End of grammar */

/* On initialization, register keyword list with the C++ parser */
extern int init_token_table (const char * const *yytname);
struct __parser_init
{
  __parser_init ()
  {
    init_token_table (yytname);
#if YYDEBUG
    yydebug = 1;
#endif
  }
} __parser_init_dummy;
