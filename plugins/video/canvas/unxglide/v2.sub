# This is a subinclude file used to define the rules needed
# to build the GlideX 2D driver -- glidex2d

# Driver description
DESCRIPTION.glidx2d2 = Crystal Space Glide V2/X 2D driver

#------------------------------------------------------------- rootdefines ---#
ifeq ($(MAKESECTION),rootdefines)

# Driver-specific help commands
DRIVERHELP += \
  $(NEWLINE)echo $"  make glidx2d2     Make the $(DESCRIPTION.glidx2d2)$"

endif # ifeq ($(MAKESECTION),rootdefines)

#------------------------------------------------------------- roottargets ---#
ifeq ($(MAKESECTION),roottargets)

.PHONY: glidx2d2 glidx2d2clean
all plugins drivers drivers2d: glidx2d2

glidx2d2:
	$(MAKE_TARGET) MAKE_DLL=yes
glidx2d2clean:
	$(MAKE_CLEAN)

endif # ifeq ($(MAKESECTION),roottargets)

#------------------------------------------------------------- postdefines ---#
ifeq ($(MAKESECTION),postdefines)

CFLAGS.GLIDX2D2 = -I$(X11_PATH)/include $(GLIDE2_PATH)
LIB.GLIDX2D2.SYSTEM += -L$(X11_PATH)/lib -lXext -lX11 -lglide2x  

ifeq ($(USE_SHARED_PLUGINS),yes)
  GLIDX2D2 = glidx2d2$(DLL)
  LIB.GLIDX2D2 = $(foreach d,$(DEP.GLIDX2D2),$($d.LIB))
  LIB.GLIDX2D2.SPECIAL = $(LIB.GLIDX2D2.SYSTEM)
else
  GLIDX2D2 = $(OUT)$(LIB_PREFIX)glidx2d2$(LIB)
  DEP.EXE += $(GLIDX2D2)
  LIBS.EXE += $(LIB.GLIDX2D2.SYSTEM)
  CFLAGS.STATIC_SCF += $(CFLAGS.D)SCL_GLIDX2D2
endif

INC.GLIDX2D2 = plugins/video/canvas/unxglide/glidex2d.h \
  plugins/video/canvas/glide2common/glide2common2d.h \
  plugins/video/canvas/glide2common/glidcurs.h \
  plugins/video/canvas/common/x11comm.h \
  $(INC.COMMON.DRV2D)
SRC.GLIDX2D2 = plugins/video/canvas/unxglide/glidex2d.cpp \
  plugins/video/canvas/glide2common/glide2common2d.cpp \
  plugins/video/canvas/common/x11comm.cpp \
  plugins/video/canvas/common/x11-keys.cpp \
  $(SRC.COMMON.DRV2D)
TMP.GLIDX2D2 = $(wordlist 2,$(words $(SRC.GLIDX2D2)), $(SRC.GLIDX2D2))
OBJ.GLIDX2D2 = $(addprefix $(OUT),$(notdir $(TMP.GLIDX2D2:.cpp=$O))) $(OUT)glidx2d2$O

#OBJ.GLIDX2D2 = $(wordlist 2,$(words $(OBJ.GLIDX2D2)), $(OBJ.GLIDX2D2)) $(OUT)glidx2d2$O
DEP.GLIDX2D2 = CSUTIL CSSYS

endif # ifeq ($(MAKESECTION),postdefines)

#----------------------------------------------------------------- targets ---#
ifeq ($(MAKESECTION),targets)

.PHONY: glidx2d2 glidx2d2clean

glidx2d2: $(OUTDIRS) $(GLIDX2D2)

$(OUT)glidx2d2$O: plugins/video/canvas/unxglide/glidex2d.cpp
	$(DO.COMPILE.CPP) $(CFLAGS.GLIDX2D2)

$(OUT)glide2common2d$O: plugins/video/canvas/glide2common/glide2common2d.cpp \
  plugins/video/canvas/glide2common/glidcurs.h
	$(DO.COMPILE.CPP) $(CFLAGS.GLIDX2D2)

$(OUT)%$O: plugins/video/canvas/common/%.cpp
	$(DO.COMPILE.CPP) $(CFLAGS.GLIDX2D2)
 
$(GLIDX2D2): $(OBJ.GLIDX2D2) $(LIB.GLIDX2D2)
	$(DO.PLUGIN) $(LIB.GLIDX2D2.SPECIAL)

clean: glidx2d2clean
glidx2d2clean:
	$(RM) $(GLIDX2D2) $(OBJ.GLIDX2D2) $(OUTOS)glidx2d2.dep

ifdef DO_DEPEND
dep: $(OUTOS)glidx2d2.dep
$(OUTOS)glidx2d2.dep: $(SRC.GLIDX2D2)
	$(DO.DEP1) $(CFLAGS.GLIDX2D2) $(DO.DEP2)
else
-include $(OUTOS)glidx2d2.dep
endif

endif # ifeq ($(MAKESECTION),targets)

#------------------------------------------------------------------ config ---#
ifeq ($(ROOTCONFIG)/$(MAKESECTION),volatile/rootdefines)

# Default value for DO_SHM
ifndef DO_SHM
  DO_SHM = yes
endif

ifeq ($(DO_SHM)$(findstring DO_SHM,$(MAKE_VOLATILE_H)),yes)
  MAKE_VOLATILE_H+=$(NEWLINE)echo $"\#define DO_SHM$">>volatile.tmp
endif

endif # ifeq ($(ROOTCONFIG)/$(MAKESECTION),volatile/rootdefines)
