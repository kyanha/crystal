/*********
  Bison definitions for skin files.
 *********/

%{

#include "cssysdef.h"
#include "csgeom/csrect.h"
#include "csutil/scfstr.h"
#include "csutil/csdllist.h"
#include "awsprefs.h"
#include <stdio.h>

%}
 
%pure_parser
%union {
  char   *str;     /* For returning titles and handles to items. */
  int     val;     /* For returning numbers                      */
  csRect *rect;    /* For returning rectangular regions          */
  awsKey *key;     /* For returning keys to various definition items */
}


%{

extern int awslex(YYSTYPE *awslval);
extern int awserror(char *s);
extern int awslineno;

/// This is locally global variable that holds  
static awsKeyContainer kcont;

/// This is the parser parameter
#define YYPARSE_PARAM prefcont

%}

%token <val>  TOKEN_NUM
%token <str>  TOKEN_STR
%token <str>  TOKEN_ATTR
%token        TOKEN_SKIN
%token        TOKEN_FOR
%token        TOKEN_WINDOW
%token        TOKEN_FROM
%token        TOKEN_COMPONENT
%token        TOKEN_IS

%type  <val>  exp
%type  <key>  skin_item window_item component_item
 

%right '='
%left '-' '+'
%left '*' '/'
%left NEG     /* Negation--unary minus */
%right '^'    /* Exponentiation        */
                                         

%%

input:          /* empty */
               | input line
;

line:            '\n'
               | skin                   { }
               | window                 { }
               | error '}'             { yyerrok;      }
;

/*************************************
  Definitions for parsing a window def
 *************************************/
 
component_item: TOKEN_ATTR ':' TOKEN_STR                                        { $$ = new awsStringKey(new scfString($1), new scfString($3)); }
              | TOKEN_ATTR ':' '(' exp ',' exp ')' '-' '(' exp ',' exp ')'      { $$ = new awsRectKey(new scfString($1), csRect($4, $6, $10, $12)); }            
              | TOKEN_ATTR ':' TOKEN_ATTR                                       { $$ = new awsStringKey(new scfString($1), new scfString($3)); }
              | TOKEN_COMPONENT TOKEN_STR TOKEN_IS TOKEN_STR '{' component_item_list '}' { awsComponentNode *cn = new awsComponentNode(new scfString($2), new scfString($4)); ((awsKeyContainer*)cn)->Consume(&kcont); $$=cn; }
;

component_item_list:  component_item                                            { kcont.Add($1); }
              | component_item_list component_item                              { kcont.Add($2); }
;

 
window_item:    TOKEN_ATTR ':' TOKEN_STR                                        { $$ = new awsStringKey(new scfString($1), new scfString($3));          }  
              | TOKEN_ATTR ':' '(' exp ',' exp ')' '-' '(' exp ',' exp ')'      { $$ = new awsRectKey(new scfString($1), csRect($4, $6, $10, $12));     }
              | TOKEN_ATTR ':' exp                                              { $$ = new awsIntKey(new scfString($1), $3);                            }
              | TOKEN_ATTR ':' TOKEN_ATTR                                       { $$ = new awsStringKey(new scfString($1), new scfString($3));          }
              | TOKEN_COMPONENT TOKEN_STR TOKEN_IS TOKEN_STR '{' component_item_list '}' { awsComponentNode *cn = new awsComponentNode(new scfString($2), new scfString($4)); ((awsKeyContainer*)cn)->Consume(&kcont); $$=cn; }
;
              
window_item_list:  window_item                                                  { kcont.Add($1); }
              | window_item_list window_item                                    { kcont.Add($2); }
;

window:        TOKEN_WINDOW TOKEN_STR TOKEN_FROM TOKEN_STR '{' window_item_list '}' { awsComponentNode *win = new awsComponentNode(new scfString($2), new scfString($4)); ((awsKeyContainer*)win)->Consume(&kcont); ((awsPrefManager *)prefcont)->AddWindowDef(win); }
;                                     



/*************************************
  Definitions for parsing a skin def
 *************************************/

skin_item:       TOKEN_ATTR ':' TOKEN_STR             { $$ = new awsStringKey(new scfString($1), new scfString($3)); }
	       | TOKEN_ATTR ':' exp ',' exp ',' exp   { $$ = new awsRGBKey(new scfString($1), $3, $5, $7);           }
;

skin_item_list:  skin_item                            { kcont.Add($1); }
               | skin_item_list skin_item             { kcont.Add($2); }
; 

skin:            TOKEN_SKIN TOKEN_STR '{' skin_item_list '}'    { awsSkinNode *skin = new awsSkinNode(new scfString($2)); ((awsKeyContainer*)skin)->Consume(&kcont); ((awsPrefManager *)prefcont)->AddSkinDef(skin); }
;

/*************************************
  Definitions for parsing an expression
 *************************************/

exp:             TOKEN_NUM              { $$ = $1;      }
               | exp '+' exp            { $$ = $1 + $3; }
               | exp '-' exp            { $$ = $1 - $3; }
               | exp '*' exp            { $$ = $1 * $3; }
               | exp '/' exp            { $$ = $1 / $3; }
               | '-' exp %prec NEG      { $$ = -$2;     }
               | '(' exp ')'            { $$ = $2;      }
;               
                     


%%

int 
awserror(char *s)
{
 printf("  aws skin definition parse error(%i): %s\n", awslineno, s);
 return 0;
}
