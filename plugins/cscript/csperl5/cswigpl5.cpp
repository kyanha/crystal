/*
 * FILE : plugins/cscript/csperl5/cswigpl5.c
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PERL 5 */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
#undef free
#undef malloc
#include <string.h>
#ifdef __cplusplus
}
#endif
/* Definitions for compiling Perl extensions on a variety of machines */

#if defined(WIN32) || defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerl *pPerl = (CPerl *) this;
#define MAGIC_CAST   (int (CPerl::*)(SV *, MAGIC *))
#define SWIGCLASS_STATIC 
#else
#define MAGIC_PPERL
#define MAGIC_CAST
#define SWIGCLASS_STATIC static
#endif


/*****************************************************************************
 * $Header$
 *
 * perl5ptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is only used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer.
 *
 * char * SWIG_GetPtr(SV *obj, void **ptr, char *type)
 *
 *      Gets a pointer value from a Perl5 scalar value.  If there is a 
 *      type-mismatch, returns a character string to the received type.  
 *      On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *
 * $Log$
 * Revision 1.1  2003/04/30 06:40:01  sunshine
 * Eric Sunshine renamed cswigpl5.c to cswigpl5.cpp in repository since this
 * is the filename which the makefile expects (and to ensure that it gets
 * compiled as C++, rather than C).
 *
 * Revision 1.1  2002/11/19 23:00:23  okt
 * Added Perl v5 Scripting Plugin and Test Application
 * Furthermore:
 *   Changed private member csTimer::pause to csTimer::pausetime to fix case-insensitive conflict with iTimer::Pause()
 *   Perl headers define macros that conflict with names of some things in CS, so added #undef's to ivaria/cs.i
 *   Added a template internal-project sub-makefile
 *
 * Revision 1.1  1996/12/26 22:17:29  beazley
 * Initial revision
 *
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

/* These are internal variables.   Should be static */

typedef struct SwigPtrType {
  char               *name;
  int                 len;
  void               *(*cast)(void *);
  struct SwigPtrType *next;
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */
static int SwigStart[256];             /* Table containing starting positions    */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

#ifndef PERL_OBJECT
SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {
#else
SWIGSTATIC
#define SWIG_RegisterMapping(a,b,c) _SWIG_RegisterMapping(pPerl, a,b,c)
void _SWIG_RegisterMapping(CPerl *pPerl, char *origtype, char *newtype, void *(*cast)(void *)) {
#endif

  int i;
  SwigPtrType *t = 0, *t1;

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc(SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }
  while (t->next) {
    if (strcmp(t->name,newtype) == 0) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;
  t->next = t1;
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

#ifndef PERL_OBJECT
SWIGSTATIC 
char *SWIG_GetPtr(SV *sv, void **ptr, char *_t)
#else
SWIGSTATIC
#define SWIG_GetPtr(a,b,c) _SWIG_GetPtr(pPerl,a,b,c)
char *_SWIG_GetPtr(CPerl *pPerl, SV *sv, void **ptr, char *_t)
#endif
{
  char temp_type[256];
  char *name,*_c;
  int  len,i,start,end;
  IV   tmp;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;

  /* If magical, apply more magic */

  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
	mg = mg_find(tsv,'P');
	if (mg) {
	  SV *rsv = mg->mg_obj;
	  if (sv_isobject(rsv)) {
	    tmp = SvIV((SV*)SvRV(rsv));
	  }
	}
      } else {
	return "Not a valid pointer value";
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    if (!_t) {
      *(ptr) = (void *) tmp;
      return (char *) 0;
    }
  } else if (sv == &sv_undef) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return (char *) 0;
  } else if (SvTYPE(sv) == SVt_RV) {       /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv)) 
      return (char *) 0;
    else
      return "Not a valid pointer value";
  } else {                                 /* Don't know what it is */
      *(ptr) = (void *) 0;
      return "Not a valid pointer value";
  }
  if (_t) {
    /* Now see if the types match */      

    if (!sv_isa(sv,_t)) {
      _c = HvNAME(SvSTASH(SvRV(sv)));
      if (!SwigPtrSort) {
	qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort);  
	for (i = 0; i < 256; i++) {
	  SwigStart[i] = SwigPtrN;
	}
	for (i = SwigPtrN-1; i >= 0; i--) {
	  SwigStart[SwigPtrTable[i].name[0]] = i;
	}
	for (i = 255; i >= 1; i--) {
	  if (SwigStart[i-1] > SwigStart[i])
	    SwigStart[i-1] = SwigStart[i];
	}
	SwigPtrSort = 1;
	for (i = 0; i < SWIG_CACHESIZE; i++)  
	  SwigCache[i].stat = 0;
      }
      /* First check cache for matches.  Uses last cache value as starting point */
      cache = &SwigCache[SwigLastCache];
      for (i = 0; i < SWIG_CACHESIZE; i++) {
	if (cache->stat) {
	  if (strcmp(_t,cache->name) == 0) {
	    if (strcmp(_c,cache->mapped) == 0) {
	      cache->stat++;
	      *ptr = (void *) tmp;
	      if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
	      return (char *) 0;
	    }
	  }
	}
	SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	if (!SwigLastCache) cache = SwigCache;
	else cache++;
      }

      start = SwigStart[_t[0]];
      end = SwigStart[_t[0]+1];
      sp = &SwigPtrTable[start];
      while (start < end) {
	if (swigcmp(_t,sp) == 0) break;
	sp++;
	start++;
      }
      if (start >= end) sp = 0;
      if (sp) {
	while (swigcmp(_t,sp) == 0) {
	  name = sp->name;
	  len = sp->len;
	  tp = sp->next;
	  while(tp) {
	    if (tp->len >= 255) {
	      return _c;
	    }
	    strcpy(temp_type,tp->name);
	    strncat(temp_type,_t+len,255-tp->len);
	    if (sv_isa(sv,temp_type)) {
	      /* Get pointer value */
	      *ptr = (void *) tmp;
	      if (tp->cast) *ptr = (*(tp->cast))(*ptr);

	      strcpy(SwigCache[SwigCacheIndex].mapped,_c);
	      strcpy(SwigCache[SwigCacheIndex].name,_t);
	      SwigCache[SwigCacheIndex].stat = 1;
	      SwigCache[SwigCacheIndex].tp = tp;
	      SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
	      return (char *) 0;
	    }
	    tp = tp->next;
	  } 
	  /* Hmmm. Didn't find it this time */
 	  sp++;
	}
      }
      /* Didn't find any sort of match for this data.  
	 Get the pointer value and return the received type */
      *ptr = (void *) tmp;
      return _c;
    } else {
      /* Found a match on the first try.  Return pointer value */
      *ptr = (void *) tmp;
      return (char *) 0;
    }
  } 
  *ptr = (void *) tmp;
  return (char *) 0;
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr
/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
#else
#define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerl *pPerl, SV *sv, char *name, int (CPerl::*set)(SV *, MAGIC *), int (CPerl::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = get;
  mg->mg_virtual->svt_set = set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}

#define SWIG_init    boot_cspace

#define SWIG_name   "cspacec::boot_cspace"
#define SWIG_varinit "cspacec::var_cspace_init();"
#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
SWIGEXPORT(void,boot_cspace)(CV* cv);
#else
SWIGEXPORT(void,boot_cspace)(CPerl *, CV *cv);
#endif


  #if defined(NO_HANDY_PERL_MACROS)
    #undef Copy
    #undef MAXXCOUNT
    #undef MAXY_SIZE
    #undef MAXYCOUNT
    #undef Move
    #undef New
    #undef Newc
    #undef Newz
    #undef Renew
    #undef Renewc
    #undef Safefree
    #undef StructCopy
    #undef Zero
  #endif

  #include "css.h"
//***** SCF Wrappers
  int MakeVersion(int version0, int version1, int version2)
  {
    return SCF_CONSTRUCT_VERSION(version0, version1, version2);
  }

#include "iutil/plugin.h"
#include "iutil/eventh.h"
#include "iutil/comp.h"
#include "iutil/event.h"
#include "iutil/objreg.h"
#include "iengine/camera.h"
#include "iengine/campos.h"
#include "imesh/object.h"
#include "imesh/thing/thing.h"
#include "imesh/thing/lightmap.h"
#include "imap/parser.h"
#include "ivideo/graph2d.h"
#include "ivideo/fontserv.h"
#include "ivideo/halo.h"



#ifdef WIN32
#undef isspace
#define isspace(c) (c == ' ')
#endif

/*------------------------------------------------------------------
  ptrcast(value,type)

  Constructs a new pointer value.   Value may either be a string
  or an integer. Type is a string corresponding to either the
  C datatype or mangled datatype.

  ptrcast(0,"Vector *")
               or
  ptrcast(0,"Vector_p")   
  ------------------------------------------------------------------ */
#ifdef PERL_OBJECT
static SV *_ptrcast(CPerl *pPerl, SV *_PTRVALUE, char *type) {
#define ptrcast(a,b)  _ptrcast(pPerl,a,b)
#else
static SV *_ptrcast(SV *_PTRVALUE, char *type) {
#define ptrcast(a,b)  _ptrcast(a,b)
#endif
  char *r,*s;
  void *ptr;
  SV *obj;
  char *typestr,*c;

  /* Produce a "mangled" version of the type string.  */

  typestr = (char *) malloc(strlen(type)+20);

  /* Go through and munge the typestring */
  
  r = typestr;
  c = type;
  while (*c) {
    if (!isspace(*c)) {
      if ((*c == '*') || (*c == '&')) {
	strcpy(r,"Ptr");
	r+=3;
      } else *(r++) = *c;
    } 
    c++;
  }
  *(r++) = 0;
    
  /* Check to see if the input value is an integer */
  if (SvIOK(_PTRVALUE)) {
    ptr = (void *) SvIV(_PTRVALUE);
    /* Received a numerical value. Make a pointer out of it */
    obj = sv_newmortal();
    sv_setref_pv(obj,typestr,ptr);
  } else if (sv_isobject(_PTRVALUE)) {
    /* Have a real pointer value now.  Try to strip out the pointer value */
    /* Now extract the pointer value */
    if (!SWIG_GetPtr(_PTRVALUE,&ptr,0)) {
      obj = sv_newmortal();
      sv_setref_pv(obj,typestr,ptr);
    }
  } else {
    croak("ptrcast(). Not a reference.");
  }
  free(typestr);
  return obj;
}



/*------------------------------------------------------------------
  ptrvalue(ptr,type = 0)

  Attempts to dereference a pointer value.  If type is given, it 
  will try to use that type.  Otherwise, this function will attempt
  to "guess" the proper datatype by checking against all of the 
  builtin C datatypes. 
  ------------------------------------------------------------------ */

#ifdef PERL_OBJECT
static SV *_ptrvalue(CPerl *pPerl,SV *_PTRVALUE, int index, char *type) {
#define ptrvalue(a,b,c) _ptrvalue(pPerl,a,b,c)
#else
static SV *_ptrvalue(SV *_PTRVALUE, int index, char *type) {
#define ptrvalue(a,b,c) _ptrvalue(a,b,c)
#endif

  void     *ptr;
  SV       *obj = 0;


  if (SWIG_GetPtr(_PTRVALUE,&ptr,0)) {
    croak("Type error it ptrvalue. Argument is not a valid pointer value.");
  } else {
    /* If no datatype was passed, try a few common datatypes first */
    if (!type) {

      /* No datatype was passed.   Type to figure out if it's a common one */
      
      if (!SWIG_GetPtr(_PTRVALUE,&ptr,"intPtr")) {
	type = "int";
      } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"doublePtr")) {
	type = "double";
      } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"shortPtr")) {
	type = "short";
      } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"longPtr")) {
	type = "long";
      } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"floatPtr")) {
	type = "float";
      } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"charPtr")) {
	type = "char";
      } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"charPtrPtr")) {
	type = "char *";
      } else {
	type = "unknown";
      }
    }
    
    if (!ptr) {
      croak("Unable to dereference NULL pointer.");
      return 0;
    }

    /* Now we have a datatype.  Try to figure out what to do about it */
    if (strcmp(type,"int") == 0) {
      obj = sv_newmortal();
      sv_setiv(obj,(IV) *(((int *) ptr) + index));
    } else if (strcmp(type,"double") == 0) {
      obj = sv_newmortal();
      sv_setnv(obj,(double) *(((double *) ptr)+index));
    } else if (strcmp(type,"short") == 0) {
      obj = sv_newmortal();
      sv_setiv(obj,(IV) *(((short *) ptr) + index));
    } else if (strcmp(type,"long") == 0) {
      obj = sv_newmortal();
      sv_setiv(obj,(IV) *(((long *) ptr) + index));
    } else if (strcmp(type,"float") == 0) {
      obj = sv_newmortal();
      sv_setnv(obj,(double) *(((float *) ptr)+index));
    } else if (strcmp(type,"char") == 0) {
      obj = sv_newmortal();
      sv_setpv(obj,((char *) ptr)+index);
    } else if (strcmp(type,"char *") == 0) {
      char *c = *(((char **) ptr)+index);
      obj = sv_newmortal();
      if (c) 
	sv_setpv(obj,c);
      else 
	sv_setpv(obj,"NULL");
    } else {
      croak("Unable to dereference unsupported datatype.");
      obj = 0;
    }
  }
  return obj;
}

/*------------------------------------------------------------------
  ptrcreate(type,value = 0,numelements = 1)

  Attempts to create a new object of given type.  Type must be
  a basic C datatype.  Will not create complex objects.
  ------------------------------------------------------------------ */
#ifdef PERL_OBJECT
static SV *_ptrcreate(CPerl *pPerl, char *type, SV *value, int numelements) {
#define ptrcreate(a,b,c) _ptrcreate(pPerl,a,b,c)
#else
static SV *_ptrcreate(char *type, SV *value, int numelements) {
#define ptrcreate(a,b,c) _ptrcreate(a,b,c)
#endif

  void     *ptr;
  SV       *obj;
  int       sz;
  char     *cast;
  char      temp[40];

  /* Check the type string against a variety of possibilities */

  if (strcmp(type,"int") == 0) {
    sz = sizeof(int)*numelements;
    cast = "intPtr";
  } else if (strcmp(type,"short") == 0) {
    sz = sizeof(short)*numelements;
    cast = "shortPtr";
  } else if (strcmp(type,"long") == 0) {
    sz = sizeof(long)*numelements;
    cast = "longPtr";
  } else if (strcmp(type,"double") == 0) {
    sz = sizeof(double)*numelements;
    cast = "doublePtr";
  } else if (strcmp(type,"float") == 0) {
    sz = sizeof(float)*numelements;
    cast = "floatPtr";
  } else if (strcmp(type,"char") == 0) {
    sz = sizeof(char)*numelements;
    cast = "charPtr";
  } else if (strcmp(type,"char *") == 0) {
    sz = sizeof(char *)*(numelements+1);
    cast = "charPtrPtr";
  } else if (strcmp(type,"void") == 0) {
    sz = numelements;
    cast = "voidPtr";
  } else {
    croak("Unable to create unknown datatype."); 
    return 0;
  }
   
  /* Create the new object */
  
  ptr = (void *) malloc(sz);
  if (!ptr) {
    croak("Out of memory in ptrcreate."); 
    return 0;
  }

  /* Now try to set its default value */

  if (value) {
    if (strcmp(type,"int") == 0) {
      int *ip,i,ivalue;
      ivalue = (int) SvIV(value);
      ip = (int *) ptr;
      for (i = 0; i < numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"short") == 0) {
      short *ip,ivalue;
      int i;
      ivalue = (short) SvIV(value);
      ip = (short *) ptr;
      for (i = 0; i < numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"long") == 0) {
      long *ip,ivalue;
      int i;
      ivalue = (long) SvIV(value);
      ip = (long *) ptr;
      for (i = 0; i < numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"double") == 0) {
      double *ip,ivalue;
      int i;
      ivalue = (double) SvNV(value);
      ip = (double *) ptr;
      for (i = 0; i < numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"float") == 0) {
      float *ip,ivalue;
      int i;
      ivalue = (float) SvNV(value);
      ip = (float *) ptr;
      for (i = 0; i < numelements; i++)
	ip[i] = ivalue;
    } else if (strcmp(type,"char") == 0) {
      char *ip,*ivalue;
      ivalue = (char *) SvPV(value,na);
      ip = (char *) ptr;
      strncpy(ip,ivalue,numelements-1);
    } else if (strcmp(type,"char *") == 0) {
      char **ip, *ivalue;
      int  i;
      ivalue = (char *) SvPV(value,na);
      ip = (char **) ptr;
      for (i = 0; i < numelements; i++) {
	if (ivalue) {
	  ip[i] = (char *) malloc(strlen(ivalue)+1);
	  strcpy(ip[i],ivalue);
	} else {
	  ip[i] = 0;
	}
      }
      ip[numelements] = 0;
    }
  } 
  /* Create the pointer value */
  
  SWIG_MakePtr(temp,ptr,cast);
  obj = sv_newmortal();
  sv_setref_pv(obj,cast,ptr);
  return obj;
}

/*------------------------------------------------------------------
  ptrset(ptr,value,index = 0,type = 0)

  Attempts to set the value of a pointer variable.  If type is
  given, we will use that type.  Otherwise, we'll guess the datatype.
  ------------------------------------------------------------------ */

#ifdef PERL_OBJECT
static void _ptrset(CPerl *pPerl,SV *_PTRVALUE, SV *value, int index, char *type) {
#define ptrset(a,b,c,d) _ptrset(pPerl,a,b,c,d)
#else
static void _ptrset(SV *_PTRVALUE, SV *value, int index, char *type) {
#define ptrset(a,b,c,d) _ptrset(a,b,c,d)
#endif
  void     *ptr;
  SV       *obj;

  if (SWIG_GetPtr(_PTRVALUE,&ptr,0)) {
    croak("Type error in ptrset. Argument is not a valid pointer value.");
    return;
  }

  /* If no datatype was passed, try a few common datatypes first */

  if (!type) {

    /* No datatype was passed.   Type to figure out if it's a common one */

    if (!SWIG_GetPtr(_PTRVALUE,&ptr,"intPtr")) {
      type = "int";
    } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"doublePtr")) {
      type = "double";
    } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"shortPtr")) {
      type = "short";
    } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"longPtr")) {
      type = "long";
    } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"floatPtr")) {
      type = "float";
    } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"charPtr")) {
      type = "char";
    } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"charPtrPtr")) {
      type = "char *";
    } else {
      type = "unknown";
    }
  }

  if (!ptr) {
    croak("Unable to set NULL pointer.");
    return;
  }
  
  /* Now we have a datatype.  Try to figure out what to do about it */
  if (strcmp(type,"int") == 0) {
    *(((int *) ptr)+index) = (int) SvIV(value);
  } else if (strcmp(type,"double") == 0) {
    *(((double *) ptr)+index) = (double) SvNV(value);
  } else if (strcmp(type,"short") == 0) {
    *(((short *) ptr)+index) = (short) SvIV(value);
  } else if (strcmp(type,"long") == 0) {
    *(((long *) ptr)+index) = (long) SvIV(value);
  } else if (strcmp(type,"float") == 0) {
    *(((float *) ptr)+index) = (float) SvNV(value);
  } else if (strcmp(type,"char") == 0) {
    char *c = SvPV(value,na);
    strcpy(((char *) ptr)+index, c);
  } else if (strcmp(type,"char *") == 0) {
    char *c = SvPV(value,na);
    char **ca = (char **) ptr;
    if (ca[index]) free(ca[index]);
    if (strcmp(c,"NULL") == 0) {
      ca[index] = 0;
    } else {
      ca[index] = (char *) malloc(strlen(c)+1);
      strcpy(ca[index],c);
    }
  } else {
    croak("Unable to set unsupported datatype.");
    return;
  }
}

/*------------------------------------------------------------------
  ptradd(ptr,offset)

  Adds a value to an existing pointer value.  Will do a type-dependent
  add for basic datatypes.  For other datatypes, will do a byte-add.
  ------------------------------------------------------------------ */

#ifdef PERL_OBJECT
static SV *_ptradd(CPerl *pPerl, SV *_PTRVALUE, int offset) {
#define ptradd(a,b) _ptradd(pPerl,a,b)
#else
static SV *_ptradd(SV *_PTRVALUE, int offset) {
#define ptradd(a,b) _ptradd(a,b)
#endif

  void *ptr,*junk;
  SV   *obj;
  char *type;

  /* Try to handle a few common datatypes first */

  if (!SWIG_GetPtr(_PTRVALUE,&ptr,"intPtr")) {
    ptr = (void *) (((int *) ptr) + offset);
  } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"doublePtr")) {
    ptr = (void *) (((double *) ptr) + offset);
  } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"shortPtr")) {
    ptr = (void *) (((short *) ptr) + offset);
  } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"longPtr")) {
    ptr = (void *) (((long *) ptr) + offset);
  } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"floatPtr")) {
    ptr = (void *) (((float *) ptr) + offset);
  } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,"charPtr")) {
    ptr = (void *) (((char *) ptr) + offset);
  } else if (!SWIG_GetPtr(_PTRVALUE,&ptr,0)) {
    ptr = (void *) (((char *) ptr) + offset);
  } else {
    croak("Type error in ptradd. Argument is not a valid pointer value.");
    return 0;
  }
  type = SWIG_GetPtr(_PTRVALUE,&junk,"INVALID POINTER");
  obj = sv_newmortal();
  sv_setref_pv(obj,type,ptr);
  return obj;
}

/*------------------------------------------------------------------
  ptrmap(type1,type2)

  Allows a mapping between type1 and type2. (Like a typedef)
  ------------------------------------------------------------------ */

#ifdef PERL_OBJECT
static void _ptrmap(CPerl *pPerl,char *type1, char *type2) {
#define ptrmap(a,b) _ptrmap(pPerl,a,b)
#else
static void _ptrmap(char *type1, char *type2) {
#define ptrmap(a,b) _ptrmap(a,b)
#endif
  char *typestr1,*typestr2,*c,*r;
  /* Produce a "mangled" version of the type string.  */

  typestr1 = (char *) malloc(strlen(type1)+20);


  /* Go through and munge the typestring */
  
  r = typestr1;
  *(r++) = '_';
  c = type1;

  while (*c) {
    if (!isspace(*c)) {
      if ((*c == '*') || (*c == '&')) {
	strcpy(r,"Ptr");
	r+=3;
      }
      else *(r++) = *c;
    } 
    c++;
  }
  *(r++) = 0;

  typestr2 = (char *) malloc(strlen(type2)+20);

  /* Go through and munge the typestring */
  
  r = typestr2;
  *(r++) = '_';
  c = type2;
  while (*c) {
    if (!isspace(*c)) {
      if ((*c == '*') || (*c == '&')) {
	strcpy(r,"Ptr");
	r+=3;
      }
      else *(r++) = *c;
    }
    c++;
  }
  *(r++) = 0;
  SWIG_RegisterMapping(typestr1,typestr2,0);
  SWIG_RegisterMapping(typestr2,typestr1,0);
}

/*------------------------------------------------------------------
  ptrfree(ptr)

  Destroys a pointer value
  ------------------------------------------------------------------ */
#ifdef PERL_OBJECT
void _ptrfree(CPerl *pPerl, SV *_PTRVALUE) {
#define ptrfree(a) _ptrfree(pPerl, a)
#else
void _ptrfree(SV *_PTRVALUE) {
#define ptrfree(a) _ptrfree(a)
#endif

  void *ptr, *junk;

  if (SWIG_GetPtr(_PTRVALUE,&ptr,0)) {
    croak("Type error in ptrfree. Argument is not a valid pointer value.");
    return;
  }

  /* Check to see if this pointer is a char ** */
  if (!SWIG_GetPtr(_PTRVALUE,&junk,"charPtrPtr")) {
    char **c = (char **) ptr;
    if (c) {
      int i = 0;
      while (c[i]) {
	free(c[i]);
	i++;
      }
    }
  } 
  if (ptr)
    free((char *) ptr);
}

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_cspace_var::
class _wrap_cspace_var : public CPerl {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

XS(_wrap_ptrcast) {

    SV * _result;
    SV * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: ptrcast(ptr,type);");
{
  _arg0 = ST(0);
}
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (SV *)ptrcast(_arg0,_arg1);
{
  ST(0) = _result;
  argvi++;
}
    XSRETURN(argvi);
}

XS(_wrap_ptrvalue) {

    SV * _result;
    SV * _arg0;
    int  _arg1 = 0;
    char * _arg2 = 0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 3)) 
        croak("Usage: ptrvalue(ptr,index,type);");
{
  _arg0 = ST(0);
}
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    if (items > 2) {
    _arg2 = (char *) SvPV(ST(2),na);
    } 
    _result = (SV *)ptrvalue(_arg0,_arg1,_arg2);
{
  ST(0) = _result;
  argvi++;
}
    XSRETURN(argvi);
}

XS(_wrap_ptrset) {

    SV * _arg0;
    SV * _arg1;
    int  _arg2 = 0;
    char * _arg3 = 0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 4)) 
        croak("Usage: ptrset(ptr,value,index,type);");
{
  _arg0 = ST(0);
}
{
  _arg1 = ST(1);
}
    if (items > 2) {
    _arg2 = (int )SvIV(ST(2));
    } 
    if (items > 3) {
    _arg3 = (char *) SvPV(ST(3),na);
    } 
    ptrset(_arg0,_arg1,_arg2,_arg3);
    XSRETURN(argvi);
}

XS(_wrap_ptrcreate) {

    SV * _result;
    char * _arg0;
    SV * _arg1 = 0;
    int  _arg2 = 1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 3)) 
        croak("Usage: ptrcreate(type,value,nitems);");
    _arg0 = (char *) SvPV(ST(0),na);
    if (items > 1) {
{
  _arg1 = ST(1);
}
    } 
    if (items > 2) {
    _arg2 = (int )SvIV(ST(2));
    } 
    _result = (SV *)ptrcreate(_arg0,_arg1,_arg2);
{
  ST(0) = _result;
  argvi++;
}
    XSRETURN(argvi);
}

XS(_wrap_ptrfree) {

    SV * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: ptrfree(ptr);");
{
  _arg0 = ST(0);
}
    ptrfree(_arg0);
    XSRETURN(argvi);
}

XS(_wrap_ptradd) {

    SV * _result;
    SV * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: ptradd(ptr,offset);");
{
  _arg0 = ST(0);
}
    _arg1 = (int )SvIV(ST(1));
    _result = (SV *)ptradd(_arg0,_arg1);
{
  ST(0) = _result;
  argvi++;
}
    XSRETURN(argvi);
}

XS(_wrap_ptrmap) {

    char * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: ptrmap(type1,type2);");
    _arg0 = (char *) SvPV(ST(0),na);
    _arg1 = (char *) SvPV(ST(1),na);
    ptrmap(_arg0,_arg1);
    XSRETURN(argvi);
}

XS(_wrap_MakeVersion) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: MakeVersion(version0,version1,version2);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _result = (int )MakeVersion(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iBase_DecRef(_swigobj)  (_swigobj->DecRef())
XS(_wrap_iBase_DecRef) {

    iBase * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iBase_DecRef(iBase *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iBase")) {
        croak("Type error in argument 1 of iBase_DecRef. Expected iBase.");
        XSRETURN(1);
    }
    iBase_DecRef(_arg0);
    XSRETURN(argvi);
}

static void *SwigiSCFToiBase(void *ptr) {
    iSCF *src;
    iBase *dest;
    src = (iSCF *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iSCF_CreateInstance(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->CreateInstance(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iSCF_CreateInstance) {

    void * _result;
    iSCF * _arg0;
    char * _arg1;
    char * _arg2;
    int  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iSCF_CreateInstance(iSCF *,iClassID,iInterfaceID,iVersion);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iSCF")) {
        croak("Type error in argument 1 of iSCF_CreateInstance. Expected iSCF.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _arg2 = (char *) SvPV(ST(2),na);
    _arg3 = (int )SvIV(ST(3));
    _result = (void *)iSCF_CreateInstance(_arg0,_arg1,_arg2,_arg3);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define csVector3_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
XS(_wrap_csVector3_x_set) {

    float  _result;
    csVector3 * _arg0;
    float  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csVector3_x_set(csVector3 *,float );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csVector3")) {
        croak("Type error in argument 1 of csVector3_x_set. Expected csVector3.");
        XSRETURN(1);
    }
    _arg1 = (float ) SvNV(ST(1));
    _result = (float )csVector3_x_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define csVector3_x_get(_swigobj) ((float ) _swigobj->x)
XS(_wrap_csVector3_x_get) {

    float  _result;
    csVector3 * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csVector3_x_get(csVector3 *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csVector3")) {
        croak("Type error in argument 1 of csVector3_x_get. Expected csVector3.");
        XSRETURN(1);
    }
    _result = (float )csVector3_x_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define csVector3_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
XS(_wrap_csVector3_y_set) {

    float  _result;
    csVector3 * _arg0;
    float  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csVector3_y_set(csVector3 *,float );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csVector3")) {
        croak("Type error in argument 1 of csVector3_y_set. Expected csVector3.");
        XSRETURN(1);
    }
    _arg1 = (float ) SvNV(ST(1));
    _result = (float )csVector3_y_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define csVector3_y_get(_swigobj) ((float ) _swigobj->y)
XS(_wrap_csVector3_y_get) {

    float  _result;
    csVector3 * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csVector3_y_get(csVector3 *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csVector3")) {
        croak("Type error in argument 1 of csVector3_y_get. Expected csVector3.");
        XSRETURN(1);
    }
    _result = (float )csVector3_y_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define csVector3_z_set(_swigobj,_swigval) (_swigobj->z = _swigval,_swigval)
XS(_wrap_csVector3_z_set) {

    float  _result;
    csVector3 * _arg0;
    float  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csVector3_z_set(csVector3 *,float );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csVector3")) {
        croak("Type error in argument 1 of csVector3_z_set. Expected csVector3.");
        XSRETURN(1);
    }
    _arg1 = (float ) SvNV(ST(1));
    _result = (float )csVector3_z_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define csVector3_z_get(_swigobj) ((float ) _swigobj->z)
XS(_wrap_csVector3_z_get) {

    float  _result;
    csVector3 * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csVector3_z_get(csVector3 *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csVector3")) {
        croak("Type error in argument 1 of csVector3_z_get. Expected csVector3.");
        XSRETURN(1);
    }
    _result = (float )csVector3_z_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define new_csVector3(_swigarg0,_swigarg1,_swigarg2) (new csVector3(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_new_csVector3) {

    csVector3 * _result;
    float  _arg0;
    float  _arg1;
    float  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: new_csVector3(x,y,z);");
    _arg0 = (float ) SvNV(ST(0));
    _arg1 = (float ) SvNV(ST(1));
    _arg2 = (float ) SvNV(ST(2));
    _result = (csVector3 *)new_csVector3(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csVector3", (void *) _result);
    XSRETURN(argvi);
}

#define delete_csVector3(_swigobj) (delete _swigobj)
XS(_wrap_delete_csVector3) {

    csVector3 * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: delete_csVector3(csVector3 *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csVector3")) {
        croak("Type error in argument 1 of delete_csVector3. Expected csVector3.");
        XSRETURN(1);
    }
    delete_csVector3(_arg0);
    XSRETURN(argvi);
}

#define csRGBpixel_red_set(_swigobj,_swigval) (_swigobj->red = _swigval,_swigval)
XS(_wrap_csRGBpixel_red_set) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csRGBpixel_red_set(csRGBpixel *,unsigned char );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_red_set. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _arg1 = (unsigned char )SvIV(ST(1));
    _result = (unsigned char )csRGBpixel_red_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csRGBpixel_red_get(_swigobj) ((unsigned char ) _swigobj->red)
XS(_wrap_csRGBpixel_red_get) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csRGBpixel_red_get(csRGBpixel *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_red_get. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _result = (unsigned char )csRGBpixel_red_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csRGBpixel_green_set(_swigobj,_swigval) (_swigobj->green = _swigval,_swigval)
XS(_wrap_csRGBpixel_green_set) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csRGBpixel_green_set(csRGBpixel *,unsigned char );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_green_set. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _arg1 = (unsigned char )SvIV(ST(1));
    _result = (unsigned char )csRGBpixel_green_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csRGBpixel_green_get(_swigobj) ((unsigned char ) _swigobj->green)
XS(_wrap_csRGBpixel_green_get) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csRGBpixel_green_get(csRGBpixel *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_green_get. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _result = (unsigned char )csRGBpixel_green_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csRGBpixel_blue_set(_swigobj,_swigval) (_swigobj->blue = _swigval,_swigval)
XS(_wrap_csRGBpixel_blue_set) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csRGBpixel_blue_set(csRGBpixel *,unsigned char );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_blue_set. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _arg1 = (unsigned char )SvIV(ST(1));
    _result = (unsigned char )csRGBpixel_blue_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csRGBpixel_blue_get(_swigobj) ((unsigned char ) _swigobj->blue)
XS(_wrap_csRGBpixel_blue_get) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csRGBpixel_blue_get(csRGBpixel *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_blue_get. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _result = (unsigned char )csRGBpixel_blue_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csRGBpixel_alpha_set(_swigobj,_swigval) (_swigobj->alpha = _swigval,_swigval)
XS(_wrap_csRGBpixel_alpha_set) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csRGBpixel_alpha_set(csRGBpixel *,unsigned char );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_alpha_set. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _arg1 = (unsigned char )SvIV(ST(1));
    _result = (unsigned char )csRGBpixel_alpha_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csRGBpixel_alpha_get(_swigobj) ((unsigned char ) _swigobj->alpha)
XS(_wrap_csRGBpixel_alpha_get) {

    unsigned char  _result;
    csRGBpixel * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csRGBpixel_alpha_get(csRGBpixel *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csRGBpixel")) {
        croak("Type error in argument 1 of csRGBpixel_alpha_get. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _result = (unsigned char )csRGBpixel_alpha_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_RedMask_set(_swigobj,_swigval) (_swigobj->RedMask = _swigval,_swigval)
XS(_wrap_csPixelFormat_RedMask_set) {

    unsigned long  _result;
    csPixelFormat * _arg0;
    unsigned long  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_RedMask_set(csPixelFormat *,unsigned long );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_RedMask_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (unsigned long )SvIV(ST(1));
    _result = (unsigned long )csPixelFormat_RedMask_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_RedMask_get(_swigobj) ((unsigned long ) _swigobj->RedMask)
XS(_wrap_csPixelFormat_RedMask_get) {

    unsigned long  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_RedMask_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_RedMask_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (unsigned long )csPixelFormat_RedMask_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_GreenMask_set(_swigobj,_swigval) (_swigobj->GreenMask = _swigval,_swigval)
XS(_wrap_csPixelFormat_GreenMask_set) {

    unsigned long  _result;
    csPixelFormat * _arg0;
    unsigned long  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_GreenMask_set(csPixelFormat *,unsigned long );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_GreenMask_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (unsigned long )SvIV(ST(1));
    _result = (unsigned long )csPixelFormat_GreenMask_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_GreenMask_get(_swigobj) ((unsigned long ) _swigobj->GreenMask)
XS(_wrap_csPixelFormat_GreenMask_get) {

    unsigned long  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_GreenMask_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_GreenMask_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (unsigned long )csPixelFormat_GreenMask_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_BlueMask_set(_swigobj,_swigval) (_swigobj->BlueMask = _swigval,_swigval)
XS(_wrap_csPixelFormat_BlueMask_set) {

    unsigned long  _result;
    csPixelFormat * _arg0;
    unsigned long  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_BlueMask_set(csPixelFormat *,unsigned long );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_BlueMask_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (unsigned long )SvIV(ST(1));
    _result = (unsigned long )csPixelFormat_BlueMask_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_BlueMask_get(_swigobj) ((unsigned long ) _swigobj->BlueMask)
XS(_wrap_csPixelFormat_BlueMask_get) {

    unsigned long  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_BlueMask_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_BlueMask_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (unsigned long )csPixelFormat_BlueMask_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_RedShift_set(_swigobj,_swigval) (_swigobj->RedShift = _swigval,_swigval)
XS(_wrap_csPixelFormat_RedShift_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_RedShift_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_RedShift_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_RedShift_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_RedShift_get(_swigobj) ((int ) _swigobj->RedShift)
XS(_wrap_csPixelFormat_RedShift_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_RedShift_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_RedShift_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_RedShift_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_GreenShift_set(_swigobj,_swigval) (_swigobj->GreenShift = _swigval,_swigval)
XS(_wrap_csPixelFormat_GreenShift_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_GreenShift_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_GreenShift_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_GreenShift_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_GreenShift_get(_swigobj) ((int ) _swigobj->GreenShift)
XS(_wrap_csPixelFormat_GreenShift_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_GreenShift_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_GreenShift_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_GreenShift_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_BlueShift_set(_swigobj,_swigval) (_swigobj->BlueShift = _swigval,_swigval)
XS(_wrap_csPixelFormat_BlueShift_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_BlueShift_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_BlueShift_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_BlueShift_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_BlueShift_get(_swigobj) ((int ) _swigobj->BlueShift)
XS(_wrap_csPixelFormat_BlueShift_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_BlueShift_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_BlueShift_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_BlueShift_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_RedBits_set(_swigobj,_swigval) (_swigobj->RedBits = _swigval,_swigval)
XS(_wrap_csPixelFormat_RedBits_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_RedBits_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_RedBits_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_RedBits_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_RedBits_get(_swigobj) ((int ) _swigobj->RedBits)
XS(_wrap_csPixelFormat_RedBits_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_RedBits_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_RedBits_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_RedBits_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_GreenBits_set(_swigobj,_swigval) (_swigobj->GreenBits = _swigval,_swigval)
XS(_wrap_csPixelFormat_GreenBits_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_GreenBits_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_GreenBits_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_GreenBits_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_GreenBits_get(_swigobj) ((int ) _swigobj->GreenBits)
XS(_wrap_csPixelFormat_GreenBits_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_GreenBits_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_GreenBits_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_GreenBits_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_BlueBits_set(_swigobj,_swigval) (_swigobj->BlueBits = _swigval,_swigval)
XS(_wrap_csPixelFormat_BlueBits_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_BlueBits_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_BlueBits_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_BlueBits_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_BlueBits_get(_swigobj) ((int ) _swigobj->BlueBits)
XS(_wrap_csPixelFormat_BlueBits_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_BlueBits_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_BlueBits_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_BlueBits_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_PalEntries_set(_swigobj,_swigval) (_swigobj->PalEntries = _swigval,_swigval)
XS(_wrap_csPixelFormat_PalEntries_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_PalEntries_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_PalEntries_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_PalEntries_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_PalEntries_get(_swigobj) ((int ) _swigobj->PalEntries)
XS(_wrap_csPixelFormat_PalEntries_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_PalEntries_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_PalEntries_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_PalEntries_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_PixelBytes_set(_swigobj,_swigval) (_swigobj->PixelBytes = _swigval,_swigval)
XS(_wrap_csPixelFormat_PixelBytes_set) {

    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csPixelFormat_PixelBytes_set(csPixelFormat *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_PixelBytes_set. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csPixelFormat_PixelBytes_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csPixelFormat_PixelBytes_get(_swigobj) ((int ) _swigobj->PixelBytes)
XS(_wrap_csPixelFormat_PixelBytes_get) {

    int  _result;
    csPixelFormat * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csPixelFormat_PixelBytes_get(csPixelFormat *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csPixelFormat")) {
        croak("Type error in argument 1 of csPixelFormat_PixelBytes_get. Expected csPixelFormat.");
        XSRETURN(1);
    }
    _result = (int )csPixelFormat_PixelBytes_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_CanClip_set(_swigobj,_swigval) (_swigobj->CanClip = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_CanClip_set) {

    bool  _result;
    csGraphics3DCaps * _arg0;
    bool  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_CanClip_set(csGraphics3DCaps *,bool );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_CanClip_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (bool )SvIV(ST(1));
    _result = (bool )csGraphics3DCaps_CanClip_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_CanClip_get(_swigobj) ((bool ) _swigobj->CanClip)
XS(_wrap_csGraphics3DCaps_CanClip_get) {

    bool  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_CanClip_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_CanClip_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (bool )csGraphics3DCaps_CanClip_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_minTexHeight_set(_swigobj,_swigval) (_swigobj->minTexHeight = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_minTexHeight_set) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_minTexHeight_set(csGraphics3DCaps *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_minTexHeight_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csGraphics3DCaps_minTexHeight_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_minTexHeight_get(_swigobj) ((int ) _swigobj->minTexHeight)
XS(_wrap_csGraphics3DCaps_minTexHeight_get) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_minTexHeight_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_minTexHeight_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (int )csGraphics3DCaps_minTexHeight_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_minTexWidth_set(_swigobj,_swigval) (_swigobj->minTexWidth = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_minTexWidth_set) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_minTexWidth_set(csGraphics3DCaps *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_minTexWidth_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csGraphics3DCaps_minTexWidth_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_minTexWidth_get(_swigobj) ((int ) _swigobj->minTexWidth)
XS(_wrap_csGraphics3DCaps_minTexWidth_get) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_minTexWidth_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_minTexWidth_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (int )csGraphics3DCaps_minTexWidth_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_maxTexHeight_set(_swigobj,_swigval) (_swigobj->maxTexHeight = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_maxTexHeight_set) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_maxTexHeight_set(csGraphics3DCaps *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_maxTexHeight_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csGraphics3DCaps_maxTexHeight_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_maxTexHeight_get(_swigobj) ((int ) _swigobj->maxTexHeight)
XS(_wrap_csGraphics3DCaps_maxTexHeight_get) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_maxTexHeight_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_maxTexHeight_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (int )csGraphics3DCaps_maxTexHeight_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_maxTexWidth_set(_swigobj,_swigval) (_swigobj->maxTexWidth = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_maxTexWidth_set) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_maxTexWidth_set(csGraphics3DCaps *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_maxTexWidth_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csGraphics3DCaps_maxTexWidth_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_maxTexWidth_get(_swigobj) ((int ) _swigobj->maxTexWidth)
XS(_wrap_csGraphics3DCaps_maxTexWidth_get) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_maxTexWidth_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_maxTexWidth_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (int )csGraphics3DCaps_maxTexWidth_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_fog_set(_swigobj,_swigval) (_swigobj->fog = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_fog_set) {

    G3D_FOGMETHOD  _result;
    csGraphics3DCaps * _arg0;
    G3D_FOGMETHOD  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_fog_set(csGraphics3DCaps *,G3D_FOGMETHOD );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_fog_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (G3D_FOGMETHOD )SvIV(ST(1));
    _result = (G3D_FOGMETHOD )csGraphics3DCaps_fog_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_fog_get(_swigobj) ((G3D_FOGMETHOD ) _swigobj->fog)
XS(_wrap_csGraphics3DCaps_fog_get) {

    G3D_FOGMETHOD  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_fog_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_fog_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (G3D_FOGMETHOD )csGraphics3DCaps_fog_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_NeedsPO2Maps_set(_swigobj,_swigval) (_swigobj->NeedsPO2Maps = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_NeedsPO2Maps_set) {

    bool  _result;
    csGraphics3DCaps * _arg0;
    bool  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_NeedsPO2Maps_set(csGraphics3DCaps *,bool );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_NeedsPO2Maps_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (bool )SvIV(ST(1));
    _result = (bool )csGraphics3DCaps_NeedsPO2Maps_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_NeedsPO2Maps_get(_swigobj) ((bool ) _swigobj->NeedsPO2Maps)
XS(_wrap_csGraphics3DCaps_NeedsPO2Maps_get) {

    bool  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_NeedsPO2Maps_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_NeedsPO2Maps_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (bool )csGraphics3DCaps_NeedsPO2Maps_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_MaxAspectRatio_set(_swigobj,_swigval) (_swigobj->MaxAspectRatio = _swigval,_swigval)
XS(_wrap_csGraphics3DCaps_MaxAspectRatio_set) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csGraphics3DCaps_MaxAspectRatio_set(csGraphics3DCaps *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_MaxAspectRatio_set. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csGraphics3DCaps_MaxAspectRatio_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csGraphics3DCaps_MaxAspectRatio_get(_swigobj) ((int ) _swigobj->MaxAspectRatio)
XS(_wrap_csGraphics3DCaps_MaxAspectRatio_get) {

    int  _result;
    csGraphics3DCaps * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csGraphics3DCaps_MaxAspectRatio_get(csGraphics3DCaps *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csGraphics3DCaps")) {
        croak("Type error in argument 1 of csGraphics3DCaps_MaxAspectRatio_get. Expected csGraphics3DCaps.");
        XSRETURN(1);
    }
    _result = (int )csGraphics3DCaps_MaxAspectRatio_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
XS(_wrap_csImageArea_x_set) {

    int  _result;
    csImageArea * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csImageArea_x_set(csImageArea *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_x_set. Expected csImageArea.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csImageArea_x_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_x_get(_swigobj) ((int ) _swigobj->x)
XS(_wrap_csImageArea_x_get) {

    int  _result;
    csImageArea * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csImageArea_x_get(csImageArea *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_x_get. Expected csImageArea.");
        XSRETURN(1);
    }
    _result = (int )csImageArea_x_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
XS(_wrap_csImageArea_y_set) {

    int  _result;
    csImageArea * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csImageArea_y_set(csImageArea *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_y_set. Expected csImageArea.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csImageArea_y_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_y_get(_swigobj) ((int ) _swigobj->y)
XS(_wrap_csImageArea_y_get) {

    int  _result;
    csImageArea * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csImageArea_y_get(csImageArea *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_y_get. Expected csImageArea.");
        XSRETURN(1);
    }
    _result = (int )csImageArea_y_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_w_set(_swigobj,_swigval) (_swigobj->w = _swigval,_swigval)
XS(_wrap_csImageArea_w_set) {

    int  _result;
    csImageArea * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csImageArea_w_set(csImageArea *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_w_set. Expected csImageArea.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csImageArea_w_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_w_get(_swigobj) ((int ) _swigobj->w)
XS(_wrap_csImageArea_w_get) {

    int  _result;
    csImageArea * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csImageArea_w_get(csImageArea *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_w_get. Expected csImageArea.");
        XSRETURN(1);
    }
    _result = (int )csImageArea_w_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_h_set(_swigobj,_swigval) (_swigobj->h = _swigval,_swigval)
XS(_wrap_csImageArea_h_set) {

    int  _result;
    csImageArea * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csImageArea_h_set(csImageArea *,int );");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_h_set. Expected csImageArea.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )csImageArea_h_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define csImageArea_h_get(_swigobj) ((int ) _swigobj->h)
XS(_wrap_csImageArea_h_get) {

    int  _result;
    csImageArea * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csImageArea_h_get(csImageArea *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_h_get. Expected csImageArea.");
        XSRETURN(1);
    }
    _result = (int )csImageArea_h_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

static char * csImageArea_data_set(csImageArea *obj, char *val) {
    if (obj->data) delete [] obj->data;
    obj->data = new char[strlen(val)+1];
    strcpy(obj->data,val);
    return val;
}
XS(_wrap_csImageArea_data_set) {

    char * _result;
    csImageArea * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: csImageArea_data_set(csImageArea *,char *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_data_set. Expected csImageArea.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (char *)csImageArea_data_set(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

#define csImageArea_data_get(_swigobj) ((char *) _swigobj->data)
XS(_wrap_csImageArea_data_get) {

    char * _result;
    csImageArea * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: csImageArea_data_get(csImageArea *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"csImageArea")) {
        croak("Type error in argument 1 of csImageArea_data_get. Expected csImageArea.");
        XSRETURN(1);
    }
    _result = (char *)csImageArea_data_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

#define new_csImageArea(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new csImageArea(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_new_csImageArea) {

    csImageArea * _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: new_csImageArea(sx,sy,sw,sh);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _result = (csImageArea *)new_csImageArea(_arg0,_arg1,_arg2,_arg3);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csImageArea", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiComponentToiBase(void *ptr) {
    iComponent *src;
    iBase *dest;
    src = (iComponent *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iComponent_Initialize(_swigobj,_swigarg0)  (_swigobj->Initialize(_swigarg0))
XS(_wrap_iComponent_Initialize) {

    bool  _result;
    iComponent * _arg0;
    iObjectRegistry * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iComponent_Initialize(iComponent *,object_reg);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iComponent")) {
        croak("Type error in argument 1 of iComponent_Initialize. Expected iComponent.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iObjectRegistry")) {
        croak("Type error in argument 2 of iComponent_Initialize. Expected iObjectRegistry.");
        XSRETURN(1);
    }
    _result = (bool )iComponent_Initialize(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

static void *SwigiEventHandlerToiBase(void *ptr) {
    iEventHandler *src;
    iBase *dest;
    src = (iEventHandler *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iEventHandler_HandleEvent(_swigobj,_swigarg0)  (_swigobj->HandleEvent(_swigarg0))
XS(_wrap_iEventHandler_HandleEvent) {

    bool  _result;
    iEventHandler * _arg0;
    iEvent * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iEventHandler_HandleEvent(iEventHandler *,iEvent *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEventHandler")) {
        croak("Type error in argument 1 of iEventHandler_HandleEvent. Expected iEventHandler.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iEventPtr")) {
        croak("Type error in argument 2 of iEventHandler_HandleEvent. Expected iEventPtr.");
        XSRETURN(1);
    }
    _result = (bool )iEventHandler_HandleEvent(_arg0,*_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

static void *SwigiTextureWrapperToiBase(void *ptr) {
    iTextureWrapper *src;
    iBase *dest;
    src = (iTextureWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static void *SwigiTextureHandleToiBase(void *ptr) {
    iTextureHandle *src;
    iBase *dest;
    src = (iTextureHandle *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iTextureHandle_GetMipMapDimensions(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMipMapDimensions(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iTextureHandle_GetMipMapDimensions) {

    bool  _result;
    iTextureHandle * _arg0;
    int  _arg1;
    int * _arg2;
    int * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iTextureHandle_GetMipMapDimensions(iTextureHandle *,mipmap,mw,mh);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureHandle")) {
        croak("Type error in argument 1 of iTextureHandle_GetMipMapDimensions. Expected iTextureHandle.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"intPtr")) {
        croak("Type error in argument 3 of iTextureHandle_GetMipMapDimensions. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"intPtr")) {
        croak("Type error in argument 4 of iTextureHandle_GetMipMapDimensions. Expected intPtr.");
        XSRETURN(1);
    }
    _result = (bool )iTextureHandle_GetMipMapDimensions(_arg0,_arg1,*_arg2,*_arg3);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iTextureHandle_GetMeanColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMeanColor(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iTextureHandle_GetMeanColor) {

    iTextureHandle * _arg0;
    unsigned char * _arg1;
    unsigned char * _arg2;
    unsigned char * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iTextureHandle_GetMeanColor(iTextureHandle *,red,green,blue);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureHandle")) {
        croak("Type error in argument 1 of iTextureHandle_GetMeanColor. Expected iTextureHandle.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"unsigned charPtr")) {
        croak("Type error in argument 2 of iTextureHandle_GetMeanColor. Expected unsigned charPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"unsigned charPtr")) {
        croak("Type error in argument 3 of iTextureHandle_GetMeanColor. Expected unsigned charPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"unsigned charPtr")) {
        croak("Type error in argument 4 of iTextureHandle_GetMeanColor. Expected unsigned charPtr.");
        XSRETURN(1);
    }
    iTextureHandle_GetMeanColor(_arg0,*_arg1,*_arg2,*_arg3);
    XSRETURN(argvi);
}

#define iTextureHandle_GetCacheData(_swigobj)  (_swigobj->GetCacheData())
XS(_wrap_iTextureHandle_GetCacheData) {

    void * _result;
    iTextureHandle * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iTextureHandle_GetCacheData(iTextureHandle *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureHandle")) {
        croak("Type error in argument 1 of iTextureHandle_GetCacheData. Expected iTextureHandle.");
        XSRETURN(1);
    }
    _result = (void *)iTextureHandle_GetCacheData(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iTextureHandle_SetCacheData(_swigobj,_swigarg0)  (_swigobj->SetCacheData(_swigarg0))
XS(_wrap_iTextureHandle_SetCacheData) {

    iTextureHandle * _arg0;
    void * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iTextureHandle_SetCacheData(iTextureHandle *,d);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureHandle")) {
        croak("Type error in argument 1 of iTextureHandle_SetCacheData. Expected iTextureHandle.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,(char *) 0 )) {
        croak("Type error in argument 2 of iTextureHandle_SetCacheData. Expected voidPtr.");
        XSRETURN(1);
    }
    iTextureHandle_SetCacheData(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iTextureHandle_GetPrivateObject(_swigobj)  (_swigobj->GetPrivateObject())
XS(_wrap_iTextureHandle_GetPrivateObject) {

    void * _result;
    iTextureHandle * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iTextureHandle_GetPrivateObject(iTextureHandle *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureHandle")) {
        croak("Type error in argument 1 of iTextureHandle_GetPrivateObject. Expected iTextureHandle.");
        XSRETURN(1);
    }
    _result = (void *)iTextureHandle_GetPrivateObject(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiMaterialHandleToiBase(void *ptr) {
    iMaterialHandle *src;
    iBase *dest;
    src = (iMaterialHandle *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMaterialHandle_GetTexture(_swigobj)  (_swigobj->GetTexture())
XS(_wrap_iMaterialHandle_GetTexture) {

    iTextureHandle * _result;
    iMaterialHandle * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iMaterialHandle_GetTexture(iMaterialHandle *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMaterialHandle")) {
        croak("Type error in argument 1 of iMaterialHandle_GetTexture. Expected iMaterialHandle.");
        XSRETURN(1);
    }
    _result = (iTextureHandle *)iMaterialHandle_GetTexture(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iTextureHandle", (void *) _result);
    XSRETURN(argvi);
}

#define iMaterialHandle_GetFlatColor(_swigobj,_swigarg0)  (_swigobj->GetFlatColor(_swigarg0))
XS(_wrap_iMaterialHandle_GetFlatColor) {

    iMaterialHandle * _arg0;
    csRGBpixel * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iMaterialHandle_GetFlatColor(iMaterialHandle *,oColor);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMaterialHandle")) {
        croak("Type error in argument 1 of iMaterialHandle_GetFlatColor. Expected iMaterialHandle.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csRGBpixel")) {
        croak("Type error in argument 2 of iMaterialHandle_GetFlatColor. Expected csRGBpixel.");
        XSRETURN(1);
    }
    iMaterialHandle_GetFlatColor(_arg0,*_arg1);
    XSRETURN(argvi);
}

#define iMaterialHandle_GetReflection(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetReflection(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iMaterialHandle_GetReflection) {

    iMaterialHandle * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iMaterialHandle_GetReflection(iMaterialHandle *,oDiffuse,oAmbient,oReflection);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMaterialHandle")) {
        croak("Type error in argument 1 of iMaterialHandle_GetReflection. Expected iMaterialHandle.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"floatPtr")) {
        croak("Type error in argument 2 of iMaterialHandle_GetReflection. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"floatPtr")) {
        croak("Type error in argument 3 of iMaterialHandle_GetReflection. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"floatPtr")) {
        croak("Type error in argument 4 of iMaterialHandle_GetReflection. Expected floatPtr.");
        XSRETURN(1);
    }
    iMaterialHandle_GetReflection(_arg0,*_arg1,*_arg2,*_arg3);
    XSRETURN(argvi);
}

#define iMaterialHandle_Prepare(_swigobj)  (_swigobj->Prepare())
XS(_wrap_iMaterialHandle_Prepare) {

    iMaterialHandle * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iMaterialHandle_Prepare(iMaterialHandle *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMaterialHandle")) {
        croak("Type error in argument 1 of iMaterialHandle_Prepare. Expected iMaterialHandle.");
        XSRETURN(1);
    }
    iMaterialHandle_Prepare(_arg0);
    XSRETURN(argvi);
}

static void *SwigiMaterialWrapperToiBase(void *ptr) {
    iMaterialWrapper *src;
    iBase *dest;
    src = (iMaterialWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMaterialWrapper_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
XS(_wrap_iMaterialWrapper_GetMaterialHandle) {

    iMaterialHandle * _result;
    iMaterialWrapper * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iMaterialWrapper_GetMaterialHandle(iMaterialWrapper *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMaterialWrapper")) {
        croak("Type error in argument 1 of iMaterialWrapper_GetMaterialHandle. Expected iMaterialWrapper.");
        XSRETURN(1);
    }
    _result = (iMaterialHandle *)iMaterialWrapper_GetMaterialHandle(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iMaterialHandle", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiFontToiBase(void *ptr) {
    iFont *src;
    iBase *dest;
    src = (iFont *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iFont_SetSize(_swigobj,_swigarg0)  (_swigobj->SetSize(_swigarg0))
XS(_wrap_iFont_SetSize) {

    iFont * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iFont_SetSize(iFont *,iSize);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFont")) {
        croak("Type error in argument 1 of iFont_SetSize. Expected iFont.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    iFont_SetSize(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iFont_GetSize(_swigobj)  (_swigobj->GetSize())
XS(_wrap_iFont_GetSize) {

    int  _result;
    iFont * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iFont_GetSize(iFont *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFont")) {
        croak("Type error in argument 1 of iFont_GetSize. Expected iFont.");
        XSRETURN(1);
    }
    _result = (int )iFont_GetSize(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iFont_GetMaxSize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetMaxSize(_swigarg0,_swigarg1))
XS(_wrap_iFont_GetMaxSize) {

    iFont * _arg0;
    int * _arg1;
    int * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iFont_GetMaxSize(iFont *,oW,oH);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFont")) {
        croak("Type error in argument 1 of iFont_GetMaxSize. Expected iFont.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"intPtr")) {
        croak("Type error in argument 2 of iFont_GetMaxSize. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"intPtr")) {
        croak("Type error in argument 3 of iFont_GetMaxSize. Expected intPtr.");
        XSRETURN(1);
    }
    iFont_GetMaxSize(_arg0,*_arg1,*_arg2);
    XSRETURN(argvi);
}

#define iFont_GetGlyphSize(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetGlyphSize(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iFont_GetGlyphSize) {

    bool  _result;
    iFont * _arg0;
    unsigned char  _arg1;
    int * _arg2;
    int * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iFont_GetGlyphSize(iFont *,c,oW,oH);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFont")) {
        croak("Type error in argument 1 of iFont_GetGlyphSize. Expected iFont.");
        XSRETURN(1);
    }
    _arg1 = (unsigned char )SvIV(ST(1));
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"intPtr")) {
        croak("Type error in argument 3 of iFont_GetGlyphSize. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"intPtr")) {
        croak("Type error in argument 4 of iFont_GetGlyphSize. Expected intPtr.");
        XSRETURN(1);
    }
    _result = (bool )iFont_GetGlyphSize(_arg0,_arg1,*_arg2,*_arg3);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iFont_GetGlyphBitmap(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetGlyphBitmap(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iFont_GetGlyphBitmap) {

    void * _result;
    iFont * _arg0;
    unsigned char  _arg1;
    int * _arg2;
    int * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iFont_GetGlyphBitmap(iFont *,c,oW,oH);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFont")) {
        croak("Type error in argument 1 of iFont_GetGlyphBitmap. Expected iFont.");
        XSRETURN(1);
    }
    _arg1 = (unsigned char )SvIV(ST(1));
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"intPtr")) {
        croak("Type error in argument 3 of iFont_GetGlyphBitmap. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"intPtr")) {
        croak("Type error in argument 4 of iFont_GetGlyphBitmap. Expected intPtr.");
        XSRETURN(1);
    }
    _result = (void *)iFont_GetGlyphBitmap(_arg0,_arg1,*_arg2,*_arg3);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iFont_GetDimensions(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetDimensions(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iFont_GetDimensions) {

    iFont * _arg0;
    char * _arg1;
    int * _arg2;
    int * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iFont_GetDimensions(iFont *,text,oW,oH);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFont")) {
        croak("Type error in argument 1 of iFont_GetDimensions. Expected iFont.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"intPtr")) {
        croak("Type error in argument 3 of iFont_GetDimensions. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"intPtr")) {
        croak("Type error in argument 4 of iFont_GetDimensions. Expected intPtr.");
        XSRETURN(1);
    }
    iFont_GetDimensions(_arg0,_arg1,*_arg2,*_arg3);
    XSRETURN(argvi);
}

#define iFont_GetLength(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetLength(_swigarg0,_swigarg1))
XS(_wrap_iFont_GetLength) {

    int  _result;
    iFont * _arg0;
    char * _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iFont_GetLength(iFont *,text,maxwidth);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFont")) {
        croak("Type error in argument 1 of iFont_GetLength. Expected iFont.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _arg2 = (int )SvIV(ST(2));
    _result = (int )iFont_GetLength(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

static void *SwigiFontServerToiBase(void *ptr) {
    iFontServer *src;
    iBase *dest;
    src = (iFontServer *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iFontServer_LoadFont(_swigobj,_swigarg0)  (_swigobj->LoadFont(_swigarg0))
XS(_wrap_iFontServer_LoadFont) {

    csPtr< iFont > * _result;
    iFontServer * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iFontServer_LoadFont(iFontServer *,filename);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFontServer")) {
        croak("Type error in argument 1 of iFontServer_LoadFont. Expected iFontServer.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = new csPtr< iFont > (iFontServer_LoadFont(_arg0,_arg1));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iFont >Ptr", (void *) _result);
    XSRETURN(argvi);
}

#define iFontServer_GetFontCount(_swigobj)  (_swigobj->GetFontCount())
XS(_wrap_iFontServer_GetFontCount) {

    int  _result;
    iFontServer * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iFontServer_GetFontCount(iFontServer *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFontServer")) {
        croak("Type error in argument 1 of iFontServer_GetFontCount. Expected iFontServer.");
        XSRETURN(1);
    }
    _result = (int )iFontServer_GetFontCount(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iFontServer_GetFont(_swigobj,_swigarg0)  (_swigobj->GetFont(_swigarg0))
XS(_wrap_iFontServer_GetFont) {

    iFont * _result;
    iFontServer * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iFontServer_GetFont(iFontServer *,iIndex);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iFontServer")) {
        croak("Type error in argument 1 of iFontServer_GetFont. Expected iFontServer.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (iFont *)iFontServer_GetFont(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iFont", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiGraphics2DToiBase(void *ptr) {
    iGraphics2D *src;
    iBase *dest;
    src = (iGraphics2D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iGraphics2D_Open(_swigobj)  (_swigobj->Open())
XS(_wrap_iGraphics2D_Open) {

    bool  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_Open(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_Open. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (bool )iGraphics2D_Open(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_Close(_swigobj)  (_swigobj->Close())
XS(_wrap_iGraphics2D_Close) {

    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_Close(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_Close. Expected iGraphics2D.");
        XSRETURN(1);
    }
    iGraphics2D_Close(_arg0);
    XSRETURN(argvi);
}

#define iGraphics2D_GetWidth(_swigobj)  (_swigobj->GetWidth())
XS(_wrap_iGraphics2D_GetWidth) {

    int  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetWidth(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetWidth. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (int )iGraphics2D_GetWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetHeight(_swigobj)  (_swigobj->GetHeight())
XS(_wrap_iGraphics2D_GetHeight) {

    int  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetHeight(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetHeight. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (int )iGraphics2D_GetHeight(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetFullScreen(_swigobj)  (_swigobj->GetFullScreen())
XS(_wrap_iGraphics2D_GetFullScreen) {

    bool  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetFullScreen(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetFullScreen. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (bool )iGraphics2D_GetFullScreen(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetPage(_swigobj)  (_swigobj->GetPage())
XS(_wrap_iGraphics2D_GetPage) {

    int  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetPage(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetPage. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (int )iGraphics2D_GetPage(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_DoubleBuffer(_swigobj,_swigarg0)  (_swigobj->DoubleBuffer(_swigarg0))
XS(_wrap_iGraphics2D_DoubleBuffer) {

    bool  _result;
    iGraphics2D * _arg0;
    bool  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics2D_DoubleBuffer(iGraphics2D *,Enable);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_DoubleBuffer. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (bool )SvIV(ST(1));
    _result = (bool )iGraphics2D_DoubleBuffer(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetDoubleBufferState(_swigobj)  (_swigobj->GetDoubleBufferState())
XS(_wrap_iGraphics2D_GetDoubleBufferState) {

    bool  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetDoubleBufferState(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetDoubleBufferState. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (bool )iGraphics2D_GetDoubleBufferState(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetPixelFormat(_swigobj)  (_swigobj->GetPixelFormat())
XS(_wrap_iGraphics2D_GetPixelFormat) {

    csPixelFormat * _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetPixelFormat(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetPixelFormat. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (csPixelFormat *)iGraphics2D_GetPixelFormat(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPixelFormat", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetPixelBytes(_swigobj)  (_swigobj->GetPixelBytes())
XS(_wrap_iGraphics2D_GetPixelBytes) {

    int  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetPixelBytes(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetPixelBytes. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (int )iGraphics2D_GetPixelBytes(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetPalEntryCount(_swigobj)  (_swigobj->GetPalEntryCount())
XS(_wrap_iGraphics2D_GetPalEntryCount) {

    int  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetPalEntryCount(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetPalEntryCount. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (int )iGraphics2D_GetPalEntryCount(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetPalette(_swigobj)  (_swigobj->GetPalette())
XS(_wrap_iGraphics2D_GetPalette) {

    csRGBpixel * _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetPalette(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetPalette. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (csRGBpixel *)iGraphics2D_GetPalette(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csRGBpixel", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_SetRGB(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->SetRGB(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iGraphics2D_SetRGB) {

    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iGraphics2D_SetRGB(iGraphics2D *,i,r,g,b);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_SetRGB. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    iGraphics2D_SetRGB(_arg0,_arg1,_arg2,_arg3,_arg4);
    XSRETURN(argvi);
}

#define iGraphics2D_SetClipRect(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->SetClipRect(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iGraphics2D_SetClipRect) {

    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iGraphics2D_SetClipRect(iGraphics2D *,nMinX,nMinY,nMaxX,nMaxY);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_SetClipRect. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    iGraphics2D_SetClipRect(_arg0,_arg1,_arg2,_arg3,_arg4);
    XSRETURN(argvi);
}

#define iGraphics2D_GetClipRect(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->GetClipRect(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iGraphics2D_GetClipRect) {

    iGraphics2D * _arg0;
    int * _arg1;
    int * _arg2;
    int * _arg3;
    int * _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iGraphics2D_GetClipRect(iGraphics2D *,nMinX,nMinY,nMaxX,nMaxY);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetClipRect. Expected iGraphics2D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"intPtr")) {
        croak("Type error in argument 2 of iGraphics2D_GetClipRect. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"intPtr")) {
        croak("Type error in argument 3 of iGraphics2D_GetClipRect. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"intPtr")) {
        croak("Type error in argument 4 of iGraphics2D_GetClipRect. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(4),(void **) &_arg4,"intPtr")) {
        croak("Type error in argument 5 of iGraphics2D_GetClipRect. Expected intPtr.");
        XSRETURN(1);
    }
    iGraphics2D_GetClipRect(_arg0,*_arg1,*_arg2,*_arg3,*_arg4);
    XSRETURN(argvi);
}

#define iGraphics2D_BeginDraw(_swigobj)  (_swigobj->BeginDraw())
XS(_wrap_iGraphics2D_BeginDraw) {

    bool  _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_BeginDraw(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_BeginDraw. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (bool )iGraphics2D_BeginDraw(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_FinishDraw(_swigobj)  (_swigobj->FinishDraw())
XS(_wrap_iGraphics2D_FinishDraw) {

    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_FinishDraw(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_FinishDraw. Expected iGraphics2D.");
        XSRETURN(1);
    }
    iGraphics2D_FinishDraw(_arg0);
    XSRETURN(argvi);
}

#define iGraphics2D_Print(_swigobj,_swigarg0)  (_swigobj->Print(_swigarg0))
XS(_wrap_iGraphics2D_Print) {

    iGraphics2D * _arg0;
    csRect * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics2D_Print(iGraphics2D *,pArea);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_Print. Expected iGraphics2D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csRectPtr")) {
        croak("Type error in argument 2 of iGraphics2D_Print. Expected csRectPtr.");
        XSRETURN(1);
    }
    iGraphics2D_Print(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics2D_Clear(_swigobj,_swigarg0)  (_swigobj->Clear(_swigarg0))
XS(_wrap_iGraphics2D_Clear) {

    iGraphics2D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics2D_Clear(iGraphics2D *,color);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_Clear. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    iGraphics2D_Clear(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics2D_ClearAll(_swigobj,_swigarg0)  (_swigobj->ClearAll(_swigarg0))
XS(_wrap_iGraphics2D_ClearAll) {

    iGraphics2D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics2D_ClearAll(iGraphics2D *,color);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_ClearAll. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    iGraphics2D_ClearAll(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics2D_DrawLine(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->DrawLine(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
XS(_wrap_iGraphics2D_DrawLine) {

    iGraphics2D * _arg0;
    float  _arg1;
    float  _arg2;
    float  _arg3;
    float  _arg4;
    int  _arg5;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 6) || (items > 6)) 
        croak("Usage: iGraphics2D_DrawLine(iGraphics2D *,x1,y1,x2,y2,color);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_DrawLine. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (float ) SvNV(ST(1));
    _arg2 = (float ) SvNV(ST(2));
    _arg3 = (float ) SvNV(ST(3));
    _arg4 = (float ) SvNV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    iGraphics2D_DrawLine(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    XSRETURN(argvi);
}

#define iGraphics2D_DrawBox(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->DrawBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
XS(_wrap_iGraphics2D_DrawBox) {

    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 6) || (items > 6)) 
        croak("Usage: iGraphics2D_DrawBox(iGraphics2D *,x,y,w,h,color);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_DrawBox. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    iGraphics2D_DrawBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    XSRETURN(argvi);
}

#define iGraphics2D_ClipLine(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7)  (_swigobj->ClipLine(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
XS(_wrap_iGraphics2D_ClipLine) {

    bool  _result;
    iGraphics2D * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    float * _arg4;
    int  _arg5;
    int  _arg6;
    int  _arg7;
    int  _arg8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 9) || (items > 9)) 
        croak("Usage: iGraphics2D_ClipLine(iGraphics2D *,x1,y1,x2,y2,xmin,ymin,xmax,ymax);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_ClipLine. Expected iGraphics2D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"floatPtr")) {
        croak("Type error in argument 2 of iGraphics2D_ClipLine. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"floatPtr")) {
        croak("Type error in argument 3 of iGraphics2D_ClipLine. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"floatPtr")) {
        croak("Type error in argument 4 of iGraphics2D_ClipLine. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(4),(void **) &_arg4,"floatPtr")) {
        croak("Type error in argument 5 of iGraphics2D_ClipLine. Expected floatPtr.");
        XSRETURN(1);
    }
    _arg5 = (int )SvIV(ST(5));
    _arg6 = (int )SvIV(ST(6));
    _arg7 = (int )SvIV(ST(7));
    _arg8 = (int )SvIV(ST(8));
    _result = (bool )iGraphics2D_ClipLine(_arg0,*_arg1,*_arg2,*_arg3,*_arg4,_arg5,_arg6,_arg7,_arg8);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_DrawPixel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->DrawPixel(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iGraphics2D_DrawPixel) {

    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iGraphics2D_DrawPixel(iGraphics2D *,x,y,color);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_DrawPixel. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    iGraphics2D_DrawPixel(_arg0,_arg1,_arg2,_arg3);
    XSRETURN(argvi);
}

#define iGraphics2D_GetPixelAt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetPixelAt(_swigarg0,_swigarg1))
XS(_wrap_iGraphics2D_GetPixelAt) {

    void * _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics2D_GetPixelAt(iGraphics2D *,x,y);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetPixelAt. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _result = (void *)iGraphics2D_GetPixelAt(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_GetPixel(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->GetPixel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
XS(_wrap_iGraphics2D_GetPixel) {

    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    unsigned char * _arg3;
    unsigned char * _arg4;
    unsigned char * _arg5;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 6) || (items > 6)) 
        croak("Usage: iGraphics2D_GetPixel(iGraphics2D *,x,y,oR,oG,oB);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetPixel. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"unsigned charPtr")) {
        croak("Type error in argument 4 of iGraphics2D_GetPixel. Expected unsigned charPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(4),(void **) &_arg4,"unsigned charPtr")) {
        croak("Type error in argument 5 of iGraphics2D_GetPixel. Expected unsigned charPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(5),(void **) &_arg5,"unsigned charPtr")) {
        croak("Type error in argument 6 of iGraphics2D_GetPixel. Expected unsigned charPtr.");
        XSRETURN(1);
    }
    iGraphics2D_GetPixel(_arg0,_arg1,_arg2,*_arg3,*_arg4,*_arg5);
    XSRETURN(argvi);
}

#define iGraphics2D_SaveArea(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->SaveArea(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iGraphics2D_SaveArea) {

    csImageArea * _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iGraphics2D_SaveArea(iGraphics2D *,x,y,w,h);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_SaveArea. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _result = (csImageArea *)iGraphics2D_SaveArea(_arg0,_arg1,_arg2,_arg3,_arg4);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csImageArea", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_RestoreArea(_swigobj,_swigarg0,_swigarg1)  (_swigobj->RestoreArea(_swigarg0,_swigarg1))
XS(_wrap_iGraphics2D_RestoreArea) {

    iGraphics2D * _arg0;
    csImageArea * _arg1;
    bool  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics2D_RestoreArea(iGraphics2D *,Area,Free);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_RestoreArea. Expected iGraphics2D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csImageArea")) {
        croak("Type error in argument 2 of iGraphics2D_RestoreArea. Expected csImageArea.");
        XSRETURN(1);
    }
    _arg2 = (bool )SvIV(ST(2));
    iGraphics2D_RestoreArea(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

#define iGraphics2D_FreeArea(_swigobj,_swigarg0)  (_swigobj->FreeArea(_swigarg0))
XS(_wrap_iGraphics2D_FreeArea) {

    iGraphics2D * _arg0;
    csImageArea * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics2D_FreeArea(iGraphics2D *,Area);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_FreeArea. Expected iGraphics2D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csImageArea")) {
        croak("Type error in argument 2 of iGraphics2D_FreeArea. Expected csImageArea.");
        XSRETURN(1);
    }
    iGraphics2D_FreeArea(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics2D_Write(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->Write(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
XS(_wrap_iGraphics2D_Write) {

    iGraphics2D * _arg0;
    iFont * _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;
    char * _arg6;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 7) || (items > 7)) 
        croak("Usage: iGraphics2D_Write(iGraphics2D *,font,x,y,fg,bg,str);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_Write. Expected iGraphics2D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iFont")) {
        croak("Type error in argument 2 of iGraphics2D_Write. Expected iFont.");
        XSRETURN(1);
    }
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    _arg6 = (char *) SvPV(ST(6),na);
    iGraphics2D_Write(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    XSRETURN(argvi);
}

#define iGraphics2D_GetFontServer(_swigobj)  (_swigobj->GetFontServer())
XS(_wrap_iGraphics2D_GetFontServer) {

    iFontServer * _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_GetFontServer(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_GetFontServer. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = (iFontServer *)iGraphics2D_GetFontServer(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iFontServer", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_SetMousePosition(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetMousePosition(_swigarg0,_swigarg1))
XS(_wrap_iGraphics2D_SetMousePosition) {

    bool  _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics2D_SetMousePosition(iGraphics2D *,x,y);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_SetMousePosition. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _result = (bool )iGraphics2D_SetMousePosition(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_SetMouseCursor(_swigobj,_swigarg0)  (_swigobj->SetMouseCursor(_swigarg0))
XS(_wrap_iGraphics2D_SetMouseCursor) {

    bool  _result;
    iGraphics2D * _arg0;
    csMouseCursorID * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics2D_SetMouseCursor(iGraphics2D *,iShape);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_SetMouseCursor. Expected iGraphics2D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csMouseCursorIDPtr")) {
        croak("Type error in argument 2 of iGraphics2D_SetMouseCursor. Expected csMouseCursorIDPtr.");
        XSRETURN(1);
    }
    _result = (bool )iGraphics2D_SetMouseCursor(_arg0,*_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_ScreenShot(_swigobj)  (_swigobj->ScreenShot())
XS(_wrap_iGraphics2D_ScreenShot) {

    csPtr< iImage > * _result;
    iGraphics2D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics2D_ScreenShot(iGraphics2D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_ScreenShot. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _result = new csPtr< iImage > (iGraphics2D_ScreenShot(_arg0));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iImage >Ptr", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics2D_AllowResize(_swigobj,_swigarg0)  (_swigobj->AllowResize(_swigarg0))
XS(_wrap_iGraphics2D_AllowResize) {

    iGraphics2D * _arg0;
    bool  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics2D_AllowResize(iGraphics2D *,iAllow);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_AllowResize. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (bool )SvIV(ST(1));
    iGraphics2D_AllowResize(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics2D_FindRGB(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->FindRGB(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iGraphics2D_FindRGB) {

    int  _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iGraphics2D_FindRGB(iGraphics2D *,r,g,b);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics2D")) {
        croak("Type error in argument 1 of iGraphics2D_FindRGB. Expected iGraphics2D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _result = (int )iGraphics2D_FindRGB(_arg0,_arg1,_arg2,_arg3);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

static void *SwigiHaloToiBase(void *ptr) {
    iHalo *src;
    iBase *dest;
    src = (iHalo *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iHalo_GetWidth(_swigobj)  (_swigobj->GetWidth())
XS(_wrap_iHalo_GetWidth) {

    int  _result;
    iHalo * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iHalo_GetWidth(iHalo *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iHalo")) {
        croak("Type error in argument 1 of iHalo_GetWidth. Expected iHalo.");
        XSRETURN(1);
    }
    _result = (int )iHalo_GetWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iHalo_GetHeight(_swigobj)  (_swigobj->GetHeight())
XS(_wrap_iHalo_GetHeight) {

    int  _result;
    iHalo * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iHalo_GetHeight(iHalo *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iHalo")) {
        croak("Type error in argument 1 of iHalo_GetHeight. Expected iHalo.");
        XSRETURN(1);
    }
    _result = (int )iHalo_GetHeight(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iHalo_SetColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->SetColor(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iHalo_SetColor) {

    iHalo * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iHalo_SetColor(iHalo *,iR,iG,iB);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iHalo")) {
        croak("Type error in argument 1 of iHalo_SetColor. Expected iHalo.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"floatPtr")) {
        croak("Type error in argument 2 of iHalo_SetColor. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"floatPtr")) {
        croak("Type error in argument 3 of iHalo_SetColor. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"floatPtr")) {
        croak("Type error in argument 4 of iHalo_SetColor. Expected floatPtr.");
        XSRETURN(1);
    }
    iHalo_SetColor(_arg0,*_arg1,*_arg2,*_arg3);
    XSRETURN(argvi);
}

#define iHalo_GetColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetColor(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iHalo_GetColor) {

    iHalo * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iHalo_GetColor(iHalo *,oR,oG,oB);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iHalo")) {
        croak("Type error in argument 1 of iHalo_GetColor. Expected iHalo.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"floatPtr")) {
        croak("Type error in argument 2 of iHalo_GetColor. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"floatPtr")) {
        croak("Type error in argument 3 of iHalo_GetColor. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"floatPtr")) {
        croak("Type error in argument 4 of iHalo_GetColor. Expected floatPtr.");
        XSRETURN(1);
    }
    iHalo_GetColor(_arg0,*_arg1,*_arg2,*_arg3);
    XSRETURN(argvi);
}

#define iHalo_Draw(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6)  (_swigobj->Draw(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6))
XS(_wrap_iHalo_Draw) {

    iHalo * _arg0;
    float  _arg1;
    float  _arg2;
    float  _arg3;
    float  _arg4;
    float  _arg5;
    csVector2 * _arg6;
    int  _arg7;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 8) || (items > 8)) 
        croak("Usage: iHalo_Draw(iHalo *,x,y,w,h,iIntensity,iVertices,iVertCount);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iHalo")) {
        croak("Type error in argument 1 of iHalo_Draw. Expected iHalo.");
        XSRETURN(1);
    }
    _arg1 = (float ) SvNV(ST(1));
    _arg2 = (float ) SvNV(ST(2));
    _arg3 = (float ) SvNV(ST(3));
    _arg4 = (float ) SvNV(ST(4));
    _arg5 = (float ) SvNV(ST(5));
    if (SWIG_GetPtr(ST(6),(void **) &_arg6,"csVector2Ptr")) {
        croak("Type error in argument 7 of iHalo_Draw. Expected csVector2Ptr.");
        XSRETURN(1);
    }
    _arg7 = (int )SvIV(ST(7));
    iHalo_Draw(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);
    XSRETURN(argvi);
}

static void *SwigiGraphics3DToiBase(void *ptr) {
    iGraphics3D *src;
    iBase *dest;
    src = (iGraphics3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iGraphics3D_Open(_swigobj)  (_swigobj->Open())
XS(_wrap_iGraphics3D_Open) {

    bool  _result;
    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_Open(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_Open. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _result = (bool )iGraphics3D_Open(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_Close(_swigobj)  (_swigobj->Close())
XS(_wrap_iGraphics3D_Close) {

    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_Close(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_Close. Expected iGraphics3D.");
        XSRETURN(1);
    }
    iGraphics3D_Close(_arg0);
    XSRETURN(argvi);
}

#define iGraphics3D_SetDimensions(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetDimensions(_swigarg0,_swigarg1))
XS(_wrap_iGraphics3D_SetDimensions) {

    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics3D_SetDimensions(iGraphics3D *,width,height);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_SetDimensions. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    iGraphics3D_SetDimensions(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

#define iGraphics3D_BeginDraw(_swigobj,_swigarg0)  (_swigobj->BeginDraw(_swigarg0))
XS(_wrap_iGraphics3D_BeginDraw) {

    bool  _result;
    iGraphics3D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_BeginDraw(iGraphics3D *,DrawFlags);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_BeginDraw. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (bool )iGraphics3D_BeginDraw(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_FinishDraw(_swigobj)  (_swigobj->FinishDraw())
XS(_wrap_iGraphics3D_FinishDraw) {

    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_FinishDraw(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_FinishDraw. Expected iGraphics3D.");
        XSRETURN(1);
    }
    iGraphics3D_FinishDraw(_arg0);
    XSRETURN(argvi);
}

#define iGraphics3D_Print(_swigobj,_swigarg0)  (_swigobj->Print(_swigarg0))
XS(_wrap_iGraphics3D_Print) {

    iGraphics3D * _arg0;
    csRect * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_Print(iGraphics3D *,area);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_Print. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csRectPtr")) {
        croak("Type error in argument 2 of iGraphics3D_Print. Expected csRectPtr.");
        XSRETURN(1);
    }
    iGraphics3D_Print(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_DrawPolygon(_swigobj,_swigarg0)  (_swigobj->DrawPolygon(_swigarg0))
XS(_wrap_iGraphics3D_DrawPolygon) {

    iGraphics3D * _arg0;
    G3DPolygonDP * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_DrawPolygon(iGraphics3D *,poly);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DrawPolygon. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"G3DPolygonDPPtr")) {
        croak("Type error in argument 2 of iGraphics3D_DrawPolygon. Expected G3DPolygonDPPtr.");
        XSRETURN(1);
    }
    iGraphics3D_DrawPolygon(_arg0,*_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_DrawPolygonDebug(_swigobj,_swigarg0)  (_swigobj->DrawPolygonDebug(_swigarg0))
XS(_wrap_iGraphics3D_DrawPolygonDebug) {

    iGraphics3D * _arg0;
    G3DPolygonDP * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_DrawPolygonDebug(iGraphics3D *,poly);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DrawPolygonDebug. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"G3DPolygonDPPtr")) {
        croak("Type error in argument 2 of iGraphics3D_DrawPolygonDebug. Expected G3DPolygonDPPtr.");
        XSRETURN(1);
    }
    iGraphics3D_DrawPolygonDebug(_arg0,*_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_DrawLine(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->DrawLine(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iGraphics3D_DrawLine) {

    iGraphics3D * _arg0;
    csVector3 * _arg1;
    csVector3 * _arg2;
    float  _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iGraphics3D_DrawLine(iGraphics3D *,v1,v2,fov,color);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DrawLine. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csVector3")) {
        croak("Type error in argument 2 of iGraphics3D_DrawLine. Expected csVector3.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"csVector3")) {
        croak("Type error in argument 3 of iGraphics3D_DrawLine. Expected csVector3.");
        XSRETURN(1);
    }
    _arg3 = (float ) SvNV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    iGraphics3D_DrawLine(_arg0,*_arg1,*_arg2,_arg3,_arg4);
    XSRETURN(argvi);
}

#define iGraphics3D_DrawTriangleMesh(_swigobj,_swigarg0)  (_swigobj->DrawTriangleMesh(_swigarg0))
XS(_wrap_iGraphics3D_DrawTriangleMesh) {

    iGraphics3D * _arg0;
    G3DTriangleMesh * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_DrawTriangleMesh(iGraphics3D *,mesh);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DrawTriangleMesh. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"G3DTriangleMeshPtr")) {
        croak("Type error in argument 2 of iGraphics3D_DrawTriangleMesh. Expected G3DTriangleMeshPtr.");
        XSRETURN(1);
    }
    iGraphics3D_DrawTriangleMesh(_arg0,*_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_DrawPolygonMesh(_swigobj,_swigarg0)  (_swigobj->DrawPolygonMesh(_swigarg0))
XS(_wrap_iGraphics3D_DrawPolygonMesh) {

    iGraphics3D * _arg0;
    G3DPolygonMesh * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_DrawPolygonMesh(iGraphics3D *,mesh);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DrawPolygonMesh. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"G3DPolygonMeshPtr")) {
        croak("Type error in argument 2 of iGraphics3D_DrawPolygonMesh. Expected G3DPolygonMeshPtr.");
        XSRETURN(1);
    }
    iGraphics3D_DrawPolygonMesh(_arg0,*_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_OpenFogObject(_swigobj,_swigarg0,_swigarg1)  (_swigobj->OpenFogObject(_swigarg0,_swigarg1))
XS(_wrap_iGraphics3D_OpenFogObject) {

    iGraphics3D * _arg0;
    CS_ID * _arg1;
    csFog * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics3D_OpenFogObject(iGraphics3D *,id,fog);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_OpenFogObject. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"CS_IDPtr")) {
        croak("Type error in argument 2 of iGraphics3D_OpenFogObject. Expected CS_IDPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"csFogPtr")) {
        croak("Type error in argument 3 of iGraphics3D_OpenFogObject. Expected csFogPtr.");
        XSRETURN(1);
    }
    iGraphics3D_OpenFogObject(_arg0,*_arg1,_arg2);
    XSRETURN(argvi);
}

#define iGraphics3D_DrawFogPolygon(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->DrawFogPolygon(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iGraphics3D_DrawFogPolygon) {

    iGraphics3D * _arg0;
    CS_ID * _arg1;
    G3DPolygonDFP * _arg2;
    int  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iGraphics3D_DrawFogPolygon(iGraphics3D *,id,poly,fogtype);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DrawFogPolygon. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"CS_IDPtr")) {
        croak("Type error in argument 2 of iGraphics3D_DrawFogPolygon. Expected CS_IDPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"G3DPolygonDFPPtr")) {
        croak("Type error in argument 3 of iGraphics3D_DrawFogPolygon. Expected G3DPolygonDFPPtr.");
        XSRETURN(1);
    }
    _arg3 = (int )SvIV(ST(3));
    iGraphics3D_DrawFogPolygon(_arg0,*_arg1,*_arg2,_arg3);
    XSRETURN(argvi);
}

#define iGraphics3D_CloseFogObject(_swigobj,_swigarg0)  (_swigobj->CloseFogObject(_swigarg0))
XS(_wrap_iGraphics3D_CloseFogObject) {

    iGraphics3D * _arg0;
    CS_ID * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_CloseFogObject(iGraphics3D *,id);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_CloseFogObject. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"CS_IDPtr")) {
        croak("Type error in argument 2 of iGraphics3D_CloseFogObject. Expected CS_IDPtr.");
        XSRETURN(1);
    }
    iGraphics3D_CloseFogObject(_arg0,*_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_GetCaps(_swigobj)  (_swigobj->GetCaps())
XS(_wrap_iGraphics3D_GetCaps) {

    csGraphics3DCaps * _result;
    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_GetCaps(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_GetCaps. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _result = (csGraphics3DCaps *)iGraphics3D_GetCaps(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csGraphics3DCaps", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_GetZBuffAt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetZBuffAt(_swigarg0,_swigarg1))
XS(_wrap_iGraphics3D_GetZBuffAt) {

    void * _result;
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics3D_GetZBuffAt(iGraphics3D *,x,y);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_GetZBuffAt. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _result = (void *)iGraphics3D_GetZBuffAt(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_GetZBuffValue(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetZBuffValue(_swigarg0,_swigarg1))
XS(_wrap_iGraphics3D_GetZBuffValue) {

    float  _result;
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics3D_GetZBuffValue(iGraphics3D *,x,y);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_GetZBuffValue. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _result = (float )iGraphics3D_GetZBuffValue(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_DumpCache(_swigobj)  (_swigobj->DumpCache())
XS(_wrap_iGraphics3D_DumpCache) {

    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_DumpCache(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DumpCache. Expected iGraphics3D.");
        XSRETURN(1);
    }
    iGraphics3D_DumpCache(_arg0);
    XSRETURN(argvi);
}

#define iGraphics3D_ClearCache(_swigobj)  (_swigobj->ClearCache())
XS(_wrap_iGraphics3D_ClearCache) {

    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_ClearCache(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_ClearCache. Expected iGraphics3D.");
        XSRETURN(1);
    }
    iGraphics3D_ClearCache(_arg0);
    XSRETURN(argvi);
}

#define iGraphics3D_RemoveFromCache(_swigobj,_swigarg0)  (_swigobj->RemoveFromCache(_swigarg0))
XS(_wrap_iGraphics3D_RemoveFromCache) {

    iGraphics3D * _arg0;
    iPolygonTexture * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_RemoveFromCache(iGraphics3D *,poly_texture);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_RemoveFromCache. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iPolygonTexture")) {
        croak("Type error in argument 2 of iGraphics3D_RemoveFromCache. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    iGraphics3D_RemoveFromCache(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_GetWidth(_swigobj)  (_swigobj->GetWidth())
XS(_wrap_iGraphics3D_GetWidth) {

    int  _result;
    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_GetWidth(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_GetWidth. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _result = (int )iGraphics3D_GetWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_GetHeight(_swigobj)  (_swigobj->GetHeight())
XS(_wrap_iGraphics3D_GetHeight) {

    int  _result;
    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_GetHeight(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_GetHeight. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _result = (int )iGraphics3D_GetHeight(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_SetPerspectiveCenter(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetPerspectiveCenter(_swigarg0,_swigarg1))
XS(_wrap_iGraphics3D_SetPerspectiveCenter) {

    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iGraphics3D_SetPerspectiveCenter(iGraphics3D *,x,y);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_SetPerspectiveCenter. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    iGraphics3D_SetPerspectiveCenter(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

#define iGraphics3D_SetPerspectiveAspect(_swigobj,_swigarg0)  (_swigobj->SetPerspectiveAspect(_swigarg0))
XS(_wrap_iGraphics3D_SetPerspectiveAspect) {

    iGraphics3D * _arg0;
    float  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_SetPerspectiveAspect(iGraphics3D *,aspect);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_SetPerspectiveAspect. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _arg1 = (float ) SvNV(ST(1));
    iGraphics3D_SetPerspectiveAspect(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_SetObjectToCamera(_swigobj,_swigarg0)  (_swigobj->SetObjectToCamera(_swigarg0))
XS(_wrap_iGraphics3D_SetObjectToCamera) {

    iGraphics3D * _arg0;
    csReversibleTransform * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iGraphics3D_SetObjectToCamera(iGraphics3D *,o2c);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_SetObjectToCamera. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csReversibleTransformPtr")) {
        croak("Type error in argument 2 of iGraphics3D_SetObjectToCamera. Expected csReversibleTransformPtr.");
        XSRETURN(1);
    }
    iGraphics3D_SetObjectToCamera(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iGraphics3D_GetDriver2D(_swigobj)  (_swigobj->GetDriver2D())
XS(_wrap_iGraphics3D_GetDriver2D) {

    iGraphics2D * _result;
    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_GetDriver2D(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_GetDriver2D. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _result = (iGraphics2D *)iGraphics3D_GetDriver2D(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iGraphics2D", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_GetTextureManager(_swigobj)  (_swigobj->GetTextureManager())
XS(_wrap_iGraphics3D_GetTextureManager) {

    iTextureManager * _result;
    iGraphics3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iGraphics3D_GetTextureManager(iGraphics3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_GetTextureManager. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _result = (iTextureManager *)iGraphics3D_GetTextureManager(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iTextureManager", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_CreateHalo(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->CreateHalo(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
XS(_wrap_iGraphics3D_CreateHalo) {

    iHalo * _result;
    iGraphics3D * _arg0;
    float  _arg1;
    float  _arg2;
    float  _arg3;
    unsigned char * _arg4;
    int  _arg5;
    int  _arg6;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 7) || (items > 7)) 
        croak("Usage: iGraphics3D_CreateHalo(iGraphics3D *,iR,iG,iB,iAlpha,iWidth,iHeight);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_CreateHalo. Expected iGraphics3D.");
        XSRETURN(1);
    }
    _arg1 = (float ) SvNV(ST(1));
    _arg2 = (float ) SvNV(ST(2));
    _arg3 = (float ) SvNV(ST(3));
    if (SWIG_GetPtr(ST(4),(void **) &_arg4,"unsigned charPtr")) {
        croak("Type error in argument 5 of iGraphics3D_CreateHalo. Expected unsigned charPtr.");
        XSRETURN(1);
    }
    _arg5 = (int )SvIV(ST(5));
    _arg6 = (int )SvIV(ST(6));
    _result = (iHalo *)iGraphics3D_CreateHalo(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iHalo", (void *) _result);
    XSRETURN(argvi);
}

#define iGraphics3D_DrawPixmap(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8)  (_swigobj->DrawPixmap(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8))
XS(_wrap_iGraphics3D_DrawPixmap) {

    iGraphics3D * _arg0;
    iTextureHandle * _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;
    int  _arg6;
    int  _arg7;
    int  _arg8;
    int  _arg9;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 10) || (items > 10)) 
        croak("Usage: iGraphics3D_DrawPixmap(iGraphics3D *,hTex,sx,sy,sw,sh,tx,ty,tw,th);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iGraphics3D")) {
        croak("Type error in argument 1 of iGraphics3D_DrawPixmap. Expected iGraphics3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iTextureHandle")) {
        croak("Type error in argument 2 of iGraphics3D_DrawPixmap. Expected iTextureHandle.");
        XSRETURN(1);
    }
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    _arg6 = (int )SvIV(ST(6));
    _arg7 = (int )SvIV(ST(7));
    _arg8 = (int )SvIV(ST(8));
    _arg9 = (int )SvIV(ST(9));
    iGraphics3D_DrawPixmap(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);
    XSRETURN(argvi);
}

static void *SwigiCameraToiBase(void *ptr) {
    iCamera *src;
    iBase *dest;
    src = (iCamera *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iCamera_GetFOV(_swigobj)  (_swigobj->GetFOV())
XS(_wrap_iCamera_GetFOV) {

    float  _result;
    iCamera * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iCamera_GetFOV(iCamera *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iCamera")) {
        croak("Type error in argument 1 of iCamera_GetFOV. Expected iCamera.");
        XSRETURN(1);
    }
    _result = (float )iCamera_GetFOV(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define iCamera_GetInvFOV(_swigobj)  (_swigobj->GetInvFOV())
XS(_wrap_iCamera_GetInvFOV) {

    float  _result;
    iCamera * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iCamera_GetInvFOV(iCamera *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iCamera")) {
        croak("Type error in argument 1 of iCamera_GetInvFOV. Expected iCamera.");
        XSRETURN(1);
    }
    _result = (float )iCamera_GetInvFOV(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

static void *SwigiSectorToiBase(void *ptr) {
    iSector *src;
    iBase *dest;
    src = (iSector *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static void *SwigiThingStateToiBase(void *ptr) {
    iThingState *src;
    iBase *dest;
    src = (iThingState *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iThingState_CreatePolygon(_swigobj,_swigarg0)  (_swigobj->CreatePolygon(_swigarg0))
XS(_wrap_iThingState_CreatePolygon) {

    iPolygon3D * _result;
    iThingState * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iThingState_CreatePolygon(iThingState *,name);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iThingState")) {
        croak("Type error in argument 1 of iThingState_CreatePolygon. Expected iThingState.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (iPolygon3D *)iThingState_CreatePolygon(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iPolygon3D", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiMeshObjectToiBase(void *ptr) {
    iMeshObject *src;
    iBase *dest;
    src = (iMeshObject *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static csPtr< iThingState >  iMeshObject_Query_iThingState(iMeshObject *self) {
      return SCF_QUERY_INTERFACE(self, iThingState);
    }
XS(_wrap_iMeshObject_Query_iThingState) {

    csPtr< iThingState > * _result;
    iMeshObject * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iMeshObject_Query_iThingState(iMeshObject *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMeshObject")) {
        croak("Type error in argument 1 of iMeshObject_Query_iThingState. Expected iMeshObject.");
        XSRETURN(1);
    }
    _result = new csPtr< iThingState > (iMeshObject_Query_iThingState(_arg0));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iThingState >Ptr", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiMeshWrapperToiBase(void *ptr) {
    iMeshWrapper *src;
    iBase *dest;
    src = (iMeshWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMeshWrapper_GetMeshObject(_swigobj)  (_swigobj->GetMeshObject())
XS(_wrap_iMeshWrapper_GetMeshObject) {

    iMeshObject * _result;
    iMeshWrapper * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iMeshWrapper_GetMeshObject(iMeshWrapper *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMeshWrapper")) {
        croak("Type error in argument 1 of iMeshWrapper_GetMeshObject. Expected iMeshWrapper.");
        XSRETURN(1);
    }
    _result = (iMeshObject *)iMeshWrapper_GetMeshObject(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iMeshObject", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiLightMapToiBase(void *ptr) {
    iLightMap *src;
    iBase *dest;
    src = (iLightMap *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iLightMap_GetMapData(_swigobj)  (_swigobj->GetMapData())
XS(_wrap_iLightMap_GetMapData) {

    void * _result;
    iLightMap * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iLightMap_GetMapData(iLightMap *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetMapData. Expected iLightMap.");
        XSRETURN(1);
    }
    _result = (void *)iLightMap_GetMapData(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iLightMap_GetWidth(_swigobj)  (_swigobj->GetWidth())
XS(_wrap_iLightMap_GetWidth) {

    int  _result;
    iLightMap * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iLightMap_GetWidth(iLightMap *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetWidth. Expected iLightMap.");
        XSRETURN(1);
    }
    _result = (int )iLightMap_GetWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iLightMap_GetHeight(_swigobj)  (_swigobj->GetHeight())
XS(_wrap_iLightMap_GetHeight) {

    int  _result;
    iLightMap * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iLightMap_GetHeight(iLightMap *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetHeight. Expected iLightMap.");
        XSRETURN(1);
    }
    _result = (int )iLightMap_GetHeight(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iLightMap_GetRealWidth(_swigobj)  (_swigobj->GetRealWidth())
XS(_wrap_iLightMap_GetRealWidth) {

    int  _result;
    iLightMap * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iLightMap_GetRealWidth(iLightMap *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetRealWidth. Expected iLightMap.");
        XSRETURN(1);
    }
    _result = (int )iLightMap_GetRealWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iLightMap_GetRealHeight(_swigobj)  (_swigobj->GetRealHeight())
XS(_wrap_iLightMap_GetRealHeight) {

    int  _result;
    iLightMap * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iLightMap_GetRealHeight(iLightMap *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetRealHeight. Expected iLightMap.");
        XSRETURN(1);
    }
    _result = (int )iLightMap_GetRealHeight(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iLightMap_GetCacheData(_swigobj)  (_swigobj->GetCacheData())
XS(_wrap_iLightMap_GetCacheData) {

    void * _result;
    iLightMap * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iLightMap_GetCacheData(iLightMap *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetCacheData. Expected iLightMap.");
        XSRETURN(1);
    }
    _result = (void *)iLightMap_GetCacheData(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iLightMap_SetCacheData(_swigobj,_swigarg0)  (_swigobj->SetCacheData(_swigarg0))
XS(_wrap_iLightMap_SetCacheData) {

    iLightMap * _arg0;
    void * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iLightMap_SetCacheData(iLightMap *,d);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_SetCacheData. Expected iLightMap.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,(char *) 0 )) {
        croak("Type error in argument 2 of iLightMap_SetCacheData. Expected voidPtr.");
        XSRETURN(1);
    }
    iLightMap_SetCacheData(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iLightMap_GetMeanLighting(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMeanLighting(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iLightMap_GetMeanLighting) {

    iLightMap * _arg0;
    int * _arg1;
    int * _arg2;
    int * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iLightMap_GetMeanLighting(iLightMap *,r,g,b);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetMeanLighting. Expected iLightMap.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"intPtr")) {
        croak("Type error in argument 2 of iLightMap_GetMeanLighting. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"intPtr")) {
        croak("Type error in argument 3 of iLightMap_GetMeanLighting. Expected intPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"intPtr")) {
        croak("Type error in argument 4 of iLightMap_GetMeanLighting. Expected intPtr.");
        XSRETURN(1);
    }
    iLightMap_GetMeanLighting(_arg0,*_arg1,*_arg2,*_arg3);
    XSRETURN(argvi);
}

#define iLightMap_GetSize(_swigobj)  (_swigobj->GetSize())
XS(_wrap_iLightMap_GetSize) {

    long  _result;
    iLightMap * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iLightMap_GetSize(iLightMap *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iLightMap")) {
        croak("Type error in argument 1 of iLightMap_GetSize. Expected iLightMap.");
        XSRETURN(1);
    }
    _result = (long )iLightMap_GetSize(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

static void *SwigiPolygon3DToiBase(void *ptr) {
    iPolygon3D *src;
    iBase *dest;
    src = (iPolygon3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPolygon3D_GetLightMap(_swigobj)  (_swigobj->GetLightMap())
XS(_wrap_iPolygon3D_GetLightMap) {

    iLightMap * _result;
    iPolygon3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygon3D_GetLightMap(iPolygon3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_GetLightMap. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _result = (iLightMap *)iPolygon3D_GetLightMap(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iLightMap", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
XS(_wrap_iPolygon3D_GetMaterialHandle) {

    iMaterialHandle * _result;
    iPolygon3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygon3D_GetMaterialHandle(iPolygon3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_GetMaterialHandle. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _result = (iMaterialHandle *)iPolygon3D_GetMaterialHandle(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iMaterialHandle", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_SetMaterial(_swigobj,_swigarg0)  (_swigobj->SetMaterial(_swigarg0))
XS(_wrap_iPolygon3D_SetMaterial) {

    iPolygon3D * _arg0;
    iMaterialWrapper * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_SetMaterial(iPolygon3D *,material);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_SetMaterial. Expected iPolygon3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iMaterialWrapper")) {
        croak("Type error in argument 2 of iPolygon3D_SetMaterial. Expected iMaterialWrapper.");
        XSRETURN(1);
    }
    iPolygon3D_SetMaterial(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iPolygon3D_GetVertexCount(_swigobj)  (_swigobj->GetVertexCount())
XS(_wrap_iPolygon3D_GetVertexCount) {

    int  _result;
    iPolygon3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygon3D_GetVertexCount(iPolygon3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_GetVertexCount. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _result = (int )iPolygon3D_GetVertexCount(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_GetVertex(_swigobj,_swigarg0)  (_swigobj->GetVertex(_swigarg0))
XS(_wrap_iPolygon3D_GetVertex) {

    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_GetVertex(iPolygon3D *,idx);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_GetVertex. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    const csVector3 & _result_ref = iPolygon3D_GetVertex(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csVector3", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_GetVertexW(_swigobj,_swigarg0)  (_swigobj->GetVertexW(_swigarg0))
XS(_wrap_iPolygon3D_GetVertexW) {

    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_GetVertexW(iPolygon3D *,idx);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_GetVertexW. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    const csVector3 & _result_ref = iPolygon3D_GetVertexW(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csVector3", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_GetVertexC(_swigobj,_swigarg0)  (_swigobj->GetVertexC(_swigarg0))
XS(_wrap_iPolygon3D_GetVertexC) {

    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_GetVertexC(iPolygon3D *,idx);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_GetVertexC. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    const csVector3 & _result_ref = iPolygon3D_GetVertexC(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csVector3", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_CreateVertexByIndex(_swigobj,_swigarg0)  (_swigobj->CreateVertex(_swigarg0))
XS(_wrap_iPolygon3D_CreateVertexByIndex) {

    int  _result;
    iPolygon3D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_CreateVertexByIndex(iPolygon3D *,idx);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_CreateVertexByIndex. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (int )iPolygon3D_CreateVertexByIndex(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_CreateVertex(_swigobj,_swigarg0)  (_swigobj->CreateVertex(_swigarg0))
XS(_wrap_iPolygon3D_CreateVertex) {

    int  _result;
    iPolygon3D * _arg0;
    csVector3 * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_CreateVertex(iPolygon3D *,iVertex);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_CreateVertex. Expected iPolygon3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csVector3")) {
        croak("Type error in argument 2 of iPolygon3D_CreateVertex. Expected csVector3.");
        XSRETURN(1);
    }
    _result = (int )iPolygon3D_CreateVertex(_arg0,*_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_GetAlpha(_swigobj)  (_swigobj->GetAlpha())
XS(_wrap_iPolygon3D_GetAlpha) {

    int  _result;
    iPolygon3D * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygon3D_GetAlpha(iPolygon3D *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_GetAlpha. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _result = (int )iPolygon3D_GetAlpha(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_SetAlpha(_swigobj,_swigarg0)  (_swigobj->SetAlpha(_swigarg0))
XS(_wrap_iPolygon3D_SetAlpha) {

    iPolygon3D * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_SetAlpha(iPolygon3D *,iAlpha);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_SetAlpha. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    iPolygon3D_SetAlpha(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iPolygon3D_CreatePlane(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreatePlane(_swigarg0,_swigarg1))
XS(_wrap_iPolygon3D_CreatePlane) {

    iPolygon3D * _arg0;
    csVector3 * _arg1;
    csMatrix3 * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iPolygon3D_CreatePlane(iPolygon3D *,iOrigin,iMatrix);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_CreatePlane. Expected iPolygon3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csVector3")) {
        croak("Type error in argument 2 of iPolygon3D_CreatePlane. Expected csVector3.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"csMatrix3Ptr")) {
        croak("Type error in argument 3 of iPolygon3D_CreatePlane. Expected csMatrix3Ptr.");
        XSRETURN(1);
    }
    iPolygon3D_CreatePlane(_arg0,*_arg1,*_arg2);
    XSRETURN(argvi);
}

#define iPolygon3D_SetPlane(_swigobj,_swigarg0)  (_swigobj->SetPlane(_swigarg0))
XS(_wrap_iPolygon3D_SetPlane) {

    bool  _result;
    iPolygon3D * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygon3D_SetPlane(iPolygon3D *,iName);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_SetPlane. Expected iPolygon3D.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (bool )iPolygon3D_SetPlane(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygon3D_SetTextureSpace(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->SetTextureSpace(_swigarg0,_swigarg1,_swigarg2))
XS(_wrap_iPolygon3D_SetTextureSpace) {

    iPolygon3D * _arg0;
    csVector3 * _arg1;
    csVector3 * _arg2;
    float  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: iPolygon3D_SetTextureSpace(iPolygon3D *,v_orig,v1,len1);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygon3D")) {
        croak("Type error in argument 1 of iPolygon3D_SetTextureSpace. Expected iPolygon3D.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"csVector3")) {
        croak("Type error in argument 2 of iPolygon3D_SetTextureSpace. Expected csVector3.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"csVector3")) {
        croak("Type error in argument 3 of iPolygon3D_SetTextureSpace. Expected csVector3.");
        XSRETURN(1);
    }
    _arg3 = (float ) SvNV(ST(3));
    iPolygon3D_SetTextureSpace(_arg0,*_arg1,*_arg2,_arg3);
    XSRETURN(argvi);
}

static void *SwigiImageToiBase(void *ptr) {
    iImage *src;
    iBase *dest;
    src = (iImage *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iImage_GetImageData(_swigobj)  (_swigobj->GetImageData())
XS(_wrap_iImage_GetImageData) {

    void * _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetImageData(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetImageData. Expected iImage.");
        XSRETURN(1);
    }
    _result = (void *)iImage_GetImageData(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iImage_GetWidth(_swigobj)  (_swigobj->GetWidth())
XS(_wrap_iImage_GetWidth) {

    int  _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetWidth(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetWidth. Expected iImage.");
        XSRETURN(1);
    }
    _result = (int )iImage_GetWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iImage_GetHeight(_swigobj)  (_swigobj->GetHeight())
XS(_wrap_iImage_GetHeight) {

    int  _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetHeight(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetHeight. Expected iImage.");
        XSRETURN(1);
    }
    _result = (int )iImage_GetHeight(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iImage_GetSize(_swigobj)  (_swigobj->GetSize())
XS(_wrap_iImage_GetSize) {

    int  _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetSize(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetSize. Expected iImage.");
        XSRETURN(1);
    }
    _result = (int )iImage_GetSize(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iImage_Rescale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Rescale(_swigarg0,_swigarg1))
XS(_wrap_iImage_Rescale) {

    iImage * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iImage_Rescale(iImage *,NewWidth,NewHeight);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_Rescale. Expected iImage.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    iImage_Rescale(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

#define iImage_MipMap(_swigobj,_swigarg0,_swigarg1)  (_swigobj->MipMap(_swigarg0,_swigarg1))
XS(_wrap_iImage_MipMap) {

    csPtr< iImage > * _result;
    iImage * _arg0;
    int  _arg1;
    csRGBpixel * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iImage_MipMap(iImage *,step,transp);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_MipMap. Expected iImage.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"csRGBpixel")) {
        croak("Type error in argument 3 of iImage_MipMap. Expected csRGBpixel.");
        XSRETURN(1);
    }
    _result = new csPtr< iImage > (iImage_MipMap(_arg0,_arg1,_arg2));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iImage >Ptr", (void *) _result);
    XSRETURN(argvi);
}

#define iImage_SetName(_swigobj,_swigarg0)  (_swigobj->SetName(_swigarg0))
XS(_wrap_iImage_SetName) {

    iImage * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iImage_SetName(iImage *,iName);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_SetName. Expected iImage.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    iImage_SetName(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iImage_GetName(_swigobj)  (_swigobj->GetName())
XS(_wrap_iImage_GetName) {

    char * _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetName(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetName. Expected iImage.");
        XSRETURN(1);
    }
    _result = (char *)iImage_GetName(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

#define iImage_GetFormat(_swigobj)  (_swigobj->GetFormat())
XS(_wrap_iImage_GetFormat) {

    int  _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetFormat(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetFormat. Expected iImage.");
        XSRETURN(1);
    }
    _result = (int )iImage_GetFormat(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iImage_GetPalette(_swigobj)  (_swigobj->GetPalette())
XS(_wrap_iImage_GetPalette) {

    csRGBpixel * _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetPalette(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetPalette. Expected iImage.");
        XSRETURN(1);
    }
    _result = (csRGBpixel *)iImage_GetPalette(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csRGBpixel", (void *) _result);
    XSRETURN(argvi);
}

#define iImage_GetAlpha(_swigobj)  (_swigobj->GetAlpha())
XS(_wrap_iImage_GetAlpha) {

    void * _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_GetAlpha(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_GetAlpha. Expected iImage.");
        XSRETURN(1);
    }
    _result = (void *)iImage_GetAlpha(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iImage_SetFormat(_swigobj,_swigarg0)  (_swigobj->SetFormat(_swigarg0))
XS(_wrap_iImage_SetFormat) {

    iImage * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iImage_SetFormat(iImage *,iFormat);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_SetFormat. Expected iImage.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    iImage_SetFormat(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iImage_Clone(_swigobj)  (_swigobj->Clone())
XS(_wrap_iImage_Clone) {

    csPtr< iImage > * _result;
    iImage * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iImage_Clone(iImage *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_Clone. Expected iImage.");
        XSRETURN(1);
    }
    _result = new csPtr< iImage > (iImage_Clone(_arg0));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iImage >Ptr", (void *) _result);
    XSRETURN(argvi);
}

#define iImage_Crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->Crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iImage_Crop) {

    csPtr< iImage > * _result;
    iImage * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iImage_Crop(iImage *,x,y,width,height);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iImage")) {
        croak("Type error in argument 1 of iImage_Crop. Expected iImage.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _result = new csPtr< iImage > (iImage_Crop(_arg0,_arg1,_arg2,_arg3,_arg4));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iImage >Ptr", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiTextureManagerToiBase(void *ptr) {
    iTextureManager *src;
    iBase *dest;
    src = (iTextureManager *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iTextureManager_RegisterTexture(_swigobj,_swigarg0,_swigarg1)  (_swigobj->RegisterTexture(_swigarg0,_swigarg1))
XS(_wrap_iTextureManager_RegisterTexture) {

    csPtr< iTextureHandle > * _result;
    iTextureManager * _arg0;
    iImage * _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iTextureManager_RegisterTexture(iTextureManager *,image,flags);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureManager")) {
        croak("Type error in argument 1 of iTextureManager_RegisterTexture. Expected iTextureManager.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iImage")) {
        croak("Type error in argument 2 of iTextureManager_RegisterTexture. Expected iImage.");
        XSRETURN(1);
    }
    _arg2 = (int )SvIV(ST(2));
    _result = new csPtr< iTextureHandle > (iTextureManager_RegisterTexture(_arg0,_arg1,_arg2));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iTextureHandle >Ptr", (void *) _result);
    XSRETURN(argvi);
}

#define iTextureManager_PrepareTextures(_swigobj)  (_swigobj->PrepareTextures())
XS(_wrap_iTextureManager_PrepareTextures) {

    iTextureManager * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iTextureManager_PrepareTextures(iTextureManager *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureManager")) {
        croak("Type error in argument 1 of iTextureManager_PrepareTextures. Expected iTextureManager.");
        XSRETURN(1);
    }
    iTextureManager_PrepareTextures(_arg0);
    XSRETURN(argvi);
}

#define iTextureManager_FreeImages(_swigobj)  (_swigobj->FreeImages())
XS(_wrap_iTextureManager_FreeImages) {

    iTextureManager * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iTextureManager_FreeImages(iTextureManager *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureManager")) {
        croak("Type error in argument 1 of iTextureManager_FreeImages. Expected iTextureManager.");
        XSRETURN(1);
    }
    iTextureManager_FreeImages(_arg0);
    XSRETURN(argvi);
}

#define iTextureManager_SetVerbose(_swigobj,_swigarg0)  (_swigobj->SetVerbose(_swigarg0))
XS(_wrap_iTextureManager_SetVerbose) {

    iTextureManager * _arg0;
    bool  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iTextureManager_SetVerbose(iTextureManager *,vb);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureManager")) {
        croak("Type error in argument 1 of iTextureManager_SetVerbose. Expected iTextureManager.");
        XSRETURN(1);
    }
    _arg1 = (bool )SvIV(ST(1));
    iTextureManager_SetVerbose(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iTextureManager_GetTextureFormat(_swigobj)  (_swigobj->GetTextureFormat())
XS(_wrap_iTextureManager_GetTextureFormat) {

    int  _result;
    iTextureManager * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iTextureManager_GetTextureFormat(iTextureManager *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureManager")) {
        croak("Type error in argument 1 of iTextureManager_GetTextureFormat. Expected iTextureManager.");
        XSRETURN(1);
    }
    _result = (int )iTextureManager_GetTextureFormat(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

static void *SwigiPolygonTextureToiBase(void *ptr) {
    iPolygonTexture *src;
    iBase *dest;
    src = (iPolygonTexture *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPolygonTexture_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
XS(_wrap_iPolygonTexture_GetMaterialHandle) {

    iMaterialHandle * _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetMaterialHandle(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetMaterialHandle. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (iMaterialHandle *)iPolygonTexture_GetMaterialHandle(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iMaterialHandle", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetFDU(_swigobj)  (_swigobj->GetFDU())
XS(_wrap_iPolygonTexture_GetFDU) {

    float  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetFDU(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetFDU. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (float )iPolygonTexture_GetFDU(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetFDV(_swigobj)  (_swigobj->GetFDV())
XS(_wrap_iPolygonTexture_GetFDV) {

    float  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetFDV(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetFDV. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (float )iPolygonTexture_GetFDV(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetWidth(_swigobj)  (_swigobj->GetWidth())
XS(_wrap_iPolygonTexture_GetWidth) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetWidth(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetWidth. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetHeight(_swigobj)  (_swigobj->GetHeight())
XS(_wrap_iPolygonTexture_GetHeight) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetHeight(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetHeight. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetHeight(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetShiftU(_swigobj)  (_swigobj->GetShiftU())
XS(_wrap_iPolygonTexture_GetShiftU) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetShiftU(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetShiftU. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetShiftU(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetIMinU(_swigobj)  (_swigobj->GetIMinU())
XS(_wrap_iPolygonTexture_GetIMinU) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetIMinU(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetIMinU. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetIMinU(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetIMinV(_swigobj)  (_swigobj->GetIMinV())
XS(_wrap_iPolygonTexture_GetIMinV) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetIMinV(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetIMinV. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetIMinV(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetTextureBox(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->GetTextureBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iPolygonTexture_GetTextureBox) {

    iPolygonTexture * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    float * _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iPolygonTexture_GetTextureBox(iPolygonTexture *,fMinU,fMinV,fMaxU,fMaxV);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetTextureBox. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"floatPtr")) {
        croak("Type error in argument 2 of iPolygonTexture_GetTextureBox. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"floatPtr")) {
        croak("Type error in argument 3 of iPolygonTexture_GetTextureBox. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"floatPtr")) {
        croak("Type error in argument 4 of iPolygonTexture_GetTextureBox. Expected floatPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(4),(void **) &_arg4,"floatPtr")) {
        croak("Type error in argument 5 of iPolygonTexture_GetTextureBox. Expected floatPtr.");
        XSRETURN(1);
    }
    iPolygonTexture_GetTextureBox(_arg0,*_arg1,*_arg2,*_arg3,*_arg4);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetOriginalWidth(_swigobj)  (_swigobj->GetOriginalWidth())
XS(_wrap_iPolygonTexture_GetOriginalWidth) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetOriginalWidth(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetOriginalWidth. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetOriginalWidth(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetPolygon(_swigobj)  (_swigobj->GetPolygon())
XS(_wrap_iPolygonTexture_GetPolygon) {

    iPolygon3D * _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetPolygon(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetPolygon. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (iPolygon3D *)iPolygonTexture_GetPolygon(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iPolygon3D", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_DynamicLightsDirty(_swigobj)  (_swigobj->DynamicLightsDirty())
XS(_wrap_iPolygonTexture_DynamicLightsDirty) {

    bool  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_DynamicLightsDirty(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_DynamicLightsDirty. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (bool )iPolygonTexture_DynamicLightsDirty(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_RecalculateDynamicLights(_swigobj)  (_swigobj->RecalculateDynamicLights())
XS(_wrap_iPolygonTexture_RecalculateDynamicLights) {

    bool  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_RecalculateDynamicLights(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_RecalculateDynamicLights. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (bool )iPolygonTexture_RecalculateDynamicLights(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetLightMap(_swigobj)  (_swigobj->GetLightMap())
XS(_wrap_iPolygonTexture_GetLightMap) {

    iLightMap * _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetLightMap(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetLightMap. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (iLightMap *)iPolygonTexture_GetLightMap(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iLightMap", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetLightCellSize(_swigobj)  (_swigobj->GetLightCellSize())
XS(_wrap_iPolygonTexture_GetLightCellSize) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetLightCellSize(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetLightCellSize. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetLightCellSize(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetLightCellShift(_swigobj)  (_swigobj->GetLightCellShift())
XS(_wrap_iPolygonTexture_GetLightCellShift) {

    int  _result;
    iPolygonTexture * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iPolygonTexture_GetLightCellShift(iPolygonTexture *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetLightCellShift. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _result = (int )iPolygonTexture_GetLightCellShift(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_GetCacheData(_swigobj,_swigarg0)  (_swigobj->GetCacheData(_swigarg0))
XS(_wrap_iPolygonTexture_GetCacheData) {

    void * _result;
    iPolygonTexture * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iPolygonTexture_GetCacheData(iPolygonTexture *,idx);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_GetCacheData. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (void *)iPolygonTexture_GetCacheData(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"voidPtr", (void *) _result);
    XSRETURN(argvi);
}

#define iPolygonTexture_SetCacheData(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetCacheData(_swigarg0,_swigarg1))
XS(_wrap_iPolygonTexture_SetCacheData) {

    iPolygonTexture * _arg0;
    int  _arg1;
    void * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iPolygonTexture_SetCacheData(iPolygonTexture *,idx,d);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iPolygonTexture")) {
        croak("Type error in argument 1 of iPolygonTexture_SetCacheData. Expected iPolygonTexture.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,(char *) 0 )) {
        croak("Type error in argument 3 of iPolygonTexture_SetCacheData. Expected voidPtr.");
        XSRETURN(1);
    }
    iPolygonTexture_SetCacheData(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

static void *SwigiCameraPositionToiBase(void *ptr) {
    iCameraPosition *src;
    iBase *dest;
    src = (iCameraPosition *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static void *SwigiSectorListToiBase(void *ptr) {
    iSectorList *src;
    iBase *dest;
    src = (iSectorList *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iSectorList_GetCount(_swigobj)  (_swigobj->GetCount())
XS(_wrap_iSectorList_GetCount) {

    int  _result;
    iSectorList * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iSectorList_GetCount(iSectorList *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iSectorList")) {
        croak("Type error in argument 1 of iSectorList_GetCount. Expected iSectorList.");
        XSRETURN(1);
    }
    _result = (int )iSectorList_GetCount(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iSectorList_Get(_swigobj,_swigarg0)  (_swigobj->Get(_swigarg0))
XS(_wrap_iSectorList_Get) {

    iSector * _result;
    iSectorList * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iSectorList_Get(iSectorList *,idx);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iSectorList")) {
        croak("Type error in argument 1 of iSectorList_Get. Expected iSectorList.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (iSector *)iSectorList_Get(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iSector", (void *) _result);
    XSRETURN(argvi);
}

#define iSectorList_Add(_swigobj,_swigarg0)  (_swigobj->Add(_swigarg0))
XS(_wrap_iSectorList_Add) {

    iSectorList * _arg0;
    iSector * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iSectorList_Add(iSectorList *,sec);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iSectorList")) {
        croak("Type error in argument 1 of iSectorList_Add. Expected iSectorList.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iSector")) {
        croak("Type error in argument 2 of iSectorList_Add. Expected iSector.");
        XSRETURN(1);
    }
    iSectorList_Add(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iSectorList_Remove(_swigobj,_swigarg0)  (_swigobj->Remove(_swigarg0))
XS(_wrap_iSectorList_Remove) {

    iSectorList * _arg0;
    iSector * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iSectorList_Remove(iSectorList *,sec);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iSectorList")) {
        croak("Type error in argument 1 of iSectorList_Remove. Expected iSectorList.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iSector")) {
        croak("Type error in argument 2 of iSectorList_Remove. Expected iSector.");
        XSRETURN(1);
    }
    iSectorList_Remove(_arg0,_arg1);
    XSRETURN(argvi);
}

#define iSectorList_FindByName(_swigobj,_swigarg0)  (_swigobj->FindByName(_swigarg0))
XS(_wrap_iSectorList_FindByName) {

    iSector * _result;
    iSectorList * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iSectorList_FindByName(iSectorList *,name);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iSectorList")) {
        croak("Type error in argument 1 of iSectorList_FindByName. Expected iSectorList.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (iSector *)iSectorList_FindByName(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iSector", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiMaterialListToiBase(void *ptr) {
    iMaterialList *src;
    iBase *dest;
    src = (iMaterialList *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMaterialList_FindByName(_swigobj,_swigarg0)  (_swigobj->FindByName(_swigarg0))
XS(_wrap_iMaterialList_FindByName) {

    iMaterialWrapper * _result;
    iMaterialList * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iMaterialList_FindByName(iMaterialList *,name);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iMaterialList")) {
        croak("Type error in argument 1 of iMaterialList_FindByName. Expected iMaterialList.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (iMaterialWrapper *)iMaterialList_FindByName(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iMaterialWrapper", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiTextureListToiBase(void *ptr) {
    iTextureList *src;
    iBase *dest;
    src = (iTextureList *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iTextureList_FindByName(_swigobj,_swigarg0)  (_swigobj->FindByName(_swigarg0))
XS(_wrap_iTextureList_FindByName) {

    iTextureWrapper * _result;
    iTextureList * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iTextureList_FindByName(iTextureList *,name);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iTextureList")) {
        croak("Type error in argument 1 of iTextureList_FindByName. Expected iTextureList.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (iTextureWrapper *)iTextureList_FindByName(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iTextureWrapper", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiEngineToiBase(void *ptr) {
    iEngine *src;
    iBase *dest;
    src = (iEngine *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iEngine_GetTextureFormat(_swigobj)  (_swigobj->GetTextureFormat())
XS(_wrap_iEngine_GetTextureFormat) {

    int  _result;
    iEngine * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iEngine_GetTextureFormat(iEngine *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_GetTextureFormat. Expected iEngine.");
        XSRETURN(1);
    }
    _result = (int )iEngine_GetTextureFormat(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

#define iEngine_DeleteAll(_swigobj)  (_swigobj->DeleteAll())
XS(_wrap_iEngine_DeleteAll) {

    iEngine * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iEngine_DeleteAll(iEngine *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_DeleteAll. Expected iEngine.");
        XSRETURN(1);
    }
    iEngine_DeleteAll(_arg0);
    XSRETURN(argvi);
}

#define iEngine_CreateTexture(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->CreateTexture(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
XS(_wrap_iEngine_CreateTexture) {

    iTextureWrapper * _result;
    iEngine * _arg0;
    char * _arg1;
    char * _arg2;
    csColor * _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: iEngine_CreateTexture(iEngine *,iName,iFileName,iTransp,iFlags);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_CreateTexture. Expected iEngine.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _arg2 = (char *) SvPV(ST(2),na);
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"csColorPtr")) {
        croak("Type error in argument 4 of iEngine_CreateTexture. Expected csColorPtr.");
        XSRETURN(1);
    }
    _arg4 = (int )SvIV(ST(4));
    _result = (iTextureWrapper *)iEngine_CreateTexture(_arg0,_arg1,_arg2,_arg3,_arg4);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iTextureWrapper", (void *) _result);
    XSRETURN(argvi);
}

#define iEngine_CreateSector(_swigobj,_swigarg0)  (_swigobj->CreateSector(_swigarg0))
XS(_wrap_iEngine_CreateSector) {

    iSector * _result;
    iEngine * _arg0;
    char * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: iEngine_CreateSector(iEngine *,iName);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_CreateSector. Expected iEngine.");
        XSRETURN(1);
    }
    _arg1 = (char *) SvPV(ST(1),na);
    _result = (iSector *)iEngine_CreateSector(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iSector", (void *) _result);
    XSRETURN(argvi);
}

#define iEngine_CreateSectorWallsMesh(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreateSectorWallsMesh(_swigarg0,_swigarg1))
XS(_wrap_iEngine_CreateSectorWallsMesh) {

    csPtr< iMeshWrapper > * _result;
    iEngine * _arg0;
    iSector * _arg1;
    char * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iEngine_CreateSectorWallsMesh(iEngine *,sector,name);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_CreateSectorWallsMesh. Expected iEngine.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"iSector")) {
        croak("Type error in argument 2 of iEngine_CreateSectorWallsMesh. Expected iSector.");
        XSRETURN(1);
    }
    _arg2 = (char *) SvPV(ST(2),na);
    _result = new csPtr< iMeshWrapper > (iEngine_CreateSectorWallsMesh(_arg0,_arg1,_arg2));
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"csPtr< iMeshWrapper >Ptr", (void *) _result);
    XSRETURN(argvi);
}

#define iEngine_GetSectors(_swigobj)  (_swigobj->GetSectors())
XS(_wrap_iEngine_GetSectors) {

    iSectorList * _result;
    iEngine * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iEngine_GetSectors(iEngine *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_GetSectors. Expected iEngine.");
        XSRETURN(1);
    }
    _result = (iSectorList *)iEngine_GetSectors(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iSectorList", (void *) _result);
    XSRETURN(argvi);
}

#define iEngine_GetMaterialList(_swigobj)  (_swigobj->GetMaterialList())
XS(_wrap_iEngine_GetMaterialList) {

    iMaterialList * _result;
    iEngine * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iEngine_GetMaterialList(iEngine *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_GetMaterialList. Expected iEngine.");
        XSRETURN(1);
    }
    _result = (iMaterialList *)iEngine_GetMaterialList(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iMaterialList", (void *) _result);
    XSRETURN(argvi);
}

#define iEngine_GetTextureList(_swigobj)  (_swigobj->GetTextureList())
XS(_wrap_iEngine_GetTextureList) {

    iTextureList * _result;
    iEngine * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iEngine_GetTextureList(iEngine *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iEngine")) {
        croak("Type error in argument 1 of iEngine_GetTextureList. Expected iEngine.");
        XSRETURN(1);
    }
    _result = (iTextureList *)iEngine_GetTextureList(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iTextureList", (void *) _result);
    XSRETURN(argvi);
}

static void *SwigiObjectRegistryToiBase(void *ptr) {
    iObjectRegistry *src;
    iBase *dest;
    src = (iObjectRegistry *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static iEngine * iObjectRegistry_Query_iEngine(iObjectRegistry *self) {
      csRef<iEngine> en (CS_QUERY_REGISTRY (self, iEngine));
      return en;	// DecRef is ok here.
    }
XS(_wrap_iObjectRegistry_Query_iEngine) {

    iEngine * _result;
    iObjectRegistry * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iObjectRegistry_Query_iEngine(iObjectRegistry *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iObjectRegistry")) {
        croak("Type error in argument 1 of iObjectRegistry_Query_iEngine. Expected iObjectRegistry.");
        XSRETURN(1);
    }
    _result = (iEngine *)iObjectRegistry_Query_iEngine(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iEngine", (void *) _result);
    XSRETURN(argvi);
}

static iGraphics3D * iObjectRegistry_Query_iGraphics3D(iObjectRegistry *self) {
      csRef<iGraphics3D> g3d (CS_QUERY_REGISTRY (self, iGraphics3D));
      return g3d;	// DecRef is ok here.
    }
XS(_wrap_iObjectRegistry_Query_iGraphics3D) {

    iGraphics3D * _result;
    iObjectRegistry * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: iObjectRegistry_Query_iGraphics3D(iObjectRegistry *);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iObjectRegistry")) {
        croak("Type error in argument 1 of iObjectRegistry_Query_iGraphics3D. Expected iObjectRegistry.");
        XSRETURN(1);
    }
    _result = (iGraphics3D *)iObjectRegistry_Query_iGraphics3D(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"iGraphics3D", (void *) _result);
    XSRETURN(argvi);
}

static void  iObjectRegistry_Print(iObjectRegistry *self,int  mode,const char * format) {
      printf (format);
    }
XS(_wrap_iObjectRegistry_Print) {

    iObjectRegistry * _arg0;
    int  _arg1;
    char * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: iObjectRegistry_Print(iObjectRegistry *,mode,format);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"iObjectRegistry")) {
        croak("Type error in argument 1 of iObjectRegistry_Print. Expected iObjectRegistry.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (char *) SvPV(ST(2),na);
    iObjectRegistry_Print(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

XS(_wrap_perl5_cspace_var_init) {
    dXSARGS;
    SV *sv;
    cv = cv; items = items;
    XSRETURN(1);
}
#ifdef __cplusplus
extern "C"
#endif
XS(boot_cspace) {
	 dXSARGS;
	 char *file = __FILE__;
	 cv = cv; items = items;
	 newXS("cspacec::var_cspace_init", _wrap_perl5_cspace_var_init, file);
	 newXS("cspacec::ptrcast", _wrap_ptrcast, file);
	 newXS("cspacec::ptrvalue", _wrap_ptrvalue, file);
	 newXS("cspacec::ptrset", _wrap_ptrset, file);
	 newXS("cspacec::ptrcreate", _wrap_ptrcreate, file);
	 newXS("cspacec::ptrfree", _wrap_ptrfree, file);
	 newXS("cspacec::ptradd", _wrap_ptradd, file);
	 newXS("cspacec::ptrmap", _wrap_ptrmap, file);
	 newXS("cspacec::MakeVersion", _wrap_MakeVersion, file);
	 newXS("cspacec::iBase_DecRef", _wrap_iBase_DecRef, file);
	 newXS("cspacec::iSCF_CreateInstance", _wrap_iSCF_CreateInstance, file);
	 newXS("cspacec::csVector3_x_set", _wrap_csVector3_x_set, file);
	 newXS("cspacec::csVector3_x_get", _wrap_csVector3_x_get, file);
	 newXS("cspacec::csVector3_y_set", _wrap_csVector3_y_set, file);
	 newXS("cspacec::csVector3_y_get", _wrap_csVector3_y_get, file);
	 newXS("cspacec::csVector3_z_set", _wrap_csVector3_z_set, file);
	 newXS("cspacec::csVector3_z_get", _wrap_csVector3_z_get, file);
	 newXS("cspacec::new_csVector3", _wrap_new_csVector3, file);
	 newXS("cspacec::delete_csVector3", _wrap_delete_csVector3, file);
	 newXS("cspacec::csRGBpixel_red_set", _wrap_csRGBpixel_red_set, file);
	 newXS("cspacec::csRGBpixel_red_get", _wrap_csRGBpixel_red_get, file);
	 newXS("cspacec::csRGBpixel_green_set", _wrap_csRGBpixel_green_set, file);
	 newXS("cspacec::csRGBpixel_green_get", _wrap_csRGBpixel_green_get, file);
	 newXS("cspacec::csRGBpixel_blue_set", _wrap_csRGBpixel_blue_set, file);
	 newXS("cspacec::csRGBpixel_blue_get", _wrap_csRGBpixel_blue_get, file);
	 newXS("cspacec::csRGBpixel_alpha_set", _wrap_csRGBpixel_alpha_set, file);
	 newXS("cspacec::csRGBpixel_alpha_get", _wrap_csRGBpixel_alpha_get, file);
	 newXS("cspacec::csPixelFormat_RedMask_set", _wrap_csPixelFormat_RedMask_set, file);
	 newXS("cspacec::csPixelFormat_RedMask_get", _wrap_csPixelFormat_RedMask_get, file);
	 newXS("cspacec::csPixelFormat_GreenMask_set", _wrap_csPixelFormat_GreenMask_set, file);
	 newXS("cspacec::csPixelFormat_GreenMask_get", _wrap_csPixelFormat_GreenMask_get, file);
	 newXS("cspacec::csPixelFormat_BlueMask_set", _wrap_csPixelFormat_BlueMask_set, file);
	 newXS("cspacec::csPixelFormat_BlueMask_get", _wrap_csPixelFormat_BlueMask_get, file);
	 newXS("cspacec::csPixelFormat_RedShift_set", _wrap_csPixelFormat_RedShift_set, file);
	 newXS("cspacec::csPixelFormat_RedShift_get", _wrap_csPixelFormat_RedShift_get, file);
	 newXS("cspacec::csPixelFormat_GreenShift_set", _wrap_csPixelFormat_GreenShift_set, file);
	 newXS("cspacec::csPixelFormat_GreenShift_get", _wrap_csPixelFormat_GreenShift_get, file);
	 newXS("cspacec::csPixelFormat_BlueShift_set", _wrap_csPixelFormat_BlueShift_set, file);
	 newXS("cspacec::csPixelFormat_BlueShift_get", _wrap_csPixelFormat_BlueShift_get, file);
	 newXS("cspacec::csPixelFormat_RedBits_set", _wrap_csPixelFormat_RedBits_set, file);
	 newXS("cspacec::csPixelFormat_RedBits_get", _wrap_csPixelFormat_RedBits_get, file);
	 newXS("cspacec::csPixelFormat_GreenBits_set", _wrap_csPixelFormat_GreenBits_set, file);
	 newXS("cspacec::csPixelFormat_GreenBits_get", _wrap_csPixelFormat_GreenBits_get, file);
	 newXS("cspacec::csPixelFormat_BlueBits_set", _wrap_csPixelFormat_BlueBits_set, file);
	 newXS("cspacec::csPixelFormat_BlueBits_get", _wrap_csPixelFormat_BlueBits_get, file);
	 newXS("cspacec::csPixelFormat_PalEntries_set", _wrap_csPixelFormat_PalEntries_set, file);
	 newXS("cspacec::csPixelFormat_PalEntries_get", _wrap_csPixelFormat_PalEntries_get, file);
	 newXS("cspacec::csPixelFormat_PixelBytes_set", _wrap_csPixelFormat_PixelBytes_set, file);
	 newXS("cspacec::csPixelFormat_PixelBytes_get", _wrap_csPixelFormat_PixelBytes_get, file);
	 newXS("cspacec::csGraphics3DCaps_CanClip_set", _wrap_csGraphics3DCaps_CanClip_set, file);
	 newXS("cspacec::csGraphics3DCaps_CanClip_get", _wrap_csGraphics3DCaps_CanClip_get, file);
	 newXS("cspacec::csGraphics3DCaps_minTexHeight_set", _wrap_csGraphics3DCaps_minTexHeight_set, file);
	 newXS("cspacec::csGraphics3DCaps_minTexHeight_get", _wrap_csGraphics3DCaps_minTexHeight_get, file);
	 newXS("cspacec::csGraphics3DCaps_minTexWidth_set", _wrap_csGraphics3DCaps_minTexWidth_set, file);
	 newXS("cspacec::csGraphics3DCaps_minTexWidth_get", _wrap_csGraphics3DCaps_minTexWidth_get, file);
	 newXS("cspacec::csGraphics3DCaps_maxTexHeight_set", _wrap_csGraphics3DCaps_maxTexHeight_set, file);
	 newXS("cspacec::csGraphics3DCaps_maxTexHeight_get", _wrap_csGraphics3DCaps_maxTexHeight_get, file);
	 newXS("cspacec::csGraphics3DCaps_maxTexWidth_set", _wrap_csGraphics3DCaps_maxTexWidth_set, file);
	 newXS("cspacec::csGraphics3DCaps_maxTexWidth_get", _wrap_csGraphics3DCaps_maxTexWidth_get, file);
	 newXS("cspacec::csGraphics3DCaps_fog_set", _wrap_csGraphics3DCaps_fog_set, file);
	 newXS("cspacec::csGraphics3DCaps_fog_get", _wrap_csGraphics3DCaps_fog_get, file);
	 newXS("cspacec::csGraphics3DCaps_NeedsPO2Maps_set", _wrap_csGraphics3DCaps_NeedsPO2Maps_set, file);
	 newXS("cspacec::csGraphics3DCaps_NeedsPO2Maps_get", _wrap_csGraphics3DCaps_NeedsPO2Maps_get, file);
	 newXS("cspacec::csGraphics3DCaps_MaxAspectRatio_set", _wrap_csGraphics3DCaps_MaxAspectRatio_set, file);
	 newXS("cspacec::csGraphics3DCaps_MaxAspectRatio_get", _wrap_csGraphics3DCaps_MaxAspectRatio_get, file);
	 newXS("cspacec::csImageArea_x_set", _wrap_csImageArea_x_set, file);
	 newXS("cspacec::csImageArea_x_get", _wrap_csImageArea_x_get, file);
	 newXS("cspacec::csImageArea_y_set", _wrap_csImageArea_y_set, file);
	 newXS("cspacec::csImageArea_y_get", _wrap_csImageArea_y_get, file);
	 newXS("cspacec::csImageArea_w_set", _wrap_csImageArea_w_set, file);
	 newXS("cspacec::csImageArea_w_get", _wrap_csImageArea_w_get, file);
	 newXS("cspacec::csImageArea_h_set", _wrap_csImageArea_h_set, file);
	 newXS("cspacec::csImageArea_h_get", _wrap_csImageArea_h_get, file);
	 newXS("cspacec::csImageArea_data_set", _wrap_csImageArea_data_set, file);
	 newXS("cspacec::csImageArea_data_get", _wrap_csImageArea_data_get, file);
	 newXS("cspacec::new_csImageArea", _wrap_new_csImageArea, file);
	 newXS("cspacec::iComponent_Initialize", _wrap_iComponent_Initialize, file);
	 newXS("cspacec::iEventHandler_HandleEvent", _wrap_iEventHandler_HandleEvent, file);
	 newXS("cspacec::iTextureHandle_GetMipMapDimensions", _wrap_iTextureHandle_GetMipMapDimensions, file);
	 newXS("cspacec::iTextureHandle_GetMeanColor", _wrap_iTextureHandle_GetMeanColor, file);
	 newXS("cspacec::iTextureHandle_GetCacheData", _wrap_iTextureHandle_GetCacheData, file);
	 newXS("cspacec::iTextureHandle_SetCacheData", _wrap_iTextureHandle_SetCacheData, file);
	 newXS("cspacec::iTextureHandle_GetPrivateObject", _wrap_iTextureHandle_GetPrivateObject, file);
	 newXS("cspacec::iMaterialHandle_GetTexture", _wrap_iMaterialHandle_GetTexture, file);
	 newXS("cspacec::iMaterialHandle_GetFlatColor", _wrap_iMaterialHandle_GetFlatColor, file);
	 newXS("cspacec::iMaterialHandle_GetReflection", _wrap_iMaterialHandle_GetReflection, file);
	 newXS("cspacec::iMaterialHandle_Prepare", _wrap_iMaterialHandle_Prepare, file);
	 newXS("cspacec::iMaterialWrapper_GetMaterialHandle", _wrap_iMaterialWrapper_GetMaterialHandle, file);
	 newXS("cspacec::iFont_SetSize", _wrap_iFont_SetSize, file);
	 newXS("cspacec::iFont_GetSize", _wrap_iFont_GetSize, file);
	 newXS("cspacec::iFont_GetMaxSize", _wrap_iFont_GetMaxSize, file);
	 newXS("cspacec::iFont_GetGlyphSize", _wrap_iFont_GetGlyphSize, file);
	 newXS("cspacec::iFont_GetGlyphBitmap", _wrap_iFont_GetGlyphBitmap, file);
	 newXS("cspacec::iFont_GetDimensions", _wrap_iFont_GetDimensions, file);
	 newXS("cspacec::iFont_GetLength", _wrap_iFont_GetLength, file);
	 newXS("cspacec::iFontServer_LoadFont", _wrap_iFontServer_LoadFont, file);
	 newXS("cspacec::iFontServer_GetFontCount", _wrap_iFontServer_GetFontCount, file);
	 newXS("cspacec::iFontServer_GetFont", _wrap_iFontServer_GetFont, file);
	 newXS("cspacec::iGraphics2D_Open", _wrap_iGraphics2D_Open, file);
	 newXS("cspacec::iGraphics2D_Close", _wrap_iGraphics2D_Close, file);
	 newXS("cspacec::iGraphics2D_GetWidth", _wrap_iGraphics2D_GetWidth, file);
	 newXS("cspacec::iGraphics2D_GetHeight", _wrap_iGraphics2D_GetHeight, file);
	 newXS("cspacec::iGraphics2D_GetFullScreen", _wrap_iGraphics2D_GetFullScreen, file);
	 newXS("cspacec::iGraphics2D_GetPage", _wrap_iGraphics2D_GetPage, file);
	 newXS("cspacec::iGraphics2D_DoubleBuffer", _wrap_iGraphics2D_DoubleBuffer, file);
	 newXS("cspacec::iGraphics2D_GetDoubleBufferState", _wrap_iGraphics2D_GetDoubleBufferState, file);
	 newXS("cspacec::iGraphics2D_GetPixelFormat", _wrap_iGraphics2D_GetPixelFormat, file);
	 newXS("cspacec::iGraphics2D_GetPixelBytes", _wrap_iGraphics2D_GetPixelBytes, file);
	 newXS("cspacec::iGraphics2D_GetPalEntryCount", _wrap_iGraphics2D_GetPalEntryCount, file);
	 newXS("cspacec::iGraphics2D_GetPalette", _wrap_iGraphics2D_GetPalette, file);
	 newXS("cspacec::iGraphics2D_SetRGB", _wrap_iGraphics2D_SetRGB, file);
	 newXS("cspacec::iGraphics2D_SetClipRect", _wrap_iGraphics2D_SetClipRect, file);
	 newXS("cspacec::iGraphics2D_GetClipRect", _wrap_iGraphics2D_GetClipRect, file);
	 newXS("cspacec::iGraphics2D_BeginDraw", _wrap_iGraphics2D_BeginDraw, file);
	 newXS("cspacec::iGraphics2D_FinishDraw", _wrap_iGraphics2D_FinishDraw, file);
	 newXS("cspacec::iGraphics2D_Print", _wrap_iGraphics2D_Print, file);
	 newXS("cspacec::iGraphics2D_Clear", _wrap_iGraphics2D_Clear, file);
	 newXS("cspacec::iGraphics2D_ClearAll", _wrap_iGraphics2D_ClearAll, file);
	 newXS("cspacec::iGraphics2D_DrawLine", _wrap_iGraphics2D_DrawLine, file);
	 newXS("cspacec::iGraphics2D_DrawBox", _wrap_iGraphics2D_DrawBox, file);
	 newXS("cspacec::iGraphics2D_ClipLine", _wrap_iGraphics2D_ClipLine, file);
	 newXS("cspacec::iGraphics2D_DrawPixel", _wrap_iGraphics2D_DrawPixel, file);
	 newXS("cspacec::iGraphics2D_GetPixelAt", _wrap_iGraphics2D_GetPixelAt, file);
	 newXS("cspacec::iGraphics2D_GetPixel", _wrap_iGraphics2D_GetPixel, file);
	 newXS("cspacec::iGraphics2D_SaveArea", _wrap_iGraphics2D_SaveArea, file);
	 newXS("cspacec::iGraphics2D_RestoreArea", _wrap_iGraphics2D_RestoreArea, file);
	 newXS("cspacec::iGraphics2D_FreeArea", _wrap_iGraphics2D_FreeArea, file);
	 newXS("cspacec::iGraphics2D_Write", _wrap_iGraphics2D_Write, file);
	 newXS("cspacec::iGraphics2D_GetFontServer", _wrap_iGraphics2D_GetFontServer, file);
	 newXS("cspacec::iGraphics2D_SetMousePosition", _wrap_iGraphics2D_SetMousePosition, file);
	 newXS("cspacec::iGraphics2D_SetMouseCursor", _wrap_iGraphics2D_SetMouseCursor, file);
	 newXS("cspacec::iGraphics2D_ScreenShot", _wrap_iGraphics2D_ScreenShot, file);
	 newXS("cspacec::iGraphics2D_AllowResize", _wrap_iGraphics2D_AllowResize, file);
	 newXS("cspacec::iGraphics2D_FindRGB", _wrap_iGraphics2D_FindRGB, file);
	 newXS("cspacec::iHalo_GetWidth", _wrap_iHalo_GetWidth, file);
	 newXS("cspacec::iHalo_GetHeight", _wrap_iHalo_GetHeight, file);
	 newXS("cspacec::iHalo_SetColor", _wrap_iHalo_SetColor, file);
	 newXS("cspacec::iHalo_GetColor", _wrap_iHalo_GetColor, file);
	 newXS("cspacec::iHalo_Draw", _wrap_iHalo_Draw, file);
	 newXS("cspacec::iGraphics3D_Open", _wrap_iGraphics3D_Open, file);
	 newXS("cspacec::iGraphics3D_Close", _wrap_iGraphics3D_Close, file);
	 newXS("cspacec::iGraphics3D_SetDimensions", _wrap_iGraphics3D_SetDimensions, file);
	 newXS("cspacec::iGraphics3D_BeginDraw", _wrap_iGraphics3D_BeginDraw, file);
	 newXS("cspacec::iGraphics3D_FinishDraw", _wrap_iGraphics3D_FinishDraw, file);
	 newXS("cspacec::iGraphics3D_Print", _wrap_iGraphics3D_Print, file);
	 newXS("cspacec::iGraphics3D_DrawPolygon", _wrap_iGraphics3D_DrawPolygon, file);
	 newXS("cspacec::iGraphics3D_DrawPolygonDebug", _wrap_iGraphics3D_DrawPolygonDebug, file);
	 newXS("cspacec::iGraphics3D_DrawLine", _wrap_iGraphics3D_DrawLine, file);
	 newXS("cspacec::iGraphics3D_DrawTriangleMesh", _wrap_iGraphics3D_DrawTriangleMesh, file);
	 newXS("cspacec::iGraphics3D_DrawPolygonMesh", _wrap_iGraphics3D_DrawPolygonMesh, file);
	 newXS("cspacec::iGraphics3D_OpenFogObject", _wrap_iGraphics3D_OpenFogObject, file);
	 newXS("cspacec::iGraphics3D_DrawFogPolygon", _wrap_iGraphics3D_DrawFogPolygon, file);
	 newXS("cspacec::iGraphics3D_CloseFogObject", _wrap_iGraphics3D_CloseFogObject, file);
	 newXS("cspacec::iGraphics3D_GetCaps", _wrap_iGraphics3D_GetCaps, file);
	 newXS("cspacec::iGraphics3D_GetZBuffAt", _wrap_iGraphics3D_GetZBuffAt, file);
	 newXS("cspacec::iGraphics3D_GetZBuffValue", _wrap_iGraphics3D_GetZBuffValue, file);
	 newXS("cspacec::iGraphics3D_DumpCache", _wrap_iGraphics3D_DumpCache, file);
	 newXS("cspacec::iGraphics3D_ClearCache", _wrap_iGraphics3D_ClearCache, file);
	 newXS("cspacec::iGraphics3D_RemoveFromCache", _wrap_iGraphics3D_RemoveFromCache, file);
	 newXS("cspacec::iGraphics3D_GetWidth", _wrap_iGraphics3D_GetWidth, file);
	 newXS("cspacec::iGraphics3D_GetHeight", _wrap_iGraphics3D_GetHeight, file);
	 newXS("cspacec::iGraphics3D_SetPerspectiveCenter", _wrap_iGraphics3D_SetPerspectiveCenter, file);
	 newXS("cspacec::iGraphics3D_SetPerspectiveAspect", _wrap_iGraphics3D_SetPerspectiveAspect, file);
	 newXS("cspacec::iGraphics3D_SetObjectToCamera", _wrap_iGraphics3D_SetObjectToCamera, file);
	 newXS("cspacec::iGraphics3D_GetDriver2D", _wrap_iGraphics3D_GetDriver2D, file);
	 newXS("cspacec::iGraphics3D_GetTextureManager", _wrap_iGraphics3D_GetTextureManager, file);
	 newXS("cspacec::iGraphics3D_CreateHalo", _wrap_iGraphics3D_CreateHalo, file);
	 newXS("cspacec::iGraphics3D_DrawPixmap", _wrap_iGraphics3D_DrawPixmap, file);
	 newXS("cspacec::iCamera_GetFOV", _wrap_iCamera_GetFOV, file);
	 newXS("cspacec::iCamera_GetInvFOV", _wrap_iCamera_GetInvFOV, file);
	 newXS("cspacec::iThingState_CreatePolygon", _wrap_iThingState_CreatePolygon, file);
	 newXS("cspacec::iMeshObject_Query_iThingState", _wrap_iMeshObject_Query_iThingState, file);
	 newXS("cspacec::iMeshWrapper_GetMeshObject", _wrap_iMeshWrapper_GetMeshObject, file);
	 newXS("cspacec::iLightMap_GetMapData", _wrap_iLightMap_GetMapData, file);
	 newXS("cspacec::iLightMap_GetWidth", _wrap_iLightMap_GetWidth, file);
	 newXS("cspacec::iLightMap_GetHeight", _wrap_iLightMap_GetHeight, file);
	 newXS("cspacec::iLightMap_GetRealWidth", _wrap_iLightMap_GetRealWidth, file);
	 newXS("cspacec::iLightMap_GetRealHeight", _wrap_iLightMap_GetRealHeight, file);
	 newXS("cspacec::iLightMap_GetCacheData", _wrap_iLightMap_GetCacheData, file);
	 newXS("cspacec::iLightMap_SetCacheData", _wrap_iLightMap_SetCacheData, file);
	 newXS("cspacec::iLightMap_GetMeanLighting", _wrap_iLightMap_GetMeanLighting, file);
	 newXS("cspacec::iLightMap_GetSize", _wrap_iLightMap_GetSize, file);
	 newXS("cspacec::iPolygon3D_GetLightMap", _wrap_iPolygon3D_GetLightMap, file);
	 newXS("cspacec::iPolygon3D_GetMaterialHandle", _wrap_iPolygon3D_GetMaterialHandle, file);
	 newXS("cspacec::iPolygon3D_SetMaterial", _wrap_iPolygon3D_SetMaterial, file);
	 newXS("cspacec::iPolygon3D_GetVertexCount", _wrap_iPolygon3D_GetVertexCount, file);
	 newXS("cspacec::iPolygon3D_GetVertex", _wrap_iPolygon3D_GetVertex, file);
	 newXS("cspacec::iPolygon3D_GetVertexW", _wrap_iPolygon3D_GetVertexW, file);
	 newXS("cspacec::iPolygon3D_GetVertexC", _wrap_iPolygon3D_GetVertexC, file);
	 newXS("cspacec::iPolygon3D_CreateVertexByIndex", _wrap_iPolygon3D_CreateVertexByIndex, file);
	 newXS("cspacec::iPolygon3D_CreateVertex", _wrap_iPolygon3D_CreateVertex, file);
	 newXS("cspacec::iPolygon3D_GetAlpha", _wrap_iPolygon3D_GetAlpha, file);
	 newXS("cspacec::iPolygon3D_SetAlpha", _wrap_iPolygon3D_SetAlpha, file);
	 newXS("cspacec::iPolygon3D_CreatePlane", _wrap_iPolygon3D_CreatePlane, file);
	 newXS("cspacec::iPolygon3D_SetPlane", _wrap_iPolygon3D_SetPlane, file);
	 newXS("cspacec::iPolygon3D_SetTextureSpace", _wrap_iPolygon3D_SetTextureSpace, file);
	 newXS("cspacec::iImage_GetImageData", _wrap_iImage_GetImageData, file);
	 newXS("cspacec::iImage_GetWidth", _wrap_iImage_GetWidth, file);
	 newXS("cspacec::iImage_GetHeight", _wrap_iImage_GetHeight, file);
	 newXS("cspacec::iImage_GetSize", _wrap_iImage_GetSize, file);
	 newXS("cspacec::iImage_Rescale", _wrap_iImage_Rescale, file);
	 newXS("cspacec::iImage_MipMap", _wrap_iImage_MipMap, file);
	 newXS("cspacec::iImage_SetName", _wrap_iImage_SetName, file);
	 newXS("cspacec::iImage_GetName", _wrap_iImage_GetName, file);
	 newXS("cspacec::iImage_GetFormat", _wrap_iImage_GetFormat, file);
	 newXS("cspacec::iImage_GetPalette", _wrap_iImage_GetPalette, file);
	 newXS("cspacec::iImage_GetAlpha", _wrap_iImage_GetAlpha, file);
	 newXS("cspacec::iImage_SetFormat", _wrap_iImage_SetFormat, file);
	 newXS("cspacec::iImage_Clone", _wrap_iImage_Clone, file);
	 newXS("cspacec::iImage_Crop", _wrap_iImage_Crop, file);
	 newXS("cspacec::iTextureManager_RegisterTexture", _wrap_iTextureManager_RegisterTexture, file);
	 newXS("cspacec::iTextureManager_PrepareTextures", _wrap_iTextureManager_PrepareTextures, file);
	 newXS("cspacec::iTextureManager_FreeImages", _wrap_iTextureManager_FreeImages, file);
	 newXS("cspacec::iTextureManager_SetVerbose", _wrap_iTextureManager_SetVerbose, file);
	 newXS("cspacec::iTextureManager_GetTextureFormat", _wrap_iTextureManager_GetTextureFormat, file);
	 newXS("cspacec::iPolygonTexture_GetMaterialHandle", _wrap_iPolygonTexture_GetMaterialHandle, file);
	 newXS("cspacec::iPolygonTexture_GetFDU", _wrap_iPolygonTexture_GetFDU, file);
	 newXS("cspacec::iPolygonTexture_GetFDV", _wrap_iPolygonTexture_GetFDV, file);
	 newXS("cspacec::iPolygonTexture_GetWidth", _wrap_iPolygonTexture_GetWidth, file);
	 newXS("cspacec::iPolygonTexture_GetHeight", _wrap_iPolygonTexture_GetHeight, file);
	 newXS("cspacec::iPolygonTexture_GetShiftU", _wrap_iPolygonTexture_GetShiftU, file);
	 newXS("cspacec::iPolygonTexture_GetIMinU", _wrap_iPolygonTexture_GetIMinU, file);
	 newXS("cspacec::iPolygonTexture_GetIMinV", _wrap_iPolygonTexture_GetIMinV, file);
	 newXS("cspacec::iPolygonTexture_GetTextureBox", _wrap_iPolygonTexture_GetTextureBox, file);
	 newXS("cspacec::iPolygonTexture_GetOriginalWidth", _wrap_iPolygonTexture_GetOriginalWidth, file);
	 newXS("cspacec::iPolygonTexture_GetPolygon", _wrap_iPolygonTexture_GetPolygon, file);
	 newXS("cspacec::iPolygonTexture_DynamicLightsDirty", _wrap_iPolygonTexture_DynamicLightsDirty, file);
	 newXS("cspacec::iPolygonTexture_RecalculateDynamicLights", _wrap_iPolygonTexture_RecalculateDynamicLights, file);
	 newXS("cspacec::iPolygonTexture_GetLightMap", _wrap_iPolygonTexture_GetLightMap, file);
	 newXS("cspacec::iPolygonTexture_GetLightCellSize", _wrap_iPolygonTexture_GetLightCellSize, file);
	 newXS("cspacec::iPolygonTexture_GetLightCellShift", _wrap_iPolygonTexture_GetLightCellShift, file);
	 newXS("cspacec::iPolygonTexture_GetCacheData", _wrap_iPolygonTexture_GetCacheData, file);
	 newXS("cspacec::iPolygonTexture_SetCacheData", _wrap_iPolygonTexture_SetCacheData, file);
	 newXS("cspacec::iSectorList_GetCount", _wrap_iSectorList_GetCount, file);
	 newXS("cspacec::iSectorList_Get", _wrap_iSectorList_Get, file);
	 newXS("cspacec::iSectorList_Add", _wrap_iSectorList_Add, file);
	 newXS("cspacec::iSectorList_Remove", _wrap_iSectorList_Remove, file);
	 newXS("cspacec::iSectorList_FindByName", _wrap_iSectorList_FindByName, file);
	 newXS("cspacec::iMaterialList_FindByName", _wrap_iMaterialList_FindByName, file);
	 newXS("cspacec::iTextureList_FindByName", _wrap_iTextureList_FindByName, file);
	 newXS("cspacec::iEngine_GetTextureFormat", _wrap_iEngine_GetTextureFormat, file);
	 newXS("cspacec::iEngine_DeleteAll", _wrap_iEngine_DeleteAll, file);
	 newXS("cspacec::iEngine_CreateTexture", _wrap_iEngine_CreateTexture, file);
	 newXS("cspacec::iEngine_CreateSector", _wrap_iEngine_CreateSector, file);
	 newXS("cspacec::iEngine_CreateSectorWallsMesh", _wrap_iEngine_CreateSectorWallsMesh, file);
	 newXS("cspacec::iEngine_GetSectors", _wrap_iEngine_GetSectors, file);
	 newXS("cspacec::iEngine_GetMaterialList", _wrap_iEngine_GetMaterialList, file);
	 newXS("cspacec::iEngine_GetTextureList", _wrap_iEngine_GetTextureList, file);
	 newXS("cspacec::iObjectRegistry_Query_iEngine", _wrap_iObjectRegistry_Query_iEngine, file);
	 newXS("cspacec::iObjectRegistry_Query_iGraphics3D", _wrap_iObjectRegistry_Query_iGraphics3D, file);
	 newXS("cspacec::iObjectRegistry_Print", _wrap_iObjectRegistry_Print, file);
/*
 * These are the pointer type-equivalency mappings. 
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("struct iPolygon3D","iPolygon3D",0);
	 SWIG_RegisterMapping("iPolygonTexture","struct iPolygonTexture",0);
	 SWIG_RegisterMapping("iBase","iObjectRegistry",SwigiObjectRegistryToiBase);
	 SWIG_RegisterMapping("iBase","iEngine",SwigiEngineToiBase);
	 SWIG_RegisterMapping("iBase","iTextureList",SwigiTextureListToiBase);
	 SWIG_RegisterMapping("iBase","iMaterialList",SwigiMaterialListToiBase);
	 SWIG_RegisterMapping("iBase","iSectorList",SwigiSectorListToiBase);
	 SWIG_RegisterMapping("iBase","iCameraPosition",SwigiCameraPositionToiBase);
	 SWIG_RegisterMapping("iBase","iPolygonTexture",SwigiPolygonTextureToiBase);
	 SWIG_RegisterMapping("iBase","iTextureManager",SwigiTextureManagerToiBase);
	 SWIG_RegisterMapping("iBase","iImage",SwigiImageToiBase);
	 SWIG_RegisterMapping("iBase","iPolygon3D",SwigiPolygon3DToiBase);
	 SWIG_RegisterMapping("iBase","iLightMap",SwigiLightMapToiBase);
	 SWIG_RegisterMapping("iBase","iMeshWrapper",SwigiMeshWrapperToiBase);
	 SWIG_RegisterMapping("iBase","iMeshObject",SwigiMeshObjectToiBase);
	 SWIG_RegisterMapping("iBase","iThingState",SwigiThingStateToiBase);
	 SWIG_RegisterMapping("iBase","iSector",SwigiSectorToiBase);
	 SWIG_RegisterMapping("iBase","iCamera",SwigiCameraToiBase);
	 SWIG_RegisterMapping("iBase","iGraphics3D",SwigiGraphics3DToiBase);
	 SWIG_RegisterMapping("iBase","iHalo",SwigiHaloToiBase);
	 SWIG_RegisterMapping("iBase","iGraphics2D",SwigiGraphics2DToiBase);
	 SWIG_RegisterMapping("iBase","iFontServer",SwigiFontServerToiBase);
	 SWIG_RegisterMapping("iBase","iFont",SwigiFontToiBase);
	 SWIG_RegisterMapping("iBase","iMaterialWrapper",SwigiMaterialWrapperToiBase);
	 SWIG_RegisterMapping("iBase","iMaterialHandle",SwigiMaterialHandleToiBase);
	 SWIG_RegisterMapping("iBase","iTextureHandle",SwigiTextureHandleToiBase);
	 SWIG_RegisterMapping("iBase","iTextureWrapper",SwigiTextureWrapperToiBase);
	 SWIG_RegisterMapping("iBase","iEventHandler",SwigiEventHandlerToiBase);
	 SWIG_RegisterMapping("iBase","iComponent",SwigiComponentToiBase);
	 SWIG_RegisterMapping("iBase","iSCF",SwigiSCFToiBase);
	 SWIG_RegisterMapping("iBase","struct iBase",0);
	 SWIG_RegisterMapping("struct iTextureList","iTextureList",0);
	 SWIG_RegisterMapping("iFontServer","struct iFontServer",0);
	 SWIG_RegisterMapping("iTextureManager","struct iTextureManager",0);
	 SWIG_RegisterMapping("struct iSectorList","iSectorList",0);
	 SWIG_RegisterMapping("struct iEngine","iEngine",0);
	 SWIG_RegisterMapping("struct iHalo","iHalo",0);
	 SWIG_RegisterMapping("struct csPixelFormat","csPixelFormat",0);
	 SWIG_RegisterMapping("iSectorList","struct iSectorList",0);
	 SWIG_RegisterMapping("struct iObjectRegistry","iObjectRegistry",0);
	 SWIG_RegisterMapping("unsigned short","short",0);
	 SWIG_RegisterMapping("iMaterialHandle","struct iMaterialHandle",0);
	 SWIG_RegisterMapping("csRGBpixel","struct csRGBpixel",0);
	 SWIG_RegisterMapping("csPixelFormat","struct csPixelFormat",0);
	 SWIG_RegisterMapping("struct iCamera","iCamera",0);
	 SWIG_RegisterMapping("struct iPolygonTexture","iPolygonTexture",0);
	 SWIG_RegisterMapping("iCameraPosition","struct iCameraPosition",0);
	 SWIG_RegisterMapping("struct csImageArea","csImageArea",0);
	 SWIG_RegisterMapping("struct iTextureManager","iTextureManager",0);
	 SWIG_RegisterMapping("class csVector3","csVector3",0);
	 SWIG_RegisterMapping("struct iImage","iImage",0);
	 SWIG_RegisterMapping("csImageArea","struct csImageArea",0);
	 SWIG_RegisterMapping("csVector3","class csVector3",0);
	 SWIG_RegisterMapping("struct iMeshWrapper","iMeshWrapper",0);
	 SWIG_RegisterMapping("iImage","struct iImage",0);
	 SWIG_RegisterMapping("iHalo","struct iHalo",0);
	 SWIG_RegisterMapping("struct iThingState","iThingState",0);
	 SWIG_RegisterMapping("struct iMaterialHandle","iMaterialHandle",0);
	 SWIG_RegisterMapping("iSector","struct iSector",0);
	 SWIG_RegisterMapping("long","unsigned long",0);
	 SWIG_RegisterMapping("long","signed long",0);
	 SWIG_RegisterMapping("struct iSCF","iSCF",0);
	 SWIG_RegisterMapping("iThingState","struct iThingState",0);
	 SWIG_RegisterMapping("iTextureHandle","struct iTextureHandle",0);
	 SWIG_RegisterMapping("iSCF","struct iSCF",0);
	 SWIG_RegisterMapping("struct iCameraPosition","iCameraPosition",0);
	 SWIG_RegisterMapping("iComponent","struct iComponent",0);
	 SWIG_RegisterMapping("struct iMaterialWrapper","iMaterialWrapper",0);
	 SWIG_RegisterMapping("struct iEventHandler","iEventHandler",0);
	 SWIG_RegisterMapping("struct iMeshObject","iMeshObject",0);
	 SWIG_RegisterMapping("iEngine","struct iEngine",0);
	 SWIG_RegisterMapping("struct iMaterialList","iMaterialList",0);
	 SWIG_RegisterMapping("signed short","short",0);
	 SWIG_RegisterMapping("iTextureList","struct iTextureList",0);
	 SWIG_RegisterMapping("iMeshObject","struct iMeshObject",0);
	 SWIG_RegisterMapping("struct csRGBpixel","csRGBpixel",0);
	 SWIG_RegisterMapping("iEventHandler","struct iEventHandler",0);
	 SWIG_RegisterMapping("iMaterialList","struct iMaterialList",0);
	 SWIG_RegisterMapping("struct iFont","iFont",0);
	 SWIG_RegisterMapping("iCamera","struct iCamera",0);
	 SWIG_RegisterMapping("struct csGraphics3DCaps","csGraphics3DCaps",0);
	 SWIG_RegisterMapping("signed int","int",0);
	 SWIG_RegisterMapping("struct iTextureHandle","iTextureHandle",0);
	 SWIG_RegisterMapping("iLightMap","struct iLightMap",0);
	 SWIG_RegisterMapping("iMaterialWrapper","struct iMaterialWrapper",0);
	 SWIG_RegisterMapping("iPolygon3D","struct iPolygon3D",0);
	 SWIG_RegisterMapping("short","unsigned short",0);
	 SWIG_RegisterMapping("short","signed short",0);
	 SWIG_RegisterMapping("struct iComponent","iComponent",0);
	 SWIG_RegisterMapping("iMeshWrapper","struct iMeshWrapper",0);
	 SWIG_RegisterMapping("unsigned long","long",0);
	 SWIG_RegisterMapping("int","unsigned int",0);
	 SWIG_RegisterMapping("int","signed int",0);
	 SWIG_RegisterMapping("struct iBase","iBase",0);
	 SWIG_RegisterMapping("iTextureWrapper","struct iTextureWrapper",0);
	 SWIG_RegisterMapping("iFont","struct iFont",0);
	 SWIG_RegisterMapping("struct iGraphics2D","iGraphics2D",0);
	 SWIG_RegisterMapping("unsigned int","int",0);
	 SWIG_RegisterMapping("iGraphics2D","struct iGraphics2D",0);
	 SWIG_RegisterMapping("csGraphics3DCaps","struct csGraphics3DCaps",0);
	 SWIG_RegisterMapping("struct iGraphics3D","iGraphics3D",0);
	 SWIG_RegisterMapping("iGraphics3D","struct iGraphics3D",0);
	 SWIG_RegisterMapping("iObjectRegistry","struct iObjectRegistry",0);
	 SWIG_RegisterMapping("struct iSector","iSector",0);
	 SWIG_RegisterMapping("struct iTextureWrapper","iTextureWrapper",0);
	 SWIG_RegisterMapping("struct iFontServer","iFontServer",0);
	 SWIG_RegisterMapping("signed long","long",0);
	 SWIG_RegisterMapping("struct iLightMap","iLightMap",0);
	 ST(0) = &sv_yes;
	 XSRETURN(1);
}
