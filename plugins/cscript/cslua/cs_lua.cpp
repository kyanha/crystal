/*
 * FILE : plugins/cscript/cslua/cs_lua.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Build 883)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
#define SWIG_SHADOW_CLASSES
/* -*- c -*-
 * 
 * lua40.swg
 * 
 * Copyright (C) 2000 Didier Jorand <didier.jorand@free.fr>
 * 
 * This code is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this code; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 * 
 */

#ifdef __cplusplus
extern "C" {
#endif
    
#include <stdlib.h>

#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>
#include <luadebug.h>

extern int const_ptr_tag;
extern int const_string_tag;
extern int const_integer_tag;
extern int const_float_tag;
extern int const_double_tag;
extern int const_bool_tag;
extern int ptr_tag;
extern int string_tag;
extern int integer_tag;
extern int float_tag;
extern int double_tag;
extern int bool_tag;

extern int pointer_tag;
    
extern void swig_lua_init(lua_State *L);

    
extern void *LS_luaL_check_userdata(lua_State *L, int n);
extern void *LS_luaL_opt_userdata(lua_State *L, int n, void *v);
extern void LS_luaL_pushpointer(lua_State *L, void *v);
extern void LS_luaL_pushuserpointer(lua_State *L, void *v, int t);
extern void LS_luaL_pushstringpointer(lua_State *L, char *s);
extern void LS_luaL_pushboolean(lua_State *L, int b);

#ifndef __cplusplus
    /* bool type not defined in 'C' */
#ifdef NO_GLIB
typedef int bool;    
#else
#include <glib.h>    
typedef gboolean bool;    
#endif
#endif

#ifdef __cplusplus
}
#endif

/*
 * end of lua40.swg
 */
    
    
#ifdef __cplusplus
extern "C" {
#endif
int cspace_initialize(lua_State *L);
#ifdef __cplusplus
}
#endif

  #include "css.h"
//***** SCF Wrappers
  int MakeVersion(int version0, int version1, int version2)
  {
    return SCF_CONSTRUCT_VERSION(version0, version1, version2);
  }

#include "isys/system.h"
#include "isys/plugin.h"
#include "iutil/event.h"
#include "iutil/objreg.h"
#include "iengine/camera.h"
#include "iengine/campos.h"
#include "imesh/object.h"
#include "imesh/thing/thing.h"
#include "imesh/thing/lightmap.h"
#include "imap/parser.h"
#include "plugins/cscript/cspython/cspython.h"
#include "ivideo/graph2d.h"
#include "ivideo/fontserv.h"
#include "ivideo/halo.h"

int iBase_tag;
int iSCF_tag;
int csVector3_tag;
int csRGBpixel_tag;
int csPixelFormat_tag;
int csGraphics3DCaps_tag;
int csImageArea_tag;
int iPlugin_tag;
int iTextureWrapper_tag;
int iTextureHandle_tag;
int iMaterialHandle_tag;
int iMaterialWrapper_tag;
int iFont_tag;
int iFontServer_tag;
int iGraphics2D_tag;
int iHalo_tag;
int iGraphics3D_tag;
int iCamera_tag;
int iSector_tag;
int iThingState_tag;
int iMeshObject_tag;
int iMeshWrapper_tag;
int iLightMap_tag;
int iPolygon3D_tag;
int iImage_tag;
int iTextureManager_tag;
int iPolygonTexture_tag;
int iCameraPosition_tag;
int iSectorList_tag;
int iEngine_tag;
int iObjectRegistry_tag;
static int
wrap_MakeVersion(lua_State *L)
{
    int  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = ( int )luaL_check_long(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    _result = (int )MakeVersion(_arg0,_arg1,_arg2);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iBase_DecRef(_swigobj)  (_swigobj->DecRef())
static int
wrap_iBase_DecRef(lua_State *L)
{
    iBase * _arg0;

{_arg0 = (iBase *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iBase_DecRef(_arg0);
	return 0;
}

static void *SwigiSCFToiBase(void *ptr) {
    iSCF *src;
    iBase *dest;
    src = (iSCF *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iSCF_CreateInstance(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->CreateInstance(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iSCF_CreateInstance(lua_State *L)
{
    void * _result;
    iSCF * _arg0;
    char * _arg1;
    char * _arg2;
    int  _arg3;

{_arg0 = (iSCF *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{_arg2 = (char*)luaL_opt_string(L, 3, NULL);}
{_arg3 = ( int )luaL_check_long(L, 4);}
	lua_settop(L, 0);
    _result = (void *)iSCF_CreateInstance(_arg0,_arg1,_arg2,_arg3);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define csVector3_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
static int
wrap_csVector3_x_set(lua_State *L)
{
    float  _result;
    csVector3 * _arg0;
    float  _arg1;

{_arg0 = (csVector3 *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
	lua_settop(L, 0);
    _result = (float )csVector3_x_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csVector3_x_get(_swigobj) ((float ) _swigobj->x)
static int
wrap_csVector3_x_get(lua_State *L)
{
    float  _result;
    csVector3 * _arg0;

{_arg0 = (csVector3 *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (float )csVector3_x_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csVector3_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
static int
wrap_csVector3_y_set(lua_State *L)
{
    float  _result;
    csVector3 * _arg0;
    float  _arg1;

{_arg0 = (csVector3 *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
	lua_settop(L, 0);
    _result = (float )csVector3_y_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csVector3_y_get(_swigobj) ((float ) _swigobj->y)
static int
wrap_csVector3_y_get(lua_State *L)
{
    float  _result;
    csVector3 * _arg0;

{_arg0 = (csVector3 *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (float )csVector3_y_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csVector3_z_set(_swigobj,_swigval) (_swigobj->z = _swigval,_swigval)
static int
wrap_csVector3_z_set(lua_State *L)
{
    float  _result;
    csVector3 * _arg0;
    float  _arg1;

{_arg0 = (csVector3 *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
	lua_settop(L, 0);
    _result = (float )csVector3_z_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csVector3_z_get(_swigobj) ((float ) _swigobj->z)
static int
wrap_csVector3_z_get(lua_State *L)
{
    float  _result;
    csVector3 * _arg0;

{_arg0 = (csVector3 *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (float )csVector3_z_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define new_csVector3(_swigarg0,_swigarg1,_swigarg2) (new csVector3(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_new_csVector3(lua_State *L)
{
    csVector3 * _result;
    float  _arg0;
    float  _arg1;
    float  _arg2;

{_arg0 = ( float )luaL_check_number(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
{_arg2 = ( float )luaL_check_number(L, 3);}
	lua_settop(L, 0);
    _result = (csVector3 *)new_csVector3(_arg0,_arg1,_arg2);
{LS_luaL_pushuserpointer(L, _result, csVector3_tag);}
	return 1;
}

#define delete_csVector3(_swigobj) (delete _swigobj)
static int
wrap_delete_csVector3(lua_State *L)
{
    csVector3 * _arg0;

{_arg0 = (csVector3 *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    delete_csVector3(_arg0);
	return 0;
}

#define csRGBpixel_red_set(_swigobj,_swigval) (_swigobj->red = _swigval,_swigval)
static int
wrap_csRGBpixel_red_set(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned char )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_red_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csRGBpixel_red_get(_swigobj) ((unsigned char ) _swigobj->red)
static int
wrap_csRGBpixel_red_get(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_red_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csRGBpixel_green_set(_swigobj,_swigval) (_swigobj->green = _swigval,_swigval)
static int
wrap_csRGBpixel_green_set(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned char )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_green_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csRGBpixel_green_get(_swigobj) ((unsigned char ) _swigobj->green)
static int
wrap_csRGBpixel_green_get(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_green_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csRGBpixel_blue_set(_swigobj,_swigval) (_swigobj->blue = _swigval,_swigval)
static int
wrap_csRGBpixel_blue_set(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned char )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_blue_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csRGBpixel_blue_get(_swigobj) ((unsigned char ) _swigobj->blue)
static int
wrap_csRGBpixel_blue_get(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_blue_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csRGBpixel_alpha_set(_swigobj,_swigval) (_swigobj->alpha = _swigval,_swigval)
static int
wrap_csRGBpixel_alpha_set(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;
    unsigned char  _arg1;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned char )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_alpha_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csRGBpixel_alpha_get(_swigobj) ((unsigned char ) _swigobj->alpha)
static int
wrap_csRGBpixel_alpha_get(lua_State *L)
{
    unsigned char  _result;
    csRGBpixel * _arg0;

{_arg0 = (csRGBpixel *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (unsigned char )csRGBpixel_alpha_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_RedMask_set(_swigobj,_swigval) (_swigobj->RedMask = _swigval,_swigval)
static int
wrap_csPixelFormat_RedMask_set(lua_State *L)
{
    unsigned long  _result;
    csPixelFormat * _arg0;
    unsigned long  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned long )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (unsigned long )csPixelFormat_RedMask_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_RedMask_get(_swigobj) ((unsigned long ) _swigobj->RedMask)
static int
wrap_csPixelFormat_RedMask_get(lua_State *L)
{
    unsigned long  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (unsigned long )csPixelFormat_RedMask_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_GreenMask_set(_swigobj,_swigval) (_swigobj->GreenMask = _swigval,_swigval)
static int
wrap_csPixelFormat_GreenMask_set(lua_State *L)
{
    unsigned long  _result;
    csPixelFormat * _arg0;
    unsigned long  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned long )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (unsigned long )csPixelFormat_GreenMask_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_GreenMask_get(_swigobj) ((unsigned long ) _swigobj->GreenMask)
static int
wrap_csPixelFormat_GreenMask_get(lua_State *L)
{
    unsigned long  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (unsigned long )csPixelFormat_GreenMask_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_BlueMask_set(_swigobj,_swigval) (_swigobj->BlueMask = _swigval,_swigval)
static int
wrap_csPixelFormat_BlueMask_set(lua_State *L)
{
    unsigned long  _result;
    csPixelFormat * _arg0;
    unsigned long  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned long )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (unsigned long )csPixelFormat_BlueMask_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_BlueMask_get(_swigobj) ((unsigned long ) _swigobj->BlueMask)
static int
wrap_csPixelFormat_BlueMask_get(lua_State *L)
{
    unsigned long  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (unsigned long )csPixelFormat_BlueMask_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_RedShift_set(_swigobj,_swigval) (_swigobj->RedShift = _swigval,_swigval)
static int
wrap_csPixelFormat_RedShift_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_RedShift_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_RedShift_get(_swigobj) ((int ) _swigobj->RedShift)
static int
wrap_csPixelFormat_RedShift_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_RedShift_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_GreenShift_set(_swigobj,_swigval) (_swigobj->GreenShift = _swigval,_swigval)
static int
wrap_csPixelFormat_GreenShift_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_GreenShift_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_GreenShift_get(_swigobj) ((int ) _swigobj->GreenShift)
static int
wrap_csPixelFormat_GreenShift_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_GreenShift_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_BlueShift_set(_swigobj,_swigval) (_swigobj->BlueShift = _swigval,_swigval)
static int
wrap_csPixelFormat_BlueShift_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_BlueShift_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_BlueShift_get(_swigobj) ((int ) _swigobj->BlueShift)
static int
wrap_csPixelFormat_BlueShift_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_BlueShift_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_RedBits_set(_swigobj,_swigval) (_swigobj->RedBits = _swigval,_swigval)
static int
wrap_csPixelFormat_RedBits_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_RedBits_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_RedBits_get(_swigobj) ((int ) _swigobj->RedBits)
static int
wrap_csPixelFormat_RedBits_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_RedBits_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_GreenBits_set(_swigobj,_swigval) (_swigobj->GreenBits = _swigval,_swigval)
static int
wrap_csPixelFormat_GreenBits_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_GreenBits_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_GreenBits_get(_swigobj) ((int ) _swigobj->GreenBits)
static int
wrap_csPixelFormat_GreenBits_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_GreenBits_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_BlueBits_set(_swigobj,_swigval) (_swigobj->BlueBits = _swigval,_swigval)
static int
wrap_csPixelFormat_BlueBits_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_BlueBits_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_BlueBits_get(_swigobj) ((int ) _swigobj->BlueBits)
static int
wrap_csPixelFormat_BlueBits_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_BlueBits_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_PalEntries_set(_swigobj,_swigval) (_swigobj->PalEntries = _swigval,_swigval)
static int
wrap_csPixelFormat_PalEntries_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_PalEntries_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_PalEntries_get(_swigobj) ((int ) _swigobj->PalEntries)
static int
wrap_csPixelFormat_PalEntries_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_PalEntries_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_PixelBytes_set(_swigobj,_swigval) (_swigobj->PixelBytes = _swigval,_swigval)
static int
wrap_csPixelFormat_PixelBytes_set(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;
    int  _arg1;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_PixelBytes_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csPixelFormat_PixelBytes_get(_swigobj) ((int ) _swigobj->PixelBytes)
static int
wrap_csPixelFormat_PixelBytes_get(lua_State *L)
{
    int  _result;
    csPixelFormat * _arg0;

{_arg0 = (csPixelFormat *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csPixelFormat_PixelBytes_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_CanClip_set(_swigobj,_swigval) (_swigobj->CanClip = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_CanClip_set(lua_State *L)
{
    bool  _result;
    csGraphics3DCaps * _arg0;
    bool  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{
    if( (lua_isnull(L, 2)) || (lua_isnil(L, 2)) ) {
	_arg1 = 0;
    } else if (lua_isnumber(L, 2)) {
	_arg1 = (bool)lua_tonumber(L, 2);
    } else {
	_arg1 = 1;
    }
}
	lua_settop(L, 0);
    _result = (bool )csGraphics3DCaps_CanClip_set(_arg0,_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define csGraphics3DCaps_CanClip_get(_swigobj) ((bool ) _swigobj->CanClip)
static int
wrap_csGraphics3DCaps_CanClip_get(lua_State *L)
{
    bool  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )csGraphics3DCaps_CanClip_get(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define csGraphics3DCaps_minTexHeight_set(_swigobj,_swigval) (_swigobj->minTexHeight = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_minTexHeight_set(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_minTexHeight_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_minTexHeight_get(_swigobj) ((int ) _swigobj->minTexHeight)
static int
wrap_csGraphics3DCaps_minTexHeight_get(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_minTexHeight_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_minTexWidth_set(_swigobj,_swigval) (_swigobj->minTexWidth = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_minTexWidth_set(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_minTexWidth_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_minTexWidth_get(_swigobj) ((int ) _swigobj->minTexWidth)
static int
wrap_csGraphics3DCaps_minTexWidth_get(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_minTexWidth_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_maxTexHeight_set(_swigobj,_swigval) (_swigobj->maxTexHeight = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_maxTexHeight_set(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_maxTexHeight_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_maxTexHeight_get(_swigobj) ((int ) _swigobj->maxTexHeight)
static int
wrap_csGraphics3DCaps_maxTexHeight_get(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_maxTexHeight_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_maxTexWidth_set(_swigobj,_swigval) (_swigobj->maxTexWidth = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_maxTexWidth_set(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_maxTexWidth_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_maxTexWidth_get(_swigobj) ((int ) _swigobj->maxTexWidth)
static int
wrap_csGraphics3DCaps_maxTexWidth_get(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_maxTexWidth_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_fog_set(_swigobj,_swigval) (_swigobj->fog = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_fog_set(lua_State *L)
{
    G3D_FOGMETHOD  _result;
    csGraphics3DCaps * _arg0;
    G3D_FOGMETHOD  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( G3D_FOGMETHOD )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (G3D_FOGMETHOD )csGraphics3DCaps_fog_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_fog_get(_swigobj) ((G3D_FOGMETHOD ) _swigobj->fog)
static int
wrap_csGraphics3DCaps_fog_get(lua_State *L)
{
    G3D_FOGMETHOD  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (G3D_FOGMETHOD )csGraphics3DCaps_fog_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_NeedsPO2Maps_set(_swigobj,_swigval) (_swigobj->NeedsPO2Maps = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_NeedsPO2Maps_set(lua_State *L)
{
    bool  _result;
    csGraphics3DCaps * _arg0;
    bool  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{
    if( (lua_isnull(L, 2)) || (lua_isnil(L, 2)) ) {
	_arg1 = 0;
    } else if (lua_isnumber(L, 2)) {
	_arg1 = (bool)lua_tonumber(L, 2);
    } else {
	_arg1 = 1;
    }
}
	lua_settop(L, 0);
    _result = (bool )csGraphics3DCaps_NeedsPO2Maps_set(_arg0,_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define csGraphics3DCaps_NeedsPO2Maps_get(_swigobj) ((bool ) _swigobj->NeedsPO2Maps)
static int
wrap_csGraphics3DCaps_NeedsPO2Maps_get(lua_State *L)
{
    bool  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )csGraphics3DCaps_NeedsPO2Maps_get(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define csGraphics3DCaps_MaxAspectRatio_set(_swigobj,_swigval) (_swigobj->MaxAspectRatio = _swigval,_swigval)
static int
wrap_csGraphics3DCaps_MaxAspectRatio_set(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;
    int  _arg1;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_MaxAspectRatio_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csGraphics3DCaps_MaxAspectRatio_get(_swigobj) ((int ) _swigobj->MaxAspectRatio)
static int
wrap_csGraphics3DCaps_MaxAspectRatio_get(lua_State *L)
{
    int  _result;
    csGraphics3DCaps * _arg0;

{_arg0 = (csGraphics3DCaps *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csGraphics3DCaps_MaxAspectRatio_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
static int
wrap_csImageArea_x_set(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;
    int  _arg1;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csImageArea_x_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_x_get(_swigobj) ((int ) _swigobj->x)
static int
wrap_csImageArea_x_get(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csImageArea_x_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
static int
wrap_csImageArea_y_set(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;
    int  _arg1;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csImageArea_y_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_y_get(_swigobj) ((int ) _swigobj->y)
static int
wrap_csImageArea_y_get(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csImageArea_y_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_w_set(_swigobj,_swigval) (_swigobj->w = _swigval,_swigval)
static int
wrap_csImageArea_w_set(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;
    int  _arg1;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csImageArea_w_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_w_get(_swigobj) ((int ) _swigobj->w)
static int
wrap_csImageArea_w_get(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csImageArea_w_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_h_set(_swigobj,_swigval) (_swigobj->h = _swigval,_swigval)
static int
wrap_csImageArea_h_set(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;
    int  _arg1;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )csImageArea_h_set(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define csImageArea_h_get(_swigobj) ((int ) _swigobj->h)
static int
wrap_csImageArea_h_get(lua_State *L)
{
    int  _result;
    csImageArea * _arg0;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )csImageArea_h_get(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

static char * csImageArea_data_set(csImageArea *obj, char *val) {
    if (obj->data) delete [] obj->data;
    obj->data = new char[strlen(val)+1];
    strcpy((char *)obj->data,val);
    return (char *) val;
}
static int
wrap_csImageArea_data_set(lua_State *L)
{
    char * _result;
    csImageArea * _arg0;
    char * _arg1;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
	lua_settop(L, 0);
    _result = (char *)csImageArea_data_set(_arg0,_arg1);
{LS_luaL_pushstringpointer(L, _result);}
	return 1;
}

#define csImageArea_data_get(_swigobj) ((char *) _swigobj->data)
static int
wrap_csImageArea_data_get(lua_State *L)
{
    char * _result;
    csImageArea * _arg0;

{_arg0 = (csImageArea *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (char *)csImageArea_data_get(_arg0);
{LS_luaL_pushstringpointer(L, _result);}
	return 1;
}

#define new_csImageArea(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new csImageArea(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_new_csImageArea(lua_State *L)
{
    csImageArea * _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;

{_arg0 = ( int )luaL_check_long(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
	lua_settop(L, 0);
    _result = (csImageArea *)new_csImageArea(_arg0,_arg1,_arg2,_arg3);
{LS_luaL_pushuserpointer(L, _result, csImageArea_tag);}
	return 1;
}

static void *SwigiPluginToiBase(void *ptr) {
    iPlugin *src;
    iBase *dest;
    src = (iPlugin *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPlugin_Initialize(_swigobj,_swigarg0)  (_swigobj->Initialize(_swigarg0))
static int
wrap_iPlugin_Initialize(lua_State *L)
{
    bool  _result;
    iPlugin * _arg0;
    iObjectRegistry * _arg1;

{_arg0 = (iPlugin *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iObjectRegistry *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    _result = (bool )iPlugin_Initialize(_arg0,_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iPlugin_HandleEvent(_swigobj,_swigarg0)  (_swigobj->HandleEvent(_swigarg0))
static int
wrap_iPlugin_HandleEvent(lua_State *L)
{
    bool  _result;
    iPlugin * _arg0;
    iEvent * _arg1;

{_arg0 = (iPlugin *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iEvent *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    _result = (bool )iPlugin_HandleEvent(_arg0,*_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

static void *SwigiTextureWrapperToiBase(void *ptr) {
    iTextureWrapper *src;
    iBase *dest;
    src = (iTextureWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static void *SwigiTextureHandleToiBase(void *ptr) {
    iTextureHandle *src;
    iBase *dest;
    src = (iTextureHandle *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iTextureHandle_GetMipMapDimensions(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMipMapDimensions(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iTextureHandle_GetMipMapDimensions(lua_State *L)
{
    bool  _result;
    iTextureHandle * _arg0;
    int  _arg1;
    int * _arg2;
    int * _arg3;

{_arg0 = (iTextureHandle *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = (int *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (int *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    _result = (bool )iTextureHandle_GetMipMapDimensions(_arg0,_arg1,*_arg2,*_arg3);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iTextureHandle_GetMeanColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMeanColor(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iTextureHandle_GetMeanColor(lua_State *L)
{
    iTextureHandle * _arg0;
    unsigned char * _arg1;
    unsigned char * _arg2;
    unsigned char * _arg3;

{_arg0 = (iTextureHandle *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (unsigned char *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (unsigned char *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (unsigned char *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    iTextureHandle_GetMeanColor(_arg0,*_arg1,*_arg2,*_arg3);
	return 0;
}

#define iTextureHandle_GetCacheData(_swigobj)  (_swigobj->GetCacheData())
static int
wrap_iTextureHandle_GetCacheData(lua_State *L)
{
    void * _result;
    iTextureHandle * _arg0;

{_arg0 = (iTextureHandle *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (void *)iTextureHandle_GetCacheData(_arg0);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iTextureHandle_SetCacheData(_swigobj,_swigarg0)  (_swigobj->SetCacheData(_swigarg0))
static int
wrap_iTextureHandle_SetCacheData(lua_State *L)
{
    iTextureHandle * _arg0;
    void * _arg1;

{_arg0 = (iTextureHandle *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (void *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iTextureHandle_SetCacheData(_arg0,_arg1);
	return 0;
}

#define iTextureHandle_GetPrivateObject(_swigobj)  (_swigobj->GetPrivateObject())
static int
wrap_iTextureHandle_GetPrivateObject(lua_State *L)
{
    void * _result;
    iTextureHandle * _arg0;

{_arg0 = (iTextureHandle *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (void *)iTextureHandle_GetPrivateObject(_arg0);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

static void *SwigiMaterialHandleToiBase(void *ptr) {
    iMaterialHandle *src;
    iBase *dest;
    src = (iMaterialHandle *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMaterialHandle_GetTexture(_swigobj)  (_swigobj->GetTexture())
static int
wrap_iMaterialHandle_GetTexture(lua_State *L)
{
    iTextureHandle * _result;
    iMaterialHandle * _arg0;

{_arg0 = (iMaterialHandle *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iTextureHandle *)iMaterialHandle_GetTexture(_arg0);
{LS_luaL_pushuserpointer(L, _result, iTextureHandle_tag);}
	return 1;
}

#define iMaterialHandle_GetFlatColor(_swigobj,_swigarg0)  (_swigobj->GetFlatColor(_swigarg0))
static int
wrap_iMaterialHandle_GetFlatColor(lua_State *L)
{
    iMaterialHandle * _arg0;
    csRGBpixel * _arg1;

{_arg0 = (iMaterialHandle *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csRGBpixel *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iMaterialHandle_GetFlatColor(_arg0,*_arg1);
	return 0;
}

#define iMaterialHandle_GetReflection(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetReflection(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iMaterialHandle_GetReflection(lua_State *L)
{
    iMaterialHandle * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;

{_arg0 = (iMaterialHandle *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (float *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (float *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (float *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    iMaterialHandle_GetReflection(_arg0,*_arg1,*_arg2,*_arg3);
	return 0;
}

#define iMaterialHandle_Prepare(_swigobj)  (_swigobj->Prepare())
static int
wrap_iMaterialHandle_Prepare(lua_State *L)
{
    iMaterialHandle * _arg0;

{_arg0 = (iMaterialHandle *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iMaterialHandle_Prepare(_arg0);
	return 0;
}

static void *SwigiMaterialWrapperToiBase(void *ptr) {
    iMaterialWrapper *src;
    iBase *dest;
    src = (iMaterialWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMaterialWrapper_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
static int
wrap_iMaterialWrapper_GetMaterialHandle(lua_State *L)
{
    iMaterialHandle * _result;
    iMaterialWrapper * _arg0;

{_arg0 = (iMaterialWrapper *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iMaterialHandle *)iMaterialWrapper_GetMaterialHandle(_arg0);
{LS_luaL_pushuserpointer(L, _result, iMaterialHandle_tag);}
	return 1;
}

static void *SwigiFontToiBase(void *ptr) {
    iFont *src;
    iBase *dest;
    src = (iFont *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iFont_SetSize(_swigobj,_swigarg0)  (_swigobj->SetSize(_swigarg0))
static int
wrap_iFont_SetSize(lua_State *L)
{
    iFont * _arg0;
    int  _arg1;

{_arg0 = (iFont *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    iFont_SetSize(_arg0,_arg1);
	return 0;
}

#define iFont_GetSize(_swigobj)  (_swigobj->GetSize())
static int
wrap_iFont_GetSize(lua_State *L)
{
    int  _result;
    iFont * _arg0;

{_arg0 = (iFont *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iFont_GetSize(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iFont_GetMaxSize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetMaxSize(_swigarg0,_swigarg1))
static int
wrap_iFont_GetMaxSize(lua_State *L)
{
    iFont * _arg0;
    int * _arg1;
    int * _arg2;

{_arg0 = (iFont *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (int *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (int *)LS_luaL_check_userdata(L, 3);}
	lua_settop(L, 0);
    iFont_GetMaxSize(_arg0,*_arg1,*_arg2);
	return 0;
}

#define iFont_GetGlyphSize(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetGlyphSize(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iFont_GetGlyphSize(lua_State *L)
{
    bool  _result;
    iFont * _arg0;
    unsigned char  _arg1;
    int * _arg2;
    int * _arg3;

{_arg0 = (iFont *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned char )luaL_check_long(L, 2);}
{_arg2 = (int *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (int *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    _result = (bool )iFont_GetGlyphSize(_arg0,_arg1,*_arg2,*_arg3);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iFont_GetGlyphBitmap(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetGlyphBitmap(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iFont_GetGlyphBitmap(lua_State *L)
{
    void * _result;
    iFont * _arg0;
    unsigned char  _arg1;
    int * _arg2;
    int * _arg3;

{_arg0 = (iFont *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( unsigned char )luaL_check_long(L, 2);}
{_arg2 = (int *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (int *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    _result = (void *)iFont_GetGlyphBitmap(_arg0,_arg1,*_arg2,*_arg3);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iFont_GetDimensions(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetDimensions(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iFont_GetDimensions(lua_State *L)
{
    iFont * _arg0;
    char * _arg1;
    int * _arg2;
    int * _arg3;

{_arg0 = (iFont *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{_arg2 = (int *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (int *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    iFont_GetDimensions(_arg0,_arg1,*_arg2,*_arg3);
	return 0;
}

#define iFont_GetLength(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetLength(_swigarg0,_swigarg1))
static int
wrap_iFont_GetLength(lua_State *L)
{
    int  _result;
    iFont * _arg0;
    char * _arg1;
    int  _arg2;

{_arg0 = (iFont *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    _result = (int )iFont_GetLength(_arg0,_arg1,_arg2);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

static void *SwigiFontServerToiBase(void *ptr) {
    iFontServer *src;
    iBase *dest;
    src = (iFontServer *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iFontServer_LoadFont(_swigobj,_swigarg0)  (_swigobj->LoadFont(_swigarg0))
static int
wrap_iFontServer_LoadFont(lua_State *L)
{
    iFont * _result;
    iFontServer * _arg0;
    char * _arg1;

{_arg0 = (iFontServer *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
	lua_settop(L, 0);
    _result = (iFont *)iFontServer_LoadFont(_arg0,_arg1);
{LS_luaL_pushuserpointer(L, _result, iFont_tag);}
	return 1;
}

#define iFontServer_GetFontCount(_swigobj)  (_swigobj->GetFontCount())
static int
wrap_iFontServer_GetFontCount(lua_State *L)
{
    int  _result;
    iFontServer * _arg0;

{_arg0 = (iFontServer *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iFontServer_GetFontCount(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iFontServer_GetFont(_swigobj,_swigarg0)  (_swigobj->GetFont(_swigarg0))
static int
wrap_iFontServer_GetFont(lua_State *L)
{
    iFont * _result;
    iFontServer * _arg0;
    int  _arg1;

{_arg0 = (iFontServer *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (iFont *)iFontServer_GetFont(_arg0,_arg1);
{LS_luaL_pushuserpointer(L, _result, iFont_tag);}
	return 1;
}

static void *SwigiGraphics2DToiBase(void *ptr) {
    iGraphics2D *src;
    iBase *dest;
    src = (iGraphics2D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iGraphics2D_Open(_swigobj)  (_swigobj->Open())
static int
wrap_iGraphics2D_Open(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_Open(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_Close(_swigobj)  (_swigobj->Close())
static int
wrap_iGraphics2D_Close(lua_State *L)
{
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iGraphics2D_Close(_arg0);
	return 0;
}

#define iGraphics2D_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int
wrap_iGraphics2D_GetWidth(lua_State *L)
{
    int  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iGraphics2D_GetWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics2D_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int
wrap_iGraphics2D_GetHeight(lua_State *L)
{
    int  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iGraphics2D_GetHeight(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics2D_GetFullScreen(_swigobj)  (_swigobj->GetFullScreen())
static int
wrap_iGraphics2D_GetFullScreen(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_GetFullScreen(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_GetPage(_swigobj)  (_swigobj->GetPage())
static int
wrap_iGraphics2D_GetPage(lua_State *L)
{
    int  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iGraphics2D_GetPage(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics2D_DoubleBuffer(_swigobj,_swigarg0)  (_swigobj->DoubleBuffer(_swigarg0))
static int
wrap_iGraphics2D_DoubleBuffer(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;
    bool  _arg1;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{
    if( (lua_isnull(L, 2)) || (lua_isnil(L, 2)) ) {
	_arg1 = 0;
    } else if (lua_isnumber(L, 2)) {
	_arg1 = (bool)lua_tonumber(L, 2);
    } else {
	_arg1 = 1;
    }
}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_DoubleBuffer(_arg0,_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_GetDoubleBufferState(_swigobj)  (_swigobj->GetDoubleBufferState())
static int
wrap_iGraphics2D_GetDoubleBufferState(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_GetDoubleBufferState(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_GetPixelFormat(_swigobj)  (_swigobj->GetPixelFormat())
static int
wrap_iGraphics2D_GetPixelFormat(lua_State *L)
{
    csPixelFormat * _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (csPixelFormat *)iGraphics2D_GetPixelFormat(_arg0);
{LS_luaL_pushuserpointer(L, _result, csPixelFormat_tag);}
	return 1;
}

#define iGraphics2D_GetPixelBytes(_swigobj)  (_swigobj->GetPixelBytes())
static int
wrap_iGraphics2D_GetPixelBytes(lua_State *L)
{
    int  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iGraphics2D_GetPixelBytes(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics2D_GetPalEntryCount(_swigobj)  (_swigobj->GetPalEntryCount())
static int
wrap_iGraphics2D_GetPalEntryCount(lua_State *L)
{
    int  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iGraphics2D_GetPalEntryCount(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics2D_GetPalette(_swigobj)  (_swigobj->GetPalette())
static int
wrap_iGraphics2D_GetPalette(lua_State *L)
{
    csRGBpixel * _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (csRGBpixel *)iGraphics2D_GetPalette(_arg0);
{LS_luaL_pushuserpointer(L, _result, csRGBpixel_tag);}
	return 1;
}

#define iGraphics2D_SetRGB(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->SetRGB(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iGraphics2D_SetRGB(lua_State *L)
{
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
	lua_settop(L, 0);
    iGraphics2D_SetRGB(_arg0,_arg1,_arg2,_arg3,_arg4);
	return 0;
}

#define iGraphics2D_SetClipRect(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->SetClipRect(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iGraphics2D_SetClipRect(lua_State *L)
{
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
	lua_settop(L, 0);
    iGraphics2D_SetClipRect(_arg0,_arg1,_arg2,_arg3,_arg4);
	return 0;
}

#define iGraphics2D_GetClipRect(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->GetClipRect(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iGraphics2D_GetClipRect(lua_State *L)
{
    iGraphics2D * _arg0;
    int * _arg1;
    int * _arg2;
    int * _arg3;
    int * _arg4;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (int *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (int *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (int *)LS_luaL_check_userdata(L, 4);}
{_arg4 = (int *)LS_luaL_check_userdata(L, 5);}
	lua_settop(L, 0);
    iGraphics2D_GetClipRect(_arg0,*_arg1,*_arg2,*_arg3,*_arg4);
	return 0;
}

#define iGraphics2D_BeginDraw(_swigobj)  (_swigobj->BeginDraw())
static int
wrap_iGraphics2D_BeginDraw(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_BeginDraw(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_FinishDraw(_swigobj)  (_swigobj->FinishDraw())
static int
wrap_iGraphics2D_FinishDraw(lua_State *L)
{
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iGraphics2D_FinishDraw(_arg0);
	return 0;
}

#define iGraphics2D_Print(_swigobj,_swigarg0)  (_swigobj->Print(_swigarg0))
static int
wrap_iGraphics2D_Print(lua_State *L)
{
    iGraphics2D * _arg0;
    csRect * _arg1;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csRect *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics2D_Print(_arg0,_arg1);
	return 0;
}

#define iGraphics2D_Clear(_swigobj,_swigarg0)  (_swigobj->Clear(_swigarg0))
static int
wrap_iGraphics2D_Clear(lua_State *L)
{
    iGraphics2D * _arg0;
    int  _arg1;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    iGraphics2D_Clear(_arg0,_arg1);
	return 0;
}

#define iGraphics2D_ClearAll(_swigobj,_swigarg0)  (_swigobj->ClearAll(_swigarg0))
static int
wrap_iGraphics2D_ClearAll(lua_State *L)
{
    iGraphics2D * _arg0;
    int  _arg1;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    iGraphics2D_ClearAll(_arg0,_arg1);
	return 0;
}

#define iGraphics2D_DrawLine(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->DrawLine(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static int
wrap_iGraphics2D_DrawLine(lua_State *L)
{
    iGraphics2D * _arg0;
    float  _arg1;
    float  _arg2;
    float  _arg3;
    float  _arg4;
    int  _arg5;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
{_arg2 = ( float )luaL_check_number(L, 3);}
{_arg3 = ( float )luaL_check_number(L, 4);}
{_arg4 = ( float )luaL_check_number(L, 5);}
{_arg5 = ( int )luaL_check_long(L, 6);}
	lua_settop(L, 0);
    iGraphics2D_DrawLine(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
	return 0;
}

#define iGraphics2D_DrawBox(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->DrawBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static int
wrap_iGraphics2D_DrawBox(lua_State *L)
{
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
{_arg5 = ( int )luaL_check_long(L, 6);}
	lua_settop(L, 0);
    iGraphics2D_DrawBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
	return 0;
}

#define iGraphics2D_ClipLine(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7)  (_swigobj->ClipLine(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static int
wrap_iGraphics2D_ClipLine(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    float * _arg4;
    int  _arg5;
    int  _arg6;
    int  _arg7;
    int  _arg8;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (float *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (float *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (float *)LS_luaL_check_userdata(L, 4);}
{_arg4 = (float *)LS_luaL_check_userdata(L, 5);}
{_arg5 = ( int )luaL_check_long(L, 6);}
{_arg6 = ( int )luaL_check_long(L, 7);}
{_arg7 = ( int )luaL_check_long(L, 8);}
{_arg8 = ( int )luaL_check_long(L, 9);}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_ClipLine(_arg0,*_arg1,*_arg2,*_arg3,*_arg4,_arg5,_arg6,_arg7,_arg8);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_DrawPixel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->DrawPixel(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iGraphics2D_DrawPixel(lua_State *L)
{
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
	lua_settop(L, 0);
    iGraphics2D_DrawPixel(_arg0,_arg1,_arg2,_arg3);
	return 0;
}

#define iGraphics2D_GetPixelAt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetPixelAt(_swigarg0,_swigarg1))
static int
wrap_iGraphics2D_GetPixelAt(lua_State *L)
{
    void * _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    _result = (void *)iGraphics2D_GetPixelAt(_arg0,_arg1,_arg2);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iGraphics2D_GetPixel(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->GetPixel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static int
wrap_iGraphics2D_GetPixel(lua_State *L)
{
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    unsigned char * _arg3;
    unsigned char * _arg4;
    unsigned char * _arg5;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = (unsigned char *)LS_luaL_check_userdata(L, 4);}
{_arg4 = (unsigned char *)LS_luaL_check_userdata(L, 5);}
{_arg5 = (unsigned char *)LS_luaL_check_userdata(L, 6);}
	lua_settop(L, 0);
    iGraphics2D_GetPixel(_arg0,_arg1,_arg2,*_arg3,*_arg4,*_arg5);
	return 0;
}

#define iGraphics2D_SaveArea(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->SaveArea(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iGraphics2D_SaveArea(lua_State *L)
{
    csImageArea * _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
	lua_settop(L, 0);
    _result = (csImageArea *)iGraphics2D_SaveArea(_arg0,_arg1,_arg2,_arg3,_arg4);
{LS_luaL_pushuserpointer(L, _result, csImageArea_tag);}
	return 1;
}

#define iGraphics2D_RestoreArea(_swigobj,_swigarg0,_swigarg1)  (_swigobj->RestoreArea(_swigarg0,_swigarg1))
static int
wrap_iGraphics2D_RestoreArea(lua_State *L)
{
    iGraphics2D * _arg0;
    csImageArea * _arg1;
    bool  _arg2;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csImageArea *)LS_luaL_check_userdata(L, 2);}
{
    if( (lua_isnull(L, 3)) || (lua_isnil(L, 3)) ) {
	_arg2 = 0;
    } else if (lua_isnumber(L, 3)) {
	_arg2 = (bool)lua_tonumber(L, 3);
    } else {
	_arg2 = 1;
    }
}
	lua_settop(L, 0);
    iGraphics2D_RestoreArea(_arg0,_arg1,_arg2);
	return 0;
}

#define iGraphics2D_FreeArea(_swigobj,_swigarg0)  (_swigobj->FreeArea(_swigarg0))
static int
wrap_iGraphics2D_FreeArea(lua_State *L)
{
    iGraphics2D * _arg0;
    csImageArea * _arg1;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csImageArea *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics2D_FreeArea(_arg0,_arg1);
	return 0;
}

#define iGraphics2D_Write(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->Write(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static int
wrap_iGraphics2D_Write(lua_State *L)
{
    iGraphics2D * _arg0;
    iFont * _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;
    char * _arg6;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iFont *)LS_luaL_check_userdata(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
{_arg5 = ( int )luaL_check_long(L, 6);}
{_arg6 = (char*)luaL_opt_string(L, 7, NULL);}
	lua_settop(L, 0);
    iGraphics2D_Write(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
	return 0;
}

#define iGraphics2D_GetFontServer(_swigobj)  (_swigobj->GetFontServer())
static int
wrap_iGraphics2D_GetFontServer(lua_State *L)
{
    iFontServer * _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iFontServer *)iGraphics2D_GetFontServer(_arg0);
{LS_luaL_pushuserpointer(L, _result, iFontServer_tag);}
	return 1;
}

#define iGraphics2D_SetMousePosition(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetMousePosition(_swigarg0,_swigarg1))
static int
wrap_iGraphics2D_SetMousePosition(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_SetMousePosition(_arg0,_arg1,_arg2);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_SetMouseCursor(_swigobj,_swigarg0)  (_swigobj->SetMouseCursor(_swigarg0))
static int
wrap_iGraphics2D_SetMouseCursor(lua_State *L)
{
    bool  _result;
    iGraphics2D * _arg0;
    csMouseCursorID * _arg1;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csMouseCursorID *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    _result = (bool )iGraphics2D_SetMouseCursor(_arg0,*_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics2D_ScreenShot(_swigobj)  (_swigobj->ScreenShot())
static int
wrap_iGraphics2D_ScreenShot(lua_State *L)
{
    iImage * _result;
    iGraphics2D * _arg0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iImage *)iGraphics2D_ScreenShot(_arg0);
{LS_luaL_pushuserpointer(L, _result, iImage_tag);}
	return 1;
}

#define iGraphics2D_CreateOffScreenCanvas(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6)  (_swigobj->CreateOffScreenCanvas(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6))
static int
wrap_iGraphics2D_CreateOffScreenCanvas(lua_State *L)
{
    iGraphics2D * _result;
    iGraphics2D * _arg0;
    int  _arg1;
    int  _arg2;
    void * _arg3;
    bool  _arg4;
    csPixelFormat * _arg5;
    csRGBpixel * _arg6 = (csRGBpixel *) NULL;
    int  _arg7 = (int ) 0;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = (void *)LS_luaL_check_userdata(L, 4);}
{
    if( (lua_isnull(L, 5)) || (lua_isnil(L, 5)) ) {
	_arg4 = 0;
    } else if (lua_isnumber(L, 5)) {
	_arg4 = (bool)lua_tonumber(L, 5);
    } else {
	_arg4 = 1;
    }
}
{_arg5 = (csPixelFormat *)LS_luaL_check_userdata(L, 6);}
{_arg6 = ( csRGBpixel *)LS_luaL_opt_userdata(L, 7, NULL);}
{_arg7 = ( int )luaL_opt_long(L, 8, (long)0);}
	lua_settop(L, 0);
    _result = (iGraphics2D *)iGraphics2D_CreateOffScreenCanvas(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);
{LS_luaL_pushuserpointer(L, _result, iGraphics2D_tag);}
	return 1;
}

#define iGraphics2D_AllowResize(_swigobj,_swigarg0)  (_swigobj->AllowResize(_swigarg0))
static int
wrap_iGraphics2D_AllowResize(lua_State *L)
{
    iGraphics2D * _arg0;
    bool  _arg1;

{_arg0 = (iGraphics2D *)LS_luaL_check_userdata(L, 1);}
{
    if( (lua_isnull(L, 2)) || (lua_isnil(L, 2)) ) {
	_arg1 = 0;
    } else if (lua_isnumber(L, 2)) {
	_arg1 = (bool)lua_tonumber(L, 2);
    } else {
	_arg1 = 1;
    }
}
	lua_settop(L, 0);
    iGraphics2D_AllowResize(_arg0,_arg1);
	return 0;
}

static void *SwigiHaloToiBase(void *ptr) {
    iHalo *src;
    iBase *dest;
    src = (iHalo *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iHalo_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int
wrap_iHalo_GetWidth(lua_State *L)
{
    int  _result;
    iHalo * _arg0;

{_arg0 = (iHalo *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iHalo_GetWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iHalo_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int
wrap_iHalo_GetHeight(lua_State *L)
{
    int  _result;
    iHalo * _arg0;

{_arg0 = (iHalo *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iHalo_GetHeight(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iHalo_SetColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->SetColor(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iHalo_SetColor(lua_State *L)
{
    iHalo * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;

{_arg0 = (iHalo *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (float *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (float *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (float *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    iHalo_SetColor(_arg0,*_arg1,*_arg2,*_arg3);
	return 0;
}

#define iHalo_GetColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetColor(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iHalo_GetColor(lua_State *L)
{
    iHalo * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;

{_arg0 = (iHalo *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (float *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (float *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (float *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    iHalo_GetColor(_arg0,*_arg1,*_arg2,*_arg3);
	return 0;
}

#define iHalo_Draw(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6)  (_swigobj->Draw(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6))
static int
wrap_iHalo_Draw(lua_State *L)
{
    iHalo * _arg0;
    float  _arg1;
    float  _arg2;
    float  _arg3;
    float  _arg4;
    float  _arg5;
    csVector2 * _arg6;
    int  _arg7;

{_arg0 = (iHalo *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
{_arg2 = ( float )luaL_check_number(L, 3);}
{_arg3 = ( float )luaL_check_number(L, 4);}
{_arg4 = ( float )luaL_check_number(L, 5);}
{_arg5 = ( float )luaL_check_number(L, 6);}
{_arg6 = (csVector2 *)LS_luaL_check_userdata(L, 7);}
{_arg7 = ( int )luaL_check_long(L, 8);}
	lua_settop(L, 0);
    iHalo_Draw(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);
	return 0;
}

static void *SwigiGraphics3DToiBase(void *ptr) {
    iGraphics3D *src;
    iBase *dest;
    src = (iGraphics3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iGraphics3D_Open(_swigobj)  (_swigobj->Open())
static int
wrap_iGraphics3D_Open(lua_State *L)
{
    bool  _result;
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )iGraphics3D_Open(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics3D_Close(_swigobj)  (_swigobj->Close())
static int
wrap_iGraphics3D_Close(lua_State *L)
{
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iGraphics3D_Close(_arg0);
	return 0;
}

#define iGraphics3D_SetDimensions(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetDimensions(_swigarg0,_swigarg1))
static int
wrap_iGraphics3D_SetDimensions(lua_State *L)
{
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    iGraphics3D_SetDimensions(_arg0,_arg1,_arg2);
	return 0;
}

#define iGraphics3D_BeginDraw(_swigobj,_swigarg0)  (_swigobj->BeginDraw(_swigarg0))
static int
wrap_iGraphics3D_BeginDraw(lua_State *L)
{
    bool  _result;
    iGraphics3D * _arg0;
    int  _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (bool )iGraphics3D_BeginDraw(_arg0,_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iGraphics3D_FinishDraw(_swigobj)  (_swigobj->FinishDraw())
static int
wrap_iGraphics3D_FinishDraw(lua_State *L)
{
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iGraphics3D_FinishDraw(_arg0);
	return 0;
}

#define iGraphics3D_Print(_swigobj,_swigarg0)  (_swigobj->Print(_swigarg0))
static int
wrap_iGraphics3D_Print(lua_State *L)
{
    iGraphics3D * _arg0;
    csRect * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csRect *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_Print(_arg0,_arg1);
	return 0;
}

#define iGraphics3D_DrawPolygon(_swigobj,_swigarg0)  (_swigobj->DrawPolygon(_swigarg0))
static int
wrap_iGraphics3D_DrawPolygon(lua_State *L)
{
    iGraphics3D * _arg0;
    G3DPolygonDP * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (G3DPolygonDP *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_DrawPolygon(_arg0,*_arg1);
	return 0;
}

#define iGraphics3D_DrawPolygonDebug(_swigobj,_swigarg0)  (_swigobj->DrawPolygonDebug(_swigarg0))
static int
wrap_iGraphics3D_DrawPolygonDebug(lua_State *L)
{
    iGraphics3D * _arg0;
    G3DPolygonDP * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (G3DPolygonDP *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_DrawPolygonDebug(_arg0,*_arg1);
	return 0;
}

#define iGraphics3D_DrawLine(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->DrawLine(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iGraphics3D_DrawLine(lua_State *L)
{
    iGraphics3D * _arg0;
    csVector3 * _arg1;
    csVector3 * _arg2;
    float  _arg3;
    int  _arg4;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csVector3 *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (csVector3 *)LS_luaL_check_userdata(L, 3);}
{_arg3 = ( float )luaL_check_number(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
	lua_settop(L, 0);
    iGraphics3D_DrawLine(_arg0,*_arg1,*_arg2,_arg3,_arg4);
	return 0;
}

#define iGraphics3D_DrawTriangleMesh(_swigobj,_swigarg0)  (_swigobj->DrawTriangleMesh(_swigarg0))
static int
wrap_iGraphics3D_DrawTriangleMesh(lua_State *L)
{
    iGraphics3D * _arg0;
    G3DTriangleMesh * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (G3DTriangleMesh *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_DrawTriangleMesh(_arg0,*_arg1);
	return 0;
}

#define iGraphics3D_DrawPolygonMesh(_swigobj,_swigarg0)  (_swigobj->DrawPolygonMesh(_swigarg0))
static int
wrap_iGraphics3D_DrawPolygonMesh(lua_State *L)
{
    iGraphics3D * _arg0;
    G3DPolygonMesh * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (G3DPolygonMesh *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_DrawPolygonMesh(_arg0,*_arg1);
	return 0;
}

#define iGraphics3D_OpenFogObject(_swigobj,_swigarg0,_swigarg1)  (_swigobj->OpenFogObject(_swigarg0,_swigarg1))
static int
wrap_iGraphics3D_OpenFogObject(lua_State *L)
{
    iGraphics3D * _arg0;
    CS_ID * _arg1;
    csFog * _arg2;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (CS_ID *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (csFog *)LS_luaL_check_userdata(L, 3);}
	lua_settop(L, 0);
    iGraphics3D_OpenFogObject(_arg0,*_arg1,_arg2);
	return 0;
}

#define iGraphics3D_DrawFogPolygon(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->DrawFogPolygon(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iGraphics3D_DrawFogPolygon(lua_State *L)
{
    iGraphics3D * _arg0;
    CS_ID * _arg1;
    G3DPolygonDFP * _arg2;
    int  _arg3;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (CS_ID *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (G3DPolygonDFP *)LS_luaL_check_userdata(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
	lua_settop(L, 0);
    iGraphics3D_DrawFogPolygon(_arg0,*_arg1,*_arg2,_arg3);
	return 0;
}

#define iGraphics3D_CloseFogObject(_swigobj,_swigarg0)  (_swigobj->CloseFogObject(_swigarg0))
static int
wrap_iGraphics3D_CloseFogObject(lua_State *L)
{
    iGraphics3D * _arg0;
    CS_ID * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (CS_ID *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_CloseFogObject(_arg0,*_arg1);
	return 0;
}

#define iGraphics3D_GetCaps(_swigobj)  (_swigobj->GetCaps())
static int
wrap_iGraphics3D_GetCaps(lua_State *L)
{
    csGraphics3DCaps * _result;
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (csGraphics3DCaps *)iGraphics3D_GetCaps(_arg0);
{LS_luaL_pushuserpointer(L, _result, csGraphics3DCaps_tag);}
	return 1;
}

#define iGraphics3D_GetZBuffAt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetZBuffAt(_swigarg0,_swigarg1))
static int
wrap_iGraphics3D_GetZBuffAt(lua_State *L)
{
    void * _result;
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    _result = (void *)iGraphics3D_GetZBuffAt(_arg0,_arg1,_arg2);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iGraphics3D_GetZBuffValue(_swigobj,_swigarg0,_swigarg1)  (_swigobj->GetZBuffValue(_swigarg0,_swigarg1))
static int
wrap_iGraphics3D_GetZBuffValue(lua_State *L)
{
    float  _result;
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    _result = (float )iGraphics3D_GetZBuffValue(_arg0,_arg1,_arg2);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics3D_DumpCache(_swigobj)  (_swigobj->DumpCache())
static int
wrap_iGraphics3D_DumpCache(lua_State *L)
{
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iGraphics3D_DumpCache(_arg0);
	return 0;
}

#define iGraphics3D_ClearCache(_swigobj)  (_swigobj->ClearCache())
static int
wrap_iGraphics3D_ClearCache(lua_State *L)
{
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iGraphics3D_ClearCache(_arg0);
	return 0;
}

#define iGraphics3D_RemoveFromCache(_swigobj,_swigarg0)  (_swigobj->RemoveFromCache(_swigarg0))
static int
wrap_iGraphics3D_RemoveFromCache(lua_State *L)
{
    iGraphics3D * _arg0;
    iPolygonTexture * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iPolygonTexture *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_RemoveFromCache(_arg0,_arg1);
	return 0;
}

#define iGraphics3D_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int
wrap_iGraphics3D_GetWidth(lua_State *L)
{
    int  _result;
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iGraphics3D_GetWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics3D_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int
wrap_iGraphics3D_GetHeight(lua_State *L)
{
    int  _result;
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iGraphics3D_GetHeight(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iGraphics3D_SetPerspectiveCenter(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetPerspectiveCenter(_swigarg0,_swigarg1))
static int
wrap_iGraphics3D_SetPerspectiveCenter(lua_State *L)
{
    iGraphics3D * _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    iGraphics3D_SetPerspectiveCenter(_arg0,_arg1,_arg2);
	return 0;
}

#define iGraphics3D_SetPerspectiveAspect(_swigobj,_swigarg0)  (_swigobj->SetPerspectiveAspect(_swigarg0))
static int
wrap_iGraphics3D_SetPerspectiveAspect(lua_State *L)
{
    iGraphics3D * _arg0;
    float  _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_SetPerspectiveAspect(_arg0,_arg1);
	return 0;
}

#define iGraphics3D_SetObjectToCamera(_swigobj,_swigarg0)  (_swigobj->SetObjectToCamera(_swigarg0))
static int
wrap_iGraphics3D_SetObjectToCamera(lua_State *L)
{
    iGraphics3D * _arg0;
    csReversibleTransform * _arg1;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csReversibleTransform *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iGraphics3D_SetObjectToCamera(_arg0,_arg1);
	return 0;
}

#define iGraphics3D_GetDriver2D(_swigobj)  (_swigobj->GetDriver2D())
static int
wrap_iGraphics3D_GetDriver2D(lua_State *L)
{
    iGraphics2D * _result;
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iGraphics2D *)iGraphics3D_GetDriver2D(_arg0);
{LS_luaL_pushuserpointer(L, _result, iGraphics2D_tag);}
	return 1;
}

#define iGraphics3D_GetTextureManager(_swigobj)  (_swigobj->GetTextureManager())
static int
wrap_iGraphics3D_GetTextureManager(lua_State *L)
{
    iTextureManager * _result;
    iGraphics3D * _arg0;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iTextureManager *)iGraphics3D_GetTextureManager(_arg0);
{LS_luaL_pushuserpointer(L, _result, iTextureManager_tag);}
	return 1;
}

#define iGraphics3D_CreateHalo(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->CreateHalo(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static int
wrap_iGraphics3D_CreateHalo(lua_State *L)
{
    iHalo * _result;
    iGraphics3D * _arg0;
    float  _arg1;
    float  _arg2;
    float  _arg3;
    unsigned char * _arg4;
    int  _arg5;
    int  _arg6;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( float )luaL_check_number(L, 2);}
{_arg2 = ( float )luaL_check_number(L, 3);}
{_arg3 = ( float )luaL_check_number(L, 4);}
{_arg4 = (unsigned char *)LS_luaL_check_userdata(L, 5);}
{_arg5 = ( int )luaL_check_long(L, 6);}
{_arg6 = ( int )luaL_check_long(L, 7);}
	lua_settop(L, 0);
    _result = (iHalo *)iGraphics3D_CreateHalo(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
{LS_luaL_pushuserpointer(L, _result, iHalo_tag);}
	return 1;
}

#define iGraphics3D_DrawPixmap(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8)  (_swigobj->DrawPixmap(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8))
static int
wrap_iGraphics3D_DrawPixmap(lua_State *L)
{
    iGraphics3D * _arg0;
    iTextureHandle * _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;
    int  _arg6;
    int  _arg7;
    int  _arg8;
    int  _arg9;

{_arg0 = (iGraphics3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iTextureHandle *)LS_luaL_check_userdata(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
{_arg5 = ( int )luaL_check_long(L, 6);}
{_arg6 = ( int )luaL_check_long(L, 7);}
{_arg7 = ( int )luaL_check_long(L, 8);}
{_arg8 = ( int )luaL_check_long(L, 9);}
{_arg9 = ( int )luaL_check_long(L, 10);}
	lua_settop(L, 0);
    iGraphics3D_DrawPixmap(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);
	return 0;
}

static void *SwigiCameraToiBase(void *ptr) {
    iCamera *src;
    iBase *dest;
    src = (iCamera *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iCamera_GetFOV(_swigobj)  (_swigobj->GetFOV())
static int
wrap_iCamera_GetFOV(lua_State *L)
{
    float  _result;
    iCamera * _arg0;

{_arg0 = (iCamera *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (float )iCamera_GetFOV(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iCamera_GetInvFOV(_swigobj)  (_swigobj->GetInvFOV())
static int
wrap_iCamera_GetInvFOV(lua_State *L)
{
    float  _result;
    iCamera * _arg0;

{_arg0 = (iCamera *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (float )iCamera_GetInvFOV(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

static void *SwigiSectorToiBase(void *ptr) {
    iSector *src;
    iBase *dest;
    src = (iSector *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static void *SwigiThingStateToiBase(void *ptr) {
    iThingState *src;
    iBase *dest;
    src = (iThingState *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iThingState_CreatePolygon(_swigobj,_swigarg0)  (_swigobj->CreatePolygon(_swigarg0))
static int
wrap_iThingState_CreatePolygon(lua_State *L)
{
    iPolygon3D * _result;
    iThingState * _arg0;
    char * _arg1;

{_arg0 = (iThingState *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
	lua_settop(L, 0);
    _result = (iPolygon3D *)iThingState_CreatePolygon(_arg0,_arg1);
{LS_luaL_pushuserpointer(L, _result, iPolygon3D_tag);}
	return 1;
}

static void *SwigiMeshObjectToiBase(void *ptr) {
    iMeshObject *src;
    iBase *dest;
    src = (iMeshObject *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static iThingState * iMeshObject_Query_iThingState(iMeshObject *self) {
      return SCF_QUERY_INTERFACE(self, iThingState);
    }
static int
wrap_iMeshObject_Query_iThingState(lua_State *L)
{
    iThingState * _result;
    iMeshObject * _arg0;

{_arg0 = (iMeshObject *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iThingState *)iMeshObject_Query_iThingState(_arg0);
{LS_luaL_pushuserpointer(L, _result, iThingState_tag);}
	return 1;
}

static void *SwigiMeshWrapperToiBase(void *ptr) {
    iMeshWrapper *src;
    iBase *dest;
    src = (iMeshWrapper *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iMeshWrapper_GetMeshObject(_swigobj)  (_swigobj->GetMeshObject())
static int
wrap_iMeshWrapper_GetMeshObject(lua_State *L)
{
    iMeshObject * _result;
    iMeshWrapper * _arg0;

{_arg0 = (iMeshWrapper *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iMeshObject *)iMeshWrapper_GetMeshObject(_arg0);
{LS_luaL_pushuserpointer(L, _result, iMeshObject_tag);}
	return 1;
}

static void *SwigiLightMapToiBase(void *ptr) {
    iLightMap *src;
    iBase *dest;
    src = (iLightMap *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iLightMap_GetMapData(_swigobj)  (_swigobj->GetMapData())
static int
wrap_iLightMap_GetMapData(lua_State *L)
{
    void * _result;
    iLightMap * _arg0;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (void *)iLightMap_GetMapData(_arg0);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iLightMap_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int
wrap_iLightMap_GetWidth(lua_State *L)
{
    int  _result;
    iLightMap * _arg0;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iLightMap_GetWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iLightMap_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int
wrap_iLightMap_GetHeight(lua_State *L)
{
    int  _result;
    iLightMap * _arg0;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iLightMap_GetHeight(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iLightMap_GetRealWidth(_swigobj)  (_swigobj->GetRealWidth())
static int
wrap_iLightMap_GetRealWidth(lua_State *L)
{
    int  _result;
    iLightMap * _arg0;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iLightMap_GetRealWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iLightMap_GetRealHeight(_swigobj)  (_swigobj->GetRealHeight())
static int
wrap_iLightMap_GetRealHeight(lua_State *L)
{
    int  _result;
    iLightMap * _arg0;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iLightMap_GetRealHeight(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iLightMap_GetCacheData(_swigobj)  (_swigobj->GetCacheData())
static int
wrap_iLightMap_GetCacheData(lua_State *L)
{
    void * _result;
    iLightMap * _arg0;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (void *)iLightMap_GetCacheData(_arg0);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iLightMap_SetCacheData(_swigobj,_swigarg0)  (_swigobj->SetCacheData(_swigarg0))
static int
wrap_iLightMap_SetCacheData(lua_State *L)
{
    iLightMap * _arg0;
    void * _arg1;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (void *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iLightMap_SetCacheData(_arg0,_arg1);
	return 0;
}

#define iLightMap_GetMeanLighting(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->GetMeanLighting(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iLightMap_GetMeanLighting(lua_State *L)
{
    iLightMap * _arg0;
    int * _arg1;
    int * _arg2;
    int * _arg3;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (int *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (int *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (int *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    iLightMap_GetMeanLighting(_arg0,*_arg1,*_arg2,*_arg3);
	return 0;
}

#define iLightMap_GetSize(_swigobj)  (_swigobj->GetSize())
static int
wrap_iLightMap_GetSize(lua_State *L)
{
    long  _result;
    iLightMap * _arg0;

{_arg0 = (iLightMap *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (long )iLightMap_GetSize(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

static void *SwigiPolygon3DToiBase(void *ptr) {
    iPolygon3D *src;
    iBase *dest;
    src = (iPolygon3D *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPolygon3D_GetLightMap(_swigobj)  (_swigobj->GetLightMap())
static int
wrap_iPolygon3D_GetLightMap(lua_State *L)
{
    iLightMap * _result;
    iPolygon3D * _arg0;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iLightMap *)iPolygon3D_GetLightMap(_arg0);
{LS_luaL_pushuserpointer(L, _result, iLightMap_tag);}
	return 1;
}

#define iPolygon3D_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
static int
wrap_iPolygon3D_GetMaterialHandle(lua_State *L)
{
    iMaterialHandle * _result;
    iPolygon3D * _arg0;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iMaterialHandle *)iPolygon3D_GetMaterialHandle(_arg0);
{LS_luaL_pushuserpointer(L, _result, iMaterialHandle_tag);}
	return 1;
}

#define iPolygon3D_SetMaterial(_swigobj,_swigarg0)  (_swigobj->SetMaterial(_swigarg0))
static int
wrap_iPolygon3D_SetMaterial(lua_State *L)
{
    iPolygon3D * _arg0;
    iMaterialWrapper * _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iMaterialWrapper *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iPolygon3D_SetMaterial(_arg0,_arg1);
	return 0;
}

#define iPolygon3D_GetVertexCount(_swigobj)  (_swigobj->GetVertexCount())
static int
wrap_iPolygon3D_GetVertexCount(lua_State *L)
{
    int  _result;
    iPolygon3D * _arg0;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygon3D_GetVertexCount(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygon3D_GetVertex(_swigobj,_swigarg0)  (_swigobj->GetVertex(_swigarg0))
static int
wrap_iPolygon3D_GetVertex(lua_State *L)
{
    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    csVector3 & _result_ref = iPolygon3D_GetVertex(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{LS_luaL_pushuserpointer(L, _result, csVector3_tag);}
	return 1;
}

#define iPolygon3D_GetVertexW(_swigobj,_swigarg0)  (_swigobj->GetVertexW(_swigarg0))
static int
wrap_iPolygon3D_GetVertexW(lua_State *L)
{
    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    csVector3 & _result_ref = iPolygon3D_GetVertexW(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{LS_luaL_pushuserpointer(L, _result, csVector3_tag);}
	return 1;
}

#define iPolygon3D_GetVertexC(_swigobj,_swigarg0)  (_swigobj->GetVertexC(_swigarg0))
static int
wrap_iPolygon3D_GetVertexC(lua_State *L)
{
    csVector3 * _result;
    iPolygon3D * _arg0;
    int  _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    csVector3 & _result_ref = iPolygon3D_GetVertexC(_arg0,_arg1);
    _result = (csVector3 *) &_result_ref;
{LS_luaL_pushuserpointer(L, _result, csVector3_tag);}
	return 1;
}

#define iPolygon3D_CreateVertexByIndex(_swigobj,_swigarg0)  (_swigobj->CreateVertex(_swigarg0))
static int
wrap_iPolygon3D_CreateVertexByIndex(lua_State *L)
{
    int  _result;
    iPolygon3D * _arg0;
    int  _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (int )iPolygon3D_CreateVertexByIndex(_arg0,_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygon3D_CreateVertex(_swigobj,_swigarg0)  (_swigobj->CreateVertex(_swigarg0))
static int
wrap_iPolygon3D_CreateVertex(lua_State *L)
{
    int  _result;
    iPolygon3D * _arg0;
    csVector3 * _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csVector3 *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    _result = (int )iPolygon3D_CreateVertex(_arg0,*_arg1);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygon3D_GetAlpha(_swigobj)  (_swigobj->GetAlpha())
static int
wrap_iPolygon3D_GetAlpha(lua_State *L)
{
    int  _result;
    iPolygon3D * _arg0;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygon3D_GetAlpha(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygon3D_SetAlpha(_swigobj,_swigarg0)  (_swigobj->SetAlpha(_swigarg0))
static int
wrap_iPolygon3D_SetAlpha(lua_State *L)
{
    iPolygon3D * _arg0;
    int  _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    iPolygon3D_SetAlpha(_arg0,_arg1);
	return 0;
}

#define iPolygon3D_CreatePlane(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreatePlane(_swigarg0,_swigarg1))
static int
wrap_iPolygon3D_CreatePlane(lua_State *L)
{
    iPolygon3D * _arg0;
    csVector3 * _arg1;
    csMatrix3 * _arg2;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csVector3 *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (csMatrix3 *)LS_luaL_check_userdata(L, 3);}
	lua_settop(L, 0);
    iPolygon3D_CreatePlane(_arg0,*_arg1,*_arg2);
	return 0;
}

#define iPolygon3D_SetPlane(_swigobj,_swigarg0)  (_swigobj->SetPlane(_swigarg0))
static int
wrap_iPolygon3D_SetPlane(lua_State *L)
{
    bool  _result;
    iPolygon3D * _arg0;
    char * _arg1;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
	lua_settop(L, 0);
    _result = (bool )iPolygon3D_SetPlane(_arg0,_arg1);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iPolygon3D_SetTextureSpace(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->SetTextureSpace(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iPolygon3D_SetTextureSpace(lua_State *L)
{
    iPolygon3D * _arg0;
    csVector3 * _arg1;
    csVector3 * _arg2;
    float  _arg3;

{_arg0 = (iPolygon3D *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (csVector3 *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (csVector3 *)LS_luaL_check_userdata(L, 3);}
{_arg3 = ( float )luaL_check_number(L, 4);}
	lua_settop(L, 0);
    iPolygon3D_SetTextureSpace(_arg0,*_arg1,*_arg2,_arg3);
	return 0;
}

static void *SwigiImageToiBase(void *ptr) {
    iImage *src;
    iBase *dest;
    src = (iImage *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iImage_GetImageData(_swigobj)  (_swigobj->GetImageData())
static int
wrap_iImage_GetImageData(lua_State *L)
{
    void * _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (void *)iImage_GetImageData(_arg0);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iImage_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int
wrap_iImage_GetWidth(lua_State *L)
{
    int  _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iImage_GetWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iImage_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int
wrap_iImage_GetHeight(lua_State *L)
{
    int  _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iImage_GetHeight(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iImage_GetSize(_swigobj)  (_swigobj->GetSize())
static int
wrap_iImage_GetSize(lua_State *L)
{
    int  _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iImage_GetSize(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iImage_Rescale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Rescale(_swigarg0,_swigarg1))
static int
wrap_iImage_Rescale(lua_State *L)
{
    iImage * _arg0;
    int  _arg1;
    int  _arg2;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    iImage_Rescale(_arg0,_arg1,_arg2);
	return 0;
}

#define iImage_MipMap(_swigobj,_swigarg0,_swigarg1)  (_swigobj->MipMap(_swigarg0,_swigarg1))
static int
wrap_iImage_MipMap(lua_State *L)
{
    iImage * _result;
    iImage * _arg0;
    int  _arg1;
    csRGBpixel * _arg2;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = (csRGBpixel *)LS_luaL_check_userdata(L, 3);}
	lua_settop(L, 0);
    _result = (iImage *)iImage_MipMap(_arg0,_arg1,_arg2);
{LS_luaL_pushuserpointer(L, _result, iImage_tag);}
	return 1;
}

#define iImage_SetName(_swigobj,_swigarg0)  (_swigobj->SetName(_swigarg0))
static int
wrap_iImage_SetName(lua_State *L)
{
    iImage * _arg0;
    char * _arg1;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
	lua_settop(L, 0);
    iImage_SetName(_arg0,_arg1);
	return 0;
}

#define iImage_GetName(_swigobj)  (_swigobj->GetName())
static int
wrap_iImage_GetName(lua_State *L)
{
    char * _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (char *)iImage_GetName(_arg0);
{LS_luaL_pushstringpointer(L, _result);}
	return 1;
}

#define iImage_GetFormat(_swigobj)  (_swigobj->GetFormat())
static int
wrap_iImage_GetFormat(lua_State *L)
{
    int  _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iImage_GetFormat(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iImage_GetPalette(_swigobj)  (_swigobj->GetPalette())
static int
wrap_iImage_GetPalette(lua_State *L)
{
    csRGBpixel * _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (csRGBpixel *)iImage_GetPalette(_arg0);
{LS_luaL_pushuserpointer(L, _result, csRGBpixel_tag);}
	return 1;
}

#define iImage_GetAlpha(_swigobj)  (_swigobj->GetAlpha())
static int
wrap_iImage_GetAlpha(lua_State *L)
{
    void * _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (void *)iImage_GetAlpha(_arg0);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iImage_SetFormat(_swigobj,_swigarg0)  (_swigobj->SetFormat(_swigarg0))
static int
wrap_iImage_SetFormat(lua_State *L)
{
    iImage * _arg0;
    int  _arg1;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    iImage_SetFormat(_arg0,_arg1);
	return 0;
}

#define iImage_Clone(_swigobj)  (_swigobj->Clone())
static int
wrap_iImage_Clone(lua_State *L)
{
    iImage * _result;
    iImage * _arg0;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iImage *)iImage_Clone(_arg0);
{LS_luaL_pushuserpointer(L, _result, iImage_tag);}
	return 1;
}

#define iImage_Crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->Crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iImage_Crop(lua_State *L)
{
    iImage * _result;
    iImage * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;

{_arg0 = (iImage *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
	lua_settop(L, 0);
    _result = (iImage *)iImage_Crop(_arg0,_arg1,_arg2,_arg3,_arg4);
{LS_luaL_pushuserpointer(L, _result, iImage_tag);}
	return 1;
}

static void *SwigiTextureManagerToiBase(void *ptr) {
    iTextureManager *src;
    iBase *dest;
    src = (iTextureManager *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iTextureManager_RegisterTexture(_swigobj,_swigarg0,_swigarg1)  (_swigobj->RegisterTexture(_swigarg0,_swigarg1))
static int
wrap_iTextureManager_RegisterTexture(lua_State *L)
{
    iTextureHandle * _result;
    iTextureManager * _arg0;
    iImage * _arg1;
    int  _arg2;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iImage *)LS_luaL_check_userdata(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
	lua_settop(L, 0);
    _result = (iTextureHandle *)iTextureManager_RegisterTexture(_arg0,_arg1,_arg2);
{LS_luaL_pushuserpointer(L, _result, iTextureHandle_tag);}
	return 1;
}

#define iTextureManager_PrepareTextures(_swigobj)  (_swigobj->PrepareTextures())
static int
wrap_iTextureManager_PrepareTextures(lua_State *L)
{
    iTextureManager * _arg0;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iTextureManager_PrepareTextures(_arg0);
	return 0;
}

#define iTextureManager_FreeImages(_swigobj)  (_swigobj->FreeImages())
static int
wrap_iTextureManager_FreeImages(lua_State *L)
{
    iTextureManager * _arg0;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iTextureManager_FreeImages(_arg0);
	return 0;
}

#define iTextureManager_ResetPalette(_swigobj)  (_swigobj->ResetPalette())
static int
wrap_iTextureManager_ResetPalette(lua_State *L)
{
    iTextureManager * _arg0;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iTextureManager_ResetPalette(_arg0);
	return 0;
}

#define iTextureManager_ReserveColor(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->ReserveColor(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iTextureManager_ReserveColor(lua_State *L)
{
    iTextureManager * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
	lua_settop(L, 0);
    iTextureManager_ReserveColor(_arg0,_arg1,_arg2,_arg3);
	return 0;
}

#define iTextureManager_FindRGB(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->FindRGB(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iTextureManager_FindRGB(lua_State *L)
{
    int  _result;
    iTextureManager * _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = ( int )luaL_check_long(L, 3);}
{_arg3 = ( int )luaL_check_long(L, 4);}
	lua_settop(L, 0);
    _result = (int )iTextureManager_FindRGB(_arg0,_arg1,_arg2,_arg3);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iTextureManager_SetPalette(_swigobj)  (_swigobj->SetPalette())
static int
wrap_iTextureManager_SetPalette(lua_State *L)
{
    iTextureManager * _arg0;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iTextureManager_SetPalette(_arg0);
	return 0;
}

#define iTextureManager_SetVerbose(_swigobj,_swigarg0)  (_swigobj->SetVerbose(_swigarg0))
static int
wrap_iTextureManager_SetVerbose(lua_State *L)
{
    iTextureManager * _arg0;
    bool  _arg1;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
{
    if( (lua_isnull(L, 2)) || (lua_isnil(L, 2)) ) {
	_arg1 = 0;
    } else if (lua_isnumber(L, 2)) {
	_arg1 = (bool)lua_tonumber(L, 2);
    } else {
	_arg1 = 1;
    }
}
	lua_settop(L, 0);
    iTextureManager_SetVerbose(_arg0,_arg1);
	return 0;
}

#define iTextureManager_GetTextureFormat(_swigobj)  (_swigobj->GetTextureFormat())
static int
wrap_iTextureManager_GetTextureFormat(lua_State *L)
{
    int  _result;
    iTextureManager * _arg0;

{_arg0 = (iTextureManager *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iTextureManager_GetTextureFormat(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

static void *SwigiPolygonTextureToiBase(void *ptr) {
    iPolygonTexture *src;
    iBase *dest;
    src = (iPolygonTexture *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iPolygonTexture_GetMaterialHandle(_swigobj)  (_swigobj->GetMaterialHandle())
static int
wrap_iPolygonTexture_GetMaterialHandle(lua_State *L)
{
    iMaterialHandle * _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iMaterialHandle *)iPolygonTexture_GetMaterialHandle(_arg0);
{LS_luaL_pushuserpointer(L, _result, iMaterialHandle_tag);}
	return 1;
}

#define iPolygonTexture_GetFDU(_swigobj)  (_swigobj->GetFDU())
static int
wrap_iPolygonTexture_GetFDU(lua_State *L)
{
    float  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (float )iPolygonTexture_GetFDU(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetFDV(_swigobj)  (_swigobj->GetFDV())
static int
wrap_iPolygonTexture_GetFDV(lua_State *L)
{
    float  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (float )iPolygonTexture_GetFDV(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetWidth(_swigobj)  (_swigobj->GetWidth())
static int
wrap_iPolygonTexture_GetWidth(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetHeight(_swigobj)  (_swigobj->GetHeight())
static int
wrap_iPolygonTexture_GetHeight(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetHeight(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetShiftU(_swigobj)  (_swigobj->GetShiftU())
static int
wrap_iPolygonTexture_GetShiftU(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetShiftU(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetIMinU(_swigobj)  (_swigobj->GetIMinU())
static int
wrap_iPolygonTexture_GetIMinU(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetIMinU(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetIMinV(_swigobj)  (_swigobj->GetIMinV())
static int
wrap_iPolygonTexture_GetIMinV(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetIMinV(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetTextureBox(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->GetTextureBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iPolygonTexture_GetTextureBox(lua_State *L)
{
    iPolygonTexture * _arg0;
    float * _arg1;
    float * _arg2;
    float * _arg3;
    float * _arg4;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (float *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (float *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (float *)LS_luaL_check_userdata(L, 4);}
{_arg4 = (float *)LS_luaL_check_userdata(L, 5);}
	lua_settop(L, 0);
    iPolygonTexture_GetTextureBox(_arg0,*_arg1,*_arg2,*_arg3,*_arg4);
	return 0;
}

#define iPolygonTexture_GetOriginalWidth(_swigobj)  (_swigobj->GetOriginalWidth())
static int
wrap_iPolygonTexture_GetOriginalWidth(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetOriginalWidth(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetPolygon(_swigobj)  (_swigobj->GetPolygon())
static int
wrap_iPolygonTexture_GetPolygon(lua_State *L)
{
    iPolygon3D * _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iPolygon3D *)iPolygonTexture_GetPolygon(_arg0);
{LS_luaL_pushuserpointer(L, _result, iPolygon3D_tag);}
	return 1;
}

#define iPolygonTexture_DynamicLightsDirty(_swigobj)  (_swigobj->DynamicLightsDirty())
static int
wrap_iPolygonTexture_DynamicLightsDirty(lua_State *L)
{
    bool  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )iPolygonTexture_DynamicLightsDirty(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iPolygonTexture_RecalculateDynamicLights(_swigobj)  (_swigobj->RecalculateDynamicLights())
static int
wrap_iPolygonTexture_RecalculateDynamicLights(lua_State *L)
{
    bool  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (bool )iPolygonTexture_RecalculateDynamicLights(_arg0);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iPolygonTexture_GetLightMap(_swigobj)  (_swigobj->GetLightMap())
static int
wrap_iPolygonTexture_GetLightMap(lua_State *L)
{
    iLightMap * _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iLightMap *)iPolygonTexture_GetLightMap(_arg0);
{LS_luaL_pushuserpointer(L, _result, iLightMap_tag);}
	return 1;
}

#define iPolygonTexture_GetLightCellSize(_swigobj)  (_swigobj->GetLightCellSize())
static int
wrap_iPolygonTexture_GetLightCellSize(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetLightCellSize(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetLightCellShift(_swigobj)  (_swigobj->GetLightCellShift())
static int
wrap_iPolygonTexture_GetLightCellShift(lua_State *L)
{
    int  _result;
    iPolygonTexture * _arg0;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iPolygonTexture_GetLightCellShift(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iPolygonTexture_GetCacheData(_swigobj,_swigarg0)  (_swigobj->GetCacheData(_swigarg0))
static int
wrap_iPolygonTexture_GetCacheData(lua_State *L)
{
    void * _result;
    iPolygonTexture * _arg0;
    int  _arg1;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (void *)iPolygonTexture_GetCacheData(_arg0,_arg1);
{LS_luaL_pushpointer(L, _result);}
	return 1;
}

#define iPolygonTexture_SetCacheData(_swigobj,_swigarg0,_swigarg1)  (_swigobj->SetCacheData(_swigarg0,_swigarg1))
static int
wrap_iPolygonTexture_SetCacheData(lua_State *L)
{
    iPolygonTexture * _arg0;
    int  _arg1;
    void * _arg2;

{_arg0 = (iPolygonTexture *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = (void *)LS_luaL_check_userdata(L, 3);}
	lua_settop(L, 0);
    iPolygonTexture_SetCacheData(_arg0,_arg1,_arg2);
	return 0;
}

static void *SwigiCameraPositionToiBase(void *ptr) {
    iCameraPosition *src;
    iBase *dest;
    src = (iCameraPosition *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static void *SwigiSectorListToiBase(void *ptr) {
    iSectorList *src;
    iBase *dest;
    src = (iSectorList *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iSectorList_GetSectorCount(_swigobj)  (_swigobj->GetSectorCount())
static int
wrap_iSectorList_GetSectorCount(lua_State *L)
{
    int  _result;
    iSectorList * _arg0;

{_arg0 = (iSectorList *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iSectorList_GetSectorCount(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iSectorList_GetSector(_swigobj,_swigarg0)  (_swigobj->GetSector(_swigarg0))
static int
wrap_iSectorList_GetSector(lua_State *L)
{
    iSector * _result;
    iSectorList * _arg0;
    int  _arg1;

{_arg0 = (iSectorList *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
	lua_settop(L, 0);
    _result = (iSector *)iSectorList_GetSector(_arg0,_arg1);
{LS_luaL_pushuserpointer(L, _result, iSector_tag);}
	return 1;
}

#define iSectorList_AddSector(_swigobj,_swigarg0)  (_swigobj->AddSector(_swigarg0))
static int
wrap_iSectorList_AddSector(lua_State *L)
{
    iSectorList * _arg0;
    iSector * _arg1;

{_arg0 = (iSectorList *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iSector *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iSectorList_AddSector(_arg0,_arg1);
	return 0;
}

#define iSectorList_RemoveSector(_swigobj,_swigarg0)  (_swigobj->RemoveSector(_swigarg0))
static int
wrap_iSectorList_RemoveSector(lua_State *L)
{
    iSectorList * _arg0;
    iSector * _arg1;

{_arg0 = (iSectorList *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iSector *)LS_luaL_check_userdata(L, 2);}
	lua_settop(L, 0);
    iSectorList_RemoveSector(_arg0,_arg1);
	return 0;
}

#define iSectorList_FindByName(_swigobj,_swigarg0)  (_swigobj->FindByName(_swigarg0))
static int
wrap_iSectorList_FindByName(lua_State *L)
{
    iSector * _result;
    iSectorList * _arg0;
    char * _arg1;

{_arg0 = (iSectorList *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
	lua_settop(L, 0);
    _result = (iSector *)iSectorList_FindByName(_arg0,_arg1);
{LS_luaL_pushuserpointer(L, _result, iSector_tag);}
	return 1;
}

static void *SwigiEngineToiBase(void *ptr) {
    iEngine *src;
    iBase *dest;
    src = (iEngine *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

#define iEngine_GetTextureFormat(_swigobj)  (_swigobj->GetTextureFormat())
static int
wrap_iEngine_GetTextureFormat(lua_State *L)
{
    int  _result;
    iEngine * _arg0;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (int )iEngine_GetTextureFormat(_arg0);
{lua_pushnumber(L, (double)_result);}
	return 1;
}

#define iEngine_DeleteAll(_swigobj)  (_swigobj->DeleteAll())
static int
wrap_iEngine_DeleteAll(lua_State *L)
{
    iEngine * _arg0;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    iEngine_DeleteAll(_arg0);
	return 0;
}

#define iEngine_CreateTexture(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->CreateTexture(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static int
wrap_iEngine_CreateTexture(lua_State *L)
{
    iTextureWrapper * _result;
    iEngine * _arg0;
    char * _arg1;
    char * _arg2;
    csColor * _arg3;
    int  _arg4;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{_arg2 = (char*)luaL_opt_string(L, 3, NULL);}
{_arg3 = (csColor *)LS_luaL_check_userdata(L, 4);}
{_arg4 = ( int )luaL_check_long(L, 5);}
	lua_settop(L, 0);
    _result = (iTextureWrapper *)iEngine_CreateTexture(_arg0,_arg1,_arg2,_arg3,_arg4);
{LS_luaL_pushuserpointer(L, _result, iTextureWrapper_tag);}
	return 1;
}

#define iEngine_CreateCameraPosition(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->CreateCameraPosition(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static int
wrap_iEngine_CreateCameraPosition(lua_State *L)
{
    iCameraPosition * _result;
    iEngine * _arg0;
    char * _arg1;
    char * _arg2;
    csVector3 * _arg3;
    csVector3 * _arg4;
    csVector3 * _arg5;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{_arg2 = (char*)luaL_opt_string(L, 3, NULL);}
{_arg3 = (csVector3 *)LS_luaL_check_userdata(L, 4);}
{_arg4 = (csVector3 *)LS_luaL_check_userdata(L, 5);}
{_arg5 = (csVector3 *)LS_luaL_check_userdata(L, 6);}
	lua_settop(L, 0);
    _result = (iCameraPosition *)iEngine_CreateCameraPosition(_arg0,_arg1,_arg2,*_arg3,*_arg4,*_arg5);
{LS_luaL_pushuserpointer(L, _result, iCameraPosition_tag);}
	return 1;
}

#define iEngine_CreatePlane(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->CreatePlane(_swigarg0,_swigarg1,_swigarg2))
static int
wrap_iEngine_CreatePlane(lua_State *L)
{
    bool  _result;
    iEngine * _arg0;
    char * _arg1;
    csVector3 * _arg2;
    csMatrix3 * _arg3;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{_arg2 = (csVector3 *)LS_luaL_check_userdata(L, 3);}
{_arg3 = (csMatrix3 *)LS_luaL_check_userdata(L, 4);}
	lua_settop(L, 0);
    _result = (bool )iEngine_CreatePlane(_arg0,_arg1,*_arg2,*_arg3);
{
    if(_result) {
	lua_pushnumber(L, (double)1);
    } else {
	lua_pushnil(L);
    }
}
	return 1;
}

#define iEngine_CreateSector(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreateSector(_swigarg0,_swigarg1))
static int
wrap_iEngine_CreateSector(lua_State *L)
{
    iSector * _result;
    iEngine * _arg0;
    char * _arg1;
    bool  _arg2 = (bool ) true;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{
    if(lua_isnull(L, 3)) {
	_arg2 = (bool)true;
    } else if(lua_isnil(L, 3)) {
	_arg2 = 0;
    } else if (lua_isnumber(L, 3)) {
	_arg2 = (bool)lua_tonumber(L, 3);
    } else {
	_arg2 = 1;
    }
}
	lua_settop(L, 0);
    _result = (iSector *)iEngine_CreateSector(_arg0,_arg1,_arg2);
{LS_luaL_pushuserpointer(L, _result, iSector_tag);}
	return 1;
}

#define iEngine_FindSector(_swigobj,_swigarg0,_swigarg1)  (_swigobj->FindSector(_swigarg0,_swigarg1))
static int
wrap_iEngine_FindSector(lua_State *L)
{
    iSector * _result;
    iEngine * _arg0;
    char * _arg1;
    bool  _arg2 = (bool ) false;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{
    if(lua_isnull(L, 3)) {
	_arg2 = (bool)false;
    } else if(lua_isnil(L, 3)) {
	_arg2 = 0;
    } else if (lua_isnumber(L, 3)) {
	_arg2 = (bool)lua_tonumber(L, 3);
    } else {
	_arg2 = 1;
    }
}
	lua_settop(L, 0);
    _result = (iSector *)iEngine_FindSector(_arg0,_arg1,_arg2);
{LS_luaL_pushuserpointer(L, _result, iSector_tag);}
	return 1;
}

#define iEngine_FindMaterial(_swigobj,_swigarg0,_swigarg1)  (_swigobj->FindMaterial(_swigarg0,_swigarg1))
static int
wrap_iEngine_FindMaterial(lua_State *L)
{
    iMaterialWrapper * _result;
    iEngine * _arg0;
    char * _arg1;
    bool  _arg2 = (bool ) false;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (char*)luaL_opt_string(L, 2, NULL);}
{
    if(lua_isnull(L, 3)) {
	_arg2 = (bool)false;
    } else if(lua_isnil(L, 3)) {
	_arg2 = 0;
    } else if (lua_isnumber(L, 3)) {
	_arg2 = (bool)lua_tonumber(L, 3);
    } else {
	_arg2 = 1;
    }
}
	lua_settop(L, 0);
    _result = (iMaterialWrapper *)iEngine_FindMaterial(_arg0,_arg1,_arg2);
{LS_luaL_pushuserpointer(L, _result, iMaterialWrapper_tag);}
	return 1;
}

#define iEngine_CreateSectorWallsMesh(_swigobj,_swigarg0,_swigarg1)  (_swigobj->CreateSectorWallsMesh(_swigarg0,_swigarg1))
static int
wrap_iEngine_CreateSectorWallsMesh(lua_State *L)
{
    iMeshWrapper * _result;
    iEngine * _arg0;
    iSector * _arg1;
    char * _arg2;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
{_arg1 = (iSector *)LS_luaL_check_userdata(L, 2);}
{_arg2 = (char*)luaL_opt_string(L, 3, NULL);}
	lua_settop(L, 0);
    _result = (iMeshWrapper *)iEngine_CreateSectorWallsMesh(_arg0,_arg1,_arg2);
{LS_luaL_pushuserpointer(L, _result, iMeshWrapper_tag);}
	return 1;
}

#define iEngine_GetSectors(_swigobj)  (_swigobj->GetSectors())
static int
wrap_iEngine_GetSectors(lua_State *L)
{
    iSectorList * _result;
    iEngine * _arg0;

{_arg0 = (iEngine *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iSectorList *)iEngine_GetSectors(_arg0);
{LS_luaL_pushuserpointer(L, _result, iSectorList_tag);}
	return 1;
}

static void *SwigiObjectRegistryToiBase(void *ptr) {
    iObjectRegistry *src;
    iBase *dest;
    src = (iObjectRegistry *) ptr;
    dest = (iBase *) src;
    return (void *) dest;
}

static iEngine * iObjectRegistry_Query_iEngine(iObjectRegistry *self) {
      iPluginManager* plugin_mgr = CS_QUERY_REGISTRY (self,
      	iPluginManager);
      return CS_QUERY_PLUGIN(plugin_mgr, iEngine);
    }
static int
wrap_iObjectRegistry_Query_iEngine(lua_State *L)
{
    iEngine * _result;
    iObjectRegistry * _arg0;

{_arg0 = (iObjectRegistry *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iEngine *)iObjectRegistry_Query_iEngine(_arg0);
{LS_luaL_pushuserpointer(L, _result, iEngine_tag);}
	return 1;
}

static iGraphics3D * iObjectRegistry_Query_iGraphics3D(iObjectRegistry *self) {
      iPluginManager* plugin_mgr = CS_QUERY_REGISTRY (self,
      	iPluginManager);
      return CS_QUERY_PLUGIN(plugin_mgr, iGraphics3D);
    }
static int
wrap_iObjectRegistry_Query_iGraphics3D(lua_State *L)
{
    iGraphics3D * _result;
    iObjectRegistry * _arg0;

{_arg0 = (iObjectRegistry *)LS_luaL_check_userdata(L, 1);}
	lua_settop(L, 0);
    _result = (iGraphics3D *)iObjectRegistry_Query_iGraphics3D(_arg0);
{LS_luaL_pushuserpointer(L, _result, iGraphics3D_tag);}
	return 1;
}

static void  iObjectRegistry_Print(iObjectRegistry *self,int  mode,const char * format) {
      printf (format); 
    }
static int
wrap_iObjectRegistry_Print(lua_State *L)
{
    iObjectRegistry * _arg0;
    int  _arg1;
    char * _arg2;

{_arg0 = (iObjectRegistry *)LS_luaL_check_userdata(L, 1);}
{_arg1 = ( int )luaL_check_long(L, 2);}
{_arg2 = (char*)luaL_opt_string(L, 3, NULL);}
	lua_settop(L, 0);
    iObjectRegistry_Print(_arg0,_arg1,_arg2);
	return 0;
}

int
cspace_initialize(lua_State *L)
{
	swig_lua_init(L);

	lua_register(L, "MakeVersion", wrap_MakeVersion);
	lua_register(L, "iBase_DecRef", wrap_iBase_DecRef);
	iBase_tag = lua_newtag(L);
	lua_pushnumber(L, iBase_tag);
	lua_setglobal(L, "iBase_tag");

	lua_register(L, "iSCF_CreateInstance", wrap_iSCF_CreateInstance);
	lua_register(L, "iSCF_DecRef", wrap_iBase_DecRef);
	iSCF_tag = lua_newtag(L);
	lua_pushnumber(L, iSCF_tag);
	lua_setglobal(L, "iSCF_tag");

	lua_register(L, "csVector3_x_set", wrap_csVector3_x_set);
	lua_register(L, "csVector3_x_get", wrap_csVector3_x_get);
	lua_register(L, "csVector3_y_set", wrap_csVector3_y_set);
	lua_register(L, "csVector3_y_get", wrap_csVector3_y_get);
	lua_register(L, "csVector3_z_set", wrap_csVector3_z_set);
	lua_register(L, "csVector3_z_get", wrap_csVector3_z_get);
	lua_register(L, "new_csVector3", wrap_new_csVector3);
	lua_register(L, "delete_csVector3", wrap_delete_csVector3);
	csVector3_tag = lua_newtag(L);
	lua_pushnumber(L, csVector3_tag);
	lua_setglobal(L, "csVector3_tag");

	lua_register(L, "csRGBpixel_red_set", wrap_csRGBpixel_red_set);
	lua_register(L, "csRGBpixel_red_get", wrap_csRGBpixel_red_get);
	lua_register(L, "csRGBpixel_green_set", wrap_csRGBpixel_green_set);
	lua_register(L, "csRGBpixel_green_get", wrap_csRGBpixel_green_get);
	lua_register(L, "csRGBpixel_blue_set", wrap_csRGBpixel_blue_set);
	lua_register(L, "csRGBpixel_blue_get", wrap_csRGBpixel_blue_get);
	lua_register(L, "csRGBpixel_alpha_set", wrap_csRGBpixel_alpha_set);
	lua_register(L, "csRGBpixel_alpha_get", wrap_csRGBpixel_alpha_get);
	csRGBpixel_tag = lua_newtag(L);
	lua_pushnumber(L, csRGBpixel_tag);
	lua_setglobal(L, "csRGBpixel_tag");

	lua_register(L, "csPixelFormat_RedMask_set", wrap_csPixelFormat_RedMask_set);
	lua_register(L, "csPixelFormat_RedMask_get", wrap_csPixelFormat_RedMask_get);
	lua_register(L, "csPixelFormat_GreenMask_set", wrap_csPixelFormat_GreenMask_set);
	lua_register(L, "csPixelFormat_GreenMask_get", wrap_csPixelFormat_GreenMask_get);
	lua_register(L, "csPixelFormat_BlueMask_set", wrap_csPixelFormat_BlueMask_set);
	lua_register(L, "csPixelFormat_BlueMask_get", wrap_csPixelFormat_BlueMask_get);
	lua_register(L, "csPixelFormat_RedShift_set", wrap_csPixelFormat_RedShift_set);
	lua_register(L, "csPixelFormat_RedShift_get", wrap_csPixelFormat_RedShift_get);
	lua_register(L, "csPixelFormat_GreenShift_set", wrap_csPixelFormat_GreenShift_set);
	lua_register(L, "csPixelFormat_GreenShift_get", wrap_csPixelFormat_GreenShift_get);
	lua_register(L, "csPixelFormat_BlueShift_set", wrap_csPixelFormat_BlueShift_set);
	lua_register(L, "csPixelFormat_BlueShift_get", wrap_csPixelFormat_BlueShift_get);
	lua_register(L, "csPixelFormat_RedBits_set", wrap_csPixelFormat_RedBits_set);
	lua_register(L, "csPixelFormat_RedBits_get", wrap_csPixelFormat_RedBits_get);
	lua_register(L, "csPixelFormat_GreenBits_set", wrap_csPixelFormat_GreenBits_set);
	lua_register(L, "csPixelFormat_GreenBits_get", wrap_csPixelFormat_GreenBits_get);
	lua_register(L, "csPixelFormat_BlueBits_set", wrap_csPixelFormat_BlueBits_set);
	lua_register(L, "csPixelFormat_BlueBits_get", wrap_csPixelFormat_BlueBits_get);
	lua_register(L, "csPixelFormat_PalEntries_set", wrap_csPixelFormat_PalEntries_set);
	lua_register(L, "csPixelFormat_PalEntries_get", wrap_csPixelFormat_PalEntries_get);
	lua_register(L, "csPixelFormat_PixelBytes_set", wrap_csPixelFormat_PixelBytes_set);
	lua_register(L, "csPixelFormat_PixelBytes_get", wrap_csPixelFormat_PixelBytes_get);
	csPixelFormat_tag = lua_newtag(L);
	lua_pushnumber(L, csPixelFormat_tag);
	lua_setglobal(L, "csPixelFormat_tag");

	lua_register(L, "csGraphics3DCaps_CanClip_set", wrap_csGraphics3DCaps_CanClip_set);
	lua_register(L, "csGraphics3DCaps_CanClip_get", wrap_csGraphics3DCaps_CanClip_get);
	lua_register(L, "csGraphics3DCaps_minTexHeight_set", wrap_csGraphics3DCaps_minTexHeight_set);
	lua_register(L, "csGraphics3DCaps_minTexHeight_get", wrap_csGraphics3DCaps_minTexHeight_get);
	lua_register(L, "csGraphics3DCaps_minTexWidth_set", wrap_csGraphics3DCaps_minTexWidth_set);
	lua_register(L, "csGraphics3DCaps_minTexWidth_get", wrap_csGraphics3DCaps_minTexWidth_get);
	lua_register(L, "csGraphics3DCaps_maxTexHeight_set", wrap_csGraphics3DCaps_maxTexHeight_set);
	lua_register(L, "csGraphics3DCaps_maxTexHeight_get", wrap_csGraphics3DCaps_maxTexHeight_get);
	lua_register(L, "csGraphics3DCaps_maxTexWidth_set", wrap_csGraphics3DCaps_maxTexWidth_set);
	lua_register(L, "csGraphics3DCaps_maxTexWidth_get", wrap_csGraphics3DCaps_maxTexWidth_get);
	lua_register(L, "csGraphics3DCaps_fog_set", wrap_csGraphics3DCaps_fog_set);
	lua_register(L, "csGraphics3DCaps_fog_get", wrap_csGraphics3DCaps_fog_get);
	lua_register(L, "csGraphics3DCaps_NeedsPO2Maps_set", wrap_csGraphics3DCaps_NeedsPO2Maps_set);
	lua_register(L, "csGraphics3DCaps_NeedsPO2Maps_get", wrap_csGraphics3DCaps_NeedsPO2Maps_get);
	lua_register(L, "csGraphics3DCaps_MaxAspectRatio_set", wrap_csGraphics3DCaps_MaxAspectRatio_set);
	lua_register(L, "csGraphics3DCaps_MaxAspectRatio_get", wrap_csGraphics3DCaps_MaxAspectRatio_get);
	csGraphics3DCaps_tag = lua_newtag(L);
	lua_pushnumber(L, csGraphics3DCaps_tag);
	lua_setglobal(L, "csGraphics3DCaps_tag");

	lua_register(L, "csImageArea_x_set", wrap_csImageArea_x_set);
	lua_register(L, "csImageArea_x_get", wrap_csImageArea_x_get);
	lua_register(L, "csImageArea_y_set", wrap_csImageArea_y_set);
	lua_register(L, "csImageArea_y_get", wrap_csImageArea_y_get);
	lua_register(L, "csImageArea_w_set", wrap_csImageArea_w_set);
	lua_register(L, "csImageArea_w_get", wrap_csImageArea_w_get);
	lua_register(L, "csImageArea_h_set", wrap_csImageArea_h_set);
	lua_register(L, "csImageArea_h_get", wrap_csImageArea_h_get);
	lua_register(L, "csImageArea_data_set", wrap_csImageArea_data_set);
	lua_register(L, "csImageArea_data_get", wrap_csImageArea_data_get);
	lua_register(L, "new_csImageArea", wrap_new_csImageArea);
	csImageArea_tag = lua_newtag(L);
	lua_pushnumber(L, csImageArea_tag);
	lua_setglobal(L, "csImageArea_tag");

	lua_register(L, "iPlugin_Initialize", wrap_iPlugin_Initialize);
	lua_register(L, "iPlugin_HandleEvent", wrap_iPlugin_HandleEvent);
	lua_register(L, "iPlugin_DecRef", wrap_iBase_DecRef);
	iPlugin_tag = lua_newtag(L);
	lua_pushnumber(L, iPlugin_tag);
	lua_setglobal(L, "iPlugin_tag");

	lua_register(L, "iTextureWrapper_DecRef", wrap_iBase_DecRef);
	iTextureWrapper_tag = lua_newtag(L);
	lua_pushnumber(L, iTextureWrapper_tag);
	lua_setglobal(L, "iTextureWrapper_tag");

	lua_register(L, "iTextureHandle_GetMipMapDimensions", wrap_iTextureHandle_GetMipMapDimensions);
	lua_register(L, "iTextureHandle_GetMeanColor", wrap_iTextureHandle_GetMeanColor);
	lua_register(L, "iTextureHandle_GetCacheData", wrap_iTextureHandle_GetCacheData);
	lua_register(L, "iTextureHandle_SetCacheData", wrap_iTextureHandle_SetCacheData);
	lua_register(L, "iTextureHandle_GetPrivateObject", wrap_iTextureHandle_GetPrivateObject);
	lua_register(L, "iTextureHandle_DecRef", wrap_iBase_DecRef);
	iTextureHandle_tag = lua_newtag(L);
	lua_pushnumber(L, iTextureHandle_tag);
	lua_setglobal(L, "iTextureHandle_tag");

	lua_register(L, "iMaterialHandle_GetTexture", wrap_iMaterialHandle_GetTexture);
	lua_register(L, "iMaterialHandle_GetFlatColor", wrap_iMaterialHandle_GetFlatColor);
	lua_register(L, "iMaterialHandle_GetReflection", wrap_iMaterialHandle_GetReflection);
	lua_register(L, "iMaterialHandle_Prepare", wrap_iMaterialHandle_Prepare);
	lua_register(L, "iMaterialHandle_DecRef", wrap_iBase_DecRef);
	iMaterialHandle_tag = lua_newtag(L);
	lua_pushnumber(L, iMaterialHandle_tag);
	lua_setglobal(L, "iMaterialHandle_tag");

	lua_register(L, "iMaterialWrapper_GetMaterialHandle", wrap_iMaterialWrapper_GetMaterialHandle);
	lua_register(L, "iMaterialWrapper_DecRef", wrap_iBase_DecRef);
	iMaterialWrapper_tag = lua_newtag(L);
	lua_pushnumber(L, iMaterialWrapper_tag);
	lua_setglobal(L, "iMaterialWrapper_tag");

	lua_register(L, "iFont_SetSize", wrap_iFont_SetSize);
	lua_register(L, "iFont_GetSize", wrap_iFont_GetSize);
	lua_register(L, "iFont_GetMaxSize", wrap_iFont_GetMaxSize);
	lua_register(L, "iFont_GetGlyphSize", wrap_iFont_GetGlyphSize);
	lua_register(L, "iFont_GetGlyphBitmap", wrap_iFont_GetGlyphBitmap);
	lua_register(L, "iFont_GetDimensions", wrap_iFont_GetDimensions);
	lua_register(L, "iFont_GetLength", wrap_iFont_GetLength);
	lua_register(L, "iFont_DecRef", wrap_iBase_DecRef);
	iFont_tag = lua_newtag(L);
	lua_pushnumber(L, iFont_tag);
	lua_setglobal(L, "iFont_tag");

	lua_register(L, "iFontServer_LoadFont", wrap_iFontServer_LoadFont);
	lua_register(L, "iFontServer_GetFontCount", wrap_iFontServer_GetFontCount);
	lua_register(L, "iFontServer_GetFont", wrap_iFontServer_GetFont);
	lua_register(L, "iFontServer_DecRef", wrap_iBase_DecRef);
	iFontServer_tag = lua_newtag(L);
	lua_pushnumber(L, iFontServer_tag);
	lua_setglobal(L, "iFontServer_tag");

	lua_register(L, "iGraphics2D_Open", wrap_iGraphics2D_Open);
	lua_register(L, "iGraphics2D_Close", wrap_iGraphics2D_Close);
	lua_register(L, "iGraphics2D_GetWidth", wrap_iGraphics2D_GetWidth);
	lua_register(L, "iGraphics2D_GetHeight", wrap_iGraphics2D_GetHeight);
	lua_register(L, "iGraphics2D_GetFullScreen", wrap_iGraphics2D_GetFullScreen);
	lua_register(L, "iGraphics2D_GetPage", wrap_iGraphics2D_GetPage);
	lua_register(L, "iGraphics2D_DoubleBuffer", wrap_iGraphics2D_DoubleBuffer);
	lua_register(L, "iGraphics2D_GetDoubleBufferState", wrap_iGraphics2D_GetDoubleBufferState);
	lua_register(L, "iGraphics2D_GetPixelFormat", wrap_iGraphics2D_GetPixelFormat);
	lua_register(L, "iGraphics2D_GetPixelBytes", wrap_iGraphics2D_GetPixelBytes);
	lua_register(L, "iGraphics2D_GetPalEntryCount", wrap_iGraphics2D_GetPalEntryCount);
	lua_register(L, "iGraphics2D_GetPalette", wrap_iGraphics2D_GetPalette);
	lua_register(L, "iGraphics2D_SetRGB", wrap_iGraphics2D_SetRGB);
	lua_register(L, "iGraphics2D_SetClipRect", wrap_iGraphics2D_SetClipRect);
	lua_register(L, "iGraphics2D_GetClipRect", wrap_iGraphics2D_GetClipRect);
	lua_register(L, "iGraphics2D_BeginDraw", wrap_iGraphics2D_BeginDraw);
	lua_register(L, "iGraphics2D_FinishDraw", wrap_iGraphics2D_FinishDraw);
	lua_register(L, "iGraphics2D_Print", wrap_iGraphics2D_Print);
	lua_register(L, "iGraphics2D_Clear", wrap_iGraphics2D_Clear);
	lua_register(L, "iGraphics2D_ClearAll", wrap_iGraphics2D_ClearAll);
	lua_register(L, "iGraphics2D_DrawLine", wrap_iGraphics2D_DrawLine);
	lua_register(L, "iGraphics2D_DrawBox", wrap_iGraphics2D_DrawBox);
	lua_register(L, "iGraphics2D_ClipLine", wrap_iGraphics2D_ClipLine);
	lua_register(L, "iGraphics2D_DrawPixel", wrap_iGraphics2D_DrawPixel);
	lua_register(L, "iGraphics2D_GetPixelAt", wrap_iGraphics2D_GetPixelAt);
	lua_register(L, "iGraphics2D_GetPixel", wrap_iGraphics2D_GetPixel);
	lua_register(L, "iGraphics2D_SaveArea", wrap_iGraphics2D_SaveArea);
	lua_register(L, "iGraphics2D_RestoreArea", wrap_iGraphics2D_RestoreArea);
	lua_register(L, "iGraphics2D_FreeArea", wrap_iGraphics2D_FreeArea);
	lua_register(L, "iGraphics2D_Write", wrap_iGraphics2D_Write);
	lua_register(L, "iGraphics2D_GetFontServer", wrap_iGraphics2D_GetFontServer);
	lua_register(L, "iGraphics2D_SetMousePosition", wrap_iGraphics2D_SetMousePosition);
	lua_register(L, "iGraphics2D_SetMouseCursor", wrap_iGraphics2D_SetMouseCursor);
	lua_register(L, "iGraphics2D_ScreenShot", wrap_iGraphics2D_ScreenShot);
	lua_register(L, "iGraphics2D_CreateOffScreenCanvas", wrap_iGraphics2D_CreateOffScreenCanvas);
	lua_register(L, "iGraphics2D_AllowResize", wrap_iGraphics2D_AllowResize);
	lua_register(L, "iGraphics2D_DecRef", wrap_iBase_DecRef);
	iGraphics2D_tag = lua_newtag(L);
	lua_pushnumber(L, iGraphics2D_tag);
	lua_setglobal(L, "iGraphics2D_tag");

	lua_register(L, "iHalo_GetWidth", wrap_iHalo_GetWidth);
	lua_register(L, "iHalo_GetHeight", wrap_iHalo_GetHeight);
	lua_register(L, "iHalo_SetColor", wrap_iHalo_SetColor);
	lua_register(L, "iHalo_GetColor", wrap_iHalo_GetColor);
	lua_register(L, "iHalo_Draw", wrap_iHalo_Draw);
	lua_register(L, "iHalo_DecRef", wrap_iBase_DecRef);
	iHalo_tag = lua_newtag(L);
	lua_pushnumber(L, iHalo_tag);
	lua_setglobal(L, "iHalo_tag");

	lua_register(L, "iGraphics3D_Open", wrap_iGraphics3D_Open);
	lua_register(L, "iGraphics3D_Close", wrap_iGraphics3D_Close);
	lua_register(L, "iGraphics3D_SetDimensions", wrap_iGraphics3D_SetDimensions);
	lua_register(L, "iGraphics3D_BeginDraw", wrap_iGraphics3D_BeginDraw);
	lua_register(L, "iGraphics3D_FinishDraw", wrap_iGraphics3D_FinishDraw);
	lua_register(L, "iGraphics3D_Print", wrap_iGraphics3D_Print);
	lua_register(L, "iGraphics3D_DrawPolygon", wrap_iGraphics3D_DrawPolygon);
	lua_register(L, "iGraphics3D_DrawPolygonDebug", wrap_iGraphics3D_DrawPolygonDebug);
	lua_register(L, "iGraphics3D_DrawLine", wrap_iGraphics3D_DrawLine);
	lua_register(L, "iGraphics3D_DrawTriangleMesh", wrap_iGraphics3D_DrawTriangleMesh);
	lua_register(L, "iGraphics3D_DrawPolygonMesh", wrap_iGraphics3D_DrawPolygonMesh);
	lua_register(L, "iGraphics3D_OpenFogObject", wrap_iGraphics3D_OpenFogObject);
	lua_register(L, "iGraphics3D_DrawFogPolygon", wrap_iGraphics3D_DrawFogPolygon);
	lua_register(L, "iGraphics3D_CloseFogObject", wrap_iGraphics3D_CloseFogObject);
	lua_register(L, "iGraphics3D_GetCaps", wrap_iGraphics3D_GetCaps);
	lua_register(L, "iGraphics3D_GetZBuffAt", wrap_iGraphics3D_GetZBuffAt);
	lua_register(L, "iGraphics3D_GetZBuffValue", wrap_iGraphics3D_GetZBuffValue);
	lua_register(L, "iGraphics3D_DumpCache", wrap_iGraphics3D_DumpCache);
	lua_register(L, "iGraphics3D_ClearCache", wrap_iGraphics3D_ClearCache);
	lua_register(L, "iGraphics3D_RemoveFromCache", wrap_iGraphics3D_RemoveFromCache);
	lua_register(L, "iGraphics3D_GetWidth", wrap_iGraphics3D_GetWidth);
	lua_register(L, "iGraphics3D_GetHeight", wrap_iGraphics3D_GetHeight);
	lua_register(L, "iGraphics3D_SetPerspectiveCenter", wrap_iGraphics3D_SetPerspectiveCenter);
	lua_register(L, "iGraphics3D_SetPerspectiveAspect", wrap_iGraphics3D_SetPerspectiveAspect);
	lua_register(L, "iGraphics3D_SetObjectToCamera", wrap_iGraphics3D_SetObjectToCamera);
	lua_register(L, "iGraphics3D_GetDriver2D", wrap_iGraphics3D_GetDriver2D);
	lua_register(L, "iGraphics3D_GetTextureManager", wrap_iGraphics3D_GetTextureManager);
	lua_register(L, "iGraphics3D_CreateHalo", wrap_iGraphics3D_CreateHalo);
	lua_register(L, "iGraphics3D_DrawPixmap", wrap_iGraphics3D_DrawPixmap);
	lua_register(L, "iGraphics3D_DecRef", wrap_iBase_DecRef);
	iGraphics3D_tag = lua_newtag(L);
	lua_pushnumber(L, iGraphics3D_tag);
	lua_setglobal(L, "iGraphics3D_tag");

	lua_register(L, "iCamera_GetFOV", wrap_iCamera_GetFOV);
	lua_register(L, "iCamera_GetInvFOV", wrap_iCamera_GetInvFOV);
	lua_register(L, "iCamera_DecRef", wrap_iBase_DecRef);
	iCamera_tag = lua_newtag(L);
	lua_pushnumber(L, iCamera_tag);
	lua_setglobal(L, "iCamera_tag");

	lua_register(L, "iSector_DecRef", wrap_iBase_DecRef);
	iSector_tag = lua_newtag(L);
	lua_pushnumber(L, iSector_tag);
	lua_setglobal(L, "iSector_tag");

	lua_register(L, "iThingState_CreatePolygon", wrap_iThingState_CreatePolygon);
	lua_register(L, "iThingState_DecRef", wrap_iBase_DecRef);
	iThingState_tag = lua_newtag(L);
	lua_pushnumber(L, iThingState_tag);
	lua_setglobal(L, "iThingState_tag");

	lua_register(L, "iMeshObject_Query_iThingState", wrap_iMeshObject_Query_iThingState);
	lua_register(L, "iMeshObject_DecRef", wrap_iBase_DecRef);
	iMeshObject_tag = lua_newtag(L);
	lua_pushnumber(L, iMeshObject_tag);
	lua_setglobal(L, "iMeshObject_tag");

	lua_register(L, "iMeshWrapper_GetMeshObject", wrap_iMeshWrapper_GetMeshObject);
	lua_register(L, "iMeshWrapper_DecRef", wrap_iBase_DecRef);
	iMeshWrapper_tag = lua_newtag(L);
	lua_pushnumber(L, iMeshWrapper_tag);
	lua_setglobal(L, "iMeshWrapper_tag");

	lua_register(L, "iLightMap_GetMapData", wrap_iLightMap_GetMapData);
	lua_register(L, "iLightMap_GetWidth", wrap_iLightMap_GetWidth);
	lua_register(L, "iLightMap_GetHeight", wrap_iLightMap_GetHeight);
	lua_register(L, "iLightMap_GetRealWidth", wrap_iLightMap_GetRealWidth);
	lua_register(L, "iLightMap_GetRealHeight", wrap_iLightMap_GetRealHeight);
	lua_register(L, "iLightMap_GetCacheData", wrap_iLightMap_GetCacheData);
	lua_register(L, "iLightMap_SetCacheData", wrap_iLightMap_SetCacheData);
	lua_register(L, "iLightMap_GetMeanLighting", wrap_iLightMap_GetMeanLighting);
	lua_register(L, "iLightMap_GetSize", wrap_iLightMap_GetSize);
	lua_register(L, "iLightMap_DecRef", wrap_iBase_DecRef);
	iLightMap_tag = lua_newtag(L);
	lua_pushnumber(L, iLightMap_tag);
	lua_setglobal(L, "iLightMap_tag");

	lua_register(L, "iPolygon3D_GetLightMap", wrap_iPolygon3D_GetLightMap);
	lua_register(L, "iPolygon3D_GetMaterialHandle", wrap_iPolygon3D_GetMaterialHandle);
	lua_register(L, "iPolygon3D_SetMaterial", wrap_iPolygon3D_SetMaterial);
	lua_register(L, "iPolygon3D_GetVertexCount", wrap_iPolygon3D_GetVertexCount);
	lua_register(L, "iPolygon3D_GetVertex", wrap_iPolygon3D_GetVertex);
	lua_register(L, "iPolygon3D_GetVertexW", wrap_iPolygon3D_GetVertexW);
	lua_register(L, "iPolygon3D_GetVertexC", wrap_iPolygon3D_GetVertexC);
	lua_register(L, "iPolygon3D_CreateVertexByIndex", wrap_iPolygon3D_CreateVertexByIndex);
	lua_register(L, "iPolygon3D_CreateVertex", wrap_iPolygon3D_CreateVertex);
	lua_register(L, "iPolygon3D_GetAlpha", wrap_iPolygon3D_GetAlpha);
	lua_register(L, "iPolygon3D_SetAlpha", wrap_iPolygon3D_SetAlpha);
	lua_register(L, "iPolygon3D_CreatePlane", wrap_iPolygon3D_CreatePlane);
	lua_register(L, "iPolygon3D_SetPlane", wrap_iPolygon3D_SetPlane);
	lua_register(L, "iPolygon3D_SetTextureSpace", wrap_iPolygon3D_SetTextureSpace);
	lua_register(L, "iPolygon3D_DecRef", wrap_iBase_DecRef);
	iPolygon3D_tag = lua_newtag(L);
	lua_pushnumber(L, iPolygon3D_tag);
	lua_setglobal(L, "iPolygon3D_tag");

	lua_register(L, "iImage_GetImageData", wrap_iImage_GetImageData);
	lua_register(L, "iImage_GetWidth", wrap_iImage_GetWidth);
	lua_register(L, "iImage_GetHeight", wrap_iImage_GetHeight);
	lua_register(L, "iImage_GetSize", wrap_iImage_GetSize);
	lua_register(L, "iImage_Rescale", wrap_iImage_Rescale);
	lua_register(L, "iImage_MipMap", wrap_iImage_MipMap);
	lua_register(L, "iImage_SetName", wrap_iImage_SetName);
	lua_register(L, "iImage_GetName", wrap_iImage_GetName);
	lua_register(L, "iImage_GetFormat", wrap_iImage_GetFormat);
	lua_register(L, "iImage_GetPalette", wrap_iImage_GetPalette);
	lua_register(L, "iImage_GetAlpha", wrap_iImage_GetAlpha);
	lua_register(L, "iImage_SetFormat", wrap_iImage_SetFormat);
	lua_register(L, "iImage_Clone", wrap_iImage_Clone);
	lua_register(L, "iImage_Crop", wrap_iImage_Crop);
	lua_register(L, "iImage_DecRef", wrap_iBase_DecRef);
	iImage_tag = lua_newtag(L);
	lua_pushnumber(L, iImage_tag);
	lua_setglobal(L, "iImage_tag");

	lua_register(L, "iTextureManager_RegisterTexture", wrap_iTextureManager_RegisterTexture);
	lua_register(L, "iTextureManager_PrepareTextures", wrap_iTextureManager_PrepareTextures);
	lua_register(L, "iTextureManager_FreeImages", wrap_iTextureManager_FreeImages);
	lua_register(L, "iTextureManager_ResetPalette", wrap_iTextureManager_ResetPalette);
	lua_register(L, "iTextureManager_ReserveColor", wrap_iTextureManager_ReserveColor);
	lua_register(L, "iTextureManager_FindRGB", wrap_iTextureManager_FindRGB);
	lua_register(L, "iTextureManager_SetPalette", wrap_iTextureManager_SetPalette);
	lua_register(L, "iTextureManager_SetVerbose", wrap_iTextureManager_SetVerbose);
	lua_register(L, "iTextureManager_GetTextureFormat", wrap_iTextureManager_GetTextureFormat);
	lua_register(L, "iTextureManager_DecRef", wrap_iBase_DecRef);
	iTextureManager_tag = lua_newtag(L);
	lua_pushnumber(L, iTextureManager_tag);
	lua_setglobal(L, "iTextureManager_tag");

	lua_register(L, "iPolygonTexture_GetMaterialHandle", wrap_iPolygonTexture_GetMaterialHandle);
	lua_register(L, "iPolygonTexture_GetFDU", wrap_iPolygonTexture_GetFDU);
	lua_register(L, "iPolygonTexture_GetFDV", wrap_iPolygonTexture_GetFDV);
	lua_register(L, "iPolygonTexture_GetWidth", wrap_iPolygonTexture_GetWidth);
	lua_register(L, "iPolygonTexture_GetHeight", wrap_iPolygonTexture_GetHeight);
	lua_register(L, "iPolygonTexture_GetShiftU", wrap_iPolygonTexture_GetShiftU);
	lua_register(L, "iPolygonTexture_GetIMinU", wrap_iPolygonTexture_GetIMinU);
	lua_register(L, "iPolygonTexture_GetIMinV", wrap_iPolygonTexture_GetIMinV);
	lua_register(L, "iPolygonTexture_GetTextureBox", wrap_iPolygonTexture_GetTextureBox);
	lua_register(L, "iPolygonTexture_GetOriginalWidth", wrap_iPolygonTexture_GetOriginalWidth);
	lua_register(L, "iPolygonTexture_GetPolygon", wrap_iPolygonTexture_GetPolygon);
	lua_register(L, "iPolygonTexture_DynamicLightsDirty", wrap_iPolygonTexture_DynamicLightsDirty);
	lua_register(L, "iPolygonTexture_RecalculateDynamicLights", wrap_iPolygonTexture_RecalculateDynamicLights);
	lua_register(L, "iPolygonTexture_GetLightMap", wrap_iPolygonTexture_GetLightMap);
	lua_register(L, "iPolygonTexture_GetLightCellSize", wrap_iPolygonTexture_GetLightCellSize);
	lua_register(L, "iPolygonTexture_GetLightCellShift", wrap_iPolygonTexture_GetLightCellShift);
	lua_register(L, "iPolygonTexture_GetCacheData", wrap_iPolygonTexture_GetCacheData);
	lua_register(L, "iPolygonTexture_SetCacheData", wrap_iPolygonTexture_SetCacheData);
	lua_register(L, "iPolygonTexture_DecRef", wrap_iBase_DecRef);
	iPolygonTexture_tag = lua_newtag(L);
	lua_pushnumber(L, iPolygonTexture_tag);
	lua_setglobal(L, "iPolygonTexture_tag");

	lua_register(L, "iCameraPosition_DecRef", wrap_iBase_DecRef);
	iCameraPosition_tag = lua_newtag(L);
	lua_pushnumber(L, iCameraPosition_tag);
	lua_setglobal(L, "iCameraPosition_tag");

	lua_register(L, "iSectorList_GetSectorCount", wrap_iSectorList_GetSectorCount);
	lua_register(L, "iSectorList_GetSector", wrap_iSectorList_GetSector);
	lua_register(L, "iSectorList_AddSector", wrap_iSectorList_AddSector);
	lua_register(L, "iSectorList_RemoveSector", wrap_iSectorList_RemoveSector);
	lua_register(L, "iSectorList_FindByName", wrap_iSectorList_FindByName);
	lua_register(L, "iSectorList_DecRef", wrap_iBase_DecRef);
	iSectorList_tag = lua_newtag(L);
	lua_pushnumber(L, iSectorList_tag);
	lua_setglobal(L, "iSectorList_tag");

	lua_register(L, "iEngine_GetTextureFormat", wrap_iEngine_GetTextureFormat);
	lua_register(L, "iEngine_DeleteAll", wrap_iEngine_DeleteAll);
	lua_register(L, "iEngine_CreateTexture", wrap_iEngine_CreateTexture);
	lua_register(L, "iEngine_CreateCameraPosition", wrap_iEngine_CreateCameraPosition);
	lua_register(L, "iEngine_CreatePlane", wrap_iEngine_CreatePlane);
	lua_register(L, "iEngine_CreateSector", wrap_iEngine_CreateSector);
	lua_register(L, "iEngine_FindSector", wrap_iEngine_FindSector);
	lua_register(L, "iEngine_FindMaterial", wrap_iEngine_FindMaterial);
	lua_register(L, "iEngine_CreateSectorWallsMesh", wrap_iEngine_CreateSectorWallsMesh);
	lua_register(L, "iEngine_GetSectors", wrap_iEngine_GetSectors);
	lua_register(L, "iEngine_DecRef", wrap_iBase_DecRef);
	iEngine_tag = lua_newtag(L);
	lua_pushnumber(L, iEngine_tag);
	lua_setglobal(L, "iEngine_tag");

	lua_register(L, "iObjectRegistry_Query_iEngine", wrap_iObjectRegistry_Query_iEngine);
	lua_register(L, "iObjectRegistry_Query_iGraphics3D", wrap_iObjectRegistry_Query_iGraphics3D);
	lua_register(L, "iObjectRegistry_Print", wrap_iObjectRegistry_Print);
	lua_register(L, "iObjectRegistry_DecRef", wrap_iBase_DecRef);
	iObjectRegistry_tag = lua_newtag(L);
	lua_pushnumber(L, iObjectRegistry_tag);
	lua_setglobal(L, "iObjectRegistry_tag");

	return 0;
} /* end of cspace_initialize */

