/*
  Copyright (C) 2002 by Anders Stenberg

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

/*

 Please be careful when changing this file. It's the result of roughly
 78 hours of work, where approximately 14 liters of coffee where consumed,
 the keyboard been replaced 4 times due to worn-out cut'n'paste combo keys
 and two ambulance calls because of near-fatal RSI syndroms. Every line has
 been thought of carefully and has been highly optimized by 3 members of a
 Zen buddhist religion in a Tibetian monastry. Thus modifications, as they
 touch the core OpenGL support, could severely affect performance. Beware!
 Okay, maybe this was a bit exaggerated... this file is autogenerated.
 
 */


#ifndef __CS_GLEXTENSIONMANAGER_H__
#define __CS_GLEXTENSIONMANAGER_H__



/**********************************************************************
 * Begin system-specific stuff.
 */
#if defined(__BEOS__)
#include <stdlib.h>     /* to get some BeOS-isms */
#endif

#if !defined(OPENSTEP) && (defined(NeXT) || defined(NeXT_PDO))
#define OPENSTEP
#endif

#if defined(_WIN32) && !defined(__WIN32__) && !defined(__CYGWIN__)
#define __WIN32__
#endif

#if !defined(GLAPI)
#  if !defined(OPENSTEP) && (defined(__WIN32__) && !defined(__CYGWIN__))
#    if defined(_MSC_VER) && defined(BUILD_GL32) /* tag specify we're building mesa as a DLL */
#      define GLAPI __declspec(dllexport)
#    elif defined(_MSC_VER) && defined(_DLL) /* tag specifying we're building for DLL runtime support */
#      define GLAPI __declspec(dllimport)
#    else /* for use with static link lib build of Win32 edition only */
#      define GLAPI extern
#    endif /* _STATIC_MESA support */
#    define GLAPIENTRY __stdcall
#  else
/* non-Windows compilation */
#    define GLAPI extern
#    define GLAPIENTRY
#  endif /* WIN32 / CYGWIN bracket */
#endif

//#if defined(_WIN32) && !defined(_WINGDI_) && !defined(__CYGWIN__) && !defined(_GNU_H_WINDOWS32_DEFINES) && !defined(OPENSTEP)
//#include <gl/mesa_wgl.h>
//#endif

#if defined(macintosh) && PRAGMA_IMPORT_SUPPORTED
#pragma import on
#endif

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#endif

#ifndef csAPIENTRY
#ifndef APIENTRY
#define csAPIENTRY
#else
#define csAPIENTRY APIENTRY
#endif
#endif

/*
 * End system-specific stuff.
 **********************************************************************/

#if defined(CS_OPENGL_PATH)
#include CS_HEADER_GLOBAL(CS_OPENGL_PATH,gl.h)
#else
#include <GL/gl.h>
#endif

#include "iutil/objreg.h"
#include "ivaria/reporter.h"
#include "video/canvas/openglcommon/iogl.h"
#include "ivideo/graph2d.h"
#include "csutil/cfgacc.h"

%Definitions%

// end of definitions

#ifdef CS_DEBUG
#  define REPORT_MISSING_ENTRIES true
#else
#  define REPORT_MISSING_ENTRIES false
#endif

struct csGLExtensionManager
{
private:
  iObjectRegistry* object_reg;
  csConfigAccess config;
  iOpenGLInterface* gl;

  void Report (const char* msg, ...)
  {
    va_list arg;
    va_start (arg, msg);
    csRef<iReporter> rep (CS_QUERY_REGISTRY (object_reg, iReporter));
    if (rep)
      rep->ReportV (CS_REPORTER_SEVERITY_NOTIFY,
         "crystalspace.canvas.opengl.extmgr", msg, arg);
    else
    {
      csPrintfV (msg, arg);
      csPrintf ("\n");
    }
    va_end (arg);
  }

public:
  void Initialize (iObjectRegistry* object_reg, iGraphics2D* g2d)
  {
    csGLExtensionManager::object_reg = object_reg;
    gl = csRef<iOpenGLInterface>
      (SCF_QUERY_INTERFACE (g2d, iOpenGLInterface));
    // Low priority so canvas/renderer cfgs may override the settings
    config.AddConfig (object_reg, "/config/glext.cfg", true,
      iConfigManager::ConfigPriorityPlugin - 1);
  }
  
  void Open () { }
  void Close () { }
  
  %Functions%

  // end of functions
  
%ExtFlagsDetected%
private:
%ExtFlagsTested%
public:
  csGLExtensionManager (): object_reg(NULL)
  {
    %InitFlags%
  }
  
  %InitExtensions%
};

#undef REPORT_MISSING_ENTRIES

#endif // __CS_GLEXTENSIONMANAGER_H__

