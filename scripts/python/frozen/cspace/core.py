# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_core', [dirname(__file__)])
        except ImportError:
            import _core
            return _core
        if fp is not None:
            try:
                _mod = imp.load_module('_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _core = swig_import_helper()
    del swig_import_helper
else:
    import _core
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


CS_COMPILER_NAME = _core.CS_COMPILER_NAME
CS_PLATFORM_NAME = _core.CS_PLATFORM_NAME
CS_PROCESSOR_SIZE = _core.CS_PROCESSOR_SIZE
CS_LONG_SIZE = _core.CS_LONG_SIZE
CS_PROCESSOR_NAME = _core.CS_PROCESSOR_NAME
CS_WCHAR_T_SIZE = _core.CS_WCHAR_T_SIZE
CS_PACKAGE_NAME = _core.CS_PACKAGE_NAME
CS_PACKAGE_VERSION = _core.CS_PACKAGE_VERSION
class csWrapPtr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Ref = _swig_property(_core.csWrapPtr_Ref_get, _core.csWrapPtr_Ref_set)
    Type = _swig_property(_core.csWrapPtr_Type_get)
    Version = _swig_property(_core.csWrapPtr_Version_get, _core.csWrapPtr_Version_set)
    def __init__(self, *args): 
        this = _core.new_csWrapPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csWrapPtr
    __del__ = lambda self : None;
csWrapPtr_swigregister = _core.csWrapPtr_swigregister
csWrapPtr_swigregister(csWrapPtr)

def fix_args(funct):
    def _inner(self, args):
        if type(args) == tuple:
            args = (self,) + args
        else:
            args = (self, args)
        return funct(*args)
    return _inner

class CustomAllocated(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_CustomAllocated()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_CustomAllocated
    __del__ = lambda self : None;
CustomAllocated_swigregister = _core.CustomAllocated_swigregister
CustomAllocated_swigregister(CustomAllocated)

class csArrayThresholdVariable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, in_threshold = 0): 
        this = _core.new_csArrayThresholdVariable(in_threshold)
        try: self.this.append(this)
        except: self.this = this
    def GetThreshold(self): return _core.csArrayThresholdVariable_GetThreshold(self)
    __swig_destroy__ = _core.delete_csArrayThresholdVariable
    __del__ = lambda self : None;
csArrayThresholdVariable_swigregister = _core.csArrayThresholdVariable_swigregister
csArrayThresholdVariable_swigregister(csArrayThresholdVariable)

class csArrayThresholdVariableCapacityLinear(csArrayThresholdVariable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_csArrayThresholdVariableCapacityLinear(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsCapacityExcessive(self, *args): return _core.csArrayThresholdVariableCapacityLinear_IsCapacityExcessive(self, *args)
    def GetCapacity(self, *args): return _core.csArrayThresholdVariableCapacityLinear_GetCapacity(self, *args)
    __swig_destroy__ = _core.delete_csArrayThresholdVariableCapacityLinear
    __del__ = lambda self : None;
csArrayThresholdVariableCapacityLinear_swigregister = _core.csArrayThresholdVariableCapacityLinear_swigregister
csArrayThresholdVariableCapacityLinear_swigregister(csArrayThresholdVariableCapacityLinear)

class csArrayCapacityVariableGrow(csArrayThresholdVariableCapacityLinear):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_csArrayCapacityVariableGrow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csArrayCapacityVariableGrow
    __del__ = lambda self : None;
csArrayCapacityVariableGrow_swigregister = _core.csArrayCapacityVariableGrow_swigregister
csArrayCapacityVariableGrow_swigregister(csArrayCapacityVariableGrow)

class Vector2Array(CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Vector2Array
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _core.new_Vector2Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _core.Vector2Array_GetSize(self)
    def Get(self, *args): return _core.Vector2Array_Get(self, *args)
    def Put(self, *args): return _core.Vector2Array_Put(self, *args)
    def Push(self, *args): return _core.Vector2Array_Push(self, *args)
    def Merge(self, *args): return _core.Vector2Array_Merge(self, *args)
    def MergeSmart(self, *args): return _core.Vector2Array_MergeSmart(self, *args)
    def Pop(self): return _core.Vector2Array_Pop(self)
    def Top(self, *args): return _core.Vector2Array_Top(self, *args)
    def Insert(self, *args): return _core.Vector2Array_Insert(self, *args)
    def Contains(self, *args): return _core.Vector2Array_Contains(self, *args)
    def DeleteAll(self): return _core.Vector2Array_DeleteAll(self)
    def Truncate(self, *args): return _core.Vector2Array_Truncate(self, *args)
    def Empty(self): return _core.Vector2Array_Empty(self)
    def IsEmpty(self): return _core.Vector2Array_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _core.Vector2Array_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _core.Vector2Array_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _core.Vector2Array_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _core.Vector2Array_DeleteRange(self, *args)
    def __eq__(self, *args): return _core.Vector2Array___eq__(self, *args)
    def __ne__(self, *args): return _core.Vector2Array___ne__(self, *args)
    def GetAllocator(self): return _core.Vector2Array_GetAllocator(self)
Vector2Array_swigregister = _core.Vector2Array_swigregister
Vector2Array_swigregister(Vector2Array)
cvar = _core.cvar
csArrayItemNotFound = cvar.csArrayItemNotFound

class Vector2DirtyAccessArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Vector2DirtyAccessArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetArray(self, *args): return _core.Vector2DirtyAccessArray_GetArray(self, *args)
    def GetArrayCopy(self): return _core.Vector2DirtyAccessArray_GetArrayCopy(self)
    def Detach(self): return _core.Vector2DirtyAccessArray_Detach(self)
    __swig_destroy__ = _core.delete_Vector2DirtyAccessArray
    __del__ = lambda self : None;
Vector2DirtyAccessArray_swigregister = _core.Vector2DirtyAccessArray_swigregister
Vector2DirtyAccessArray_swigregister(Vector2DirtyAccessArray)

class Vector3Array(CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Vector3Array
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _core.new_Vector3Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _core.Vector3Array_GetSize(self)
    def Get(self, *args): return _core.Vector3Array_Get(self, *args)
    def Put(self, *args): return _core.Vector3Array_Put(self, *args)
    def Push(self, *args): return _core.Vector3Array_Push(self, *args)
    def Merge(self, *args): return _core.Vector3Array_Merge(self, *args)
    def MergeSmart(self, *args): return _core.Vector3Array_MergeSmart(self, *args)
    def Pop(self): return _core.Vector3Array_Pop(self)
    def Top(self, *args): return _core.Vector3Array_Top(self, *args)
    def Insert(self, *args): return _core.Vector3Array_Insert(self, *args)
    def Contains(self, *args): return _core.Vector3Array_Contains(self, *args)
    def DeleteAll(self): return _core.Vector3Array_DeleteAll(self)
    def Truncate(self, *args): return _core.Vector3Array_Truncate(self, *args)
    def Empty(self): return _core.Vector3Array_Empty(self)
    def IsEmpty(self): return _core.Vector3Array_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _core.Vector3Array_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _core.Vector3Array_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _core.Vector3Array_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _core.Vector3Array_DeleteRange(self, *args)
    def __eq__(self, *args): return _core.Vector3Array___eq__(self, *args)
    def __ne__(self, *args): return _core.Vector3Array___ne__(self, *args)
    def GetAllocator(self): return _core.Vector3Array_GetAllocator(self)
Vector3Array_swigregister = _core.Vector3Array_swigregister
Vector3Array_swigregister(Vector3Array)

class Vector3DirtyAccessArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Vector3DirtyAccessArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetArray(self, *args): return _core.Vector3DirtyAccessArray_GetArray(self, *args)
    def GetArrayCopy(self): return _core.Vector3DirtyAccessArray_GetArrayCopy(self)
    def Detach(self): return _core.Vector3DirtyAccessArray_Detach(self)
    __swig_destroy__ = _core.delete_Vector3DirtyAccessArray
    __del__ = lambda self : None;
Vector3DirtyAccessArray_swigregister = _core.Vector3DirtyAccessArray_swigregister
Vector3DirtyAccessArray_swigregister(Vector3DirtyAccessArray)

class Vector4Array(CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_Vector4Array
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _core.new_Vector4Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _core.Vector4Array_GetSize(self)
    def Get(self, *args): return _core.Vector4Array_Get(self, *args)
    def Put(self, *args): return _core.Vector4Array_Put(self, *args)
    def Push(self, *args): return _core.Vector4Array_Push(self, *args)
    def Merge(self, *args): return _core.Vector4Array_Merge(self, *args)
    def MergeSmart(self, *args): return _core.Vector4Array_MergeSmart(self, *args)
    def Pop(self): return _core.Vector4Array_Pop(self)
    def Top(self, *args): return _core.Vector4Array_Top(self, *args)
    def Insert(self, *args): return _core.Vector4Array_Insert(self, *args)
    def Contains(self, *args): return _core.Vector4Array_Contains(self, *args)
    def DeleteAll(self): return _core.Vector4Array_DeleteAll(self)
    def Truncate(self, *args): return _core.Vector4Array_Truncate(self, *args)
    def Empty(self): return _core.Vector4Array_Empty(self)
    def IsEmpty(self): return _core.Vector4Array_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _core.Vector4Array_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _core.Vector4Array_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _core.Vector4Array_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _core.Vector4Array_DeleteRange(self, *args)
    def __eq__(self, *args): return _core.Vector4Array___eq__(self, *args)
    def __ne__(self, *args): return _core.Vector4Array___ne__(self, *args)
    def GetAllocator(self): return _core.Vector4Array_GetAllocator(self)
Vector4Array_swigregister = _core.Vector4Array_swigregister
Vector4Array_swigregister(Vector4Array)

class Vector4DirtyAccessArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Vector4DirtyAccessArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetArray(self, *args): return _core.Vector4DirtyAccessArray_GetArray(self, *args)
    def GetArrayCopy(self): return _core.Vector4DirtyAccessArray_GetArrayCopy(self)
    def Detach(self): return _core.Vector4DirtyAccessArray_Detach(self)
    __swig_destroy__ = _core.delete_Vector4DirtyAccessArray
    __del__ = lambda self : None;
Vector4DirtyAccessArray_swigregister = _core.Vector4DirtyAccessArray_swigregister
Vector4DirtyAccessArray_swigregister(Vector4DirtyAccessArray)

class UIntArray(CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_UIntArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _core.new_UIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _core.UIntArray_GetSize(self)
    def Get(self, *args): return _core.UIntArray_Get(self, *args)
    def Put(self, *args): return _core.UIntArray_Put(self, *args)
    def Push(self, *args): return _core.UIntArray_Push(self, *args)
    def Merge(self, *args): return _core.UIntArray_Merge(self, *args)
    def MergeSmart(self, *args): return _core.UIntArray_MergeSmart(self, *args)
    def Pop(self): return _core.UIntArray_Pop(self)
    def Top(self, *args): return _core.UIntArray_Top(self, *args)
    def Insert(self, *args): return _core.UIntArray_Insert(self, *args)
    def Contains(self, *args): return _core.UIntArray_Contains(self, *args)
    def DeleteAll(self): return _core.UIntArray_DeleteAll(self)
    def Truncate(self, *args): return _core.UIntArray_Truncate(self, *args)
    def Empty(self): return _core.UIntArray_Empty(self)
    def IsEmpty(self): return _core.UIntArray_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _core.UIntArray_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _core.UIntArray_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _core.UIntArray_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _core.UIntArray_DeleteRange(self, *args)
    def __eq__(self, *args): return _core.UIntArray___eq__(self, *args)
    def __ne__(self, *args): return _core.UIntArray___ne__(self, *args)
    def GetAllocator(self): return _core.UIntArray_GetAllocator(self)
UIntArray_swigregister = _core.UIntArray_swigregister
UIntArray_swigregister(UIntArray)

class UIntDirtyAccessArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_UIntDirtyAccessArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetArray(self, *args): return _core.UIntDirtyAccessArray_GetArray(self, *args)
    def GetArrayCopy(self): return _core.UIntDirtyAccessArray_GetArrayCopy(self)
    def Detach(self): return _core.UIntDirtyAccessArray_Detach(self)
    __swig_destroy__ = _core.delete_UIntDirtyAccessArray
    __del__ = lambda self : None;
UIntDirtyAccessArray_swigregister = _core.UIntDirtyAccessArray_swigregister
UIntDirtyAccessArray_swigregister(UIntDirtyAccessArray)


def SetCoreSCFPointer(*args):
  return _core.SetCoreSCFPointer(*args)
SetCoreSCFPointer = _core.SetCoreSCFPointer

def scfCompatibleVersion(*args):
  return _core.scfCompatibleVersion(*args)
scfCompatibleVersion = _core.scfCompatibleVersion
class scfInterfaceMetadata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    interfaceName = _swig_property(_core.scfInterfaceMetadata_interfaceName_get)
    interfaceID = _swig_property(_core.scfInterfaceMetadata_interfaceID_get, _core.scfInterfaceMetadata_interfaceID_set)
    interfaceVersion = _swig_property(_core.scfInterfaceMetadata_interfaceVersion_get, _core.scfInterfaceMetadata_interfaceVersion_set)
    def __init__(self): 
        this = _core.new_scfInterfaceMetadata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_scfInterfaceMetadata
    __del__ = lambda self : None;
scfInterfaceMetadata_swigregister = _core.scfInterfaceMetadata_swigregister
scfInterfaceMetadata_swigregister(scfInterfaceMetadata)

class scfInterfaceMetadataList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    metadata = _swig_property(_core.scfInterfaceMetadataList_metadata_get, _core.scfInterfaceMetadataList_metadata_set)
    metadataCount = _swig_property(_core.scfInterfaceMetadataList_metadataCount_get, _core.scfInterfaceMetadataList_metadataCount_set)
    def __len__(self): return _core.scfInterfaceMetadataList___len__(self)
    def __getitem__(self, *args): return _core.scfInterfaceMetadataList___getitem__(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __init__(self): 
        this = _core.new_scfInterfaceMetadataList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_scfInterfaceMetadataList
    __del__ = lambda self : None;
scfInterfaceMetadataList_swigregister = _core.scfInterfaceMetadataList_swigregister
scfInterfaceMetadataList_swigregister(scfInterfaceMetadataList)

class iBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _core.iBase_IncRef(self)
    def DecRef(self): return _core.iBase_DecRef(self)
    def GetRefCount(self): return _core.iBase_GetRefCount(self)
    def AddRefOwner(self, *args): return _core.iBase_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _core.iBase_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _core.iBase_GetInterfaceMetadata(self)
    def QueryInterface(self, *args): return _core.iBase_QueryInterface(self, *args)
    scfGetVersion = staticmethod(_core.iBase_scfGetVersion)
    def __eq__(self,other):
        if isinstance(other,iBase):
            return self.this == other.this
        return False
    def __ne__(self,other):
        if isinstance(other,iBase):
            return not self.this == other.this
        return True

iBase_swigregister = _core.iBase_swigregister
iBase_swigregister(iBase)

def iBase_scfGetVersion():
  return _core.iBase_scfGetVersion()
iBase_scfGetVersion = _core.iBase_scfGetVersion

class iSCF(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SCF = _swig_property(_core.iSCF_SCF_get)
    def RegisterClasses(self, *args): return _core.iSCF_RegisterClasses(self, *args)
    def ClassRegistered(self, *args): return _core.iSCF_ClassRegistered(self, *args)
    def CreateInstance(self, *args): return _core.iSCF_CreateInstance(self, *args)
    def GetClassDescription(self, *args): return _core.iSCF_GetClassDescription(self, *args)
    def GetClassDependencies(self, *args): return _core.iSCF_GetClassDependencies(self, *args)
    def GetPluginMetadata(self, *args): return _core.iSCF_GetPluginMetadata(self, *args)
    def UnloadUnusedModules(self): return _core.iSCF_UnloadUnusedModules(self)
    def RegisterClass(self, *args): return _core.iSCF_RegisterClass(self, *args)
    def RegisterFactoryFunc(self, *args): return _core.iSCF_RegisterFactoryFunc(self, *args)
    def UnregisterClass(self, *args): return _core.iSCF_UnregisterClass(self, *args)
    def GetInterfaceName(self, *args): return _core.iSCF_GetInterfaceName(self, *args)
    def GetInterfaceID(self, *args): return _core.iSCF_GetInterfaceID(self, *args)
    def Finish(self): return _core.iSCF_Finish(self)
    def QueryClassList(self, *args): return _core.iSCF_QueryClassList(self, *args)
    def ScanPluginsPath(self, *args): return _core.iSCF_ScanPluginsPath(self, *args)
    def RegisterPlugin(self, *args): return _core.iSCF_RegisterPlugin(self, *args)
    scfGetVersion = staticmethod(_core.iSCF_scfGetVersion)
    __swig_destroy__ = _core.delete_iSCF
    __del__ = lambda self : None;
iSCF_swigregister = _core.iSCF_swigregister
iSCF_swigregister(iSCF)

def iSCF_scfGetVersion():
  return _core.iSCF_scfGetVersion()
iSCF_scfGetVersion = _core.iSCF_scfGetVersion

SCF_STATIC_CLASS_CONTEXT = _core.SCF_STATIC_CLASS_CONTEXT
class iFactory(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateInstance(self): return _core.iFactory_CreateInstance(self)
    def TryUnload(self): return _core.iFactory_TryUnload(self)
    def QueryDescription(self): return _core.iFactory_QueryDescription(self)
    def QueryDependencies(self): return _core.iFactory_QueryDependencies(self)
    def QueryClassID(self): return _core.iFactory_QueryClassID(self)
    def QueryModuleName(self): return _core.iFactory_QueryModuleName(self)
    scfGetVersion = staticmethod(_core.iFactory_scfGetVersion)
    __swig_destroy__ = _core.delete_iFactory
    __del__ = lambda self : None;
iFactory_swigregister = _core.iFactory_swigregister
iFactory_swigregister(iFactory)

def iFactory_scfGetVersion():
  return _core.iFactory_scfGetVersion()
iFactory_scfGetVersion = _core.iFactory_scfGetVersion

SCF_VERBOSE_NONE = _core.SCF_VERBOSE_NONE
SCF_VERBOSE_PLUGIN_SCAN = _core.SCF_VERBOSE_PLUGIN_SCAN
SCF_VERBOSE_PLUGIN_LOAD = _core.SCF_VERBOSE_PLUGIN_LOAD
SCF_VERBOSE_PLUGIN_REGISTER = _core.SCF_VERBOSE_PLUGIN_REGISTER
SCF_VERBOSE_CLASS_REGISTER = _core.SCF_VERBOSE_CLASS_REGISTER
SCF_VERBOSE_ALL = _core.SCF_VERBOSE_ALL

def scfRegisterStaticClasses(*args):
  return _core.scfRegisterStaticClasses(*args)
scfRegisterStaticClasses = _core.scfRegisterStaticClasses

def scfRegisterStaticFactoryFunc(*args):
  return _core.scfRegisterStaticFactoryFunc(*args)
scfRegisterStaticFactoryFunc = _core.scfRegisterStaticFactoryFunc
class iThreadReturn(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IsFinished(self): return _core.iThreadReturn_IsFinished(self)
    def WasSuccessful(self): return _core.iThreadReturn_WasSuccessful(self)
    def GetResultPtr(self): return _core.iThreadReturn_GetResultPtr(self)
    def GetResultRefPtr(self): return _core.iThreadReturn_GetResultRefPtr(self)
    def MarkFinished(self): return _core.iThreadReturn_MarkFinished(self)
    def MarkSuccessful(self): return _core.iThreadReturn_MarkSuccessful(self)
    def SetResult(self, *args): return _core.iThreadReturn_SetResult(self, *args)
    def Copy(self, *args): return _core.iThreadReturn_Copy(self, *args)
    def Wait(self, process = True): return _core.iThreadReturn_Wait(self, process)
    def SetWaitPtrs(self, *args): return _core.iThreadReturn_SetWaitPtrs(self, *args)
    def SetJob(self, *args): return _core.iThreadReturn_SetJob(self, *args)
    def GetJob(self): return _core.iThreadReturn_GetJob(self)
    __swig_destroy__ = _core.delete_iThreadReturn
    __del__ = lambda self : None;
iThreadReturn_swigregister = _core.iThreadReturn_swigregister
iThreadReturn_swigregister(iThreadReturn)

def scfRegisterStaticClass(*args):
  return _core.scfRegisterStaticClass(*args)
scfRegisterStaticClass = _core.scfRegisterStaticClass

THREADED = _core.THREADED
THREADEDL = _core.THREADEDL
HIGH = _core.HIGH
MED = _core.MED
LOW = _core.LOW
class iThreadManager(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Init(self, *args): return _core.iThreadManager_Init(self, *args)
    def Process(self, num = 1): return _core.iThreadManager_Process(self, num)
    def PushToQueue(self, *args): return _core.iThreadManager_PushToQueue(self, *args)
    def Wait(self, *args): return _core.iThreadManager_Wait(self, *args)
    def RunNow(self, *args): return _core.iThreadManager_RunNow(self, *args)
    def GetThreadCount(self): return _core.iThreadManager_GetThreadCount(self)
    def SetAlwaysRunNow(self, *args): return _core.iThreadManager_SetAlwaysRunNow(self, *args)
    def GetAlwaysRunNow(self): return _core.iThreadManager_GetAlwaysRunNow(self)
    def Exiting(self): return _core.iThreadManager_Exiting(self)
    def ProcessAll(self): return _core.iThreadManager_ProcessAll(self)
    __swig_destroy__ = _core.delete_iThreadManager
    __del__ = lambda self : None;
iThreadManager_swigregister = _core.iThreadManager_swigregister
iThreadManager_swigregister(iThreadManager)

CS_DBGHELP_BENCHMARK = _core.CS_DBGHELP_BENCHMARK
CS_DBGHELP_TXTDUMP = _core.CS_DBGHELP_TXTDUMP
CS_DBGHELP_GFXDUMP = _core.CS_DBGHELP_GFXDUMP
CS_DBGHELP_STATETEST = _core.CS_DBGHELP_STATETEST
class iDebugHelper(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSupportedTests(self): return _core.iDebugHelper_GetSupportedTests(self)
    def StateTest(self): return _core.iDebugHelper_StateTest(self)
    def Benchmark(self, *args): return _core.iDebugHelper_Benchmark(self, *args)
    def Dump(self, *args): return _core.iDebugHelper_Dump(self, *args)
    def DebugCommand(self, *args): return _core.iDebugHelper_DebugCommand(self, *args)
    scfGetVersion = staticmethod(_core.iDebugHelper_scfGetVersion)
    __swig_destroy__ = _core.delete_iDebugHelper
    __del__ = lambda self : None;
iDebugHelper_swigregister = _core.iDebugHelper_swigregister
iDebugHelper_swigregister(iDebugHelper)

def iDebugHelper_scfGetVersion():
  return _core.iDebugHelper_scfGetVersion()
iDebugHelper_scfGetVersion = _core.iDebugHelper_scfGetVersion

class iCommandLineParser(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Initialize(self, *args): return _core.iCommandLineParser_Initialize(self, *args)
    def Reset(self): return _core.iCommandLineParser_Reset(self)
    def GetName(self, iIndex = 0): return _core.iCommandLineParser_GetName(self, iIndex)
    def AddOption(self, *args): return _core.iCommandLineParser_AddOption(self, *args)
    def AddName(self, *args): return _core.iCommandLineParser_AddName(self, *args)
    def ReplaceOption(self, *args): return _core.iCommandLineParser_ReplaceOption(self, *args)
    def ReplaceName(self, *args): return _core.iCommandLineParser_ReplaceName(self, *args)
    def GetBoolOption(self, *args): return _core.iCommandLineParser_GetBoolOption(self, *args)
    def GetResourceDir(self): return _core.iCommandLineParser_GetResourceDir(self)
    def GetAppDir(self): return _core.iCommandLineParser_GetAppDir(self)
    def GetAppPath(self): return _core.iCommandLineParser_GetAppPath(self)
    def GetOptionName(self, *args): return _core.iCommandLineParser_GetOptionName(self, *args)
    def GetOption(self, *args): return _core.iCommandLineParser_GetOption(self, *args)
    scfGetVersion = staticmethod(_core.iCommandLineParser_scfGetVersion)
    __swig_destroy__ = _core.delete_iCommandLineParser
    __del__ = lambda self : None;
iCommandLineParser_swigregister = _core.iCommandLineParser_swigregister
iCommandLineParser_swigregister(iCommandLineParser)

def iCommandLineParser_scfGetVersion():
  return _core.iCommandLineParser_scfGetVersion()
iCommandLineParser_scfGetVersion = _core.iCommandLineParser_scfGetVersion

class csColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    red = _swig_property(_core.csColor_red_get, _core.csColor_red_set)
    green = _swig_property(_core.csColor_green_get, _core.csColor_green_set)
    blue = _swig_property(_core.csColor_blue_get, _core.csColor_blue_set)
    def __init__(self, *args): 
        this = _core.new_csColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _core.csColor_Set(self, *args)
    def Clamp(self, *args): return _core.csColor_Clamp(self, *args)
    def ClampDown(self): return _core.csColor_ClampDown(self)
    def IsBlack(self, *args): return _core.csColor_IsBlack(self, *args)
    def assign(self, *args): return _core.csColor_assign(self, *args)
    def __iadd__(self, *args): return _core.csColor___iadd__(self, *args)
    def __isub__(self, *args): return _core.csColor___isub__(self, *args)
    def __imul__(self, *args): return _core.csColor___imul__(self, *args)
    def __mul__(self, *args): return _core.csColor___mul__(self, *args)
    def __eq__(self, *args): return _core.csColor___eq__(self, *args)
    def __ne__(self, *args): return _core.csColor___ne__(self, *args)
    def Add(self, *args): return _core.csColor_Add(self, *args)
    def Subtract(self, *args): return _core.csColor_Subtract(self, *args)
    def Luminance(self): return _core.csColor_Luminance(self)
    def __add__(self, *args): return _core.csColor___add__(self, *args)
    def __sub__(self, *args): return _core.csColor___sub__(self, *args)
    def __rmul__(self, *args): return _core.csColor___rmul__(self, *args)
    __swig_destroy__ = _core.delete_csColor
    __del__ = lambda self : None;
csColor_swigregister = _core.csColor_swigregister
csColor_swigregister(csColor)

class csColor4(csColor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    alpha = _swig_property(_core.csColor4_alpha_get, _core.csColor4_alpha_set)
    def __init__(self, *args): 
        this = _core.new_csColor4(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _core.csColor4_Set(self, *args)
    def assign(self, *args): return _core.csColor4_assign(self, *args)
    def __imul__(self, *args): return _core.csColor4___imul__(self, *args)
    def __iadd__(self, *args): return _core.csColor4___iadd__(self, *args)
    def __isub__(self, *args): return _core.csColor4___isub__(self, *args)
    def __eq__(self, *args): return _core.csColor4___eq__(self, *args)
    def __ne__(self, *args): return _core.csColor4___ne__(self, *args)
    __swig_destroy__ = _core.delete_csColor4
    __del__ = lambda self : None;
csColor4_swigregister = _core.csColor4_swigregister
csColor4_swigregister(csColor4)

class csCommandLineHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_csCommandLineHelper()
        try: self.this.append(this)
        except: self.this = this
    PrintTitle = staticmethod(_core.csCommandLineHelper_PrintTitle)
    PrintOption = staticmethod(_core.csCommandLineHelper_PrintOption)
    Help = staticmethod(_core.csCommandLineHelper_Help)
    CheckHelp = staticmethod(_core.csCommandLineHelper_CheckHelp)
    def AddCommandLineSection(self, *args): return _core.csCommandLineHelper_AddCommandLineSection(self, *args)
    def AddCommandLineOption(self, *args): return _core.csCommandLineHelper_AddCommandLineOption(self, *args)
    def AddCommandLineExample(self, *args): return _core.csCommandLineHelper_AddCommandLineExample(self, *args)
    def PrintApplicationHelp(self, *args): return _core.csCommandLineHelper_PrintApplicationHelp(self, *args)
    __swig_destroy__ = _core.delete_csCommandLineHelper
    __del__ = lambda self : None;
csCommandLineHelper_swigregister = _core.csCommandLineHelper_swigregister
csCommandLineHelper_swigregister(csCommandLineHelper)

def csCommandLineHelper_PrintTitle(*args):
  return _core.csCommandLineHelper_PrintTitle(*args)
csCommandLineHelper_PrintTitle = _core.csCommandLineHelper_PrintTitle

def csCommandLineHelper_PrintOption(*args):
  return _core.csCommandLineHelper_PrintOption(*args)
csCommandLineHelper_PrintOption = _core.csCommandLineHelper_PrintOption

def csCommandLineHelper_Help(*args):
  return _core.csCommandLineHelper_Help(*args)
csCommandLineHelper_Help = _core.csCommandLineHelper_Help

def csCommandLineHelper_CheckHelp(*args):
  return _core.csCommandLineHelper_CheckHelp(*args)
csCommandLineHelper_CheckHelp = _core.csCommandLineHelper_CheckHelp

class csFlags(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, value = 0): 
        this = _core.new_csFlags(value)
        try: self.this.append(this)
        except: self.this = this
    def SetAll(self, *args): return _core.csFlags_SetAll(self, *args)
    def Reset(self, *args): return _core.csFlags_Reset(self, *args)
    def Set(self, *args): return _core.csFlags_Set(self, *args)
    def SetBool(self, *args): return _core.csFlags_SetBool(self, *args)
    def Get(self): return _core.csFlags_Get(self)
    def Check(self, *args): return _core.csFlags_Check(self, *args)
    def CheckAll(self, *args): return _core.csFlags_CheckAll(self, *args)
    def __eq__(self, *args): return _core.csFlags___eq__(self, *args)
    def __ne__(self, *args): return _core.csFlags___ne__(self, *args)
    def __and__(self, *args): return _core.csFlags___and__(self, *args)
    def __invert__(self): return _core.csFlags___invert__(self)
    __swig_destroy__ = _core.delete_csFlags
    __del__ = lambda self : None;
csFlags_swigregister = _core.csFlags_swigregister
csFlags_swigregister(csFlags)

class iGeneralStringSetBase(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Request(self, *args): return _core.iGeneralStringSetBase_Request(self, *args)
    def Contains(self, *args): return _core.iGeneralStringSetBase_Contains(self, *args)
    def Delete(self, *args): return _core.iGeneralStringSetBase_Delete(self, *args)
    def Empty(self): return _core.iGeneralStringSetBase_Empty(self)
    def Clear(self): return _core.iGeneralStringSetBase_Clear(self)
    def GetSize(self): return _core.iGeneralStringSetBase_GetSize(self)
    def IsEmpty(self): return _core.iGeneralStringSetBase_IsEmpty(self)
    __swig_destroy__ = _core.delete_iGeneralStringSetBase
    __del__ = lambda self : None;
iGeneralStringSetBase_swigregister = _core.iGeneralStringSetBase_swigregister
iGeneralStringSetBase_swigregister(iGeneralStringSetBase)

class iStringSet(iGeneralStringSetBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    scfGetVersion = staticmethod(_core.iStringSet_scfGetVersion)
    __swig_destroy__ = _core.delete_iStringSet
    __del__ = lambda self : None;
iStringSet_swigregister = _core.iStringSet_swigregister
iStringSet_swigregister(iStringSet)

def iStringSet_scfGetVersion():
  return _core.iStringSet_scfGetVersion()
iStringSet_scfGetVersion = _core.iStringSet_scfGetVersion

class csStringIDSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, size = 23, grow_rate = 5, max_size = 20000): 
        this = _core.new_csStringIDSet(size, grow_rate, max_size)
        try: self.this.append(this)
        except: self.this = this
    def Add(self, *args): return _core.csStringIDSet_Add(self, *args)
    def AddNoTest(self, *args): return _core.csStringIDSet_AddNoTest(self, *args)
    def Contains(self, *args): return _core.csStringIDSet_Contains(self, *args)
    def In(self, *args): return _core.csStringIDSet_In(self, *args)
    def DeleteAll(self): return _core.csStringIDSet_DeleteAll(self)
    def Empty(self): return _core.csStringIDSet_Empty(self)
    def Delete(self, *args): return _core.csStringIDSet_Delete(self, *args)
    def Union(self, *args): return _core.csStringIDSet_Union(self, *args)
    def TestIntersect(self, *args): return _core.csStringIDSet_TestIntersect(self, *args)
    def Subtract(self, *args): return _core.csStringIDSet_Subtract(self, *args)
    def GetSize(self): return _core.csStringIDSet_GetSize(self)
    def IsEmpty(self): return _core.csStringIDSet_IsEmpty(self)
    def __len__(self): return _core.csStringIDSet___len__(self)
    def __contains__(self, *args): return _core.csStringIDSet___contains__(self, *args)
    def append(self, *args): return _core.csStringIDSet_append(self, *args)
    def __delitem__(self, *args): return _core.csStringIDSet___delitem__(self, *args)
    __swig_destroy__ = _core.delete_csStringIDSet
    __del__ = lambda self : None;
csStringIDSet_swigregister = _core.csStringIDSet_swigregister
csStringIDSet_swigregister(csStringIDSet)

def Union(*args):
  return _core.Union(*args)
Union = _core.Union

def Intersect(*args):
  return _core.Intersect(*args)
Intersect = _core.Intersect

def Subtract(*args):
  return _core.Subtract(*args)
Subtract = _core.Subtract

class csRefCount(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_csRefCount(*args)
        try: self.this.append(this)
        except: self.this = this
    def IncRef(self): return _core.csRefCount_IncRef(self)
    def DecRef(self): return _core.csRefCount_DecRef(self)
    def GetRefCount(self): return _core.csRefCount_GetRefCount(self)
csRefCount_swigregister = _core.csRefCount_swigregister
csRefCount_swigregister(csRefCount)

class InternalRefCount(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_InternalRefCount()
        try: self.this.append(this)
        except: self.this = this
    def InternalIncRef(self): return _core.InternalRefCount_InternalIncRef(self)
    def InternalDecRef(self): return _core.InternalRefCount_InternalDecRef(self)
    def GetInternalRefCount(self): return _core.InternalRefCount_GetInternalRefCount(self)
InternalRefCount_swigregister = _core.InternalRefCount_swigregister
InternalRefCount_swigregister(InternalRefCount)

class AtomicRefCount(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_AtomicRefCount(*args)
        try: self.this.append(this)
        except: self.this = this
    def IncRef(self): return _core.AtomicRefCount_IncRef(self)
    def DecRef(self): return _core.AtomicRefCount_DecRef(self)
    def GetRefCount(self): return _core.AtomicRefCount_GetRefCount(self)
AtomicRefCount_swigregister = _core.AtomicRefCount_swigregister
AtomicRefCount_swigregister(AtomicRefCount)


def csDefaultRunLoop(*args):
  return _core.csDefaultRunLoop(*args)
csDefaultRunLoop = _core.csDefaultRunLoop

def csPlatformStartup(*args):
  return _core.csPlatformStartup(*args)
csPlatformStartup = _core.csPlatformStartup

def csPlatformShutdown(*args):
  return _core.csPlatformShutdown(*args)
csPlatformShutdown = _core.csPlatformShutdown

def csPrintf(*args):
  return _core.csPrintf(*args)
csPrintf = _core.csPrintf

def csFPrintf(*args):
  return _core.csFPrintf(*args)
csFPrintf = _core.csFPrintf

def csPrintfErr(*args):
  return _core.csPrintfErr(*args)
csPrintfErr = _core.csPrintfErr

def csGetTicks():
  return _core.csGetTicks()
csGetTicks = _core.csGetTicks

def csGetMicroTicks():
  return _core.csGetMicroTicks()
csGetMicroTicks = _core.csGetMicroTicks

def csSleep(*args):
  return _core.csSleep(*args)
csSleep = _core.csSleep

def csGetUsername():
  return _core.csGetUsername()
csGetUsername = _core.csGetUsername
class csPluginRequest(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_csPluginRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _core.csPluginRequest_assign(self, *args)
    def __eq__(self, *args): return _core.csPluginRequest___eq__(self, *args)
    def __ne__(self, *args): return _core.csPluginRequest___ne__(self, *args)
    def GetClassName(self): return _core.csPluginRequest_GetClassName(self)
    def GetInterfaceName(self): return _core.csPluginRequest_GetInterfaceName(self)
    def GetInterfaceID(self): return _core.csPluginRequest_GetInterfaceID(self)
    def GetInterfaceVersion(self): return _core.csPluginRequest_GetInterfaceVersion(self)
    __swig_destroy__ = _core.delete_csPluginRequest
    __del__ = lambda self : None;
csPluginRequest_swigregister = _core.csPluginRequest_swigregister
csPluginRequest_swigregister(csPluginRequest)

def csGetPlatformConfigPath(*args):
  return _core.csGetPlatformConfigPath(*args)
csGetPlatformConfigPath = _core.csGetPlatformConfigPath

class csInitializer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _CreateEnvironment2 = staticmethod(_core.csInitializer__CreateEnvironment2)
    _CreateEnvironment = staticmethod(_core.csInitializer__CreateEnvironment)
    _InitializeSCF = staticmethod(_core.csInitializer__InitializeSCF)
    CreateObjectRegistry = staticmethod(_core.csInitializer_CreateObjectRegistry)
    CreatePluginManager = staticmethod(_core.csInitializer_CreatePluginManager)
    CreateEventQueue = staticmethod(_core.csInitializer_CreateEventQueue)
    CreateThreadManager = staticmethod(_core.csInitializer_CreateThreadManager)
    CreateVirtualClock = staticmethod(_core.csInitializer_CreateVirtualClock)
    CreateCommandLineParser = staticmethod(_core.csInitializer_CreateCommandLineParser)
    CreateVerbosityManager = staticmethod(_core.csInitializer_CreateVerbosityManager)
    CreateConfigManager = staticmethod(_core.csInitializer_CreateConfigManager)
    CreateInputDrivers = staticmethod(_core.csInitializer_CreateInputDrivers)
    CreateStringSet = staticmethod(_core.csInitializer_CreateStringSet)
    CreateSystemOpenManager = staticmethod(_core.csInitializer_CreateSystemOpenManager)
    SetupConfigManager = staticmethod(_core.csInitializer_SetupConfigManager)
    SetupVFS = staticmethod(_core.csInitializer_SetupVFS)
    _RequestPlugins = staticmethod(_core.csInitializer__RequestPlugins)
    OpenApplication = staticmethod(_core.csInitializer_OpenApplication)
    CloseApplication = staticmethod(_core.csInitializer_CloseApplication)
    _SetupEventHandler = staticmethod(_core.csInitializer__SetupEventHandler)
    DestroyApplication = staticmethod(_core.csInitializer_DestroyApplication)
    GetDefaultAppID = staticmethod(_core.csInitializer_GetDefaultAppID)
    def __init__(self): 
        this = _core.new_csInitializer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csInitializer
    __del__ = lambda self : None;
csInitializer_swigregister = _core.csInitializer_swigregister
csInitializer_swigregister(csInitializer)

def csInitializer__CreateEnvironment2(*args):
  return _core.csInitializer__CreateEnvironment2(*args)
csInitializer__CreateEnvironment2 = _core.csInitializer__CreateEnvironment2

def csInitializer__CreateEnvironment(*args):
  return _core.csInitializer__CreateEnvironment(*args)
csInitializer__CreateEnvironment = _core.csInitializer__CreateEnvironment

def csInitializer__InitializeSCF(*args):
  return _core.csInitializer__InitializeSCF(*args)
csInitializer__InitializeSCF = _core.csInitializer__InitializeSCF

def csInitializer_CreateObjectRegistry():
  return _core.csInitializer_CreateObjectRegistry()
csInitializer_CreateObjectRegistry = _core.csInitializer_CreateObjectRegistry

def csInitializer_CreatePluginManager(*args):
  return _core.csInitializer_CreatePluginManager(*args)
csInitializer_CreatePluginManager = _core.csInitializer_CreatePluginManager

def csInitializer_CreateEventQueue(*args):
  return _core.csInitializer_CreateEventQueue(*args)
csInitializer_CreateEventQueue = _core.csInitializer_CreateEventQueue

def csInitializer_CreateThreadManager(*args):
  return _core.csInitializer_CreateThreadManager(*args)
csInitializer_CreateThreadManager = _core.csInitializer_CreateThreadManager

def csInitializer_CreateVirtualClock(*args):
  return _core.csInitializer_CreateVirtualClock(*args)
csInitializer_CreateVirtualClock = _core.csInitializer_CreateVirtualClock

def csInitializer_CreateCommandLineParser(*args):
  return _core.csInitializer_CreateCommandLineParser(*args)
csInitializer_CreateCommandLineParser = _core.csInitializer_CreateCommandLineParser

def csInitializer_CreateVerbosityManager(*args):
  return _core.csInitializer_CreateVerbosityManager(*args)
csInitializer_CreateVerbosityManager = _core.csInitializer_CreateVerbosityManager

def csInitializer_CreateConfigManager(*args):
  return _core.csInitializer_CreateConfigManager(*args)
csInitializer_CreateConfigManager = _core.csInitializer_CreateConfigManager

def csInitializer_CreateInputDrivers(*args):
  return _core.csInitializer_CreateInputDrivers(*args)
csInitializer_CreateInputDrivers = _core.csInitializer_CreateInputDrivers

def csInitializer_CreateStringSet(*args):
  return _core.csInitializer_CreateStringSet(*args)
csInitializer_CreateStringSet = _core.csInitializer_CreateStringSet

def csInitializer_CreateSystemOpenManager(*args):
  return _core.csInitializer_CreateSystemOpenManager(*args)
csInitializer_CreateSystemOpenManager = _core.csInitializer_CreateSystemOpenManager

def csInitializer_SetupConfigManager(*args):
  return _core.csInitializer_SetupConfigManager(*args)
csInitializer_SetupConfigManager = _core.csInitializer_SetupConfigManager

def csInitializer_SetupVFS(*args):
  return _core.csInitializer_SetupVFS(*args)
csInitializer_SetupVFS = _core.csInitializer_SetupVFS

def csInitializer__RequestPlugins(*args):
  return _core.csInitializer__RequestPlugins(*args)
csInitializer__RequestPlugins = _core.csInitializer__RequestPlugins

def csInitializer_OpenApplication(*args):
  return _core.csInitializer_OpenApplication(*args)
csInitializer_OpenApplication = _core.csInitializer_OpenApplication

def csInitializer_CloseApplication(*args):
  return _core.csInitializer_CloseApplication(*args)
csInitializer_CloseApplication = _core.csInitializer_CloseApplication

def csInitializer__SetupEventHandler(*args):
  return _core.csInitializer__SetupEventHandler(*args)
csInitializer__SetupEventHandler = _core.csInitializer__SetupEventHandler

def csInitializer_DestroyApplication(*args):
  return _core.csInitializer_DestroyApplication(*args)
csInitializer_DestroyApplication = _core.csInitializer_DestroyApplication

def csInitializer_GetDefaultAppID():
  return _core.csInitializer_GetDefaultAppID()
csInitializer_GetDefaultAppID = _core.csInitializer_GetDefaultAppID

class csPluginRequestArray(CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_csPluginRequestArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _core.new_csPluginRequestArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _core.csPluginRequestArray_GetSize(self)
    def Get(self, *args): return _core.csPluginRequestArray_Get(self, *args)
    def Push(self, *args): return _core.csPluginRequestArray_Push(self, *args)
    def Merge(self, *args): return _core.csPluginRequestArray_Merge(self, *args)
    def MergeSmart(self, *args): return _core.csPluginRequestArray_MergeSmart(self, *args)
    def Pop(self): return _core.csPluginRequestArray_Pop(self)
    def Top(self): return _core.csPluginRequestArray_Top(self)
    def Insert(self, *args): return _core.csPluginRequestArray_Insert(self, *args)
    def Contains(self, *args): return _core.csPluginRequestArray_Contains(self, *args)
    def Truncate(self, *args): return _core.csPluginRequestArray_Truncate(self, *args)
    def Empty(self): return _core.csPluginRequestArray_Empty(self)
    def IsEmpty(self): return _core.csPluginRequestArray_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _core.csPluginRequestArray_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _core.csPluginRequestArray_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _core.csPluginRequestArray_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _core.csPluginRequestArray_DeleteRange(self, *args)
    def __eq__(self, *args): return _core.csPluginRequestArray___eq__(self, *args)
    def __ne__(self, *args): return _core.csPluginRequestArray___ne__(self, *args)
    def GetAllocator(self): return _core.csPluginRequestArray_GetAllocator(self)
csPluginRequestArray_swigregister = _core.csPluginRequestArray_swigregister
csPluginRequestArray_swigregister(csPluginRequestArray)

CS_REPORTER_SEVERITY_BUG = _core.CS_REPORTER_SEVERITY_BUG
CS_REPORTER_SEVERITY_ERROR = _core.CS_REPORTER_SEVERITY_ERROR
CS_REPORTER_SEVERITY_WARNING = _core.CS_REPORTER_SEVERITY_WARNING
CS_REPORTER_SEVERITY_NOTIFY = _core.CS_REPORTER_SEVERITY_NOTIFY
CS_REPORTER_SEVERITY_DEBUG = _core.CS_REPORTER_SEVERITY_DEBUG
class iReporterListener(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Report(self, *args): return _core.iReporterListener_Report(self, *args)
    def ReportWait(self, *args): return _core.iReporterListener_ReportWait(self, *args)
    scfGetVersion = staticmethod(_core.iReporterListener_scfGetVersion)
    __swig_destroy__ = _core.delete_iReporterListener
    __del__ = lambda self : None;
iReporterListener_swigregister = _core.iReporterListener_swigregister
iReporterListener_swigregister(iReporterListener)

def iReporterListener_scfGetVersion():
  return _core.iReporterListener_scfGetVersion()
iReporterListener_scfGetVersion = _core.iReporterListener_scfGetVersion

class iReporterIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _core.iReporterIterator_HasNext(self)
    def Next(self): return _core.iReporterIterator_Next(self)
    def GetMessageSeverity(self): return _core.iReporterIterator_GetMessageSeverity(self)
    def GetMessageId(self): return _core.iReporterIterator_GetMessageId(self)
    def GetMessageDescription(self): return _core.iReporterIterator_GetMessageDescription(self)
    scfGetVersion = staticmethod(_core.iReporterIterator_scfGetVersion)
    __swig_destroy__ = _core.delete_iReporterIterator
    __del__ = lambda self : None;
iReporterIterator_swigregister = _core.iReporterIterator_swigregister
iReporterIterator_swigregister(iReporterIterator)

def iReporterIterator_scfGetVersion():
  return _core.iReporterIterator_scfGetVersion()
iReporterIterator_scfGetVersion = _core.iReporterIterator_scfGetVersion

class iReporter(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Report(self, *args): return _core.iReporter_Report(self, *args)
    def Clear(self, *args): return _core.iReporter_Clear(self, *args)
    def GetMessageIterator(self): return _core.iReporter_GetMessageIterator(self)
    def AddReporterListener(self, *args): return _core.iReporter_AddReporterListener(self, *args)
    def RemoveReporterListener(self, *args): return _core.iReporter_RemoveReporterListener(self, *args)
    def FindReporterListener(self, *args): return _core.iReporter_FindReporterListener(self, *args)
    def ReportError(self, *args): return _core.iReporter_ReportError(self, *args)
    def ReportWarning(self, *args): return _core.iReporter_ReportWarning(self, *args)
    def ReportNotify(self, *args): return _core.iReporter_ReportNotify(self, *args)
    def ReportBug(self, *args): return _core.iReporter_ReportBug(self, *args)
    def ReportDebug(self, *args): return _core.iReporter_ReportDebug(self, *args)
    scfGetVersion = staticmethod(_core.iReporter_scfGetVersion)
    __swig_destroy__ = _core.delete_iReporter
    __del__ = lambda self : None;
iReporter_swigregister = _core.iReporter_swigregister
iReporter_swigregister(iReporter)

def iReporter_scfGetVersion():
  return _core.iReporter_scfGetVersion()
iReporter_scfGetVersion = _core.iReporter_scfGetVersion

class csReporterHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Report = staticmethod(_core.csReporterHelper_Report)
    def __init__(self): 
        this = _core.new_csReporterHelper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csReporterHelper
    __del__ = lambda self : None;
csReporterHelper_swigregister = _core.csReporterHelper_swigregister
csReporterHelper_swigregister(csReporterHelper)

def csReporterHelper_Report(*args):
  return _core.csReporterHelper_Report(*args)
csReporterHelper_Report = _core.csReporterHelper_Report

class iComponent(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Initialize(self, *args): return _core.iComponent_Initialize(self, *args)
    scfGetVersion = staticmethod(_core.iComponent_scfGetVersion)
    __swig_destroy__ = _core.delete_iComponent
    __del__ = lambda self : None;
iComponent_swigregister = _core.iComponent_swigregister
iComponent_swigregister(iComponent)

def iComponent_scfGetVersion():
  return _core.iComponent_scfGetVersion()
iComponent_scfGetVersion = _core.iComponent_scfGetVersion

class iCacheManager(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetReadOnly(self, *args): return _core.iCacheManager_SetReadOnly(self, *args)
    def IsReadOnly(self): return _core.iCacheManager_IsReadOnly(self)
    def SetCurrentType(self, *args): return _core.iCacheManager_SetCurrentType(self, *args)
    def GetCurrentType(self): return _core.iCacheManager_GetCurrentType(self)
    def SetCurrentScope(self, *args): return _core.iCacheManager_SetCurrentScope(self, *args)
    def GetCurrentScope(self): return _core.iCacheManager_GetCurrentScope(self)
    def CacheData(self, *args): return _core.iCacheManager_CacheData(self, *args)
    def ReadCache(self, *args): return _core.iCacheManager_ReadCache(self, *args)
    def ClearCache(self, type = None, scope = None, id = None): return _core.iCacheManager_ClearCache(self, type, scope, id)
    def Flush(self): return _core.iCacheManager_Flush(self)
    scfGetVersion = staticmethod(_core.iCacheManager_scfGetVersion)
    __swig_destroy__ = _core.delete_iCacheManager
    __del__ = lambda self : None;
iCacheManager_swigregister = _core.iCacheManager_swigregister
iCacheManager_swigregister(iCacheManager)

def iCacheManager_scfGetVersion():
  return _core.iCacheManager_scfGetVersion()
iCacheManager_scfGetVersion = _core.iCacheManager_scfGetVersion

class csFileTime(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sec = _swig_property(_core.csFileTime_sec_get, _core.csFileTime_sec_set)
    min = _swig_property(_core.csFileTime_min_get, _core.csFileTime_min_set)
    hour = _swig_property(_core.csFileTime_hour_get, _core.csFileTime_hour_set)
    day = _swig_property(_core.csFileTime_day_get, _core.csFileTime_day_set)
    mon = _swig_property(_core.csFileTime_mon_get, _core.csFileTime_mon_set)
    year = _swig_property(_core.csFileTime_year_get, _core.csFileTime_year_set)
    def __init__(self, *args): 
        this = _core.new_csFileTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _core.csFileTime_assign(self, *args)
    __swig_destroy__ = _core.delete_csFileTime
    __del__ = lambda self : None;
csFileTime_swigregister = _core.csFileTime_swigregister
csFileTime_swigregister(csFileTime)

VFS_PATH_DIVIDER = _core.VFS_PATH_DIVIDER
VFS_PATH_SEPARATOR = _core.VFS_PATH_SEPARATOR
VFS_MAX_PATH_LEN = _core.VFS_MAX_PATH_LEN
VFS_FILE_MODE = _core.VFS_FILE_MODE
VFS_FILE_READ = _core.VFS_FILE_READ
VFS_FILE_WRITE = _core.VFS_FILE_WRITE
VFS_FILE_APPEND = _core.VFS_FILE_APPEND
VFS_FILE_UNCOMPRESSED = _core.VFS_FILE_UNCOMPRESSED
VFS_STATUS_OK = _core.VFS_STATUS_OK
VFS_STATUS_OTHER = _core.VFS_STATUS_OTHER
VFS_STATUS_NOSPACE = _core.VFS_STATUS_NOSPACE
VFS_STATUS_RESOURCES = _core.VFS_STATUS_RESOURCES
VFS_STATUS_ACCESSDENIED = _core.VFS_STATUS_ACCESSDENIED
VFS_STATUS_IOERROR = _core.VFS_STATUS_IOERROR
class iFile(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _core.iFile_GetName(self)
    def GetSize(self): return _core.iFile_GetSize(self)
    def GetStatus(self): return _core.iFile_GetStatus(self)
    def Read(self, *args): return _core.iFile_Read(self, *args)
    def Write(self, *args): return _core.iFile_Write(self, *args)
    def Flush(self): return _core.iFile_Flush(self)
    def AtEOF(self): return _core.iFile_AtEOF(self)
    def GetPos(self): return _core.iFile_GetPos(self)
    def SetPos(self, *args): return _core.iFile_SetPos(self, *args)
    def GetAllData(self, *args): return _core.iFile_GetAllData(self, *args)
    def GetPartialView(self, *args): return _core.iFile_GetPartialView(self, *args)
    scfGetVersion = staticmethod(_core.iFile_scfGetVersion)
    __swig_destroy__ = _core.delete_iFile
    __del__ = lambda self : None;
iFile_swigregister = _core.iFile_swigregister
iFile_swigregister(iFile)

def iFile_scfGetVersion():
  return _core.iFile_scfGetVersion()
iFile_scfGetVersion = _core.iFile_scfGetVersion

class iVFS(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ChDir(self, *args): return _core.iVFS_ChDir(self, *args)
    def GetCwd(self): return _core.iVFS_GetCwd(self)
    def PushDir(self, Path = None): return _core.iVFS_PushDir(self, Path)
    def PopDir(self): return _core.iVFS_PopDir(self)
    def ExpandPath(self, *args): return _core.iVFS_ExpandPath(self, *args)
    def Exists(self, *args): return _core.iVFS_Exists(self, *args)
    def FindFiles(self, *args): return _core.iVFS_FindFiles(self, *args)
    def Open(self, *args): return _core.iVFS_Open(self, *args)
    def ReadFile(self, *args): return _core.iVFS_ReadFile(self, *args)
    def WriteFile(self, *args): return _core.iVFS_WriteFile(self, *args)
    def DeleteFile(self, *args): return _core.iVFS_DeleteFile(self, *args)
    def Sync(self): return _core.iVFS_Sync(self)
    def SymbolicLink(self, *args): return _core.iVFS_SymbolicLink(self, *args)
    def Mount(self, *args): return _core.iVFS_Mount(self, *args)
    def Unmount(self, *args): return _core.iVFS_Unmount(self, *args)
    def MountRoot(self, *args): return _core.iVFS_MountRoot(self, *args)
    def SaveMounts(self, *args): return _core.iVFS_SaveMounts(self, *args)
    def LoadMountsFromFile(self, *args): return _core.iVFS_LoadMountsFromFile(self, *args)
    def ChDirAuto(self, *args): return _core.iVFS_ChDirAuto(self, *args)
    def GetFileTime(self, *args): return _core.iVFS_GetFileTime(self, *args)
    def SetFileTime(self, *args): return _core.iVFS_SetFileTime(self, *args)
    def GetFileSize(self, *args): return _core.iVFS_GetFileSize(self, *args)
    def GetRealPath(self, *args): return _core.iVFS_GetRealPath(self, *args)
    def GetMounts(self): return _core.iVFS_GetMounts(self)
    def GetRealMountPaths(self, *args): return _core.iVFS_GetRealMountPaths(self, *args)
    scfGetVersion = staticmethod(_core.iVFS_scfGetVersion)
    __swig_destroy__ = _core.delete_iVFS
    __del__ = lambda self : None;
iVFS_swigregister = _core.iVFS_swigregister
iVFS_swigregister(iVFS)

def iVFS_scfGetVersion():
  return _core.iVFS_scfGetVersion()
iVFS_scfGetVersion = _core.iVFS_scfGetVersion

class iObjectNameChangeListener(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NameChanged(self, *args): return _core.iObjectNameChangeListener_NameChanged(self, *args)
    __swig_destroy__ = _core.delete_iObjectNameChangeListener
    __del__ = lambda self : None;
iObjectNameChangeListener_swigregister = _core.iObjectNameChangeListener_swigregister
iObjectNameChangeListener_swigregister(iObjectNameChangeListener)

class iObject(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetName(self, *args): return _core.iObject_SetName(self, *args)
    def GetName(self): return _core.iObject_GetName(self)
    def GetID(self): return _core.iObject_GetID(self)
    def SetObjectParent(self, *args): return _core.iObject_SetObjectParent(self, *args)
    def GetObjectParent(self): return _core.iObject_GetObjectParent(self)
    def ObjAdd(self, *args): return _core.iObject_ObjAdd(self, *args)
    def ObjRemove(self, *args): return _core.iObject_ObjRemove(self, *args)
    def ObjRemoveAll(self): return _core.iObject_ObjRemoveAll(self)
    def ObjAddChildren(self, *args): return _core.iObject_ObjAddChildren(self, *args)
    def GetChildByName(self, *args): return _core.iObject_GetChildByName(self, *args)
    def GetIterator(self): return _core.iObject_GetIterator(self)
    def ObjReleaseOld(self, *args): return _core.iObject_ObjReleaseOld(self, *args)
    def AddNameChangeListener(self, *args): return _core.iObject_AddNameChangeListener(self, *args)
    def RemoveNameChangeListener(self, *args): return _core.iObject_RemoveNameChangeListener(self, *args)
    def GetChild(self, *args): return _core.iObject_GetChild(self, *args)
    scfGetVersion = staticmethod(_core.iObject_scfGetVersion)
    __swig_destroy__ = _core.delete_iObject
    __del__ = lambda self : None;
iObject_swigregister = _core.iObject_swigregister
iObject_swigregister(iObject)

def iObject_scfGetVersion():
  return _core.iObject_scfGetVersion()
iObject_scfGetVersion = _core.iObject_scfGetVersion

class iObjectIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _core.iObjectIterator_Next(self)
    def Reset(self): return _core.iObjectIterator_Reset(self)
    def GetParentObj(self): return _core.iObjectIterator_GetParentObj(self)
    def HasNext(self): return _core.iObjectIterator_HasNext(self)
    def FindName(self, *args): return _core.iObjectIterator_FindName(self, *args)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    scfGetVersion = staticmethod(_core.iObjectIterator_scfGetVersion)
    __swig_destroy__ = _core.delete_iObjectIterator
    __del__ = lambda self : None;
iObjectIterator_swigregister = _core.iObjectIterator_swigregister
iObjectIterator_swigregister(iObjectIterator)

def iObjectIterator_scfGetVersion():
  return _core.iObjectIterator_scfGetVersion()
iObjectIterator_scfGetVersion = _core.iObjectIterator_scfGetVersion

class iObjectRegistry(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Clear(self): return _core.iObjectRegistry_Clear(self)
    def Register(self, *args): return _core.iObjectRegistry_Register(self, *args)
    def Unregister(self, *args): return _core.iObjectRegistry_Unregister(self, *args)
    def Get(self, *args): return _core.iObjectRegistry_Get(self, *args)
    scfGetVersion = staticmethod(_core.iObjectRegistry_scfGetVersion)
    __swig_destroy__ = _core.delete_iObjectRegistry
    __del__ = lambda self : None;
iObjectRegistry_swigregister = _core.iObjectRegistry_swigregister
iObjectRegistry_swigregister(iObjectRegistry)

def iObjectRegistry_scfGetVersion():
  return _core.iObjectRegistry_scfGetVersion()
iObjectRegistry_scfGetVersion = _core.iObjectRegistry_scfGetVersion

class iObjectRegistryIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Reset(self): return _core.iObjectRegistryIterator_Reset(self)
    def GetCurrentTag(self): return _core.iObjectRegistryIterator_GetCurrentTag(self)
    def HasNext(self): return _core.iObjectRegistryIterator_HasNext(self)
    def Next(self): return _core.iObjectRegistryIterator_Next(self)
    __swig_destroy__ = _core.delete_iObjectRegistryIterator
    __del__ = lambda self : None;
iObjectRegistryIterator_swigregister = _core.iObjectRegistryIterator_swigregister
iObjectRegistryIterator_swigregister(iObjectRegistryIterator)


def csQueryRegistryTag(*args):
  return _core.csQueryRegistryTag(*args)
csQueryRegistryTag = _core.csQueryRegistryTag
class iVirtualClock(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Advance(self): return _core.iVirtualClock_Advance(self)
    def Suspend(self): return _core.iVirtualClock_Suspend(self)
    def Resume(self): return _core.iVirtualClock_Resume(self)
    def GetElapsedTicks(self): return _core.iVirtualClock_GetElapsedTicks(self)
    def GetCurrentTicks(self): return _core.iVirtualClock_GetCurrentTicks(self)
    def GetElapsedMicroTicks(self): return _core.iVirtualClock_GetElapsedMicroTicks(self)
    def GetElapsedSeconds(self): return _core.iVirtualClock_GetElapsedSeconds(self)
    def GetCurrentMicroTicks(self): return _core.iVirtualClock_GetCurrentMicroTicks(self)
    scfGetVersion = staticmethod(_core.iVirtualClock_scfGetVersion)
    __swig_destroy__ = _core.delete_iVirtualClock
    __del__ = lambda self : None;
iVirtualClock_swigregister = _core.iVirtualClock_swigregister
iVirtualClock_swigregister(iVirtualClock)

def iVirtualClock_scfGetVersion():
  return _core.iVirtualClock_scfGetVersion()
iVirtualClock_scfGetVersion = _core.iVirtualClock_scfGetVersion

CS_MAX_MOUSE_COUNT = _core.CS_MAX_MOUSE_COUNT
CS_MAX_MOUSE_AXES = _core.CS_MAX_MOUSE_AXES
CS_MAX_MOUSE_BUTTONS = _core.CS_MAX_MOUSE_BUTTONS
CS_MAX_JOYSTICK_COUNT = _core.CS_MAX_JOYSTICK_COUNT
CS_MAX_JOYSTICK_BUTTONS = _core.CS_MAX_JOYSTICK_BUTTONS
CS_MAX_JOYSTICK_AXES = _core.CS_MAX_JOYSTICK_AXES
class iEventAttributeIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _core.iEventAttributeIterator_HasNext(self)
    def Next(self): return _core.iEventAttributeIterator_Next(self)
    def Reset(self): return _core.iEventAttributeIterator_Reset(self)
    scfGetVersion = staticmethod(_core.iEventAttributeIterator_scfGetVersion)
    __swig_destroy__ = _core.delete_iEventAttributeIterator
    __del__ = lambda self : None;
iEventAttributeIterator_swigregister = _core.iEventAttributeIterator_swigregister
iEventAttributeIterator_swigregister(iEventAttributeIterator)

def iEventAttributeIterator_scfGetVersion():
  return _core.iEventAttributeIterator_scfGetVersion()
iEventAttributeIterator_scfGetVersion = _core.iEventAttributeIterator_scfGetVersion

class csKeyEventData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eventType = _swig_property(_core.csKeyEventData_eventType_get, _core.csKeyEventData_eventType_set)
    codeRaw = _swig_property(_core.csKeyEventData_codeRaw_get, _core.csKeyEventData_codeRaw_set)
    codeCooked = _swig_property(_core.csKeyEventData_codeCooked_get, _core.csKeyEventData_codeCooked_set)
    modifiers = _swig_property(_core.csKeyEventData_modifiers_get, _core.csKeyEventData_modifiers_set)
    autoRepeat = _swig_property(_core.csKeyEventData_autoRepeat_get, _core.csKeyEventData_autoRepeat_set)
    charType = _swig_property(_core.csKeyEventData_charType_get, _core.csKeyEventData_charType_set)
    def __init__(self): 
        this = _core.new_csKeyEventData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csKeyEventData
    __del__ = lambda self : None;
csKeyEventData_swigregister = _core.csKeyEventData_swigregister
csKeyEventData_swigregister(csKeyEventData)

class csMouseEventData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_core.csMouseEventData_x_get, _core.csMouseEventData_x_set)
    y = _swig_property(_core.csMouseEventData_y_get, _core.csMouseEventData_y_set)
    axes = _swig_property(_core.csMouseEventData_axes_get, _core.csMouseEventData_axes_set)
    numAxes = _swig_property(_core.csMouseEventData_numAxes_get, _core.csMouseEventData_numAxes_set)
    Button = _swig_property(_core.csMouseEventData_Button_get, _core.csMouseEventData_Button_set)
    Modifiers = _swig_property(_core.csMouseEventData_Modifiers_get, _core.csMouseEventData_Modifiers_set)
    def __init__(self): 
        this = _core.new_csMouseEventData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csMouseEventData
    __del__ = lambda self : None;
csMouseEventData_swigregister = _core.csMouseEventData_swigregister
csMouseEventData_swigregister(csMouseEventData)

class csJoystickEventData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    number = _swig_property(_core.csJoystickEventData_number_get, _core.csJoystickEventData_number_set)
    axes = _swig_property(_core.csJoystickEventData_axes_get, _core.csJoystickEventData_axes_set)
    numAxes = _swig_property(_core.csJoystickEventData_numAxes_get, _core.csJoystickEventData_numAxes_set)
    axesChanged = _swig_property(_core.csJoystickEventData_axesChanged_get, _core.csJoystickEventData_axesChanged_set)
    Button = _swig_property(_core.csJoystickEventData_Button_get, _core.csJoystickEventData_Button_set)
    Modifiers = _swig_property(_core.csJoystickEventData_Modifiers_get, _core.csJoystickEventData_Modifiers_set)
    def __init__(self): 
        this = _core.new_csJoystickEventData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csJoystickEventData
    __del__ = lambda self : None;
csJoystickEventData_swigregister = _core.csJoystickEventData_swigregister
csJoystickEventData_swigregister(csJoystickEventData)

class csCommandEventData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Code = _swig_property(_core.csCommandEventData_Code_get, _core.csCommandEventData_Code_set)
    Info = _swig_property(_core.csCommandEventData_Info_get, _core.csCommandEventData_Info_set)
    def __init__(self): 
        this = _core.new_csCommandEventData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csCommandEventData
    __del__ = lambda self : None;
csCommandEventData_swigregister = _core.csCommandEventData_swigregister
csCommandEventData_swigregister(csCommandEventData)

csEventErrNone = _core.csEventErrNone
csEventErrLossy = _core.csEventErrLossy
csEventErrNotFound = _core.csEventErrNotFound
csEventErrMismatchInt = _core.csEventErrMismatchInt
csEventErrMismatchUInt = _core.csEventErrMismatchUInt
csEventErrMismatchFloat = _core.csEventErrMismatchFloat
csEventErrMismatchBuffer = _core.csEventErrMismatchBuffer
csEventErrMismatchEvent = _core.csEventErrMismatchEvent
csEventErrMismatchIBase = _core.csEventErrMismatchIBase
csEventErrUhOhUnknown = _core.csEventErrUhOhUnknown
csEventAttrUnknown = _core.csEventAttrUnknown
csEventAttrInt = _core.csEventAttrInt
csEventAttrUInt = _core.csEventAttrUInt
csEventAttrFloat = _core.csEventAttrFloat
csEventAttrDatabuffer = _core.csEventAttrDatabuffer
csEventAttrEvent = _core.csEventAttrEvent
csEventAttriBase = _core.csEventAttriBase
csEventAttrRawPtr = _core.csEventAttrRawPtr
class iEvent(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _core.iEvent_GetName(self)
    Time = _swig_property(_core.iEvent_Time_get, _core.iEvent_Time_set)
    Broadcast = _swig_property(_core.iEvent_Broadcast_get, _core.iEvent_Broadcast_set)
    def AddInt8(self, *args): return _core.iEvent_AddInt8(self, *args)
    def AddUInt8(self, *args): return _core.iEvent_AddUInt8(self, *args)
    def AddInt16(self, *args): return _core.iEvent_AddInt16(self, *args)
    def AddUInt16(self, *args): return _core.iEvent_AddUInt16(self, *args)
    def AddInt32(self, *args): return _core.iEvent_AddInt32(self, *args)
    def AddUInt32(self, *args): return _core.iEvent_AddUInt32(self, *args)
    def AddFloat(self, *args): return _core.iEvent_AddFloat(self, *args)
    def AddDouble(self, *args): return _core.iEvent_AddDouble(self, *args)
    def AddBool(self, *args): return _core.iEvent_AddBool(self, *args)
    def Add(self, *args): return _core.iEvent_Add(self, *args)
    def RetrieveInt8(self, *args): return _core.iEvent_RetrieveInt8(self, *args)
    def RetrieveUInt8(self, *args): return _core.iEvent_RetrieveUInt8(self, *args)
    def RetrieveInt16(self, *args): return _core.iEvent_RetrieveInt16(self, *args)
    def RetrieveUInt16(self, *args): return _core.iEvent_RetrieveUInt16(self, *args)
    def RetrieveInt32(self, *args): return _core.iEvent_RetrieveInt32(self, *args)
    def RetrieveUInt32(self, *args): return _core.iEvent_RetrieveUInt32(self, *args)
    def RetrieveFloat(self, *args): return _core.iEvent_RetrieveFloat(self, *args)
    def RetrieveDouble(self, *args): return _core.iEvent_RetrieveDouble(self, *args)
    def RetrieveBool(self, *args): return _core.iEvent_RetrieveBool(self, *args)
    def Retrieve(self, *args): return _core.iEvent_Retrieve(self, *args)
    def AttributeExists(self, *args): return _core.iEvent_AttributeExists(self, *args)
    def GetAttributeType(self, *args): return _core.iEvent_GetAttributeType(self, *args)
    def Remove(self, *args): return _core.iEvent_Remove(self, *args)
    def RemoveAll(self): return _core.iEvent_RemoveAll(self)
    def GetAttributeIterator(self): return _core.iEvent_GetAttributeIterator(self)
    def RetrieveString(self, *args): return _core.iEvent_RetrieveString(self, *args)
    Mouse = _swig_property(_core.iEvent_Mouse_get)
    Joystick = _swig_property(_core.iEvent_Joystick_get)
    Command = _swig_property(_core.iEvent_Command_get)
    scfGetVersion = staticmethod(_core.iEvent_scfGetVersion)
    __swig_destroy__ = _core.delete_iEvent
    __del__ = lambda self : None;
    Name = property(GetName)

iEvent_swigregister = _core.iEvent_swigregister
iEvent_swigregister(iEvent)

def iEvent_scfGetVersion():
  return _core.iEvent_scfGetVersion()
iEvent_scfGetVersion = _core.iEvent_scfGetVersion

class iEventPlug(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPotentiallyConflictingEvents(self): return _core.iEventPlug_GetPotentiallyConflictingEvents(self)
    def QueryEventPriority(self, *args): return _core.iEventPlug_QueryEventPriority(self, *args)
    def EnableEvents(self, *args): return _core.iEventPlug_EnableEvents(self, *args)
    scfGetVersion = staticmethod(_core.iEventPlug_scfGetVersion)
    __swig_destroy__ = _core.delete_iEventPlug
    __del__ = lambda self : None;
iEventPlug_swigregister = _core.iEventPlug_swigregister
iEventPlug_swigregister(iEventPlug)

def iEventPlug_scfGetVersion():
  return _core.iEventPlug_scfGetVersion()
iEventPlug_scfGetVersion = _core.iEventPlug_scfGetVersion

class iEventOutlet(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateEvent(self): return _core.iEventOutlet_CreateEvent(self)
    def Post(self, *args): return _core.iEventOutlet_Post(self, *args)
    def Key(self, *args): return _core.iEventOutlet_Key(self, *args)
    def Mouse(self, *args): return _core.iEventOutlet_Mouse(self, *args)
    def Joystick(self, *args): return _core.iEventOutlet_Joystick(self, *args)
    def Broadcast(self, *args): return _core.iEventOutlet_Broadcast(self, *args)
    def ImmediateBroadcast(self, *args): return _core.iEventOutlet_ImmediateBroadcast(self, *args)
    scfGetVersion = staticmethod(_core.iEventOutlet_scfGetVersion)
    __swig_destroy__ = _core.delete_iEventOutlet
    __del__ = lambda self : None;
iEventOutlet_swigregister = _core.iEventOutlet_swigregister
iEventOutlet_swigregister(iEventOutlet)

def iEventOutlet_scfGetVersion():
  return _core.iEventOutlet_scfGetVersion()
iEventOutlet_scfGetVersion = _core.iEventOutlet_scfGetVersion

class iEventCord(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Insert(self, *args): return _core.iEventCord_Insert(self, *args)
    def Remove(self, *args): return _core.iEventCord_Remove(self, *args)
    def GetPass(self): return _core.iEventCord_GetPass(self)
    def SetPass(self, *args): return _core.iEventCord_SetPass(self, *args)
    def GetName(self): return _core.iEventCord_GetName(self)
    __swig_destroy__ = _core.delete_iEventCord
    __del__ = lambda self : None;
iEventCord_swigregister = _core.iEventCord_swigregister
iEventCord_swigregister(iEventCord)

class csKeyEventHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetRawCode = staticmethod(_core.csKeyEventHelper_GetRawCode)
    GetCookedCode = staticmethod(_core.csKeyEventHelper_GetCookedCode)
    GetEventType = staticmethod(_core.csKeyEventHelper_GetEventType)
    GetAutoRepeat = staticmethod(_core.csKeyEventHelper_GetAutoRepeat)
    GetCharacterType = staticmethod(_core.csKeyEventHelper_GetCharacterType)
    GetEventData = staticmethod(_core.csKeyEventHelper_GetEventData)
    GetModifiersBits = staticmethod(_core.csKeyEventHelper_GetModifiersBits)
    GetModifiers = staticmethod(_core.csKeyEventHelper_GetModifiers)
    def __init__(self): 
        this = _core.new_csKeyEventHelper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csKeyEventHelper
    __del__ = lambda self : None;
csKeyEventHelper_swigregister = _core.csKeyEventHelper_swigregister
csKeyEventHelper_swigregister(csKeyEventHelper)

def csKeyEventHelper_GetRawCode(*args):
  return _core.csKeyEventHelper_GetRawCode(*args)
csKeyEventHelper_GetRawCode = _core.csKeyEventHelper_GetRawCode

def csKeyEventHelper_GetCookedCode(*args):
  return _core.csKeyEventHelper_GetCookedCode(*args)
csKeyEventHelper_GetCookedCode = _core.csKeyEventHelper_GetCookedCode

def csKeyEventHelper_GetEventType(*args):
  return _core.csKeyEventHelper_GetEventType(*args)
csKeyEventHelper_GetEventType = _core.csKeyEventHelper_GetEventType

def csKeyEventHelper_GetAutoRepeat(*args):
  return _core.csKeyEventHelper_GetAutoRepeat(*args)
csKeyEventHelper_GetAutoRepeat = _core.csKeyEventHelper_GetAutoRepeat

def csKeyEventHelper_GetCharacterType(*args):
  return _core.csKeyEventHelper_GetCharacterType(*args)
csKeyEventHelper_GetCharacterType = _core.csKeyEventHelper_GetCharacterType

def csKeyEventHelper_GetEventData(*args):
  return _core.csKeyEventHelper_GetEventData(*args)
csKeyEventHelper_GetEventData = _core.csKeyEventHelper_GetEventData

def csKeyEventHelper_GetModifiersBits(*args):
  return _core.csKeyEventHelper_GetModifiersBits(*args)
csKeyEventHelper_GetModifiersBits = _core.csKeyEventHelper_GetModifiersBits

def csKeyEventHelper_GetModifiers(*args):
  return _core.csKeyEventHelper_GetModifiers(*args)
csKeyEventHelper_GetModifiers = _core.csKeyEventHelper_GetModifiers

class csMouseEventHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NewEvent = staticmethod(_core.csMouseEventHelper_NewEvent)
    GetEventType = staticmethod(_core.csMouseEventHelper_GetEventType)
    GetNumber = staticmethod(_core.csMouseEventHelper_GetNumber)
    GetX = staticmethod(_core.csMouseEventHelper_GetX)
    GetY = staticmethod(_core.csMouseEventHelper_GetY)
    GetAxis = staticmethod(_core.csMouseEventHelper_GetAxis)
    GetNumAxes = staticmethod(_core.csMouseEventHelper_GetNumAxes)
    GetButton = staticmethod(_core.csMouseEventHelper_GetButton)
    GetButtonState = staticmethod(_core.csMouseEventHelper_GetButtonState)
    GetButtonMask = staticmethod(_core.csMouseEventHelper_GetButtonMask)
    GetModifiers = staticmethod(_core.csMouseEventHelper_GetModifiers)
    GetEventData = staticmethod(_core.csMouseEventHelper_GetEventData)
    def __init__(self): 
        this = _core.new_csMouseEventHelper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csMouseEventHelper
    __del__ = lambda self : None;
csMouseEventHelper_swigregister = _core.csMouseEventHelper_swigregister
csMouseEventHelper_swigregister(csMouseEventHelper)

def csMouseEventHelper_NewEvent(*args):
  return _core.csMouseEventHelper_NewEvent(*args)
csMouseEventHelper_NewEvent = _core.csMouseEventHelper_NewEvent

def csMouseEventHelper_GetEventType(*args):
  return _core.csMouseEventHelper_GetEventType(*args)
csMouseEventHelper_GetEventType = _core.csMouseEventHelper_GetEventType

def csMouseEventHelper_GetNumber(*args):
  return _core.csMouseEventHelper_GetNumber(*args)
csMouseEventHelper_GetNumber = _core.csMouseEventHelper_GetNumber

def csMouseEventHelper_GetX(*args):
  return _core.csMouseEventHelper_GetX(*args)
csMouseEventHelper_GetX = _core.csMouseEventHelper_GetX

def csMouseEventHelper_GetY(*args):
  return _core.csMouseEventHelper_GetY(*args)
csMouseEventHelper_GetY = _core.csMouseEventHelper_GetY

def csMouseEventHelper_GetAxis(*args):
  return _core.csMouseEventHelper_GetAxis(*args)
csMouseEventHelper_GetAxis = _core.csMouseEventHelper_GetAxis

def csMouseEventHelper_GetNumAxes(*args):
  return _core.csMouseEventHelper_GetNumAxes(*args)
csMouseEventHelper_GetNumAxes = _core.csMouseEventHelper_GetNumAxes

def csMouseEventHelper_GetButton(*args):
  return _core.csMouseEventHelper_GetButton(*args)
csMouseEventHelper_GetButton = _core.csMouseEventHelper_GetButton

def csMouseEventHelper_GetButtonState(*args):
  return _core.csMouseEventHelper_GetButtonState(*args)
csMouseEventHelper_GetButtonState = _core.csMouseEventHelper_GetButtonState

def csMouseEventHelper_GetButtonMask(*args):
  return _core.csMouseEventHelper_GetButtonMask(*args)
csMouseEventHelper_GetButtonMask = _core.csMouseEventHelper_GetButtonMask

def csMouseEventHelper_GetModifiers(*args):
  return _core.csMouseEventHelper_GetModifiers(*args)
csMouseEventHelper_GetModifiers = _core.csMouseEventHelper_GetModifiers

def csMouseEventHelper_GetEventData(*args):
  return _core.csMouseEventHelper_GetEventData(*args)
csMouseEventHelper_GetEventData = _core.csMouseEventHelper_GetEventData

class csJoystickEventHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NewEvent = staticmethod(_core.csJoystickEventHelper_NewEvent)
    GetNumber = staticmethod(_core.csJoystickEventHelper_GetNumber)
    GetAxis = staticmethod(_core.csJoystickEventHelper_GetAxis)
    GetNumAxes = staticmethod(_core.csJoystickEventHelper_GetNumAxes)
    GetButton = staticmethod(_core.csJoystickEventHelper_GetButton)
    GetButtonState = staticmethod(_core.csJoystickEventHelper_GetButtonState)
    GetButtonMask = staticmethod(_core.csJoystickEventHelper_GetButtonMask)
    GetModifiers = staticmethod(_core.csJoystickEventHelper_GetModifiers)
    GetEventData = staticmethod(_core.csJoystickEventHelper_GetEventData)
    def __init__(self): 
        this = _core.new_csJoystickEventHelper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csJoystickEventHelper
    __del__ = lambda self : None;
csJoystickEventHelper_swigregister = _core.csJoystickEventHelper_swigregister
csJoystickEventHelper_swigregister(csJoystickEventHelper)

def csJoystickEventHelper_NewEvent(*args):
  return _core.csJoystickEventHelper_NewEvent(*args)
csJoystickEventHelper_NewEvent = _core.csJoystickEventHelper_NewEvent

def csJoystickEventHelper_GetNumber(*args):
  return _core.csJoystickEventHelper_GetNumber(*args)
csJoystickEventHelper_GetNumber = _core.csJoystickEventHelper_GetNumber

def csJoystickEventHelper_GetAxis(*args):
  return _core.csJoystickEventHelper_GetAxis(*args)
csJoystickEventHelper_GetAxis = _core.csJoystickEventHelper_GetAxis

def csJoystickEventHelper_GetNumAxes(*args):
  return _core.csJoystickEventHelper_GetNumAxes(*args)
csJoystickEventHelper_GetNumAxes = _core.csJoystickEventHelper_GetNumAxes

def csJoystickEventHelper_GetButton(*args):
  return _core.csJoystickEventHelper_GetButton(*args)
csJoystickEventHelper_GetButton = _core.csJoystickEventHelper_GetButton

def csJoystickEventHelper_GetButtonState(*args):
  return _core.csJoystickEventHelper_GetButtonState(*args)
csJoystickEventHelper_GetButtonState = _core.csJoystickEventHelper_GetButtonState

def csJoystickEventHelper_GetButtonMask(*args):
  return _core.csJoystickEventHelper_GetButtonMask(*args)
csJoystickEventHelper_GetButtonMask = _core.csJoystickEventHelper_GetButtonMask

def csJoystickEventHelper_GetModifiers(*args):
  return _core.csJoystickEventHelper_GetModifiers(*args)
csJoystickEventHelper_GetModifiers = _core.csJoystickEventHelper_GetModifiers

def csJoystickEventHelper_GetEventData(*args):
  return _core.csJoystickEventHelper_GetEventData(*args)
csJoystickEventHelper_GetEventData = _core.csJoystickEventHelper_GetEventData

class csInputEventHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetButton = staticmethod(_core.csInputEventHelper_GetButton)
    GetButtonState = staticmethod(_core.csInputEventHelper_GetButtonState)
    def __init__(self): 
        this = _core.new_csInputEventHelper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csInputEventHelper
    __del__ = lambda self : None;
csInputEventHelper_swigregister = _core.csInputEventHelper_swigregister
csInputEventHelper_swigregister(csInputEventHelper)

def csInputEventHelper_GetButton(*args):
  return _core.csInputEventHelper_GetButton(*args)
csInputEventHelper_GetButton = _core.csInputEventHelper_GetButton

def csInputEventHelper_GetButtonState(*args):
  return _core.csInputEventHelper_GetButtonState(*args)
csInputEventHelper_GetButtonState = _core.csInputEventHelper_GetButtonState

class csCommandEventHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NewEvent = staticmethod(_core.csCommandEventHelper_NewEvent)
    GetCode = staticmethod(_core.csCommandEventHelper_GetCode)
    GetInfo = staticmethod(_core.csCommandEventHelper_GetInfo)
    GetEventData = staticmethod(_core.csCommandEventHelper_GetEventData)
    def __init__(self): 
        this = _core.new_csCommandEventHelper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csCommandEventHelper
    __del__ = lambda self : None;
csCommandEventHelper_swigregister = _core.csCommandEventHelper_swigregister
csCommandEventHelper_swigregister(csCommandEventHelper)

def csCommandEventHelper_NewEvent(*args):
  return _core.csCommandEventHelper_NewEvent(*args)
csCommandEventHelper_NewEvent = _core.csCommandEventHelper_NewEvent

def csCommandEventHelper_GetCode(*args):
  return _core.csCommandEventHelper_GetCode(*args)
csCommandEventHelper_GetCode = _core.csCommandEventHelper_GetCode

def csCommandEventHelper_GetInfo(*args):
  return _core.csCommandEventHelper_GetInfo(*args)
csCommandEventHelper_GetInfo = _core.csCommandEventHelper_GetInfo

def csCommandEventHelper_GetEventData(*args):
  return _core.csCommandEventHelper_GetEventData(*args)
csCommandEventHelper_GetEventData = _core.csCommandEventHelper_GetEventData


def RemoveWeakListener(*args):
  return _core.RemoveWeakListener(*args)
RemoveWeakListener = _core.RemoveWeakListener
csKeyEventTypeUp = _core.csKeyEventTypeUp
csKeyEventTypeDown = _core.csKeyEventTypeDown
csMouseEventTypeMove = _core.csMouseEventTypeMove
csMouseEventTypeUp = _core.csMouseEventTypeUp
csMouseEventTypeDown = _core.csMouseEventTypeDown
csMouseEventTypeClick = _core.csMouseEventTypeClick
csMouseEventTypeDoubleClick = _core.csMouseEventTypeDoubleClick
csmbNone = _core.csmbNone
csmbLeft = _core.csmbLeft
csmbRight = _core.csmbRight
csmbMiddle = _core.csmbMiddle
csmbWheelUp = _core.csmbWheelUp
csmbWheelDown = _core.csmbWheelDown
csmbExtra1 = _core.csmbExtra1
csmbExtra2 = _core.csmbExtra2
csmbHWheelLeft = _core.csmbHWheelLeft
csmbHWheelRight = _core.csmbHWheelRight
csKeyModifierTypeShift = _core.csKeyModifierTypeShift
csKeyModifierTypeCtrl = _core.csKeyModifierTypeCtrl
csKeyModifierTypeAlt = _core.csKeyModifierTypeAlt
csKeyModifierTypeCapsLock = _core.csKeyModifierTypeCapsLock
csKeyModifierTypeNumLock = _core.csKeyModifierTypeNumLock
csKeyModifierTypeScrollLock = _core.csKeyModifierTypeScrollLock
csKeyModifierTypeLast = _core.csKeyModifierTypeLast
csKeyModifierNumLeft = _core.csKeyModifierNumLeft
csKeyModifierNumRight = _core.csKeyModifierNumRight
csKeyModifierNumAny = _core.csKeyModifierNumAny
class csKeyModifiers(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    modifiers = _swig_property(_core.csKeyModifiers_modifiers_get, _core.csKeyModifiers_modifiers_set)
    def __getitem__(self, *args): return _core.csKeyModifiers___getitem__(self, *args)
    def __init__(self): 
        this = _core.new_csKeyModifiers()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csKeyModifiers
    __del__ = lambda self : None;
csKeyModifiers_swigregister = _core.csKeyModifiers_swigregister
csKeyModifiers_swigregister(csKeyModifiers)

def RegisterWeakListener(*args):
  return _core.RegisterWeakListener(*args)
RegisterWeakListener = _core.RegisterWeakListener

CSKEY_ESC = _core.CSKEY_ESC
CSKEY_ENTER = _core.CSKEY_ENTER
CSKEY_TAB = _core.CSKEY_TAB
CSKEY_BACKSPACE = _core.CSKEY_BACKSPACE
CSKEY_SPACE = _core.CSKEY_SPACE
CSKEY_SPECIAL_FIRST = _core.CSKEY_SPECIAL_FIRST
CSKEY_SPECIAL_LAST = _core.CSKEY_SPECIAL_LAST
CSKEY_UP = _core.CSKEY_UP
CSKEY_DOWN = _core.CSKEY_DOWN
CSKEY_LEFT = _core.CSKEY_LEFT
CSKEY_RIGHT = _core.CSKEY_RIGHT
CSKEY_PGUP = _core.CSKEY_PGUP
CSKEY_PGDN = _core.CSKEY_PGDN
CSKEY_HOME = _core.CSKEY_HOME
CSKEY_END = _core.CSKEY_END
CSKEY_INS = _core.CSKEY_INS
CSKEY_DEL = _core.CSKEY_DEL
CSKEY_CONTEXT = _core.CSKEY_CONTEXT
CSKEY_PRINTSCREEN = _core.CSKEY_PRINTSCREEN
CSKEY_PAUSE = _core.CSKEY_PAUSE
CSKEY_F1 = _core.CSKEY_F1
CSKEY_F2 = _core.CSKEY_F2
CSKEY_F3 = _core.CSKEY_F3
CSKEY_F4 = _core.CSKEY_F4
CSKEY_F5 = _core.CSKEY_F5
CSKEY_F6 = _core.CSKEY_F6
CSKEY_F7 = _core.CSKEY_F7
CSKEY_F8 = _core.CSKEY_F8
CSKEY_F9 = _core.CSKEY_F9
CSKEY_F10 = _core.CSKEY_F10
CSKEY_F11 = _core.CSKEY_F11
CSKEY_F12 = _core.CSKEY_F12
CSKEY_MODIFIER_FIRST = _core.CSKEY_MODIFIER_FIRST
CSKEY_MODIFIER_LAST = _core.CSKEY_MODIFIER_LAST
CSKEY_MODIFIERTYPE_SHIFT = _core.CSKEY_MODIFIERTYPE_SHIFT
CSKEY_PAD_FLAG = _core.CSKEY_PAD_FLAG
csKeyCharTypeNormal = _core.csKeyCharTypeNormal
csKeyCharTypeDead = _core.csKeyCharTypeDead
CSEVTYPE_Keyboard = _core.CSEVTYPE_Keyboard
CSEVTYPE_Mouse = _core.CSEVTYPE_Mouse
CSEVTYPE_Joystick = _core.CSEVTYPE_Joystick
class iEventQueue(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Process(self): return _core.iEventQueue_Process(self)
    def Dispatch(self, *args): return _core.iEventQueue_Dispatch(self, *args)
    def Subscribe(self, *args): return _core.iEventQueue_Subscribe(self, *args)
    def Unsubscribe(self, *args): return _core.iEventQueue_Unsubscribe(self, *args)
    def RegisterListener(self, *args): return _core.iEventQueue_RegisterListener(self, *args)
    def RemoveListener(self, *args): return _core.iEventQueue_RemoveListener(self, *args)
    def CreateEventOutlet(self, *args): return _core.iEventQueue_CreateEventOutlet(self, *args)
    def GetEventOutlet(self): return _core.iEventQueue_GetEventOutlet(self)
    def GetEventCord(self, *args): return _core.iEventQueue_GetEventCord(self, *args)
    def CreateEvent(self, *args): return _core.iEventQueue_CreateEvent(self, *args)
    def CreateBroadcastEvent(self, *args): return _core.iEventQueue_CreateBroadcastEvent(self, *args)
    def Post(self, *args): return _core.iEventQueue_Post(self, *args)
    def Get(self): return _core.iEventQueue_Get(self)
    def Clear(self): return _core.iEventQueue_Clear(self)
    def IsEmpty(self): return _core.iEventQueue_IsEmpty(self)
    def RemoveAllListeners(self): return _core.iEventQueue_RemoveAllListeners(self)
    scfGetVersion = staticmethod(_core.iEventQueue_scfGetVersion)
    __swig_destroy__ = _core.delete_iEventQueue
    __del__ = lambda self : None;
iEventQueue_swigregister = _core.iEventQueue_swigregister
iEventQueue_swigregister(iEventQueue)

def iEventQueue_scfGetVersion():
  return _core.iEventQueue_scfGetVersion()
iEventQueue_scfGetVersion = _core.iEventQueue_scfGetVersion

class iEventNameRegistry(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetID(self, *args): return _core.iEventNameRegistry_GetID(self, *args)
    def GetString(self, *args): return _core.iEventNameRegistry_GetString(self, *args)
    def GetParentID(self, *args): return _core.iEventNameRegistry_GetParentID(self, *args)
    def IsImmediateChildOf(self, *args): return _core.iEventNameRegistry_IsImmediateChildOf(self, *args)
    def IsKindOf(self, *args): return _core.iEventNameRegistry_IsKindOf(self, *args)
    scfGetVersion = staticmethod(_core.iEventNameRegistry_scfGetVersion)
    __swig_destroy__ = _core.delete_iEventNameRegistry
    __del__ = lambda self : None;
iEventNameRegistry_swigregister = _core.iEventNameRegistry_swigregister
iEventNameRegistry_swigregister(iEventNameRegistry)

def iEventNameRegistry_scfGetVersion():
  return _core.iEventNameRegistry_scfGetVersion()
iEventNameRegistry_scfGetVersion = _core.iEventNameRegistry_scfGetVersion

class csEventNameRegistry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_csEventNameRegistry
    __del__ = lambda self : None;
    GetString = staticmethod(_core.csEventNameRegistry_GetString)
    def GetParentID(self, *args): return _core.csEventNameRegistry_GetParentID(self, *args)
    def IsImmediateChildOf(self, *args): return _core.csEventNameRegistry_IsImmediateChildOf(self, *args)
    GetRegistry = staticmethod(_core.csEventNameRegistry_GetRegistry)
    GetID = staticmethod(_core.csEventNameRegistry_GetID)
    IsKindOf = staticmethod(_core.csEventNameRegistry_IsKindOf)
csEventNameRegistry_swigregister = _core.csEventNameRegistry_swigregister
csEventNameRegistry_swigregister(csEventNameRegistry)

def csEventNameRegistry_GetString(*args):
  return _core.csEventNameRegistry_GetString(*args)
csEventNameRegistry_GetString = _core.csEventNameRegistry_GetString

def csEventNameRegistry_GetRegistry(*args):
  return _core.csEventNameRegistry_GetRegistry(*args)
csEventNameRegistry_GetRegistry = _core.csEventNameRegistry_GetRegistry

def csEventNameRegistry_GetID(*args):
  return _core.csEventNameRegistry_GetID(*args)
csEventNameRegistry_GetID = _core.csEventNameRegistry_GetID

def csEventNameRegistry_IsKindOf(*args):
  return _core.csEventNameRegistry_IsKindOf(*args)
csEventNameRegistry_IsKindOf = _core.csEventNameRegistry_IsKindOf

class iEventHandler(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HandleEvent(self, *args): return _core.iEventHandler_HandleEvent(self, *args)
    def GenericName(self): return _core.iEventHandler_GenericName(self)
    def GenericID(self, *args): return _core.iEventHandler_GenericID(self, *args)
    def GenericPrec(self, *args): return _core.iEventHandler_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.iEventHandler_GenericSucc(self, *args)
    def InstancePrec(self, *args): return _core.iEventHandler_InstancePrec(self, *args)
    def InstanceSucc(self, *args): return _core.iEventHandler_InstanceSucc(self, *args)
    scfGetVersion = staticmethod(_core.iEventHandler_scfGetVersion)
    __swig_destroy__ = _core.delete_iEventHandler
    __del__ = lambda self : None;
iEventHandler_swigregister = _core.iEventHandler_swigregister
iEventHandler_swigregister(iEventHandler)

def csevMouse(*args):
  return _core.csevMouse(*args)
csevMouse = _core.csevMouse

def csevMouseOp(*args):
  return _core.csevMouseOp(*args)
csevMouseOp = _core.csevMouseOp

def csevJoystick(*args):
  return _core.csevJoystick(*args)
csevJoystick = _core.csevJoystick

def csevJoystickOp(*args):
  return _core.csevJoystickOp(*args)
csevJoystickOp = _core.csevJoystickOp

def csevCanvasOp(*args):
  return _core.csevCanvasOp(*args)
csevCanvasOp = _core.csevCanvasOp

def iEventHandler_scfGetVersion():
  return _core.iEventHandler_scfGetVersion()
iEventHandler_scfGetVersion = _core.iEventHandler_scfGetVersion

class iPluginIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _core.iPluginIterator_HasNext(self)
    def Next(self): return _core.iPluginIterator_Next(self)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    scfGetVersion = staticmethod(_core.iPluginIterator_scfGetVersion)
    __swig_destroy__ = _core.delete_iPluginIterator
    __del__ = lambda self : None;
iPluginIterator_swigregister = _core.iPluginIterator_swigregister
iPluginIterator_swigregister(iPluginIterator)

def iPluginIterator_scfGetVersion():
  return _core.iPluginIterator_scfGetVersion()
iPluginIterator_scfGetVersion = _core.iPluginIterator_scfGetVersion

class iPluginManager(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    lpiInitialize = _core.iPluginManager_lpiInitialize
    lpiReportErrors = _core.iPluginManager_lpiReportErrors
    lpiLoadDependencies = _core.iPluginManager_lpiLoadDependencies
    lpiReturnLoadedInstance = _core.iPluginManager_lpiReturnLoadedInstance
    def LoadPluginInstance(self, *args): return _core.iPluginManager_LoadPluginInstance(self, *args)
    def LoadPluginAlways(self, *args): return _core.iPluginManager_LoadPluginAlways(self, *args)
    def QueryPluginInstance(self, *args): return _core.iPluginManager_QueryPluginInstance(self, *args)
    def UnloadPluginInstance(self, *args): return _core.iPluginManager_UnloadPluginInstance(self, *args)
    def UnloadPlugin(self, *args): return _core.iPluginManager_UnloadPlugin(self, *args)
    def RegisterPluginInstance(self, *args): return _core.iPluginManager_RegisterPluginInstance(self, *args)
    def RegisterPlugin(self, *args): return _core.iPluginManager_RegisterPlugin(self, *args)
    def GetPluginInstances(self): return _core.iPluginManager_GetPluginInstances(self)
    def GetPlugins(self): return _core.iPluginManager_GetPlugins(self)
    def Clear(self): return _core.iPluginManager_Clear(self)
    def QueryOptions(self, *args): return _core.iPluginManager_QueryOptions(self, *args)
    def SetTagClassIDMapping(self, *args): return _core.iPluginManager_SetTagClassIDMapping(self, *args)
    def UnsetTagClassIDMapping(self, *args): return _core.iPluginManager_UnsetTagClassIDMapping(self, *args)
    def GetTagClassIDMapping(self, *args): return _core.iPluginManager_GetTagClassIDMapping(self, *args)
    def GetClassIDTags(self, *args): return _core.iPluginManager_GetClassIDTags(self, *args)
    def LoadTagPluginInstance(self, *args): return _core.iPluginManager_LoadTagPluginInstance(self, *args)
    def QueryTagPluginInstance(self, *args): return _core.iPluginManager_QueryTagPluginInstance(self, *args)
    def LoadPlugin(self, *args): return _core.iPluginManager_LoadPlugin(self, *args)
    scfGetVersion = staticmethod(_core.iPluginManager_scfGetVersion)
    __swig_destroy__ = _core.delete_iPluginManager
    __del__ = lambda self : None;
iPluginManager_swigregister = _core.iPluginManager_swigregister
iPluginManager_swigregister(iPluginManager)

def iPluginManager_scfGetVersion():
  return _core.iPluginManager_scfGetVersion()
iPluginManager_scfGetVersion = _core.iPluginManager_scfGetVersion

class scfObject(iObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _core.scfObject_IncRef(self)
    def DecRef(self): return _core.scfObject_DecRef(self)
    def GetRefCount(self): return _core.scfObject_GetRefCount(self)
    def QueryInterface(self, *args): return _core.scfObject_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _core.scfObject_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _core.scfObject_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _core.scfObject_GetInterfaceMetadata(self)
scfObject_swigregister = _core.scfObject_swigregister
scfObject_swigregister(scfObject)

def csLoadPluginAlways(*args):
  return _core.csLoadPluginAlways(*args)
csLoadPluginAlways = _core.csLoadPluginAlways

class csObject(scfObject,InternalRefCount):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_csObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csObject
    __del__ = lambda self : None;
    def SetName(self, *args): return _core.csObject_SetName(self, *args)
    def GetName(self): return _core.csObject_GetName(self)
    def GetID(self): return _core.csObject_GetID(self)
    def SetObjectParent(self, *args): return _core.csObject_SetObjectParent(self, *args)
    def GetObjectParent(self): return _core.csObject_GetObjectParent(self)
    def ObjAdd(self, *args): return _core.csObject_ObjAdd(self, *args)
    def ObjRemove(self, *args): return _core.csObject_ObjRemove(self, *args)
    def ObjRemoveAll(self): return _core.csObject_ObjRemoveAll(self)
    def ObjAddChildren(self, *args): return _core.csObject_ObjAddChildren(self, *args)
    def GetChildByName(self, *args): return _core.csObject_GetChildByName(self, *args)
    def GetIterator(self): return _core.csObject_GetIterator(self)
    def AddNameChangeListener(self, *args): return _core.csObject_AddNameChangeListener(self, *args)
    def RemoveNameChangeListener(self, *args): return _core.csObject_RemoveNameChangeListener(self, *args)
    def ObjReleaseOld(self, *args): return _core.csObject_ObjReleaseOld(self, *args)
csObject_swigregister = _core.csObject_swigregister
csObject_swigregister(csObject)

MAX_OUTPUT_VERTICES = _core.MAX_OUTPUT_VERTICES
CS_CLIP_OUTSIDE = _core.CS_CLIP_OUTSIDE
CS_CLIP_CLIPPED = _core.CS_CLIP_CLIPPED
CS_CLIP_INSIDE = _core.CS_CLIP_INSIDE
class csVertexStatus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Type = _swig_property(_core.csVertexStatus_Type_get, _core.csVertexStatus_Type_set)
    Vertex = _swig_property(_core.csVertexStatus_Vertex_get, _core.csVertexStatus_Vertex_set)
    Pos = _swig_property(_core.csVertexStatus_Pos_get, _core.csVertexStatus_Pos_set)
    def __init__(self): 
        this = _core.new_csVertexStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csVertexStatus
    __del__ = lambda self : None;
csVertexStatus_swigregister = _core.csVertexStatus_swigregister
csVertexStatus_swigregister(csVertexStatus)

CS_VERTEX_ORIGINAL = _core.CS_VERTEX_ORIGINAL
CS_VERTEX_ONEDGE = _core.CS_VERTEX_ONEDGE
CS_VERTEX_INSIDE = _core.CS_VERTEX_INSIDE
class iClipper2D(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Clip(self, *args): return _core.iClipper2D_Clip(self, *args)
    def ClipInPlace(self, *args): return _core.iClipper2D_ClipInPlace(self, *args)
    def ClassifyBox(self, *args): return _core.iClipper2D_ClassifyBox(self, *args)
    def IsInside(self, *args): return _core.iClipper2D_IsInside(self, *args)
    def GetVertexCount(self): return _core.iClipper2D_GetVertexCount(self)
    def GetClipPoly(self): return _core.iClipper2D_GetClipPoly(self)
    clipperPoly = _core.iClipper2D_clipperPoly
    clipperBox = _core.iClipper2D_clipperBox
    def GetClipperType(self): return _core.iClipper2D_GetClipperType(self)
    __swig_destroy__ = _core.delete_iClipper2D
    __del__ = lambda self : None;
iClipper2D_swigregister = _core.iClipper2D_swigregister
iClipper2D_swigregister(iClipper2D)

class iPath(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Length(self): return _core.iPath_Length(self)
    def CalculateAtTime(self, *args): return _core.iPath_CalculateAtTime(self, *args)
    def GetCurrentIndex(self): return _core.iPath_GetCurrentIndex(self)
    def SetPositionVectors(self, *args): return _core.iPath_SetPositionVectors(self, *args)
    def SetUpVectors(self, *args): return _core.iPath_SetUpVectors(self, *args)
    def SetForwardVectors(self, *args): return _core.iPath_SetForwardVectors(self, *args)
    def SetPositionVector(self, *args): return _core.iPath_SetPositionVector(self, *args)
    def SetUpVector(self, *args): return _core.iPath_SetUpVector(self, *args)
    def SetForwardVector(self, *args): return _core.iPath_SetForwardVector(self, *args)
    def GetPositionVector(self, *args): return _core.iPath_GetPositionVector(self, *args)
    def GetUpVector(self, *args): return _core.iPath_GetUpVector(self, *args)
    def GetForwardVector(self, *args): return _core.iPath_GetForwardVector(self, *args)
    def GetTime(self, *args): return _core.iPath_GetTime(self, *args)
    def SetTime(self, *args): return _core.iPath_SetTime(self, *args)
    def GetInterpolatedPosition(self, *args): return _core.iPath_GetInterpolatedPosition(self, *args)
    def GetInterpolatedUp(self, *args): return _core.iPath_GetInterpolatedUp(self, *args)
    def GetInterpolatedForward(self, *args): return _core.iPath_GetInterpolatedForward(self, *args)
    def QueryObject(self): return _core.iPath_QueryObject(self)
    scfGetVersion = staticmethod(_core.iPath_scfGetVersion)
    __swig_destroy__ = _core.delete_iPath
    __del__ = lambda self : None;
iPath_swigregister = _core.iPath_swigregister
iPath_swigregister(iPath)

def iPath_scfGetVersion():
  return _core.iPath_scfGetVersion()
iPath_scfGetVersion = _core.iPath_scfGetVersion

class scfPath(csObject,iPath):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _core.scfPath_IncRef(self)
    def DecRef(self): return _core.scfPath_DecRef(self)
    def GetRefCount(self): return _core.scfPath_GetRefCount(self)
    def QueryInterface(self, *args): return _core.scfPath_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _core.scfPath_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _core.scfPath_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _core.scfPath_GetInterfaceMetadata(self)
scfPath_swigregister = _core.scfPath_swigregister
scfPath_swigregister(scfPath)

CS_TRIMESH_CLOSED = _core.CS_TRIMESH_CLOSED
CS_TRIMESH_NOTCLOSED = _core.CS_TRIMESH_NOTCLOSED
CS_TRIMESH_CONVEX = _core.CS_TRIMESH_CONVEX
CS_TRIMESH_NOTCONVEX = _core.CS_TRIMESH_NOTCONVEX
CS_TRIMESH_DEFORMABLE = _core.CS_TRIMESH_DEFORMABLE
class iTriangleMesh(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVertexCount(self): return _core.iTriangleMesh_GetVertexCount(self)
    def GetVertices(self):
      return CSMutableArrayHelper(self.GetVertexByIndex, self.GetVertexCount)


    def GetTriangleCount(self): return _core.iTriangleMesh_GetTriangleCount(self)
    def GetTriangles(self):
      return CSMutableArrayHelper(self.GetTriangleByIndex, self.GetTriangleCount)


    def Lock(self): return _core.iTriangleMesh_Lock(self)
    def Unlock(self): return _core.iTriangleMesh_Unlock(self)
    def GetFlags(self): return _core.iTriangleMesh_GetFlags(self)
    def GetChangeNumber(self): return _core.iTriangleMesh_GetChangeNumber(self)
    def GetVertexByIndex(self, *args): return _core.iTriangleMesh_GetVertexByIndex(self, *args)
    def GetTriangleByIndex(self, *args): return _core.iTriangleMesh_GetTriangleByIndex(self, *args)
    scfGetVersion = staticmethod(_core.iTriangleMesh_scfGetVersion)
    __swig_destroy__ = _core.delete_iTriangleMesh
    __del__ = lambda self : None;
iTriangleMesh_swigregister = _core.iTriangleMesh_swigregister
iTriangleMesh_swigregister(iTriangleMesh)

def iTriangleMesh_scfGetVersion():
  return _core.iTriangleMesh_scfGetVersion()
iTriangleMesh_scfGetVersion = _core.iTriangleMesh_scfGetVersion

csComposeNoChar = _core.csComposeNoChar
csComposeNormalChar = _core.csComposeNormalChar
csComposeComposedChar = _core.csComposeComposedChar
csComposeUncomposeable = _core.csComposeUncomposeable
class iKeyComposer(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HandleKey(self, *args): return _core.iKeyComposer_HandleKey(self, *args)
    def ResetState(self): return _core.iKeyComposer_ResetState(self)
    __swig_destroy__ = _core.delete_iKeyComposer
    __del__ = lambda self : None;
iKeyComposer_swigregister = _core.iKeyComposer_swigregister
iKeyComposer_swigregister(iKeyComposer)

class iKeyboardDriver(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Reset(self): return _core.iKeyboardDriver_Reset(self)
    def DoKey(self, *args): return _core.iKeyboardDriver_DoKey(self, *args)
    def GetModifierState(self, *args): return _core.iKeyboardDriver_GetModifierState(self, *args)
    def CreateKeyComposer(self): return _core.iKeyboardDriver_CreateKeyComposer(self)
    def SynthesizeCooked(self, *args): return _core.iKeyboardDriver_SynthesizeCooked(self, *args)
    def GetModifiersState(self): return _core.iKeyboardDriver_GetModifiersState(self)
    def GetKeyState(self, *args): return _core.iKeyboardDriver_GetKeyState(self, *args)
    scfGetVersion = staticmethod(_core.iKeyboardDriver_scfGetVersion)
    __swig_destroy__ = _core.delete_iKeyboardDriver
    __del__ = lambda self : None;
iKeyboardDriver_swigregister = _core.iKeyboardDriver_swigregister
iKeyboardDriver_swigregister(iKeyboardDriver)

def iKeyboardDriver_scfGetVersion():
  return _core.iKeyboardDriver_scfGetVersion()
iKeyboardDriver_scfGetVersion = _core.iKeyboardDriver_scfGetVersion

class iMouseDriver(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetDoubleClickTime(self, *args): return _core.iMouseDriver_SetDoubleClickTime(self, *args)
    def Reset(self): return _core.iMouseDriver_Reset(self)
    def GetLastX(self, number = 0): return _core.iMouseDriver_GetLastX(self, number)
    def GetLastY(self, number = 0): return _core.iMouseDriver_GetLastY(self, number)
    def GetLast(self, *args): return _core.iMouseDriver_GetLast(self, *args)
    def GetLastButton(self, *args): return _core.iMouseDriver_GetLastButton(self, *args)
    def DoButton(self, *args): return _core.iMouseDriver_DoButton(self, *args)
    def DoMotion(self, *args): return _core.iMouseDriver_DoMotion(self, *args)
    scfGetVersion = staticmethod(_core.iMouseDriver_scfGetVersion)
    __swig_destroy__ = _core.delete_iMouseDriver
    __del__ = lambda self : None;
iMouseDriver_swigregister = _core.iMouseDriver_swigregister
iMouseDriver_swigregister(iMouseDriver)

def iMouseDriver_scfGetVersion():
  return _core.iMouseDriver_scfGetVersion()
iMouseDriver_scfGetVersion = _core.iMouseDriver_scfGetVersion

class iJoystickDriver(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Reset(self): return _core.iJoystickDriver_Reset(self)
    def GetLast(self, *args): return _core.iJoystickDriver_GetLast(self, *args)
    def GetLastButton(self, *args): return _core.iJoystickDriver_GetLastButton(self, *args)
    def DoButton(self, *args): return _core.iJoystickDriver_DoButton(self, *args)
    def DoMotion(self, *args): return _core.iJoystickDriver_DoMotion(self, *args)
    scfGetVersion = staticmethod(_core.iJoystickDriver_scfGetVersion)
    __swig_destroy__ = _core.delete_iJoystickDriver
    __del__ = lambda self : None;
iJoystickDriver_swigregister = _core.iJoystickDriver_swigregister
iJoystickDriver_swigregister(iJoystickDriver)

def iJoystickDriver_scfGetVersion():
  return _core.iJoystickDriver_scfGetVersion()
iJoystickDriver_scfGetVersion = _core.iJoystickDriver_scfGetVersion

class iConfigFile(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFileName(self): return _core.iConfigFile_GetFileName(self)
    def GetVFS(self): return _core.iConfigFile_GetVFS(self)
    def SetFileName(self, *args): return _core.iConfigFile_SetFileName(self, *args)
    def Load(self, *args): return _core.iConfigFile_Load(self, *args)
    def Save(self, *args): return _core.iConfigFile_Save(self, *args)
    def Clear(self): return _core.iConfigFile_Clear(self)
    def Enumerate(self, Subsection = None): return _core.iConfigFile_Enumerate(self, Subsection)
    def KeyExists(self, *args): return _core.iConfigFile_KeyExists(self, *args)
    def SubsectionExists(self, *args): return _core.iConfigFile_SubsectionExists(self, *args)
    def GetInt(self, *args): return _core.iConfigFile_GetInt(self, *args)
    def GetFloat(self, *args): return _core.iConfigFile_GetFloat(self, *args)
    def GetStr(self, *args): return _core.iConfigFile_GetStr(self, *args)
    def GetBool(self, *args): return _core.iConfigFile_GetBool(self, *args)
    def GetTuple(self, *args): return _core.iConfigFile_GetTuple(self, *args)
    def GetComment(self, *args): return _core.iConfigFile_GetComment(self, *args)
    def SetStr(self, *args): return _core.iConfigFile_SetStr(self, *args)
    def SetInt(self, *args): return _core.iConfigFile_SetInt(self, *args)
    def SetFloat(self, *args): return _core.iConfigFile_SetFloat(self, *args)
    def SetBool(self, *args): return _core.iConfigFile_SetBool(self, *args)
    def SetTuple(self, *args): return _core.iConfigFile_SetTuple(self, *args)
    def SetComment(self, *args): return _core.iConfigFile_SetComment(self, *args)
    def DeleteKey(self, *args): return _core.iConfigFile_DeleteKey(self, *args)
    def GetEOFComment(self): return _core.iConfigFile_GetEOFComment(self)
    def SetEOFComment(self, *args): return _core.iConfigFile_SetEOFComment(self, *args)
    scfGetVersion = staticmethod(_core.iConfigFile_scfGetVersion)
    __swig_destroy__ = _core.delete_iConfigFile
    __del__ = lambda self : None;
iConfigFile_swigregister = _core.iConfigFile_swigregister
iConfigFile_swigregister(iConfigFile)

def iConfigFile_scfGetVersion():
  return _core.iConfigFile_scfGetVersion()
iConfigFile_scfGetVersion = _core.iConfigFile_scfGetVersion

class iConfigIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetConfigFile(self): return _core.iConfigIterator_GetConfigFile(self)
    def GetSubsection(self): return _core.iConfigIterator_GetSubsection(self)
    def Rewind(self): return _core.iConfigIterator_Rewind(self)
    def Next(self): return _core.iConfigIterator_Next(self)
    def HasNext(self): return _core.iConfigIterator_HasNext(self)
    def GetKey(self, Local = False): return _core.iConfigIterator_GetKey(self, Local)
    def GetInt(self): return _core.iConfigIterator_GetInt(self)
    def GetFloat(self): return _core.iConfigIterator_GetFloat(self)
    def GetStr(self): return _core.iConfigIterator_GetStr(self)
    def GetBool(self): return _core.iConfigIterator_GetBool(self)
    def GetTuple(self): return _core.iConfigIterator_GetTuple(self)
    def GetComment(self): return _core.iConfigIterator_GetComment(self)
    scfGetVersion = staticmethod(_core.iConfigIterator_scfGetVersion)
    __swig_destroy__ = _core.delete_iConfigIterator
    __del__ = lambda self : None;
iConfigIterator_swigregister = _core.iConfigIterator_swigregister
iConfigIterator_swigregister(iConfigIterator)

def iConfigIterator_scfGetVersion():
  return _core.iConfigIterator_scfGetVersion()
iConfigIterator_scfGetVersion = _core.iConfigIterator_scfGetVersion

class iConfigManager(iConfigFile):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PriorityMin = _core.iConfigManager_PriorityMin
    PriorityVeryLow = _core.iConfigManager_PriorityVeryLow
    PriorityLow = _core.iConfigManager_PriorityLow
    PriorityMedium = _core.iConfigManager_PriorityMedium
    PriorityHigh = _core.iConfigManager_PriorityHigh
    PriorityVeryHigh = _core.iConfigManager_PriorityVeryHigh
    PriorityMax = _core.iConfigManager_PriorityMax
    ConfigPriorityPlugin = _core.iConfigManager_ConfigPriorityPlugin
    ConfigPriorityApplication = _core.iConfigManager_ConfigPriorityApplication
    ConfigPriorityUserGlobal = _core.iConfigManager_ConfigPriorityUserGlobal
    ConfigPriorityUserApp = _core.iConfigManager_ConfigPriorityUserApp
    ConfigPriorityCmdLine = _core.iConfigManager_ConfigPriorityCmdLine
    def AddDomain(self, *args): return _core.iConfigManager_AddDomain(self, *args)
    def RemoveDomain(self, *args): return _core.iConfigManager_RemoveDomain(self, *args)
    def LookupDomain(self, *args): return _core.iConfigManager_LookupDomain(self, *args)
    def SetDomainPriority(self, *args): return _core.iConfigManager_SetDomainPriority(self, *args)
    def GetDomainPriority(self, *args): return _core.iConfigManager_GetDomainPriority(self, *args)
    def SetDynamicDomain(self, *args): return _core.iConfigManager_SetDynamicDomain(self, *args)
    def GetDynamicDomain(self): return _core.iConfigManager_GetDynamicDomain(self)
    def SetDynamicDomainPriority(self, *args): return _core.iConfigManager_SetDynamicDomainPriority(self, *args)
    def GetDynamicDomainPriority(self): return _core.iConfigManager_GetDynamicDomainPriority(self)
    def FlushRemoved(self): return _core.iConfigManager_FlushRemoved(self)
    scfGetVersion = staticmethod(_core.iConfigManager_scfGetVersion)
    __swig_destroy__ = _core.delete_iConfigManager
    __del__ = lambda self : None;
iConfigManager_swigregister = _core.iConfigManager_swigregister
iConfigManager_swigregister(iConfigManager)

def iConfigManager_scfGetVersion():
  return _core.iConfigManager_scfGetVersion()
iConfigManager_scfGetVersion = _core.iConfigManager_scfGetVersion

class iStringArray(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSize(self): return _core.iStringArray_GetSize(self)
    def Push(self, *args): return _core.iStringArray_Push(self, *args)
    def Pop(self): return _core.iStringArray_Pop(self)
    def Get(self, *args): return _core.iStringArray_Get(self, *args)
    def Find(self, *args): return _core.iStringArray_Find(self, *args)
    def FindCaseInsensitive(self, *args): return _core.iStringArray_FindCaseInsensitive(self, *args)
    def FindSortedKey(self, *args): return _core.iStringArray_FindSortedKey(self, *args)
    def Contains(self, *args): return _core.iStringArray_Contains(self, *args)
    def Sort(self, case_sensitive = True): return _core.iStringArray_Sort(self, case_sensitive)
    def DeleteIndex(self, *args): return _core.iStringArray_DeleteIndex(self, *args)
    def Insert(self, *args): return _core.iStringArray_Insert(self, *args)
    def Empty(self): return _core.iStringArray_Empty(self)
    def IsEmpty(self): return _core.iStringArray_IsEmpty(self)
    def Put(self, *args): return _core.iStringArray_Put(self, *args)
    def Length (*args):
        print "iStringArray.Length() is deprecated, use iStringArray.GetSize() instead"
        return self.GetSize(*args)

    def DeleteAll (*args):
        print "iStringArray.DeleteAll() is deprecated, use iStringArray.Empty() instead"
        return self.Empty(*args)

    def __getitem__(self, *args): return _core.iStringArray___getitem__(self, *args)
    def __contains__(self, *args): return _core.iStringArray___contains__(self, *args)
    def __delitem__(self, *args): return _core.iStringArray___delitem__(self, *args)
    def __len__(self): return _core.iStringArray___len__(self)
    def append(self, *args): return _core.iStringArray_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    scfGetVersion = staticmethod(_core.iStringArray_scfGetVersion)
    __swig_destroy__ = _core.delete_iStringArray
    __del__ = lambda self : None;
iStringArray_swigregister = _core.iStringArray_swigregister
iStringArray_swigregister(iStringArray)

def iStringArray_scfGetVersion():
  return _core.iStringArray_scfGetVersion()
iStringArray_scfGetVersion = _core.iStringArray_scfGetVersion

CS_NODE_DOCUMENT = _core.CS_NODE_DOCUMENT
CS_NODE_ELEMENT = _core.CS_NODE_ELEMENT
CS_NODE_COMMENT = _core.CS_NODE_COMMENT
CS_NODE_UNKNOWN = _core.CS_NODE_UNKNOWN
CS_NODE_TEXT = _core.CS_NODE_TEXT
CS_NODE_DECLARATION = _core.CS_NODE_DECLARATION
CS_CHANGEABLE_NEVER = _core.CS_CHANGEABLE_NEVER
CS_CHANGEABLE_NEWROOT = _core.CS_CHANGEABLE_NEWROOT
CS_CHANGEABLE_YES = _core.CS_CHANGEABLE_YES
class iDocumentAttributeIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _core.iDocumentAttributeIterator_HasNext(self)
    def Next(self): return _core.iDocumentAttributeIterator_Next(self)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    scfGetVersion = staticmethod(_core.iDocumentAttributeIterator_scfGetVersion)
    __swig_destroy__ = _core.delete_iDocumentAttributeIterator
    __del__ = lambda self : None;
iDocumentAttributeIterator_swigregister = _core.iDocumentAttributeIterator_swigregister
iDocumentAttributeIterator_swigregister(iDocumentAttributeIterator)

def iDocumentAttributeIterator_scfGetVersion():
  return _core.iDocumentAttributeIterator_scfGetVersion()
iDocumentAttributeIterator_scfGetVersion = _core.iDocumentAttributeIterator_scfGetVersion

class iDocumentAttribute(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _core.iDocumentAttribute_GetName(self)
    def GetValue(self): return _core.iDocumentAttribute_GetValue(self)
    def GetValueAsInt(self): return _core.iDocumentAttribute_GetValueAsInt(self)
    def GetValueAsFloat(self): return _core.iDocumentAttribute_GetValueAsFloat(self)
    def GetValueAsBool(self): return _core.iDocumentAttribute_GetValueAsBool(self)
    def SetName(self, *args): return _core.iDocumentAttribute_SetName(self, *args)
    def SetValue(self, *args): return _core.iDocumentAttribute_SetValue(self, *args)
    def SetValueAsInt(self, *args): return _core.iDocumentAttribute_SetValueAsInt(self, *args)
    def SetValueAsFloat(self, *args): return _core.iDocumentAttribute_SetValueAsFloat(self, *args)
    scfGetVersion = staticmethod(_core.iDocumentAttribute_scfGetVersion)
    __swig_destroy__ = _core.delete_iDocumentAttribute
    __del__ = lambda self : None;
iDocumentAttribute_swigregister = _core.iDocumentAttribute_swigregister
iDocumentAttribute_swigregister(iDocumentAttribute)

def iDocumentAttribute_scfGetVersion():
  return _core.iDocumentAttribute_scfGetVersion()
iDocumentAttribute_scfGetVersion = _core.iDocumentAttribute_scfGetVersion

class iDocumentNodeIterator(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _core.iDocumentNodeIterator_HasNext(self)
    def Next(self): return _core.iDocumentNodeIterator_Next(self)
    def GetNextPosition(self): return _core.iDocumentNodeIterator_GetNextPosition(self)
    def GetEndPosition(self): return _core.iDocumentNodeIterator_GetEndPosition(self)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    scfGetVersion = staticmethod(_core.iDocumentNodeIterator_scfGetVersion)
    __swig_destroy__ = _core.delete_iDocumentNodeIterator
    __del__ = lambda self : None;
iDocumentNodeIterator_swigregister = _core.iDocumentNodeIterator_swigregister
iDocumentNodeIterator_swigregister(iDocumentNodeIterator)

def iDocumentNodeIterator_scfGetVersion():
  return _core.iDocumentNodeIterator_scfGetVersion()
iDocumentNodeIterator_scfGetVersion = _core.iDocumentNodeIterator_scfGetVersion

class iDocumentNode(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetType(self): return _core.iDocumentNode_GetType(self)
    def Equals(self, *args): return _core.iDocumentNode_Equals(self, *args)
    def GetValue(self): return _core.iDocumentNode_GetValue(self)
    def SetValue(self, *args): return _core.iDocumentNode_SetValue(self, *args)
    def SetValueAsInt(self, *args): return _core.iDocumentNode_SetValueAsInt(self, *args)
    def SetValueAsFloat(self, *args): return _core.iDocumentNode_SetValueAsFloat(self, *args)
    def GetParent(self): return _core.iDocumentNode_GetParent(self)
    def GetNodes(self, *args): return _core.iDocumentNode_GetNodes(self, *args)
    def GetNode(self, *args): return _core.iDocumentNode_GetNode(self, *args)
    def RemoveNode(self, *args): return _core.iDocumentNode_RemoveNode(self, *args)
    def RemoveNodes(self, *args): return _core.iDocumentNode_RemoveNodes(self, *args)
    def CreateNodeBefore(self, *args): return _core.iDocumentNode_CreateNodeBefore(self, *args)
    def GetContentsValue(self): return _core.iDocumentNode_GetContentsValue(self)
    def GetContentsValueAsInt(self): return _core.iDocumentNode_GetContentsValueAsInt(self)
    def GetContentsValueAsFloat(self): return _core.iDocumentNode_GetContentsValueAsFloat(self)
    def GetAttributes(self): return _core.iDocumentNode_GetAttributes(self)
    def GetAttribute(self, *args): return _core.iDocumentNode_GetAttribute(self, *args)
    def GetAttributeValue(self, *args): return _core.iDocumentNode_GetAttributeValue(self, *args)
    def GetAttributeValueAsInt(self, *args): return _core.iDocumentNode_GetAttributeValueAsInt(self, *args)
    def GetAttributeValueAsFloat(self, *args): return _core.iDocumentNode_GetAttributeValueAsFloat(self, *args)
    def GetAttributeValueAsBool(self, *args): return _core.iDocumentNode_GetAttributeValueAsBool(self, *args)
    def RemoveAttribute(self, *args): return _core.iDocumentNode_RemoveAttribute(self, *args)
    def RemoveAttributes(self): return _core.iDocumentNode_RemoveAttributes(self)
    def SetAttribute(self, *args): return _core.iDocumentNode_SetAttribute(self, *args)
    def SetAttributeAsInt(self, *args): return _core.iDocumentNode_SetAttributeAsInt(self, *args)
    def SetAttributeAsFloat(self, *args): return _core.iDocumentNode_SetAttributeAsFloat(self, *args)
    scfGetVersion = staticmethod(_core.iDocumentNode_scfGetVersion)
    __swig_destroy__ = _core.delete_iDocumentNode
    __del__ = lambda self : None;
iDocumentNode_swigregister = _core.iDocumentNode_swigregister
iDocumentNode_swigregister(iDocumentNode)

def iDocumentNode_scfGetVersion():
  return _core.iDocumentNode_scfGetVersion()
iDocumentNode_scfGetVersion = _core.iDocumentNode_scfGetVersion

class iDocument(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Clear(self): return _core.iDocument_Clear(self)
    def CreateRoot(self): return _core.iDocument_CreateRoot(self)
    def GetRoot(self): return _core.iDocument_GetRoot(self)
    def Parse(self, *args): return _core.iDocument_Parse(self, *args)
    def Changeable(self): return _core.iDocument_Changeable(self)
    def Write(self, *args): return _core.iDocument_Write(self, *args)
    scfGetVersion = staticmethod(_core.iDocument_scfGetVersion)
    __swig_destroy__ = _core.delete_iDocument
    __del__ = lambda self : None;
iDocument_swigregister = _core.iDocument_swigregister
iDocument_swigregister(iDocument)

def iDocument_scfGetVersion():
  return _core.iDocument_scfGetVersion()
iDocument_scfGetVersion = _core.iDocument_scfGetVersion

class iDocumentSystem(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateDocument(self): return _core.iDocumentSystem_CreateDocument(self)
    scfGetVersion = staticmethod(_core.iDocumentSystem_scfGetVersion)
    __swig_destroy__ = _core.delete_iDocumentSystem
    __del__ = lambda self : None;
iDocumentSystem_swigregister = _core.iDocumentSystem_swigregister
iDocumentSystem_swigregister(iDocumentSystem)

def iDocumentSystem_scfGetVersion():
  return _core.iDocumentSystem_scfGetVersion()
iDocumentSystem_scfGetVersion = _core.iDocumentSystem_scfGetVersion

class scfConfigFile(iConfigFile):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _core.scfConfigFile_IncRef(self)
    def DecRef(self): return _core.scfConfigFile_DecRef(self)
    def GetRefCount(self): return _core.scfConfigFile_GetRefCount(self)
    def QueryInterface(self, *args): return _core.scfConfigFile_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _core.scfConfigFile_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _core.scfConfigFile_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _core.scfConfigFile_GetInterfaceMetadata(self)
scfConfigFile_swigregister = _core.scfConfigFile_swigregister
scfConfigFile_swigregister(scfConfigFile)

class csConfigFile(scfConfigFile):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_csConfigFile
    __del__ = lambda self : None;
    def IsEmpty(self): return _core.csConfigFile_IsEmpty(self)
    def GetFileName(self): return _core.csConfigFile_GetFileName(self)
    def GetVFS(self): return _core.csConfigFile_GetVFS(self)
    def SetFileName(self, *args): return _core.csConfigFile_SetFileName(self, *args)
    def Load(self, *args): return _core.csConfigFile_Load(self, *args)
    def LoadFromBuffer(self, *args): return _core.csConfigFile_LoadFromBuffer(self, *args)
    def Save(self, *args): return _core.csConfigFile_Save(self, *args)
    def Clear(self): return _core.csConfigFile_Clear(self)
    def Enumerate(self, Subsection = None): return _core.csConfigFile_Enumerate(self, Subsection)
    def KeyExists(self, *args): return _core.csConfigFile_KeyExists(self, *args)
    def SubsectionExists(self, *args): return _core.csConfigFile_SubsectionExists(self, *args)
    def GetInt(self, *args): return _core.csConfigFile_GetInt(self, *args)
    def GetFloat(self, *args): return _core.csConfigFile_GetFloat(self, *args)
    def GetStr(self, *args): return _core.csConfigFile_GetStr(self, *args)
    def GetBool(self, *args): return _core.csConfigFile_GetBool(self, *args)
    def GetTuple(self, *args): return _core.csConfigFile_GetTuple(self, *args)
    def GetComment(self, *args): return _core.csConfigFile_GetComment(self, *args)
    def SetStr(self, *args): return _core.csConfigFile_SetStr(self, *args)
    def SetInt(self, *args): return _core.csConfigFile_SetInt(self, *args)
    def SetFloat(self, *args): return _core.csConfigFile_SetFloat(self, *args)
    def SetBool(self, *args): return _core.csConfigFile_SetBool(self, *args)
    def SetTuple(self, *args): return _core.csConfigFile_SetTuple(self, *args)
    def SetComment(self, *args): return _core.csConfigFile_SetComment(self, *args)
    def DeleteKey(self, *args): return _core.csConfigFile_DeleteKey(self, *args)
    def SetEOFComment(self, *args): return _core.csConfigFile_SetEOFComment(self, *args)
    def GetEOFComment(self): return _core.csConfigFile_GetEOFComment(self)
    def ParseCommandLine(self, *args): return _core.csConfigFile_ParseCommandLine(self, *args)
csConfigFile_swigregister = _core.csConfigFile_swigregister
csConfigFile_swigregister(csConfigFile)

class csRadixSorter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_csRadixSorter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csRadixSorter
    __del__ = lambda self : None;
    def Sort(self, *args): return _core.csRadixSorter_Sort(self, *args)
    def GetRanks(self): return _core.csRadixSorter_GetRanks(self)
csRadixSorter_swigregister = _core.csRadixSorter_swigregister
csRadixSorter_swigregister(csRadixSorter)

class csTinyDocumentSystem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, parent = None): 
        this = _core.new_csTinyDocumentSystem(parent)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csTinyDocumentSystem
    __del__ = lambda self : None;
    def CreateDocument(self): return _core.csTinyDocumentSystem_CreateDocument(self)
csTinyDocumentSystem_swigregister = _core.csTinyDocumentSystem_swigregister
csTinyDocumentSystem_swigregister(csTinyDocumentSystem)

class iDataBuffer(iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSize(self): return _core.iDataBuffer_GetSize(self)
    def GetData(self): return _core.iDataBuffer_GetData(self)
    def asString(self): return _core.iDataBuffer_asString(self)
    def GetUint8(self): return _core.iDataBuffer_GetUint8(self)
    def AsBuffer(self): return _core.iDataBuffer_AsBuffer(self)
    scfGetVersion = staticmethod(_core.iDataBuffer_scfGetVersion)
    __swig_destroy__ = _core.delete_iDataBuffer
    __del__ = lambda self : None;
iDataBuffer_swigregister = _core.iDataBuffer_swigregister
iDataBuffer_swigregister(iDataBuffer)

def iDataBuffer_scfGetVersion():
  return _core.iDataBuffer_scfGetVersion()
iDataBuffer_scfGetVersion = _core.iDataBuffer_scfGetVersion


def CSKEY_SHIFT_NUM(*args):
  return _core.CSKEY_SHIFT_NUM(*args)
CSKEY_SHIFT_NUM = _core.CSKEY_SHIFT_NUM

def CSKEY_CTRL_NUM(*args):
  return _core.CSKEY_CTRL_NUM(*args)
CSKEY_CTRL_NUM = _core.CSKEY_CTRL_NUM

def CSKEY_ALT_NUM(*args):
  return _core.CSKEY_ALT_NUM(*args)
CSKEY_ALT_NUM = _core.CSKEY_ALT_NUM

def CSKEY_SPECIAL(*args):
  return _core.CSKEY_SPECIAL(*args)
CSKEY_SPECIAL = _core.CSKEY_SPECIAL

def CSKEY_SPECIAL_NUM(*args):
  return _core.CSKEY_SPECIAL_NUM(*args)
CSKEY_SPECIAL_NUM = _core.CSKEY_SPECIAL_NUM

def CSKEY_MODIFIER(*args):
  return _core.CSKEY_MODIFIER(*args)
CSKEY_MODIFIER = _core.CSKEY_MODIFIER

def CS_IS_KEYBOARD_EVENT(*args):
  return _core.CS_IS_KEYBOARD_EVENT(*args)
CS_IS_KEYBOARD_EVENT = _core.CS_IS_KEYBOARD_EVENT

def CS_IS_MOUSE_EVENT(*args):
  return _core.CS_IS_MOUSE_EVENT(*args)
CS_IS_MOUSE_EVENT = _core.CS_IS_MOUSE_EVENT

def CS_IS_JOYSTICK_EVENT(*args):
  return _core.CS_IS_JOYSTICK_EVENT(*args)
CS_IS_JOYSTICK_EVENT = _core.CS_IS_JOYSTICK_EVENT

def CS_IS_INPUT_EVENT(*args):
  return _core.CS_IS_INPUT_EVENT(*args)
CS_IS_INPUT_EVENT = _core.CS_IS_INPUT_EVENT

def csevAllEvents(*args):
  return _core.csevAllEvents(*args)
csevAllEvents = _core.csevAllEvents

def csevFrame(*args):
  return _core.csevFrame(*args)
csevFrame = _core.csevFrame

def csevInput(*args):
  return _core.csevInput(*args)
csevInput = _core.csevInput

def csevQuit(*args):
  return _core.csevQuit(*args)
csevQuit = _core.csevQuit

def csevCanvasClose(*args):
  return _core.csevCanvasClose(*args)
csevCanvasClose = _core.csevCanvasClose

def csevCanvasExposed(*args):
  return _core.csevCanvasExposed(*args)
csevCanvasExposed = _core.csevCanvasExposed

def csevCanvasHidden(*args):
  return _core.csevCanvasHidden(*args)
csevCanvasHidden = _core.csevCanvasHidden

def csevCanvasResize(*args):
  return _core.csevCanvasResize(*args)
csevCanvasResize = _core.csevCanvasResize

def csevFocusChanged(*args):
  return _core.csevFocusChanged(*args)
csevFocusChanged = _core.csevFocusChanged

def csevFocusGained(*args):
  return _core.csevFocusGained(*args)
csevFocusGained = _core.csevFocusGained

def csevFocusLost(*args):
  return _core.csevFocusLost(*args)
csevFocusLost = _core.csevFocusLost

def csevKeyboardEvent(*args):
  return _core.csevKeyboardEvent(*args)
csevKeyboardEvent = _core.csevKeyboardEvent

def csevKeyboardDown(*args):
  return _core.csevKeyboardDown(*args)
csevKeyboardDown = _core.csevKeyboardDown

def csevKeyboardUp(*args):
  return _core.csevKeyboardUp(*args)
csevKeyboardUp = _core.csevKeyboardUp

def csevMouseEvent(*args):
  return _core.csevMouseEvent(*args)
csevMouseEvent = _core.csevMouseEvent

def csevMouseButton(*args):
  return _core.csevMouseButton(*args)
csevMouseButton = _core.csevMouseButton

def csevMouseUp(*args):
  return _core.csevMouseUp(*args)
csevMouseUp = _core.csevMouseUp

def csevMouseDown(*args):
  return _core.csevMouseDown(*args)
csevMouseDown = _core.csevMouseDown

def csevMouseClick(*args):
  return _core.csevMouseClick(*args)
csevMouseClick = _core.csevMouseClick

def csevMouseDoubleClick(*args):
  return _core.csevMouseDoubleClick(*args)
csevMouseDoubleClick = _core.csevMouseDoubleClick

def csevMouseMove(*args):
  return _core.csevMouseMove(*args)
csevMouseMove = _core.csevMouseMove

def csevJoystickEvent(*args):
  return _core.csevJoystickEvent(*args)
csevJoystickEvent = _core.csevJoystickEvent
class csEventHandlerRegistry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_csEventHandlerRegistry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csEventHandlerRegistry
    __del__ = lambda self : None;
    GetGenericID = staticmethod(_core.csEventHandlerRegistry_GetGenericID)
    GetGenericPreBoundID = staticmethod(_core.csEventHandlerRegistry_GetGenericPreBoundID)
    GetGenericPostBoundID = staticmethod(_core.csEventHandlerRegistry_GetGenericPostBoundID)
    RegisterID = staticmethod(_core.csEventHandlerRegistry_RegisterID)
    GetID = staticmethod(_core.csEventHandlerRegistry_GetID)
    ReleaseID = staticmethod(_core.csEventHandlerRegistry_ReleaseID)
    GetHandler = staticmethod(_core.csEventHandlerRegistry_GetHandler)
    IsInstanceOf = staticmethod(_core.csEventHandlerRegistry_IsInstanceOf)
    IsInstance = staticmethod(_core.csEventHandlerRegistry_IsInstance)
    GetGeneric = staticmethod(_core.csEventHandlerRegistry_GetGeneric)
    GetString = staticmethod(_core.csEventHandlerRegistry_GetString)
    GetRegistry = staticmethod(_core.csEventHandlerRegistry_GetRegistry)
csEventHandlerRegistry_swigregister = _core.csEventHandlerRegistry_swigregister
csEventHandlerRegistry_swigregister(csEventHandlerRegistry)

def csEventHandlerRegistry_GetGenericID(*args):
  return _core.csEventHandlerRegistry_GetGenericID(*args)
csEventHandlerRegistry_GetGenericID = _core.csEventHandlerRegistry_GetGenericID

def csEventHandlerRegistry_GetGenericPreBoundID(*args):
  return _core.csEventHandlerRegistry_GetGenericPreBoundID(*args)
csEventHandlerRegistry_GetGenericPreBoundID = _core.csEventHandlerRegistry_GetGenericPreBoundID

def csEventHandlerRegistry_GetGenericPostBoundID(*args):
  return _core.csEventHandlerRegistry_GetGenericPostBoundID(*args)
csEventHandlerRegistry_GetGenericPostBoundID = _core.csEventHandlerRegistry_GetGenericPostBoundID

def csEventHandlerRegistry_RegisterID(*args):
  return _core.csEventHandlerRegistry_RegisterID(*args)
csEventHandlerRegistry_RegisterID = _core.csEventHandlerRegistry_RegisterID

def csEventHandlerRegistry_GetID(*args):
  return _core.csEventHandlerRegistry_GetID(*args)
csEventHandlerRegistry_GetID = _core.csEventHandlerRegistry_GetID

def csEventHandlerRegistry_ReleaseID(*args):
  return _core.csEventHandlerRegistry_ReleaseID(*args)
csEventHandlerRegistry_ReleaseID = _core.csEventHandlerRegistry_ReleaseID

def csEventHandlerRegistry_GetHandler(*args):
  return _core.csEventHandlerRegistry_GetHandler(*args)
csEventHandlerRegistry_GetHandler = _core.csEventHandlerRegistry_GetHandler

def csEventHandlerRegistry_IsInstanceOf(*args):
  return _core.csEventHandlerRegistry_IsInstanceOf(*args)
csEventHandlerRegistry_IsInstanceOf = _core.csEventHandlerRegistry_IsInstanceOf

def csEventHandlerRegistry_IsInstance(*args):
  return _core.csEventHandlerRegistry_IsInstance(*args)
csEventHandlerRegistry_IsInstance = _core.csEventHandlerRegistry_IsInstance

def csEventHandlerRegistry_GetGeneric(*args):
  return _core.csEventHandlerRegistry_GetGeneric(*args)
csEventHandlerRegistry_GetGeneric = _core.csEventHandlerRegistry_GetGeneric

def csEventHandlerRegistry_GetString(*args):
  return _core.csEventHandlerRegistry_GetString(*args)
csEventHandlerRegistry_GetString = _core.csEventHandlerRegistry_GetString

def csEventHandlerRegistry_GetRegistry(*args):
  return _core.csEventHandlerRegistry_GetRegistry(*args)
csEventHandlerRegistry_GetRegistry = _core.csEventHandlerRegistry_GetRegistry

class iFrameEventSignpost(iEventHandler):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_iFrameEventSignpost
    __del__ = lambda self : None;
    def InstancePrec(self, *args): return _core.iFrameEventSignpost_InstancePrec(self, *args)
    def InstanceSucc(self, *args): return _core.iFrameEventSignpost_InstanceSucc(self, *args)
    def HandleEvent(self, *args): return _core.iFrameEventSignpost_HandleEvent(self, *args)
iFrameEventSignpost_swigregister = _core.iFrameEventSignpost_swigregister
iFrameEventSignpost_swigregister(iFrameEventSignpost)

class FrameSignpost_Logic3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    StaticHandlerName = staticmethod(_core.FrameSignpost_Logic3D_StaticHandlerName)
    StaticID = staticmethod(_core.FrameSignpost_Logic3D_StaticID)
    def GenericName(self): return _core.FrameSignpost_Logic3D_GenericName(self)
    def GenericID(self, *args): return _core.FrameSignpost_Logic3D_GenericID(self, *args)
    def GenericPrec(self, *args): return _core.FrameSignpost_Logic3D_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.FrameSignpost_Logic3D_GenericSucc(self, *args)
    __swig_destroy__ = _core.delete_FrameSignpost_Logic3D
    __del__ = lambda self : None;
FrameSignpost_Logic3D_swigregister = _core.FrameSignpost_Logic3D_swigregister
FrameSignpost_Logic3D_swigregister(FrameSignpost_Logic3D)

def FrameSignpost_Logic3D_StaticHandlerName():
  return _core.FrameSignpost_Logic3D_StaticHandlerName()
FrameSignpost_Logic3D_StaticHandlerName = _core.FrameSignpost_Logic3D_StaticHandlerName

def FrameSignpost_Logic3D_StaticID(*args):
  return _core.FrameSignpost_Logic3D_StaticID(*args)
FrameSignpost_Logic3D_StaticID = _core.FrameSignpost_Logic3D_StaticID

class FrameSignpost_3D2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    StaticHandlerName = staticmethod(_core.FrameSignpost_3D2D_StaticHandlerName)
    StaticID = staticmethod(_core.FrameSignpost_3D2D_StaticID)
    def GenericName(self): return _core.FrameSignpost_3D2D_GenericName(self)
    def GenericID(self, *args): return _core.FrameSignpost_3D2D_GenericID(self, *args)
    def GenericPrec(self, *args): return _core.FrameSignpost_3D2D_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.FrameSignpost_3D2D_GenericSucc(self, *args)
    __swig_destroy__ = _core.delete_FrameSignpost_3D2D
    __del__ = lambda self : None;
FrameSignpost_3D2D_swigregister = _core.FrameSignpost_3D2D_swigregister
FrameSignpost_3D2D_swigregister(FrameSignpost_3D2D)

def FrameSignpost_3D2D_StaticHandlerName():
  return _core.FrameSignpost_3D2D_StaticHandlerName()
FrameSignpost_3D2D_StaticHandlerName = _core.FrameSignpost_3D2D_StaticHandlerName

def FrameSignpost_3D2D_StaticID(*args):
  return _core.FrameSignpost_3D2D_StaticID(*args)
FrameSignpost_3D2D_StaticID = _core.FrameSignpost_3D2D_StaticID

class FrameSignpost_2DConsole(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    StaticHandlerName = staticmethod(_core.FrameSignpost_2DConsole_StaticHandlerName)
    StaticID = staticmethod(_core.FrameSignpost_2DConsole_StaticID)
    def GenericName(self): return _core.FrameSignpost_2DConsole_GenericName(self)
    def GenericID(self, *args): return _core.FrameSignpost_2DConsole_GenericID(self, *args)
    def GenericPrec(self, *args): return _core.FrameSignpost_2DConsole_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.FrameSignpost_2DConsole_GenericSucc(self, *args)
    __swig_destroy__ = _core.delete_FrameSignpost_2DConsole
    __del__ = lambda self : None;
FrameSignpost_2DConsole_swigregister = _core.FrameSignpost_2DConsole_swigregister
FrameSignpost_2DConsole_swigregister(FrameSignpost_2DConsole)

def FrameSignpost_2DConsole_StaticHandlerName():
  return _core.FrameSignpost_2DConsole_StaticHandlerName()
FrameSignpost_2DConsole_StaticHandlerName = _core.FrameSignpost_2DConsole_StaticHandlerName

def FrameSignpost_2DConsole_StaticID(*args):
  return _core.FrameSignpost_2DConsole_StaticID(*args)
FrameSignpost_2DConsole_StaticID = _core.FrameSignpost_2DConsole_StaticID

class FrameSignpost_ConsoleDebug(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    StaticHandlerName = staticmethod(_core.FrameSignpost_ConsoleDebug_StaticHandlerName)
    StaticID = staticmethod(_core.FrameSignpost_ConsoleDebug_StaticID)
    def GenericName(self): return _core.FrameSignpost_ConsoleDebug_GenericName(self)
    def GenericID(self, *args): return _core.FrameSignpost_ConsoleDebug_GenericID(self, *args)
    def GenericPrec(self, *args): return _core.FrameSignpost_ConsoleDebug_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.FrameSignpost_ConsoleDebug_GenericSucc(self, *args)
    __swig_destroy__ = _core.delete_FrameSignpost_ConsoleDebug
    __del__ = lambda self : None;
FrameSignpost_ConsoleDebug_swigregister = _core.FrameSignpost_ConsoleDebug_swigregister
FrameSignpost_ConsoleDebug_swigregister(FrameSignpost_ConsoleDebug)

def FrameSignpost_ConsoleDebug_StaticHandlerName():
  return _core.FrameSignpost_ConsoleDebug_StaticHandlerName()
FrameSignpost_ConsoleDebug_StaticHandlerName = _core.FrameSignpost_ConsoleDebug_StaticHandlerName

def FrameSignpost_ConsoleDebug_StaticID(*args):
  return _core.FrameSignpost_ConsoleDebug_StaticID(*args)
FrameSignpost_ConsoleDebug_StaticID = _core.FrameSignpost_ConsoleDebug_StaticID

class FrameSignpost_DebugFrame(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    StaticHandlerName = staticmethod(_core.FrameSignpost_DebugFrame_StaticHandlerName)
    StaticID = staticmethod(_core.FrameSignpost_DebugFrame_StaticID)
    def GenericName(self): return _core.FrameSignpost_DebugFrame_GenericName(self)
    def GenericID(self, *args): return _core.FrameSignpost_DebugFrame_GenericID(self, *args)
    def GenericPrec(self, *args): return _core.FrameSignpost_DebugFrame_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.FrameSignpost_DebugFrame_GenericSucc(self, *args)
    __swig_destroy__ = _core.delete_FrameSignpost_DebugFrame
    __del__ = lambda self : None;
FrameSignpost_DebugFrame_swigregister = _core.FrameSignpost_DebugFrame_swigregister
FrameSignpost_DebugFrame_swigregister(FrameSignpost_DebugFrame)

def FrameSignpost_DebugFrame_StaticHandlerName():
  return _core.FrameSignpost_DebugFrame_StaticHandlerName()
FrameSignpost_DebugFrame_StaticHandlerName = _core.FrameSignpost_DebugFrame_StaticHandlerName

def FrameSignpost_DebugFrame_StaticID(*args):
  return _core.FrameSignpost_DebugFrame_StaticID(*args)
FrameSignpost_DebugFrame_StaticID = _core.FrameSignpost_DebugFrame_StaticID

class FrameBegin3DDraw(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_FrameBegin3DDraw(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_FrameBegin3DDraw
    __del__ = lambda self : None;
    def HandleEvent(self, *args): return _core.FrameBegin3DDraw_HandleEvent(self, *args)
    StaticHandlerName = staticmethod(_core.FrameBegin3DDraw_StaticHandlerName)
    StaticID = staticmethod(_core.FrameBegin3DDraw_StaticID)
    def GenericName(self): return _core.FrameBegin3DDraw_GenericName(self)
    def GenericID(self, *args): return _core.FrameBegin3DDraw_GenericID(self, *args)
    def InstancePrec(self, *args): return _core.FrameBegin3DDraw_InstancePrec(self, *args)
    def InstanceSucc(self, *args): return _core.FrameBegin3DDraw_InstanceSucc(self, *args)
    def GenericPrec(self, *args): return _core.FrameBegin3DDraw_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.FrameBegin3DDraw_GenericSucc(self, *args)
FrameBegin3DDraw_swigregister = _core.FrameBegin3DDraw_swigregister
FrameBegin3DDraw_swigregister(FrameBegin3DDraw)

def FrameBegin3DDraw_StaticHandlerName():
  return _core.FrameBegin3DDraw_StaticHandlerName()
FrameBegin3DDraw_StaticHandlerName = _core.FrameBegin3DDraw_StaticHandlerName

def FrameBegin3DDraw_StaticID(*args):
  return _core.FrameBegin3DDraw_StaticID(*args)
FrameBegin3DDraw_StaticID = _core.FrameBegin3DDraw_StaticID

class FramePrinter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_FramePrinter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_FramePrinter
    __del__ = lambda self : None;
    def HandleEvent(self, *args): return _core.FramePrinter_HandleEvent(self, *args)
    StaticHandlerName = staticmethod(_core.FramePrinter_StaticHandlerName)
    StaticID = staticmethod(_core.FramePrinter_StaticID)
    def GenericName(self): return _core.FramePrinter_GenericName(self)
    def GenericID(self, *args): return _core.FramePrinter_GenericID(self, *args)
    def InstancePrec(self, *args): return _core.FramePrinter_InstancePrec(self, *args)
    def InstanceSucc(self, *args): return _core.FramePrinter_InstanceSucc(self, *args)
    def GenericPrec(self, *args): return _core.FramePrinter_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core.FramePrinter_GenericSucc(self, *args)
FramePrinter_swigregister = _core.FramePrinter_swigregister
FramePrinter_swigregister(FramePrinter)

def FramePrinter_StaticHandlerName():
  return _core.FramePrinter_StaticHandlerName()
FramePrinter_StaticHandlerName = _core.FramePrinter_StaticHandlerName

def FramePrinter_StaticID(*args):
  return _core.FramePrinter_StaticID(*args)
FramePrinter_StaticID = _core.FramePrinter_StaticID


def CS_LOAD_PLUGIN_ALWAYS(*args):
  return _core.CS_LOAD_PLUGIN_ALWAYS(*args)
CS_LOAD_PLUGIN_ALWAYS = _core.CS_LOAD_PLUGIN_ALWAYS

def CS_QUERY_REGISTRY(*args):
  return _core.CS_QUERY_REGISTRY(*args)
CS_QUERY_REGISTRY = _core.CS_QUERY_REGISTRY

def CS_QUERY_REGISTRY_TAG_INTERFACE(*args):
  return _core.CS_QUERY_REGISTRY_TAG_INTERFACE(*args)
CS_QUERY_REGISTRY_TAG_INTERFACE = _core.CS_QUERY_REGISTRY_TAG_INTERFACE

def SCF_QUERY_INTERFACE(*args):
  return _core.SCF_QUERY_INTERFACE(*args)
SCF_QUERY_INTERFACE = _core.SCF_QUERY_INTERFACE

def SCF_QUERY_INTERFACE_SAFE(*args):
  return _core.SCF_QUERY_INTERFACE_SAFE(*args)
SCF_QUERY_INTERFACE_SAFE = _core.SCF_QUERY_INTERFACE_SAFE

def CS_QUERY_PLUGIN_CLASS(*args):
  return _core.CS_QUERY_PLUGIN_CLASS(*args)
CS_QUERY_PLUGIN_CLASS = _core.CS_QUERY_PLUGIN_CLASS

def CS_LOAD_PLUGIN(*args):
  return _core.CS_LOAD_PLUGIN(*args)
CS_LOAD_PLUGIN = _core.CS_LOAD_PLUGIN

def CS_GET_CHILD_OBJECT(*args):
  return _core.CS_GET_CHILD_OBJECT(*args)
CS_GET_CHILD_OBJECT = _core.CS_GET_CHILD_OBJECT

def CS_GET_NAMED_CHILD_OBJECT(*args):
  return _core.CS_GET_NAMED_CHILD_OBJECT(*args)
CS_GET_NAMED_CHILD_OBJECT = _core.CS_GET_NAMED_CHILD_OBJECT

def CS_GET_FIRST_NAMED_CHILD_OBJECT(*args):
  return _core.CS_GET_FIRST_NAMED_CHILD_OBJECT(*args)
CS_GET_FIRST_NAMED_CHILD_OBJECT = _core.CS_GET_FIRST_NAMED_CHILD_OBJECT
class csPyEventPlugParent(iEventPlug):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _core.csPyEventPlugParent_IncRef(self)
    def DecRef(self): return _core.csPyEventPlugParent_DecRef(self)
    def GetRefCount(self): return _core.csPyEventPlugParent_GetRefCount(self)
    def QueryInterface(self, *args): return _core.csPyEventPlugParent_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _core.csPyEventPlugParent_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _core.csPyEventPlugParent_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _core.csPyEventPlugParent_GetInterfaceMetadata(self)
csPyEventPlugParent_swigregister = _core.csPyEventPlugParent_swigregister
csPyEventPlugParent_swigregister(csPyEventPlugParent)

class csPyEventPlug(csPyEventPlugParent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_csPyEventPlug()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_csPyEventPlug
    __del__ = lambda self : None;
    def GetPotentiallyConflictingEvents(self): return _core.csPyEventPlug_GetPotentiallyConflictingEvents(self)
    def QueryEventPriority(self, *args): return _core.csPyEventPlug_QueryEventPriority(self, *args)
csPyEventPlug_swigregister = _core.csPyEventPlug_swigregister
csPyEventPlug_swigregister(csPyEventPlug)

class csPyEventHandlerParent(iEventHandler):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _core.csPyEventHandlerParent_IncRef(self)
    def DecRef(self): return _core.csPyEventHandlerParent_DecRef(self)
    def GetRefCount(self): return _core.csPyEventHandlerParent_GetRefCount(self)
    def QueryInterface(self, *args): return _core.csPyEventHandlerParent_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _core.csPyEventHandlerParent_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _core.csPyEventHandlerParent_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _core.csPyEventHandlerParent_GetInterfaceMetadata(self)
csPyEventHandlerParent_swigregister = _core.csPyEventHandlerParent_swigregister
csPyEventHandlerParent_swigregister(csPyEventHandlerParent)

class _csPyEventHandler(csPyEventHandlerParent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new__csPyEventHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete__csPyEventHandler
    __del__ = lambda self : None;
    def HandleEvent(self, *args): return _core._csPyEventHandler_HandleEvent(self, *args)
    StaticHandlerName = staticmethod(_core._csPyEventHandler_StaticHandlerName)
    StaticID = staticmethod(_core._csPyEventHandler_StaticID)
    def GenericName(self): return _core._csPyEventHandler_GenericName(self)
    def GenericID(self, *args): return _core._csPyEventHandler_GenericID(self, *args)
    def GenericPrec(self, *args): return _core._csPyEventHandler_GenericPrec(self, *args)
    def GenericSucc(self, *args): return _core._csPyEventHandler_GenericSucc(self, *args)
    def InstancePrec(self, *args): return _core._csPyEventHandler_InstancePrec(self, *args)
    def InstanceSucc(self, *args): return _core._csPyEventHandler_InstanceSucc(self, *args)
_csPyEventHandler_swigregister = _core._csPyEventHandler_swigregister
_csPyEventHandler_swigregister(_csPyEventHandler)

def _csPyEventHandler_StaticHandlerName():
  return _core._csPyEventHandler_StaticHandlerName()
_csPyEventHandler_StaticHandlerName = _core._csPyEventHandler_StaticHandlerName

def _csPyEventHandler_StaticID(*args):
  return _core._csPyEventHandler_StaticID(*args)
_csPyEventHandler_StaticID = _core._csPyEventHandler_StaticID

class csPyEventHandler (_csPyEventHandler):
  """Python version of iEventHandler implementation.
     This class can be used as base class for event handlers in Python.
     Call csPyEventHandler.__init__(self) in __init__ of derived class.
  """
  def __init__ (self):
    _csPyEventHandler.__init__(self, self)

class _EventHandlerFuncWrapper (csPyEventHandler):
  def __init__ (self, func):
    csPyEventHandler.__init__(self)
    self._func = func
    # Make sure a reference keeps to this wrapper instance.
    self._func._cs_event_handler_wrapper = self
  def HandleEvent (self, event):
    return self._func(event)
def _csInitializer_SetupEventHandler (reg, obj,
    eventids=None):
  """Replacement of C++ versions."""
  if callable(obj):
    # obj is a function
    hdlr = _EventHandlerFuncWrapper(obj)
    hdlr.thisown = 1
  else:
    # assume it is a iEventHandler
    hdlr = obj
  if eventids==None:
    eventids=[csevFrame(reg), csevInput(reg), csevKeyboardEvent(reg), \
              csevMouseEvent(reg), csevQuit(reg), CS_EVENTLIST_END]
  return csInitializer._SetupEventHandler(reg, hdlr, eventids)

csInitializer.SetupEventHandler = \
  staticmethod(_csInitializer_SetupEventHandler)

def csevCommandLineHelp(reg):
  csEventNameRegistry.GetID(reg, "crystalspace.application.commandlinehelp")

csInvalidStringID = ~0 # we want stringids as unsigned long
CS_EVENTLIST_END = csInvalidStringID

def _csInitializer_RequestPlugins (reg, plugins):
  """Replacement of C++ version."""
  def _get_tuple (x):
    if callable(x):
      return tuple(x())
    else:
      return tuple(x)
  requests = csPluginRequestArray()
  for cls, intf, ident, ver in map(
      lambda x: _get_tuple(x), plugins):
    requests.Push(csPluginRequest(
      cls, intf, ident, ver))
  return csInitializer._RequestPlugins(reg, requests)

csInitializer.RequestPlugins = staticmethod(_csInitializer_RequestPlugins)

def _csInitializer_CreateEnvironment (*args):
  oreg = csInitializer._CreateEnvironment(*args)
  SyncSCFPointers()
  return oreg
csInitializer.CreateEnvironment = staticmethod(_csInitializer_CreateEnvironment)

def _csInitializer_InitializeSCF (*args):
  res = _core.csInitializer__InitializeSCF(*args)
  SyncSCFPointers()
  return res
csInitializer.InitializeSCF = staticmethod(_csInitializer_CreateEnvironment)


corecvar = cvar
def CS_REQUEST_PLUGIN (name, intf):
  return (name, intf.__name__, 
     corecvar.iSCF_SCF.GetInterfaceID(intf.__name__),intf.scfGetVersion())
def CS_REQUEST_PLUGIN_TAG (name, intf, tag):
  return (name+":"+tag, intf.__name__, 
     corecvar.iSCF_SCF.GetInterfaceID(intf.__name__),intf.scfGetVersion())
def CS_REQUEST_VFS ():
  return CS_REQUEST_PLUGIN("crystalspace.kernel.vfs", iVFS)
def CS_REQUEST_LEVELSAVER ():
  return CS_REQUEST_PLUGIN("crystalspace.level.saver", iSaver)
def CS_REQUEST_REPORTER ():
  return CS_REQUEST_PLUGIN("crystalspace.utilities.reporter", iReporter)

class CSMutableArrayHelper:
  def __init__(self, getFunc, lenFunc):
    self.getFunc = getFunc
    self.lenFunc = lenFunc

  def __len__(self):
    return self.lenFunc()

  def __getitem__(self, key):
    if type(key) != type(0):
      raise TypeError()
    arrlen = self.lenFunc()
    if key < 0 or key >= arrlen:
      raise IndexError('Length is ' + str(arrlen) + ', you asked for ' +
        str(key))
    return self.getFunc(key)
  def content_iterator(self):
    for idx in xrange(len(self)):
      yield self.__getitem__(idx)
  def __iter__(self): return self.content_iterator() 
  # We do not implement __setitem__ because the only legal action is to
  #  overwrite the object at the given location.  (The contents of the
  #  array are mutable, but the array is a single allocation of a single
  #  type.)  Callers should be using the contained objects' own
  #  __setitem__ or mutation methods.

  # We do not implement __delitem__ because we cannot delete items.

csReport = csReporterHelper.Report
_csmodules = []
def AddSCFLink(csmodule):
    """Add a callback to set SCF pointer from a module"""
    _csmodules.append(csmodule)
    csmodule(corecvar.iSCF_SCF)
def SyncSCFPointers():
    """Sync the SCF pointers for all registered modules"""
    for csmodule in _csmodules:
        csmodule(corecvar.iSCF_SCF)
def SetSCFPointer(scf_pointer):
    """Set SCF Pointer to all CrystalSpace modules"""
    SetCoreSCFPointer(scf_pointer)
    SyncSCFPointers()
def GetSCFPointer():
    """Get SCF Pointer"""
    return corecvar.iSCF_SCF



