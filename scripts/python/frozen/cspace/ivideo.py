# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ivideo', [dirname(__file__)])
        except ImportError:
            import _ivideo
            return _ivideo
        if fp is not None:
            try:
                _mod = imp.load_module('_ivideo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ivideo = swig_import_helper()
    del swig_import_helper
else:
    import _ivideo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
import csgfx

def _SetSCFPointer(*args):
  return _ivideo._SetSCFPointer(*args)
_SetSCFPointer = _ivideo._SetSCFPointer

def _GetSCFPointer():
  return _ivideo._GetSCFPointer()
_GetSCFPointer = _ivideo._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

CS_WRITE_BASELINE = _ivideo.CS_WRITE_BASELINE
CS_WRITE_NOANTIALIAS = _ivideo.CS_WRITE_NOANTIALIAS
class csPixelCoord(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_ivideo.csPixelCoord_x_get, _ivideo.csPixelCoord_x_set)
    y = _swig_property(_ivideo.csPixelCoord_y_get, _ivideo.csPixelCoord_y_set)
    def __init__(self): 
        this = _ivideo.new_csPixelCoord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csPixelCoord
    __del__ = lambda self : None;
csPixelCoord_swigregister = _ivideo.csPixelCoord_swigregister
csPixelCoord_swigregister(csPixelCoord)

class iGraphics2D(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Open(self): return _ivideo.iGraphics2D_Open(self)
    def Close(self): return _ivideo.iGraphics2D_Close(self)
    def GetWidth(self): return _ivideo.iGraphics2D_GetWidth(self)
    def GetHeight(self): return _ivideo.iGraphics2D_GetHeight(self)
    def GetColorDepth(self): return _ivideo.iGraphics2D_GetColorDepth(self)
    def FindRGB(self, *args): return _ivideo.iGraphics2D_FindRGB(self, *args)
    def GetRGB(self, *args): return _ivideo.iGraphics2D_GetRGB(self, *args)
    def GetRGBA(self, *args): return _ivideo.iGraphics2D_GetRGBA(self, *args)
    def SetClipRect(self, *args): return _ivideo.iGraphics2D_SetClipRect(self, *args)
    def GetClipRect(self, *args): return _ivideo.iGraphics2D_GetClipRect(self, *args)
    def BeginDraw(self): return _ivideo.iGraphics2D_BeginDraw(self)
    def FinishDraw(self): return _ivideo.iGraphics2D_FinishDraw(self)
    def Print(self, *args): return _ivideo.iGraphics2D_Print(self, *args)
    def Clear(self, *args): return _ivideo.iGraphics2D_Clear(self, *args)
    def ClearAll(self, *args): return _ivideo.iGraphics2D_ClearAll(self, *args)
    def DrawLine(self, *args): return _ivideo.iGraphics2D_DrawLine(self, *args)
    def DrawBox(self, *args): return _ivideo.iGraphics2D_DrawBox(self, *args)
    def ClipLine(self, *args): return _ivideo.iGraphics2D_ClipLine(self, *args)
    def DrawPixel(self, *args): return _ivideo.iGraphics2D_DrawPixel(self, *args)
    def DrawPixels(self, *args): return _ivideo.iGraphics2D_DrawPixels(self, *args)
    def Blit(self, *args): return _ivideo.iGraphics2D_Blit(self, *args)
    def GetPixel(self, *args): return _ivideo.iGraphics2D_GetPixel(self, *args)
    def AllowResize(self, *args): return _ivideo.iGraphics2D_AllowResize(self, *args)
    def Resize(self, *args): return _ivideo.iGraphics2D_Resize(self, *args)
    def GetFontServer(self): return _ivideo.iGraphics2D_GetFontServer(self)
    def PerformExtension(self, *args): return _ivideo.iGraphics2D_PerformExtension(self, *args)
    def ScreenShot(self): return _ivideo.iGraphics2D_ScreenShot(self)
    def GetNativeWindow(self): return _ivideo.iGraphics2D_GetNativeWindow(self)
    def GetFullScreen(self): return _ivideo.iGraphics2D_GetFullScreen(self)
    def SetFullScreen(self, *args): return _ivideo.iGraphics2D_SetFullScreen(self, *args)
    def SetMousePosition(self, *args): return _ivideo.iGraphics2D_SetMousePosition(self, *args)
    def SetMouseCursor(self, *args): return _ivideo.iGraphics2D_SetMouseCursor(self, *args)
    def SetGamma(self, *args): return _ivideo.iGraphics2D_SetGamma(self, *args)
    def GetGamma(self): return _ivideo.iGraphics2D_GetGamma(self)
    def GetName(self): return _ivideo.iGraphics2D_GetName(self)
    def Write(self, *args): return _ivideo.iGraphics2D_Write(self, *args)
    def SetViewport(self, *args): return _ivideo.iGraphics2D_SetViewport(self, *args)
    def GetViewport(self): return _ivideo.iGraphics2D_GetViewport(self)
    def GetFramebufferDimensions(self): return _ivideo.iGraphics2D_GetFramebufferDimensions(self)
    def GetHWRenderer(self): return _ivideo.iGraphics2D_GetHWRenderer(self)
    def GetHWGLVersion(self): return _ivideo.iGraphics2D_GetHWGLVersion(self)
    def GetHWVendor(self): return _ivideo.iGraphics2D_GetHWVendor(self)
    def DrawLineProjected(self, *args): return _ivideo.iGraphics2D_DrawLineProjected(self, *args)
    scfGetVersion = staticmethod(_ivideo.iGraphics2D_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iGraphics2D
    __del__ = lambda self : None;
    def _PerformExtension(self, *args): return _ivideo.iGraphics2D__PerformExtension(self, *args)
    def PerformExtension (self, command, *args):
      self._PerformExtension(self.__class__.__name__, command, args);

iGraphics2D_swigregister = _ivideo.iGraphics2D_swigregister
iGraphics2D_swigregister(iGraphics2D)

def iGraphics2D_scfGetVersion():
  return _ivideo.iGraphics2D_scfGetVersion()
iGraphics2D_scfGetVersion = _ivideo.iGraphics2D_scfGetVersion

CSDRAW_2DGRAPHICS = _ivideo.CSDRAW_2DGRAPHICS
CSDRAW_3DGRAPHICS = _ivideo.CSDRAW_3DGRAPHICS
CSDRAW_CLEARZBUFFER = _ivideo.CSDRAW_CLEARZBUFFER
CSDRAW_CLEARSCREEN = _ivideo.CSDRAW_CLEARSCREEN
CSDRAW_NOCLIPCLEAR = _ivideo.CSDRAW_NOCLIPCLEAR
CSDRAW_READBACK = _ivideo.CSDRAW_READBACK
CS_CLIPPER_NONE = _ivideo.CS_CLIPPER_NONE
CS_CLIPPER_OPTIONAL = _ivideo.CS_CLIPPER_OPTIONAL
CS_CLIPPER_TOPLEVEL = _ivideo.CS_CLIPPER_TOPLEVEL
CS_CLIPPER_REQUIRED = _ivideo.CS_CLIPPER_REQUIRED
CS_CLIP_NOT = _ivideo.CS_CLIP_NOT
CS_CLIP_NEEDED = _ivideo.CS_CLIP_NEEDED
CS_ZBUF_NONE = _ivideo.CS_ZBUF_NONE
CS_ZBUF_FILL = _ivideo.CS_ZBUF_FILL
CS_ZBUF_TEST = _ivideo.CS_ZBUF_TEST
CS_ZBUF_USE = _ivideo.CS_ZBUF_USE
CS_ZBUF_EQUAL = _ivideo.CS_ZBUF_EQUAL
CS_ZBUF_INVERT = _ivideo.CS_ZBUF_INVERT
CS_ZBUF_MESH = _ivideo.CS_ZBUF_MESH
CS_ZBUF_MESH2 = _ivideo.CS_ZBUF_MESH2
CS_VATTRIB_SPECIFIC_FIRST = _ivideo.CS_VATTRIB_SPECIFIC_FIRST
CS_VATTRIB_SPECIFIC_LAST = _ivideo.CS_VATTRIB_SPECIFIC_LAST
CS_VATTRIB_SPECIFIC_NUM = _ivideo.CS_VATTRIB_SPECIFIC_NUM
CS_VATTRIB_GENERIC_FIRST = _ivideo.CS_VATTRIB_GENERIC_FIRST
CS_VATTRIB_GENERIC_LAST = _ivideo.CS_VATTRIB_GENERIC_LAST
CS_VATTRIB_GENERIC_NUM = _ivideo.CS_VATTRIB_GENERIC_NUM
CS_IATTRIB_FIRST = _ivideo.CS_IATTRIB_FIRST
CS_IATTRIB_LAST = _ivideo.CS_IATTRIB_LAST
CS_IATTRIB_NUM = _ivideo.CS_IATTRIB_NUM
CS_VATTRIB_UNUSED = _ivideo.CS_VATTRIB_UNUSED
CS_VATTRIB_INVALID = _ivideo.CS_VATTRIB_INVALID
CS_VATTRIB_POSITION = _ivideo.CS_VATTRIB_POSITION
CS_VATTRIB_WEIGHT = _ivideo.CS_VATTRIB_WEIGHT
CS_VATTRIB_NORMAL = _ivideo.CS_VATTRIB_NORMAL
CS_VATTRIB_COLOR = _ivideo.CS_VATTRIB_COLOR
CS_VATTRIB_PRIMARY_COLOR = _ivideo.CS_VATTRIB_PRIMARY_COLOR
CS_VATTRIB_SECONDARY_COLOR = _ivideo.CS_VATTRIB_SECONDARY_COLOR
CS_VATTRIB_FOGCOORD = _ivideo.CS_VATTRIB_FOGCOORD
CS_VATTRIB_TEXCOORD = _ivideo.CS_VATTRIB_TEXCOORD
CS_VATTRIB_TEXCOORD0 = _ivideo.CS_VATTRIB_TEXCOORD0
CS_VATTRIB_TEXCOORD1 = _ivideo.CS_VATTRIB_TEXCOORD1
CS_VATTRIB_TEXCOORD2 = _ivideo.CS_VATTRIB_TEXCOORD2
CS_VATTRIB_TEXCOORD3 = _ivideo.CS_VATTRIB_TEXCOORD3
CS_VATTRIB_TEXCOORD4 = _ivideo.CS_VATTRIB_TEXCOORD4
CS_VATTRIB_TEXCOORD5 = _ivideo.CS_VATTRIB_TEXCOORD5
CS_VATTRIB_TEXCOORD6 = _ivideo.CS_VATTRIB_TEXCOORD6
CS_VATTRIB_TEXCOORD7 = _ivideo.CS_VATTRIB_TEXCOORD7
CS_VATTRIB_0 = _ivideo.CS_VATTRIB_0
CS_VATTRIB_1 = _ivideo.CS_VATTRIB_1
CS_VATTRIB_2 = _ivideo.CS_VATTRIB_2
CS_VATTRIB_3 = _ivideo.CS_VATTRIB_3
CS_VATTRIB_4 = _ivideo.CS_VATTRIB_4
CS_VATTRIB_5 = _ivideo.CS_VATTRIB_5
CS_VATTRIB_6 = _ivideo.CS_VATTRIB_6
CS_VATTRIB_7 = _ivideo.CS_VATTRIB_7
CS_VATTRIB_8 = _ivideo.CS_VATTRIB_8
CS_VATTRIB_9 = _ivideo.CS_VATTRIB_9
CS_VATTRIB_10 = _ivideo.CS_VATTRIB_10
CS_VATTRIB_11 = _ivideo.CS_VATTRIB_11
CS_VATTRIB_12 = _ivideo.CS_VATTRIB_12
CS_VATTRIB_13 = _ivideo.CS_VATTRIB_13
CS_VATTRIB_14 = _ivideo.CS_VATTRIB_14
CS_VATTRIB_15 = _ivideo.CS_VATTRIB_15
CS_IATTRIB_OBJECT2WORLD = _ivideo.CS_IATTRIB_OBJECT2WORLD
CS_MIXMODE_TYPE_AUTO = _ivideo.CS_MIXMODE_TYPE_AUTO
CS_MIXMODE_TYPE_BLENDOP = _ivideo.CS_MIXMODE_TYPE_BLENDOP
CS_MIXMODE_FLAG_BLENDOP_ALPHA = _ivideo.CS_MIXMODE_FLAG_BLENDOP_ALPHA
CS_MIXMODE_TYPE_MESH = _ivideo.CS_MIXMODE_TYPE_MESH
CS_MIXMODE_TYPE_MASK = _ivideo.CS_MIXMODE_TYPE_MASK
CS_MIXMODE_FACT_ZERO = _ivideo.CS_MIXMODE_FACT_ZERO
CS_MIXMODE_FACT_ONE = _ivideo.CS_MIXMODE_FACT_ONE
CS_MIXMODE_FACT_SRCCOLOR = _ivideo.CS_MIXMODE_FACT_SRCCOLOR
CS_MIXMODE_FACT_SRCCOLOR_INV = _ivideo.CS_MIXMODE_FACT_SRCCOLOR_INV
CS_MIXMODE_FACT_DSTCOLOR = _ivideo.CS_MIXMODE_FACT_DSTCOLOR
CS_MIXMODE_FACT_DSTCOLOR_INV = _ivideo.CS_MIXMODE_FACT_DSTCOLOR_INV
CS_MIXMODE_FACT_SRCALPHA = _ivideo.CS_MIXMODE_FACT_SRCALPHA
CS_MIXMODE_FACT_SRCALPHA_INV = _ivideo.CS_MIXMODE_FACT_SRCALPHA_INV
CS_MIXMODE_FACT_DSTALPHA = _ivideo.CS_MIXMODE_FACT_DSTALPHA
CS_MIXMODE_FACT_DSTALPHA_INV = _ivideo.CS_MIXMODE_FACT_DSTALPHA_INV
CS_MIXMODE_FACT_COUNT = _ivideo.CS_MIXMODE_FACT_COUNT
CS_MIXMODE_FACT_MASK = _ivideo.CS_MIXMODE_FACT_MASK
CS_MIXMODE_ALPHATEST_AUTO = _ivideo.CS_MIXMODE_ALPHATEST_AUTO
CS_MIXMODE_ALPHATEST_ENABLE = _ivideo.CS_MIXMODE_ALPHATEST_ENABLE
CS_MIXMODE_ALPHATEST_DISABLE = _ivideo.CS_MIXMODE_ALPHATEST_DISABLE
CS_MIXMODE_ALPHATEST_MASK = _ivideo.CS_MIXMODE_ALPHATEST_MASK
CS_FX_COPY = _ivideo.CS_FX_COPY
CS_FX_MESH = _ivideo.CS_FX_MESH
CS_FX_FLAT = _ivideo.CS_FX_FLAT
CS_FX_MASK_ALPHA = _ivideo.CS_FX_MASK_ALPHA
CS_FX_MASK_MIXMODE = _ivideo.CS_FX_MASK_MIXMODE
class csAlphaMode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    alphaNone = _ivideo.csAlphaMode_alphaNone
    alphaBinary = _ivideo.csAlphaMode_alphaBinary
    alphaSmooth = _ivideo.csAlphaMode_alphaSmooth
    autoAlphaMode = _swig_property(_ivideo.csAlphaMode_autoAlphaMode_get, _ivideo.csAlphaMode_autoAlphaMode_set)
    def __init__(self): 
        this = _ivideo.new_csAlphaMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csAlphaMode
    __del__ = lambda self : None;
csAlphaMode_swigregister = _ivideo.csAlphaMode_swigregister
csAlphaMode_swigregister(csAlphaMode)

CS_SHADOW_VOLUME_BEGIN = _ivideo.CS_SHADOW_VOLUME_BEGIN
CS_SHADOW_VOLUME_PASS1 = _ivideo.CS_SHADOW_VOLUME_PASS1
CS_SHADOW_VOLUME_PASS2 = _ivideo.CS_SHADOW_VOLUME_PASS2
CS_SHADOW_VOLUME_FAIL1 = _ivideo.CS_SHADOW_VOLUME_FAIL1
CS_SHADOW_VOLUME_FAIL2 = _ivideo.CS_SHADOW_VOLUME_FAIL2
CS_SHADOW_VOLUME_USE = _ivideo.CS_SHADOW_VOLUME_USE
CS_SHADOW_VOLUME_FINISH = _ivideo.CS_SHADOW_VOLUME_FINISH
G3DRENDERSTATE_EDGES = _ivideo.G3DRENDERSTATE_EDGES
class csGraphics3DCaps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    minTexHeight = _swig_property(_ivideo.csGraphics3DCaps_minTexHeight_get, _ivideo.csGraphics3DCaps_minTexHeight_set)
    minTexWidth = _swig_property(_ivideo.csGraphics3DCaps_minTexWidth_get, _ivideo.csGraphics3DCaps_minTexWidth_set)
    maxTexHeight = _swig_property(_ivideo.csGraphics3DCaps_maxTexHeight_get, _ivideo.csGraphics3DCaps_maxTexHeight_set)
    maxTexWidth = _swig_property(_ivideo.csGraphics3DCaps_maxTexWidth_get, _ivideo.csGraphics3DCaps_maxTexWidth_set)
    SupportsPointSprites = _swig_property(_ivideo.csGraphics3DCaps_SupportsPointSprites_get, _ivideo.csGraphics3DCaps_SupportsPointSprites_set)
    DestinationAlpha = _swig_property(_ivideo.csGraphics3DCaps_DestinationAlpha_get, _ivideo.csGraphics3DCaps_DestinationAlpha_set)
    StencilShadows = _swig_property(_ivideo.csGraphics3DCaps_StencilShadows_get, _ivideo.csGraphics3DCaps_StencilShadows_set)
    MaxRTColorAttachments = _swig_property(_ivideo.csGraphics3DCaps_MaxRTColorAttachments_get, _ivideo.csGraphics3DCaps_MaxRTColorAttachments_set)
    def __init__(self): 
        this = _ivideo.new_csGraphics3DCaps()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csGraphics3DCaps
    __del__ = lambda self : None;
csGraphics3DCaps_swigregister = _ivideo.csGraphics3DCaps_swigregister
csGraphics3DCaps_swigregister(csGraphics3DCaps)

CS_MESHTYPE_TRIANGLES = _ivideo.CS_MESHTYPE_TRIANGLES
CS_MESHTYPE_QUADS = _ivideo.CS_MESHTYPE_QUADS
CS_MESHTYPE_TRIANGLESTRIP = _ivideo.CS_MESHTYPE_TRIANGLESTRIP
CS_MESHTYPE_TRIANGLEFAN = _ivideo.CS_MESHTYPE_TRIANGLEFAN
CS_MESHTYPE_POINTS = _ivideo.CS_MESHTYPE_POINTS
CS_MESHTYPE_POINT_SPRITES = _ivideo.CS_MESHTYPE_POINT_SPRITES
CS_MESHTYPE_LINES = _ivideo.CS_MESHTYPE_LINES
CS_MESHTYPE_LINESTRIP = _ivideo.CS_MESHTYPE_LINESTRIP
csSimpleMeshScreenspace = _ivideo.csSimpleMeshScreenspace
CS_OPENPORTAL_ZFILL = _ivideo.CS_OPENPORTAL_ZFILL
CS_OPENPORTAL_MIRROR = _ivideo.CS_OPENPORTAL_MIRROR
CS_OPENPORTAL_FLOAT = _ivideo.CS_OPENPORTAL_FLOAT
class csSimpleRenderMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    meshtype = _swig_property(_ivideo.csSimpleRenderMesh_meshtype_get, _ivideo.csSimpleRenderMesh_meshtype_set)
    indexCount = _swig_property(_ivideo.csSimpleRenderMesh_indexCount_get, _ivideo.csSimpleRenderMesh_indexCount_set)
    indices = _swig_property(_ivideo.csSimpleRenderMesh_indices_get, _ivideo.csSimpleRenderMesh_indices_set)
    indexStart = _swig_property(_ivideo.csSimpleRenderMesh_indexStart_get, _ivideo.csSimpleRenderMesh_indexStart_set)
    indexEnd = _swig_property(_ivideo.csSimpleRenderMesh_indexEnd_get, _ivideo.csSimpleRenderMesh_indexEnd_set)
    vertexCount = _swig_property(_ivideo.csSimpleRenderMesh_vertexCount_get, _ivideo.csSimpleRenderMesh_vertexCount_set)
    vertices = _swig_property(_ivideo.csSimpleRenderMesh_vertices_get, _ivideo.csSimpleRenderMesh_vertices_set)
    texcoords = _swig_property(_ivideo.csSimpleRenderMesh_texcoords_get, _ivideo.csSimpleRenderMesh_texcoords_set)
    colors = _swig_property(_ivideo.csSimpleRenderMesh_colors_get, _ivideo.csSimpleRenderMesh_colors_set)
    texture = _swig_property(_ivideo.csSimpleRenderMesh_texture_get, _ivideo.csSimpleRenderMesh_texture_set)
    shader = _swig_property(_ivideo.csSimpleRenderMesh_shader_get, _ivideo.csSimpleRenderMesh_shader_set)
    dynDomain = _swig_property(_ivideo.csSimpleRenderMesh_dynDomain_get, _ivideo.csSimpleRenderMesh_dynDomain_set)
    alphaType = _swig_property(_ivideo.csSimpleRenderMesh_alphaType_get, _ivideo.csSimpleRenderMesh_alphaType_set)
    z_buf_mode = _swig_property(_ivideo.csSimpleRenderMesh_z_buf_mode_get, _ivideo.csSimpleRenderMesh_z_buf_mode_set)
    mixmode = _swig_property(_ivideo.csSimpleRenderMesh_mixmode_get, _ivideo.csSimpleRenderMesh_mixmode_set)
    object2world = _swig_property(_ivideo.csSimpleRenderMesh_object2world_get, _ivideo.csSimpleRenderMesh_object2world_set)
    renderBuffers = _swig_property(_ivideo.csSimpleRenderMesh_renderBuffers_get, _ivideo.csSimpleRenderMesh_renderBuffers_set)
    def __init__(self): 
        this = _ivideo.new_csSimpleRenderMesh()
        try: self.this.append(this)
        except: self.this = this
    def SetWithGenmeshFactory(self, *args): return _ivideo.csSimpleRenderMesh_SetWithGenmeshFactory(self, *args)
    __swig_destroy__ = _ivideo.delete_csSimpleRenderMesh
    __del__ = lambda self : None;
csSimpleRenderMesh_swigregister = _ivideo.csSimpleRenderMesh_swigregister
csSimpleRenderMesh_swigregister(csSimpleRenderMesh)

rtaDepth = _ivideo.rtaDepth
rtaColor0 = _ivideo.rtaColor0
rtaColor1 = _ivideo.rtaColor1
rtaColor2 = _ivideo.rtaColor2
rtaColor3 = _ivideo.rtaColor3
rtaColor4 = _ivideo.rtaColor4
rtaColor5 = _ivideo.rtaColor5
rtaColor6 = _ivideo.rtaColor6
rtaColor7 = _ivideo.rtaColor7
rtaColor8 = _ivideo.rtaColor8
rtaColor9 = _ivideo.rtaColor9
rtaColor10 = _ivideo.rtaColor10
rtaColor11 = _ivideo.rtaColor11
rtaColor12 = _ivideo.rtaColor12
rtaColor13 = _ivideo.rtaColor13
rtaColor14 = _ivideo.rtaColor14
rtaColor15 = _ivideo.rtaColor15
rtaNumAttachments = _ivideo.rtaNumAttachments
rtaNumColorAttachments = _ivideo.rtaNumColorAttachments
class TextureComparisonMode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    compareNone = _ivideo.TextureComparisonMode_compareNone
    compareR = _ivideo.TextureComparisonMode_compareR
    mode = _swig_property(_ivideo.TextureComparisonMode_mode_get, _ivideo.TextureComparisonMode_mode_set)
    funcLEqual = _ivideo.TextureComparisonMode_funcLEqual
    funcGEqual = _ivideo.TextureComparisonMode_funcGEqual
    function = _swig_property(_ivideo.TextureComparisonMode_function_get, _ivideo.TextureComparisonMode_function_set)
    def __init__(self): 
        this = _ivideo.new_TextureComparisonMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_TextureComparisonMode
    __del__ = lambda self : None;
TextureComparisonMode_swigregister = _ivideo.TextureComparisonMode_swigregister
TextureComparisonMode_swigregister(TextureComparisonMode)

class iGraphics3D(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Open(self): return _ivideo.iGraphics3D_Open(self)
    def Close(self): return _ivideo.iGraphics3D_Close(self)
    def GetDriver2D(self): return _ivideo.iGraphics3D_GetDriver2D(self)
    def GetTextureManager(self): return _ivideo.iGraphics3D_GetTextureManager(self)
    def SetDimensions(self, *args): return _ivideo.iGraphics3D_SetDimensions(self, *args)
    def GetWidth(self): return _ivideo.iGraphics3D_GetWidth(self)
    def GetHeight(self): return _ivideo.iGraphics3D_GetHeight(self)
    def GetCaps(self): return _ivideo.iGraphics3D_GetCaps(self)
    def SetPerspectiveCenter(self, *args): return _ivideo.iGraphics3D_SetPerspectiveCenter(self, *args)
    def GetPerspectiveCenter(self): return _ivideo.iGraphics3D_GetPerspectiveCenter(self)
    def SetPerspectiveAspect(self, *args): return _ivideo.iGraphics3D_SetPerspectiveAspect(self, *args)
    def GetPerspectiveAspect(self): return _ivideo.iGraphics3D_GetPerspectiveAspect(self)
    def SetRenderTarget(self, *args): return _ivideo.iGraphics3D_SetRenderTarget(self, *args)
    def ValidateRenderTargets(self): return _ivideo.iGraphics3D_ValidateRenderTargets(self)
    def CanSetRenderTarget(self, *args): return _ivideo.iGraphics3D_CanSetRenderTarget(self, *args)
    def GetRenderTarget(self, *args): return _ivideo.iGraphics3D_GetRenderTarget(self, *args)
    def UnsetRenderTargets(self): return _ivideo.iGraphics3D_UnsetRenderTargets(self)
    def BeginDraw(self, *args): return _ivideo.iGraphics3D_BeginDraw(self, *args)
    def FinishDraw(self): return _ivideo.iGraphics3D_FinishDraw(self)
    def Print(self, *args): return _ivideo.iGraphics3D_Print(self, *args)
    def DrawMesh(self, *args): return _ivideo.iGraphics3D_DrawMesh(self, *args)
    def DrawSimpleMesh(self, *args): return _ivideo.iGraphics3D_DrawSimpleMesh(self, *args)
    def DrawPixmap(self, *args): return _ivideo.iGraphics3D_DrawPixmap(self, *args)
    def DrawLine(self, *args): return _ivideo.iGraphics3D_DrawLine(self, *args)
    def ActivateBuffers(self, *args): return _ivideo.iGraphics3D_ActivateBuffers(self, *args)
    def DeactivateBuffers(self, *args): return _ivideo.iGraphics3D_DeactivateBuffers(self, *args)
    def SetTextureState(self, *args): return _ivideo.iGraphics3D_SetTextureState(self, *args)
    def SetClipper(self, *args): return _ivideo.iGraphics3D_SetClipper(self, *args)
    def GetClipper(self): return _ivideo.iGraphics3D_GetClipper(self)
    def GetClipType(self): return _ivideo.iGraphics3D_GetClipType(self)
    def SetNearPlane(self, *args): return _ivideo.iGraphics3D_SetNearPlane(self, *args)
    def ResetNearPlane(self): return _ivideo.iGraphics3D_ResetNearPlane(self)
    def GetNearPlane(self): return _ivideo.iGraphics3D_GetNearPlane(self)
    def HasNearPlane(self): return _ivideo.iGraphics3D_HasNearPlane(self)
    def SetRenderState(self, *args): return _ivideo.iGraphics3D_SetRenderState(self, *args)
    def GetRenderState(self, *args): return _ivideo.iGraphics3D_GetRenderState(self, *args)
    def SetOption(self, *args): return _ivideo.iGraphics3D_SetOption(self, *args)
    def SetWriteMask(self, *args): return _ivideo.iGraphics3D_SetWriteMask(self, *args)
    def GetWriteMask(self, *args): return _ivideo.iGraphics3D_GetWriteMask(self, *args)
    def SetZMode(self, *args): return _ivideo.iGraphics3D_SetZMode(self, *args)
    def GetZMode(self): return _ivideo.iGraphics3D_GetZMode(self)
    def EnableZOffset(self): return _ivideo.iGraphics3D_EnableZOffset(self)
    def DisableZOffset(self): return _ivideo.iGraphics3D_DisableZOffset(self)
    def SetShadowState(self, *args): return _ivideo.iGraphics3D_SetShadowState(self, *args)
    def GetZBuffValue(self, *args): return _ivideo.iGraphics3D_GetZBuffValue(self, *args)
    def OpenPortal(self, *args): return _ivideo.iGraphics3D_OpenPortal(self, *args)
    def ClosePortal(self): return _ivideo.iGraphics3D_ClosePortal(self)
    def CreateHalo(self, *args): return _ivideo.iGraphics3D_CreateHalo(self, *args)
    def SetWorldToCamera(self, *args): return _ivideo.iGraphics3D_SetWorldToCamera(self, *args)
    def PerformExtension(self, *args): return _ivideo.iGraphics3D_PerformExtension(self, *args)
    def GetWorldToCamera(self): return _ivideo.iGraphics3D_GetWorldToCamera(self)
    def GetCurrentDrawFlags(self): return _ivideo.iGraphics3D_GetCurrentDrawFlags(self)
    def GetProjectionMatrix(self): return _ivideo.iGraphics3D_GetProjectionMatrix(self)
    def SetProjectionMatrix(self, *args): return _ivideo.iGraphics3D_SetProjectionMatrix(self, *args)
    def SetTextureComparisonModes(self, *args): return _ivideo.iGraphics3D_SetTextureComparisonModes(self, *args)
    def CopyFromRenderTargets(self, *args): return _ivideo.iGraphics3D_CopyFromRenderTargets(self, *args)
    def DrawSimpleMeshes(self, *args): return _ivideo.iGraphics3D_DrawSimpleMeshes(self, *args)
    def OQInitQueries(self, *args): return _ivideo.iGraphics3D_OQInitQueries(self, *args)
    def OQDelQueries(self, *args): return _ivideo.iGraphics3D_OQDelQueries(self, *args)
    def OQueryFinished(self, *args): return _ivideo.iGraphics3D_OQueryFinished(self, *args)
    def OQIsVisible(self, *args): return _ivideo.iGraphics3D_OQIsVisible(self, *args)
    def OQBeginQuery(self, *args): return _ivideo.iGraphics3D_OQBeginQuery(self, *args)
    def OQEndQuery(self): return _ivideo.iGraphics3D_OQEndQuery(self)
    def DrawMeshBasic(self, *args): return _ivideo.iGraphics3D_DrawMeshBasic(self, *args)
    def SetEdgeDrawing(self, *args): return _ivideo.iGraphics3D_SetEdgeDrawing(self, *args)
    def GetEdgeDrawing(self): return _ivideo.iGraphics3D_GetEdgeDrawing(self)
    def SetTessellation(self, *args): return _ivideo.iGraphics3D_SetTessellation(self, *args)
    def GetTessellation(self): return _ivideo.iGraphics3D_GetTessellation(self)
    scfGetVersion = staticmethod(_ivideo.iGraphics3D_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iGraphics3D
    __del__ = lambda self : None;
iGraphics3D_swigregister = _ivideo.iGraphics3D_swigregister
iGraphics3D_swigregister(iGraphics3D)

def iGraphics3D_scfGetVersion():
  return _ivideo.iGraphics3D_scfGetVersion()
iGraphics3D_scfGetVersion = _ivideo.iGraphics3D_scfGetVersion

csmcNone = _ivideo.csmcNone
csmcArrow = _ivideo.csmcArrow
csmcLens = _ivideo.csmcLens
csmcCross = _ivideo.csmcCross
csmcPen = _ivideo.csmcPen
csmcMove = _ivideo.csmcMove
csmcSizeNWSE = _ivideo.csmcSizeNWSE
csmcSizeNESW = _ivideo.csmcSizeNESW
csmcSizeNS = _ivideo.csmcSizeNS
csmcSizeEW = _ivideo.csmcSizeEW
csmcStop = _ivideo.csmcStop
csmcWait = _ivideo.csmcWait
CS_ALERT_ERROR = _ivideo.CS_ALERT_ERROR
CS_ALERT_WARNING = _ivideo.CS_ALERT_WARNING
CS_ALERT_NOTE = _ivideo.CS_ALERT_NOTE
class iNativeWindowManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Alert(self, *args): return _ivideo.iNativeWindowManager_Alert(self, *args)
    __swig_destroy__ = _ivideo.delete_iNativeWindowManager
    __del__ = lambda self : None;
iNativeWindowManager_swigregister = _ivideo.iNativeWindowManager_swigregister
iNativeWindowManager_swigregister(iNativeWindowManager)

class iNativeWindow(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetTitle(self, *args): return _ivideo.iNativeWindow_SetTitle(self, *args)
    def SetIcon(self, *args): return _ivideo.iNativeWindow_SetIcon(self, *args)
    def IsWindowTransparencyAvailable(self): return _ivideo.iNativeWindow_IsWindowTransparencyAvailable(self)
    def SetWindowTransparent(self, *args): return _ivideo.iNativeWindow_SetWindowTransparent(self, *args)
    def GetWindowTransparent(self): return _ivideo.iNativeWindow_GetWindowTransparent(self)
    decoCaption = _ivideo.iNativeWindow_decoCaption
    decoClientFrame = _ivideo.iNativeWindow_decoClientFrame
    def SetWindowDecoration(self, *args): return _ivideo.iNativeWindow_SetWindowDecoration(self, *args)
    def GetWindowDecoration(self, *args): return _ivideo.iNativeWindow_GetWindowDecoration(self, *args)
    def FitSizeToWorkingArea(self, *args): return _ivideo.iNativeWindow_FitSizeToWorkingArea(self, *args)
    __swig_destroy__ = _ivideo.delete_iNativeWindow
    __del__ = lambda self : None;
iNativeWindow_swigregister = _ivideo.iNativeWindow_swigregister
iNativeWindow_swigregister(iNativeWindow)

class RenderPriority(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_RenderPriority(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self): return _ivideo.RenderPriority_IsValid(self)
    __swig_destroy__ = _ivideo.delete_RenderPriority
    __del__ = lambda self : None;
RenderPriority_swigregister = _ivideo.RenderPriority_swigregister
RenderPriority_swigregister(RenderPriority)

cullNormal = _ivideo.cullNormal
cullFlipped = _ivideo.cullFlipped
cullDisabled = _ivideo.cullDisabled

def GetFlippedCullMode(*args):
  return _ivideo.GetFlippedCullMode(*args)
GetFlippedCullMode = _ivideo.GetFlippedCullMode
atfGreaterEqual = _ivideo.atfGreaterEqual
atfGreater = _ivideo.atfGreater
atfLowerEqual = _ivideo.atfLowerEqual
atfLower = _ivideo.atfLower
class AlphaTestOptions(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    threshold = _swig_property(_ivideo.AlphaTestOptions_threshold_get, _ivideo.AlphaTestOptions_threshold_set)
    func = _swig_property(_ivideo.AlphaTestOptions_func_get, _ivideo.AlphaTestOptions_func_set)
    def __init__(self): 
        this = _ivideo.new_AlphaTestOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_AlphaTestOptions
    __del__ = lambda self : None;
AlphaTestOptions_swigregister = _ivideo.AlphaTestOptions_swigregister
AlphaTestOptions_swigregister(AlphaTestOptions)

class RenderMeshModes(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_RenderMeshModes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMeshModes
    __del__ = lambda self : None;
    z_buf_mode = _swig_property(_ivideo.RenderMeshModes_z_buf_mode_get, _ivideo.RenderMeshModes_z_buf_mode_set)
    mixmode = _swig_property(_ivideo.RenderMeshModes_mixmode_get, _ivideo.RenderMeshModes_mixmode_set)
    alphaToCoverage = _swig_property(_ivideo.RenderMeshModes_alphaToCoverage_get, _ivideo.RenderMeshModes_alphaToCoverage_set)
    atcMixmode = _swig_property(_ivideo.RenderMeshModes_atcMixmode_get, _ivideo.RenderMeshModes_atcMixmode_set)
    renderPrio = _swig_property(_ivideo.RenderMeshModes_renderPrio_get, _ivideo.RenderMeshModes_renderPrio_set)
    cullMode = _swig_property(_ivideo.RenderMeshModes_cullMode_get, _ivideo.RenderMeshModes_cullMode_set)
    alphaType = _swig_property(_ivideo.RenderMeshModes_alphaType_get, _ivideo.RenderMeshModes_alphaType_set)
    alphaTest = _swig_property(_ivideo.RenderMeshModes_alphaTest_get, _ivideo.RenderMeshModes_alphaTest_set)
    zoffset = _swig_property(_ivideo.RenderMeshModes_zoffset_get, _ivideo.RenderMeshModes_zoffset_set)
    buffers = _swig_property(_ivideo.RenderMeshModes_buffers_get, _ivideo.RenderMeshModes_buffers_set)
    doInstancing = _swig_property(_ivideo.RenderMeshModes_doInstancing_get, _ivideo.RenderMeshModes_doInstancing_set)
    instParamNum = _swig_property(_ivideo.RenderMeshModes_instParamNum_get, _ivideo.RenderMeshModes_instParamNum_set)
    instParamsTargets = _swig_property(_ivideo.RenderMeshModes_instParamsTargets_get, _ivideo.RenderMeshModes_instParamsTargets_set)
    instanceNum = _swig_property(_ivideo.RenderMeshModes_instanceNum_get, _ivideo.RenderMeshModes_instanceNum_set)
    instParams = _swig_property(_ivideo.RenderMeshModes_instParams_get, _ivideo.RenderMeshModes_instParams_set)
    instParamBuffers = _swig_property(_ivideo.RenderMeshModes_instParamBuffers_get, _ivideo.RenderMeshModes_instParamBuffers_set)
RenderMeshModes_swigregister = _ivideo.RenderMeshModes_swigregister
RenderMeshModes_swigregister(RenderMeshModes)

class RenderMeshIndexRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start = _swig_property(_ivideo.RenderMeshIndexRange_start_get, _ivideo.RenderMeshIndexRange_start_set)
    end = _swig_property(_ivideo.RenderMeshIndexRange_end_get, _ivideo.RenderMeshIndexRange_end_set)
    def __init__(self): 
        this = _ivideo.new_RenderMeshIndexRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMeshIndexRange
    __del__ = lambda self : None;
RenderMeshIndexRange_swigregister = _ivideo.RenderMeshIndexRange_swigregister
RenderMeshIndexRange_swigregister(RenderMeshIndexRange)

class CoreRenderMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    db_mesh_name = _swig_property(_ivideo.CoreRenderMesh_db_mesh_name_get)
    def __init__(self): 
        this = _ivideo.new_CoreRenderMesh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_CoreRenderMesh
    __del__ = lambda self : None;
    clip_portal = _swig_property(_ivideo.CoreRenderMesh_clip_portal_get, _ivideo.CoreRenderMesh_clip_portal_set)
    clip_plane = _swig_property(_ivideo.CoreRenderMesh_clip_plane_get, _ivideo.CoreRenderMesh_clip_plane_set)
    clip_z_plane = _swig_property(_ivideo.CoreRenderMesh_clip_z_plane_get, _ivideo.CoreRenderMesh_clip_z_plane_set)
    do_mirror = _swig_property(_ivideo.CoreRenderMesh_do_mirror_get, _ivideo.CoreRenderMesh_do_mirror_set)
    meshtype = _swig_property(_ivideo.CoreRenderMesh_meshtype_get, _ivideo.CoreRenderMesh_meshtype_set)
    multiRanges = _swig_property(_ivideo.CoreRenderMesh_multiRanges_get, _ivideo.CoreRenderMesh_multiRanges_set)
    rangesNum = _swig_property(_ivideo.CoreRenderMesh_rangesNum_get, _ivideo.CoreRenderMesh_rangesNum_set)
    indexstart = _swig_property(_ivideo.CoreRenderMesh_indexstart_get, _ivideo.CoreRenderMesh_indexstart_set)
    indexend = _swig_property(_ivideo.CoreRenderMesh_indexend_get, _ivideo.CoreRenderMesh_indexend_set)
    material = _swig_property(_ivideo.CoreRenderMesh_material_get, _ivideo.CoreRenderMesh_material_set)
    object2world = _swig_property(_ivideo.CoreRenderMesh_object2world_get, _ivideo.CoreRenderMesh_object2world_set)
    bbox = _swig_property(_ivideo.CoreRenderMesh_bbox_get, _ivideo.CoreRenderMesh_bbox_set)
CoreRenderMesh_swigregister = _ivideo.CoreRenderMesh_swigregister
CoreRenderMesh_swigregister(CoreRenderMesh)

class RenderMesh(CoreRenderMesh,RenderMeshModes):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ivideo.new_RenderMesh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMesh
    __del__ = lambda self : None;
    geometryInstance = _swig_property(_ivideo.RenderMesh_geometryInstance_get, _ivideo.RenderMesh_geometryInstance_set)
    portal = _swig_property(_ivideo.RenderMesh_portal_get, _ivideo.RenderMesh_portal_set)
    variablecontext = _swig_property(_ivideo.RenderMesh_variablecontext_get, _ivideo.RenderMesh_variablecontext_set)
    worldspace_origin = _swig_property(_ivideo.RenderMesh_worldspace_origin_get, _ivideo.RenderMesh_worldspace_origin_set)
RenderMesh_swigregister = _ivideo.RenderMesh_swigregister
RenderMesh_swigregister(RenderMesh)

CSFONT_LARGE = _ivideo.CSFONT_LARGE
CSFONT_ITALIC = _ivideo.CSFONT_ITALIC
CSFONT_COURIER = _ivideo.CSFONT_COURIER
CSFONT_SMALL = _ivideo.CSFONT_SMALL
CS_FONT_DEFAULT_GLYPH = _ivideo.CS_FONT_DEFAULT_GLYPH
class iFontDeleteNotify(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def BeforeDelete(self, *args): return _ivideo.iFontDeleteNotify_BeforeDelete(self, *args)
    __swig_destroy__ = _ivideo.delete_iFontDeleteNotify
    __del__ = lambda self : None;
iFontDeleteNotify_swigregister = _ivideo.iFontDeleteNotify_swigregister
iFontDeleteNotify_swigregister(iFontDeleteNotify)

class csBitmapMetrics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    width = _swig_property(_ivideo.csBitmapMetrics_width_get, _ivideo.csBitmapMetrics_width_set)
    height = _swig_property(_ivideo.csBitmapMetrics_height_get, _ivideo.csBitmapMetrics_height_set)
    left = _swig_property(_ivideo.csBitmapMetrics_left_get, _ivideo.csBitmapMetrics_left_set)
    top = _swig_property(_ivideo.csBitmapMetrics_top_get, _ivideo.csBitmapMetrics_top_set)
    def __init__(self): 
        this = _ivideo.new_csBitmapMetrics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csBitmapMetrics
    __del__ = lambda self : None;
csBitmapMetrics_swigregister = _ivideo.csBitmapMetrics_swigregister
csBitmapMetrics_swigregister(csBitmapMetrics)

class csGlyphMetrics(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    advance = _swig_property(_ivideo.csGlyphMetrics_advance_get, _ivideo.csGlyphMetrics_advance_set)
    def __init__(self): 
        this = _ivideo.new_csGlyphMetrics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csGlyphMetrics
    __del__ = lambda self : None;
csGlyphMetrics_swigregister = _ivideo.csGlyphMetrics_swigregister
csGlyphMetrics_swigregister(csGlyphMetrics)

class iFont(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddDeleteCallback(self, *args): return _ivideo.iFont_AddDeleteCallback(self, *args)
    def RemoveDeleteCallback(self, *args): return _ivideo.iFont_RemoveDeleteCallback(self, *args)
    def GetSize(self): return _ivideo.iFont_GetSize(self)
    def GetMaxSize(self): return _ivideo.iFont_GetMaxSize(self)
    def GetGlyphMetrics(self, *args): return _ivideo.iFont_GetGlyphMetrics(self, *args)
    def GetGlyphBitmap(self, *args): return _ivideo.iFont_GetGlyphBitmap(self, *args)
    def GetGlyphAlphaBitmap(self, *args): return _ivideo.iFont_GetGlyphAlphaBitmap(self, *args)
    def GetDimensions(self, *args): return _ivideo.iFont_GetDimensions(self, *args)
    def GetLength(self, *args): return _ivideo.iFont_GetLength(self, *args)
    def GetDescent(self): return _ivideo.iFont_GetDescent(self)
    def GetAscent(self): return _ivideo.iFont_GetAscent(self)
    def HasGlyph(self, *args): return _ivideo.iFont_HasGlyph(self, *args)
    def GetTextHeight(self): return _ivideo.iFont_GetTextHeight(self)
    def GetUnderlinePosition(self): return _ivideo.iFont_GetUnderlinePosition(self)
    def GetUnderlineThickness(self): return _ivideo.iFont_GetUnderlineThickness(self)
    scfGetVersion = staticmethod(_ivideo.iFont_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iFont
    __del__ = lambda self : None;
iFont_swigregister = _ivideo.iFont_swigregister
iFont_swigregister(iFont)

def iFont_scfGetVersion():
  return _ivideo.iFont_scfGetVersion()
iFont_scfGetVersion = _ivideo.iFont_scfGetVersion

class iFontServer(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def LoadFont(self, *args): return _ivideo.iFontServer_LoadFont(self, *args)
    def SetWarnOnError(self, *args): return _ivideo.iFontServer_SetWarnOnError(self, *args)
    def GetWarnOnError(self): return _ivideo.iFontServer_GetWarnOnError(self)
    scfGetVersion = staticmethod(_ivideo.iFontServer_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iFontServer
    __del__ = lambda self : None;
iFontServer_swigregister = _ivideo.iFontServer_swigregister
iFontServer_swigregister(iFontServer)

def iFontServer_scfGetVersion():
  return _ivideo.iFontServer_scfGetVersion()
iFontServer_scfGetVersion = _ivideo.iFontServer_scfGetVersion

class iHalo(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetWidth(self): return _ivideo.iHalo_GetWidth(self)
    def GetHeight(self): return _ivideo.iHalo_GetHeight(self)
    def SetColor(self, *args): return _ivideo.iHalo_SetColor(self, *args)
    def GetColor(self): return _ivideo.iHalo_GetColor(self)
    def Draw(self, *args): return _ivideo.iHalo_Draw(self, *args)
    scfGetVersion = staticmethod(_ivideo.iHalo_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iHalo
    __del__ = lambda self : None;
iHalo_swigregister = _ivideo.iHalo_swigregister
iHalo_swigregister(iHalo)

def iHalo_scfGetVersion():
  return _ivideo.iHalo_scfGetVersion()
iHalo_scfGetVersion = _ivideo.iHalo_scfGetVersion

class csShaderVariableStack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_csShaderVariableStack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csShaderVariableStack
    __del__ = lambda self : None;
    def assign(self, *args): return _ivideo.csShaderVariableStack_assign(self, *args)
    def Setup(self, *args): return _ivideo.csShaderVariableStack_Setup(self, *args)
    def MakeOwnArray(self): return _ivideo.csShaderVariableStack_MakeOwnArray(self)
    def GetSize(self): return _ivideo.csShaderVariableStack_GetSize(self)
    def Clear(self): return _ivideo.csShaderVariableStack_Clear(self)
    def MergeFront(self, *args): return _ivideo.csShaderVariableStack_MergeFront(self, *args)
    def MergeBack(self, *args): return _ivideo.csShaderVariableStack_MergeBack(self, *args)
    def Copy(self, *args): return _ivideo.csShaderVariableStack_Copy(self, *args)
csShaderVariableStack_swigregister = _ivideo.csShaderVariableStack_swigregister
csShaderVariableStack_swigregister(csShaderVariableStack)


def csGetShaderVariableFromStack(*args):
  return _ivideo.csGetShaderVariableFromStack(*args)
csGetShaderVariableFromStack = _ivideo.csGetShaderVariableFromStack
class iShaderVariableContext(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddVariable(self, *args): return _ivideo.iShaderVariableContext_AddVariable(self, *args)
    def GetVariable(self, *args): return _ivideo.iShaderVariableContext_GetVariable(self, *args)
    def GetVariableAdd(self, *args): return _ivideo.iShaderVariableContext_GetVariableAdd(self, *args)
    def GetShaderVariables(self): return _ivideo.iShaderVariableContext_GetShaderVariables(self)
    def PushVariables(self, *args): return _ivideo.iShaderVariableContext_PushVariables(self, *args)
    def IsEmpty(self): return _ivideo.iShaderVariableContext_IsEmpty(self)
    def ReplaceVariable(self, *args): return _ivideo.iShaderVariableContext_ReplaceVariable(self, *args)
    def Clear(self): return _ivideo.iShaderVariableContext_Clear(self)
    def RemoveVariable(self, *args): return _ivideo.iShaderVariableContext_RemoveVariable(self, *args)
    scfGetVersion = staticmethod(_ivideo.iShaderVariableContext_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShaderVariableContext
    __del__ = lambda self : None;
iShaderVariableContext_swigregister = _ivideo.iShaderVariableContext_swigregister
iShaderVariableContext_swigregister(iShaderVariableContext)

def iShaderVariableContext_scfGetVersion():
  return _ivideo.iShaderVariableContext_scfGetVersion()
iShaderVariableContext_scfGetVersion = _ivideo.iShaderVariableContext_scfGetVersion

TagNeutral = _ivideo.TagNeutral
TagForbidden = _ivideo.TagForbidden
TagRequired = _ivideo.TagRequired
class iShaderManager(iShaderVariableContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def RegisterShader(self, *args): return _ivideo.iShaderManager_RegisterShader(self, *args)
    def UnregisterShader(self, *args): return _ivideo.iShaderManager_UnregisterShader(self, *args)
    def UnregisterShaders(self): return _ivideo.iShaderManager_UnregisterShaders(self)
    def GetShader(self, *args): return _ivideo.iShaderManager_GetShader(self, *args)
    def GetShaders(self): return _ivideo.iShaderManager_GetShaders(self)
    def RegisterCompiler(self, *args): return _ivideo.iShaderManager_RegisterCompiler(self, *args)
    def GetCompiler(self, *args): return _ivideo.iShaderManager_GetCompiler(self, *args)
    def RegisterShaderVariableAccessor(self, *args): return _ivideo.iShaderManager_RegisterShaderVariableAccessor(self, *args)
    def UnregisterShaderVariableAccessor(self, *args): return _ivideo.iShaderManager_UnregisterShaderVariableAccessor(self, *args)
    def GetShaderVariableAccessor(self, *args): return _ivideo.iShaderManager_GetShaderVariableAccessor(self, *args)
    def UnregisterShaderVariableAcessors(self): return _ivideo.iShaderManager_UnregisterShaderVariableAcessors(self)
    def GetShaderVariableStack(self): return _ivideo.iShaderManager_GetShaderVariableStack(self)
    def SetTagOptions(self, *args): return _ivideo.iShaderManager_SetTagOptions(self, *args)
    def GetTagOptions(self, *args): return _ivideo.iShaderManager_GetTagOptions(self, *args)
    def GetTags(self, *args): return _ivideo.iShaderManager_GetTags(self, *args)
    def GetSVNameStringset(self): return _ivideo.iShaderManager_GetSVNameStringset(self)
    def GetShaderCache(self): return _ivideo.iShaderManager_GetShaderCache(self)
    cachePriorityLowest = _ivideo.iShaderManager_cachePriorityLowest
    cachePriorityGlobal = _ivideo.iShaderManager_cachePriorityGlobal
    cachePriorityApp = _ivideo.iShaderManager_cachePriorityApp
    cachePriorityUser = _ivideo.iShaderManager_cachePriorityUser
    cachePriorityHighest = _ivideo.iShaderManager_cachePriorityHighest
    def AddSubShaderCache(self, *args): return _ivideo.iShaderManager_AddSubShaderCache(self, *args)
    def AddSubCacheDirectory(self, *args): return _ivideo.iShaderManager_AddSubCacheDirectory(self, *args)
    def RemoveSubShaderCache(self, *args): return _ivideo.iShaderManager_RemoveSubShaderCache(self, *args)
    def RemoveAllSubShaderCaches(self): return _ivideo.iShaderManager_RemoveAllSubShaderCaches(self)
    scfGetVersion = staticmethod(_ivideo.iShaderManager_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShaderManager
    __del__ = lambda self : None;
iShaderManager_swigregister = _ivideo.iShaderManager_swigregister
iShaderManager_swigregister(iShaderManager)

def iShaderManager_scfGetVersion():
  return _ivideo.iShaderManager_scfGetVersion()
iShaderManager_scfGetVersion = _ivideo.iShaderManager_scfGetVersion

class csShaderMetadata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    description = _swig_property(_ivideo.csShaderMetadata_description_get, _ivideo.csShaderMetadata_description_set)
    numberOfLights = _swig_property(_ivideo.csShaderMetadata_numberOfLights_get, _ivideo.csShaderMetadata_numberOfLights_set)
    def __init__(self): 
        this = _ivideo.new_csShaderMetadata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csShaderMetadata
    __del__ = lambda self : None;
csShaderMetadata_swigregister = _ivideo.csShaderMetadata_swigregister
csShaderMetadata_swigregister(csShaderMetadata)

class iShaderPriorityList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCount(self): return _ivideo.iShaderPriorityList_GetCount(self)
    def GetPriority(self, *args): return _ivideo.iShaderPriorityList_GetPriority(self, *args)
    __swig_destroy__ = _ivideo.delete_iShaderPriorityList
    __del__ = lambda self : None;
iShaderPriorityList_swigregister = _ivideo.iShaderPriorityList_swigregister
iShaderPriorityList_swigregister(iShaderPriorityList)

class iShader(iShaderVariableContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _ivideo.iShader_QueryObject(self)
    def GetFileName(self): return _ivideo.iShader_GetFileName(self)
    def SetFileName(self, *args): return _ivideo.iShader_SetFileName(self, *args)
    def GetTicket(self, *args): return _ivideo.iShader_GetTicket(self, *args)
    def GetNumberOfPasses(self, *args): return _ivideo.iShader_GetNumberOfPasses(self, *args)
    def ActivatePass(self, *args): return _ivideo.iShader_ActivatePass(self, *args)
    def SetupPass(self, *args): return _ivideo.iShader_SetupPass(self, *args)
    def TeardownPass(self, *args): return _ivideo.iShader_TeardownPass(self, *args)
    def DeactivatePass(self, *args): return _ivideo.iShader_DeactivatePass(self, *args)
    svuTextures = _ivideo.iShader_svuTextures
    svuBuffers = _ivideo.iShader_svuBuffers
    svuVProc = _ivideo.iShader_svuVProc
    svuVP = _ivideo.iShader_svuVP
    svuFP = _ivideo.iShader_svuFP
    svuAll = _ivideo.iShader_svuAll
    def GetUsedShaderVars(self, *args): return _ivideo.iShader_GetUsedShaderVars(self, *args)
    def GetMetadata(self): return _ivideo.iShader_GetMetadata(self)
    def PushShaderVariables(self, *args): return _ivideo.iShader_PushShaderVariables(self, *args)
    def GetPrioritiesTicket(self, *args): return _ivideo.iShader_GetPrioritiesTicket(self, *args)
    def GetAvailablePriorities(self, *args): return _ivideo.iShader_GetAvailablePriorities(self, *args)
    def GetTechniqueMetadata(self, *args): return _ivideo.iShader_GetTechniqueMetadata(self, *args)
    def ForceTechnique(self, *args): return _ivideo.iShader_ForceTechnique(self, *args)
    scfGetVersion = staticmethod(_ivideo.iShader_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShader
    __del__ = lambda self : None;
iShader_swigregister = _ivideo.iShader_swigregister
iShader_swigregister(iShader)

def iShader_scfGetVersion():
  return _ivideo.iShader_scfGetVersion()
iShader_scfGetVersion = _ivideo.iShader_scfGetVersion

class iShaderCompiler(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _ivideo.iShaderCompiler_GetName(self)
    def CompileShader(self, *args): return _ivideo.iShaderCompiler_CompileShader(self, *args)
    def ValidateTemplate(self, *args): return _ivideo.iShaderCompiler_ValidateTemplate(self, *args)
    def IsTemplateToCompiler(self, *args): return _ivideo.iShaderCompiler_IsTemplateToCompiler(self, *args)
    def GetPriorities(self, *args): return _ivideo.iShaderCompiler_GetPriorities(self, *args)
    def PrecacheShader(self, *args): return _ivideo.iShaderCompiler_PrecacheShader(self, *args)
    __swig_destroy__ = _ivideo.delete_iShaderCompiler
    __del__ = lambda self : None;
iShaderCompiler_swigregister = _ivideo.iShaderCompiler_swigregister
iShaderCompiler_swigregister(iShaderCompiler)

class csRefShaderStringIDHash(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_csRefShaderStringIDHash(*args)
        try: self.this.append(this)
        except: self.this = this
    def Put(self, *args): return _ivideo.csRefShaderStringIDHash_Put(self, *args)
    def GetAll(self, *args): return _ivideo.csRefShaderStringIDHash_GetAll(self, *args)
    def PutUnique(self, *args): return _ivideo.csRefShaderStringIDHash_PutUnique(self, *args)
    def Contains(self, *args): return _ivideo.csRefShaderStringIDHash_Contains(self, *args)
    def In(self, *args): return _ivideo.csRefShaderStringIDHash_In(self, *args)
    def GetElementPointer(self, *args): return _ivideo.csRefShaderStringIDHash_GetElementPointer(self, *args)
    def Get(self, *args): return _ivideo.csRefShaderStringIDHash_Get(self, *args)
    def GetOrCreate(self, *args): return _ivideo.csRefShaderStringIDHash_GetOrCreate(self, *args)
    def Empty(self): return _ivideo.csRefShaderStringIDHash_Empty(self)
    def DeleteAll(self, *args): return _ivideo.csRefShaderStringIDHash_DeleteAll(self, *args)
    def Delete(self, *args): return _ivideo.csRefShaderStringIDHash_Delete(self, *args)
    def GetSize(self): return _ivideo.csRefShaderStringIDHash_GetSize(self)
    def IsEmpty(self): return _ivideo.csRefShaderStringIDHash_IsEmpty(self)
    def __getitem__(self, *args): return _ivideo.csRefShaderStringIDHash___getitem__(self, *args)
    def __delitem__(self, *args): return _ivideo.csRefShaderStringIDHash___delitem__(self, *args)
    def clear(self): return _ivideo.csRefShaderStringIDHash_clear(self)
    def __nonzero__(self): return _ivideo.csRefShaderStringIDHash___nonzero__(self)
    def __setitem__(self, *args): return _ivideo.csRefShaderStringIDHash___setitem__(self, *args)
    def __len__(self): return _ivideo.csRefShaderStringIDHash___len__(self)
    __swig_destroy__ = _ivideo.delete_csRefShaderStringIDHash
    __del__ = lambda self : None;
csRefShaderStringIDHash_swigregister = _ivideo.csRefShaderStringIDHash_swigregister
csRefShaderStringIDHash_swigregister(csRefShaderStringIDHash)

class iShaderArray(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ivideo.delete_iShaderArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _ivideo.new_iShaderArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _ivideo.iShaderArray_GetSize(self)
    def Get(self, *args): return _ivideo.iShaderArray_Get(self, *args)
    def Put(self, *args): return _ivideo.iShaderArray_Put(self, *args)
    def Push(self, *args): return _ivideo.iShaderArray_Push(self, *args)
    def Merge(self, *args): return _ivideo.iShaderArray_Merge(self, *args)
    def MergeSmart(self, *args): return _ivideo.iShaderArray_MergeSmart(self, *args)
    def Pop(self): return _ivideo.iShaderArray_Pop(self)
    def Top(self, *args): return _ivideo.iShaderArray_Top(self, *args)
    def Insert(self, *args): return _ivideo.iShaderArray_Insert(self, *args)
    def Contains(self, *args): return _ivideo.iShaderArray_Contains(self, *args)
    def DeleteAll(self): return _ivideo.iShaderArray_DeleteAll(self)
    def Truncate(self, *args): return _ivideo.iShaderArray_Truncate(self, *args)
    def Empty(self): return _ivideo.iShaderArray_Empty(self)
    def IsEmpty(self): return _ivideo.iShaderArray_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _ivideo.iShaderArray_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _ivideo.iShaderArray_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _ivideo.iShaderArray_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _ivideo.iShaderArray_DeleteRange(self, *args)
    def __eq__(self, *args): return _ivideo.iShaderArray___eq__(self, *args)
    def __ne__(self, *args): return _ivideo.iShaderArray___ne__(self, *args)
    def GetAllocator(self): return _ivideo.iShaderArray_GetAllocator(self)
iShaderArray_swigregister = _ivideo.iShaderArray_swigregister
iShaderArray_swigregister(iShaderArray)

class iTextureHandle(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFlags(self): return _ivideo.iTextureHandle_GetFlags(self)
    def SetKeyColor(self, *args): return _ivideo.iTextureHandle_SetKeyColor(self, *args)
    def GetKeyColorStatus(self): return _ivideo.iTextureHandle_GetKeyColorStatus(self)
    def GetKeyColor(self): return _ivideo.iTextureHandle_GetKeyColor(self)
    CS_TEXTURE_CUBE_POS_X = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_X
    CS_TEXTURE_CUBE_NEG_X = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_X
    CS_TEXTURE_CUBE_POS_Y = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_Y
    CS_TEXTURE_CUBE_NEG_Y = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_Y
    CS_TEXTURE_CUBE_POS_Z = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_Z
    CS_TEXTURE_CUBE_NEG_Z = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_Z
    def GetRendererDimensions(self, *args): return _ivideo.iTextureHandle_GetRendererDimensions(self, *args)
    def GetOriginalDimensions(self, *args): return _ivideo.iTextureHandle_GetOriginalDimensions(self, *args)
    RGBA8888 = _ivideo.iTextureHandle_RGBA8888
    BGRA8888 = _ivideo.iTextureHandle_BGRA8888
    def Blit(self, *args): return _ivideo.iTextureHandle_Blit(self, *args)
    def GetImageName(self): return _ivideo.iTextureHandle_GetImageName(self)
    def GetAlphaType(self): return _ivideo.iTextureHandle_GetAlphaType(self)
    def Precache(self): return _ivideo.iTextureHandle_Precache(self)
    def IsPrecached(self): return _ivideo.iTextureHandle_IsPrecached(self)
    def SetTextureClass(self, *args): return _ivideo.iTextureHandle_SetTextureClass(self, *args)
    def GetTextureClass(self): return _ivideo.iTextureHandle_GetTextureClass(self)
    def SetAlphaType(self, *args): return _ivideo.iTextureHandle_SetAlphaType(self, *args)
    texType1D = _ivideo.iTextureHandle_texType1D
    texType2D = _ivideo.iTextureHandle_texType2D
    texType3D = _ivideo.iTextureHandle_texType3D
    texTypeCube = _ivideo.iTextureHandle_texTypeCube
    texTypeRect = _ivideo.iTextureHandle_texTypeRect
    def GetTextureType(self): return _ivideo.iTextureHandle_GetTextureType(self)
    blitbufReadable = _ivideo.iTextureHandle_blitbufReadable
    blitbufRetainArea = _ivideo.iTextureHandle_blitbufRetainArea
    def QueryBlitBuffer(self, *args): return _ivideo.iTextureHandle_QueryBlitBuffer(self, *args)
    def ApplyBlitBuffer(self, *args): return _ivideo.iTextureHandle_ApplyBlitBuffer(self, *args)
    natureIndirect = _ivideo.iTextureHandle_natureIndirect
    natureDirect = _ivideo.iTextureHandle_natureDirect
    def GetBufferNature(self, *args): return _ivideo.iTextureHandle_GetBufferNature(self, *args)
    def SetMipmapLimits(self, *args): return _ivideo.iTextureHandle_SetMipmapLimits(self, *args)
    def GetMipmapLimits(self, *args): return _ivideo.iTextureHandle_GetMipmapLimits(self, *args)
    def Readback(self, *args): return _ivideo.iTextureHandle_Readback(self, *args)
    scfGetVersion = staticmethod(_ivideo.iTextureHandle_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iTextureHandle
    __del__ = lambda self : None;
iTextureHandle_swigregister = _ivideo.iTextureHandle_swigregister
iTextureHandle_swigregister(iTextureHandle)

def iTextureHandle_scfGetVersion():
  return _ivideo.iTextureHandle_scfGetVersion()
iTextureHandle_scfGetVersion = _ivideo.iTextureHandle_scfGetVersion

CS_TEXTURE_2D = _ivideo.CS_TEXTURE_2D
CS_TEXTURE_3D = _ivideo.CS_TEXTURE_3D
CS_TEXTURE_NOMIPMAPS = _ivideo.CS_TEXTURE_NOMIPMAPS
CS_TEXTURE_CLAMP = _ivideo.CS_TEXTURE_CLAMP
CS_TEXTURE_NOFILTER = _ivideo.CS_TEXTURE_NOFILTER
CS_TEXTURE_NPOTS = _ivideo.CS_TEXTURE_NPOTS
CS_TEXTURE_SCALE_UP = _ivideo.CS_TEXTURE_SCALE_UP
CS_TEXTURE_SCALE_DOWN = _ivideo.CS_TEXTURE_SCALE_DOWN
CS_TEXTURE_CREATE_CLEAR = _ivideo.CS_TEXTURE_CREATE_CLEAR
CS_TEXTURE_CUBEMAP_DISABLE_SEAMLESS = _ivideo.CS_TEXTURE_CUBEMAP_DISABLE_SEAMLESS
class iTextureManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def RegisterTexture(self, *args): return _ivideo.iTextureManager_RegisterTexture(self, *args)
    def GetTextureFormat(self): return _ivideo.iTextureManager_GetTextureFormat(self)
    def GetMaxTextureSize(self, *args): return _ivideo.iTextureManager_GetMaxTextureSize(self, *args)
    def CreateTexture(self, *args): return _ivideo.iTextureManager_CreateTexture(self, *args)
    scfGetVersion = staticmethod(_ivideo.iTextureManager_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iTextureManager
    __del__ = lambda self : None;
iTextureManager_swigregister = _ivideo.iTextureManager_swigregister
iTextureManager_swigregister(iTextureManager)

def iTextureManager_scfGetVersion():
  return _ivideo.iTextureManager_scfGetVersion()
iTextureManager_scfGetVersion = _ivideo.iTextureManager_scfGetVersion

CS_MATERIAL_TEXTURE_DIFFUSE = _ivideo.CS_MATERIAL_TEXTURE_DIFFUSE
class iMaterial(iShaderVariableContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetShader(self, *args): return _ivideo.iMaterial_SetShader(self, *args)
    def GetShader(self, *args): return _ivideo.iMaterial_GetShader(self, *args)
    def GetShaders(self): return _ivideo.iMaterial_GetShaders(self)
    def GetTexture(self, *args): return _ivideo.iMaterial_GetTexture(self, *args)
    def GetFirstShader(self, *args): return _ivideo.iMaterial_GetFirstShader(self, *args)
    scfGetVersion = staticmethod(_ivideo.iMaterial_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iMaterial
    __del__ = lambda self : None;
iMaterial_swigregister = _ivideo.iMaterial_swigregister
iMaterial_swigregister(iMaterial)

def iMaterial_scfGetVersion():
  return _ivideo.iMaterial_scfGetVersion()
iMaterial_scfGetVersion = _ivideo.iMaterial_scfGetVersion


def CS_FX_SETALPHA(*args):
  return _ivideo.CS_FX_SETALPHA(*args)
CS_FX_SETALPHA = _ivideo.CS_FX_SETALPHA

def CS_FX_SETALPHA_INT(*args):
  return _ivideo.CS_FX_SETALPHA_INT(*args)
CS_FX_SETALPHA_INT = _ivideo.CS_FX_SETALPHA_INT
CS_REQUEST_PLUGIN = core.CS_REQUEST_PLUGIN
def CS_REQUEST_NULL3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.null", iGraphics3D)

def CS_REQUEST_SOFTWARE3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.software", iGraphics3D)

def CS_REQUEST_OPENGL3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.opengl", iGraphics3D)

def CS_REQUEST_FONTSERVER ():
  return CS_REQUEST_PLUGIN("crystalspace.font.server.default", iFontServer)




