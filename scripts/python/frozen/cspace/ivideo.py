# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _ivideo
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import core
import csgfx
_SetSCFPointer = _ivideo._SetSCFPointer
_GetSCFPointer = _ivideo._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

CS_WRITE_BASELINE = _ivideo.CS_WRITE_BASELINE
CS_WRITE_NOANTIALIAS = _ivideo.CS_WRITE_NOANTIALIAS
class csPixelCoord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csPixelCoord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csPixelCoord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _ivideo.csPixelCoord_x_set
    __swig_getmethods__["x"] = _ivideo.csPixelCoord_x_get
    if _newclass:x = _swig_property(_ivideo.csPixelCoord_x_get, _ivideo.csPixelCoord_x_set)
    __swig_setmethods__["y"] = _ivideo.csPixelCoord_y_set
    __swig_getmethods__["y"] = _ivideo.csPixelCoord_y_get
    if _newclass:y = _swig_property(_ivideo.csPixelCoord_y_get, _ivideo.csPixelCoord_y_set)
    def __init__(self, *args): 
        this = _ivideo.new_csPixelCoord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csPixelCoord
    __del__ = lambda self : None;
csPixelCoord_swigregister = _ivideo.csPixelCoord_swigregister
csPixelCoord_swigregister(csPixelCoord)

class csPixelFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csPixelFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csPixelFormat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RedMask"] = _ivideo.csPixelFormat_RedMask_set
    __swig_getmethods__["RedMask"] = _ivideo.csPixelFormat_RedMask_get
    if _newclass:RedMask = _swig_property(_ivideo.csPixelFormat_RedMask_get, _ivideo.csPixelFormat_RedMask_set)
    __swig_setmethods__["GreenMask"] = _ivideo.csPixelFormat_GreenMask_set
    __swig_getmethods__["GreenMask"] = _ivideo.csPixelFormat_GreenMask_get
    if _newclass:GreenMask = _swig_property(_ivideo.csPixelFormat_GreenMask_get, _ivideo.csPixelFormat_GreenMask_set)
    __swig_setmethods__["BlueMask"] = _ivideo.csPixelFormat_BlueMask_set
    __swig_getmethods__["BlueMask"] = _ivideo.csPixelFormat_BlueMask_get
    if _newclass:BlueMask = _swig_property(_ivideo.csPixelFormat_BlueMask_get, _ivideo.csPixelFormat_BlueMask_set)
    __swig_setmethods__["AlphaMask"] = _ivideo.csPixelFormat_AlphaMask_set
    __swig_getmethods__["AlphaMask"] = _ivideo.csPixelFormat_AlphaMask_get
    if _newclass:AlphaMask = _swig_property(_ivideo.csPixelFormat_AlphaMask_get, _ivideo.csPixelFormat_AlphaMask_set)
    __swig_setmethods__["RedShift"] = _ivideo.csPixelFormat_RedShift_set
    __swig_getmethods__["RedShift"] = _ivideo.csPixelFormat_RedShift_get
    if _newclass:RedShift = _swig_property(_ivideo.csPixelFormat_RedShift_get, _ivideo.csPixelFormat_RedShift_set)
    __swig_setmethods__["GreenShift"] = _ivideo.csPixelFormat_GreenShift_set
    __swig_getmethods__["GreenShift"] = _ivideo.csPixelFormat_GreenShift_get
    if _newclass:GreenShift = _swig_property(_ivideo.csPixelFormat_GreenShift_get, _ivideo.csPixelFormat_GreenShift_set)
    __swig_setmethods__["BlueShift"] = _ivideo.csPixelFormat_BlueShift_set
    __swig_getmethods__["BlueShift"] = _ivideo.csPixelFormat_BlueShift_get
    if _newclass:BlueShift = _swig_property(_ivideo.csPixelFormat_BlueShift_get, _ivideo.csPixelFormat_BlueShift_set)
    __swig_setmethods__["AlphaShift"] = _ivideo.csPixelFormat_AlphaShift_set
    __swig_getmethods__["AlphaShift"] = _ivideo.csPixelFormat_AlphaShift_get
    if _newclass:AlphaShift = _swig_property(_ivideo.csPixelFormat_AlphaShift_get, _ivideo.csPixelFormat_AlphaShift_set)
    __swig_setmethods__["RedBits"] = _ivideo.csPixelFormat_RedBits_set
    __swig_getmethods__["RedBits"] = _ivideo.csPixelFormat_RedBits_get
    if _newclass:RedBits = _swig_property(_ivideo.csPixelFormat_RedBits_get, _ivideo.csPixelFormat_RedBits_set)
    __swig_setmethods__["GreenBits"] = _ivideo.csPixelFormat_GreenBits_set
    __swig_getmethods__["GreenBits"] = _ivideo.csPixelFormat_GreenBits_get
    if _newclass:GreenBits = _swig_property(_ivideo.csPixelFormat_GreenBits_get, _ivideo.csPixelFormat_GreenBits_set)
    __swig_setmethods__["BlueBits"] = _ivideo.csPixelFormat_BlueBits_set
    __swig_getmethods__["BlueBits"] = _ivideo.csPixelFormat_BlueBits_get
    if _newclass:BlueBits = _swig_property(_ivideo.csPixelFormat_BlueBits_get, _ivideo.csPixelFormat_BlueBits_set)
    __swig_setmethods__["AlphaBits"] = _ivideo.csPixelFormat_AlphaBits_set
    __swig_getmethods__["AlphaBits"] = _ivideo.csPixelFormat_AlphaBits_get
    if _newclass:AlphaBits = _swig_property(_ivideo.csPixelFormat_AlphaBits_get, _ivideo.csPixelFormat_AlphaBits_set)
    __swig_setmethods__["PalEntries"] = _ivideo.csPixelFormat_PalEntries_set
    __swig_getmethods__["PalEntries"] = _ivideo.csPixelFormat_PalEntries_get
    if _newclass:PalEntries = _swig_property(_ivideo.csPixelFormat_PalEntries_get, _ivideo.csPixelFormat_PalEntries_set)
    __swig_setmethods__["PixelBytes"] = _ivideo.csPixelFormat_PixelBytes_set
    __swig_getmethods__["PixelBytes"] = _ivideo.csPixelFormat_PixelBytes_get
    if _newclass:PixelBytes = _swig_property(_ivideo.csPixelFormat_PixelBytes_get, _ivideo.csPixelFormat_PixelBytes_set)
    def complete(*args): return _ivideo.csPixelFormat_complete(*args)
    def __init__(self, *args): 
        this = _ivideo.new_csPixelFormat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csPixelFormat
    __del__ = lambda self : None;
csPixelFormat_swigregister = _ivideo.csPixelFormat_swigregister
csPixelFormat_swigregister(csPixelFormat)

class csImageArea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csImageArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csImageArea, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _ivideo.csImageArea_x_set
    __swig_getmethods__["x"] = _ivideo.csImageArea_x_get
    if _newclass:x = _swig_property(_ivideo.csImageArea_x_get, _ivideo.csImageArea_x_set)
    __swig_setmethods__["y"] = _ivideo.csImageArea_y_set
    __swig_getmethods__["y"] = _ivideo.csImageArea_y_get
    if _newclass:y = _swig_property(_ivideo.csImageArea_y_get, _ivideo.csImageArea_y_set)
    __swig_setmethods__["w"] = _ivideo.csImageArea_w_set
    __swig_getmethods__["w"] = _ivideo.csImageArea_w_get
    if _newclass:w = _swig_property(_ivideo.csImageArea_w_get, _ivideo.csImageArea_w_set)
    __swig_setmethods__["h"] = _ivideo.csImageArea_h_set
    __swig_getmethods__["h"] = _ivideo.csImageArea_h_get
    if _newclass:h = _swig_property(_ivideo.csImageArea_h_get, _ivideo.csImageArea_h_set)
    __swig_setmethods__["data"] = _ivideo.csImageArea_data_set
    __swig_getmethods__["data"] = _ivideo.csImageArea_data_get
    if _newclass:data = _swig_property(_ivideo.csImageArea_data_get, _ivideo.csImageArea_data_set)
    def __init__(self, *args): 
        this = _ivideo.new_csImageArea(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csImageArea
    __del__ = lambda self : None;
csImageArea_swigregister = _ivideo.csImageArea_swigregister
csImageArea_swigregister(csImageArea)

class iOffscreenCanvasCallback(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iOffscreenCanvasCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iOffscreenCanvasCallback, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def FinishDraw(*args): return _ivideo.iOffscreenCanvasCallback_FinishDraw(*args)
    def SetRGB(*args): return _ivideo.iOffscreenCanvasCallback_SetRGB(*args)
    __swig_destroy__ = _ivideo.delete_iOffscreenCanvasCallback
    __del__ = lambda self : None;
iOffscreenCanvasCallback_swigregister = _ivideo.iOffscreenCanvasCallback_swigregister
iOffscreenCanvasCallback_swigregister(iOffscreenCanvasCallback)

class iGraphics2D(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iGraphics2D, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iGraphics2D, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Open(*args): return _ivideo.iGraphics2D_Open(*args)
    def Close(*args): return _ivideo.iGraphics2D_Close(*args)
    def GetWidth(*args): return _ivideo.iGraphics2D_GetWidth(*args)
    def GetHeight(*args): return _ivideo.iGraphics2D_GetHeight(*args)
    def GetPage(*args): return _ivideo.iGraphics2D_GetPage(*args)
    def DoubleBuffer(*args): return _ivideo.iGraphics2D_DoubleBuffer(*args)
    def GetDoubleBufferState(*args): return _ivideo.iGraphics2D_GetDoubleBufferState(*args)
    def GetPixelFormat(*args): return _ivideo.iGraphics2D_GetPixelFormat(*args)
    def GetPixelBytes(*args): return _ivideo.iGraphics2D_GetPixelBytes(*args)
    def GetPalEntryCount(*args): return _ivideo.iGraphics2D_GetPalEntryCount(*args)
    def GetPalette(*args): return _ivideo.iGraphics2D_GetPalette(*args)
    def SetRGB(*args): return _ivideo.iGraphics2D_SetRGB(*args)
    def FindRGB(*args): return _ivideo.iGraphics2D_FindRGB(*args)
    def GetRGB(*args): return _ivideo.iGraphics2D_GetRGB(*args)
    def GetRGBA(*args): return _ivideo.iGraphics2D_GetRGBA(*args)
    def SetClipRect(*args): return _ivideo.iGraphics2D_SetClipRect(*args)
    def GetClipRect(*args): return _ivideo.iGraphics2D_GetClipRect(*args)
    def BeginDraw(*args): return _ivideo.iGraphics2D_BeginDraw(*args)
    def FinishDraw(*args): return _ivideo.iGraphics2D_FinishDraw(*args)
    def Print(*args): return _ivideo.iGraphics2D_Print(*args)
    def Clear(*args): return _ivideo.iGraphics2D_Clear(*args)
    def ClearAll(*args): return _ivideo.iGraphics2D_ClearAll(*args)
    def DrawLine(*args): return _ivideo.iGraphics2D_DrawLine(*args)
    def DrawBox(*args): return _ivideo.iGraphics2D_DrawBox(*args)
    def ClipLine(*args): return _ivideo.iGraphics2D_ClipLine(*args)
    def DrawPixel(*args): return _ivideo.iGraphics2D_DrawPixel(*args)
    def DrawPixels(*args): return _ivideo.iGraphics2D_DrawPixels(*args)
    def Blit(*args): return _ivideo.iGraphics2D_Blit(*args)
    def GetPixelAt(*args): return _ivideo.iGraphics2D_GetPixelAt(*args)
    def GetPixel(*args): return _ivideo.iGraphics2D_GetPixel(*args)
    def SaveArea(*args): return _ivideo.iGraphics2D_SaveArea(*args)
    def RestoreArea(*args): return _ivideo.iGraphics2D_RestoreArea(*args)
    def FreeArea(*args): return _ivideo.iGraphics2D_FreeArea(*args)
    def AllowResize(*args): return _ivideo.iGraphics2D_AllowResize(*args)
    def Resize(*args): return _ivideo.iGraphics2D_Resize(*args)
    def GetFontServer(*args): return _ivideo.iGraphics2D_GetFontServer(*args)
    def PerformExtension(*args): return _ivideo.iGraphics2D_PerformExtension(*args)
    def ScreenShot(*args): return _ivideo.iGraphics2D_ScreenShot(*args)
    def GetNativeWindow(*args): return _ivideo.iGraphics2D_GetNativeWindow(*args)
    def GetFullScreen(*args): return _ivideo.iGraphics2D_GetFullScreen(*args)
    def SetFullScreen(*args): return _ivideo.iGraphics2D_SetFullScreen(*args)
    def SetMousePosition(*args): return _ivideo.iGraphics2D_SetMousePosition(*args)
    def SetMouseCursor(*args): return _ivideo.iGraphics2D_SetMouseCursor(*args)
    def SetGamma(*args): return _ivideo.iGraphics2D_SetGamma(*args)
    def GetGamma(*args): return _ivideo.iGraphics2D_GetGamma(*args)
    def GetName(*args): return _ivideo.iGraphics2D_GetName(*args)
    def CreateOffscreenCanvas(*args): return _ivideo.iGraphics2D_CreateOffscreenCanvas(*args)
    def Write(*args): return _ivideo.iGraphics2D_Write(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iGraphics2D_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iGraphics2D_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iGraphics2D
    __del__ = lambda self : None;
    def _PerformExtension(*args): return _ivideo.iGraphics2D__PerformExtension(*args)
    def PerformExtension (self, command, *args):
      self._PerformExtension(self.__class__.__name__, command, args);

iGraphics2D_swigregister = _ivideo.iGraphics2D_swigregister
iGraphics2D_swigregister(iGraphics2D)
iGraphics2D_scfGetVersion = _ivideo.iGraphics2D_scfGetVersion

CSDRAW_2DGRAPHICS = _ivideo.CSDRAW_2DGRAPHICS
CSDRAW_3DGRAPHICS = _ivideo.CSDRAW_3DGRAPHICS
CSDRAW_CLEARZBUFFER = _ivideo.CSDRAW_CLEARZBUFFER
CSDRAW_CLEARSCREEN = _ivideo.CSDRAW_CLEARSCREEN
CS_CLIPPER_NONE = _ivideo.CS_CLIPPER_NONE
CS_CLIPPER_OPTIONAL = _ivideo.CS_CLIPPER_OPTIONAL
CS_CLIPPER_TOPLEVEL = _ivideo.CS_CLIPPER_TOPLEVEL
CS_CLIPPER_REQUIRED = _ivideo.CS_CLIPPER_REQUIRED
CS_CLIP_NOT = _ivideo.CS_CLIP_NOT
CS_CLIP_NEEDED = _ivideo.CS_CLIP_NEEDED
CS_ZBUF_NONE = _ivideo.CS_ZBUF_NONE
CS_ZBUF_FILL = _ivideo.CS_ZBUF_FILL
CS_ZBUF_TEST = _ivideo.CS_ZBUF_TEST
CS_ZBUF_USE = _ivideo.CS_ZBUF_USE
CS_ZBUF_EQUAL = _ivideo.CS_ZBUF_EQUAL
CS_ZBUF_INVERT = _ivideo.CS_ZBUF_INVERT
CS_ZBUF_MESH = _ivideo.CS_ZBUF_MESH
CS_ZBUF_MESH2 = _ivideo.CS_ZBUF_MESH2
CS_VATTRIB_SPECIFIC_FIRST = _ivideo.CS_VATTRIB_SPECIFIC_FIRST
CS_VATTRIB_SPECIFIC_LAST = _ivideo.CS_VATTRIB_SPECIFIC_LAST
CS_VATTRIB_GENERIC_FIRST = _ivideo.CS_VATTRIB_GENERIC_FIRST
CS_VATTRIB_GENERIC_LAST = _ivideo.CS_VATTRIB_GENERIC_LAST
CS_VATTRIB_UNUSED = _ivideo.CS_VATTRIB_UNUSED
CS_VATTRIB_INVALID = _ivideo.CS_VATTRIB_INVALID
CS_VATTRIB_POSITION = _ivideo.CS_VATTRIB_POSITION
CS_VATTRIB_WEIGHT = _ivideo.CS_VATTRIB_WEIGHT
CS_VATTRIB_NORMAL = _ivideo.CS_VATTRIB_NORMAL
CS_VATTRIB_COLOR = _ivideo.CS_VATTRIB_COLOR
CS_VATTRIB_PRIMARY_COLOR = _ivideo.CS_VATTRIB_PRIMARY_COLOR
CS_VATTRIB_SECONDARY_COLOR = _ivideo.CS_VATTRIB_SECONDARY_COLOR
CS_VATTRIB_FOGCOORD = _ivideo.CS_VATTRIB_FOGCOORD
CS_VATTRIB_TEXCOORD = _ivideo.CS_VATTRIB_TEXCOORD
CS_VATTRIB_TEXCOORD0 = _ivideo.CS_VATTRIB_TEXCOORD0
CS_VATTRIB_TEXCOORD1 = _ivideo.CS_VATTRIB_TEXCOORD1
CS_VATTRIB_TEXCOORD2 = _ivideo.CS_VATTRIB_TEXCOORD2
CS_VATTRIB_TEXCOORD3 = _ivideo.CS_VATTRIB_TEXCOORD3
CS_VATTRIB_TEXCOORD4 = _ivideo.CS_VATTRIB_TEXCOORD4
CS_VATTRIB_TEXCOORD5 = _ivideo.CS_VATTRIB_TEXCOORD5
CS_VATTRIB_TEXCOORD6 = _ivideo.CS_VATTRIB_TEXCOORD6
CS_VATTRIB_TEXCOORD7 = _ivideo.CS_VATTRIB_TEXCOORD7
CS_VATTRIB_0 = _ivideo.CS_VATTRIB_0
CS_VATTRIB_1 = _ivideo.CS_VATTRIB_1
CS_VATTRIB_2 = _ivideo.CS_VATTRIB_2
CS_VATTRIB_3 = _ivideo.CS_VATTRIB_3
CS_VATTRIB_4 = _ivideo.CS_VATTRIB_4
CS_VATTRIB_5 = _ivideo.CS_VATTRIB_5
CS_VATTRIB_6 = _ivideo.CS_VATTRIB_6
CS_VATTRIB_7 = _ivideo.CS_VATTRIB_7
CS_VATTRIB_8 = _ivideo.CS_VATTRIB_8
CS_VATTRIB_9 = _ivideo.CS_VATTRIB_9
CS_VATTRIB_10 = _ivideo.CS_VATTRIB_10
CS_VATTRIB_11 = _ivideo.CS_VATTRIB_11
CS_VATTRIB_12 = _ivideo.CS_VATTRIB_12
CS_VATTRIB_13 = _ivideo.CS_VATTRIB_13
CS_VATTRIB_14 = _ivideo.CS_VATTRIB_14
CS_VATTRIB_15 = _ivideo.CS_VATTRIB_15
CS_MIXMODE_TYPE_AUTO = _ivideo.CS_MIXMODE_TYPE_AUTO
CS_MIXMODE_TYPE_BLENDOP = _ivideo.CS_MIXMODE_TYPE_BLENDOP
CS_MIXMODE_FLAG_BLENDOP_ALPHA = _ivideo.CS_MIXMODE_FLAG_BLENDOP_ALPHA
CS_MIXMODE_TYPE_MESH = _ivideo.CS_MIXMODE_TYPE_MESH
CS_MIXMODE_TYPE_MASK = _ivideo.CS_MIXMODE_TYPE_MASK
CS_MIXMODE_FACT_ZERO = _ivideo.CS_MIXMODE_FACT_ZERO
CS_MIXMODE_FACT_ONE = _ivideo.CS_MIXMODE_FACT_ONE
CS_MIXMODE_FACT_SRCCOLOR = _ivideo.CS_MIXMODE_FACT_SRCCOLOR
CS_MIXMODE_FACT_SRCCOLOR_INV = _ivideo.CS_MIXMODE_FACT_SRCCOLOR_INV
CS_MIXMODE_FACT_DSTCOLOR = _ivideo.CS_MIXMODE_FACT_DSTCOLOR
CS_MIXMODE_FACT_DSTCOLOR_INV = _ivideo.CS_MIXMODE_FACT_DSTCOLOR_INV
CS_MIXMODE_FACT_SRCALPHA = _ivideo.CS_MIXMODE_FACT_SRCALPHA
CS_MIXMODE_FACT_SRCALPHA_INV = _ivideo.CS_MIXMODE_FACT_SRCALPHA_INV
CS_MIXMODE_FACT_DSTALPHA = _ivideo.CS_MIXMODE_FACT_DSTALPHA
CS_MIXMODE_FACT_DSTALPHA_INV = _ivideo.CS_MIXMODE_FACT_DSTALPHA_INV
CS_MIXMODE_FACT_COUNT = _ivideo.CS_MIXMODE_FACT_COUNT
CS_MIXMODE_FACT_MASK = _ivideo.CS_MIXMODE_FACT_MASK
CS_MIXMODE_ALPHATEST_AUTO = _ivideo.CS_MIXMODE_ALPHATEST_AUTO
CS_MIXMODE_ALPHATEST_ENABLE = _ivideo.CS_MIXMODE_ALPHATEST_ENABLE
CS_MIXMODE_ALPHATEST_DISABLE = _ivideo.CS_MIXMODE_ALPHATEST_DISABLE
CS_MIXMODE_ALPHATEST_MASK = _ivideo.CS_MIXMODE_ALPHATEST_MASK
CS_FX_COPY = _ivideo.CS_FX_COPY
CS_FX_MESH = _ivideo.CS_FX_MESH
CS_FX_FLAT = _ivideo.CS_FX_FLAT
CS_FX_MASK_ALPHA = _ivideo.CS_FX_MASK_ALPHA
CS_FX_MASK_MIXMODE = _ivideo.CS_FX_MASK_MIXMODE
class csAlphaMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csAlphaMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csAlphaMode, name)
    __repr__ = _swig_repr
    alphaNone = _ivideo.csAlphaMode_alphaNone
    alphaBinary = _ivideo.csAlphaMode_alphaBinary
    alphaSmooth = _ivideo.csAlphaMode_alphaSmooth
    __swig_setmethods__["autoAlphaMode"] = _ivideo.csAlphaMode_autoAlphaMode_set
    __swig_getmethods__["autoAlphaMode"] = _ivideo.csAlphaMode_autoAlphaMode_get
    if _newclass:autoAlphaMode = _swig_property(_ivideo.csAlphaMode_autoAlphaMode_get, _ivideo.csAlphaMode_autoAlphaMode_set)
    def __init__(self, *args): 
        this = _ivideo.new_csAlphaMode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csAlphaMode
    __del__ = lambda self : None;
csAlphaMode_swigregister = _ivideo.csAlphaMode_swigregister
csAlphaMode_swigregister(csAlphaMode)

CS_LIGHTPARAM_POSITION = _ivideo.CS_LIGHTPARAM_POSITION
CS_LIGHTPARAM_DIFFUSE = _ivideo.CS_LIGHTPARAM_DIFFUSE
CS_LIGHTPARAM_SPECULAR = _ivideo.CS_LIGHTPARAM_SPECULAR
CS_LIGHTPARAM_ATTENUATION = _ivideo.CS_LIGHTPARAM_ATTENUATION
CS_SHADOW_VOLUME_BEGIN = _ivideo.CS_SHADOW_VOLUME_BEGIN
CS_SHADOW_VOLUME_PASS1 = _ivideo.CS_SHADOW_VOLUME_PASS1
CS_SHADOW_VOLUME_PASS2 = _ivideo.CS_SHADOW_VOLUME_PASS2
CS_SHADOW_VOLUME_FAIL1 = _ivideo.CS_SHADOW_VOLUME_FAIL1
CS_SHADOW_VOLUME_FAIL2 = _ivideo.CS_SHADOW_VOLUME_FAIL2
CS_SHADOW_VOLUME_USE = _ivideo.CS_SHADOW_VOLUME_USE
CS_SHADOW_VOLUME_FINISH = _ivideo.CS_SHADOW_VOLUME_FINISH
G3DRENDERSTATE_ZBUFFERMODE = _ivideo.G3DRENDERSTATE_ZBUFFERMODE
G3DRENDERSTATE_DITHERENABLE = _ivideo.G3DRENDERSTATE_DITHERENABLE
G3DRENDERSTATE_BILINEARMAPPINGENABLE = _ivideo.G3DRENDERSTATE_BILINEARMAPPINGENABLE
G3DRENDERSTATE_TRILINEARMAPPINGENABLE = _ivideo.G3DRENDERSTATE_TRILINEARMAPPINGENABLE
G3DRENDERSTATE_TRANSPARENCYENABLE = _ivideo.G3DRENDERSTATE_TRANSPARENCYENABLE
G3DRENDERSTATE_MIPMAPENABLE = _ivideo.G3DRENDERSTATE_MIPMAPENABLE
G3DRENDERSTATE_TEXTUREMAPPINGENABLE = _ivideo.G3DRENDERSTATE_TEXTUREMAPPINGENABLE
G3DRENDERSTATE_LIGHTINGENABLE = _ivideo.G3DRENDERSTATE_LIGHTINGENABLE
G3DRENDERSTATE_INTERLACINGENABLE = _ivideo.G3DRENDERSTATE_INTERLACINGENABLE
G3DRENDERSTATE_MMXENABLE = _ivideo.G3DRENDERSTATE_MMXENABLE
G3DRENDERSTATE_INTERPOLATIONSTEP = _ivideo.G3DRENDERSTATE_INTERPOLATIONSTEP
G3DRENDERSTATE_MAXPOLYGONSTODRAW = _ivideo.G3DRENDERSTATE_MAXPOLYGONSTODRAW
G3DRENDERSTATE_GOURAUDENABLE = _ivideo.G3DRENDERSTATE_GOURAUDENABLE
G3DRENDERSTATE_EDGES = _ivideo.G3DRENDERSTATE_EDGES
class csGraphics3DCaps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csGraphics3DCaps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csGraphics3DCaps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minTexHeight"] = _ivideo.csGraphics3DCaps_minTexHeight_set
    __swig_getmethods__["minTexHeight"] = _ivideo.csGraphics3DCaps_minTexHeight_get
    if _newclass:minTexHeight = _swig_property(_ivideo.csGraphics3DCaps_minTexHeight_get, _ivideo.csGraphics3DCaps_minTexHeight_set)
    __swig_setmethods__["minTexWidth"] = _ivideo.csGraphics3DCaps_minTexWidth_set
    __swig_getmethods__["minTexWidth"] = _ivideo.csGraphics3DCaps_minTexWidth_get
    if _newclass:minTexWidth = _swig_property(_ivideo.csGraphics3DCaps_minTexWidth_get, _ivideo.csGraphics3DCaps_minTexWidth_set)
    __swig_setmethods__["maxTexHeight"] = _ivideo.csGraphics3DCaps_maxTexHeight_set
    __swig_getmethods__["maxTexHeight"] = _ivideo.csGraphics3DCaps_maxTexHeight_get
    if _newclass:maxTexHeight = _swig_property(_ivideo.csGraphics3DCaps_maxTexHeight_get, _ivideo.csGraphics3DCaps_maxTexHeight_set)
    __swig_setmethods__["maxTexWidth"] = _ivideo.csGraphics3DCaps_maxTexWidth_set
    __swig_getmethods__["maxTexWidth"] = _ivideo.csGraphics3DCaps_maxTexWidth_get
    if _newclass:maxTexWidth = _swig_property(_ivideo.csGraphics3DCaps_maxTexWidth_get, _ivideo.csGraphics3DCaps_maxTexWidth_set)
    __swig_setmethods__["SupportsPointSprites"] = _ivideo.csGraphics3DCaps_SupportsPointSprites_set
    __swig_getmethods__["SupportsPointSprites"] = _ivideo.csGraphics3DCaps_SupportsPointSprites_get
    if _newclass:SupportsPointSprites = _swig_property(_ivideo.csGraphics3DCaps_SupportsPointSprites_get, _ivideo.csGraphics3DCaps_SupportsPointSprites_set)
    __swig_setmethods__["DestinationAlpha"] = _ivideo.csGraphics3DCaps_DestinationAlpha_set
    __swig_getmethods__["DestinationAlpha"] = _ivideo.csGraphics3DCaps_DestinationAlpha_get
    if _newclass:DestinationAlpha = _swig_property(_ivideo.csGraphics3DCaps_DestinationAlpha_get, _ivideo.csGraphics3DCaps_DestinationAlpha_set)
    __swig_setmethods__["StencilShadows"] = _ivideo.csGraphics3DCaps_StencilShadows_set
    __swig_getmethods__["StencilShadows"] = _ivideo.csGraphics3DCaps_StencilShadows_get
    if _newclass:StencilShadows = _swig_property(_ivideo.csGraphics3DCaps_StencilShadows_get, _ivideo.csGraphics3DCaps_StencilShadows_set)
    def __init__(self, *args): 
        this = _ivideo.new_csGraphics3DCaps(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csGraphics3DCaps
    __del__ = lambda self : None;
csGraphics3DCaps_swigregister = _ivideo.csGraphics3DCaps_swigregister
csGraphics3DCaps_swigregister(csGraphics3DCaps)

CS_MESHTYPE_TRIANGLES = _ivideo.CS_MESHTYPE_TRIANGLES
CS_MESHTYPE_QUADS = _ivideo.CS_MESHTYPE_QUADS
CS_MESHTYPE_TRIANGLESTRIP = _ivideo.CS_MESHTYPE_TRIANGLESTRIP
CS_MESHTYPE_TRIANGLEFAN = _ivideo.CS_MESHTYPE_TRIANGLEFAN
CS_MESHTYPE_POINTS = _ivideo.CS_MESHTYPE_POINTS
CS_MESHTYPE_POINT_SPRITES = _ivideo.CS_MESHTYPE_POINT_SPRITES
CS_MESHTYPE_LINES = _ivideo.CS_MESHTYPE_LINES
CS_MESHTYPE_LINESTRIP = _ivideo.CS_MESHTYPE_LINESTRIP
csSimpleMeshScreenspace = _ivideo.csSimpleMeshScreenspace
CS_OPENPORTAL_ZFILL = _ivideo.CS_OPENPORTAL_ZFILL
CS_OPENPORTAL_MIRROR = _ivideo.CS_OPENPORTAL_MIRROR
CS_OPENPORTAL_FLOAT = _ivideo.CS_OPENPORTAL_FLOAT
class csSimpleRenderMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csSimpleRenderMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csSimpleRenderMesh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["meshtype"] = _ivideo.csSimpleRenderMesh_meshtype_set
    __swig_getmethods__["meshtype"] = _ivideo.csSimpleRenderMesh_meshtype_get
    if _newclass:meshtype = _swig_property(_ivideo.csSimpleRenderMesh_meshtype_get, _ivideo.csSimpleRenderMesh_meshtype_set)
    __swig_setmethods__["indexCount"] = _ivideo.csSimpleRenderMesh_indexCount_set
    __swig_getmethods__["indexCount"] = _ivideo.csSimpleRenderMesh_indexCount_get
    if _newclass:indexCount = _swig_property(_ivideo.csSimpleRenderMesh_indexCount_get, _ivideo.csSimpleRenderMesh_indexCount_set)
    __swig_setmethods__["indices"] = _ivideo.csSimpleRenderMesh_indices_set
    __swig_getmethods__["indices"] = _ivideo.csSimpleRenderMesh_indices_get
    if _newclass:indices = _swig_property(_ivideo.csSimpleRenderMesh_indices_get, _ivideo.csSimpleRenderMesh_indices_set)
    __swig_setmethods__["vertexCount"] = _ivideo.csSimpleRenderMesh_vertexCount_set
    __swig_getmethods__["vertexCount"] = _ivideo.csSimpleRenderMesh_vertexCount_get
    if _newclass:vertexCount = _swig_property(_ivideo.csSimpleRenderMesh_vertexCount_get, _ivideo.csSimpleRenderMesh_vertexCount_set)
    __swig_setmethods__["vertices"] = _ivideo.csSimpleRenderMesh_vertices_set
    __swig_getmethods__["vertices"] = _ivideo.csSimpleRenderMesh_vertices_get
    if _newclass:vertices = _swig_property(_ivideo.csSimpleRenderMesh_vertices_get, _ivideo.csSimpleRenderMesh_vertices_set)
    __swig_setmethods__["texcoords"] = _ivideo.csSimpleRenderMesh_texcoords_set
    __swig_getmethods__["texcoords"] = _ivideo.csSimpleRenderMesh_texcoords_get
    if _newclass:texcoords = _swig_property(_ivideo.csSimpleRenderMesh_texcoords_get, _ivideo.csSimpleRenderMesh_texcoords_set)
    __swig_setmethods__["colors"] = _ivideo.csSimpleRenderMesh_colors_set
    __swig_getmethods__["colors"] = _ivideo.csSimpleRenderMesh_colors_get
    if _newclass:colors = _swig_property(_ivideo.csSimpleRenderMesh_colors_get, _ivideo.csSimpleRenderMesh_colors_set)
    __swig_setmethods__["texture"] = _ivideo.csSimpleRenderMesh_texture_set
    __swig_getmethods__["texture"] = _ivideo.csSimpleRenderMesh_texture_get
    if _newclass:texture = _swig_property(_ivideo.csSimpleRenderMesh_texture_get, _ivideo.csSimpleRenderMesh_texture_set)
    __swig_setmethods__["shader"] = _ivideo.csSimpleRenderMesh_shader_set
    __swig_getmethods__["shader"] = _ivideo.csSimpleRenderMesh_shader_get
    if _newclass:shader = _swig_property(_ivideo.csSimpleRenderMesh_shader_get, _ivideo.csSimpleRenderMesh_shader_set)
    __swig_setmethods__["dynDomain"] = _ivideo.csSimpleRenderMesh_dynDomain_set
    __swig_getmethods__["dynDomain"] = _ivideo.csSimpleRenderMesh_dynDomain_get
    if _newclass:dynDomain = _swig_property(_ivideo.csSimpleRenderMesh_dynDomain_get, _ivideo.csSimpleRenderMesh_dynDomain_set)
    __swig_setmethods__["alphaType"] = _ivideo.csSimpleRenderMesh_alphaType_set
    __swig_getmethods__["alphaType"] = _ivideo.csSimpleRenderMesh_alphaType_get
    if _newclass:alphaType = _swig_property(_ivideo.csSimpleRenderMesh_alphaType_get, _ivideo.csSimpleRenderMesh_alphaType_set)
    __swig_setmethods__["z_buf_mode"] = _ivideo.csSimpleRenderMesh_z_buf_mode_set
    __swig_getmethods__["z_buf_mode"] = _ivideo.csSimpleRenderMesh_z_buf_mode_get
    if _newclass:z_buf_mode = _swig_property(_ivideo.csSimpleRenderMesh_z_buf_mode_get, _ivideo.csSimpleRenderMesh_z_buf_mode_set)
    __swig_setmethods__["mixmode"] = _ivideo.csSimpleRenderMesh_mixmode_set
    __swig_getmethods__["mixmode"] = _ivideo.csSimpleRenderMesh_mixmode_get
    if _newclass:mixmode = _swig_property(_ivideo.csSimpleRenderMesh_mixmode_get, _ivideo.csSimpleRenderMesh_mixmode_set)
    __swig_setmethods__["object2world"] = _ivideo.csSimpleRenderMesh_object2world_set
    __swig_getmethods__["object2world"] = _ivideo.csSimpleRenderMesh_object2world_get
    if _newclass:object2world = _swig_property(_ivideo.csSimpleRenderMesh_object2world_get, _ivideo.csSimpleRenderMesh_object2world_set)
    def __init__(self, *args): 
        this = _ivideo.new_csSimpleRenderMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetWithGenmeshFactory(*args): return _ivideo.csSimpleRenderMesh_SetWithGenmeshFactory(*args)
    __swig_destroy__ = _ivideo.delete_csSimpleRenderMesh
    __del__ = lambda self : None;
csSimpleRenderMesh_swigregister = _ivideo.csSimpleRenderMesh_swigregister
csSimpleRenderMesh_swigregister(csSimpleRenderMesh)

class iGraphics3D(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iGraphics3D, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iGraphics3D, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Open(*args): return _ivideo.iGraphics3D_Open(*args)
    def Close(*args): return _ivideo.iGraphics3D_Close(*args)
    def GetDriver2D(*args): return _ivideo.iGraphics3D_GetDriver2D(*args)
    def GetTextureManager(*args): return _ivideo.iGraphics3D_GetTextureManager(*args)
    def SetDimensions(*args): return _ivideo.iGraphics3D_SetDimensions(*args)
    def GetWidth(*args): return _ivideo.iGraphics3D_GetWidth(*args)
    def GetHeight(*args): return _ivideo.iGraphics3D_GetHeight(*args)
    def GetCaps(*args): return _ivideo.iGraphics3D_GetCaps(*args)
    def SetPerspectiveCenter(*args): return _ivideo.iGraphics3D_SetPerspectiveCenter(*args)
    def GetPerspectiveCenter(*args): return _ivideo.iGraphics3D_GetPerspectiveCenter(*args)
    def SetPerspectiveAspect(*args): return _ivideo.iGraphics3D_SetPerspectiveAspect(*args)
    def GetPerspectiveAspect(*args): return _ivideo.iGraphics3D_GetPerspectiveAspect(*args)
    def SetRenderTarget(*args): return _ivideo.iGraphics3D_SetRenderTarget(*args)
    def GetRenderTarget(*args): return _ivideo.iGraphics3D_GetRenderTarget(*args)
    def BeginDraw(*args): return _ivideo.iGraphics3D_BeginDraw(*args)
    def FinishDraw(*args): return _ivideo.iGraphics3D_FinishDraw(*args)
    def Print(*args): return _ivideo.iGraphics3D_Print(*args)
    def DrawMesh(*args): return _ivideo.iGraphics3D_DrawMesh(*args)
    def DrawSimpleMesh(*args): return _ivideo.iGraphics3D_DrawSimpleMesh(*args)
    def DrawPixmap(*args): return _ivideo.iGraphics3D_DrawPixmap(*args)
    def DrawLine(*args): return _ivideo.iGraphics3D_DrawLine(*args)
    def ActivateBuffers(*args): return _ivideo.iGraphics3D_ActivateBuffers(*args)
    def DeactivateBuffers(*args): return _ivideo.iGraphics3D_DeactivateBuffers(*args)
    def SetTextureState(*args): return _ivideo.iGraphics3D_SetTextureState(*args)
    def SetClipper(*args): return _ivideo.iGraphics3D_SetClipper(*args)
    def GetClipper(*args): return _ivideo.iGraphics3D_GetClipper(*args)
    def GetClipType(*args): return _ivideo.iGraphics3D_GetClipType(*args)
    def SetNearPlane(*args): return _ivideo.iGraphics3D_SetNearPlane(*args)
    def ResetNearPlane(*args): return _ivideo.iGraphics3D_ResetNearPlane(*args)
    def GetNearPlane(*args): return _ivideo.iGraphics3D_GetNearPlane(*args)
    def HasNearPlane(*args): return _ivideo.iGraphics3D_HasNearPlane(*args)
    def SetRenderState(*args): return _ivideo.iGraphics3D_SetRenderState(*args)
    def GetRenderState(*args): return _ivideo.iGraphics3D_GetRenderState(*args)
    def SetOption(*args): return _ivideo.iGraphics3D_SetOption(*args)
    def SetWriteMask(*args): return _ivideo.iGraphics3D_SetWriteMask(*args)
    def GetWriteMask(*args): return _ivideo.iGraphics3D_GetWriteMask(*args)
    def SetZMode(*args): return _ivideo.iGraphics3D_SetZMode(*args)
    def GetZMode(*args): return _ivideo.iGraphics3D_GetZMode(*args)
    def EnableZOffset(*args): return _ivideo.iGraphics3D_EnableZOffset(*args)
    def DisableZOffset(*args): return _ivideo.iGraphics3D_DisableZOffset(*args)
    def SetShadowState(*args): return _ivideo.iGraphics3D_SetShadowState(*args)
    def GetZBuffValue(*args): return _ivideo.iGraphics3D_GetZBuffValue(*args)
    def OpenPortal(*args): return _ivideo.iGraphics3D_OpenPortal(*args)
    def ClosePortal(*args): return _ivideo.iGraphics3D_ClosePortal(*args)
    def CreateHalo(*args): return _ivideo.iGraphics3D_CreateHalo(*args)
    def RemoveFromCache(*args): return _ivideo.iGraphics3D_RemoveFromCache(*args)
    def SetWorldToCamera(*args): return _ivideo.iGraphics3D_SetWorldToCamera(*args)
    def PerformExtension(*args): return _ivideo.iGraphics3D_PerformExtension(*args)
    def GetWorldToCamera(*args): return _ivideo.iGraphics3D_GetWorldToCamera(*args)
    def GetCurrentDrawFlags(*args): return _ivideo.iGraphics3D_GetCurrentDrawFlags(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iGraphics3D_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iGraphics3D_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iGraphics3D
    __del__ = lambda self : None;
iGraphics3D_swigregister = _ivideo.iGraphics3D_swigregister
iGraphics3D_swigregister(iGraphics3D)
iGraphics3D_scfGetVersion = _ivideo.iGraphics3D_scfGetVersion

csmcNone = _ivideo.csmcNone
csmcArrow = _ivideo.csmcArrow
csmcLens = _ivideo.csmcLens
csmcCross = _ivideo.csmcCross
csmcPen = _ivideo.csmcPen
csmcMove = _ivideo.csmcMove
csmcSizeNWSE = _ivideo.csmcSizeNWSE
csmcSizeNESW = _ivideo.csmcSizeNESW
csmcSizeNS = _ivideo.csmcSizeNS
csmcSizeEW = _ivideo.csmcSizeEW
csmcStop = _ivideo.csmcStop
csmcWait = _ivideo.csmcWait
CS_ALERT_ERROR = _ivideo.CS_ALERT_ERROR
CS_ALERT_WARNING = _ivideo.CS_ALERT_WARNING
CS_ALERT_NOTE = _ivideo.CS_ALERT_NOTE
class iNativeWindowManager(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iNativeWindowManager, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iNativeWindowManager, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Alert(*args): return _ivideo.iNativeWindowManager_Alert(*args)
    __swig_destroy__ = _ivideo.delete_iNativeWindowManager
    __del__ = lambda self : None;
iNativeWindowManager_swigregister = _ivideo.iNativeWindowManager_swigregister
iNativeWindowManager_swigregister(iNativeWindowManager)

class iNativeWindow(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iNativeWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iNativeWindow, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetTitle(*args): return _ivideo.iNativeWindow_SetTitle(*args)
    __swig_destroy__ = _ivideo.delete_iNativeWindow
    __del__ = lambda self : None;
iNativeWindow_swigregister = _ivideo.iNativeWindow_swigregister
iNativeWindow_swigregister(iNativeWindow)

cullNormal = _ivideo.cullNormal
cullFlipped = _ivideo.cullFlipped
cullDisabled = _ivideo.cullDisabled
GetFlippedCullMode = _ivideo.GetFlippedCullMode
class RenderMeshModes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderMeshModes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderMeshModes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_RenderMeshModes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMeshModes
    __del__ = lambda self : None;
    __swig_setmethods__["z_buf_mode"] = _ivideo.RenderMeshModes_z_buf_mode_set
    __swig_getmethods__["z_buf_mode"] = _ivideo.RenderMeshModes_z_buf_mode_get
    if _newclass:z_buf_mode = _swig_property(_ivideo.RenderMeshModes_z_buf_mode_get, _ivideo.RenderMeshModes_z_buf_mode_set)
    __swig_setmethods__["mixmode"] = _ivideo.RenderMeshModes_mixmode_set
    __swig_getmethods__["mixmode"] = _ivideo.RenderMeshModes_mixmode_get
    if _newclass:mixmode = _swig_property(_ivideo.RenderMeshModes_mixmode_get, _ivideo.RenderMeshModes_mixmode_set)
    __swig_setmethods__["renderPrio"] = _ivideo.RenderMeshModes_renderPrio_set
    __swig_getmethods__["renderPrio"] = _ivideo.RenderMeshModes_renderPrio_get
    if _newclass:renderPrio = _swig_property(_ivideo.RenderMeshModes_renderPrio_get, _ivideo.RenderMeshModes_renderPrio_set)
    __swig_setmethods__["flipCulling"] = _ivideo.RenderMeshModes_flipCulling_set
    __swig_getmethods__["flipCulling"] = _ivideo.RenderMeshModes_flipCulling_get
    if _newclass:flipCulling = _swig_property(_ivideo.RenderMeshModes_flipCulling_get, _ivideo.RenderMeshModes_flipCulling_set)
    __swig_setmethods__["cullMode"] = _ivideo.RenderMeshModes_cullMode_set
    __swig_getmethods__["cullMode"] = _ivideo.RenderMeshModes_cullMode_get
    if _newclass:cullMode = _swig_property(_ivideo.RenderMeshModes_cullMode_get, _ivideo.RenderMeshModes_cullMode_set)
    __swig_setmethods__["alphaType"] = _ivideo.RenderMeshModes_alphaType_set
    __swig_getmethods__["alphaType"] = _ivideo.RenderMeshModes_alphaType_get
    if _newclass:alphaType = _swig_property(_ivideo.RenderMeshModes_alphaType_get, _ivideo.RenderMeshModes_alphaType_set)
    __swig_setmethods__["buffers"] = _ivideo.RenderMeshModes_buffers_set
    __swig_getmethods__["buffers"] = _ivideo.RenderMeshModes_buffers_get
    if _newclass:buffers = _swig_property(_ivideo.RenderMeshModes_buffers_get, _ivideo.RenderMeshModes_buffers_set)
RenderMeshModes_swigregister = _ivideo.RenderMeshModes_swigregister
RenderMeshModes_swigregister(RenderMeshModes)

class CoreRenderMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreRenderMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreRenderMesh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["db_mesh_name"] = _ivideo.CoreRenderMesh_db_mesh_name_set
    __swig_getmethods__["db_mesh_name"] = _ivideo.CoreRenderMesh_db_mesh_name_get
    if _newclass:db_mesh_name = _swig_property(_ivideo.CoreRenderMesh_db_mesh_name_get, _ivideo.CoreRenderMesh_db_mesh_name_set)
    def __init__(self, *args): 
        this = _ivideo.new_CoreRenderMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_CoreRenderMesh
    __del__ = lambda self : None;
    __swig_setmethods__["clip_portal"] = _ivideo.CoreRenderMesh_clip_portal_set
    __swig_getmethods__["clip_portal"] = _ivideo.CoreRenderMesh_clip_portal_get
    if _newclass:clip_portal = _swig_property(_ivideo.CoreRenderMesh_clip_portal_get, _ivideo.CoreRenderMesh_clip_portal_set)
    __swig_setmethods__["clip_plane"] = _ivideo.CoreRenderMesh_clip_plane_set
    __swig_getmethods__["clip_plane"] = _ivideo.CoreRenderMesh_clip_plane_get
    if _newclass:clip_plane = _swig_property(_ivideo.CoreRenderMesh_clip_plane_get, _ivideo.CoreRenderMesh_clip_plane_set)
    __swig_setmethods__["clip_z_plane"] = _ivideo.CoreRenderMesh_clip_z_plane_set
    __swig_getmethods__["clip_z_plane"] = _ivideo.CoreRenderMesh_clip_z_plane_get
    if _newclass:clip_z_plane = _swig_property(_ivideo.CoreRenderMesh_clip_z_plane_get, _ivideo.CoreRenderMesh_clip_z_plane_set)
    __swig_setmethods__["do_mirror"] = _ivideo.CoreRenderMesh_do_mirror_set
    __swig_getmethods__["do_mirror"] = _ivideo.CoreRenderMesh_do_mirror_get
    if _newclass:do_mirror = _swig_property(_ivideo.CoreRenderMesh_do_mirror_get, _ivideo.CoreRenderMesh_do_mirror_set)
    __swig_setmethods__["meshtype"] = _ivideo.CoreRenderMesh_meshtype_set
    __swig_getmethods__["meshtype"] = _ivideo.CoreRenderMesh_meshtype_get
    if _newclass:meshtype = _swig_property(_ivideo.CoreRenderMesh_meshtype_get, _ivideo.CoreRenderMesh_meshtype_set)
    __swig_setmethods__["indexstart"] = _ivideo.CoreRenderMesh_indexstart_set
    __swig_getmethods__["indexstart"] = _ivideo.CoreRenderMesh_indexstart_get
    if _newclass:indexstart = _swig_property(_ivideo.CoreRenderMesh_indexstart_get, _ivideo.CoreRenderMesh_indexstart_set)
    __swig_setmethods__["indexend"] = _ivideo.CoreRenderMesh_indexend_set
    __swig_getmethods__["indexend"] = _ivideo.CoreRenderMesh_indexend_get
    if _newclass:indexend = _swig_property(_ivideo.CoreRenderMesh_indexend_get, _ivideo.CoreRenderMesh_indexend_set)
    __swig_setmethods__["material"] = _ivideo.CoreRenderMesh_material_set
    __swig_getmethods__["material"] = _ivideo.CoreRenderMesh_material_get
    if _newclass:material = _swig_property(_ivideo.CoreRenderMesh_material_get, _ivideo.CoreRenderMesh_material_set)
    __swig_setmethods__["object2world"] = _ivideo.CoreRenderMesh_object2world_set
    __swig_getmethods__["object2world"] = _ivideo.CoreRenderMesh_object2world_get
    if _newclass:object2world = _swig_property(_ivideo.CoreRenderMesh_object2world_get, _ivideo.CoreRenderMesh_object2world_set)
CoreRenderMesh_swigregister = _ivideo.CoreRenderMesh_swigregister
CoreRenderMesh_swigregister(CoreRenderMesh)

class RenderMesh(CoreRenderMesh,RenderMeshModes):
    __swig_setmethods__ = {}
    for _s in [CoreRenderMesh,RenderMeshModes]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [CoreRenderMesh,RenderMeshModes]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ivideo.new_RenderMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_RenderMesh
    __del__ = lambda self : None;
    __swig_setmethods__["geometryInstance"] = _ivideo.RenderMesh_geometryInstance_set
    __swig_getmethods__["geometryInstance"] = _ivideo.RenderMesh_geometryInstance_get
    if _newclass:geometryInstance = _swig_property(_ivideo.RenderMesh_geometryInstance_get, _ivideo.RenderMesh_geometryInstance_set)
    __swig_setmethods__["portal"] = _ivideo.RenderMesh_portal_set
    __swig_getmethods__["portal"] = _ivideo.RenderMesh_portal_get
    if _newclass:portal = _swig_property(_ivideo.RenderMesh_portal_get, _ivideo.RenderMesh_portal_set)
    __swig_setmethods__["variablecontext"] = _ivideo.RenderMesh_variablecontext_set
    __swig_getmethods__["variablecontext"] = _ivideo.RenderMesh_variablecontext_get
    if _newclass:variablecontext = _swig_property(_ivideo.RenderMesh_variablecontext_get, _ivideo.RenderMesh_variablecontext_set)
    __swig_setmethods__["worldspace_origin"] = _ivideo.RenderMesh_worldspace_origin_set
    __swig_getmethods__["worldspace_origin"] = _ivideo.RenderMesh_worldspace_origin_get
    if _newclass:worldspace_origin = _swig_property(_ivideo.RenderMesh_worldspace_origin_get, _ivideo.RenderMesh_worldspace_origin_set)
RenderMesh_swigregister = _ivideo.RenderMesh_swigregister
RenderMesh_swigregister(RenderMesh)

CSFONT_LARGE = _ivideo.CSFONT_LARGE
CSFONT_ITALIC = _ivideo.CSFONT_ITALIC
CSFONT_COURIER = _ivideo.CSFONT_COURIER
CSFONT_SMALL = _ivideo.CSFONT_SMALL
CS_FONT_DEFAULT_GLYPH = _ivideo.CS_FONT_DEFAULT_GLYPH
class iFontDeleteNotify(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iFontDeleteNotify, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iFontDeleteNotify, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def BeforeDelete(*args): return _ivideo.iFontDeleteNotify_BeforeDelete(*args)
    __swig_destroy__ = _ivideo.delete_iFontDeleteNotify
    __del__ = lambda self : None;
iFontDeleteNotify_swigregister = _ivideo.iFontDeleteNotify_swigregister
iFontDeleteNotify_swigregister(iFontDeleteNotify)

class csBitmapMetrics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csBitmapMetrics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csBitmapMetrics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _ivideo.csBitmapMetrics_width_set
    __swig_getmethods__["width"] = _ivideo.csBitmapMetrics_width_get
    if _newclass:width = _swig_property(_ivideo.csBitmapMetrics_width_get, _ivideo.csBitmapMetrics_width_set)
    __swig_setmethods__["height"] = _ivideo.csBitmapMetrics_height_set
    __swig_getmethods__["height"] = _ivideo.csBitmapMetrics_height_get
    if _newclass:height = _swig_property(_ivideo.csBitmapMetrics_height_get, _ivideo.csBitmapMetrics_height_set)
    __swig_setmethods__["left"] = _ivideo.csBitmapMetrics_left_set
    __swig_getmethods__["left"] = _ivideo.csBitmapMetrics_left_get
    if _newclass:left = _swig_property(_ivideo.csBitmapMetrics_left_get, _ivideo.csBitmapMetrics_left_set)
    __swig_setmethods__["top"] = _ivideo.csBitmapMetrics_top_set
    __swig_getmethods__["top"] = _ivideo.csBitmapMetrics_top_get
    if _newclass:top = _swig_property(_ivideo.csBitmapMetrics_top_get, _ivideo.csBitmapMetrics_top_set)
    def __init__(self, *args): 
        this = _ivideo.new_csBitmapMetrics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csBitmapMetrics
    __del__ = lambda self : None;
csBitmapMetrics_swigregister = _ivideo.csBitmapMetrics_swigregister
csBitmapMetrics_swigregister(csBitmapMetrics)

class csGlyphMetrics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csGlyphMetrics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csGlyphMetrics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["advance"] = _ivideo.csGlyphMetrics_advance_set
    __swig_getmethods__["advance"] = _ivideo.csGlyphMetrics_advance_get
    if _newclass:advance = _swig_property(_ivideo.csGlyphMetrics_advance_get, _ivideo.csGlyphMetrics_advance_set)
    def __init__(self, *args): 
        this = _ivideo.new_csGlyphMetrics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csGlyphMetrics
    __del__ = lambda self : None;
csGlyphMetrics_swigregister = _ivideo.csGlyphMetrics_swigregister
csGlyphMetrics_swigregister(csGlyphMetrics)

class iFont(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iFont, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iFont, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddDeleteCallback(*args): return _ivideo.iFont_AddDeleteCallback(*args)
    def RemoveDeleteCallback(*args): return _ivideo.iFont_RemoveDeleteCallback(*args)
    def GetSize(*args): return _ivideo.iFont_GetSize(*args)
    def GetMaxSize(*args): return _ivideo.iFont_GetMaxSize(*args)
    def GetGlyphMetrics(*args): return _ivideo.iFont_GetGlyphMetrics(*args)
    def GetGlyphBitmap(*args): return _ivideo.iFont_GetGlyphBitmap(*args)
    def GetGlyphAlphaBitmap(*args): return _ivideo.iFont_GetGlyphAlphaBitmap(*args)
    def GetDimensions(*args): return _ivideo.iFont_GetDimensions(*args)
    def GetLength(*args): return _ivideo.iFont_GetLength(*args)
    def GetDescent(*args): return _ivideo.iFont_GetDescent(*args)
    def GetAscent(*args): return _ivideo.iFont_GetAscent(*args)
    def HasGlyph(*args): return _ivideo.iFont_HasGlyph(*args)
    def GetTextHeight(*args): return _ivideo.iFont_GetTextHeight(*args)
    def GetUnderlinePosition(*args): return _ivideo.iFont_GetUnderlinePosition(*args)
    def GetUnderlineThickness(*args): return _ivideo.iFont_GetUnderlineThickness(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iFont_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iFont_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iFont
    __del__ = lambda self : None;
iFont_swigregister = _ivideo.iFont_swigregister
iFont_swigregister(iFont)
iFont_scfGetVersion = _ivideo.iFont_scfGetVersion

class iFontServer(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iFontServer, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iFontServer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def LoadFont(*args): return _ivideo.iFontServer_LoadFont(*args)
    def SetWarnOnError(*args): return _ivideo.iFontServer_SetWarnOnError(*args)
    def GetWarnOnError(*args): return _ivideo.iFontServer_GetWarnOnError(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iFontServer_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iFontServer_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iFontServer
    __del__ = lambda self : None;
iFontServer_swigregister = _ivideo.iFontServer_swigregister
iFontServer_swigregister(iFontServer)
iFontServer_scfGetVersion = _ivideo.iFontServer_scfGetVersion

class iHalo(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iHalo, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iHalo, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetWidth(*args): return _ivideo.iHalo_GetWidth(*args)
    def GetHeight(*args): return _ivideo.iHalo_GetHeight(*args)
    def SetColor(*args): return _ivideo.iHalo_SetColor(*args)
    def GetColor(*args): return _ivideo.iHalo_GetColor(*args)
    def Draw(*args): return _ivideo.iHalo_Draw(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iHalo_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iHalo_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iHalo
    __del__ = lambda self : None;
iHalo_swigregister = _ivideo.iHalo_swigregister
iHalo_swigregister(iHalo)
iHalo_scfGetVersion = _ivideo.iHalo_scfGetVersion

class iShaderVarStack(csgfx.csShaderVariableArrayChangeAll):
    __swig_setmethods__ = {}
    for _s in [csgfx.csShaderVariableArrayChangeAll]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iShaderVarStack, name, value)
    __swig_getmethods__ = {}
    for _s in [csgfx.csShaderVariableArrayChangeAll]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iShaderVarStack, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _ivideo.delete_iShaderVarStack
    __del__ = lambda self : None;
iShaderVarStack_swigregister = _ivideo.iShaderVarStack_swigregister
iShaderVarStack_swigregister(iShaderVarStack)

class iShaderVariableContext(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iShaderVariableContext, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iShaderVariableContext, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddVariable(*args): return _ivideo.iShaderVariableContext_AddVariable(*args)
    def GetVariable(*args): return _ivideo.iShaderVariableContext_GetVariable(*args)
    def GetVariableAdd(*args): return _ivideo.iShaderVariableContext_GetVariableAdd(*args)
    def GetShaderVariables(*args): return _ivideo.iShaderVariableContext_GetShaderVariables(*args)
    def PushVariables(*args): return _ivideo.iShaderVariableContext_PushVariables(*args)
    def IsEmpty(*args): return _ivideo.iShaderVariableContext_IsEmpty(*args)
    def ReplaceVariable(*args): return _ivideo.iShaderVariableContext_ReplaceVariable(*args)
    def Clear(*args): return _ivideo.iShaderVariableContext_Clear(*args)
    def RemoveVariable(*args): return _ivideo.iShaderVariableContext_RemoveVariable(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iShaderVariableContext_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iShaderVariableContext_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShaderVariableContext
    __del__ = lambda self : None;
iShaderVariableContext_swigregister = _ivideo.iShaderVariableContext_swigregister
iShaderVariableContext_swigregister(iShaderVariableContext)
csGetShaderVariableFromStack = _ivideo.csGetShaderVariableFromStack
iShaderVariableContext_scfGetVersion = _ivideo.iShaderVariableContext_scfGetVersion

TagNeutral = _ivideo.TagNeutral
TagForbidden = _ivideo.TagForbidden
TagRequired = _ivideo.TagRequired
class iShaderManager(iShaderVariableContext):
    __swig_setmethods__ = {}
    for _s in [iShaderVariableContext]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iShaderManager, name, value)
    __swig_getmethods__ = {}
    for _s in [iShaderVariableContext]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iShaderManager, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def RegisterShader(*args): return _ivideo.iShaderManager_RegisterShader(*args)
    def UnregisterShader(*args): return _ivideo.iShaderManager_UnregisterShader(*args)
    def UnregisterShaders(*args): return _ivideo.iShaderManager_UnregisterShaders(*args)
    def GetShader(*args): return _ivideo.iShaderManager_GetShader(*args)
    def GetShaders(*args): return _ivideo.iShaderManager_GetShaders(*args)
    def RegisterCompiler(*args): return _ivideo.iShaderManager_RegisterCompiler(*args)
    def GetCompiler(*args): return _ivideo.iShaderManager_GetCompiler(*args)
    def RegisterShaderVariableAccessor(*args): return _ivideo.iShaderManager_RegisterShaderVariableAccessor(*args)
    def UnregisterShaderVariableAccessor(*args): return _ivideo.iShaderManager_UnregisterShaderVariableAccessor(*args)
    def GetShaderVariableAccessor(*args): return _ivideo.iShaderManager_GetShaderVariableAccessor(*args)
    def UnregisterShaderVariableAcessors(*args): return _ivideo.iShaderManager_UnregisterShaderVariableAcessors(*args)
    def GetShaderVariableStack(*args): return _ivideo.iShaderManager_GetShaderVariableStack(*args)
    def SetTagOptions(*args): return _ivideo.iShaderManager_SetTagOptions(*args)
    def GetTagOptions(*args): return _ivideo.iShaderManager_GetTagOptions(*args)
    def GetTags(*args): return _ivideo.iShaderManager_GetTags(*args)
    def SetActiveLights(*args): return _ivideo.iShaderManager_SetActiveLights(*args)
    def GetActiveLights(*args): return _ivideo.iShaderManager_GetActiveLights(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iShaderManager_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iShaderManager_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShaderManager
    __del__ = lambda self : None;
iShaderManager_swigregister = _ivideo.iShaderManager_swigregister
iShaderManager_swigregister(iShaderManager)
iShaderManager_scfGetVersion = _ivideo.iShaderManager_scfGetVersion

class csShaderMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, csShaderMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, csShaderMetadata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["description"] = _ivideo.csShaderMetadata_description_set
    __swig_getmethods__["description"] = _ivideo.csShaderMetadata_description_get
    if _newclass:description = _swig_property(_ivideo.csShaderMetadata_description_get, _ivideo.csShaderMetadata_description_set)
    __swig_setmethods__["numberOfLights"] = _ivideo.csShaderMetadata_numberOfLights_set
    __swig_getmethods__["numberOfLights"] = _ivideo.csShaderMetadata_numberOfLights_get
    if _newclass:numberOfLights = _swig_property(_ivideo.csShaderMetadata_numberOfLights_get, _ivideo.csShaderMetadata_numberOfLights_set)
    def __init__(self, *args): 
        this = _ivideo.new_csShaderMetadata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ivideo.delete_csShaderMetadata
    __del__ = lambda self : None;
csShaderMetadata_swigregister = _ivideo.csShaderMetadata_swigregister
csShaderMetadata_swigregister(csShaderMetadata)

class iShader(iShaderVariableContext):
    __swig_setmethods__ = {}
    for _s in [iShaderVariableContext]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iShader, name, value)
    __swig_getmethods__ = {}
    for _s in [iShaderVariableContext]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iShader, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def QueryObject(*args): return _ivideo.iShader_QueryObject(*args)
    def GetFileName(*args): return _ivideo.iShader_GetFileName(*args)
    def SetFileName(*args): return _ivideo.iShader_SetFileName(*args)
    def GetTicket(*args): return _ivideo.iShader_GetTicket(*args)
    def GetNumberOfPasses(*args): return _ivideo.iShader_GetNumberOfPasses(*args)
    def ActivatePass(*args): return _ivideo.iShader_ActivatePass(*args)
    def SetupPass(*args): return _ivideo.iShader_SetupPass(*args)
    def TeardownPass(*args): return _ivideo.iShader_TeardownPass(*args)
    def DeactivatePass(*args): return _ivideo.iShader_DeactivatePass(*args)
    def GetMetadata(*args): return _ivideo.iShader_GetMetadata(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iShader_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iShader_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iShader
    __del__ = lambda self : None;
iShader_swigregister = _ivideo.iShader_swigregister
iShader_swigregister(iShader)
iShader_scfGetVersion = _ivideo.iShader_scfGetVersion

class iShaderPriorityList(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iShaderPriorityList, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iShaderPriorityList, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetCount(*args): return _ivideo.iShaderPriorityList_GetCount(*args)
    def GetPriority(*args): return _ivideo.iShaderPriorityList_GetPriority(*args)
    __swig_destroy__ = _ivideo.delete_iShaderPriorityList
    __del__ = lambda self : None;
iShaderPriorityList_swigregister = _ivideo.iShaderPriorityList_swigregister
iShaderPriorityList_swigregister(iShaderPriorityList)

class iShaderCompiler(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iShaderCompiler, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iShaderCompiler, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _ivideo.iShaderCompiler_GetName(*args)
    def CompileShader(*args): return _ivideo.iShaderCompiler_CompileShader(*args)
    def ValidateTemplate(*args): return _ivideo.iShaderCompiler_ValidateTemplate(*args)
    def IsTemplateToCompiler(*args): return _ivideo.iShaderCompiler_IsTemplateToCompiler(*args)
    def GetPriorities(*args): return _ivideo.iShaderCompiler_GetPriorities(*args)
    __swig_destroy__ = _ivideo.delete_iShaderCompiler
    __del__ = lambda self : None;
iShaderCompiler_swigregister = _ivideo.iShaderCompiler_swigregister
iShaderCompiler_swigregister(iShaderCompiler)

class iTextureHandle(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iTextureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iTextureHandle, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetFlags(*args): return _ivideo.iTextureHandle_GetFlags(*args)
    def SetKeyColor(*args): return _ivideo.iTextureHandle_SetKeyColor(*args)
    def GetKeyColorStatus(*args): return _ivideo.iTextureHandle_GetKeyColorStatus(*args)
    def GetKeyColor(*args): return _ivideo.iTextureHandle_GetKeyColor(*args)
    CS_TEX_IMG_1D = _ivideo.iTextureHandle_CS_TEX_IMG_1D
    CS_TEX_IMG_2D = _ivideo.iTextureHandle_CS_TEX_IMG_2D
    CS_TEX_IMG_3D = _ivideo.iTextureHandle_CS_TEX_IMG_3D
    CS_TEX_IMG_CUBEMAP = _ivideo.iTextureHandle_CS_TEX_IMG_CUBEMAP
    CS_TEX_IMG_RECT = _ivideo.iTextureHandle_CS_TEX_IMG_RECT
    CS_TEXTURE_CUBE_POS_X = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_X
    CS_TEXTURE_CUBE_NEG_X = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_X
    CS_TEXTURE_CUBE_POS_Y = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_Y
    CS_TEXTURE_CUBE_NEG_Y = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_Y
    CS_TEXTURE_CUBE_POS_Z = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_POS_Z
    CS_TEXTURE_CUBE_NEG_Z = _ivideo.iTextureHandle_CS_TEXTURE_CUBE_NEG_Z
    def GetRendererDimensions(*args): return _ivideo.iTextureHandle_GetRendererDimensions(*args)
    def GetOriginalDimensions(*args): return _ivideo.iTextureHandle_GetOriginalDimensions(*args)
    def GetTextureTarget(*args): return _ivideo.iTextureHandle_GetTextureTarget(*args)
    RGBA8888 = _ivideo.iTextureHandle_RGBA8888
    BGRA8888 = _ivideo.iTextureHandle_BGRA8888
    def Blit(*args): return _ivideo.iTextureHandle_Blit(*args)
    def GetImageName(*args): return _ivideo.iTextureHandle_GetImageName(*args)
    def GetPrivateObject(*args): return _ivideo.iTextureHandle_GetPrivateObject(*args)
    def GetAlphaMap(*args): return _ivideo.iTextureHandle_GetAlphaMap(*args)
    def GetAlphaType(*args): return _ivideo.iTextureHandle_GetAlphaType(*args)
    def Precache(*args): return _ivideo.iTextureHandle_Precache(*args)
    def SetTextureClass(*args): return _ivideo.iTextureHandle_SetTextureClass(*args)
    def GetTextureClass(*args): return _ivideo.iTextureHandle_GetTextureClass(*args)
    def SetAlphaType(*args): return _ivideo.iTextureHandle_SetAlphaType(*args)
    texType1D = _ivideo.iTextureHandle_texType1D
    texType2D = _ivideo.iTextureHandle_texType2D
    texType3D = _ivideo.iTextureHandle_texType3D
    texTypeCube = _ivideo.iTextureHandle_texTypeCube
    texTypeRect = _ivideo.iTextureHandle_texTypeRect
    def GetTextureType(*args): return _ivideo.iTextureHandle_GetTextureType(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iTextureHandle_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iTextureHandle_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iTextureHandle
    __del__ = lambda self : None;
iTextureHandle_swigregister = _ivideo.iTextureHandle_swigregister
iTextureHandle_swigregister(iTextureHandle)
iTextureHandle_scfGetVersion = _ivideo.iTextureHandle_scfGetVersion

CS_TEXTURE_2D = _ivideo.CS_TEXTURE_2D
CS_TEXTURE_3D = _ivideo.CS_TEXTURE_3D
CS_TEXTURE_NOMIPMAPS = _ivideo.CS_TEXTURE_NOMIPMAPS
CS_TEXTURE_CLAMP = _ivideo.CS_TEXTURE_CLAMP
CS_TEXTURE_NOFILTER = _ivideo.CS_TEXTURE_NOFILTER
CS_TEXTURE_NPOTS = _ivideo.CS_TEXTURE_NPOTS
CS_TEXTURE_SCALE_UP = _ivideo.CS_TEXTURE_SCALE_UP
CS_TEXTURE_SCALE_DOWN = _ivideo.CS_TEXTURE_SCALE_DOWN
class iRendererLightmap(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iRendererLightmap, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iRendererLightmap, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSLMCoords(*args): return _ivideo.iRendererLightmap_GetSLMCoords(*args)
    def SetData(*args): return _ivideo.iRendererLightmap_SetData(*args)
    def SetLightCellSize(*args): return _ivideo.iRendererLightmap_SetLightCellSize(*args)
    __swig_destroy__ = _ivideo.delete_iRendererLightmap
    __del__ = lambda self : None;
iRendererLightmap_swigregister = _ivideo.iRendererLightmap_swigregister
iRendererLightmap_swigregister(iRendererLightmap)

class iSuperLightmap(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iSuperLightmap, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iSuperLightmap, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def RegisterLightmap(*args): return _ivideo.iSuperLightmap_RegisterLightmap(*args)
    def Dump(*args): return _ivideo.iSuperLightmap_Dump(*args)
    def GetTexture(*args): return _ivideo.iSuperLightmap_GetTexture(*args)
    __swig_destroy__ = _ivideo.delete_iSuperLightmap
    __del__ = lambda self : None;
iSuperLightmap_swigregister = _ivideo.iSuperLightmap_swigregister
iSuperLightmap_swigregister(iSuperLightmap)

class iTextureManager(core.iBase):
    __swig_setmethods__ = {}
    for _s in [core.iBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iTextureManager, name, value)
    __swig_getmethods__ = {}
    for _s in [core.iBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iTextureManager, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def RegisterTexture(*args): return _ivideo.iTextureManager_RegisterTexture(*args)
    def CreateTexture(*args): return _ivideo.iTextureManager_CreateTexture(*args)
    def GetTextureFormat(*args): return _ivideo.iTextureManager_GetTextureFormat(*args)
    def CreateSuperLightmap(*args): return _ivideo.iTextureManager_CreateSuperLightmap(*args)
    def GetMaxTextureSize(*args): return _ivideo.iTextureManager_GetMaxTextureSize(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iTextureManager_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iTextureManager_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iTextureManager
    __del__ = lambda self : None;
iTextureManager_swigregister = _ivideo.iTextureManager_swigregister
iTextureManager_swigregister(iTextureManager)
iTextureManager_scfGetVersion = _ivideo.iTextureManager_scfGetVersion

CS_MATERIAL_VARNAME_FLATCOLOR = _ivideo.CS_MATERIAL_VARNAME_FLATCOLOR
CS_MATERIAL_TEXTURE_DIFFUSE = _ivideo.CS_MATERIAL_TEXTURE_DIFFUSE
class iMaterial(iShaderVariableContext):
    __swig_setmethods__ = {}
    for _s in [iShaderVariableContext]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [iShaderVariableContext]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iMaterial, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetShader(*args): return _ivideo.iMaterial_SetShader(*args)
    def GetShader(*args): return _ivideo.iMaterial_GetShader(*args)
    def GetShaders(*args): return _ivideo.iMaterial_GetShaders(*args)
    def GetTexture(*args): return _ivideo.iMaterial_GetTexture(*args)
    __swig_getmethods__["scfGetVersion"] = lambda x: _ivideo.iMaterial_scfGetVersion
    if _newclass:scfGetVersion = staticmethod(_ivideo.iMaterial_scfGetVersion)
    __swig_destroy__ = _ivideo.delete_iMaterial
    __del__ = lambda self : None;
iMaterial_swigregister = _ivideo.iMaterial_swigregister
iMaterial_swigregister(iMaterial)
iMaterial_scfGetVersion = _ivideo.iMaterial_scfGetVersion

CS_FX_SETALPHA = _ivideo.CS_FX_SETALPHA
CS_FX_SETALPHA_INT = _ivideo.CS_FX_SETALPHA_INT
CS_REQUEST_PLUGIN = core.CS_REQUEST_PLUGIN
def CS_REQUEST_NULL3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.null", iGraphics3D)

def CS_REQUEST_SOFTWARE3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.software", iGraphics3D)

def CS_REQUEST_OPENGL3D ():
  return CS_REQUEST_PLUGIN("crystalspace.graphics3d.opengl", iGraphics3D)

def CS_REQUEST_FONTSERVER ():
  return CS_REQUEST_PLUGIN("crystalspace.font.server.default", iFontServer)




