# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_imap', [dirname(__file__)])
        except ImportError:
            import _imap
            return _imap
        if fp is not None:
            try:
                _mod = imp.load_module('_imap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _imap = swig_import_helper()
    del swig_import_helper
else:
    import _imap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
import iengine
import ivideo
import csgfx
import isndsys

def _SetSCFPointer(*args):
  return _imap._SetSCFPointer(*args)
_SetSCFPointer = _imap._SetSCFPointer

def _GetSCFPointer():
  return _imap._GetSCFPointer()
_GetSCFPointer = _imap._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

KEEP_ALL = _imap.KEEP_ALL
KEEP_USED = _imap.KEEP_USED
class iMissingLoaderData(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def MissingMaterial(self, *args): return _imap.iMissingLoaderData_MissingMaterial(self, *args)
    def MissingTexture(self, *args): return _imap.iMissingLoaderData_MissingTexture(self, *args)
    def MissingShader(self, *args): return _imap.iMissingLoaderData_MissingShader(self, *args)
    def MissingFactory(self, *args): return _imap.iMissingLoaderData_MissingFactory(self, *args)
    def MissingMesh(self, *args): return _imap.iMissingLoaderData_MissingMesh(self, *args)
    def MissingSector(self, *args): return _imap.iMissingLoaderData_MissingSector(self, *args)
    def MissingLight(self, *args): return _imap.iMissingLoaderData_MissingLight(self, *args)
    scfGetVersion = staticmethod(_imap.iMissingLoaderData_scfGetVersion)
    __swig_destroy__ = _imap.delete_iMissingLoaderData
    __del__ = lambda self : None;
iMissingLoaderData_swigregister = _imap.iMissingLoaderData_swigregister
iMissingLoaderData_swigregister(iMissingLoaderData)

def iMissingLoaderData_scfGetVersion():
  return _imap.iMissingLoaderData_scfGetVersion()
iMissingLoaderData_scfGetVersion = _imap.iMissingLoaderData_scfGetVersion

class csLoadResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    success = _swig_property(_imap.csLoadResult_success_get, _imap.csLoadResult_success_set)
    result = _swig_property(_imap.csLoadResult_result_get, _imap.csLoadResult_result_set)
    def __init__(self): 
        this = _imap.new_csLoadResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imap.delete_csLoadResult
    __del__ = lambda self : None;
csLoadResult_swigregister = _imap.csLoadResult_swigregister
csLoadResult_swigregister(csLoadResult)

class csLoaderReturn(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _imap.new_csLoaderReturn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imap.delete_csLoaderReturn
    __del__ = lambda self : None;
    def IsFinished(self): return _imap.csLoaderReturn_IsFinished(self)
    def WasSuccessful(self): return _imap.csLoaderReturn_WasSuccessful(self)
    def GetResultPtr(self): return _imap.csLoaderReturn_GetResultPtr(self)
    def GetResultRefPtr(self): return _imap.csLoaderReturn_GetResultRefPtr(self)
    def MarkFinished(self): return _imap.csLoaderReturn_MarkFinished(self)
    def MarkSuccessful(self): return _imap.csLoaderReturn_MarkSuccessful(self)
    def SetResult(self, *args): return _imap.csLoaderReturn_SetResult(self, *args)
    def Copy(self, *args): return _imap.csLoaderReturn_Copy(self, *args)
    def Wait(self, process = True): return _imap.csLoaderReturn_Wait(self, process)
    def SetWaitPtrs(self, *args): return _imap.csLoaderReturn_SetWaitPtrs(self, *args)
    def SetJob(self, *args): return _imap.csLoaderReturn_SetJob(self, *args)
    def GetJob(self): return _imap.csLoaderReturn_GetJob(self)
csLoaderReturn_swigregister = _imap.csLoaderReturn_swigregister
csLoaderReturn_swigregister(csLoaderReturn)

class iSectorLoaderIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _imap.iSectorLoaderIterator_Next(self)
    def HasNext(self): return _imap.iSectorLoaderIterator_HasNext(self)
    __swig_destroy__ = _imap.delete_iSectorLoaderIterator
    __del__ = lambda self : None;
iSectorLoaderIterator_swigregister = _imap.iSectorLoaderIterator_swigregister
iSectorLoaderIterator_swigregister(iSectorLoaderIterator)

class iMeshFactLoaderIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _imap.iMeshFactLoaderIterator_Next(self)
    def HasNext(self): return _imap.iMeshFactLoaderIterator_HasNext(self)
    __swig_destroy__ = _imap.delete_iMeshFactLoaderIterator
    __del__ = lambda self : None;
iMeshFactLoaderIterator_swigregister = _imap.iMeshFactLoaderIterator_swigregister
iMeshFactLoaderIterator_swigregister(iMeshFactLoaderIterator)

class iMeshLoaderIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _imap.iMeshLoaderIterator_Next(self)
    def HasNext(self): return _imap.iMeshLoaderIterator_HasNext(self)
    __swig_destroy__ = _imap.delete_iMeshLoaderIterator
    __del__ = lambda self : None;
iMeshLoaderIterator_swigregister = _imap.iMeshLoaderIterator_swigregister
iMeshLoaderIterator_swigregister(iMeshLoaderIterator)

class iCamposLoaderIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _imap.iCamposLoaderIterator_Next(self)
    def HasNext(self): return _imap.iCamposLoaderIterator_HasNext(self)
    __swig_destroy__ = _imap.delete_iCamposLoaderIterator
    __del__ = lambda self : None;
iCamposLoaderIterator_swigregister = _imap.iCamposLoaderIterator_swigregister
iCamposLoaderIterator_swigregister(iCamposLoaderIterator)

class iTextureLoaderIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _imap.iTextureLoaderIterator_Next(self)
    def HasNext(self): return _imap.iTextureLoaderIterator_HasNext(self)
    __swig_destroy__ = _imap.delete_iTextureLoaderIterator
    __del__ = lambda self : None;
iTextureLoaderIterator_swigregister = _imap.iTextureLoaderIterator_swigregister
iTextureLoaderIterator_swigregister(iTextureLoaderIterator)

class iMaterialLoaderIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _imap.iMaterialLoaderIterator_Next(self)
    def HasNext(self): return _imap.iMaterialLoaderIterator_HasNext(self)
    __swig_destroy__ = _imap.delete_iMaterialLoaderIterator
    __del__ = lambda self : None;
iMaterialLoaderIterator_swigregister = _imap.iMaterialLoaderIterator_swigregister
iMaterialLoaderIterator_swigregister(iMaterialLoaderIterator)

class iSharedVarLoaderIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _imap.iSharedVarLoaderIterator_Next(self)
    def HasNext(self): return _imap.iSharedVarLoaderIterator_HasNext(self)
    __swig_destroy__ = _imap.delete_iSharedVarLoaderIterator
    __del__ = lambda self : None;
iSharedVarLoaderIterator_swigregister = _imap.iSharedVarLoaderIterator_swigregister
iSharedVarLoaderIterator_swigregister(iSharedVarLoaderIterator)

CS_LOADER_NONE = _imap.CS_LOADER_NONE
CS_LOADER_CREATE_DUMMY_MATS = _imap.CS_LOADER_CREATE_DUMMY_MATS
class iThreadedLoader(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetLoaderSectors(self): return _imap.iThreadedLoader_GetLoaderSectors(self)
    def GetLoaderMeshFactories(self): return _imap.iThreadedLoader_GetLoaderMeshFactories(self)
    def GetLoaderMeshes(self): return _imap.iThreadedLoader_GetLoaderMeshes(self)
    def GetLoaderCameraPositions(self): return _imap.iThreadedLoader_GetLoaderCameraPositions(self)
    def GetLoaderTextures(self): return _imap.iThreadedLoader_GetLoaderTextures(self)
    def GetLoaderMaterials(self): return _imap.iThreadedLoader_GetLoaderMaterials(self)
    def GetLoaderSharedVariables(self): return _imap.iThreadedLoader_GetLoaderSharedVariables(self)
    def LoadImage(self, *args): return _imap.iThreadedLoader_LoadImage(self, *args)
    def LoadImageWait(self, *args): return _imap.iThreadedLoader_LoadImageWait(self, *args)
    def LoadTexture(self, *args): return _imap.iThreadedLoader_LoadTexture(self, *args)
    def LoadTextureWait(self, *args): return _imap.iThreadedLoader_LoadTextureWait(self, *args)
    def LoadSoundSysData(self, *args): return _imap.iThreadedLoader_LoadSoundSysData(self, *args)
    def LoadSoundSysDataWait(self, *args): return _imap.iThreadedLoader_LoadSoundSysDataWait(self, *args)
    def LoadSoundStream(self, *args): return _imap.iThreadedLoader_LoadSoundStream(self, *args)
    def LoadSoundStreamWait(self, *args): return _imap.iThreadedLoader_LoadSoundStreamWait(self, *args)
    def LoadSoundWrapper(self, *args): return _imap.iThreadedLoader_LoadSoundWrapper(self, *args)
    def LoadSoundWrapperWait(self, *args): return _imap.iThreadedLoader_LoadSoundWrapperWait(self, *args)
    def LoadMeshObjectFactory(self, *args): return _imap.iThreadedLoader_LoadMeshObjectFactory(self, *args)
    def LoadMeshObjectFactoryWait(self, *args): return _imap.iThreadedLoader_LoadMeshObjectFactoryWait(self, *args)
    def LoadMeshObject(self, *args): return _imap.iThreadedLoader_LoadMeshObject(self, *args)
    def LoadMeshObjectWait(self, *args): return _imap.iThreadedLoader_LoadMeshObjectWait(self, *args)
    def LoadShader(self, *args): return _imap.iThreadedLoader_LoadShader(self, *args)
    def LoadShaderWait(self, *args): return _imap.iThreadedLoader_LoadShaderWait(self, *args)
    def LoadMapFile(self, *args): return _imap.iThreadedLoader_LoadMapFile(self, *args)
    def LoadMapFileWait(self, *args): return _imap.iThreadedLoader_LoadMapFileWait(self, *args)
    def LoadMap(self, *args): return _imap.iThreadedLoader_LoadMap(self, *args)
    def LoadMapWait(self, *args): return _imap.iThreadedLoader_LoadMapWait(self, *args)
    def LoadLibraryFile(self, *args): return _imap.iThreadedLoader_LoadLibraryFile(self, *args)
    def LoadLibraryFileWait(self, *args): return _imap.iThreadedLoader_LoadLibraryFileWait(self, *args)
    def LoadLibrary(self, *args): return _imap.iThreadedLoader_LoadLibrary(self, *args)
    def LoadLibraryWait(self, *args): return _imap.iThreadedLoader_LoadLibraryWait(self, *args)
    def LoadFile(self, *args): return _imap.iThreadedLoader_LoadFile(self, *args)
    def LoadFileWait(self, *args): return _imap.iThreadedLoader_LoadFileWait(self, *args)
    def LoadBuffer(self, *args): return _imap.iThreadedLoader_LoadBuffer(self, *args)
    def LoadBufferWait(self, *args): return _imap.iThreadedLoader_LoadBufferWait(self, *args)
    def LoadNode(self, *args): return _imap.iThreadedLoader_LoadNode(self, *args)
    def LoadNodeWait(self, *args): return _imap.iThreadedLoader_LoadNodeWait(self, *args)
    def AddSectorToList(self, *args): return _imap.iThreadedLoader_AddSectorToList(self, *args)
    def AddMeshFactToList(self, *args): return _imap.iThreadedLoader_AddMeshFactToList(self, *args)
    def AddMeshToList(self, *args): return _imap.iThreadedLoader_AddMeshToList(self, *args)
    def AddCamposToList(self, *args): return _imap.iThreadedLoader_AddCamposToList(self, *args)
    def AddTextureToList(self, *args): return _imap.iThreadedLoader_AddTextureToList(self, *args)
    def AddMaterialToList(self, *args): return _imap.iThreadedLoader_AddMaterialToList(self, *args)
    def AddSharedVarToList(self, *args): return _imap.iThreadedLoader_AddSharedVarToList(self, *args)
    def MarkSyncDone(self): return _imap.iThreadedLoader_MarkSyncDone(self)
    def GetFlags(self): return _imap.iThreadedLoader_GetFlags(self)
    def SetFlags(self, *args): return _imap.iThreadedLoader_SetFlags(self, *args)
    __swig_destroy__ = _imap.delete_iThreadedLoader
    __del__ = lambda self : None;
iThreadedLoader_swigregister = _imap.iThreadedLoader_swigregister
iThreadedLoader_swigregister(iThreadedLoader)

class iLoader(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def LoadSoundSysData(self, *args): return _imap.iLoader_LoadSoundSysData(self, *args)
    def LoadSoundStream(self, *args): return _imap.iLoader_LoadSoundStream(self, *args)
    def LoadSoundWrapper(self, *args): return _imap.iLoader_LoadSoundWrapper(self, *args)
    def LoadImage(self, *args): return _imap.iLoader_LoadImage(self, *args)
    def LoadMeshObjectFactory(self, *args): return _imap.iLoader_LoadMeshObjectFactory(self, *args)
    def LoadMeshObject(self, *args): return _imap.iLoader_LoadMeshObject(self, *args)
    def LoadShader(self, *args): return _imap.iLoader_LoadShader(self, *args)
    def LoadTexture(self, *args): return _imap.iLoader_LoadTexture(self, *args)
    def LoadMapFile(self, *args): return _imap.iLoader_LoadMapFile(self, *args)
    def LoadMap(self, *args): return _imap.iLoader_LoadMap(self, *args)
    def LoadLibraryFile(self, *args): return _imap.iLoader_LoadLibraryFile(self, *args)
    def LoadLibrary(self, *args): return _imap.iLoader_LoadLibrary(self, *args)
    def Load(self, *args): return _imap.iLoader_Load(self, *args)
    scfGetVersion = staticmethod(_imap.iLoader_scfGetVersion)
    __swig_destroy__ = _imap.delete_iLoader
    __del__ = lambda self : None;
iLoader_swigregister = _imap.iLoader_swigregister
iLoader_swigregister(iLoader)

def iLoader_scfGetVersion():
  return _imap.iLoader_scfGetVersion()
iLoader_scfGetVersion = _imap.iLoader_scfGetVersion

class iLoaderPlugin(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Parse(self, *args): return _imap.iLoaderPlugin_Parse(self, *args)
    def IsThreadSafe(self): return _imap.iLoaderPlugin_IsThreadSafe(self)
    scfGetVersion = staticmethod(_imap.iLoaderPlugin_scfGetVersion)
    __swig_destroy__ = _imap.delete_iLoaderPlugin
    __del__ = lambda self : None;
iLoaderPlugin_swigregister = _imap.iLoaderPlugin_swigregister
iLoaderPlugin_swigregister(iLoaderPlugin)

def iLoaderPlugin_scfGetVersion():
  return _imap.iLoaderPlugin_scfGetVersion()
iLoaderPlugin_scfGetVersion = _imap.iLoaderPlugin_scfGetVersion

class iBinaryLoaderPlugin(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Parse(self, *args): return _imap.iBinaryLoaderPlugin_Parse(self, *args)
    def IsThreadSafe(self): return _imap.iBinaryLoaderPlugin_IsThreadSafe(self)
    scfGetVersion = staticmethod(_imap.iBinaryLoaderPlugin_scfGetVersion)
    __swig_destroy__ = _imap.delete_iBinaryLoaderPlugin
    __del__ = lambda self : None;
iBinaryLoaderPlugin_swigregister = _imap.iBinaryLoaderPlugin_swigregister
iBinaryLoaderPlugin_swigregister(iBinaryLoaderPlugin)

def iBinaryLoaderPlugin_scfGetVersion():
  return _imap.iBinaryLoaderPlugin_scfGetVersion()
iBinaryLoaderPlugin_scfGetVersion = _imap.iBinaryLoaderPlugin_scfGetVersion

class iSaver(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SaveMapFile(self, *args): return _imap.iSaver_SaveMapFile(self, *args)
    def SaveAllCollections(self): return _imap.iSaver_SaveAllCollections(self)
    def SaveCollectionFile(self, *args): return _imap.iSaver_SaveCollectionFile(self, *args)
    def SaveCollection(self, *args): return _imap.iSaver_SaveCollection(self, *args)
    def SavePortal(self, *args): return _imap.iSaver_SavePortal(self, *args)
    def SaveCameraPosition(self, *args): return _imap.iSaver_SaveCameraPosition(self, *args)
    __swig_destroy__ = _imap.delete_iSaver
    __del__ = lambda self : None;
iSaver_swigregister = _imap.iSaver_swigregister
iSaver_swigregister(iSaver)

def CS_REQUEST_LEVELLOADER ():
  return core.CS_REQUEST_PLUGIN("crystalspace.level.loader", iLoader)



