# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_iengine', [dirname(__file__)])
        except ImportError:
            import _iengine
            return _iengine
        if fp is not None:
            try:
                _mod = imp.load_module('_iengine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _iengine = swig_import_helper()
    del swig_import_helper
else:
    import _iengine
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
import ivideo
import csgfx

def _SetSCFPointer(*args):
  return _iengine._SetSCFPointer(*args)
_SetSCFPointer = _iengine._SetSCFPointer

def _GetSCFPointer():
  return _iengine._GetSCFPointer()
_GetSCFPointer = _iengine._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

CS_LIGHT_NOSHADOWS = _iengine.CS_LIGHT_NOSHADOWS
CS_LIGHT_ACTIVEHALO = _iengine.CS_LIGHT_ACTIVEHALO
CS_LIGHT_DYNAMICTYPE_STATIC = _iengine.CS_LIGHT_DYNAMICTYPE_STATIC
CS_LIGHT_DYNAMICTYPE_PSEUDO = _iengine.CS_LIGHT_DYNAMICTYPE_PSEUDO
CS_LIGHT_DYNAMICTYPE_DYNAMIC = _iengine.CS_LIGHT_DYNAMICTYPE_DYNAMIC
CS_DEFAULT_LIGHT_LEVEL = _iengine.CS_DEFAULT_LIGHT_LEVEL
CS_NORMAL_LIGHT_LEVEL = _iengine.CS_NORMAL_LIGHT_LEVEL
CS_ATTN_NONE = _iengine.CS_ATTN_NONE
CS_ATTN_LINEAR = _iengine.CS_ATTN_LINEAR
CS_ATTN_INVERSE = _iengine.CS_ATTN_INVERSE
CS_ATTN_REALISTIC = _iengine.CS_ATTN_REALISTIC
CS_ATTN_CLQ = _iengine.CS_ATTN_CLQ
CS_LIGHT_POINTLIGHT = _iengine.CS_LIGHT_POINTLIGHT
CS_LIGHT_DIRECTIONAL = _iengine.CS_LIGHT_DIRECTIONAL
CS_LIGHT_SPOTLIGHT = _iengine.CS_LIGHT_SPOTLIGHT
class iLightCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def OnColorChange(self, *args): return _iengine.iLightCallback_OnColorChange(self, *args)
    def OnPositionChange(self, *args): return _iengine.iLightCallback_OnPositionChange(self, *args)
    def OnSectorChange(self, *args): return _iengine.iLightCallback_OnSectorChange(self, *args)
    def OnRadiusChange(self, *args): return _iengine.iLightCallback_OnRadiusChange(self, *args)
    def OnDestroy(self, *args): return _iengine.iLightCallback_OnDestroy(self, *args)
    def OnAttenuationChange(self, *args): return _iengine.iLightCallback_OnAttenuationChange(self, *args)
    __swig_destroy__ = _iengine.delete_iLightCallback
    __del__ = lambda self : None;
iLightCallback_swigregister = _iengine.iLightCallback_swigregister
iLightCallback_swigregister(iLightCallback)

class iLight(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetLightID(self): return _iengine.iLight_GetLightID(self)
    def QueryObject(self): return _iengine.iLight_QueryObject(self)
    def GetDynamicType(self): return _iengine.iLight_GetDynamicType(self)
    def GetCenter(self): return _iengine.iLight_GetCenter(self)
    def GetFullCenter(self): return _iengine.iLight_GetFullCenter(self)
    def SetCenter(self, *args): return _iengine.iLight_SetCenter(self, *args)
    def GetSector(self): return _iengine.iLight_GetSector(self)
    def GetMovable(self): return _iengine.iLight_GetMovable(self)
    def QuerySceneNode(self): return _iengine.iLight_QuerySceneNode(self)
    def GetColor(self): return _iengine.iLight_GetColor(self)
    def SetColor(self, *args): return _iengine.iLight_SetColor(self, *args)
    def GetSpecularColor(self): return _iengine.iLight_GetSpecularColor(self)
    def SetSpecularColor(self, *args): return _iengine.iLight_SetSpecularColor(self, *args)
    def GetType(self): return _iengine.iLight_GetType(self)
    def SetType(self, *args): return _iengine.iLight_SetType(self, *args)
    def GetAttenuationMode(self): return _iengine.iLight_GetAttenuationMode(self)
    def SetAttenuationMode(self, *args): return _iengine.iLight_SetAttenuationMode(self, *args)
    def SetAttenuationConstants(self, *args): return _iengine.iLight_SetAttenuationConstants(self, *args)
    def GetAttenuationConstants(self): return _iengine.iLight_GetAttenuationConstants(self)
    def GetCutoffDistance(self): return _iengine.iLight_GetCutoffDistance(self)
    def SetCutoffDistance(self, *args): return _iengine.iLight_SetCutoffDistance(self, *args)
    def GetDirectionalCutoffRadius(self): return _iengine.iLight_GetDirectionalCutoffRadius(self)
    def SetDirectionalCutoffRadius(self, *args): return _iengine.iLight_SetDirectionalCutoffRadius(self, *args)
    def SetSpotLightFalloff(self, *args): return _iengine.iLight_SetSpotLightFalloff(self, *args)
    def GetSpotLightFalloff(self, *args): return _iengine.iLight_GetSpotLightFalloff(self, *args)
    def CreateCrossHalo(self, *args): return _iengine.iLight_CreateCrossHalo(self, *args)
    def CreateNovaHalo(self, *args): return _iengine.iLight_CreateNovaHalo(self, *args)
    def CreateFlareHalo(self): return _iengine.iLight_CreateFlareHalo(self)
    def GetHalo(self): return _iengine.iLight_GetHalo(self)
    def GetBrightnessAtDistance(self, *args): return _iengine.iLight_GetBrightnessAtDistance(self, *args)
    def GetFlags(self): return _iengine.iLight_GetFlags(self)
    def SetLightCallback(self, *args): return _iengine.iLight_SetLightCallback(self, *args)
    def RemoveLightCallback(self, *args): return _iengine.iLight_RemoveLightCallback(self, *args)
    def GetLightCallbackCount(self): return _iengine.iLight_GetLightCallbackCount(self)
    def GetLightCallback(self, *args): return _iengine.iLight_GetLightCallback(self, *args)
    def GetLightNumber(self): return _iengine.iLight_GetLightNumber(self)
    def GetSVContext(self): return _iengine.iLight_GetSVContext(self)
    def GetLocalBBox(self): return _iengine.iLight_GetLocalBBox(self)
    def GetWorldBBox(self): return _iengine.iLight_GetWorldBBox(self)
    scfGetVersion = staticmethod(_iengine.iLight_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iLight
    __del__ = lambda self : None;
iLight_swigregister = _iengine.iLight_swigregister
iLight_swigregister(iLight)

def iLight_scfGetVersion():
  return _iengine.iLight_scfGetVersion()
iLight_scfGetVersion = _iengine.iLight_scfGetVersion

class iLightList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCount(self): return _iengine.iLightList_GetCount(self)
    def Get(self, *args): return _iengine.iLightList_Get(self, *args)
    def Add(self, *args): return _iengine.iLightList_Add(self, *args)
    def Remove(self, *args): return _iengine.iLightList_Remove(self, *args)
    def RemoveAll(self): return _iengine.iLightList_RemoveAll(self)
    def Find(self, *args): return _iengine.iLightList_Find(self, *args)
    def FindByName(self, *args): return _iengine.iLightList_FindByName(self, *args)
    def FindByID(self, *args): return _iengine.iLightList_FindByID(self, *args)
    def __delitem__(self, *args): return _iengine.iLightList___delitem__(self, *args)
    def __len__(self): return _iengine.iLightList___len__(self)
    def append(self, *args): return _iengine.iLightList_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(self, *args): return _iengine.iLightList___getitem__(self, *args)
    def __contains__(self, *args): return _iengine.iLightList___contains__(self, *args)
    scfGetVersion = staticmethod(_iengine.iLightList_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iLightList
    __del__ = lambda self : None;
iLightList_swigregister = _iengine.iLightList_swigregister
iLightList_swigregister(iLightList)

def iLightList_scfGetVersion():
  return _iengine.iLightList_scfGetVersion()
iLightList_scfGetVersion = _iengine.iLightList_scfGetVersion

class iLightIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _iengine.iLightIterator_HasNext(self)
    def Next(self): return _iengine.iLightIterator_Next(self)
    def GetLastSector(self): return _iengine.iLightIterator_GetLastSector(self)
    def Reset(self): return _iengine.iLightIterator_Reset(self)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    scfGetVersion = staticmethod(_iengine.iLightIterator_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iLightIterator
    __del__ = lambda self : None;
iLightIterator_swigregister = _iengine.iLightIterator_swigregister
iLightIterator_swigregister(iLightIterator)

def iLightIterator_scfGetVersion():
  return _iengine.iLightIterator_scfGetVersion()
iLightIterator_scfGetVersion = _iengine.iLightIterator_scfGetVersion

CS_FOG_MODE_NONE = _iengine.CS_FOG_MODE_NONE
CS_FOG_MODE_LINEAR_CRYSTALSPACE = _iengine.CS_FOG_MODE_LINEAR_CRYSTALSPACE
CS_FOG_MODE_CRYSTALSPACE = _iengine.CS_FOG_MODE_CRYSTALSPACE
CS_FOG_MODE_EXP = _iengine.CS_FOG_MODE_EXP
CS_FOG_MODE_EXP2 = _iengine.CS_FOG_MODE_EXP2
CS_FOG_MODE_LINEAR = _iengine.CS_FOG_MODE_LINEAR
class csFog(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    density = _swig_property(_iengine.csFog_density_get, _iengine.csFog_density_set)
    color = _swig_property(_iengine.csFog_color_get, _iengine.csFog_color_set)
    start = _swig_property(_iengine.csFog_start_get, _iengine.csFog_start_set)
    end = _swig_property(_iengine.csFog_end_get, _iengine.csFog_end_set)
    limit = _swig_property(_iengine.csFog_limit_get, _iengine.csFog_limit_set)
    mode = _swig_property(_iengine.csFog_mode_get, _iengine.csFog_mode_set)
    def __init__(self): 
        this = _iengine.new_csFog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iengine.delete_csFog
    __del__ = lambda self : None;
csFog_swigregister = _iengine.csFog_swigregister
csFog_swigregister(csFog)

class iSectorCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Traverse(self, *args): return _iengine.iSectorCallback_Traverse(self, *args)
    __swig_destroy__ = _iengine.delete_iSectorCallback
    __del__ = lambda self : None;
iSectorCallback_swigregister = _iengine.iSectorCallback_swigregister
iSectorCallback_swigregister(iSectorCallback)

class iSectorMeshCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewMesh(self, *args): return _iengine.iSectorMeshCallback_NewMesh(self, *args)
    def RemoveMesh(self, *args): return _iengine.iSectorMeshCallback_RemoveMesh(self, *args)
    __swig_destroy__ = _iengine.delete_iSectorMeshCallback
    __del__ = lambda self : None;
iSectorMeshCallback_swigregister = _iengine.iSectorMeshCallback_swigregister
iSectorMeshCallback_swigregister(iSectorMeshCallback)

class iLightVisibleCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def LightVisible(self, *args): return _iengine.iLightVisibleCallback_LightVisible(self, *args)
    __swig_destroy__ = _iengine.delete_iLightVisibleCallback
    __del__ = lambda self : None;
iLightVisibleCallback_swigregister = _iengine.iLightVisibleCallback_swigregister
iLightVisibleCallback_swigregister(iLightVisibleCallback)

class csSectorHitBeamResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mesh = _swig_property(_iengine.csSectorHitBeamResult_mesh_get, _iengine.csSectorHitBeamResult_mesh_set)
    isect = _swig_property(_iengine.csSectorHitBeamResult_isect_get, _iengine.csSectorHitBeamResult_isect_set)
    polygon_idx = _swig_property(_iengine.csSectorHitBeamResult_polygon_idx_get, _iengine.csSectorHitBeamResult_polygon_idx_set)
    final_sector = _swig_property(_iengine.csSectorHitBeamResult_final_sector_get, _iengine.csSectorHitBeamResult_final_sector_set)
    def __init__(self): 
        this = _iengine.new_csSectorHitBeamResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iengine.delete_csSectorHitBeamResult
    __del__ = lambda self : None;
csSectorHitBeamResult_swigregister = _iengine.csSectorHitBeamResult_swigregister
csSectorHitBeamResult_swigregister(csSectorHitBeamResult)

class csSectorVisibleRenderMeshes(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    imesh = _swig_property(_iengine.csSectorVisibleRenderMeshes_imesh_get, _iengine.csSectorVisibleRenderMeshes_imesh_set)
    num = _swig_property(_iengine.csSectorVisibleRenderMeshes_num_get, _iengine.csSectorVisibleRenderMeshes_num_set)
    rmeshes = _swig_property(_iengine.csSectorVisibleRenderMeshes_rmeshes_get, _iengine.csSectorVisibleRenderMeshes_rmeshes_set)
    def __init__(self): 
        this = _iengine.new_csSectorVisibleRenderMeshes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iengine.delete_csSectorVisibleRenderMeshes
    __del__ = lambda self : None;
csSectorVisibleRenderMeshes_swigregister = _iengine.csSectorVisibleRenderMeshes_swigregister
csSectorVisibleRenderMeshes_swigregister(csSectorVisibleRenderMeshes)

class iSector(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iSector_QueryObject(self)
    def GetMeshes(self): return _iengine.iSector_GetMeshes(self)
    def GetVisibleMeshes(self, *args): return _iengine.iSector_GetVisibleMeshes(self, *args)
    def GetPortalMeshes(self): return _iengine.iSector_GetPortalMeshes(self)
    def UnlinkObjects(self): return _iengine.iSector_UnlinkObjects(self)
    def AddSectorMeshCallback(self, *args): return _iengine.iSector_AddSectorMeshCallback(self, *args)
    def RemoveSectorMeshCallback(self, *args): return _iengine.iSector_RemoveSectorMeshCallback(self, *args)
    def Draw(self, *args): return _iengine.iSector_Draw(self, *args)
    def PrepareDraw(self, *args): return _iengine.iSector_PrepareDraw(self, *args)
    def GetRecLevel(self): return _iengine.iSector_GetRecLevel(self)
    def IncRecLevel(self): return _iengine.iSector_IncRecLevel(self)
    def DecRecLevel(self): return _iengine.iSector_DecRecLevel(self)
    def SetRenderLoop(self, *args): return _iengine.iSector_SetRenderLoop(self, *args)
    def SetRenderLoopWait(self, *args): return _iengine.iSector_SetRenderLoopWait(self, *args)
    def GetRenderLoop(self): return _iengine.iSector_GetRenderLoop(self)
    def CreateMeshGenerator(self, *args): return _iengine.iSector_CreateMeshGenerator(self, *args)
    def GetMeshGeneratorCount(self): return _iengine.iSector_GetMeshGeneratorCount(self)
    def GetMeshGenerator(self, *args): return _iengine.iSector_GetMeshGenerator(self, *args)
    def GetMeshGeneratorByName(self, *args): return _iengine.iSector_GetMeshGeneratorByName(self, *args)
    def RemoveMeshGenerator(self, *args): return _iengine.iSector_RemoveMeshGenerator(self, *args)
    def RemoveMeshGenerators(self): return _iengine.iSector_RemoveMeshGenerators(self)
    def HasFog(self): return _iengine.iSector_HasFog(self)
    def GetFog(self): return _iengine.iSector_GetFog(self)
    def SetFog(self, *args): return _iengine.iSector_SetFog(self, *args)
    def DisableFog(self): return _iengine.iSector_DisableFog(self)
    def GetLights(self): return _iengine.iSector_GetLights(self)
    def AddLight(self, *args): return _iengine.iSector_AddLight(self, *args)
    def AddLightWait(self, *args): return _iengine.iSector_AddLightWait(self, *args)
    def SetDynamicAmbientLight(self, *args): return _iengine.iSector_SetDynamicAmbientLight(self, *args)
    def GetDynamicAmbientLight(self): return _iengine.iSector_GetDynamicAmbientLight(self)
    def GetDynamicAmbientVersion(self): return _iengine.iSector_GetDynamicAmbientVersion(self)
    def CalculateSectorBBox(self, *args): return _iengine.iSector_CalculateSectorBBox(self, *args)
    def SetVisibilityCullerPlugin(self, *args): return _iengine.iSector_SetVisibilityCullerPlugin(self, *args)
    def GetVisibilityCuller(self): return _iengine.iSector_GetVisibilityCuller(self)
    def HitBeamPortals(self, *args): return _iengine.iSector_HitBeamPortals(self, *args)
    def HitBeam(self, *args): return _iengine.iSector_HitBeam(self, *args)
    def FollowSegment(self, *args): return _iengine.iSector_FollowSegment(self, *args)
    def SetSectorCallback(self, *args): return _iengine.iSector_SetSectorCallback(self, *args)
    def SetSectorCallbackWait(self, *args): return _iengine.iSector_SetSectorCallbackWait(self, *args)
    def RemoveSectorCallback(self, *args): return _iengine.iSector_RemoveSectorCallback(self, *args)
    def RemoveSectorCallbackWait(self, *args): return _iengine.iSector_RemoveSectorCallbackWait(self, *args)
    def GetSectorCallbackCount(self): return _iengine.iSector_GetSectorCallbackCount(self)
    def GetSectorCallback(self, *args): return _iengine.iSector_GetSectorCallback(self, *args)
    def SetLightCulling(self, *args): return _iengine.iSector_SetLightCulling(self, *args)
    def IsLightCullingEnabled(self): return _iengine.iSector_IsLightCullingEnabled(self)
    def AddLightVisibleCallback(self, *args): return _iengine.iSector_AddLightVisibleCallback(self, *args)
    def RemoveLightVisibleCallback(self, *args): return _iengine.iSector_RemoveLightVisibleCallback(self, *args)
    def GetSVContext(self): return _iengine.iSector_GetSVContext(self)
    def PrecacheDraw(self): return _iengine.iSector_PrecacheDraw(self)
    def CallSectorCallbacks(self, *args): return _iengine.iSector_CallSectorCallbacks(self, *args)
    def GetVisibleRenderMeshes(self, *args): return _iengine.iSector_GetVisibleRenderMeshes(self, *args)
    scfGetVersion = staticmethod(_iengine.iSector_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iSector
    __del__ = lambda self : None;
iSector_swigregister = _iengine.iSector_swigregister
iSector_swigregister(iSector)

def iSector_scfGetVersion():
  return _iengine.iSector_scfGetVersion()
iSector_scfGetVersion = _iengine.iSector_scfGetVersion

class iSectorList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCount(self): return _iengine.iSectorList_GetCount(self)
    def Get(self, *args): return _iengine.iSectorList_Get(self, *args)
    def Add(self, *args): return _iengine.iSectorList_Add(self, *args)
    def Remove(self, *args): return _iengine.iSectorList_Remove(self, *args)
    def RemoveAll(self): return _iengine.iSectorList_RemoveAll(self)
    def Find(self, *args): return _iengine.iSectorList_Find(self, *args)
    def FindByName(self, *args): return _iengine.iSectorList_FindByName(self, *args)
    def __delitem__(self, *args): return _iengine.iSectorList___delitem__(self, *args)
    def __len__(self): return _iengine.iSectorList___len__(self)
    def append(self, *args): return _iengine.iSectorList_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(self, *args): return _iengine.iSectorList___getitem__(self, *args)
    def __contains__(self, *args): return _iengine.iSectorList___contains__(self, *args)
    scfGetVersion = staticmethod(_iengine.iSectorList_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iSectorList
    __del__ = lambda self : None;
iSectorList_swigregister = _iengine.iSectorList_swigregister
iSectorList_swigregister(iSectorList)

def iSectorList_scfGetVersion():
  return _iengine.iSectorList_scfGetVersion()
iSectorList_scfGetVersion = _iengine.iSectorList_scfGetVersion

class iSectorIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _iengine.iSectorIterator_HasNext(self)
    def Next(self): return _iengine.iSectorIterator_Next(self)
    def GetLastPosition(self): return _iengine.iSectorIterator_GetLastPosition(self)
    def Reset(self): return _iengine.iSectorIterator_Reset(self)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    scfGetVersion = staticmethod(_iengine.iSectorIterator_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iSectorIterator
    __del__ = lambda self : None;
iSectorIterator_swigregister = _iengine.iSectorIterator_swigregister
iSectorIterator_swigregister(iSectorIterator)

def iSectorIterator_scfGetVersion():
  return _iengine.iSectorIterator_scfGetVersion()
iSectorIterator_scfGetVersion = _iengine.iSectorIterator_scfGetVersion

CS_RENDPRI_SORT_NONE = _iengine.CS_RENDPRI_SORT_NONE
CS_RENDPRI_SORT_BACK2FRONT = _iengine.CS_RENDPRI_SORT_BACK2FRONT
CS_RENDPRI_SORT_FRONT2BACK = _iengine.CS_RENDPRI_SORT_FRONT2BACK
rpgByLayer = _iengine.rpgByLayer
rpgByMesh = _iengine.rpgByMesh
class iEngineFrameCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def StartFrame(self, *args): return _iengine.iEngineFrameCallback_StartFrame(self, *args)
    __swig_destroy__ = _iengine.delete_iEngineFrameCallback
    __del__ = lambda self : None;
iEngineFrameCallback_swigregister = _iengine.iEngineFrameCallback_swigregister
iEngineFrameCallback_swigregister(iEngineFrameCallback)

class iEngineSectorCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewSector(self, *args): return _iengine.iEngineSectorCallback_NewSector(self, *args)
    def RemoveSector(self, *args): return _iengine.iEngineSectorCallback_RemoveSector(self, *args)
    __swig_destroy__ = _iengine.delete_iEngineSectorCallback
    __del__ = lambda self : None;
iEngineSectorCallback_swigregister = _iengine.iEngineSectorCallback_swigregister
iEngineSectorCallback_swigregister(iEngineSectorCallback)

class iEngine(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iEngine_QueryObject(self)
    def Prepare(self, meter = None): return _iengine.iEngine_Prepare(self, meter)
    def PrepareTextures(self): return _iengine.iEngine_PrepareTextures(self)
    def PrepareMeshes(self): return _iengine.iEngine_PrepareMeshes(self)
    def SetCacheManager(self, *args): return _iengine.iEngine_SetCacheManager(self, *args)
    def SetVFSCacheManager(self, vfspath = None): return _iengine.iEngine_SetVFSCacheManager(self, vfspath)
    def GetCacheManager(self): return _iengine.iEngine_GetCacheManager(self)
    def RegisterRenderPriority(self, *args): return _iengine.iEngine_RegisterRenderPriority(self, *args)
    def RegisterDefaultRenderPriorities(self): return _iengine.iEngine_RegisterDefaultRenderPriorities(self)
    def GetRenderPriority(self, *args): return _iengine.iEngine_GetRenderPriority(self, *args)
    def GetRenderPrioritySorting(self, *args): return _iengine.iEngine_GetRenderPrioritySorting(self, *args)
    def GetRenderPriorityGrouping(self, *args): return _iengine.iEngine_GetRenderPriorityGrouping(self, *args)
    def GetSkyRenderPriority(self): return _iengine.iEngine_GetSkyRenderPriority(self)
    def GetPortalRenderPriority(self): return _iengine.iEngine_GetPortalRenderPriority(self)
    def GetWallRenderPriority(self): return _iengine.iEngine_GetWallRenderPriority(self)
    def GetObjectRenderPriority(self): return _iengine.iEngine_GetObjectRenderPriority(self)
    def GetAlphaRenderPriority(self): return _iengine.iEngine_GetAlphaRenderPriority(self)
    def ClearRenderPriorities(self): return _iengine.iEngine_ClearRenderPriorities(self)
    def GetRenderPriorityCount(self): return _iengine.iEngine_GetRenderPriorityCount(self)
    def GetRenderPriorityName(self, *args): return _iengine.iEngine_GetRenderPriorityName(self, *args)
    def CreateBaseMaterial(self, *args): return _iengine.iEngine_CreateBaseMaterial(self, *args)
    def CreateMaterial(self, *args): return _iengine.iEngine_CreateMaterial(self, *args)
    def GetMaterialList(self): return _iengine.iEngine_GetMaterialList(self)
    def FindMaterial(self, *args): return _iengine.iEngine_FindMaterial(self, *args)
    def CreateTexture(self, *args): return _iengine.iEngine_CreateTexture(self, *args)
    def CreateBlackTexture(self, *args): return _iengine.iEngine_CreateBlackTexture(self, *args)
    def GetTextureFormat(self): return _iengine.iEngine_GetTextureFormat(self)
    def GetTextureList(self): return _iengine.iEngine_GetTextureList(self)
    def FindTexture(self, *args): return _iengine.iEngine_FindTexture(self, *args)
    def CreateLight(self, *args): return _iengine.iEngine_CreateLight(self, *args)
    def FindLight(self, *args): return _iengine.iEngine_FindLight(self, *args)
    def FindLightID(self, *args): return _iengine.iEngine_FindLightID(self, *args)
    def GetLightIterator(self, collection = None): return _iengine.iEngine_GetLightIterator(self, collection)
    def RemoveLight(self, *args): return _iengine.iEngine_RemoveLight(self, *args)
    def SetAmbientLight(self, *args): return _iengine.iEngine_SetAmbientLight(self, *args)
    def GetAmbientLight(self, *args): return _iengine.iEngine_GetAmbientLight(self, *args)
    def GetDefaultAmbientLight(self, *args): return _iengine.iEngine_GetDefaultAmbientLight(self, *args)
    def GetNearbyLights(self, *args): return _iengine.iEngine_GetNearbyLights(self, *args)
    def CreateSector(self, *args): return _iengine.iEngine_CreateSector(self, *args)
    def GetSectors(self): return _iengine.iEngine_GetSectors(self)
    def FindSector(self, *args): return _iengine.iEngine_FindSector(self, *args)
    def GetNearbySectors(self, *args): return _iengine.iEngine_GetNearbySectors(self, *args)
    def AddEngineFrameCallback(self, *args): return _iengine.iEngine_AddEngineFrameCallback(self, *args)
    def RemoveEngineFrameCallback(self, *args): return _iengine.iEngine_RemoveEngineFrameCallback(self, *args)
    def AddEngineSectorCallback(self, *args): return _iengine.iEngine_AddEngineSectorCallback(self, *args)
    def RemoveEngineSectorCallback(self, *args): return _iengine.iEngine_RemoveEngineSectorCallback(self, *args)
    def CreateMeshWrapper(self, *args): return _iengine.iEngine_CreateMeshWrapper(self, *args)
    def LoadMeshWrapper(self, *args): return _iengine.iEngine_LoadMeshWrapper(self, *args)
    def AddMeshAndChildren(self, *args): return _iengine.iEngine_AddMeshAndChildren(self, *args)
    def AddMeshAndChildrenWait(self, *args): return _iengine.iEngine_AddMeshAndChildrenWait(self, *args)
    def GetNearbyMeshes(self, *args): return _iengine.iEngine_GetNearbyMeshes(self, *args)
    def GetMeshes(self): return _iengine.iEngine_GetMeshes(self)
    def FindMeshObject(self, *args): return _iengine.iEngine_FindMeshObject(self, *args)
    def WantToDie(self, *args): return _iengine.iEngine_WantToDie(self, *args)
    def CreateMeshFactory(self, *args): return _iengine.iEngine_CreateMeshFactory(self, *args)
    def LoadMeshFactory(self, *args): return _iengine.iEngine_LoadMeshFactory(self, *args)
    def FindMeshFactory(self, *args): return _iengine.iEngine_FindMeshFactory(self, *args)
    def GetMeshFactories(self): return _iengine.iEngine_GetMeshFactories(self)
    def CreateCollection(self, *args): return _iengine.iEngine_CreateCollection(self, *args)
    def GetCollection(self, *args): return _iengine.iEngine_GetCollection(self, *args)
    def GetCollections(self): return _iengine.iEngine_GetCollections(self)
    def RemoveCollection(self, *args): return _iengine.iEngine_RemoveCollection(self, *args)
    def RemoveAllCollections(self): return _iengine.iEngine_RemoveAllCollections(self)
    def CreateCamera(self): return _iengine.iEngine_CreateCamera(self)
    def FindCameraPosition(self, *args): return _iengine.iEngine_FindCameraPosition(self, *args)
    def GetCameraPositions(self): return _iengine.iEngine_GetCameraPositions(self)
    def CreatePortal(self, *args): return _iengine.iEngine_CreatePortal(self, *args)
    def CreatePortalContainer(self, *args): return _iengine.iEngine_CreatePortalContainer(self, *args)
    def SetClearZBuf(self, *args): return _iengine.iEngine_SetClearZBuf(self, *args)
    def GetClearZBuf(self): return _iengine.iEngine_GetClearZBuf(self)
    def GetDefaultClearZBuf(self): return _iengine.iEngine_GetDefaultClearZBuf(self)
    def SetClearScreen(self, *args): return _iengine.iEngine_SetClearScreen(self, *args)
    def GetClearScreen(self): return _iengine.iEngine_GetClearScreen(self)
    def GetDefaultClearScreen(self): return _iengine.iEngine_GetDefaultClearScreen(self)
    def GetBeginDrawFlags(self): return _iengine.iEngine_GetBeginDrawFlags(self)
    def GetTopLevelClipper(self): return _iengine.iEngine_GetTopLevelClipper(self)
    def PrecacheMesh(self, *args): return _iengine.iEngine_PrecacheMesh(self, *args)
    def PrecacheDraw(self, collection = None): return _iengine.iEngine_PrecacheDraw(self, collection)
    def Draw(self, *args): return _iengine.iEngine_Draw(self, *args)
    def SetContext(self, *args): return _iengine.iEngine_SetContext(self, *args)
    def GetContext(self): return _iengine.iEngine_GetContext(self)
    def GetRenderLoopManager(self): return _iengine.iEngine_GetRenderLoopManager(self)
    def GetCurrentDefaultRenderloop(self): return _iengine.iEngine_GetCurrentDefaultRenderloop(self)
    def SetCurrentDefaultRenderloop(self, *args): return _iengine.iEngine_SetCurrentDefaultRenderloop(self, *args)
    def GetCurrentFrameNumber(self): return _iengine.iEngine_GetCurrentFrameNumber(self)
    def UpdateNewFrame(self): return _iengine.iEngine_UpdateNewFrame(self)
    def EnableAdaptiveLODs(self, *args): return _iengine.iEngine_EnableAdaptiveLODs(self, *args)
    def UpdateAdaptiveLODs(self): return _iengine.iEngine_UpdateAdaptiveLODs(self)
    def GetAdaptiveLODsMultiplier(self): return _iengine.iEngine_GetAdaptiveLODsMultiplier(self)
    def SetSaveableFlag(self, *args): return _iengine.iEngine_SetSaveableFlag(self, *args)
    def GetSaveableFlag(self): return _iengine.iEngine_GetSaveableFlag(self)
    def CreateLoaderContext(self, collection = None, searchCollectionOnly = True): return _iengine.iEngine_CreateLoaderContext(self, collection, searchCollectionOnly)
    def SetDefaultKeepImage(self, *args): return _iengine.iEngine_SetDefaultKeepImage(self, *args)
    def GetDefaultKeepImage(self): return _iengine.iEngine_GetDefaultKeepImage(self)
    def GetNearbyObjects(self, *args): return _iengine.iEngine_GetNearbyObjects(self, *args)
    def GetVisibleObjects(self, *args): return _iengine.iEngine_GetVisibleObjects(self, *args)
    def GetVisibleMeshes(self, *args): return _iengine.iEngine_GetVisibleMeshes(self, *args)
    def CreateObjectWatcher(self): return _iengine.iEngine_CreateObjectWatcher(self)
    def GetVariableList(self): return _iengine.iEngine_GetVariableList(self)
    def RemoveObject(self, *args): return _iengine.iEngine_RemoveObject(self, *args)
    def DelayedRemoveObject(self, *args): return _iengine.iEngine_DelayedRemoveObject(self, *args)
    def RemoveDelayedRemoves(self, remove = False): return _iengine.iEngine_RemoveDelayedRemoves(self, remove)
    def DeleteAll(self): return _iengine.iEngine_DeleteAll(self)
    def DeleteAllWait(self): return _iengine.iEngine_DeleteAllWait(self)
    def ResetWorldSpecificSettings(self): return _iengine.iEngine_ResetWorldSpecificSettings(self)
    def FireStartFrame(self, *args): return _iengine.iEngine_FireStartFrame(self, *args)
    def CreatePerspectiveCamera(self): return _iengine.iEngine_CreatePerspectiveCamera(self)
    def CreateCustomMatrixCamera(self, copyFrom = None): return _iengine.iEngine_CreateCustomMatrixCamera(self, copyFrom)
    def GetRenderManager(self): return _iengine.iEngine_GetRenderManager(self)
    def SetRenderManager(self, *args): return _iengine.iEngine_SetRenderManager(self, *args)
    def ReloadRenderManager(self): return _iengine.iEngine_ReloadRenderManager(self)
    def SyncEngineLists(self, *args): return _iengine.iEngine_SyncEngineLists(self, *args)
    def SyncEngineListsWait(self, *args): return _iengine.iEngine_SyncEngineListsWait(self, *args)
    def SyncEngineListsNow(self, *args): return _iengine.iEngine_SyncEngineListsNow(self, *args)
    def GetDefaultNearClipDistance(self): return _iengine.iEngine_GetDefaultNearClipDistance(self)
    def SetDefaultNearClipDistance(self, *args): return _iengine.iEngine_SetDefaultNearClipDistance(self, *args)
    scfGetVersion = staticmethod(_iengine.iEngine_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iEngine
    __del__ = lambda self : None;
iEngine_swigregister = _iengine.iEngine_swigregister
iEngine_swigregister(iEngine)

def iEngine_scfGetVersion():
  return _iengine.iEngine_scfGetVersion()
iEngine_scfGetVersion = _iengine.iEngine_scfGetVersion

class iLODControl(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetLOD(self, *args): return _iengine.iLODControl_SetLOD(self, *args)
    def GetLOD(self, *args): return _iengine.iLODControl_GetLOD(self, *args)
    def GetLODPolygonCount(self, *args): return _iengine.iLODControl_GetLODPolygonCount(self, *args)
    def SetLODFade(self, *args): return _iengine.iLODControl_SetLODFade(self, *args)
    def GetLODFade(self, *args): return _iengine.iLODControl_GetLODFade(self, *args)
    __swig_destroy__ = _iengine.delete_iLODControl
    __del__ = lambda self : None;
iLODControl_swigregister = _iengine.iLODControl_swigregister
iLODControl_swigregister(iLODControl)

class iCameraListener(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewSector(self, *args): return _iengine.iCameraListener_NewSector(self, *args)
    def CameraMoved(self, *args): return _iengine.iCameraListener_CameraMoved(self, *args)
    __swig_destroy__ = _iengine.delete_iCameraListener
    __del__ = lambda self : None;
iCameraListener_swigregister = _iengine.iCameraListener_swigregister
iCameraListener_swigregister(iCameraListener)

class iCameraSectorListener(iCameraListener):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewSector(self, *args): return _iengine.iCameraSectorListener_NewSector(self, *args)
    def CameraMoved(self, *args): return _iengine.iCameraSectorListener_CameraMoved(self, *args)
    __swig_destroy__ = _iengine.delete_iCameraSectorListener
    __del__ = lambda self : None;
iCameraSectorListener_swigregister = _iengine.iCameraSectorListener_swigregister
iCameraSectorListener_swigregister(iCameraSectorListener)

class iCamera(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Clone(self): return _iengine.iCamera_Clone(self)
    def QuerySceneNode(self): return _iengine.iCamera_QuerySceneNode(self)
    def GetFOV(self): return _iengine.iCamera_GetFOV(self)
    def GetInvFOV(self): return _iengine.iCamera_GetInvFOV(self)
    def GetFOVAngle(self): return _iengine.iCamera_GetFOVAngle(self)
    def SetFOV(self, *args): return _iengine.iCamera_SetFOV(self, *args)
    def SetFOVAngle(self, *args): return _iengine.iCamera_SetFOVAngle(self, *args)
    def GetShiftX(self): return _iengine.iCamera_GetShiftX(self)
    def GetShiftY(self): return _iengine.iCamera_GetShiftY(self)
    def SetPerspectiveCenter(self, *args): return _iengine.iCamera_SetPerspectiveCenter(self, *args)
    def GetTransform(self): return _iengine.iCamera_GetTransform(self)
    def SetTransform(self, *args): return _iengine.iCamera_SetTransform(self, *args)
    def MoveWorld(self, *args): return _iengine.iCamera_MoveWorld(self, *args)
    def Move(self, *args): return _iengine.iCamera_Move(self, *args)
    def MoveWorldUnrestricted(self, *args): return _iengine.iCamera_MoveWorldUnrestricted(self, *args)
    def MoveUnrestricted(self, *args): return _iengine.iCamera_MoveUnrestricted(self, *args)
    def GetSector(self): return _iengine.iCamera_GetSector(self)
    def SetSector(self, *args): return _iengine.iCamera_SetSector(self, *args)
    def Correct(self, *args): return _iengine.iCamera_Correct(self, *args)
    def IsMirrored(self): return _iengine.iCamera_IsMirrored(self)
    def SetMirrored(self, *args): return _iengine.iCamera_SetMirrored(self, *args)
    def GetFarPlane(self): return _iengine.iCamera_GetFarPlane(self)
    def SetFarPlane(self, *args): return _iengine.iCamera_SetFarPlane(self, *args)
    def GetCameraNumber(self): return _iengine.iCamera_GetCameraNumber(self)
    def Perspective(self, *args): return _iengine.iCamera_Perspective(self, *args)
    def InvPerspective(self, *args): return _iengine.iCamera_InvPerspective(self, *args)
    def OnlyPortals(self, *args): return _iengine.iCamera_OnlyPortals(self, *args)
    def GetOnlyPortals(self): return _iengine.iCamera_GetOnlyPortals(self)
    def AddCameraSectorListener(self, *args): return _iengine.iCamera_AddCameraSectorListener(self, *args)
    def RemoveCameraSectorListener(self, *args): return _iengine.iCamera_RemoveCameraSectorListener(self, *args)
    def AddCameraListener(self, *args): return _iengine.iCamera_AddCameraListener(self, *args)
    def RemoveCameraListener(self, *args): return _iengine.iCamera_RemoveCameraListener(self, *args)
    def GetProjectionMatrix(self): return _iengine.iCamera_GetProjectionMatrix(self)
    def GetVisibleVolume(self, *args): return _iengine.iCamera_GetVisibleVolume(self, *args)
    def SetViewportSize(self, *args): return _iengine.iCamera_SetViewportSize(self, *args)
    def GetInvProjectionMatrix(self): return _iengine.iCamera_GetInvProjectionMatrix(self)
    scfGetVersion = staticmethod(_iengine.iCamera_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iCamera
    __del__ = lambda self : None;
iCamera_swigregister = _iengine.iCamera_swigregister
iCamera_swigregister(iCamera)

def iCamera_scfGetVersion():
  return _iengine.iCamera_scfGetVersion()
iCamera_scfGetVersion = _iengine.iCamera_scfGetVersion

class iPerspectiveCamera(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCamera(self): return _iengine.iPerspectiveCamera_GetCamera(self)
    def GetFOV(self): return _iengine.iPerspectiveCamera_GetFOV(self)
    def GetInvFOV(self): return _iengine.iPerspectiveCamera_GetInvFOV(self)
    def GetFOVAngle(self): return _iengine.iPerspectiveCamera_GetFOVAngle(self)
    def SetFOV(self, *args): return _iengine.iPerspectiveCamera_SetFOV(self, *args)
    def SetFOVAngle(self, *args): return _iengine.iPerspectiveCamera_SetFOVAngle(self, *args)
    def GetShiftX(self): return _iengine.iPerspectiveCamera_GetShiftX(self)
    def GetShiftY(self): return _iengine.iPerspectiveCamera_GetShiftY(self)
    def SetPerspectiveCenter(self, *args): return _iengine.iPerspectiveCamera_SetPerspectiveCenter(self, *args)
    def GetNearClipDistance(self): return _iengine.iPerspectiveCamera_GetNearClipDistance(self)
    def SetNearClipDistance(self, *args): return _iengine.iPerspectiveCamera_SetNearClipDistance(self, *args)
    __swig_destroy__ = _iengine.delete_iPerspectiveCamera
    __del__ = lambda self : None;
iPerspectiveCamera_swigregister = _iengine.iPerspectiveCamera_swigregister
iPerspectiveCamera_swigregister(iPerspectiveCamera)

class iCustomMatrixCamera(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCamera(self): return _iengine.iCustomMatrixCamera_GetCamera(self)
    def SetProjectionMatrix(self, *args): return _iengine.iCustomMatrixCamera_SetProjectionMatrix(self, *args)
    __swig_destroy__ = _iengine.delete_iCustomMatrixCamera
    __del__ = lambda self : None;
iCustomMatrixCamera_swigregister = _iengine.iCustomMatrixCamera_swigregister
iCustomMatrixCamera_swigregister(iCustomMatrixCamera)

class iCameraPosition(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iCameraPosition_QueryObject(self)
    def Clone(self): return _iengine.iCameraPosition_Clone(self)
    def GetSector(self): return _iengine.iCameraPosition_GetSector(self)
    def SetSector(self, *args): return _iengine.iCameraPosition_SetSector(self, *args)
    def GetPosition(self): return _iengine.iCameraPosition_GetPosition(self)
    def SetPosition(self, *args): return _iengine.iCameraPosition_SetPosition(self, *args)
    def GetUpwardVector(self): return _iengine.iCameraPosition_GetUpwardVector(self)
    def SetUpwardVector(self, *args): return _iengine.iCameraPosition_SetUpwardVector(self, *args)
    def GetForwardVector(self): return _iengine.iCameraPosition_GetForwardVector(self)
    def SetForwardVector(self, *args): return _iengine.iCameraPosition_SetForwardVector(self, *args)
    def Set(self, *args): return _iengine.iCameraPosition_Set(self, *args)
    def Load(self, *args): return _iengine.iCameraPosition_Load(self, *args)
    def SetFarPlane(self, *args): return _iengine.iCameraPosition_SetFarPlane(self, *args)
    def ClearFarPlane(self): return _iengine.iCameraPosition_ClearFarPlane(self)
    def GetFarPlane(self): return _iengine.iCameraPosition_GetFarPlane(self)
    def Save(self, *args): return _iengine.iCameraPosition_Save(self, *args)
    scfGetVersion = staticmethod(_iengine.iCameraPosition_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iCameraPosition
    __del__ = lambda self : None;
iCameraPosition_swigregister = _iengine.iCameraPosition_swigregister
iCameraPosition_swigregister(iCameraPosition)

def iCameraPosition_scfGetVersion():
  return _iengine.iCameraPosition_scfGetVersion()
iCameraPosition_scfGetVersion = _iengine.iCameraPosition_scfGetVersion

class iCameraPositionList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewCameraPosition(self, *args): return _iengine.iCameraPositionList_NewCameraPosition(self, *args)
    def CreateCameraPosition(self, *args): return _iengine.iCameraPositionList_CreateCameraPosition(self, *args)
    def GetCount(self): return _iengine.iCameraPositionList_GetCount(self)
    def Get(self, *args): return _iengine.iCameraPositionList_Get(self, *args)
    def Add(self, *args): return _iengine.iCameraPositionList_Add(self, *args)
    def Remove(self, *args): return _iengine.iCameraPositionList_Remove(self, *args)
    def RemoveAll(self): return _iengine.iCameraPositionList_RemoveAll(self)
    def Find(self, *args): return _iengine.iCameraPositionList_Find(self, *args)
    def FindByName(self, *args): return _iengine.iCameraPositionList_FindByName(self, *args)
    def __delitem__(self, *args): return _iengine.iCameraPositionList___delitem__(self, *args)
    def __len__(self): return _iengine.iCameraPositionList___len__(self)
    def append(self, *args): return _iengine.iCameraPositionList_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(self, *args): return _iengine.iCameraPositionList___getitem__(self, *args)
    def __contains__(self, *args): return _iengine.iCameraPositionList___contains__(self, *args)
    __swig_destroy__ = _iengine.delete_iCameraPositionList
    __del__ = lambda self : None;
iCameraPositionList_swigregister = _iengine.iCameraPositionList_swigregister
iCameraPositionList_swigregister(iCameraPositionList)

class iTextureCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def UseTexture(self, *args): return _iengine.iTextureCallback_UseTexture(self, *args)
    __swig_destroy__ = _iengine.delete_iTextureCallback
    __del__ = lambda self : None;
iTextureCallback_swigregister = _iengine.iTextureCallback_swigregister
iTextureCallback_swigregister(iTextureCallback)

class iTextureWrapper(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iTextureWrapper_QueryObject(self)
    def Clone(self): return _iengine.iTextureWrapper_Clone(self)
    def SetImageFile(self, *args): return _iengine.iTextureWrapper_SetImageFile(self, *args)
    def GetImageFile(self): return _iengine.iTextureWrapper_GetImageFile(self)
    def SetTextureHandle(self, *args): return _iengine.iTextureWrapper_SetTextureHandle(self, *args)
    def GetTextureHandle(self): return _iengine.iTextureWrapper_GetTextureHandle(self)
    def SetKeyColor(self, *args): return _iengine.iTextureWrapper_SetKeyColor(self, *args)
    def GetKeyColor(self): return _iengine.iTextureWrapper_GetKeyColor(self)
    def SetFlags(self, *args): return _iengine.iTextureWrapper_SetFlags(self, *args)
    def GetFlags(self): return _iengine.iTextureWrapper_GetFlags(self)
    def Register(self, *args): return _iengine.iTextureWrapper_Register(self, *args)
    def SetUseCallback(self, *args): return _iengine.iTextureWrapper_SetUseCallback(self, *args)
    def GetUseCallback(self): return _iengine.iTextureWrapper_GetUseCallback(self)
    def Visit(self): return _iengine.iTextureWrapper_Visit(self)
    def IsVisitRequired(self): return _iengine.iTextureWrapper_IsVisitRequired(self)
    def SetKeepImage(self, *args): return _iengine.iTextureWrapper_SetKeepImage(self, *args)
    def KeepImage(self): return _iengine.iTextureWrapper_KeepImage(self)
    def SetTextureClass(self, *args): return _iengine.iTextureWrapper_SetTextureClass(self, *args)
    def GetTextureClass(self): return _iengine.iTextureWrapper_GetTextureClass(self)
    scfGetVersion = staticmethod(_iengine.iTextureWrapper_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iTextureWrapper
    __del__ = lambda self : None;
iTextureWrapper_swigregister = _iengine.iTextureWrapper_swigregister
iTextureWrapper_swigregister(iTextureWrapper)

def iTextureWrapper_scfGetVersion():
  return _iengine.iTextureWrapper_scfGetVersion()
iTextureWrapper_scfGetVersion = _iengine.iTextureWrapper_scfGetVersion

class iTextureList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewTexture(self, *args): return _iengine.iTextureList_NewTexture(self, *args)
    def CreateTexture(self, *args): return _iengine.iTextureList_CreateTexture(self, *args)
    def GetCount(self): return _iengine.iTextureList_GetCount(self)
    def Get(self, *args): return _iengine.iTextureList_Get(self, *args)
    def Add(self, *args): return _iengine.iTextureList_Add(self, *args)
    def Remove(self, *args): return _iengine.iTextureList_Remove(self, *args)
    def RemoveAll(self): return _iengine.iTextureList_RemoveAll(self)
    def Find(self, *args): return _iengine.iTextureList_Find(self, *args)
    def FindByName(self, *args): return _iengine.iTextureList_FindByName(self, *args)
    def __delitem__(self, *args): return _iengine.iTextureList___delitem__(self, *args)
    def __len__(self): return _iengine.iTextureList___len__(self)
    def append(self, *args): return _iengine.iTextureList_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(self, *args): return _iengine.iTextureList___getitem__(self, *args)
    def __contains__(self, *args): return _iengine.iTextureList___contains__(self, *args)
    scfGetVersion = staticmethod(_iengine.iTextureList_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iTextureList
    __del__ = lambda self : None;
iTextureList_swigregister = _iengine.iTextureList_swigregister
iTextureList_swigregister(iTextureList)

def iTextureList_scfGetVersion():
  return _iengine.iTextureList_scfGetVersion()
iTextureList_scfGetVersion = _iengine.iTextureList_scfGetVersion

class iMaterialWrapper(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iMaterialWrapper_QueryObject(self)
    def SetMaterial(self, *args): return _iengine.iMaterialWrapper_SetMaterial(self, *args)
    def GetMaterial(self): return _iengine.iMaterialWrapper_GetMaterial(self)
    def Visit(self): return _iengine.iMaterialWrapper_Visit(self)
    def IsVisitRequired(self): return _iengine.iMaterialWrapper_IsVisitRequired(self)
    scfGetVersion = staticmethod(_iengine.iMaterialWrapper_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iMaterialWrapper
    __del__ = lambda self : None;
iMaterialWrapper_swigregister = _iengine.iMaterialWrapper_swigregister
iMaterialWrapper_swigregister(iMaterialWrapper)

def iMaterialWrapper_scfGetVersion():
  return _iengine.iMaterialWrapper_scfGetVersion()
iMaterialWrapper_scfGetVersion = _iengine.iMaterialWrapper_scfGetVersion

class iMaterialEngine(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetTextureWrapper(self, *args): return _iengine.iMaterialEngine_GetTextureWrapper(self, *args)
    def Visit(self): return _iengine.iMaterialEngine_Visit(self)
    def IsVisitRequired(self): return _iengine.iMaterialEngine_IsVisitRequired(self)
    scfGetVersion = staticmethod(_iengine.iMaterialEngine_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iMaterialEngine
    __del__ = lambda self : None;
iMaterialEngine_swigregister = _iengine.iMaterialEngine_swigregister
iMaterialEngine_swigregister(iMaterialEngine)

def iMaterialEngine_scfGetVersion():
  return _iengine.iMaterialEngine_scfGetVersion()
iMaterialEngine_scfGetVersion = _iengine.iMaterialEngine_scfGetVersion

class iMaterialList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewMaterial(self, *args): return _iengine.iMaterialList_NewMaterial(self, *args)
    def CreateMaterial(self, *args): return _iengine.iMaterialList_CreateMaterial(self, *args)
    def GetCount(self): return _iengine.iMaterialList_GetCount(self)
    def Get(self, *args): return _iengine.iMaterialList_Get(self, *args)
    def Add(self, *args): return _iengine.iMaterialList_Add(self, *args)
    def Remove(self, *args): return _iengine.iMaterialList_Remove(self, *args)
    def RemoveAll(self): return _iengine.iMaterialList_RemoveAll(self)
    def Find(self, *args): return _iengine.iMaterialList_Find(self, *args)
    def FindByName(self, *args): return _iengine.iMaterialList_FindByName(self, *args)
    def __delitem__(self, *args): return _iengine.iMaterialList___delitem__(self, *args)
    def __len__(self): return _iengine.iMaterialList___len__(self)
    def append(self, *args): return _iengine.iMaterialList_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(self, *args): return _iengine.iMaterialList___getitem__(self, *args)
    def __contains__(self, *args): return _iengine.iMaterialList___contains__(self, *args)
    __swig_destroy__ = _iengine.delete_iMaterialList
    __del__ = lambda self : None;
iMaterialList_swigregister = _iengine.iMaterialList_swigregister
iMaterialList_swigregister(iMaterialList)

class iSceneNodeArrayReadOnly(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSize(self): return _iengine.iSceneNodeArrayReadOnly_GetSize(self)
    def Get(self, *args): return _iengine.iSceneNodeArrayReadOnly_Get(self, *args)
    def Top(self): return _iengine.iSceneNodeArrayReadOnly_Top(self)
    def Find(self, *args): return _iengine.iSceneNodeArrayReadOnly_Find(self, *args)
    def GetIndex(self, *args): return _iengine.iSceneNodeArrayReadOnly_GetIndex(self, *args)
    def IsEmpty(self): return _iengine.iSceneNodeArrayReadOnly_IsEmpty(self)
    def GetAll(self, *args): return _iengine.iSceneNodeArrayReadOnly_GetAll(self, *args)
    __swig_destroy__ = _iengine.delete_iSceneNodeArrayReadOnly
    __del__ = lambda self : None;
iSceneNodeArrayReadOnly_swigregister = _iengine.iSceneNodeArrayReadOnly_swigregister
iSceneNodeArrayReadOnly_swigregister(iSceneNodeArrayReadOnly)

class iSceneNodeArray(iSceneNodeArrayReadOnly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    scfGetVersion = staticmethod(_iengine.iSceneNodeArray_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iSceneNodeArray
    __del__ = lambda self : None;
iSceneNodeArray_swigregister = _iengine.iSceneNodeArray_swigregister
iSceneNodeArray_swigregister(iSceneNodeArray)

def iSceneNodeArray_scfGetVersion():
  return _iengine.iSceneNodeArray_scfGetVersion()
iSceneNodeArray_scfGetVersion = _iengine.iSceneNodeArray_scfGetVersion

class iSceneNode(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetMovable(self): return _iengine.iSceneNode_GetMovable(self)
    def QueryMesh(self): return _iengine.iSceneNode_QueryMesh(self)
    def QueryLight(self): return _iengine.iSceneNode_QueryLight(self)
    def QueryCamera(self): return _iengine.iSceneNode_QueryCamera(self)
    def SetParent(self, *args): return _iengine.iSceneNode_SetParent(self, *args)
    def GetParent(self): return _iengine.iSceneNode_GetParent(self)
    def GetChildren(self): return _iengine.iSceneNode_GetChildren(self)
    def GetChildrenArray(self): return _iengine.iSceneNode_GetChildrenArray(self)
    scfGetVersion = staticmethod(_iengine.iSceneNode_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iSceneNode
    __del__ = lambda self : None;
iSceneNode_swigregister = _iengine.iSceneNode_swigregister
iSceneNode_swigregister(iSceneNode)

def iSceneNode_scfGetVersion():
  return _iengine.iSceneNode_scfGetVersion()
iSceneNode_scfGetVersion = _iengine.iSceneNode_scfGetVersion

CS_ENTITY_DETAIL = _iengine.CS_ENTITY_DETAIL
CS_ENTITY_CAMERA = _iengine.CS_ENTITY_CAMERA
CS_ENTITY_INVISIBLEMESH = _iengine.CS_ENTITY_INVISIBLEMESH
CS_ENTITY_NOSHADOWCAST = _iengine.CS_ENTITY_NOSHADOWCAST
CS_ENTITY_NOSHADOWS = _iengine.CS_ENTITY_NOSHADOWS
CS_ENTITY_NOLIGHTING = _iengine.CS_ENTITY_NOLIGHTING
CS_ENTITY_NOHITBEAM = _iengine.CS_ENTITY_NOHITBEAM
CS_ENTITY_NOCLIP = _iengine.CS_ENTITY_NOCLIP
CS_ENTITY_NODECAL = _iengine.CS_ENTITY_NODECAL
CS_ENTITY_STATICLIT = _iengine.CS_ENTITY_STATICLIT
CS_ENTITY_NOSHADOWRECEIVE = _iengine.CS_ENTITY_NOSHADOWRECEIVE
CS_ENTITY_LIMITEDSHADOWCAST = _iengine.CS_ENTITY_LIMITEDSHADOWCAST
CS_ENTITY_ALWAYSVISIBLE = _iengine.CS_ENTITY_ALWAYSVISIBLE
class iMeshDrawCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def BeforeDrawing(self, *args): return _iengine.iMeshDrawCallback_BeforeDrawing(self, *args)
    __swig_destroy__ = _iengine.delete_iMeshDrawCallback
    __del__ = lambda self : None;
iMeshDrawCallback_swigregister = _iengine.iMeshDrawCallback_swigregister
iMeshDrawCallback_swigregister(iMeshDrawCallback)

class csHitBeamResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    isect = _swig_property(_iengine.csHitBeamResult_isect_get, _iengine.csHitBeamResult_isect_set)
    r = _swig_property(_iengine.csHitBeamResult_r_get, _iengine.csHitBeamResult_r_set)
    polygon_idx = _swig_property(_iengine.csHitBeamResult_polygon_idx_get, _iengine.csHitBeamResult_polygon_idx_set)
    material = _swig_property(_iengine.csHitBeamResult_material_get, _iengine.csHitBeamResult_material_set)
    facehit = _swig_property(_iengine.csHitBeamResult_facehit_get, _iengine.csHitBeamResult_facehit_set)
    hit = _swig_property(_iengine.csHitBeamResult_hit_get, _iengine.csHitBeamResult_hit_set)
    def __init__(self): 
        this = _iengine.new_csHitBeamResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iengine.delete_csHitBeamResult
    __del__ = lambda self : None;
csHitBeamResult_swigregister = _iengine.csHitBeamResult_swigregister
csHitBeamResult_swigregister(csHitBeamResult)

class csScreenBoxResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sbox = _swig_property(_iengine.csScreenBoxResult_sbox_get, _iengine.csScreenBoxResult_sbox_set)
    cbox = _swig_property(_iengine.csScreenBoxResult_cbox_get, _iengine.csScreenBoxResult_cbox_set)
    distance = _swig_property(_iengine.csScreenBoxResult_distance_get, _iengine.csScreenBoxResult_distance_set)
    def __init__(self): 
        this = _iengine.new_csScreenBoxResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iengine.delete_csScreenBoxResult
    __del__ = lambda self : None;
csScreenBoxResult_swigregister = _iengine.csScreenBoxResult_swigregister
csScreenBoxResult_swigregister(csScreenBoxResult)

class iMeshWrapper(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iMeshWrapper_QueryObject(self)
    def GetMeshObject(self): return _iengine.iMeshWrapper_GetMeshObject(self)
    def SetMeshObject(self, *args): return _iengine.iMeshWrapper_SetMeshObject(self, *args)
    def GetPortalContainer(self): return _iengine.iMeshWrapper_GetPortalContainer(self)
    def GetFactory(self): return _iengine.iMeshWrapper_GetFactory(self)
    def SetFactory(self, *args): return _iengine.iMeshWrapper_SetFactory(self, *args)
    def GetMovable(self): return _iengine.iMeshWrapper_GetMovable(self)
    def QuerySceneNode(self): return _iengine.iMeshWrapper_QuerySceneNode(self)
    def FindChildByName(self, *args): return _iengine.iMeshWrapper_FindChildByName(self, *args)
    def PlaceMesh(self): return _iengine.iMeshWrapper_PlaceMesh(self)
    def HitBeamBBox(self, *args): return _iengine.iMeshWrapper_HitBeamBBox(self, *args)
    def HitBeamOutline(self, *args): return _iengine.iMeshWrapper_HitBeamOutline(self, *args)
    def HitBeamObject(self, *args): return _iengine.iMeshWrapper_HitBeamObject(self, *args)
    def HitBeam(self, *args): return _iengine.iMeshWrapper_HitBeam(self, *args)
    def SetDrawCallback(self, *args): return _iengine.iMeshWrapper_SetDrawCallback(self, *args)
    def RemoveDrawCallback(self, *args): return _iengine.iMeshWrapper_RemoveDrawCallback(self, *args)
    def GetDrawCallbackCount(self): return _iengine.iMeshWrapper_GetDrawCallbackCount(self)
    def GetDrawCallback(self, *args): return _iengine.iMeshWrapper_GetDrawCallback(self, *args)
    def SetRenderPriority(self, *args): return _iengine.iMeshWrapper_SetRenderPriority(self, *args)
    def GetRenderPriority(self): return _iengine.iMeshWrapper_GetRenderPriority(self)
    def SetRenderPriorityRecursive(self, *args): return _iengine.iMeshWrapper_SetRenderPriorityRecursive(self, *args)
    def GetFlags(self): return _iengine.iMeshWrapper_GetFlags(self)
    def SetFlagsRecursive(self, *args): return _iengine.iMeshWrapper_SetFlagsRecursive(self, *args)
    def SetZBufMode(self, *args): return _iengine.iMeshWrapper_SetZBufMode(self, *args)
    def GetZBufMode(self): return _iengine.iMeshWrapper_GetZBufMode(self)
    def SetZBufModeRecursive(self, *args): return _iengine.iMeshWrapper_SetZBufModeRecursive(self, *args)
    def HardTransform(self, *args): return _iengine.iMeshWrapper_HardTransform(self, *args)
    def GetWorldBoundingBox(self): return _iengine.iMeshWrapper_GetWorldBoundingBox(self)
    def GetTransformedBoundingBox(self, *args): return _iengine.iMeshWrapper_GetTransformedBoundingBox(self, *args)
    def GetScreenBoundingBox(self, *args): return _iengine.iMeshWrapper_GetScreenBoundingBox(self, *args)
    def GetRadius(self): return _iengine.iMeshWrapper_GetRadius(self)
    def ResetMinMaxRenderDistance(self): return _iengine.iMeshWrapper_ResetMinMaxRenderDistance(self)
    def SetMinimumRenderDistance(self, *args): return _iengine.iMeshWrapper_SetMinimumRenderDistance(self, *args)
    def GetMinimumRenderDistance(self): return _iengine.iMeshWrapper_GetMinimumRenderDistance(self)
    def SetMaximumRenderDistance(self, *args): return _iengine.iMeshWrapper_SetMaximumRenderDistance(self, *args)
    def GetMaximumRenderDistance(self): return _iengine.iMeshWrapper_GetMaximumRenderDistance(self)
    def SetMinimumRenderDistanceVar(self, *args): return _iengine.iMeshWrapper_SetMinimumRenderDistanceVar(self, *args)
    def GetMinimumRenderDistanceVar(self): return _iengine.iMeshWrapper_GetMinimumRenderDistanceVar(self)
    def SetMaximumRenderDistanceVar(self, *args): return _iengine.iMeshWrapper_SetMaximumRenderDistanceVar(self, *args)
    def GetMaximumRenderDistanceVar(self): return _iengine.iMeshWrapper_GetMaximumRenderDistanceVar(self)
    def CreateStaticLOD(self): return _iengine.iMeshWrapper_CreateStaticLOD(self)
    def DestroyStaticLOD(self): return _iengine.iMeshWrapper_DestroyStaticLOD(self)
    def GetStaticLOD(self): return _iengine.iMeshWrapper_GetStaticLOD(self)
    def AddMeshToStaticLOD(self, *args): return _iengine.iMeshWrapper_AddMeshToStaticLOD(self, *args)
    def RemoveMeshFromStaticLOD(self, *args): return _iengine.iMeshWrapper_RemoveMeshFromStaticLOD(self, *args)
    def GetSVContext(self): return _iengine.iMeshWrapper_GetSVContext(self)
    def GetRenderMeshes(self, *args): return _iengine.iMeshWrapper_GetRenderMeshes(self, *args)
    def AddExtraRenderMesh(self, *args): return _iengine.iMeshWrapper_AddExtraRenderMesh(self, *args)
    def GetExtraRenderMesh(self, *args): return _iengine.iMeshWrapper_GetExtraRenderMesh(self, *args)
    def GetExtraRenderMeshCount(self): return _iengine.iMeshWrapper_GetExtraRenderMeshCount(self)
    def GetExtraRenderMeshZBufMode(self, *args): return _iengine.iMeshWrapper_GetExtraRenderMeshZBufMode(self, *args)
    def RemoveExtraRenderMesh(self, *args): return _iengine.iMeshWrapper_RemoveExtraRenderMesh(self, *args)
    def AddInstance(self, *args): return _iengine.iMeshWrapper_AddInstance(self, *args)
    def RemoveInstance(self, *args): return _iengine.iMeshWrapper_RemoveInstance(self, *args)
    scfGetVersion = staticmethod(_iengine.iMeshWrapper_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iMeshWrapper
    __del__ = lambda self : None;
iMeshWrapper_swigregister = _iengine.iMeshWrapper_swigregister
iMeshWrapper_swigregister(iMeshWrapper)

def iMeshWrapper_scfGetVersion():
  return _iengine.iMeshWrapper_scfGetVersion()
iMeshWrapper_scfGetVersion = _iengine.iMeshWrapper_scfGetVersion

class iMeshFactoryWrapper(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iMeshFactoryWrapper_QueryObject(self)
    def GetMeshObjectFactory(self): return _iengine.iMeshFactoryWrapper_GetMeshObjectFactory(self)
    def SetMeshObjectFactory(self, *args): return _iengine.iMeshFactoryWrapper_SetMeshObjectFactory(self, *args)
    def HardTransform(self, *args): return _iengine.iMeshFactoryWrapper_HardTransform(self, *args)
    def CreateMeshWrapper(self): return _iengine.iMeshFactoryWrapper_CreateMeshWrapper(self)
    def GetFlags(self): return _iengine.iMeshFactoryWrapper_GetFlags(self)
    def GetParentContainer(self): return _iengine.iMeshFactoryWrapper_GetParentContainer(self)
    def SetParentContainer(self, *args): return _iengine.iMeshFactoryWrapper_SetParentContainer(self, *args)
    def GetChildren(self): return _iengine.iMeshFactoryWrapper_GetChildren(self)
    def GetTransform(self): return _iengine.iMeshFactoryWrapper_GetTransform(self)
    def SetTransform(self, *args): return _iengine.iMeshFactoryWrapper_SetTransform(self, *args)
    def CreateStaticLOD(self): return _iengine.iMeshFactoryWrapper_CreateStaticLOD(self)
    def DestroyStaticLOD(self): return _iengine.iMeshFactoryWrapper_DestroyStaticLOD(self)
    def SetStaticLOD(self, *args): return _iengine.iMeshFactoryWrapper_SetStaticLOD(self, *args)
    def GetStaticLOD(self, *args): return _iengine.iMeshFactoryWrapper_GetStaticLOD(self, *args)
    def AddFactoryToStaticLOD(self, *args): return _iengine.iMeshFactoryWrapper_AddFactoryToStaticLOD(self, *args)
    def RemoveFactoryFromStaticLOD(self, *args): return _iengine.iMeshFactoryWrapper_RemoveFactoryFromStaticLOD(self, *args)
    def SetZBufMode(self, *args): return _iengine.iMeshFactoryWrapper_SetZBufMode(self, *args)
    def GetZBufMode(self): return _iengine.iMeshFactoryWrapper_GetZBufMode(self)
    def SetZBufModeRecursive(self, *args): return _iengine.iMeshFactoryWrapper_SetZBufModeRecursive(self, *args)
    def SetRenderPriority(self, *args): return _iengine.iMeshFactoryWrapper_SetRenderPriority(self, *args)
    def GetRenderPriority(self): return _iengine.iMeshFactoryWrapper_GetRenderPriority(self)
    def SetRenderPriorityRecursive(self, *args): return _iengine.iMeshFactoryWrapper_SetRenderPriorityRecursive(self, *args)
    def GetSVContext(self): return _iengine.iMeshFactoryWrapper_GetSVContext(self)
    def SetInstanceFactory(self, *args): return _iengine.iMeshFactoryWrapper_SetInstanceFactory(self, *args)
    def GetInstanceFactory(self): return _iengine.iMeshFactoryWrapper_GetInstanceFactory(self)
    def AddInstance(self, *args): return _iengine.iMeshFactoryWrapper_AddInstance(self, *args)
    def GetInstances(self): return _iengine.iMeshFactoryWrapper_GetInstances(self)
    def AddExtraRenderMesh(self, *args): return _iengine.iMeshFactoryWrapper_AddExtraRenderMesh(self, *args)
    def GetExtraRenderMesh(self, *args): return _iengine.iMeshFactoryWrapper_GetExtraRenderMesh(self, *args)
    def GetExtraRenderMeshCount(self): return _iengine.iMeshFactoryWrapper_GetExtraRenderMeshCount(self)
    def RemoveExtraRenderMesh(self, *args): return _iengine.iMeshFactoryWrapper_RemoveExtraRenderMesh(self, *args)
    scfGetVersion = staticmethod(_iengine.iMeshFactoryWrapper_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iMeshFactoryWrapper
    __del__ = lambda self : None;
iMeshFactoryWrapper_swigregister = _iengine.iMeshFactoryWrapper_swigregister
iMeshFactoryWrapper_swigregister(iMeshFactoryWrapper)

def iMeshFactoryWrapper_scfGetVersion():
  return _iengine.iMeshFactoryWrapper_scfGetVersion()
iMeshFactoryWrapper_scfGetVersion = _iengine.iMeshFactoryWrapper_scfGetVersion

class iMeshList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCount(self): return _iengine.iMeshList_GetCount(self)
    def Get(self, *args): return _iengine.iMeshList_Get(self, *args)
    def Add(self, *args): return _iengine.iMeshList_Add(self, *args)
    def Remove(self, *args): return _iengine.iMeshList_Remove(self, *args)
    def RemoveAll(self): return _iengine.iMeshList_RemoveAll(self)
    def Find(self, *args): return _iengine.iMeshList_Find(self, *args)
    def FindByName(self, *args): return _iengine.iMeshList_FindByName(self, *args)
    def __delitem__(self, *args): return _iengine.iMeshList___delitem__(self, *args)
    def __len__(self): return _iengine.iMeshList___len__(self)
    def append(self, *args): return _iengine.iMeshList_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(self, *args): return _iengine.iMeshList___getitem__(self, *args)
    def __contains__(self, *args): return _iengine.iMeshList___contains__(self, *args)
    __swig_destroy__ = _iengine.delete_iMeshList
    __del__ = lambda self : None;
iMeshList_swigregister = _iengine.iMeshList_swigregister
iMeshList_swigregister(iMeshList)

class iMeshFactoryList(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCount(self): return _iengine.iMeshFactoryList_GetCount(self)
    def Get(self, *args): return _iengine.iMeshFactoryList_Get(self, *args)
    def Add(self, *args): return _iengine.iMeshFactoryList_Add(self, *args)
    def Remove(self, *args): return _iengine.iMeshFactoryList_Remove(self, *args)
    def RemoveAll(self): return _iengine.iMeshFactoryList_RemoveAll(self)
    def Find(self, *args): return _iengine.iMeshFactoryList_Find(self, *args)
    def FindByName(self, *args): return _iengine.iMeshFactoryList_FindByName(self, *args)
    def __delitem__(self, *args): return _iengine.iMeshFactoryList___delitem__(self, *args)
    def __len__(self): return _iengine.iMeshFactoryList___len__(self)
    def append(self, *args): return _iengine.iMeshFactoryList_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(self, *args): return _iengine.iMeshFactoryList___getitem__(self, *args)
    def __contains__(self, *args): return _iengine.iMeshFactoryList___contains__(self, *args)
    __swig_destroy__ = _iengine.delete_iMeshFactoryList
    __del__ = lambda self : None;
iMeshFactoryList_swigregister = _iengine.iMeshFactoryList_swigregister
iMeshFactoryList_swigregister(iMeshFactoryList)

class iMeshFactoryWrapperIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _iengine.iMeshFactoryWrapperIterator_Next(self)
    def Reset(self): return _iengine.iMeshFactoryWrapperIterator_Reset(self)
    def HasNext(self): return _iengine.iMeshFactoryWrapperIterator_HasNext(self)
    __swig_destroy__ = _iengine.delete_iMeshFactoryWrapperIterator
    __del__ = lambda self : None;
iMeshFactoryWrapperIterator_swigregister = _iengine.iMeshFactoryWrapperIterator_swigregister
iMeshFactoryWrapperIterator_swigregister(iMeshFactoryWrapperIterator)

class iMeshWrapperIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Next(self): return _iengine.iMeshWrapperIterator_Next(self)
    def Reset(self): return _iengine.iMeshWrapperIterator_Reset(self)
    def HasNext(self): return _iengine.iMeshWrapperIterator_HasNext(self)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    scfGetVersion = staticmethod(_iengine.iMeshWrapperIterator_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iMeshWrapperIterator
    __del__ = lambda self : None;
iMeshWrapperIterator_swigregister = _iengine.iMeshWrapperIterator_swigregister
iMeshWrapperIterator_swigregister(iMeshWrapperIterator)

def iMeshWrapperIterator_scfGetVersion():
  return _iengine.iMeshWrapperIterator_scfGetVersion()
iMeshWrapperIterator_scfGetVersion = _iengine.iMeshWrapperIterator_scfGetVersion

class iMovableListener(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def MovableChanged(self, *args): return _iengine.iMovableListener_MovableChanged(self, *args)
    def MovableDestroyed(self, *args): return _iengine.iMovableListener_MovableDestroyed(self, *args)
    scfGetVersion = staticmethod(_iengine.iMovableListener_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iMovableListener
    __del__ = lambda self : None;
iMovableListener_swigregister = _iengine.iMovableListener_swigregister
iMovableListener_swigregister(iMovableListener)

def iMovableListener_scfGetVersion():
  return _iengine.iMovableListener_scfGetVersion()
iMovableListener_scfGetVersion = _iengine.iMovableListener_scfGetVersion

class iMovable(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSceneNode(self): return _iengine.iMovable_GetSceneNode(self)
    def SetSector(self, *args): return _iengine.iMovable_SetSector(self, *args)
    def ClearSectors(self): return _iengine.iMovable_ClearSectors(self)
    def GetSectors(self): return _iengine.iMovable_GetSectors(self)
    def InSector(self): return _iengine.iMovable_InSector(self)
    def SetPosition(self, *args): return _iengine.iMovable_SetPosition(self, *args)
    def GetPosition(self): return _iengine.iMovable_GetPosition(self)
    def GetFullPosition(self): return _iengine.iMovable_GetFullPosition(self)
    def SetTransform(self, *args): return _iengine.iMovable_SetTransform(self, *args)
    def GetTransform(self): return _iengine.iMovable_GetTransform(self)
    def GetFullTransform(self): return _iengine.iMovable_GetFullTransform(self)
    def MovePosition(self, *args): return _iengine.iMovable_MovePosition(self, *args)
    def Transform(self, *args): return _iengine.iMovable_Transform(self, *args)
    def AddListener(self, *args): return _iengine.iMovable_AddListener(self, *args)
    def RemoveListener(self, *args): return _iengine.iMovable_RemoveListener(self, *args)
    def UpdateMove(self): return _iengine.iMovable_UpdateMove(self)
    def GetUpdateNumber(self): return _iengine.iMovable_GetUpdateNumber(self)
    def IsTransformIdentity(self): return _iengine.iMovable_IsTransformIdentity(self)
    def IsFullTransformIdentity(self): return _iengine.iMovable_IsFullTransformIdentity(self)
    def TransformIdentity(self): return _iengine.iMovable_TransformIdentity(self)
    def SetFullTransform(self, *args): return _iengine.iMovable_SetFullTransform(self, *args)
    def SetFullPosition(self, *args): return _iengine.iMovable_SetFullPosition(self, *args)
    scfGetVersion = staticmethod(_iengine.iMovable_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iMovable
    __del__ = lambda self : None;
iMovable_swigregister = _iengine.iMovable_swigregister
iMovable_swigregister(iMovable)

def iMovable_scfGetVersion():
  return _iengine.iMovable_scfGetVersion()
iMovable_scfGetVersion = _iengine.iMovable_scfGetVersion

class iVisibilityObjectIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _iengine.iVisibilityObjectIterator_HasNext(self)
    def Next(self): return _iengine.iVisibilityObjectIterator_Next(self)
    def Reset(self): return _iengine.iVisibilityObjectIterator_Reset(self)
    def __iter__(self):
        while self.HasNext():
            yield self.Next() 
    __swig_destroy__ = _iengine.delete_iVisibilityObjectIterator
    __del__ = lambda self : None;
iVisibilityObjectIterator_swigregister = _iengine.iVisibilityObjectIterator_swigregister
iVisibilityObjectIterator_swigregister(iVisibilityObjectIterator)

class iVisibilityCullerListener(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ObjectVisible(self, *args): return _iengine.iVisibilityCullerListener_ObjectVisible(self, *args)
    def GetVisibleMeshes(self, *args): return _iengine.iVisibilityCullerListener_GetVisibleMeshes(self, *args)
    def MarkVisible(self, *args): return _iengine.iVisibilityCullerListener_MarkVisible(self, *args)
    __swig_destroy__ = _iengine.delete_iVisibilityCullerListener
    __del__ = lambda self : None;
iVisibilityCullerListener_swigregister = _iengine.iVisibilityCullerListener_swigregister
iVisibilityCullerListener_swigregister(iVisibilityCullerListener)

class iVisibilityCuller(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Setup(self, *args): return _iengine.iVisibilityCuller_Setup(self, *args)
    def RegisterVisObject(self, *args): return _iengine.iVisibilityCuller_RegisterVisObject(self, *args)
    def UnregisterVisObject(self, *args): return _iengine.iVisibilityCuller_UnregisterVisObject(self, *args)
    def PrecacheCulling(self): return _iengine.iVisibilityCuller_PrecacheCulling(self)
    def VisTest(self, *args): return _iengine.iVisibilityCuller_VisTest(self, *args)
    def IntersectSegmentSloppy(self, *args): return _iengine.iVisibilityCuller_IntersectSegmentSloppy(self, *args)
    def IntersectSegment(self, *args): return _iengine.iVisibilityCuller_IntersectSegment(self, *args)
    def ParseCullerParameters(self, *args): return _iengine.iVisibilityCuller_ParseCullerParameters(self, *args)
    def RenderViscull(self, *args): return _iengine.iVisibilityCuller_RenderViscull(self, *args)
    def BeginPrecacheCulling(self): return _iengine.iVisibilityCuller_BeginPrecacheCulling(self)
    def EndPrecacheCulling(self): return _iengine.iVisibilityCuller_EndPrecacheCulling(self)
    scfGetVersion = staticmethod(_iengine.iVisibilityCuller_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iVisibilityCuller
    __del__ = lambda self : None;
iVisibilityCuller_swigregister = _iengine.iVisibilityCuller_swigregister
iVisibilityCuller_swigregister(iVisibilityCuller)

def iVisibilityCuller_scfGetVersion():
  return _iengine.iVisibilityCuller_scfGetVersion()
iVisibilityCuller_scfGetVersion = _iengine.iVisibilityCuller_scfGetVersion

CS_CULLER_HINT_GOODOCCLUDER = _iengine.CS_CULLER_HINT_GOODOCCLUDER
CS_CULLER_HINT_BADOCCLUDER = _iengine.CS_CULLER_HINT_BADOCCLUDER
class iVisibilityObject(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetMovable(self): return _iengine.iVisibilityObject_GetMovable(self)
    def GetMeshWrapper(self): return _iengine.iVisibilityObject_GetMeshWrapper(self)
    def GetObjectModel(self): return _iengine.iVisibilityObject_GetObjectModel(self)
    def GetCullerFlags(self): return _iengine.iVisibilityObject_GetCullerFlags(self)
    def GetBBox(self): return _iengine.iVisibilityObject_GetBBox(self)
    __swig_destroy__ = _iengine.delete_iVisibilityObject
    __del__ = lambda self : None;
iVisibilityObject_swigregister = _iengine.iVisibilityObject_swigregister
iVisibilityObject_swigregister(iVisibilityObject)

CS_PORTAL_CLIPDEST = _iengine.CS_PORTAL_CLIPDEST
CS_PORTAL_CLIPSTRADDLING = _iengine.CS_PORTAL_CLIPSTRADDLING
CS_PORTAL_ZFILL = _iengine.CS_PORTAL_ZFILL
CS_PORTAL_WARP = _iengine.CS_PORTAL_WARP
CS_PORTAL_MIRROR = _iengine.CS_PORTAL_MIRROR
CS_PORTAL_STATICDEST = _iengine.CS_PORTAL_STATICDEST
CS_PORTAL_FLOAT = _iengine.CS_PORTAL_FLOAT
CS_PORTAL_COLLDET = _iengine.CS_PORTAL_COLLDET
CS_PORTAL_VISCULL = _iengine.CS_PORTAL_VISCULL
class iPortalCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Traverse(self, *args): return _iengine.iPortalCallback_Traverse(self, *args)
    __swig_destroy__ = _iengine.delete_iPortalCallback
    __del__ = lambda self : None;
iPortalCallback_swigregister = _iengine.iPortalCallback_swigregister
iPortalCallback_swigregister(iPortalCallback)

class iPortal(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetName(self, *args): return _iengine.iPortal_SetName(self, *args)
    def GetName(self): return _iengine.iPortal_GetName(self)
    def GetSector(self): return _iengine.iPortal_GetSector(self)
    def GetVertices(self): return _iengine.iPortal_GetVertices(self)
    def GetWorldVertices(self): return _iengine.iPortal_GetWorldVertices(self)
    def GetVertexIndices(self): return _iengine.iPortal_GetVertexIndices(self)
    def GetVertexIndicesCount(self): return _iengine.iPortal_GetVertexIndicesCount(self)
    def GetObjectPlane(self): return _iengine.iPortal_GetObjectPlane(self)
    def GetWorldPlane(self): return _iengine.iPortal_GetWorldPlane(self)
    def GetObjectSphere(self): return _iengine.iPortal_GetObjectSphere(self)
    def GetWorldSphere(self): return _iengine.iPortal_GetWorldSphere(self)
    def ComputeCameraPlane(self, *args): return _iengine.iPortal_ComputeCameraPlane(self, *args)
    def PointOnPolygon(self, *args): return _iengine.iPortal_PointOnPolygon(self, *args)
    def SetSector(self, *args): return _iengine.iPortal_SetSector(self, *args)
    def GetFlags(self): return _iengine.iPortal_GetFlags(self)
    def SetMaximumSectorVisit(self, *args): return _iengine.iPortal_SetMaximumSectorVisit(self, *args)
    def GetMaximumSectorVisit(self): return _iengine.iPortal_GetMaximumSectorVisit(self)
    def SetPortalCallback(self, *args): return _iengine.iPortal_SetPortalCallback(self, *args)
    def RemovePortalCallback(self, *args): return _iengine.iPortal_RemovePortalCallback(self, *args)
    def GetPortalCallbackCount(self): return _iengine.iPortal_GetPortalCallbackCount(self)
    def GetPortalCallback(self, *args): return _iengine.iPortal_GetPortalCallback(self, *args)
    def SetMissingSectorCallback(self, *args): return _iengine.iPortal_SetMissingSectorCallback(self, *args)
    def RemoveMissingSectorCallback(self, *args): return _iengine.iPortal_RemoveMissingSectorCallback(self, *args)
    def GetMissingSectorCallbackCount(self): return _iengine.iPortal_GetMissingSectorCallbackCount(self)
    def GetMissingSectorCallback(self, *args): return _iengine.iPortal_GetMissingSectorCallback(self, *args)
    def GetTextureFilter(self): return _iengine.iPortal_GetTextureFilter(self)
    def SetFilter(self, *args): return _iengine.iPortal_SetFilter(self, *args)
    def GetColorFilter(self): return _iengine.iPortal_GetColorFilter(self)
    def SetWarp(self, *args): return _iengine.iPortal_SetWarp(self, *args)
    def SetMirror(self, *args): return _iengine.iPortal_SetMirror(self, *args)
    def GetWarp(self): return _iengine.iPortal_GetWarp(self)
    def HardTransform(self, *args): return _iengine.iPortal_HardTransform(self, *args)
    def ObjectToWorld(self, *args): return _iengine.iPortal_ObjectToWorld(self, *args)
    def Warp(self, *args): return _iengine.iPortal_Warp(self, *args)
    def WarpSpace(self, *args): return _iengine.iPortal_WarpSpace(self, *args)
    def CompleteSector(self, *args): return _iengine.iPortal_CompleteSector(self, *args)
    def HitBeamPortals(self, *args): return _iengine.iPortal_HitBeamPortals(self, *args)
    def GetVerticesCount(self): return _iengine.iPortal_GetVerticesCount(self)
    def GetMaterial(self): return _iengine.iPortal_GetMaterial(self)
    def SetMaterial(self, *args): return _iengine.iPortal_SetMaterial(self, *args)
    scfGetVersion = staticmethod(_iengine.iPortal_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iPortal
    __del__ = lambda self : None;
iPortal_swigregister = _iengine.iPortal_swigregister
iPortal_swigregister(iPortal)

def iPortal_scfGetVersion():
  return _iengine.iPortal_scfGetVersion()
iPortal_scfGetVersion = _iengine.iPortal_scfGetVersion

class iPortalContainer(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPortalCount(self): return _iengine.iPortalContainer_GetPortalCount(self)
    def GetPortal(self, *args): return _iengine.iPortalContainer_GetPortal(self, *args)
    def CreatePortal(self, *args): return _iengine.iPortalContainer_CreatePortal(self, *args)
    def RemovePortal(self, *args): return _iengine.iPortalContainer_RemovePortal(self, *args)
    def Draw(self, *args): return _iengine.iPortalContainer_Draw(self, *args)
    def ComputeScreenPolygons(self, *args): return _iengine.iPortalContainer_ComputeScreenPolygons(self, *args)
    def GetTotalVertexCount(self): return _iengine.iPortalContainer_GetTotalVertexCount(self)
    scfGetVersion = staticmethod(_iengine.iPortalContainer_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iPortalContainer
    __del__ = lambda self : None;
iPortalContainer_swigregister = _iengine.iPortalContainer_swigregister
iPortalContainer_swigregister(iPortalContainer)

def iPortalContainer_scfGetVersion():
  return _iengine.iPortalContainer_scfGetVersion()
iPortalContainer_scfGetVersion = _iengine.iPortalContainer_scfGetVersion

class iRenderStepContainer(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddStep(self, *args): return _iengine.iRenderStepContainer_AddStep(self, *args)
    def DeleteStep(self, *args): return _iengine.iRenderStepContainer_DeleteStep(self, *args)
    def GetStep(self, *args): return _iengine.iRenderStepContainer_GetStep(self, *args)
    def Find(self, *args): return _iengine.iRenderStepContainer_Find(self, *args)
    def GetStepCount(self): return _iengine.iRenderStepContainer_GetStepCount(self)
    __swig_destroy__ = _iengine.delete_iRenderStepContainer
    __del__ = lambda self : None;
iRenderStepContainer_swigregister = _iengine.iRenderStepContainer_swigregister
iRenderStepContainer_swigregister(iRenderStepContainer)

CS_DEFAULT_RENDERLOOP_NAME = _iengine.CS_DEFAULT_RENDERLOOP_NAME
class iRenderLoop(iRenderStepContainer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Draw(self, *args): return _iengine.iRenderLoop_Draw(self, *args)
    scfGetVersion = staticmethod(_iengine.iRenderLoop_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iRenderLoop
    __del__ = lambda self : None;
iRenderLoop_swigregister = _iengine.iRenderLoop_swigregister
iRenderLoop_swigregister(iRenderLoop)

def iRenderLoop_scfGetVersion():
  return _iengine.iRenderLoop_scfGetVersion()
iRenderLoop_scfGetVersion = _iengine.iRenderLoop_scfGetVersion

class iRenderLoopManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Create(self): return _iengine.iRenderLoopManager_Create(self)
    def Register(self, *args): return _iengine.iRenderLoopManager_Register(self, *args)
    def Retrieve(self, *args): return _iengine.iRenderLoopManager_Retrieve(self, *args)
    def GetName(self, *args): return _iengine.iRenderLoopManager_GetName(self, *args)
    def Unregister(self, *args): return _iengine.iRenderLoopManager_Unregister(self, *args)
    def Load(self, *args): return _iengine.iRenderLoopManager_Load(self, *args)
    def UnregisterAll(self, evenDefault = False): return _iengine.iRenderLoopManager_UnregisterAll(self, evenDefault)
    scfGetVersion = staticmethod(_iengine.iRenderLoopManager_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iRenderLoopManager
    __del__ = lambda self : None;
iRenderLoopManager_swigregister = _iengine.iRenderLoopManager_swigregister
iRenderLoopManager_swigregister(iRenderLoopManager)

def iRenderLoopManager_scfGetVersion():
  return _iengine.iRenderLoopManager_scfGetVersion()
iRenderLoopManager_scfGetVersion = _iengine.iRenderLoopManager_scfGetVersion

class iRenderManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def RenderView(self, *args): return _iengine.iRenderManager_RenderView(self, *args)
    def PrecacheView(self, *args): return _iengine.iRenderManager_PrecacheView(self, *args)
    scfGetVersion = staticmethod(_iengine.iRenderManager_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iRenderManager
    __del__ = lambda self : None;
iRenderManager_swigregister = _iengine.iRenderManager_swigregister
iRenderManager_swigregister(iRenderManager)

def iRenderManager_scfGetVersion():
  return _iengine.iRenderManager_scfGetVersion()
iRenderManager_scfGetVersion = _iengine.iRenderManager_scfGetVersion

class iRenderManagerTargets(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    updateOnce = _iengine.iRenderManagerTargets_updateOnce
    assumeAlwaysUsed = _iengine.iRenderManagerTargets_assumeAlwaysUsed
    clearScreen = _iengine.iRenderManagerTargets_clearScreen
    def RegisterRenderTarget(self, *args): return _iengine.iRenderManagerTargets_RegisterRenderTarget(self, *args)
    def UnregisterRenderTarget(self, *args): return _iengine.iRenderManagerTargets_UnregisterRenderTarget(self, *args)
    def MarkAsUsed(self, *args): return _iengine.iRenderManagerTargets_MarkAsUsed(self, *args)
    scfGetVersion = staticmethod(_iengine.iRenderManagerTargets_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iRenderManagerTargets
    __del__ = lambda self : None;
iRenderManagerTargets_swigregister = _iengine.iRenderManagerTargets_swigregister
iRenderManagerTargets_swigregister(iRenderManagerTargets)

def iRenderManagerTargets_scfGetVersion():
  return _iengine.iRenderManagerTargets_scfGetVersion()
iRenderManagerTargets_scfGetVersion = _iengine.iRenderManagerTargets_scfGetVersion

class iRenderManagerPostEffects(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ClearLayers(self): return _iengine.iRenderManagerPostEffects_ClearLayers(self)
    def AddLayersFromDocument(self, *args): return _iengine.iRenderManagerPostEffects_AddLayersFromDocument(self, *args)
    def AddLayersFromFile(self, *args): return _iengine.iRenderManagerPostEffects_AddLayersFromFile(self, *args)
    scfGetVersion = staticmethod(_iengine.iRenderManagerPostEffects_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iRenderManagerPostEffects
    __del__ = lambda self : None;
iRenderManagerPostEffects_swigregister = _iengine.iRenderManagerPostEffects_swigregister
iRenderManagerPostEffects_swigregister(iRenderManagerPostEffects)

def iRenderManagerPostEffects_scfGetVersion():
  return _iengine.iRenderManagerPostEffects_scfGetVersion()
iRenderManagerPostEffects_scfGetVersion = _iengine.iRenderManagerPostEffects_scfGetVersion

class iRenderManagerVisCull(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVisCuller(self): return _iengine.iRenderManagerVisCull_GetVisCuller(self)
    __swig_destroy__ = _iengine.delete_iRenderManagerVisCull
    __del__ = lambda self : None;
iRenderManagerVisCull_swigregister = _iengine.iRenderManagerVisCull_swigregister
iRenderManagerVisCull_swigregister(iRenderManagerVisCull)

class iSwigCollectionArray(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSize(self): return _iengine.iSwigCollectionArray_GetSize(self)
    def Get(self, *args): return _iengine.iSwigCollectionArray_Get(self, *args)
    def Top(self): return _iengine.iSwigCollectionArray_Top(self)
    def Find(self, *args): return _iengine.iSwigCollectionArray_Find(self, *args)
    def GetIndex(self, *args): return _iengine.iSwigCollectionArray_GetIndex(self, *args)
    def IsEmpty(self): return _iengine.iSwigCollectionArray_IsEmpty(self)
    def GetAll(self, *args): return _iengine.iSwigCollectionArray_GetAll(self, *args)
    __swig_destroy__ = _iengine.delete_iSwigCollectionArray
    __del__ = lambda self : None;
iSwigCollectionArray_swigregister = _iengine.iSwigCollectionArray_swigregister
iSwigCollectionArray_swigregister(iSwigCollectionArray)

class iCollection(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def QueryObject(self): return _iengine.iCollection_QueryObject(self)
    def Add(self, *args): return _iengine.iCollection_Add(self, *args)
    def Remove(self, *args): return _iengine.iCollection_Remove(self, *args)
    def ReleaseAllObjects(self, debug = False): return _iengine.iCollection_ReleaseAllObjects(self, debug)
    def IsParentOf(self, *args): return _iengine.iCollection_IsParentOf(self, *args)
    def FindSector(self, *args): return _iengine.iCollection_FindSector(self, *args)
    def FindMeshObject(self, *args): return _iengine.iCollection_FindMeshObject(self, *args)
    def FindMeshFactory(self, *args): return _iengine.iCollection_FindMeshFactory(self, *args)
    def FindTexture(self, *args): return _iengine.iCollection_FindTexture(self, *args)
    def FindMaterial(self, *args): return _iengine.iCollection_FindMaterial(self, *args)
    def FindShader(self, *args): return _iengine.iCollection_FindShader(self, *args)
    def FindCameraPosition(self, *args): return _iengine.iCollection_FindCameraPosition(self, *args)
    scfGetVersion = staticmethod(_iengine.iCollection_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iCollection
    __del__ = lambda self : None;
iCollection_swigregister = _iengine.iCollection_swigregister
iCollection_swigregister(iCollection)

def iCollection_scfGetVersion():
  return _iengine.iCollection_scfGetVersion()
iCollection_scfGetVersion = _iengine.iCollection_scfGetVersion

class iCollectionArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    scfGetVersion = staticmethod(_iengine.iCollectionArray_scfGetVersion)
    __swig_destroy__ = _iengine.delete_iCollectionArray
    __del__ = lambda self : None;
iCollectionArray_swigregister = _iengine.iCollectionArray_swigregister
iCollectionArray_swigregister(iCollectionArray)

def iCollectionArray_scfGetVersion():
  return _iengine.iCollectionArray_scfGetVersion()
iCollectionArray_scfGetVersion = _iengine.iCollectionArray_scfGetVersion

def CS_REQUEST_ENGINE ():
   return core.CS_REQUEST_PLUGIN("crystalspace.engine.3d", iEngine)



