# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csgfx', [dirname(__file__)])
        except ImportError:
            import _csgfx
            return _csgfx
        if fp is not None:
            try:
                _mod = imp.load_module('_csgfx', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _csgfx = swig_import_helper()
    del swig_import_helper
else:
    import _csgfx
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core

def _SetSCFPointer(*args):
  return _csgfx._SetSCFPointer(*args)
_SetSCFPointer = _csgfx._SetSCFPointer

def _GetSCFPointer():
  return _csgfx._GetSCFPointer()
_GetSCFPointer = _csgfx._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

class iShaderVarStringSetBase(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Request(self, *args): return _csgfx.iShaderVarStringSetBase_Request(self, *args)
    def Contains(self, *args): return _csgfx.iShaderVarStringSetBase_Contains(self, *args)
    def Delete(self, *args): return _csgfx.iShaderVarStringSetBase_Delete(self, *args)
    def Empty(self): return _csgfx.iShaderVarStringSetBase_Empty(self)
    def Clear(self): return _csgfx.iShaderVarStringSetBase_Clear(self)
    def GetSize(self): return _csgfx.iShaderVarStringSetBase_GetSize(self)
    def IsEmpty(self): return _csgfx.iShaderVarStringSetBase_IsEmpty(self)
    __swig_destroy__ = _csgfx.delete_iShaderVarStringSetBase
    __del__ = lambda self : None;
iShaderVarStringSetBase_swigregister = _csgfx.iShaderVarStringSetBase_swigregister
iShaderVarStringSetBase_swigregister(iShaderVarStringSetBase)

CS_IMGFMT_MASK = _csgfx.CS_IMGFMT_MASK
CS_IMGFMT_NONE = _csgfx.CS_IMGFMT_NONE
CS_IMGFMT_TRUECOLOR = _csgfx.CS_IMGFMT_TRUECOLOR
CS_IMGFMT_PALETTED8 = _csgfx.CS_IMGFMT_PALETTED8
CS_IMGFMT_ANY = _csgfx.CS_IMGFMT_ANY
CS_IMGFMT_ALPHA = _csgfx.CS_IMGFMT_ALPHA
CS_IMGFMT_INVALID = _csgfx.CS_IMGFMT_INVALID
csimg2D = _csgfx.csimg2D
csimg3D = _csgfx.csimg3D
csimgCube = _csgfx.csimgCube
class iImage(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetImageData(self): return _csgfx.iImage_GetImageData(self)
    def GetWidth(self): return _csgfx.iImage_GetWidth(self)
    def GetHeight(self): return _csgfx.iImage_GetHeight(self)
    def GetDepth(self): return _csgfx.iImage_GetDepth(self)
    def SetName(self, *args): return _csgfx.iImage_SetName(self, *args)
    def GetName(self): return _csgfx.iImage_GetName(self)
    def GetFormat(self): return _csgfx.iImage_GetFormat(self)
    def GetPalette(self): return _csgfx.iImage_GetPalette(self)
    def GetAlpha(self): return _csgfx.iImage_GetAlpha(self)
    def HasKeyColor(self): return _csgfx.iImage_HasKeyColor(self)
    def GetKeyColor(self): return _csgfx.iImage_GetKeyColor(self)
    def HasMipmaps(self): return _csgfx.iImage_HasMipmaps(self)
    def GetMipmap(self, *args): return _csgfx.iImage_GetMipmap(self, *args)
    def GetRawFormat(self): return _csgfx.iImage_GetRawFormat(self)
    def GetRawData(self): return _csgfx.iImage_GetRawData(self)
    def GetImageType(self): return _csgfx.iImage_GetImageType(self)
    def HasSubImages(self): return _csgfx.iImage_HasSubImages(self)
    def GetSubImage(self, *args): return _csgfx.iImage_GetSubImage(self, *args)
    def GetCookedImageFormat(self): return _csgfx.iImage_GetCookedImageFormat(self)
    def GetCookedImageData(self): return _csgfx.iImage_GetCookedImageData(self)
    scfGetVersion = staticmethod(_csgfx.iImage_scfGetVersion)
    __swig_destroy__ = _csgfx.delete_iImage
    __del__ = lambda self : None;
iImage_swigregister = _csgfx.iImage_swigregister
iImage_swigregister(iImage)

def iImage_scfGetVersion():
  return _csgfx.iImage_scfGetVersion()
iImage_scfGetVersion = _csgfx.iImage_scfGetVersion

class csImageIOFileFormatDescriptions(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgfx.delete_csImageIOFileFormatDescriptions
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _csgfx.new_csImageIOFileFormatDescriptions(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _csgfx.csImageIOFileFormatDescriptions_GetSize(self)
    def Get(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Get(self, *args)
    def Put(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Put(self, *args)
    def Push(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Push(self, *args)
    def Merge(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Merge(self, *args)
    def MergeSmart(self, *args): return _csgfx.csImageIOFileFormatDescriptions_MergeSmart(self, *args)
    def Pop(self): return _csgfx.csImageIOFileFormatDescriptions_Pop(self)
    def Top(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Top(self, *args)
    def Insert(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Insert(self, *args)
    def Contains(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Contains(self, *args)
    def DeleteAll(self): return _csgfx.csImageIOFileFormatDescriptions_DeleteAll(self)
    def Truncate(self, *args): return _csgfx.csImageIOFileFormatDescriptions_Truncate(self, *args)
    def Empty(self): return _csgfx.csImageIOFileFormatDescriptions_Empty(self)
    def IsEmpty(self): return _csgfx.csImageIOFileFormatDescriptions_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _csgfx.csImageIOFileFormatDescriptions_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _csgfx.csImageIOFileFormatDescriptions_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _csgfx.csImageIOFileFormatDescriptions_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _csgfx.csImageIOFileFormatDescriptions_DeleteRange(self, *args)
    def __eq__(self, *args): return _csgfx.csImageIOFileFormatDescriptions___eq__(self, *args)
    def __ne__(self, *args): return _csgfx.csImageIOFileFormatDescriptions___ne__(self, *args)
    def GetAllocator(self): return _csgfx.csImageIOFileFormatDescriptions_GetAllocator(self)
csImageIOFileFormatDescriptions_swigregister = _csgfx.csImageIOFileFormatDescriptions_swigregister
csImageIOFileFormatDescriptions_swigregister(csImageIOFileFormatDescriptions)

CS_IMAGEIO_LOAD = _csgfx.CS_IMAGEIO_LOAD
CS_IMAGEIO_SAVE = _csgfx.CS_IMAGEIO_SAVE
class csImageIOFileFormatDescription(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mime = _swig_property(_csgfx.csImageIOFileFormatDescription_mime_get)
    subtype = _swig_property(_csgfx.csImageIOFileFormatDescription_subtype_get)
    cap = _swig_property(_csgfx.csImageIOFileFormatDescription_cap_get, _csgfx.csImageIOFileFormatDescription_cap_set)
    def __init__(self): 
        this = _csgfx.new_csImageIOFileFormatDescription()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgfx.delete_csImageIOFileFormatDescription
    __del__ = lambda self : None;
csImageIOFileFormatDescription_swigregister = _csgfx.csImageIOFileFormatDescription_swigregister
csImageIOFileFormatDescription_swigregister(csImageIOFileFormatDescription)

class iImageIO(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetDescription(self): return _csgfx.iImageIO_GetDescription(self)
    def Load(self, *args): return _csgfx.iImageIO_Load(self, *args)
    def Save(self, *args): return _csgfx.iImageIO_Save(self, *args)
    scfGetVersion = staticmethod(_csgfx.iImageIO_scfGetVersion)
    __swig_destroy__ = _csgfx.delete_iImageIO
    __del__ = lambda self : None;
iImageIO_swigregister = _csgfx.iImageIO_swigregister
iImageIO_swigregister(iImageIO)

def iImageIO_scfGetVersion():
  return _csgfx.iImageIO_scfGetVersion()
iImageIO_scfGetVersion = _csgfx.iImageIO_scfGetVersion

class iAnimatedImage(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Animate(self, *args): return _csgfx.iAnimatedImage_Animate(self, *args)
    def IsAnimated(self): return _csgfx.iAnimatedImage_IsAnimated(self)
    scfGetVersion = staticmethod(_csgfx.iAnimatedImage_scfGetVersion)
    __swig_destroy__ = _csgfx.delete_iAnimatedImage
    __del__ = lambda self : None;
iAnimatedImage_swigregister = _csgfx.iAnimatedImage_swigregister
iAnimatedImage_swigregister(iAnimatedImage)

def iAnimatedImage_scfGetVersion():
  return _csgfx.iAnimatedImage_scfGetVersion()
iAnimatedImage_scfGetVersion = _csgfx.iAnimatedImage_scfGetVersion

class iProcTexture(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetAlwaysAnimate(self): return _csgfx.iProcTexture_GetAlwaysAnimate(self)
    def SetAlwaysAnimate(self, *args): return _csgfx.iProcTexture_SetAlwaysAnimate(self, *args)
    def GetFactory(self): return _csgfx.iProcTexture_GetFactory(self)
iProcTexture_swigregister = _csgfx.iProcTexture_swigregister
iProcTexture_swigregister(iProcTexture)

class csRGBcolor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    red = _swig_property(_csgfx.csRGBcolor_red_get, _csgfx.csRGBcolor_red_set)
    green = _swig_property(_csgfx.csRGBcolor_green_get, _csgfx.csRGBcolor_green_set)
    blue = _swig_property(_csgfx.csRGBcolor_blue_get, _csgfx.csRGBcolor_blue_set)
    def __init__(self, *args): 
        this = _csgfx.new_csRGBcolor(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _csgfx.csRGBcolor_Set(self, *args)
    def __eq__(self, *args): return _csgfx.csRGBcolor___eq__(self, *args)
    def __ne__(self, *args): return _csgfx.csRGBcolor___ne__(self, *args)
    def __add__(self, *args): return _csgfx.csRGBcolor___add__(self, *args)
    def UnsafeAdd(self, *args): return _csgfx.csRGBcolor_UnsafeAdd(self, *args)
    def SafeAdd(self, *args): return _csgfx.csRGBcolor_SafeAdd(self, *args)
    __swig_destroy__ = _csgfx.delete_csRGBcolor
    __del__ = lambda self : None;
csRGBcolor_swigregister = _csgfx.csRGBcolor_swigregister
csRGBcolor_swigregister(csRGBcolor)

class csRGBpixel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    red = _swig_property(_csgfx.csRGBpixel_red_get, _csgfx.csRGBpixel_red_set)
    green = _swig_property(_csgfx.csRGBpixel_green_get, _csgfx.csRGBpixel_green_set)
    blue = _swig_property(_csgfx.csRGBpixel_blue_get, _csgfx.csRGBpixel_blue_set)
    alpha = _swig_property(_csgfx.csRGBpixel_alpha_get, _csgfx.csRGBpixel_alpha_set)
    def __init__(self, *args): 
        this = _csgfx.new_csRGBpixel(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _csgfx.csRGBpixel___eq__(self, *args)
    def __ne__(self, *args): return _csgfx.csRGBpixel___ne__(self, *args)
    def asRGBcolor(self): return _csgfx.csRGBpixel_asRGBcolor(self)
    def eq(self, *args): return _csgfx.csRGBpixel_eq(self, *args)
    def Intensity(self): return _csgfx.csRGBpixel_Intensity(self)
    def Luminance(self): return _csgfx.csRGBpixel_Luminance(self)
    def Set(self, *args): return _csgfx.csRGBpixel_Set(self, *args)
    def __iadd__(self, *args): return _csgfx.csRGBpixel___iadd__(self, *args)
    def UnsafeAdd(self, *args): return _csgfx.csRGBpixel_UnsafeAdd(self, *args)
    def SafeAdd(self, *args): return _csgfx.csRGBpixel_SafeAdd(self, *args)
    __swig_destroy__ = _csgfx.delete_csRGBpixel
    __del__ = lambda self : None;
csRGBpixel_swigregister = _csgfx.csRGBpixel_swigregister
csRGBpixel_swigregister(csRGBpixel)

R_COEF = _csgfx.R_COEF
G_COEF = _csgfx.G_COEF
B_COEF = _csgfx.B_COEF
R_COEF_SQ = _csgfx.R_COEF_SQ
G_COEF_SQ = _csgfx.G_COEF_SQ
B_COEF_SQ = _csgfx.B_COEF_SQ
class iShaderVarStringSet(iShaderVarStringSetBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    scfGetVersion = staticmethod(_csgfx.iShaderVarStringSet_scfGetVersion)
    __swig_destroy__ = _csgfx.delete_iShaderVarStringSet
    __del__ = lambda self : None;
iShaderVarStringSet_swigregister = _csgfx.iShaderVarStringSet_swigregister
iShaderVarStringSet_swigregister(iShaderVarStringSet)
cvar = _csgfx.cvar
InvalidShaderVarStringID = cvar.InvalidShaderVarStringID

def iShaderVarStringSet_scfGetVersion():
  return _csgfx.iShaderVarStringSet_scfGetVersion()
iShaderVarStringSet_scfGetVersion = _csgfx.iShaderVarStringSet_scfGetVersion

class iShaderVariableAccessor(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def PreGetValue(self, *args): return _csgfx.iShaderVariableAccessor_PreGetValue(self, *args)
    __swig_destroy__ = _csgfx.delete_iShaderVariableAccessor
    __del__ = lambda self : None;
iShaderVariableAccessor_swigregister = _csgfx.iShaderVariableAccessor_swigregister
iShaderVariableAccessor_swigregister(iShaderVariableAccessor)

class csShaderVariable(core.csRefCount):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNKNOWN = _csgfx.csShaderVariable_UNKNOWN
    INT = _csgfx.csShaderVariable_INT
    FLOAT = _csgfx.csShaderVariable_FLOAT
    TEXTURE = _csgfx.csShaderVariable_TEXTURE
    RENDERBUFFER = _csgfx.csShaderVariable_RENDERBUFFER
    VECTOR2 = _csgfx.csShaderVariable_VECTOR2
    VECTOR3 = _csgfx.csShaderVariable_VECTOR3
    VECTOR4 = _csgfx.csShaderVariable_VECTOR4
    MATRIX3X3 = _csgfx.csShaderVariable_MATRIX3X3
    MATRIX = _csgfx.csShaderVariable_MATRIX
    TRANSFORM = _csgfx.csShaderVariable_TRANSFORM
    ARRAY = _csgfx.csShaderVariable_ARRAY
    MATRIX4X4 = _csgfx.csShaderVariable_MATRIX4X4
    COLOR = _csgfx.csShaderVariable_COLOR
    def __init__(self, *args): 
        this = _csgfx.new_csShaderVariable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgfx.delete_csShaderVariable
    __del__ = lambda self : None;
    def assign(self, *args): return _csgfx.csShaderVariable_assign(self, *args)
    def GetType(self): return _csgfx.csShaderVariable_GetType(self)
    def SetType(self, *args): return _csgfx.csShaderVariable_SetType(self, *args)
    def SetAccessor(self, *args): return _csgfx.csShaderVariable_SetAccessor(self, *args)
    def SetName(self, *args): return _csgfx.csShaderVariable_SetName(self, *args)
    def GetName(self): return _csgfx.csShaderVariable_GetName(self)
    def GetAccessor(self): return _csgfx.csShaderVariable_GetAccessor(self)
    def GetAccessorData(self): return _csgfx.csShaderVariable_GetAccessorData(self)
    def SetValue(self, *args): return _csgfx.csShaderVariable_SetValue(self, *args)
    def AddVariableToArray(self, *args): return _csgfx.csShaderVariable_AddVariableToArray(self, *args)
    def RemoveFromArray(self, *args): return _csgfx.csShaderVariable_RemoveFromArray(self, *args)
    def SetArraySize(self, *args): return _csgfx.csShaderVariable_SetArraySize(self, *args)
    def GetArraySize(self): return _csgfx.csShaderVariable_GetArraySize(self)
    def GetArrayElement(self, *args): return _csgfx.csShaderVariable_GetArrayElement(self, *args)
    def SetArrayElement(self, *args): return _csgfx.csShaderVariable_SetArrayElement(self, *args)
    def FindArrayElement(self, *args): return _csgfx.csShaderVariable_FindArrayElement(self, *args)
    def GetValue(self, *args): return _csgfx.csShaderVariable_GetValue(self, *args)
csShaderVariable_swigregister = _csgfx.csShaderVariable_swigregister
csShaderVariable_swigregister(csShaderVariable)

class csShaderVariableArrayReadOnly(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSize(self): return _csgfx.csShaderVariableArrayReadOnly_GetSize(self)
    def Get(self, *args): return _csgfx.csShaderVariableArrayReadOnly_Get(self, *args)
    def Top(self): return _csgfx.csShaderVariableArrayReadOnly_Top(self)
    def Find(self, *args): return _csgfx.csShaderVariableArrayReadOnly_Find(self, *args)
    def GetIndex(self, *args): return _csgfx.csShaderVariableArrayReadOnly_GetIndex(self, *args)
    def IsEmpty(self): return _csgfx.csShaderVariableArrayReadOnly_IsEmpty(self)
    def GetAll(self, *args): return _csgfx.csShaderVariableArrayReadOnly_GetAll(self, *args)
    __swig_destroy__ = _csgfx.delete_csShaderVariableArrayReadOnly
    __del__ = lambda self : None;
csShaderVariableArrayReadOnly_swigregister = _csgfx.csShaderVariableArrayReadOnly_swigregister
csShaderVariableArrayReadOnly_swigregister(csShaderVariableArrayReadOnly)

class csShaderVariableArrayChangeElements(csShaderVariableArrayReadOnly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Get(self, *args): return _csgfx.csShaderVariableArrayChangeElements_Get(self, *args)
    def Top(self, *args): return _csgfx.csShaderVariableArrayChangeElements_Top(self, *args)
    __swig_destroy__ = _csgfx.delete_csShaderVariableArrayChangeElements
    __del__ = lambda self : None;
csShaderVariableArrayChangeElements_swigregister = _csgfx.csShaderVariableArrayChangeElements_swigregister
csShaderVariableArrayChangeElements_swigregister(csShaderVariableArrayChangeElements)

class csShaderVariableArrayChangeAll(csShaderVariableArrayChangeElements):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetSize(self, *args): return _csgfx.csShaderVariableArrayChangeAll_SetSize(self, *args)
    def GetExtend(self, *args): return _csgfx.csShaderVariableArrayChangeAll_GetExtend(self, *args)
    def Put(self, *args): return _csgfx.csShaderVariableArrayChangeAll_Put(self, *args)
    def Push(self, *args): return _csgfx.csShaderVariableArrayChangeAll_Push(self, *args)
    def PushSmart(self, *args): return _csgfx.csShaderVariableArrayChangeAll_PushSmart(self, *args)
    def Pop(self): return _csgfx.csShaderVariableArrayChangeAll_Pop(self)
    def Insert(self, *args): return _csgfx.csShaderVariableArrayChangeAll_Insert(self, *args)
    def DeleteAll(self): return _csgfx.csShaderVariableArrayChangeAll_DeleteAll(self)
    def Truncate(self, *args): return _csgfx.csShaderVariableArrayChangeAll_Truncate(self, *args)
    def Empty(self): return _csgfx.csShaderVariableArrayChangeAll_Empty(self)
    def DeleteIndex(self, *args): return _csgfx.csShaderVariableArrayChangeAll_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _csgfx.csShaderVariableArrayChangeAll_DeleteIndexFast(self, *args)
    def Delete(self, *args): return _csgfx.csShaderVariableArrayChangeAll_Delete(self, *args)
    __swig_destroy__ = _csgfx.delete_csShaderVariableArrayChangeAll
    __del__ = lambda self : None;
csShaderVariableArrayChangeAll_swigregister = _csgfx.csShaderVariableArrayChangeAll_swigregister
csShaderVariableArrayChangeAll_swigregister(csShaderVariableArrayChangeAll)

class csImageBaseBase(iImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _csgfx.csImageBaseBase_IncRef(self)
    def DecRef(self): return _csgfx.csImageBaseBase_DecRef(self)
    def GetRefCount(self): return _csgfx.csImageBaseBase_GetRefCount(self)
    def QueryInterface(self, *args): return _csgfx.csImageBaseBase_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _csgfx.csImageBaseBase_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _csgfx.csImageBaseBase_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _csgfx.csImageBaseBase_GetInterfaceMetadata(self)
csImageBaseBase_swigregister = _csgfx.csImageBaseBase_swigregister
csImageBaseBase_swigregister(csImageBaseBase)

class csImageBase(csImageBaseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _csgfx.delete_csImageBase
    __del__ = lambda self : None;
    def GetDepth(self): return _csgfx.csImageBase_GetDepth(self)
    def SetName(self, *args): return _csgfx.csImageBase_SetName(self, *args)
    def GetName(self): return _csgfx.csImageBase_GetName(self)
    def GetPalette(self): return _csgfx.csImageBase_GetPalette(self)
    def GetAlpha(self): return _csgfx.csImageBase_GetAlpha(self)
    def HasKeyColor(self): return _csgfx.csImageBase_HasKeyColor(self)
    def GetKeyColor(self, *args): return _csgfx.csImageBase_GetKeyColor(self, *args)
    def HasMipmaps(self): return _csgfx.csImageBase_HasMipmaps(self)
    def GetMipmap(self, *args): return _csgfx.csImageBase_GetMipmap(self, *args)
    def GetImageType(self): return _csgfx.csImageBase_GetImageType(self)
    def HasSubImages(self): return _csgfx.csImageBase_HasSubImages(self)
    def GetSubImage(self, *args): return _csgfx.csImageBase_GetSubImage(self, *args)
    def GetCookedImageFormat(self): return _csgfx.csImageBase_GetCookedImageFormat(self)
    def GetCookedImageData(self): return _csgfx.csImageBase_GetCookedImageData(self)
csImageBase_swigregister = _csgfx.csImageBase_swigregister
csImageBase_swigregister(csImageBase)

class csImageMemoryBase(csImageBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _csgfx.csImageMemoryBase_IncRef(self)
    def DecRef(self): return _csgfx.csImageMemoryBase_DecRef(self)
    def GetRefCount(self): return _csgfx.csImageMemoryBase_GetRefCount(self)
    def QueryInterface(self, *args): return _csgfx.csImageMemoryBase_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _csgfx.csImageMemoryBase_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _csgfx.csImageMemoryBase_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _csgfx.csImageMemoryBase_GetInterfaceMetadata(self)
csImageMemoryBase_swigregister = _csgfx.csImageMemoryBase_swigregister
csImageMemoryBase_swigregister(csImageMemoryBase)

class csImageMemory(csImageMemoryBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgfx.new_csImageMemory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgfx.delete_csImageMemory
    __del__ = lambda self : None;
    def GetImagePtr(self): return _csgfx.csImageMemory_GetImagePtr(self)
    def GetPalettePtr(self): return _csgfx.csImageMemory_GetPalettePtr(self)
    def GetAlphaPtr(self): return _csgfx.csImageMemory_GetAlphaPtr(self)
    def GetImageData(self): return _csgfx.csImageMemory_GetImageData(self)
    def GetWidth(self): return _csgfx.csImageMemory_GetWidth(self)
    def GetHeight(self): return _csgfx.csImageMemory_GetHeight(self)
    def GetDepth(self): return _csgfx.csImageMemory_GetDepth(self)
    def GetRawFormat(self): return _csgfx.csImageMemory_GetRawFormat(self)
    def GetRawData(self): return _csgfx.csImageMemory_GetRawData(self)
    def GetFormat(self): return _csgfx.csImageMemory_GetFormat(self)
    def GetPalette(self): return _csgfx.csImageMemory_GetPalette(self)
    def GetAlpha(self): return _csgfx.csImageMemory_GetAlpha(self)
    def HasKeyColor(self): return _csgfx.csImageMemory_HasKeyColor(self)
    def GetKeyColor(self): return _csgfx.csImageMemory_GetKeyColor(self)
    def Clear(self, *args): return _csgfx.csImageMemory_Clear(self, *args)
    def CheckAlpha(self): return _csgfx.csImageMemory_CheckAlpha(self)
    def SetFormat(self, *args): return _csgfx.csImageMemory_SetFormat(self, *args)
    def SetKeyColor(self, *args): return _csgfx.csImageMemory_SetKeyColor(self, *args)
    def ClearKeyColor(self): return _csgfx.csImageMemory_ClearKeyColor(self)
    def ApplyKeyColor(self): return _csgfx.csImageMemory_ApplyKeyColor(self)
    def GetImageType(self): return _csgfx.csImageMemory_GetImageType(self)
    def SetImageType(self, *args): return _csgfx.csImageMemory_SetImageType(self, *args)
    def HasMipmaps(self): return _csgfx.csImageMemory_HasMipmaps(self)
    def GetMipmap(self, *args): return _csgfx.csImageMemory_GetMipmap(self, *args)
    def SetMipmap(self, *args): return _csgfx.csImageMemory_SetMipmap(self, *args)
    def Copy(self, *args): return _csgfx.csImageMemory_Copy(self, *args)
    def CopyScale(self, *args): return _csgfx.csImageMemory_CopyScale(self, *args)
    def CopyTile(self, *args): return _csgfx.csImageMemory_CopyTile(self, *args)
    def ConvertFromRGBA(self, *args): return _csgfx.csImageMemory_ConvertFromRGBA(self, *args)
    def ConvertFromPal8(self, *args): return _csgfx.csImageMemory_ConvertFromPal8(self, *args)
csImageMemory_swigregister = _csgfx.csImageMemory_swigregister
csImageMemory_swigregister(csImageMemory)

class csImageManipulate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Rescale = staticmethod(_csgfx.csImageManipulate_Rescale)
    Mipmap = staticmethod(_csgfx.csImageManipulate_Mipmap)
    Blur = staticmethod(_csgfx.csImageManipulate_Blur)
    Crop = staticmethod(_csgfx.csImageManipulate_Crop)
    Sharpen = staticmethod(_csgfx.csImageManipulate_Sharpen)
    TransformColor = staticmethod(_csgfx.csImageManipulate_TransformColor)
    Gray = staticmethod(_csgfx.csImageManipulate_Gray)
    RenormalizeNormals = staticmethod(_csgfx.csImageManipulate_RenormalizeNormals)
    def __init__(self): 
        this = _csgfx.new_csImageManipulate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgfx.delete_csImageManipulate
    __del__ = lambda self : None;
csImageManipulate_swigregister = _csgfx.csImageManipulate_swigregister
csImageManipulate_swigregister(csImageManipulate)

def csImageManipulate_Rescale(*args):
  return _csgfx.csImageManipulate_Rescale(*args)
csImageManipulate_Rescale = _csgfx.csImageManipulate_Rescale

def csImageManipulate_Mipmap(*args):
  return _csgfx.csImageManipulate_Mipmap(*args)
csImageManipulate_Mipmap = _csgfx.csImageManipulate_Mipmap

def csImageManipulate_Blur(*args):
  return _csgfx.csImageManipulate_Blur(*args)
csImageManipulate_Blur = _csgfx.csImageManipulate_Blur

def csImageManipulate_Crop(*args):
  return _csgfx.csImageManipulate_Crop(*args)
csImageManipulate_Crop = _csgfx.csImageManipulate_Crop

def csImageManipulate_Sharpen(*args):
  return _csgfx.csImageManipulate_Sharpen(*args)
csImageManipulate_Sharpen = _csgfx.csImageManipulate_Sharpen

def csImageManipulate_TransformColor(*args):
  return _csgfx.csImageManipulate_TransformColor(*args)
csImageManipulate_TransformColor = _csgfx.csImageManipulate_TransformColor

def csImageManipulate_Gray(*args):
  return _csgfx.csImageManipulate_Gray(*args)
csImageManipulate_Gray = _csgfx.csImageManipulate_Gray

def csImageManipulate_RenormalizeNormals(*args):
  return _csgfx.csImageManipulate_RenormalizeNormals(*args)
csImageManipulate_RenormalizeNormals = _csgfx.csImageManipulate_RenormalizeNormals

def CS_REQUEST_IMAGELOADER ():
  return core.CS_REQUEST_PLUGIN("crystalspace.graphic.image.io.multiplexer",
    iImageIO)



