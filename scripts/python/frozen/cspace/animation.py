# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_animation', [dirname(__file__)])
        except ImportError:
            import _animation
            return _animation
        if fp is not None:
            try:
                _mod = imp.load_module('_animation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _animation = swig_import_helper()
    del swig_import_helper
else:
    import _animation
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core

def _SetSCFPointer(*args):
  return _animation._SetSCFPointer(*args)
_SetSCFPointer = _animation._SetSCFPointer

def _GetSCFPointer():
  return _animation._GetSCFPointer()
_GetSCFPointer = _animation._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

class iSkeletonManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateSkeletonFactory(self, *args): return _animation.iSkeletonManager_CreateSkeletonFactory(self, *args)
    def FindSkeletonFactory(self, *args): return _animation.iSkeletonManager_FindSkeletonFactory(self, *args)
    def ClearSkeletonFactories(self): return _animation.iSkeletonManager_ClearSkeletonFactories(self)
    def CreateAnimPacketFactory(self, *args): return _animation.iSkeletonManager_CreateAnimPacketFactory(self, *args)
    def FindAnimPacketFactory(self, *args): return _animation.iSkeletonManager_FindAnimPacketFactory(self, *args)
    def ClearAnimPacketFactories(self): return _animation.iSkeletonManager_ClearAnimPacketFactories(self)
    def ClearAll(self): return _animation.iSkeletonManager_ClearAll(self)
    scfGetVersion = staticmethod(_animation.iSkeletonManager_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonManager
    __del__ = lambda self : None;
iSkeletonManager_swigregister = _animation.iSkeletonManager_swigregister
iSkeletonManager_swigregister(iSkeletonManager)
cvar = _animation.cvar
InvalidBoneID = cvar.InvalidBoneID

def iSkeletonManager_scfGetVersion():
  return _animation.iSkeletonManager_scfGetVersion()
iSkeletonManager_scfGetVersion = _animation.iSkeletonManager_scfGetVersion

class iSkeletonFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateBone(self, *args): return _animation.iSkeletonFactory_CreateBone(self, *args)
    def FindBone(self, *args): return _animation.iSkeletonFactory_FindBone(self, *args)
    def RemoveBone(self, *args): return _animation.iSkeletonFactory_RemoveBone(self, *args)
    def GetBoneParent(self, *args): return _animation.iSkeletonFactory_GetBoneParent(self, *args)
    def HasBone(self, *args): return _animation.iSkeletonFactory_HasBone(self, *args)
    def SetBoneName(self, *args): return _animation.iSkeletonFactory_SetBoneName(self, *args)
    def GetBoneName(self, *args): return _animation.iSkeletonFactory_GetBoneName(self, *args)
    def GetTopBoneID(self): return _animation.iSkeletonFactory_GetTopBoneID(self)
    def GetTransformBoneSpace(self, *args): return _animation.iSkeletonFactory_GetTransformBoneSpace(self, *args)
    def SetTransformBoneSpace(self, *args): return _animation.iSkeletonFactory_SetTransformBoneSpace(self, *args)
    def GetTransformAbsSpace(self, *args): return _animation.iSkeletonFactory_GetTransformAbsSpace(self, *args)
    def SetTransformAbsSpace(self, *args): return _animation.iSkeletonFactory_SetTransformAbsSpace(self, *args)
    def CreateSkeleton(self): return _animation.iSkeletonFactory_CreateSkeleton(self)
    def GetAnimationPacket(self): return _animation.iSkeletonFactory_GetAnimationPacket(self)
    def SetAnimationPacket(self, *args): return _animation.iSkeletonFactory_SetAnimationPacket(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonFactory
    __del__ = lambda self : None;
iSkeletonFactory_swigregister = _animation.iSkeletonFactory_swigregister
iSkeletonFactory_swigregister(iSkeletonFactory)

def iSkeletonFactory_scfGetVersion():
  return _animation.iSkeletonFactory_scfGetVersion()
iSkeletonFactory_scfGetVersion = _animation.iSkeletonFactory_scfGetVersion

class iSkeleton(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSceneNode(self): return _animation.iSkeleton_GetSceneNode(self)
    def GetTransformBoneSpace(self, *args): return _animation.iSkeleton_GetTransformBoneSpace(self, *args)
    def SetTransformBoneSpace(self, *args): return _animation.iSkeleton_SetTransformBoneSpace(self, *args)
    def GetTransformAbsSpace(self, *args): return _animation.iSkeleton_GetTransformAbsSpace(self, *args)
    def SetTransformAbsSpace(self, *args): return _animation.iSkeleton_SetTransformAbsSpace(self, *args)
    def GetTransformBindSpace(self, *args): return _animation.iSkeleton_GetTransformBindSpace(self, *args)
    def SetTransformBindSpace(self, *args): return _animation.iSkeleton_SetTransformBindSpace(self, *args)
    def GetStateAbsSpace(self): return _animation.iSkeleton_GetStateAbsSpace(self)
    def GetStateBoneSpace(self): return _animation.iSkeleton_GetStateBoneSpace(self)
    def GetStateBindSpace(self): return _animation.iSkeleton_GetStateBindSpace(self)
    def GetFactory(self): return _animation.iSkeleton_GetFactory(self)
    def GetAnimationPacket(self): return _animation.iSkeleton_GetAnimationPacket(self)
    def SetAnimationPacket(self, *args): return _animation.iSkeleton_SetAnimationPacket(self, *args)
    def RecreateSkeleton(self): return _animation.iSkeleton_RecreateSkeleton(self)
    def UpdateSkeleton(self, *args): return _animation.iSkeleton_UpdateSkeleton(self, *args)
    def GetSkeletonStateVersion(self): return _animation.iSkeleton_GetSkeletonStateVersion(self)
    def SetAnimatedMesh(self, *args): return _animation.iSkeleton_SetAnimatedMesh(self, *args)
    def GetAnimatedMesh(self): return _animation.iSkeleton_GetAnimatedMesh(self)
    scfGetVersion = staticmethod(_animation.iSkeleton_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeleton
    __del__ = lambda self : None;
iSkeleton_swigregister = _animation.iSkeleton_swigregister
iSkeleton_swigregister(iSkeleton)

def iSkeleton_scfGetVersion():
  return _animation.iSkeleton_scfGetVersion()
iSkeleton_scfGetVersion = _animation.iSkeleton_scfGetVersion

class csSkeletalState(core.csRefCount):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _animation.new_csSkeletalState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _animation.delete_csSkeletalState
    __del__ = lambda self : None;
    def GetVector(self, *args): return _animation.csSkeletalState_GetVector(self, *args)
    def GetQuaternion(self, *args): return _animation.csSkeletalState_GetQuaternion(self, *args)
    def IsBoneUsed(self, *args): return _animation.csSkeletalState_IsBoneUsed(self, *args)
    def SetBoneUsed(self, *args): return _animation.csSkeletalState_SetBoneUsed(self, *args)
    def GetBoneCount(self): return _animation.csSkeletalState_GetBoneCount(self)
    def Setup(self, *args): return _animation.csSkeletalState_Setup(self, *args)
csSkeletalState_swigregister = _animation.csSkeletalState_swigregister
csSkeletalState_swigregister(csSkeletalState)

class iBodyManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateBodySkeleton(self, *args): return _animation.iBodyManager_CreateBodySkeleton(self, *args)
    def FindBodySkeleton(self, *args): return _animation.iBodyManager_FindBodySkeleton(self, *args)
    def ClearBodySkeletons(self): return _animation.iBodyManager_ClearBodySkeletons(self)
    scfGetVersion = staticmethod(_animation.iBodyManager_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodyManager
    __del__ = lambda self : None;
iBodyManager_swigregister = _animation.iBodyManager_swigregister
iBodyManager_swigregister(iBodyManager)

def iBodyManager_scfGetVersion():
  return _animation.iBodyManager_scfGetVersion()
iBodyManager_scfGetVersion = _animation.iBodyManager_scfGetVersion

class iBodySkeleton(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _animation.iBodySkeleton_GetName(self)
    def GetSkeletonFactory(self): return _animation.iBodySkeleton_GetSkeletonFactory(self)
    def ClearAll(self): return _animation.iBodySkeleton_ClearAll(self)
    def CreateBodyBone(self, *args): return _animation.iBodySkeleton_CreateBodyBone(self, *args)
    def ClearBodyBones(self): return _animation.iBodySkeleton_ClearBodyBones(self)
    def CreateBodyChain(self, *args): return _animation.iBodySkeleton_CreateBodyChain(self, *args)
    def FindBodyChain(self, *args): return _animation.iBodySkeleton_FindBodyChain(self, *args)
    def ClearBodyChains(self): return _animation.iBodySkeleton_ClearBodyChains(self)
    def FindBodyBone(self, *args): return _animation.iBodySkeleton_FindBodyBone(self, *args)
    scfGetVersion = staticmethod(_animation.iBodySkeleton_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodySkeleton
    __del__ = lambda self : None;
iBodySkeleton_swigregister = _animation.iBodySkeleton_swigregister
iBodySkeleton_swigregister(iBodySkeleton)

def iBodySkeleton_scfGetVersion():
  return _animation.iBodySkeleton_scfGetVersion()
iBodySkeleton_scfGetVersion = _animation.iBodySkeleton_scfGetVersion

class iBodyBone(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetAnimeshBone(self): return _animation.iBodyBone_GetAnimeshBone(self)
    def CreateBoneProperties(self): return _animation.iBodyBone_CreateBoneProperties(self)
    def GetBoneProperties(self): return _animation.iBodyBone_GetBoneProperties(self)
    def CreateBoneJoint(self): return _animation.iBodyBone_CreateBoneJoint(self)
    def GetBoneJoint(self): return _animation.iBodyBone_GetBoneJoint(self)
    def CreateBoneCollider(self): return _animation.iBodyBone_CreateBoneCollider(self)
    def GetBoneColliderCount(self): return _animation.iBodyBone_GetBoneColliderCount(self)
    def GetBoneCollider(self, *args): return _animation.iBodyBone_GetBoneCollider(self, *args)
    scfGetVersion = staticmethod(_animation.iBodyBone_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodyBone
    __del__ = lambda self : None;
iBodyBone_swigregister = _animation.iBodyBone_swigregister
iBodyBone_swigregister(iBodyBone)

def iBodyBone_scfGetVersion():
  return _animation.iBodyBone_scfGetVersion()
iBodyBone_scfGetVersion = _animation.iBodyBone_scfGetVersion

class iBodyChain(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _animation.iBodyChain_GetName(self)
    def GetRootNode(self): return _animation.iBodyChain_GetRootNode(self)
    scfGetVersion = staticmethod(_animation.iBodyChain_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodyChain
    __del__ = lambda self : None;
iBodyChain_swigregister = _animation.iBodyChain_swigregister
iBodyChain_swigregister(iBodyChain)

def iBodyChain_scfGetVersion():
  return _animation.iBodyChain_scfGetVersion()
iBodyChain_scfGetVersion = _animation.iBodyChain_scfGetVersion

class iBodyChainNode(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetBodyBone(self): return _animation.iBodyChainNode_GetBodyBone(self)
    def GetChildCount(self): return _animation.iBodyChainNode_GetChildCount(self)
    def GetChild(self, *args): return _animation.iBodyChainNode_GetChild(self, *args)
    def GetParent(self): return _animation.iBodyChainNode_GetParent(self)
    scfGetVersion = staticmethod(_animation.iBodyChainNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodyChainNode
    __del__ = lambda self : None;
iBodyChainNode_swigregister = _animation.iBodyChainNode_swigregister
iBodyChainNode_swigregister(iBodyChainNode)

def iBodyChainNode_scfGetVersion():
  return _animation.iBodyChainNode_scfGetVersion()
iBodyChainNode_scfGetVersion = _animation.iBodyChainNode_scfGetVersion

class iBodyBoneProperties(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetMass(self, *args): return _animation.iBodyBoneProperties_SetMass(self, *args)
    def GetMass(self): return _animation.iBodyBoneProperties_GetMass(self)
    def SetCenter(self, *args): return _animation.iBodyBoneProperties_SetCenter(self, *args)
    def GetCenter(self): return _animation.iBodyBoneProperties_GetCenter(self)
    def SetInertia(self, *args): return _animation.iBodyBoneProperties_SetInertia(self, *args)
    def GetInertia(self): return _animation.iBodyBoneProperties_GetInertia(self)
    scfGetVersion = staticmethod(_animation.iBodyBoneProperties_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodyBoneProperties
    __del__ = lambda self : None;
iBodyBoneProperties_swigregister = _animation.iBodyBoneProperties_swigregister
iBodyBoneProperties_swigregister(iBodyBoneProperties)

def iBodyBoneProperties_scfGetVersion():
  return _animation.iBodyBoneProperties_scfGetVersion()
iBodyBoneProperties_scfGetVersion = _animation.iBodyBoneProperties_scfGetVersion

class iBodyBoneJoint(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetBounce(self, *args): return _animation.iBodyBoneJoint_SetBounce(self, *args)
    def SetMaximumAngle(self, *args): return _animation.iBodyBoneJoint_SetMaximumAngle(self, *args)
    def SetMaximumDistance(self, *args): return _animation.iBodyBoneJoint_SetMaximumDistance(self, *args)
    def SetMinimumAngle(self, *args): return _animation.iBodyBoneJoint_SetMinimumAngle(self, *args)
    def SetMinimumDistance(self, *args): return _animation.iBodyBoneJoint_SetMinimumDistance(self, *args)
    def SetRotConstraints(self, *args): return _animation.iBodyBoneJoint_SetRotConstraints(self, *args)
    def SetTransConstraints(self, *args): return _animation.iBodyBoneJoint_SetTransConstraints(self, *args)
    def SetTransform(self, *args): return _animation.iBodyBoneJoint_SetTransform(self, *args)
    def GetBounce(self): return _animation.iBodyBoneJoint_GetBounce(self)
    def GetMaximumAngle(self): return _animation.iBodyBoneJoint_GetMaximumAngle(self)
    def GetMaximumDistance(self): return _animation.iBodyBoneJoint_GetMaximumDistance(self)
    def GetMinimumAngle(self): return _animation.iBodyBoneJoint_GetMinimumAngle(self)
    def GetMinimumDistance(self): return _animation.iBodyBoneJoint_GetMinimumDistance(self)
    def IsXRotConstrained(self): return _animation.iBodyBoneJoint_IsXRotConstrained(self)
    def IsXTransConstrained(self): return _animation.iBodyBoneJoint_IsXTransConstrained(self)
    def IsYRotConstrained(self): return _animation.iBodyBoneJoint_IsYRotConstrained(self)
    def IsYTransConstrained(self): return _animation.iBodyBoneJoint_IsYTransConstrained(self)
    def IsZRotConstrained(self): return _animation.iBodyBoneJoint_IsZRotConstrained(self)
    def IsZTransConstrained(self): return _animation.iBodyBoneJoint_IsZTransConstrained(self)
    def GetTransform(self): return _animation.iBodyBoneJoint_GetTransform(self)
    scfGetVersion = staticmethod(_animation.iBodyBoneJoint_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodyBoneJoint
    __del__ = lambda self : None;
iBodyBoneJoint_swigregister = _animation.iBodyBoneJoint_swigregister
iBodyBoneJoint_swigregister(iBodyBoneJoint)

def iBodyBoneJoint_scfGetVersion():
  return _animation.iBodyBoneJoint_scfGetVersion()
iBodyBoneJoint_scfGetVersion = _animation.iBodyBoneJoint_scfGetVersion

class iBodyBoneCollider(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetBoxGeometry(self, *args): return _animation.iBodyBoneCollider_SetBoxGeometry(self, *args)
    def SetCapsuleGeometry(self, *args): return _animation.iBodyBoneCollider_SetCapsuleGeometry(self, *args)
    def SetConvexMeshGeometry(self, *args): return _animation.iBodyBoneCollider_SetConvexMeshGeometry(self, *args)
    def SetCylinderGeometry(self, *args): return _animation.iBodyBoneCollider_SetCylinderGeometry(self, *args)
    def SetMeshGeometry(self, *args): return _animation.iBodyBoneCollider_SetMeshGeometry(self, *args)
    def SetPlaneGeometry(self, *args): return _animation.iBodyBoneCollider_SetPlaneGeometry(self, *args)
    def SetSphereGeometry(self, *args): return _animation.iBodyBoneCollider_SetSphereGeometry(self, *args)
    def GetGeometryType(self): return _animation.iBodyBoneCollider_GetGeometryType(self)
    def GetBoxGeometry(self, *args): return _animation.iBodyBoneCollider_GetBoxGeometry(self, *args)
    def GetCapsuleGeometry(self, *args): return _animation.iBodyBoneCollider_GetCapsuleGeometry(self, *args)
    def GetConvexMeshGeometry(self, *args): return _animation.iBodyBoneCollider_GetConvexMeshGeometry(self, *args)
    def GetCylinderGeometry(self, *args): return _animation.iBodyBoneCollider_GetCylinderGeometry(self, *args)
    def GetMeshGeometry(self, *args): return _animation.iBodyBoneCollider_GetMeshGeometry(self, *args)
    def GetPlaneGeometry(self, *args): return _animation.iBodyBoneCollider_GetPlaneGeometry(self, *args)
    def GetSphereGeometry(self, *args): return _animation.iBodyBoneCollider_GetSphereGeometry(self, *args)
    def SetTransform(self, *args): return _animation.iBodyBoneCollider_SetTransform(self, *args)
    def GetTransform(self): return _animation.iBodyBoneCollider_GetTransform(self)
    def SetFriction(self, *args): return _animation.iBodyBoneCollider_SetFriction(self, *args)
    def GetFriction(self): return _animation.iBodyBoneCollider_GetFriction(self)
    def SetSoftness(self, *args): return _animation.iBodyBoneCollider_SetSoftness(self, *args)
    def GetSoftness(self): return _animation.iBodyBoneCollider_GetSoftness(self)
    def SetElasticity(self, *args): return _animation.iBodyBoneCollider_SetElasticity(self, *args)
    def GetElasticity(self): return _animation.iBodyBoneCollider_GetElasticity(self)
    def SetDensity(self, *args): return _animation.iBodyBoneCollider_SetDensity(self, *args)
    def GetDensity(self): return _animation.iBodyBoneCollider_GetDensity(self)
    scfGetVersion = staticmethod(_animation.iBodyBoneCollider_scfGetVersion)
    __swig_destroy__ = _animation.delete_iBodyBoneCollider
    __del__ = lambda self : None;
iBodyBoneCollider_swigregister = _animation.iBodyBoneCollider_swigregister
iBodyBoneCollider_swigregister(iBodyBoneCollider)

def iBodyBoneCollider_scfGetVersion():
  return _animation.iBodyBoneCollider_scfGetVersion()
iBodyBoneCollider_scfGetVersion = _animation.iBodyBoneCollider_scfGetVersion

SYNC_NONE = _animation.SYNC_NONE
SYNC_FIRSTFRAME = _animation.SYNC_FIRSTFRAME
class iSkeletonAnimPacketFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateInstance(self, *args): return _animation.iSkeletonAnimPacketFactory_CreateInstance(self, *args)
    def CreateAnimation(self, *args): return _animation.iSkeletonAnimPacketFactory_CreateAnimation(self, *args)
    def FindAnimation(self, *args): return _animation.iSkeletonAnimPacketFactory_FindAnimation(self, *args)
    def ClearAnimations(self): return _animation.iSkeletonAnimPacketFactory_ClearAnimations(self)
    def GetAnimation(self, *args): return _animation.iSkeletonAnimPacketFactory_GetAnimation(self, *args)
    def GetAnimationCount(self): return _animation.iSkeletonAnimPacketFactory_GetAnimationCount(self)
    def SetAnimationRoot(self, *args): return _animation.iSkeletonAnimPacketFactory_SetAnimationRoot(self, *args)
    def GetAnimationRoot(self): return _animation.iSkeletonAnimPacketFactory_GetAnimationRoot(self)
    def CreateAnimationNode(self, *args): return _animation.iSkeletonAnimPacketFactory_CreateAnimationNode(self, *args)
    def CreateBlendNode(self, *args): return _animation.iSkeletonAnimPacketFactory_CreateBlendNode(self, *args)
    def CreatePriorityNode(self, *args): return _animation.iSkeletonAnimPacketFactory_CreatePriorityNode(self, *args)
    def CreateRandomNode(self, *args): return _animation.iSkeletonAnimPacketFactory_CreateRandomNode(self, *args)
    def CreateFSMNode(self, *args): return _animation.iSkeletonAnimPacketFactory_CreateFSMNode(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonAnimPacketFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonAnimPacketFactory
    __del__ = lambda self : None;
iSkeletonAnimPacketFactory_swigregister = _animation.iSkeletonAnimPacketFactory_swigregister
iSkeletonAnimPacketFactory_swigregister(iSkeletonAnimPacketFactory)
InvalidChannelID = cvar.InvalidChannelID
InvalidKeyframeID = cvar.InvalidKeyframeID
InvalidStateID = cvar.InvalidStateID

def iSkeletonAnimPacketFactory_scfGetVersion():
  return _animation.iSkeletonAnimPacketFactory_scfGetVersion()
iSkeletonAnimPacketFactory_scfGetVersion = _animation.iSkeletonAnimPacketFactory_scfGetVersion

class iSkeletonAnimPacket(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFactory(self): return _animation.iSkeletonAnimPacket_GetFactory(self)
    def GetAnimationRoot(self): return _animation.iSkeletonAnimPacket_GetAnimationRoot(self)
    scfGetVersion = staticmethod(_animation.iSkeletonAnimPacket_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonAnimPacket
    __del__ = lambda self : None;
iSkeletonAnimPacket_swigregister = _animation.iSkeletonAnimPacket_swigregister
iSkeletonAnimPacket_swigregister(iSkeletonAnimPacket)

def iSkeletonAnimPacket_scfGetVersion():
  return _animation.iSkeletonAnimPacket_scfGetVersion()
iSkeletonAnimPacket_scfGetVersion = _animation.iSkeletonAnimPacket_scfGetVersion

class iSkeletonAnimation(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _animation.iSkeletonAnimation_GetName(self)
    def AddChannel(self, *args): return _animation.iSkeletonAnimation_AddChannel(self, *args)
    def FindChannel(self, *args): return _animation.iSkeletonAnimation_FindChannel(self, *args)
    def AddKeyFrame(self, *args): return _animation.iSkeletonAnimation_AddKeyFrame(self, *args)
    def GetKeyFrameCount(self, *args): return _animation.iSkeletonAnimation_GetKeyFrameCount(self, *args)
    def GetKeyFrame(self, *args): return _animation.iSkeletonAnimation_GetKeyFrame(self, *args)
    def GetTwoKeyFrames(self, *args): return _animation.iSkeletonAnimation_GetTwoKeyFrames(self, *args)
    def BlendState(self, *args): return _animation.iSkeletonAnimation_BlendState(self, *args)
    def GetDuration(self): return _animation.iSkeletonAnimation_GetDuration(self)
    def SetKeyFrame(self, *args): return _animation.iSkeletonAnimation_SetKeyFrame(self, *args)
    def SetFramesInBindSpace(self, *args): return _animation.iSkeletonAnimation_SetFramesInBindSpace(self, *args)
    def GetFramesInBindSpace(self): return _animation.iSkeletonAnimation_GetFramesInBindSpace(self)
    def GetChannelCount(self): return _animation.iSkeletonAnimation_GetChannelCount(self)
    def GetChannelBone(self, *args): return _animation.iSkeletonAnimation_GetChannelBone(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonAnimation_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonAnimation
    __del__ = lambda self : None;
iSkeletonAnimation_swigregister = _animation.iSkeletonAnimation_swigregister
iSkeletonAnimation_swigregister(iSkeletonAnimation)

def iSkeletonAnimation_scfGetVersion():
  return _animation.iSkeletonAnimation_scfGetVersion()
iSkeletonAnimation_scfGetVersion = _animation.iSkeletonAnimation_scfGetVersion

class iSkeletonAnimCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AnimationFinished(self, *args): return _animation.iSkeletonAnimCallback_AnimationFinished(self, *args)
    def AnimationCycled(self, *args): return _animation.iSkeletonAnimCallback_AnimationCycled(self, *args)
    def PlayStateChanged(self, *args): return _animation.iSkeletonAnimCallback_PlayStateChanged(self, *args)
    def DurationChanged(self, *args): return _animation.iSkeletonAnimCallback_DurationChanged(self, *args)
    __swig_destroy__ = _animation.delete_iSkeletonAnimCallback
    __del__ = lambda self : None;
iSkeletonAnimCallback_swigregister = _animation.iSkeletonAnimCallback_swigregister
iSkeletonAnimCallback_swigregister(iSkeletonAnimCallback)

class iSkeletonAnimNodeFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateInstance(self, *args): return _animation.iSkeletonAnimNodeFactory_CreateInstance(self, *args)
    def GetNodeName(self): return _animation.iSkeletonAnimNodeFactory_GetNodeName(self)
    def FindNode(self, *args): return _animation.iSkeletonAnimNodeFactory_FindNode(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonAnimNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonAnimNodeFactory
    __del__ = lambda self : None;
iSkeletonAnimNodeFactory_swigregister = _animation.iSkeletonAnimNodeFactory_swigregister
iSkeletonAnimNodeFactory_swigregister(iSkeletonAnimNodeFactory)

def iSkeletonAnimNodeFactory_scfGetVersion():
  return _animation.iSkeletonAnimNodeFactory_scfGetVersion()
iSkeletonAnimNodeFactory_scfGetVersion = _animation.iSkeletonAnimNodeFactory_scfGetVersion

class iSkeletonAnimNode(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Play(self): return _animation.iSkeletonAnimNode_Play(self)
    def Stop(self): return _animation.iSkeletonAnimNode_Stop(self)
    def SetPlaybackPosition(self, *args): return _animation.iSkeletonAnimNode_SetPlaybackPosition(self, *args)
    def GetPlaybackPosition(self): return _animation.iSkeletonAnimNode_GetPlaybackPosition(self)
    def GetDuration(self): return _animation.iSkeletonAnimNode_GetDuration(self)
    def SetPlaybackSpeed(self, *args): return _animation.iSkeletonAnimNode_SetPlaybackSpeed(self, *args)
    def GetPlaybackSpeed(self): return _animation.iSkeletonAnimNode_GetPlaybackSpeed(self)
    def BlendState(self, *args): return _animation.iSkeletonAnimNode_BlendState(self, *args)
    def TickAnimation(self, *args): return _animation.iSkeletonAnimNode_TickAnimation(self, *args)
    def IsActive(self): return _animation.iSkeletonAnimNode_IsActive(self)
    def GetFactory(self): return _animation.iSkeletonAnimNode_GetFactory(self)
    def FindNode(self, *args): return _animation.iSkeletonAnimNode_FindNode(self, *args)
    def AddAnimationCallback(self, *args): return _animation.iSkeletonAnimNode_AddAnimationCallback(self, *args)
    def RemoveAnimationCallback(self, *args): return _animation.iSkeletonAnimNode_RemoveAnimationCallback(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonAnimNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonAnimNode
    __del__ = lambda self : None;
iSkeletonAnimNode_swigregister = _animation.iSkeletonAnimNode_swigregister
iSkeletonAnimNode_swigregister(iSkeletonAnimNode)

def iSkeletonAnimNode_scfGetVersion():
  return _animation.iSkeletonAnimNode_scfGetVersion()
iSkeletonAnimNode_scfGetVersion = _animation.iSkeletonAnimNode_scfGetVersion

class iSkeletonAnimationNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetAnimation(self, *args): return _animation.iSkeletonAnimationNodeFactory_SetAnimation(self, *args)
    def GetAnimation(self): return _animation.iSkeletonAnimationNodeFactory_GetAnimation(self)
    def SetCyclic(self, *args): return _animation.iSkeletonAnimationNodeFactory_SetCyclic(self, *args)
    def IsCyclic(self): return _animation.iSkeletonAnimationNodeFactory_IsCyclic(self)
    def SetPlaybackSpeed(self, *args): return _animation.iSkeletonAnimationNodeFactory_SetPlaybackSpeed(self, *args)
    def GetPlaybackSpeed(self): return _animation.iSkeletonAnimationNodeFactory_GetPlaybackSpeed(self)
    def SetAutomaticReset(self, *args): return _animation.iSkeletonAnimationNodeFactory_SetAutomaticReset(self, *args)
    def GetAutomaticReset(self): return _animation.iSkeletonAnimationNodeFactory_GetAutomaticReset(self)
    def SetAutomaticStop(self, *args): return _animation.iSkeletonAnimationNodeFactory_SetAutomaticStop(self, *args)
    def GetAutomaticStop(self): return _animation.iSkeletonAnimationNodeFactory_GetAutomaticStop(self)
    scfGetVersion = staticmethod(_animation.iSkeletonAnimationNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonAnimationNodeFactory
    __del__ = lambda self : None;
iSkeletonAnimationNodeFactory_swigregister = _animation.iSkeletonAnimationNodeFactory_swigregister
iSkeletonAnimationNodeFactory_swigregister(iSkeletonAnimationNodeFactory)

def iSkeletonAnimationNodeFactory_scfGetVersion():
  return _animation.iSkeletonAnimationNodeFactory_scfGetVersion()
iSkeletonAnimationNodeFactory_scfGetVersion = _animation.iSkeletonAnimationNodeFactory_scfGetVersion

class iSkeletonAnimationNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    scfGetVersion = staticmethod(_animation.iSkeletonAnimationNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonAnimationNode
    __del__ = lambda self : None;
iSkeletonAnimationNode_swigregister = _animation.iSkeletonAnimationNode_swigregister
iSkeletonAnimationNode_swigregister(iSkeletonAnimationNode)

def iSkeletonAnimationNode_scfGetVersion():
  return _animation.iSkeletonAnimationNode_scfGetVersion()
iSkeletonAnimationNode_scfGetVersion = _animation.iSkeletonAnimationNode_scfGetVersion

class iSkeletonBlendNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddNode(self, *args): return _animation.iSkeletonBlendNodeFactory_AddNode(self, *args)
    def SetNodeWeight(self, *args): return _animation.iSkeletonBlendNodeFactory_SetNodeWeight(self, *args)
    def NormalizeWeights(self): return _animation.iSkeletonBlendNodeFactory_NormalizeWeights(self)
    def GetNode(self, *args): return _animation.iSkeletonBlendNodeFactory_GetNode(self, *args)
    def GetNodeCount(self): return _animation.iSkeletonBlendNodeFactory_GetNodeCount(self)
    def ClearNodes(self): return _animation.iSkeletonBlendNodeFactory_ClearNodes(self)
    def SetSynchronizationMode(self, *args): return _animation.iSkeletonBlendNodeFactory_SetSynchronizationMode(self, *args)
    def GetSynchronizationMode(self): return _animation.iSkeletonBlendNodeFactory_GetSynchronizationMode(self)
    scfGetVersion = staticmethod(_animation.iSkeletonBlendNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonBlendNodeFactory
    __del__ = lambda self : None;
iSkeletonBlendNodeFactory_swigregister = _animation.iSkeletonBlendNodeFactory_swigregister
iSkeletonBlendNodeFactory_swigregister(iSkeletonBlendNodeFactory)

def iSkeletonBlendNodeFactory_scfGetVersion():
  return _animation.iSkeletonBlendNodeFactory_scfGetVersion()
iSkeletonBlendNodeFactory_scfGetVersion = _animation.iSkeletonBlendNodeFactory_scfGetVersion

class iSkeletonBlendNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetNodeWeight(self, *args): return _animation.iSkeletonBlendNode_SetNodeWeight(self, *args)
    def NormalizeWeights(self): return _animation.iSkeletonBlendNode_NormalizeWeights(self)
    scfGetVersion = staticmethod(_animation.iSkeletonBlendNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonBlendNode
    __del__ = lambda self : None;
iSkeletonBlendNode_swigregister = _animation.iSkeletonBlendNode_swigregister
iSkeletonBlendNode_swigregister(iSkeletonBlendNode)

def iSkeletonBlendNode_scfGetVersion():
  return _animation.iSkeletonBlendNode_scfGetVersion()
iSkeletonBlendNode_scfGetVersion = _animation.iSkeletonBlendNode_scfGetVersion

class iSkeletonPriorityNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddNode(self, *args): return _animation.iSkeletonPriorityNodeFactory_AddNode(self, *args)
    def SetNodePriority(self, *args): return _animation.iSkeletonPriorityNodeFactory_SetNodePriority(self, *args)
    def GetNode(self, *args): return _animation.iSkeletonPriorityNodeFactory_GetNode(self, *args)
    def GetNodeCount(self): return _animation.iSkeletonPriorityNodeFactory_GetNodeCount(self)
    def ClearNodes(self): return _animation.iSkeletonPriorityNodeFactory_ClearNodes(self)
    scfGetVersion = staticmethod(_animation.iSkeletonPriorityNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonPriorityNodeFactory
    __del__ = lambda self : None;
iSkeletonPriorityNodeFactory_swigregister = _animation.iSkeletonPriorityNodeFactory_swigregister
iSkeletonPriorityNodeFactory_swigregister(iSkeletonPriorityNodeFactory)

def iSkeletonPriorityNodeFactory_scfGetVersion():
  return _animation.iSkeletonPriorityNodeFactory_scfGetVersion()
iSkeletonPriorityNodeFactory_scfGetVersion = _animation.iSkeletonPriorityNodeFactory_scfGetVersion

class iSkeletonPriorityNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetNodePriority(self, *args): return _animation.iSkeletonPriorityNode_SetNodePriority(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonPriorityNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonPriorityNode
    __del__ = lambda self : None;
iSkeletonPriorityNode_swigregister = _animation.iSkeletonPriorityNode_swigregister
iSkeletonPriorityNode_swigregister(iSkeletonPriorityNode)

def iSkeletonPriorityNode_scfGetVersion():
  return _animation.iSkeletonPriorityNode_scfGetVersion()
iSkeletonPriorityNode_scfGetVersion = _animation.iSkeletonPriorityNode_scfGetVersion

class iSkeletonRandomNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddNode(self, *args): return _animation.iSkeletonRandomNodeFactory_AddNode(self, *args)
    def SetNodeProbability(self, *args): return _animation.iSkeletonRandomNodeFactory_SetNodeProbability(self, *args)
    def SetAutomaticSwitch(self, *args): return _animation.iSkeletonRandomNodeFactory_SetAutomaticSwitch(self, *args)
    def GetNode(self, *args): return _animation.iSkeletonRandomNodeFactory_GetNode(self, *args)
    def GetNodeCount(self): return _animation.iSkeletonRandomNodeFactory_GetNodeCount(self)
    def ClearNodes(self): return _animation.iSkeletonRandomNodeFactory_ClearNodes(self)
    scfGetVersion = staticmethod(_animation.iSkeletonRandomNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonRandomNodeFactory
    __del__ = lambda self : None;
iSkeletonRandomNodeFactory_swigregister = _animation.iSkeletonRandomNodeFactory_swigregister
iSkeletonRandomNodeFactory_swigregister(iSkeletonRandomNodeFactory)

def iSkeletonRandomNodeFactory_scfGetVersion():
  return _animation.iSkeletonRandomNodeFactory_scfGetVersion()
iSkeletonRandomNodeFactory_scfGetVersion = _animation.iSkeletonRandomNodeFactory_scfGetVersion

class iSkeletonRandomNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Switch(self): return _animation.iSkeletonRandomNode_Switch(self)
    def GetCurrentNode(self): return _animation.iSkeletonRandomNode_GetCurrentNode(self)
    scfGetVersion = staticmethod(_animation.iSkeletonRandomNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonRandomNode
    __del__ = lambda self : None;
iSkeletonRandomNode_swigregister = _animation.iSkeletonRandomNode_swigregister
iSkeletonRandomNode_swigregister(iSkeletonRandomNode)

def iSkeletonRandomNode_scfGetVersion():
  return _animation.iSkeletonRandomNode_scfGetVersion()
iSkeletonRandomNode_scfGetVersion = _animation.iSkeletonRandomNode_scfGetVersion

class iSkeletonFSMNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetStateNode(self, *args): return _animation.iSkeletonFSMNodeFactory_SetStateNode(self, *args)
    def GetStateNode(self, *args): return _animation.iSkeletonFSMNodeFactory_GetStateNode(self, *args)
    def SetStateName(self, *args): return _animation.iSkeletonFSMNodeFactory_SetStateName(self, *args)
    def GetStateName(self, *args): return _animation.iSkeletonFSMNodeFactory_GetStateName(self, *args)
    def FindState(self, *args): return _animation.iSkeletonFSMNodeFactory_FindState(self, *args)
    def SetStartState(self, *args): return _animation.iSkeletonFSMNodeFactory_SetStartState(self, *args)
    def GetStartState(self): return _animation.iSkeletonFSMNodeFactory_GetStartState(self)
    def GetStateCount(self): return _animation.iSkeletonFSMNodeFactory_GetStateCount(self)
    def ClearStates(self): return _animation.iSkeletonFSMNodeFactory_ClearStates(self)
    def SetStateTransition(self, *args): return _animation.iSkeletonFSMNodeFactory_SetStateTransition(self, *args)
    def SetTransitionCrossfade(self, *args): return _animation.iSkeletonFSMNodeFactory_SetTransitionCrossfade(self, *args)
    def AddState(self, *args): return _animation.iSkeletonFSMNodeFactory_AddState(self, *args)
    def SetAutomaticTransition(self, *args): return _animation.iSkeletonFSMNodeFactory_SetAutomaticTransition(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonFSMNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonFSMNodeFactory
    __del__ = lambda self : None;
iSkeletonFSMNodeFactory_swigregister = _animation.iSkeletonFSMNodeFactory_swigregister
iSkeletonFSMNodeFactory_swigregister(iSkeletonFSMNodeFactory)

def iSkeletonFSMNodeFactory_scfGetVersion():
  return _animation.iSkeletonFSMNodeFactory_scfGetVersion()
iSkeletonFSMNodeFactory_scfGetVersion = _animation.iSkeletonFSMNodeFactory_scfGetVersion

class iSkeletonFSMNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SwitchToState(self, *args): return _animation.iSkeletonFSMNode_SwitchToState(self, *args)
    def GetCurrentState(self): return _animation.iSkeletonFSMNode_GetCurrentState(self)
    def GetStateNode(self, *args): return _animation.iSkeletonFSMNode_GetStateNode(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonFSMNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonFSMNode
    __del__ = lambda self : None;
iSkeletonFSMNode_swigregister = _animation.iSkeletonFSMNode_swigregister
iSkeletonFSMNode_swigregister(iSkeletonFSMNode)

def iSkeletonFSMNode_scfGetVersion():
  return _animation.iSkeletonFSMNode_scfGetVersion()
iSkeletonFSMNode_scfGetVersion = _animation.iSkeletonFSMNode_scfGetVersion

class iSkeletonIKManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateAnimNodeFactory(self, *args): return _animation.iSkeletonIKManager_CreateAnimNodeFactory(self, *args)
    def FindAnimNodeFactory(self, *args): return _animation.iSkeletonIKManager_FindAnimNodeFactory(self, *args)
    def ClearAnimNodeFactories(self): return _animation.iSkeletonIKManager_ClearAnimNodeFactories(self)
    scfGetVersion = staticmethod(_animation.iSkeletonIKManager_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonIKManager
    __del__ = lambda self : None;
iSkeletonIKManager_swigregister = _animation.iSkeletonIKManager_swigregister
iSkeletonIKManager_swigregister(iSkeletonIKManager)

def iSkeletonIKManager_scfGetVersion():
  return _animation.iSkeletonIKManager_scfGetVersion()
iSkeletonIKManager_scfGetVersion = _animation.iSkeletonIKManager_scfGetVersion

class iSkeletonIKNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetChildNode(self, *args): return _animation.iSkeletonIKNodeFactory_SetChildNode(self, *args)
    def GetChildNode(self): return _animation.iSkeletonIKNodeFactory_GetChildNode(self)
    def ClearChildNode(self): return _animation.iSkeletonIKNodeFactory_ClearChildNode(self)
    def AddEffector(self, *args): return _animation.iSkeletonIKNodeFactory_AddEffector(self, *args)
    def RemoveEffector(self, *args): return _animation.iSkeletonIKNodeFactory_RemoveEffector(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonIKNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonIKNodeFactory
    __del__ = lambda self : None;
iSkeletonIKNodeFactory_swigregister = _animation.iSkeletonIKNodeFactory_swigregister
iSkeletonIKNodeFactory_swigregister(iSkeletonIKNodeFactory)

def iSkeletonIKNodeFactory_scfGetVersion():
  return _animation.iSkeletonIKNodeFactory_scfGetVersion()
iSkeletonIKNodeFactory_scfGetVersion = _animation.iSkeletonIKNodeFactory_scfGetVersion

class iSkeletonIKNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddConstraint(self, *args): return _animation.iSkeletonIKNode_AddConstraint(self, *args)
    def RemoveConstraint(self, *args): return _animation.iSkeletonIKNode_RemoveConstraint(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonIKNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonIKNode
    __del__ = lambda self : None;
iSkeletonIKNode_swigregister = _animation.iSkeletonIKNode_swigregister
iSkeletonIKNode_swigregister(iSkeletonIKNode)

def iSkeletonIKNode_scfGetVersion():
  return _animation.iSkeletonIKNode_scfGetVersion()
iSkeletonIKNode_scfGetVersion = _animation.iSkeletonIKNode_scfGetVersion

class iSkeletonIKPhysicalNodeFactory(iSkeletonIKNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetChainAutoReset(self, *args): return _animation.iSkeletonIKPhysicalNodeFactory_SetChainAutoReset(self, *args)
    def GetChainAutoReset(self): return _animation.iSkeletonIKPhysicalNodeFactory_GetChainAutoReset(self)
    scfGetVersion = staticmethod(_animation.iSkeletonIKPhysicalNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonIKPhysicalNodeFactory
    __del__ = lambda self : None;
iSkeletonIKPhysicalNodeFactory_swigregister = _animation.iSkeletonIKPhysicalNodeFactory_swigregister
iSkeletonIKPhysicalNodeFactory_swigregister(iSkeletonIKPhysicalNodeFactory)

def iSkeletonIKPhysicalNodeFactory_scfGetVersion():
  return _animation.iSkeletonIKPhysicalNodeFactory_scfGetVersion()
iSkeletonIKPhysicalNodeFactory_scfGetVersion = _animation.iSkeletonIKPhysicalNodeFactory_scfGetVersion

class iSkeletonIKPhysicalNode(iSkeletonIKNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetRagdollNode(self, *args): return _animation.iSkeletonIKPhysicalNode_SetRagdollNode(self, *args)
    def GetRagdollNode(self): return _animation.iSkeletonIKPhysicalNode_GetRagdollNode(self)
    scfGetVersion = staticmethod(_animation.iSkeletonIKPhysicalNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonIKPhysicalNode
    __del__ = lambda self : None;
iSkeletonIKPhysicalNode_swigregister = _animation.iSkeletonIKPhysicalNode_swigregister
iSkeletonIKPhysicalNode_swigregister(iSkeletonIKPhysicalNode)

def iSkeletonIKPhysicalNode_scfGetVersion():
  return _animation.iSkeletonIKPhysicalNode_scfGetVersion()
iSkeletonIKPhysicalNode_scfGetVersion = _animation.iSkeletonIKPhysicalNode_scfGetVersion

class iSkeletonLookAtManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateAnimNodeFactory(self, *args): return _animation.iSkeletonLookAtManager_CreateAnimNodeFactory(self, *args)
    def FindAnimNodeFactory(self, *args): return _animation.iSkeletonLookAtManager_FindAnimNodeFactory(self, *args)
    def ClearAnimNodeFactories(self): return _animation.iSkeletonLookAtManager_ClearAnimNodeFactories(self)
    scfGetVersion = staticmethod(_animation.iSkeletonLookAtManager_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonLookAtManager
    __del__ = lambda self : None;
iSkeletonLookAtManager_swigregister = _animation.iSkeletonLookAtManager_swigregister
iSkeletonLookAtManager_swigregister(iSkeletonLookAtManager)

def iSkeletonLookAtManager_scfGetVersion():
  return _animation.iSkeletonLookAtManager_scfGetVersion()
iSkeletonLookAtManager_scfGetVersion = _animation.iSkeletonLookAtManager_scfGetVersion

class iSkeletonLookAtNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetChildNode(self, *args): return _animation.iSkeletonLookAtNodeFactory_SetChildNode(self, *args)
    def GetChildNode(self): return _animation.iSkeletonLookAtNodeFactory_GetChildNode(self)
    def ClearChildNode(self): return _animation.iSkeletonLookAtNodeFactory_ClearChildNode(self)
    scfGetVersion = staticmethod(_animation.iSkeletonLookAtNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonLookAtNodeFactory
    __del__ = lambda self : None;
iSkeletonLookAtNodeFactory_swigregister = _animation.iSkeletonLookAtNodeFactory_swigregister
iSkeletonLookAtNodeFactory_swigregister(iSkeletonLookAtNodeFactory)

def iSkeletonLookAtNodeFactory_scfGetVersion():
  return _animation.iSkeletonLookAtNodeFactory_scfGetVersion()
iSkeletonLookAtNodeFactory_scfGetVersion = _animation.iSkeletonLookAtNodeFactory_scfGetVersion

class iSkeletonLookAtNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetBone(self, *args): return _animation.iSkeletonLookAtNode_SetBone(self, *args)
    def SetTarget(self, *args): return _animation.iSkeletonLookAtNode_SetTarget(self, *args)
    def RemoveTarget(self): return _animation.iSkeletonLookAtNode_RemoveTarget(self)
    def SetMaximumSpeed(self, *args): return _animation.iSkeletonLookAtNode_SetMaximumSpeed(self, *args)
    def SetAlwaysRotate(self, *args): return _animation.iSkeletonLookAtNode_SetAlwaysRotate(self, *args)
    def SetListenerDelay(self, *args): return _animation.iSkeletonLookAtNode_SetListenerDelay(self, *args)
    def AddListener(self, *args): return _animation.iSkeletonLookAtNode_AddListener(self, *args)
    def RemoveListener(self, *args): return _animation.iSkeletonLookAtNode_RemoveListener(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonLookAtNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonLookAtNode
    __del__ = lambda self : None;
iSkeletonLookAtNode_swigregister = _animation.iSkeletonLookAtNode_swigregister
iSkeletonLookAtNode_swigregister(iSkeletonLookAtNode)

def iSkeletonLookAtNode_scfGetVersion():
  return _animation.iSkeletonLookAtNode_scfGetVersion()
iSkeletonLookAtNode_scfGetVersion = _animation.iSkeletonLookAtNode_scfGetVersion

class iSkeletonLookAtListener(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def TargetReached(self): return _animation.iSkeletonLookAtListener_TargetReached(self)
    def TargetLost(self): return _animation.iSkeletonLookAtListener_TargetLost(self)
    scfGetVersion = staticmethod(_animation.iSkeletonLookAtListener_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonLookAtListener
    __del__ = lambda self : None;
iSkeletonLookAtListener_swigregister = _animation.iSkeletonLookAtListener_swigregister
iSkeletonLookAtListener_swigregister(iSkeletonLookAtListener)

def iSkeletonLookAtListener_scfGetVersion():
  return _animation.iSkeletonLookAtListener_scfGetVersion()
iSkeletonLookAtListener_scfGetVersion = _animation.iSkeletonLookAtListener_scfGetVersion

class iSkeletonRagdollManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateAnimNodeFactory(self, *args): return _animation.iSkeletonRagdollManager_CreateAnimNodeFactory(self, *args)
    def FindAnimNodeFactory(self, *args): return _animation.iSkeletonRagdollManager_FindAnimNodeFactory(self, *args)
    def ClearAnimNodeFactories(self): return _animation.iSkeletonRagdollManager_ClearAnimNodeFactories(self)
    scfGetVersion = staticmethod(_animation.iSkeletonRagdollManager_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonRagdollManager
    __del__ = lambda self : None;
iSkeletonRagdollManager_swigregister = _animation.iSkeletonRagdollManager_swigregister
iSkeletonRagdollManager_swigregister(iSkeletonRagdollManager)

def iSkeletonRagdollManager_scfGetVersion():
  return _animation.iSkeletonRagdollManager_scfGetVersion()
iSkeletonRagdollManager_scfGetVersion = _animation.iSkeletonRagdollManager_scfGetVersion

STATE_INACTIVE = _animation.STATE_INACTIVE
STATE_DYNAMIC = _animation.STATE_DYNAMIC
STATE_KINEMATIC = _animation.STATE_KINEMATIC
class iSkeletonRagdollNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddBodyChain(self, *args): return _animation.iSkeletonRagdollNodeFactory_AddBodyChain(self, *args)
    def RemoveBodyChain(self, *args): return _animation.iSkeletonRagdollNodeFactory_RemoveBodyChain(self, *args)
    def SetChildNode(self, *args): return _animation.iSkeletonRagdollNodeFactory_SetChildNode(self, *args)
    def GetChildNode(self): return _animation.iSkeletonRagdollNodeFactory_GetChildNode(self)
    def ClearChildNode(self): return _animation.iSkeletonRagdollNodeFactory_ClearChildNode(self)
    def GetDynamicSystem(self): return _animation.iSkeletonRagdollNodeFactory_GetDynamicSystem(self)
    scfGetVersion = staticmethod(_animation.iSkeletonRagdollNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonRagdollNodeFactory
    __del__ = lambda self : None;
iSkeletonRagdollNodeFactory_swigregister = _animation.iSkeletonRagdollNodeFactory_swigregister
iSkeletonRagdollNodeFactory_swigregister(iSkeletonRagdollNodeFactory)

def iSkeletonRagdollNodeFactory_scfGetVersion():
  return _animation.iSkeletonRagdollNodeFactory_scfGetVersion()
iSkeletonRagdollNodeFactory_scfGetVersion = _animation.iSkeletonRagdollNodeFactory_scfGetVersion

class iSkeletonRagdollNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetBodyChainState(self, *args): return _animation.iSkeletonRagdollNode_SetBodyChainState(self, *args)
    def GetBodyChainState(self, *args): return _animation.iSkeletonRagdollNode_GetBodyChainState(self, *args)
    def GetBoneRigidBody(self, *args): return _animation.iSkeletonRagdollNode_GetBoneRigidBody(self, *args)
    def GetBoneJoint(self, *args): return _animation.iSkeletonRagdollNode_GetBoneJoint(self, *args)
    def GetBoneCount(self, *args): return _animation.iSkeletonRagdollNode_GetBoneCount(self, *args)
    def GetBone(self, *args): return _animation.iSkeletonRagdollNode_GetBone(self, *args)
    def ResetChainTransform(self, *args): return _animation.iSkeletonRagdollNode_ResetChainTransform(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonRagdollNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonRagdollNode
    __del__ = lambda self : None;
iSkeletonRagdollNode_swigregister = _animation.iSkeletonRagdollNode_swigregister
iSkeletonRagdollNode_swigregister(iSkeletonRagdollNode)

def iSkeletonRagdollNode_scfGetVersion():
  return _animation.iSkeletonRagdollNode_scfGetVersion()
iSkeletonRagdollNode_scfGetVersion = _animation.iSkeletonRagdollNode_scfGetVersion

class iSkeletonSpeedNodeManager(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateSpeedNodeFactory(self, *args): return _animation.iSkeletonSpeedNodeManager_CreateSpeedNodeFactory(self, *args)
    def FindSpeedNodeFactory(self, *args): return _animation.iSkeletonSpeedNodeManager_FindSpeedNodeFactory(self, *args)
    def ClearSpeedNodeFactories(self): return _animation.iSkeletonSpeedNodeManager_ClearSpeedNodeFactories(self)
    scfGetVersion = staticmethod(_animation.iSkeletonSpeedNodeManager_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonSpeedNodeManager
    __del__ = lambda self : None;
iSkeletonSpeedNodeManager_swigregister = _animation.iSkeletonSpeedNodeManager_swigregister
iSkeletonSpeedNodeManager_swigregister(iSkeletonSpeedNodeManager)

def iSkeletonSpeedNodeManager_scfGetVersion():
  return _animation.iSkeletonSpeedNodeManager_scfGetVersion()
iSkeletonSpeedNodeManager_scfGetVersion = _animation.iSkeletonSpeedNodeManager_scfGetVersion

class iSkeletonSpeedNodeFactory(iSkeletonAnimNodeFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddNode(self, *args): return _animation.iSkeletonSpeedNodeFactory_AddNode(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonSpeedNodeFactory_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonSpeedNodeFactory
    __del__ = lambda self : None;
iSkeletonSpeedNodeFactory_swigregister = _animation.iSkeletonSpeedNodeFactory_swigregister
iSkeletonSpeedNodeFactory_swigregister(iSkeletonSpeedNodeFactory)

def iSkeletonSpeedNodeFactory_scfGetVersion():
  return _animation.iSkeletonSpeedNodeFactory_scfGetVersion()
iSkeletonSpeedNodeFactory_scfGetVersion = _animation.iSkeletonSpeedNodeFactory_scfGetVersion

class iSkeletonSpeedNode(iSkeletonAnimNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetSpeed(self, *args): return _animation.iSkeletonSpeedNode_SetSpeed(self, *args)
    scfGetVersion = staticmethod(_animation.iSkeletonSpeedNode_scfGetVersion)
    __swig_destroy__ = _animation.delete_iSkeletonSpeedNode
    __del__ = lambda self : None;
iSkeletonSpeedNode_swigregister = _animation.iSkeletonSpeedNode_swigregister
iSkeletonSpeedNode_swigregister(iSkeletonSpeedNode)

def iSkeletonSpeedNode_scfGetVersion():
  return _animation.iSkeletonSpeedNode_scfGetVersion()
iSkeletonSpeedNode_scfGetVersion = _animation.iSkeletonSpeedNode_scfGetVersion



