# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csgeom', [dirname(__file__)])
        except ImportError:
            import _csgeom
            return _csgeom
        if fp is not None:
            try:
                _mod = imp.load_module('_csgeom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _csgeom = swig_import_helper()
    del swig_import_helper
else:
    import _csgeom
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core

def _SetSCFPointer(*args):
  return _csgeom._SetSCFPointer(*args)
_SetSCFPointer = _csgeom._SetSCFPointer

def _GetSCFPointer():
  return _csgeom._GetSCFPointer()
_GetSCFPointer = _csgeom._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

class csVector2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_csgeom.csVector2_x_get, _csgeom.csVector2_x_set)
    y = _swig_property(_csgeom.csVector2_y_get, _csgeom.csVector2_y_set)
    def __init__(self, *args): 
        this = _csgeom.new_csVector2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(self): return _csgeom.csVector2_Description(self)
    def Set(self, *args): return _csgeom.csVector2_Set(self, *args)
    def Get(self, *args): return _csgeom.csVector2_Get(self, *args)
    def Norm(self): return _csgeom.csVector2_Norm(self)
    def InverseNorm(self): return _csgeom.csVector2_InverseNorm(self)
    def Unit(self, *args): return _csgeom.csVector2_Unit(self, *args)
    def Normalize(self): return _csgeom.csVector2_Normalize(self)
    def IsZero(self, *args): return _csgeom.csVector2_IsZero(self, *args)
    def UnitAxisClamped(self): return _csgeom.csVector2_UnitAxisClamped(self)
    def SquaredNorm(self): return _csgeom.csVector2_SquaredNorm(self)
    def Rotate(self, *args): return _csgeom.csVector2_Rotate(self, *args)
    def IsLeft(self, *args): return _csgeom.csVector2_IsLeft(self, *args)
    def __iadd__(self, *args): return _csgeom.csVector2___iadd__(self, *args)
    def __isub__(self, *args): return _csgeom.csVector2___isub__(self, *args)
    def __imul__(self, *args): return _csgeom.csVector2___imul__(self, *args)
    def __idiv__(self, *args): return _csgeom.csVector2___idiv__(self, *args)
    def __pos__(self): return _csgeom.csVector2___pos__(self)
    def __neg__(self): return _csgeom.csVector2___neg__(self)
    def __add__(self, *args): return _csgeom.csVector2___add__(self, *args)
    def __sub__(self, *args): return _csgeom.csVector2___sub__(self, *args)
    def __mul__(self, *args): return _csgeom.csVector2___mul__(self, *args)
    def __div__(self, *args): return _csgeom.csVector2___div__(self, *args)
    def __eq__(self, *args): return _csgeom.csVector2___eq__(self, *args)
    def __ne__(self, *args): return _csgeom.csVector2___ne__(self, *args)
    def __lt__(self, *args): return _csgeom.csVector2___lt__(self, *args)
    def __gt__(self, *args): return _csgeom.csVector2___gt__(self, *args)
    def __rmul__(self, *args): return _csgeom.csVector2___rmul__(self, *args)
    def __abs__(self): return _csgeom.csVector2___abs__(self)
    def __getitem__(self, *args): return _csgeom.csVector2___getitem__(self, *args)
    def __setitem__(self, *args): return _csgeom.csVector2___setitem__(self, *args)
    def __str__(self):
      return "%f,%f"%(self.x,self.y)
    def __repr__(self):
      return "cspace.csVector2(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csVector2
    __del__ = lambda self : None;
csVector2_swigregister = _csgeom.csVector2_swigregister
csVector2_swigregister(csVector2)

CS_AXIS_NONE = _csgeom.CS_AXIS_NONE
CS_AXIS_X = _csgeom.CS_AXIS_X
CS_AXIS_Y = _csgeom.CS_AXIS_Y
CS_AXIS_Z = _csgeom.CS_AXIS_Z
CS_AXIS_W = _csgeom.CS_AXIS_W
class csVector3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_csgeom.csVector3_x_get, _csgeom.csVector3_x_set)
    y = _swig_property(_csgeom.csVector3_y_get, _csgeom.csVector3_y_set)
    z = _swig_property(_csgeom.csVector3_z_get, _csgeom.csVector3_z_set)
    def __init__(self, *args): 
        this = _csgeom.new_csVector3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(self): return _csgeom.csVector3_Description(self)
    def __iadd__(self, *args): return _csgeom.csVector3___iadd__(self, *args)
    def __isub__(self, *args): return _csgeom.csVector3___isub__(self, *args)
    def __pos__(self): return _csgeom.csVector3___pos__(self)
    def __neg__(self): return _csgeom.csVector3___neg__(self)
    def Set(self, *args): return _csgeom.csVector3_Set(self, *args)
    def Get(self, *args): return _csgeom.csVector3_Get(self, *args)
    def Norm(self): return _csgeom.csVector3_Norm(self)
    def InverseNorm(self): return _csgeom.csVector3_InverseNorm(self)
    def SquaredNorm(self): return _csgeom.csVector3_SquaredNorm(self)
    def Unit(self): return _csgeom.csVector3_Unit(self)
    def Normalize(self): return _csgeom.csVector3_Normalize(self)
    def IsZero(self, *args): return _csgeom.csVector3_IsZero(self, *args)
    def UnitAxisClamped(self): return _csgeom.csVector3_UnitAxisClamped(self)
    def DominantAxis(self): return _csgeom.csVector3_DominantAxis(self)
    def __add__(self, *args): return _csgeom.csVector3___add__(self, *args)
    def __sub__(self, *args): return _csgeom.csVector3___sub__(self, *args)
    def __mul__(self, *args): return _csgeom.csVector3___mul__(self, *args)
    def __eq__(self, *args): return _csgeom.csVector3___eq__(self, *args)
    def __ne__(self, *args): return _csgeom.csVector3___ne__(self, *args)
    def __lt__(self, *args): return _csgeom.csVector3___lt__(self, *args)
    def __gt__(self, *args): return _csgeom.csVector3___gt__(self, *args)
    def __imul__(self, *args): return _csgeom.csVector3___imul__(self, *args)
    def __idiv__(self, *args): return _csgeom.csVector3___idiv__(self, *args)
    def __div__(self, *args): return _csgeom.csVector3___div__(self, *args)
    def project(self, *args): return _csgeom.csVector3_project(self, *args)
    def Cross(self, *args): return _csgeom.csVector3_Cross(self, *args)
    def __rmul__(self, *args): return _csgeom.csVector3___rmul__(self, *args)
    def __abs__(self): return _csgeom.csVector3___abs__(self)
    def __getitem__(self, *args): return _csgeom.csVector3___getitem__(self, *args)
    def __setitem__(self, *args): return _csgeom.csVector3___setitem__(self, *args)
    def __nonzero__(self): return _csgeom.csVector3___nonzero__(self)
    def __str__(self):
      return "%f,%f,%f"%(self.x,self.y,self.z)
    def __repr__(self):
      return "cspace.csVector3(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csVector3
    __del__ = lambda self : None;
csVector3_swigregister = _csgeom.csVector3_swigregister
csVector3_swigregister(csVector3)

class csVector3ArrayReadOnly(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSize(self): return _csgeom.csVector3ArrayReadOnly_GetSize(self)
    def Get(self, *args): return _csgeom.csVector3ArrayReadOnly_Get(self, *args)
    def Top(self): return _csgeom.csVector3ArrayReadOnly_Top(self)
    def Find(self, *args): return _csgeom.csVector3ArrayReadOnly_Find(self, *args)
    def GetIndex(self, *args): return _csgeom.csVector3ArrayReadOnly_GetIndex(self, *args)
    def IsEmpty(self): return _csgeom.csVector3ArrayReadOnly_IsEmpty(self)
    def GetAll(self, *args): return _csgeom.csVector3ArrayReadOnly_GetAll(self, *args)
    __swig_destroy__ = _csgeom.delete_csVector3ArrayReadOnly
    __del__ = lambda self : None;
csVector3ArrayReadOnly_swigregister = _csgeom.csVector3ArrayReadOnly_swigregister
csVector3ArrayReadOnly_swigregister(csVector3ArrayReadOnly)

class csVector3ArrayChangeElements(csVector3ArrayReadOnly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Get(self, *args): return _csgeom.csVector3ArrayChangeElements_Get(self, *args)
    def Top(self, *args): return _csgeom.csVector3ArrayChangeElements_Top(self, *args)
    __swig_destroy__ = _csgeom.delete_csVector3ArrayChangeElements
    __del__ = lambda self : None;
csVector3ArrayChangeElements_swigregister = _csgeom.csVector3ArrayChangeElements_swigregister
csVector3ArrayChangeElements_swigregister(csVector3ArrayChangeElements)

class csVector3ArrayChangeAll(csVector3ArrayChangeElements):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetSize(self, *args): return _csgeom.csVector3ArrayChangeAll_SetSize(self, *args)
    def GetExtend(self, *args): return _csgeom.csVector3ArrayChangeAll_GetExtend(self, *args)
    def Put(self, *args): return _csgeom.csVector3ArrayChangeAll_Put(self, *args)
    def Push(self, *args): return _csgeom.csVector3ArrayChangeAll_Push(self, *args)
    def PushSmart(self, *args): return _csgeom.csVector3ArrayChangeAll_PushSmart(self, *args)
    def Pop(self): return _csgeom.csVector3ArrayChangeAll_Pop(self)
    def Insert(self, *args): return _csgeom.csVector3ArrayChangeAll_Insert(self, *args)
    def DeleteAll(self): return _csgeom.csVector3ArrayChangeAll_DeleteAll(self)
    def Truncate(self, *args): return _csgeom.csVector3ArrayChangeAll_Truncate(self, *args)
    def Empty(self): return _csgeom.csVector3ArrayChangeAll_Empty(self)
    def DeleteIndex(self, *args): return _csgeom.csVector3ArrayChangeAll_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _csgeom.csVector3ArrayChangeAll_DeleteIndexFast(self, *args)
    def Delete(self, *args): return _csgeom.csVector3ArrayChangeAll_Delete(self, *args)
    __swig_destroy__ = _csgeom.delete_csVector3ArrayChangeAll
    __del__ = lambda self : None;
csVector3ArrayChangeAll_swigregister = _csgeom.csVector3ArrayChangeAll_swigregister
csVector3ArrayChangeAll_swigregister(csVector3ArrayChangeAll)

class csVector4Float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_csgeom.csVector4Float_x_get, _csgeom.csVector4Float_x_set)
    y = _swig_property(_csgeom.csVector4Float_y_get, _csgeom.csVector4Float_y_set)
    z = _swig_property(_csgeom.csVector4Float_z_get, _csgeom.csVector4Float_z_set)
    w = _swig_property(_csgeom.csVector4Float_w_get, _csgeom.csVector4Float_w_set)
    def __init__(self): 
        this = _csgeom.new_csVector4Float()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csVector4Float
    __del__ = lambda self : None;
csVector4Float_swigregister = _csgeom.csVector4Float_swigregister
csVector4Float_swigregister(csVector4Float)

class csVector4(csVector4Float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csVector4(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _csgeom.csVector4_assign(self, *args)
    def __add__(self, *args): return _csgeom.csVector4___add__(self, *args)
    def __sub__(self, *args): return _csgeom.csVector4___sub__(self, *args)
    def __mul__(self, *args): return _csgeom.csVector4___mul__(self, *args)
    def __div__(self, *args): return _csgeom.csVector4___div__(self, *args)
    def __eq__(self, *args): return _csgeom.csVector4___eq__(self, *args)
    def __ne__(self, *args): return _csgeom.csVector4___ne__(self, *args)
    def __lt__(self, *args): return _csgeom.csVector4___lt__(self, *args)
    def __gt__(self, *args): return _csgeom.csVector4___gt__(self, *args)
    def __rmul__(self, *args): return _csgeom.csVector4___rmul__(self, *args)
    def __abs__(self): return _csgeom.csVector4___abs__(self)
    def __getitem__(self, *args): return _csgeom.csVector4___getitem__(self, *args)
    def __setitem__(self, *args): return _csgeom.csVector4___setitem__(self, *args)
    def __nonzero__(self): return _csgeom.csVector4___nonzero__(self)
    def __str__(self):
      return "%f,%f,%f,%f"%(self.x,self.y,self.z,self.w)
    def __repr__(self):
      return "cspace.csVector4(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csVector4
    __del__ = lambda self : None;
csVector4_swigregister = _csgeom.csVector4_swigregister
csVector4_swigregister(csVector4)

class csMatrix2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m11 = _swig_property(_csgeom.csMatrix2_m11_get, _csgeom.csMatrix2_m11_set)
    m12 = _swig_property(_csgeom.csMatrix2_m12_get, _csgeom.csMatrix2_m12_set)
    m21 = _swig_property(_csgeom.csMatrix2_m21_get, _csgeom.csMatrix2_m21_set)
    m22 = _swig_property(_csgeom.csMatrix2_m22_get, _csgeom.csMatrix2_m22_set)
    def __init__(self, *args): 
        this = _csgeom.new_csMatrix2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row1(self): return _csgeom.csMatrix2_Row1(self)
    def Row2(self): return _csgeom.csMatrix2_Row2(self)
    def Col1(self): return _csgeom.csMatrix2_Col1(self)
    def Col2(self): return _csgeom.csMatrix2_Col2(self)
    def Set(self, *args): return _csgeom.csMatrix2_Set(self, *args)
    def __iadd__(self, *args): return _csgeom.csMatrix2___iadd__(self, *args)
    def __isub__(self, *args): return _csgeom.csMatrix2___isub__(self, *args)
    def __imul__(self, *args): return _csgeom.csMatrix2___imul__(self, *args)
    def __idiv__(self, *args): return _csgeom.csMatrix2___idiv__(self, *args)
    def __pos__(self): return _csgeom.csMatrix2___pos__(self)
    def __neg__(self): return _csgeom.csMatrix2___neg__(self)
    def Transpose(self): return _csgeom.csMatrix2_Transpose(self)
    def GetTranspose(self): return _csgeom.csMatrix2_GetTranspose(self)
    def GetInverse(self): return _csgeom.csMatrix2_GetInverse(self)
    def Invert(self): return _csgeom.csMatrix2_Invert(self)
    def Determinant(self): return _csgeom.csMatrix2_Determinant(self)
    def Identity(self): return _csgeom.csMatrix2_Identity(self)
    def __str__(s):
      return "%f,%f\n%f,%f"%(s.m11,s.m12,s.m21,s.m22)
    def __repr__(s):
      return "cspace.csMatrix2(%f,%f,%f,%f)"%(s.m11,s.m12,s.m21,s.m22)

    __swig_destroy__ = _csgeom.delete_csMatrix2
    __del__ = lambda self : None;
csMatrix2_swigregister = _csgeom.csMatrix2_swigregister
csMatrix2_swigregister(csMatrix2)

class csMatrix3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m11 = _swig_property(_csgeom.csMatrix3_m11_get, _csgeom.csMatrix3_m11_set)
    m12 = _swig_property(_csgeom.csMatrix3_m12_get, _csgeom.csMatrix3_m12_set)
    m13 = _swig_property(_csgeom.csMatrix3_m13_get, _csgeom.csMatrix3_m13_set)
    m21 = _swig_property(_csgeom.csMatrix3_m21_get, _csgeom.csMatrix3_m21_set)
    m22 = _swig_property(_csgeom.csMatrix3_m22_get, _csgeom.csMatrix3_m22_set)
    m23 = _swig_property(_csgeom.csMatrix3_m23_get, _csgeom.csMatrix3_m23_set)
    m31 = _swig_property(_csgeom.csMatrix3_m31_get, _csgeom.csMatrix3_m31_set)
    m32 = _swig_property(_csgeom.csMatrix3_m32_get, _csgeom.csMatrix3_m32_set)
    m33 = _swig_property(_csgeom.csMatrix3_m33_get, _csgeom.csMatrix3_m33_set)
    def __init__(self, *args): 
        this = _csgeom.new_csMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(self): return _csgeom.csMatrix3_Description(self)
    def Row1(self): return _csgeom.csMatrix3_Row1(self)
    def SetRow1(self, *args): return _csgeom.csMatrix3_SetRow1(self, *args)
    def Row2(self): return _csgeom.csMatrix3_Row2(self)
    def SetRow2(self, *args): return _csgeom.csMatrix3_SetRow2(self, *args)
    def Row3(self): return _csgeom.csMatrix3_Row3(self)
    def SetRow3(self, *args): return _csgeom.csMatrix3_SetRow3(self, *args)
    def Row(self, *args): return _csgeom.csMatrix3_Row(self, *args)
    def SetRow(self, *args): return _csgeom.csMatrix3_SetRow(self, *args)
    def Col1(self): return _csgeom.csMatrix3_Col1(self)
    def SetCol1(self, *args): return _csgeom.csMatrix3_SetCol1(self, *args)
    def Col2(self): return _csgeom.csMatrix3_Col2(self)
    def SetCol2(self, *args): return _csgeom.csMatrix3_SetCol2(self, *args)
    def Col3(self): return _csgeom.csMatrix3_Col3(self)
    def SetCol3(self, *args): return _csgeom.csMatrix3_SetCol3(self, *args)
    def Col(self, *args): return _csgeom.csMatrix3_Col(self, *args)
    def SetCol(self, *args): return _csgeom.csMatrix3_SetCol(self, *args)
    def Set(self, *args): return _csgeom.csMatrix3_Set(self, *args)
    def assign(self, *args): return _csgeom.csMatrix3_assign(self, *args)
    def __iadd__(self, *args): return _csgeom.csMatrix3___iadd__(self, *args)
    def __isub__(self, *args): return _csgeom.csMatrix3___isub__(self, *args)
    def __idiv__(self, *args): return _csgeom.csMatrix3___idiv__(self, *args)
    def __pos__(self): return _csgeom.csMatrix3___pos__(self)
    def __neg__(self): return _csgeom.csMatrix3___neg__(self)
    def Transpose(self): return _csgeom.csMatrix3_Transpose(self)
    def GetTranspose(self): return _csgeom.csMatrix3_GetTranspose(self)
    def GetInverse(self): return _csgeom.csMatrix3_GetInverse(self)
    def Invert(self): return _csgeom.csMatrix3_Invert(self)
    def Determinant(self): return _csgeom.csMatrix3_Determinant(self)
    def Identity(self): return _csgeom.csMatrix3_Identity(self)
    def IsIdentity(self): return _csgeom.csMatrix3_IsIdentity(self)
    def __add__(self, *args): return _csgeom.csMatrix3___add__(self, *args)
    def __sub__(self, *args): return _csgeom.csMatrix3___sub__(self, *args)
    def __div__(self, *args): return _csgeom.csMatrix3___div__(self, *args)
    def __eq__(self, *args): return _csgeom.csMatrix3___eq__(self, *args)
    def __ne__(self, *args): return _csgeom.csMatrix3___ne__(self, *args)
    def __lt__(self, *args): return _csgeom.csMatrix3___lt__(self, *args)
    def __mul__(self, *args): return _csgeom.csMatrix3___mul__(self, *args)
    def __imul__(self, *args): return _csgeom.csMatrix3___imul__(self, *args)
    def __rmul__(self, *args): return _csgeom.csMatrix3___rmul__(self, *args)
    def __str__(s):
      return "%f,%f,%f\n%f,%f,%f\n%f,%f,%f"%(s.m11,s.m12,s.m13,
                s.m21,s.m22,s.m23,s.m31,s.m32,s.m33)
    def __repr__(s):
      return "cspace.csMatrix3(%f,%f,%f,%f,%f,%f,%f,%f,%f)"%(s.m11,s.m12,
                s.m13,s.m21,s.m22,s.m23,s.m31,s.m32,s.m33)

    __swig_destroy__ = _csgeom.delete_csMatrix3
    __del__ = lambda self : None;
csMatrix3_swigregister = _csgeom.csMatrix3_swigregister
csMatrix3_swigregister(csMatrix3)

class csXRotMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csXRotMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csXRotMatrix3
    __del__ = lambda self : None;
csXRotMatrix3_swigregister = _csgeom.csXRotMatrix3_swigregister
csXRotMatrix3_swigregister(csXRotMatrix3)

class csYRotMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csYRotMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csYRotMatrix3
    __del__ = lambda self : None;
csYRotMatrix3_swigregister = _csgeom.csYRotMatrix3_swigregister
csYRotMatrix3_swigregister(csYRotMatrix3)

class csZRotMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csZRotMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csZRotMatrix3
    __del__ = lambda self : None;
csZRotMatrix3_swigregister = _csgeom.csZRotMatrix3_swigregister
csZRotMatrix3_swigregister(csZRotMatrix3)

class csXScaleMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csXScaleMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csXScaleMatrix3
    __del__ = lambda self : None;
csXScaleMatrix3_swigregister = _csgeom.csXScaleMatrix3_swigregister
csXScaleMatrix3_swigregister(csXScaleMatrix3)

class csYScaleMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csYScaleMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csYScaleMatrix3
    __del__ = lambda self : None;
csYScaleMatrix3_swigregister = _csgeom.csYScaleMatrix3_swigregister
csYScaleMatrix3_swigregister(csYScaleMatrix3)

class csZScaleMatrix3(csMatrix3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csZScaleMatrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csZScaleMatrix3
    __del__ = lambda self : None;
csZScaleMatrix3_swigregister = _csgeom.csZScaleMatrix3_swigregister
csZScaleMatrix3_swigregister(csZScaleMatrix3)

class csTransform(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csTransform
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _csgeom.new_csTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def Description(self): return _csgeom.csTransform_Description(self)
    def Identity(self): return _csgeom.csTransform_Identity(self)
    def IsIdentity(self): return _csgeom.csTransform_IsIdentity(self)
    def GetO2T(self): return _csgeom.csTransform_GetO2T(self)
    def GetO2TTranslation(self): return _csgeom.csTransform_GetO2TTranslation(self)
    def GetOrigin(self): return _csgeom.csTransform_GetOrigin(self)
    def SetO2T(self, *args): return _csgeom.csTransform_SetO2T(self, *args)
    def SetO2TTranslation(self, *args): return _csgeom.csTransform_SetO2TTranslation(self, *args)
    def SetOrigin(self, *args): return _csgeom.csTransform_SetOrigin(self, *args)
    def Translate(self, *args): return _csgeom.csTransform_Translate(self, *args)
    def Other2ThisRelative(self, *args): return _csgeom.csTransform_Other2ThisRelative(self, *args)
    def Other2This(self, *args): return _csgeom.csTransform_Other2This(self, *args)
    GetReflect = staticmethod(_csgeom.csTransform_GetReflect)
    def GetFront(self): return _csgeom.csTransform_GetFront(self)
    def SetFront(self, *args): return _csgeom.csTransform_SetFront(self, *args)
    def GetUp(self): return _csgeom.csTransform_GetUp(self)
    def SetUp(self, *args): return _csgeom.csTransform_SetUp(self, *args)
    def GetRight(self): return _csgeom.csTransform_GetRight(self)
    def SetRight(self, *args): return _csgeom.csTransform_SetRight(self, *args)
    def __mul__(self, *args): return _csgeom.csTransform___mul__(self, *args)
    def __rmul__(self, *args): return _csgeom.csTransform___rmul__(self, *args)
    def __str__(self):
      return str(self.GetO2T())+"\n"+str(self.GetOrigin())
    def __repr__(self):
      return "cspace.csTransform(%s,%s)"%(repr(self.GetO2T()),
                repr(self.GetOrigin()))

csTransform_swigregister = _csgeom.csTransform_swigregister
csTransform_swigregister(csTransform)

def csTransform_GetReflect(*args):
  return _csgeom.csTransform_GetReflect(*args)
csTransform_GetReflect = _csgeom.csTransform_GetReflect

class csReversibleTransform(csTransform):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csReversibleTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetT2O(self): return _csgeom.csReversibleTransform_GetT2O(self)
    def GetT2OTranslation(self): return _csgeom.csReversibleTransform_GetT2OTranslation(self)
    def GetInverse(self): return _csgeom.csReversibleTransform_GetInverse(self)
    def SetO2T(self, *args): return _csgeom.csReversibleTransform_SetO2T(self, *args)
    def SetT2O(self, *args): return _csgeom.csReversibleTransform_SetT2O(self, *args)
    def This2OtherRelative(self, *args): return _csgeom.csReversibleTransform_This2OtherRelative(self, *args)
    def This2Other(self, *args): return _csgeom.csReversibleTransform_This2Other(self, *args)
    def RotateOther(self, *args): return _csgeom.csReversibleTransform_RotateOther(self, *args)
    def RotateThis(self, *args): return _csgeom.csReversibleTransform_RotateThis(self, *args)
    def LookAt(self, *args): return _csgeom.csReversibleTransform_LookAt(self, *args)
    def LookAtZUpY(self, *args): return _csgeom.csReversibleTransform_LookAtZUpY(self, *args)
    def LookAtZUpX(self, *args): return _csgeom.csReversibleTransform_LookAtZUpX(self, *args)
    def LookAtYUpZ(self, *args): return _csgeom.csReversibleTransform_LookAtYUpZ(self, *args)
    def LookAtYUpX(self, *args): return _csgeom.csReversibleTransform_LookAtYUpX(self, *args)
    def LookAtXUpZ(self, *args): return _csgeom.csReversibleTransform_LookAtXUpZ(self, *args)
    def LookAtXUpY(self, *args): return _csgeom.csReversibleTransform_LookAtXUpY(self, *args)
    def __imul__(self, *args): return _csgeom.csReversibleTransform___imul__(self, *args)
    def __mul__(self, *args): return _csgeom.csReversibleTransform___mul__(self, *args)
    def __idiv__(self, *args): return _csgeom.csReversibleTransform___idiv__(self, *args)
    def __div__(self, *args): return _csgeom.csReversibleTransform___div__(self, *args)
    __swig_destroy__ = _csgeom.delete_csReversibleTransform
    __del__ = lambda self : None;
csReversibleTransform_swigregister = _csgeom.csReversibleTransform_swigregister
csReversibleTransform_swigregister(csReversibleTransform)

class csOrthoTransform(csReversibleTransform):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csOrthoTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetO2T(self, *args): return _csgeom.csOrthoTransform_SetO2T(self, *args)
    def SetT2O(self, *args): return _csgeom.csOrthoTransform_SetT2O(self, *args)
    __swig_destroy__ = _csgeom.delete_csOrthoTransform
    __del__ = lambda self : None;
csOrthoTransform_swigregister = _csgeom.csOrthoTransform_swigregister
csOrthoTransform_swigregister(csOrthoTransform)

class csSphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCenter(self): return _csgeom.csSphere_GetCenter(self)
    def SetCenter(self, *args): return _csgeom.csSphere_SetCenter(self, *args)
    def GetRadius(self): return _csgeom.csSphere_GetRadius(self)
    def SetRadius(self, *args): return _csgeom.csSphere_SetRadius(self, *args)
    def Union(self, *args): return _csgeom.csSphere_Union(self, *args)
    def __iadd__(self, *args): return _csgeom.csSphere___iadd__(self, *args)
    def TestIntersect(self, *args): return _csgeom.csSphere_TestIntersect(self, *args)
    def __imul__(self, *args): return _csgeom.csSphere___imul__(self, *args)
    def __div__(self, *args): return _csgeom.csSphere___div__(self, *args)
    __swig_destroy__ = _csgeom.delete_csSphere
    __del__ = lambda self : None;
csSphere_swigregister = _csgeom.csSphere_swigregister
csSphere_swigregister(csSphere)

class csEllipsoid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csEllipsoid(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCenter(self): return _csgeom.csEllipsoid_GetCenter(self)
    def SetCenter(self, *args): return _csgeom.csEllipsoid_SetCenter(self, *args)
    def GetRadius(self): return _csgeom.csEllipsoid_GetRadius(self)
    def SetRadius(self, *args): return _csgeom.csEllipsoid_SetRadius(self, *args)
    __swig_destroy__ = _csgeom.delete_csEllipsoid
    __del__ = lambda self : None;
csEllipsoid_swigregister = _csgeom.csEllipsoid_swigregister
csEllipsoid_swigregister(csEllipsoid)

CS_POLY_IN = _csgeom.CS_POLY_IN
CS_POLY_ON = _csgeom.CS_POLY_ON
CS_POLY_OUT = _csgeom.CS_POLY_OUT
class csPlane2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    norm = _swig_property(_csgeom.csPlane2_norm_get, _csgeom.csPlane2_norm_set)
    CC = _swig_property(_csgeom.csPlane2_CC_get, _csgeom.csPlane2_CC_set)
    def __init__(self, *args): 
        this = _csgeom.new_csPlane2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Normal(self): return _csgeom.csPlane2_Normal(self)
    def GetNormal(self): return _csgeom.csPlane2_GetNormal(self)
    def A(self): return _csgeom.csPlane2_A(self)
    def B(self): return _csgeom.csPlane2_B(self)
    def C(self): return _csgeom.csPlane2_C(self)
    def Set(self, *args): return _csgeom.csPlane2_Set(self, *args)
    Classify = staticmethod(_csgeom.csPlane2_Classify)
    def Distance(self, *args): return _csgeom.csPlane2_Distance(self, *args)
    def SquaredDistance(self, *args): return _csgeom.csPlane2_SquaredDistance(self, *args)
    def Invert(self): return _csgeom.csPlane2_Invert(self)
    def Normalize(self): return _csgeom.csPlane2_Normalize(self)
    __swig_destroy__ = _csgeom.delete_csPlane2
    __del__ = lambda self : None;
csPlane2_swigregister = _csgeom.csPlane2_swigregister
csPlane2_swigregister(csPlane2)

def csPlane2_Classify(*args):
  return _csgeom.csPlane2_Classify(*args)
csPlane2_Classify = _csgeom.csPlane2_Classify

class csPlane3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    norm = _swig_property(_csgeom.csPlane3_norm_get, _csgeom.csPlane3_norm_set)
    DD = _swig_property(_csgeom.csPlane3_DD_get, _csgeom.csPlane3_DD_set)
    def __init__(self, *args): 
        this = _csgeom.new_csPlane3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _csgeom.csPlane3___eq__(self, *args)
    def Normal(self): return _csgeom.csPlane3_Normal(self)
    def A(self): return _csgeom.csPlane3_A(self)
    def B(self): return _csgeom.csPlane3_B(self)
    def C(self): return _csgeom.csPlane3_C(self)
    def D(self): return _csgeom.csPlane3_D(self)
    def GetNormal(self): return _csgeom.csPlane3_GetNormal(self)
    def Set(self, *args): return _csgeom.csPlane3_Set(self, *args)
    def SetOrigin(self, *args): return _csgeom.csPlane3_SetOrigin(self, *args)
    Classify = staticmethod(_csgeom.csPlane3_Classify)
    def Distance(self, *args): return _csgeom.csPlane3_Distance(self, *args)
    def Invert(self): return _csgeom.csPlane3_Invert(self)
    def Inverse(self): return _csgeom.csPlane3_Inverse(self)
    def Normalize(self): return _csgeom.csPlane3_Normalize(self)
    def FindPoint(self): return _csgeom.csPlane3_FindPoint(self)
    def ProjectOnto(self, *args): return _csgeom.csPlane3_ProjectOnto(self, *args)
    FindOrthogonalPoints = staticmethod(_csgeom.csPlane3_FindOrthogonalPoints)
    def ClipPolygon(self, *args): return _csgeom.csPlane3_ClipPolygon(self, *args)
    def Description(self): return _csgeom.csPlane3_Description(self)
    def __imul__(self, *args): return _csgeom.csPlane3___imul__(self, *args)
    def __idiv__(self, *args): return _csgeom.csPlane3___idiv__(self, *args)
    def __div__(self, *args): return _csgeom.csPlane3___div__(self, *args)
    __swig_destroy__ = _csgeom.delete_csPlane3
    __del__ = lambda self : None;
csPlane3_swigregister = _csgeom.csPlane3_swigregister
csPlane3_swigregister(csPlane3)

def csPlane3_Classify(*args):
  return _csgeom.csPlane3_Classify(*args)
csPlane3_Classify = _csgeom.csPlane3_Classify

def csPlane3_FindOrthogonalPoints(*args):
  return _csgeom.csPlane3_FindOrthogonalPoints(*args)
csPlane3_FindOrthogonalPoints = _csgeom.csPlane3_FindOrthogonalPoints

class csMath2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WhichSide2D = staticmethod(_csgeom.csMath2_WhichSide2D)
    InPoly2D = staticmethod(_csgeom.csMath2_InPoly2D)
    Area2 = staticmethod(_csgeom.csMath2_Area2)
    Right = staticmethod(_csgeom.csMath2_Right)
    Left = staticmethod(_csgeom.csMath2_Left)
    Visible = staticmethod(_csgeom.csMath2_Visible)
    PlanesEqual = staticmethod(_csgeom.csMath2_PlanesEqual)
    PlanesClose = staticmethod(_csgeom.csMath2_PlanesClose)
    def __init__(self): 
        this = _csgeom.new_csMath2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csMath2
    __del__ = lambda self : None;
csMath2_swigregister = _csgeom.csMath2_swigregister
csMath2_swigregister(csMath2)

def csMath2_WhichSide2D(*args):
  return _csgeom.csMath2_WhichSide2D(*args)
csMath2_WhichSide2D = _csgeom.csMath2_WhichSide2D

def csMath2_InPoly2D(*args):
  return _csgeom.csMath2_InPoly2D(*args)
csMath2_InPoly2D = _csgeom.csMath2_InPoly2D

def csMath2_Area2(*args):
  return _csgeom.csMath2_Area2(*args)
csMath2_Area2 = _csgeom.csMath2_Area2

def csMath2_Right(*args):
  return _csgeom.csMath2_Right(*args)
csMath2_Right = _csgeom.csMath2_Right

def csMath2_Left(*args):
  return _csgeom.csMath2_Left(*args)
csMath2_Left = _csgeom.csMath2_Left

def csMath2_Visible(*args):
  return _csgeom.csMath2_Visible(*args)
csMath2_Visible = _csgeom.csMath2_Visible

def csMath2_PlanesEqual(*args):
  return _csgeom.csMath2_PlanesEqual(*args)
csMath2_PlanesEqual = _csgeom.csMath2_PlanesEqual

def csMath2_PlanesClose(*args):
  return _csgeom.csMath2_PlanesClose(*args)
csMath2_PlanesClose = _csgeom.csMath2_PlanesClose

class csIntersect2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PlanePolygon = staticmethod(_csgeom.csIntersect2_PlanePolygon)
    SegmentSegment = staticmethod(_csgeom.csIntersect2_SegmentSegment)
    SegmentLine = staticmethod(_csgeom.csIntersect2_SegmentLine)
    LineLine = staticmethod(_csgeom.csIntersect2_LineLine)
    SegmentPlane = staticmethod(_csgeom.csIntersect2_SegmentPlane)
    SegmentPlaneNoTest = staticmethod(_csgeom.csIntersect2_SegmentPlaneNoTest)
    PlanePlane = staticmethod(_csgeom.csIntersect2_PlanePlane)
    SegmentBox = staticmethod(_csgeom.csIntersect2_SegmentBox)
    def __init__(self): 
        this = _csgeom.new_csIntersect2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csIntersect2
    __del__ = lambda self : None;
csIntersect2_swigregister = _csgeom.csIntersect2_swigregister
csIntersect2_swigregister(csIntersect2)

def csIntersect2_PlanePolygon(*args):
  return _csgeom.csIntersect2_PlanePolygon(*args)
csIntersect2_PlanePolygon = _csgeom.csIntersect2_PlanePolygon

def csIntersect2_SegmentSegment(*args):
  return _csgeom.csIntersect2_SegmentSegment(*args)
csIntersect2_SegmentSegment = _csgeom.csIntersect2_SegmentSegment

def csIntersect2_SegmentLine(*args):
  return _csgeom.csIntersect2_SegmentLine(*args)
csIntersect2_SegmentLine = _csgeom.csIntersect2_SegmentLine

def csIntersect2_LineLine(*args):
  return _csgeom.csIntersect2_LineLine(*args)
csIntersect2_LineLine = _csgeom.csIntersect2_LineLine

def csIntersect2_SegmentPlane(*args):
  return _csgeom.csIntersect2_SegmentPlane(*args)
csIntersect2_SegmentPlane = _csgeom.csIntersect2_SegmentPlane

def csIntersect2_SegmentPlaneNoTest(*args):
  return _csgeom.csIntersect2_SegmentPlaneNoTest(*args)
csIntersect2_SegmentPlaneNoTest = _csgeom.csIntersect2_SegmentPlaneNoTest

def csIntersect2_PlanePlane(*args):
  return _csgeom.csIntersect2_PlanePlane(*args)
csIntersect2_PlanePlane = _csgeom.csIntersect2_PlanePlane

def csIntersect2_SegmentBox(*args):
  return _csgeom.csIntersect2_SegmentBox(*args)
csIntersect2_SegmentBox = _csgeom.csIntersect2_SegmentBox

class csPoly2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csPoly2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csPoly2D
    __del__ = lambda self : None;
    def assign(self, *args): return _csgeom.csPoly2D_assign(self, *args)
    def MakeEmpty(self): return _csgeom.csPoly2D_MakeEmpty(self)
    def GetVertexCount(self): return _csgeom.csPoly2D_GetVertexCount(self)
    def GetVertices(self): return _csgeom.csPoly2D_GetVertices(self)
    def GetVertex(self, *args): return _csgeom.csPoly2D_GetVertex(self, *args)
    def GetFirst(self): return _csgeom.csPoly2D_GetFirst(self)
    def GetLast(self): return _csgeom.csPoly2D_GetLast(self)
    In = staticmethod(_csgeom.csPoly2D_In)
    def MakeRoom(self, *args): return _csgeom.csPoly2D_MakeRoom(self, *args)
    def SetVertexCount(self, *args): return _csgeom.csPoly2D_SetVertexCount(self, *args)
    def AddVertex(self, *args): return _csgeom.csPoly2D_AddVertex(self, *args)
    def SetVertices(self, *args): return _csgeom.csPoly2D_SetVertices(self, *args)
    def ClipAgainst(self, *args): return _csgeom.csPoly2D_ClipAgainst(self, *args)
    def Intersect(self, *args): return _csgeom.csPoly2D_Intersect(self, *args)
    def ClipPlane(self, *args): return _csgeom.csPoly2D_ClipPlane(self, *args)
    def ExtendConvex(self, *args): return _csgeom.csPoly2D_ExtendConvex(self, *args)
    def GetSignedArea(self): return _csgeom.csPoly2D_GetSignedArea(self)
    def Random(self, *args): return _csgeom.csPoly2D_Random(self, *args)
    def __getitem__(self, *args): return _csgeom.csPoly2D___getitem__(self, *args)
    def __setitem__ (self, i, v):
      own_v = self.__getitem__(i)
      for i in range(2):
        own_v[i] = v[i]

csPoly2D_swigregister = _csgeom.csPoly2D_swigregister
csPoly2D_swigregister(csPoly2D)

def csPoly2D_In(*args):
  return _csgeom.csPoly2D_In(*args)
csPoly2D_In = _csgeom.csPoly2D_In

class csPoly2DFactory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csPoly2DFactory
    __del__ = lambda self : None;
    def Create(self): return _csgeom.csPoly2DFactory_Create(self)
    def __init__(self): 
        this = _csgeom.new_csPoly2DFactory()
        try: self.this.append(this)
        except: self.this = this
csPoly2DFactory_swigregister = _csgeom.csPoly2DFactory_swigregister
csPoly2DFactory_swigregister(csPoly2DFactory)

class csMath3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WhichSide3D = staticmethod(_csgeom.csMath3_WhichSide3D)
    Visible = staticmethod(_csgeom.csMath3_Visible)
    Between = staticmethod(_csgeom.csMath3_Between)
    SetMinMax = staticmethod(_csgeom.csMath3_SetMinMax)
    DoubleArea3 = staticmethod(_csgeom.csMath3_DoubleArea3)
    Direction3 = staticmethod(_csgeom.csMath3_Direction3)
    CalcNormal = staticmethod(_csgeom.csMath3_CalcNormal)
    CalcPlane = staticmethod(_csgeom.csMath3_CalcPlane)
    PlanesEqual = staticmethod(_csgeom.csMath3_PlanesEqual)
    PlanesClose = staticmethod(_csgeom.csMath3_PlanesClose)
    OuterPlanes = staticmethod(_csgeom.csMath3_OuterPlanes)
    FindObserverSides = staticmethod(_csgeom.csMath3_FindObserverSides)
    SpherePosition = staticmethod(_csgeom.csMath3_SpherePosition)
    def __init__(self): 
        this = _csgeom.new_csMath3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csMath3
    __del__ = lambda self : None;
csMath3_swigregister = _csgeom.csMath3_swigregister
csMath3_swigregister(csMath3)

def csMath3_WhichSide3D(*args):
  return _csgeom.csMath3_WhichSide3D(*args)
csMath3_WhichSide3D = _csgeom.csMath3_WhichSide3D

def csMath3_Visible(*args):
  return _csgeom.csMath3_Visible(*args)
csMath3_Visible = _csgeom.csMath3_Visible

def csMath3_Between(*args):
  return _csgeom.csMath3_Between(*args)
csMath3_Between = _csgeom.csMath3_Between

def csMath3_SetMinMax(*args):
  return _csgeom.csMath3_SetMinMax(*args)
csMath3_SetMinMax = _csgeom.csMath3_SetMinMax

def csMath3_DoubleArea3(*args):
  return _csgeom.csMath3_DoubleArea3(*args)
csMath3_DoubleArea3 = _csgeom.csMath3_DoubleArea3

def csMath3_Direction3(*args):
  return _csgeom.csMath3_Direction3(*args)
csMath3_Direction3 = _csgeom.csMath3_Direction3

def csMath3_CalcNormal(*args):
  return _csgeom.csMath3_CalcNormal(*args)
csMath3_CalcNormal = _csgeom.csMath3_CalcNormal

def csMath3_CalcPlane(*args):
  return _csgeom.csMath3_CalcPlane(*args)
csMath3_CalcPlane = _csgeom.csMath3_CalcPlane

def csMath3_PlanesEqual(*args):
  return _csgeom.csMath3_PlanesEqual(*args)
csMath3_PlanesEqual = _csgeom.csMath3_PlanesEqual

def csMath3_PlanesClose(*args):
  return _csgeom.csMath3_PlanesClose(*args)
csMath3_PlanesClose = _csgeom.csMath3_PlanesClose

def csMath3_OuterPlanes(*args):
  return _csgeom.csMath3_OuterPlanes(*args)
csMath3_OuterPlanes = _csgeom.csMath3_OuterPlanes

def csMath3_FindObserverSides(*args):
  return _csgeom.csMath3_FindObserverSides(*args)
csMath3_FindObserverSides = _csgeom.csMath3_FindObserverSides

def csMath3_SpherePosition(*args):
  return _csgeom.csMath3_SpherePosition(*args)
csMath3_SpherePosition = _csgeom.csMath3_SpherePosition

class csSquaredDist(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PointPoint = staticmethod(_csgeom.csSquaredDist_PointPoint)
    PointLine = staticmethod(_csgeom.csSquaredDist_PointLine)
    PointPlane = staticmethod(_csgeom.csSquaredDist_PointPlane)
    PointPoly = staticmethod(_csgeom.csSquaredDist_PointPoly)
    def __init__(self): 
        this = _csgeom.new_csSquaredDist()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csSquaredDist
    __del__ = lambda self : None;
csSquaredDist_swigregister = _csgeom.csSquaredDist_swigregister
csSquaredDist_swigregister(csSquaredDist)

def csSquaredDist_PointPoint(*args):
  return _csgeom.csSquaredDist_PointPoint(*args)
csSquaredDist_PointPoint = _csgeom.csSquaredDist_PointPoint

def csSquaredDist_PointLine(*args):
  return _csgeom.csSquaredDist_PointLine(*args)
csSquaredDist_PointLine = _csgeom.csSquaredDist_PointLine

def csSquaredDist_PointPlane(*args):
  return _csgeom.csSquaredDist_PointPlane(*args)
csSquaredDist_PointPlane = _csgeom.csSquaredDist_PointPlane

def csSquaredDist_PointPoly(*args):
  return _csgeom.csSquaredDist_PointPoly(*args)
csSquaredDist_PointPoly = _csgeom.csSquaredDist_PointPoly

class csIntersect3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PlanePolygon = staticmethod(_csgeom.csIntersect3_PlanePolygon)
    SegmentFrustum = staticmethod(_csgeom.csIntersect3_SegmentFrustum)
    SegmentTriangle = staticmethod(_csgeom.csIntersect3_SegmentTriangle)
    SegmentPolygon = staticmethod(_csgeom.csIntersect3_SegmentPolygon)
    SegmentPlanes = staticmethod(_csgeom.csIntersect3_SegmentPlanes)
    SegmentPlane = staticmethod(_csgeom.csIntersect3_SegmentPlane)
    ThreePlanes = staticmethod(_csgeom.csIntersect3_ThreePlanes)
    PlaneXPlane = staticmethod(_csgeom.csIntersect3_PlaneXPlane)
    PlaneYPlane = staticmethod(_csgeom.csIntersect3_PlaneYPlane)
    PlaneZPlane = staticmethod(_csgeom.csIntersect3_PlaneZPlane)
    PlaneAxisPlane = staticmethod(_csgeom.csIntersect3_PlaneAxisPlane)
    SegmentZ0Plane = staticmethod(_csgeom.csIntersect3_SegmentZ0Plane)
    SegmentXPlane = staticmethod(_csgeom.csIntersect3_SegmentXPlane)
    SegmentYPlane = staticmethod(_csgeom.csIntersect3_SegmentYPlane)
    SegmentZPlane = staticmethod(_csgeom.csIntersect3_SegmentZPlane)
    SegmentAxisPlane = staticmethod(_csgeom.csIntersect3_SegmentAxisPlane)
    SegmentXFrustum = staticmethod(_csgeom.csIntersect3_SegmentXFrustum)
    SegmentYFrustum = staticmethod(_csgeom.csIntersect3_SegmentYFrustum)
    BoxSegment = staticmethod(_csgeom.csIntersect3_BoxSegment)
    ClipSegmentBox = staticmethod(_csgeom.csIntersect3_ClipSegmentBox)
    BoxFrustum = staticmethod(_csgeom.csIntersect3_BoxFrustum)
    BoxSphere = staticmethod(_csgeom.csIntersect3_BoxSphere)
    BoxPlane = staticmethod(_csgeom.csIntersect3_BoxPlane)
    BoxTriangle = staticmethod(_csgeom.csIntersect3_BoxTriangle)
    BoxBox = staticmethod(_csgeom.csIntersect3_BoxBox)
    FrustumFrustum = staticmethod(_csgeom.csIntersect3_FrustumFrustum)
    TriangleTriangle = staticmethod(_csgeom.csIntersect3_TriangleTriangle)
    def __init__(self): 
        this = _csgeom.new_csIntersect3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csIntersect3
    __del__ = lambda self : None;
csIntersect3_swigregister = _csgeom.csIntersect3_swigregister
csIntersect3_swigregister(csIntersect3)

def csIntersect3_PlanePolygon(*args):
  return _csgeom.csIntersect3_PlanePolygon(*args)
csIntersect3_PlanePolygon = _csgeom.csIntersect3_PlanePolygon

def csIntersect3_SegmentFrustum(*args):
  return _csgeom.csIntersect3_SegmentFrustum(*args)
csIntersect3_SegmentFrustum = _csgeom.csIntersect3_SegmentFrustum

def csIntersect3_SegmentTriangle(*args):
  return _csgeom.csIntersect3_SegmentTriangle(*args)
csIntersect3_SegmentTriangle = _csgeom.csIntersect3_SegmentTriangle

def csIntersect3_SegmentPolygon(*args):
  return _csgeom.csIntersect3_SegmentPolygon(*args)
csIntersect3_SegmentPolygon = _csgeom.csIntersect3_SegmentPolygon

def csIntersect3_SegmentPlanes(*args):
  return _csgeom.csIntersect3_SegmentPlanes(*args)
csIntersect3_SegmentPlanes = _csgeom.csIntersect3_SegmentPlanes

def csIntersect3_SegmentPlane(*args):
  return _csgeom.csIntersect3_SegmentPlane(*args)
csIntersect3_SegmentPlane = _csgeom.csIntersect3_SegmentPlane

def csIntersect3_ThreePlanes(*args):
  return _csgeom.csIntersect3_ThreePlanes(*args)
csIntersect3_ThreePlanes = _csgeom.csIntersect3_ThreePlanes

def csIntersect3_PlaneXPlane(*args):
  return _csgeom.csIntersect3_PlaneXPlane(*args)
csIntersect3_PlaneXPlane = _csgeom.csIntersect3_PlaneXPlane

def csIntersect3_PlaneYPlane(*args):
  return _csgeom.csIntersect3_PlaneYPlane(*args)
csIntersect3_PlaneYPlane = _csgeom.csIntersect3_PlaneYPlane

def csIntersect3_PlaneZPlane(*args):
  return _csgeom.csIntersect3_PlaneZPlane(*args)
csIntersect3_PlaneZPlane = _csgeom.csIntersect3_PlaneZPlane

def csIntersect3_PlaneAxisPlane(*args):
  return _csgeom.csIntersect3_PlaneAxisPlane(*args)
csIntersect3_PlaneAxisPlane = _csgeom.csIntersect3_PlaneAxisPlane

def csIntersect3_SegmentZ0Plane(*args):
  return _csgeom.csIntersect3_SegmentZ0Plane(*args)
csIntersect3_SegmentZ0Plane = _csgeom.csIntersect3_SegmentZ0Plane

def csIntersect3_SegmentXPlane(*args):
  return _csgeom.csIntersect3_SegmentXPlane(*args)
csIntersect3_SegmentXPlane = _csgeom.csIntersect3_SegmentXPlane

def csIntersect3_SegmentYPlane(*args):
  return _csgeom.csIntersect3_SegmentYPlane(*args)
csIntersect3_SegmentYPlane = _csgeom.csIntersect3_SegmentYPlane

def csIntersect3_SegmentZPlane(*args):
  return _csgeom.csIntersect3_SegmentZPlane(*args)
csIntersect3_SegmentZPlane = _csgeom.csIntersect3_SegmentZPlane

def csIntersect3_SegmentAxisPlane(*args):
  return _csgeom.csIntersect3_SegmentAxisPlane(*args)
csIntersect3_SegmentAxisPlane = _csgeom.csIntersect3_SegmentAxisPlane

def csIntersect3_SegmentXFrustum(*args):
  return _csgeom.csIntersect3_SegmentXFrustum(*args)
csIntersect3_SegmentXFrustum = _csgeom.csIntersect3_SegmentXFrustum

def csIntersect3_SegmentYFrustum(*args):
  return _csgeom.csIntersect3_SegmentYFrustum(*args)
csIntersect3_SegmentYFrustum = _csgeom.csIntersect3_SegmentYFrustum

def csIntersect3_BoxSegment(*args):
  return _csgeom.csIntersect3_BoxSegment(*args)
csIntersect3_BoxSegment = _csgeom.csIntersect3_BoxSegment

def csIntersect3_ClipSegmentBox(*args):
  return _csgeom.csIntersect3_ClipSegmentBox(*args)
csIntersect3_ClipSegmentBox = _csgeom.csIntersect3_ClipSegmentBox

def csIntersect3_BoxFrustum(*args):
  return _csgeom.csIntersect3_BoxFrustum(*args)
csIntersect3_BoxFrustum = _csgeom.csIntersect3_BoxFrustum

def csIntersect3_BoxSphere(*args):
  return _csgeom.csIntersect3_BoxSphere(*args)
csIntersect3_BoxSphere = _csgeom.csIntersect3_BoxSphere

def csIntersect3_BoxPlane(*args):
  return _csgeom.csIntersect3_BoxPlane(*args)
csIntersect3_BoxPlane = _csgeom.csIntersect3_BoxPlane

def csIntersect3_BoxTriangle(*args):
  return _csgeom.csIntersect3_BoxTriangle(*args)
csIntersect3_BoxTriangle = _csgeom.csIntersect3_BoxTriangle

def csIntersect3_BoxBox(*args):
  return _csgeom.csIntersect3_BoxBox(*args)
csIntersect3_BoxBox = _csgeom.csIntersect3_BoxBox

def csIntersect3_FrustumFrustum(*args):
  return _csgeom.csIntersect3_FrustumFrustum(*args)
csIntersect3_FrustumFrustum = _csgeom.csIntersect3_FrustumFrustum

def csIntersect3_TriangleTriangle(*args):
  return _csgeom.csIntersect3_TriangleTriangle(*args)
csIntersect3_TriangleTriangle = _csgeom.csIntersect3_TriangleTriangle

CS_POL_SAME_PLANE = _csgeom.CS_POL_SAME_PLANE
CS_POL_FRONT = _csgeom.CS_POL_FRONT
CS_POL_BACK = _csgeom.CS_POL_BACK
CS_POL_SPLIT_NEEDED = _csgeom.CS_POL_SPLIT_NEEDED
class csPoly3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csPoly3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csPoly3D
    __del__ = lambda self : None;
    def MakeEmpty(self): return _csgeom.csPoly3D_MakeEmpty(self)
    def GetVertexCount(self): return _csgeom.csPoly3D_GetVertexCount(self)
    def GetVertices(self): return _csgeom.csPoly3D_GetVertices(self)
    def GetVertex(self, *args): return _csgeom.csPoly3D_GetVertex(self, *args)
    def GetFirst(self): return _csgeom.csPoly3D_GetFirst(self)
    def GetLast(self): return _csgeom.csPoly3D_GetLast(self)
    In = staticmethod(_csgeom.csPoly3D_In)
    def MakeRoom(self, *args): return _csgeom.csPoly3D_MakeRoom(self, *args)
    def SetVertexCount(self, *args): return _csgeom.csPoly3D_SetVertexCount(self, *args)
    def AddVertex(self, *args): return _csgeom.csPoly3D_AddVertex(self, *args)
    def SetVertices(self, *args): return _csgeom.csPoly3D_SetVertices(self, *args)
    def ProjectXPlane(self, *args): return _csgeom.csPoly3D_ProjectXPlane(self, *args)
    def ProjectYPlane(self, *args): return _csgeom.csPoly3D_ProjectYPlane(self, *args)
    def ProjectZPlane(self, *args): return _csgeom.csPoly3D_ProjectZPlane(self, *args)
    def ProjectAxisPlane(self, *args): return _csgeom.csPoly3D_ProjectAxisPlane(self, *args)
    def Classify(self, *args): return _csgeom.csPoly3D_Classify(self, *args)
    def ClassifyX(self, *args): return _csgeom.csPoly3D_ClassifyX(self, *args)
    def ClassifyY(self, *args): return _csgeom.csPoly3D_ClassifyY(self, *args)
    def ClassifyZ(self, *args): return _csgeom.csPoly3D_ClassifyZ(self, *args)
    def ClassifyAxis(self, *args): return _csgeom.csPoly3D_ClassifyAxis(self, *args)
    def IsAxisAligned(self, *args): return _csgeom.csPoly3D_IsAxisAligned(self, *args)
    def ComputeMainNormalAxis(self): return _csgeom.csPoly3D_ComputeMainNormalAxis(self)
    def CutToPlane(self, *args): return _csgeom.csPoly3D_CutToPlane(self, *args)
    def SplitWithPlane(self, *args): return _csgeom.csPoly3D_SplitWithPlane(self, *args)
    def SplitWithPlaneX(self, *args): return _csgeom.csPoly3D_SplitWithPlaneX(self, *args)
    def SplitWithPlaneY(self, *args): return _csgeom.csPoly3D_SplitWithPlaneY(self, *args)
    def SplitWithPlaneZ(self, *args): return _csgeom.csPoly3D_SplitWithPlaneZ(self, *args)
    def ComputeNormal(self, *args): return _csgeom.csPoly3D_ComputeNormal(self, *args)
    def ComputePlane(self, *args): return _csgeom.csPoly3D_ComputePlane(self, *args)
    def GetArea(self): return _csgeom.csPoly3D_GetArea(self)
    def GetCenter(self): return _csgeom.csPoly3D_GetCenter(self)
    def InSphere(self, *args): return _csgeom.csPoly3D_InSphere(self, *args)
    def __getitem__(self, *args): return _csgeom.csPoly3D___getitem__(self, *args)
    def __setitem__ (self, i, v):
      own_v = self.__getitem__(i)
      for i in range(3):
        own_v[i] = v[i]

csPoly3D_swigregister = _csgeom.csPoly3D_swigregister
csPoly3D_swigregister(csPoly3D)

def csPoly3D_In(*args):
  return _csgeom.csPoly3D_In(*args)
csPoly3D_In = _csgeom.csPoly3D_In

class csCompressVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    orig_idx = _swig_property(_csgeom.csCompressVertex_orig_idx_get, _csgeom.csCompressVertex_orig_idx_set)
    x = _swig_property(_csgeom.csCompressVertex_x_get, _csgeom.csCompressVertex_x_set)
    y = _swig_property(_csgeom.csCompressVertex_y_get, _csgeom.csCompressVertex_y_set)
    z = _swig_property(_csgeom.csCompressVertex_z_get, _csgeom.csCompressVertex_z_set)
    new_idx = _swig_property(_csgeom.csCompressVertex_new_idx_get, _csgeom.csCompressVertex_new_idx_set)
    used = _swig_property(_csgeom.csCompressVertex_used_get, _csgeom.csCompressVertex_used_set)
    def __init__(self): 
        this = _csgeom.new_csCompressVertex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csCompressVertex
    __del__ = lambda self : None;
csCompressVertex_swigregister = _csgeom.csCompressVertex_swigregister
csCompressVertex_swigregister(csCompressVertex)

class csVector3Array(csPoly3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, start_size = 10): 
        this = _csgeom.new_csVector3Array(start_size)
        try: self.this.append(this)
        except: self.this = this
    def AddVertexSmart(self, *args): return _csgeom.csVector3Array_AddVertexSmart(self, *args)
    CompressVertices = staticmethod(_csgeom.csVector3Array_CompressVertices)
    __swig_destroy__ = _csgeom.delete_csVector3Array
    __del__ = lambda self : None;
csVector3Array_swigregister = _csgeom.csVector3Array_swigregister
csVector3Array_swigregister(csVector3Array)

def csVector3Array_CompressVertices(*args):
  return _csgeom.csVector3Array_CompressVertices(*args)
csVector3Array_CompressVertices = _csgeom.csVector3Array_CompressVertices

class TriangleInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_csgeom.TriangleInt_a_get, _csgeom.TriangleInt_a_set)
    b = _swig_property(_csgeom.TriangleInt_b_get, _csgeom.TriangleInt_b_set)
    c = _swig_property(_csgeom.TriangleInt_c_get, _csgeom.TriangleInt_c_set)
    def Set(self, *args): return _csgeom.TriangleInt_Set(self, *args)
    def __init__(self): 
        this = _csgeom.new_TriangleInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_TriangleInt
    __del__ = lambda self : None;
TriangleInt_swigregister = _csgeom.TriangleInt_swigregister
TriangleInt_swigregister(TriangleInt)

class csTriangle(TriangleInt):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _csgeom.csTriangle___getitem__(self, *args)
    def __setitem__(self, *args): return _csgeom.csTriangle___setitem__(self, *args)
    def __nonzero__(self): return _csgeom.csTriangle___nonzero__(self)
    def __str__(self):
      return "%d,%d,%d"%(self.a,self.b,self.c)
    def __repr__(self):
      return "cspace.csTriangle(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csTriangle
    __del__ = lambda self : None;
csTriangle_swigregister = _csgeom.csTriangle_swigregister
csTriangle_swigregister(csTriangle)

class csRect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    xmin = _swig_property(_csgeom.csRect_xmin_get, _csgeom.csRect_xmin_set)
    ymin = _swig_property(_csgeom.csRect_ymin_get, _csgeom.csRect_ymin_set)
    xmax = _swig_property(_csgeom.csRect_xmax_get, _csgeom.csRect_xmax_set)
    ymax = _swig_property(_csgeom.csRect_ymax_get, _csgeom.csRect_ymax_set)
    def __init__(self, *args): 
        this = _csgeom.new_csRect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csRect
    __del__ = lambda self : None;
    def Intersect(self, *args): return _csgeom.csRect_Intersect(self, *args)
    def Intersects(self, *args): return _csgeom.csRect_Intersects(self, *args)
    def Union(self, *args): return _csgeom.csRect_Union(self, *args)
    def Exclude(self, *args): return _csgeom.csRect_Exclude(self, *args)
    def Subtract(self, *args): return _csgeom.csRect_Subtract(self, *args)
    def IsEmpty(self): return _csgeom.csRect_IsEmpty(self)
    def MakeEmpty(self): return _csgeom.csRect_MakeEmpty(self)
    def Set(self, *args): return _csgeom.csRect_Set(self, *args)
    def SetPos(self, *args): return _csgeom.csRect_SetPos(self, *args)
    def SetSize(self, *args): return _csgeom.csRect_SetSize(self, *args)
    def Move(self, *args): return _csgeom.csRect_Move(self, *args)
    def Width(self): return _csgeom.csRect_Width(self)
    def Height(self): return _csgeom.csRect_Height(self)
    def Contains(self, *args): return _csgeom.csRect_Contains(self, *args)
    def ContainsRel(self, *args): return _csgeom.csRect_ContainsRel(self, *args)
    def Equal(self, *args): return _csgeom.csRect_Equal(self, *args)
    def Normalize(self): return _csgeom.csRect_Normalize(self)
    def Area(self): return _csgeom.csRect_Area(self)
    def AddAdjacent(self, *args): return _csgeom.csRect_AddAdjacent(self, *args)
    def __eq__(self, *args): return _csgeom.csRect___eq__(self, *args)
    def __ne__(self, *args): return _csgeom.csRect___ne__(self, *args)
    def Extend(self, *args): return _csgeom.csRect_Extend(self, *args)
    def Join(self, *args): return _csgeom.csRect_Join(self, *args)
    def Outset(self, *args): return _csgeom.csRect_Outset(self, *args)
    def Inset(self, *args): return _csgeom.csRect_Inset(self, *args)
    def ClipLineGeneral(self, *args): return _csgeom.csRect_ClipLineGeneral(self, *args)
    def ClipLine(self, *args): return _csgeom.csRect_ClipLine(self, *args)
    def ClipLineSafe(self, *args): return _csgeom.csRect_ClipLineSafe(self, *args)
csRect_swigregister = _csgeom.csRect_swigregister
csRect_swigregister(csRect)

class csRectRegion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _csgeom.new_csRectRegion()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csRectRegion
    __del__ = lambda self : None;
    def Include(self, *args): return _csgeom.csRectRegion_Include(self, *args)
    def Exclude(self, *args): return _csgeom.csRectRegion_Exclude(self, *args)
    def ClipTo(self, *args): return _csgeom.csRectRegion_ClipTo(self, *args)
    def Count(self): return _csgeom.csRectRegion_Count(self)
    def RectAt(self, *args): return _csgeom.csRectRegion_RectAt(self, *args)
    def MakeEmpty(self): return _csgeom.csRectRegion_MakeEmpty(self)
csRectRegion_swigregister = _csgeom.csRectRegion_swigregister
csRectRegion_swigregister(csRectRegion)

class csQuaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csQuaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _csgeom.csQuaternion_Set(self, *args)
    def SetIdentity(self): return _csgeom.csQuaternion_SetIdentity(self)
    def __iadd__(self, *args): return _csgeom.csQuaternion___iadd__(self, *args)
    def __isub__(self, *args): return _csgeom.csQuaternion___isub__(self, *args)
    def __imul__(self, *args): return _csgeom.csQuaternion___imul__(self, *args)
    def __idiv__(self, *args): return _csgeom.csQuaternion___idiv__(self, *args)
    def GetConjugate(self): return _csgeom.csQuaternion_GetConjugate(self)
    def Conjugate(self): return _csgeom.csQuaternion_Conjugate(self)
    def Dot(self, *args): return _csgeom.csQuaternion_Dot(self, *args)
    def SquaredNorm(self): return _csgeom.csQuaternion_SquaredNorm(self)
    def Norm(self): return _csgeom.csQuaternion_Norm(self)
    def Unit(self): return _csgeom.csQuaternion_Unit(self)
    def Rotate(self, *args): return _csgeom.csQuaternion_Rotate(self, *args)
    def SetAxisAngle(self, *args): return _csgeom.csQuaternion_SetAxisAngle(self, *args)
    def GetAxisAngle(self, *args): return _csgeom.csQuaternion_GetAxisAngle(self, *args)
    def SetEulerAngles(self, *args): return _csgeom.csQuaternion_SetEulerAngles(self, *args)
    def GetEulerAngles(self): return _csgeom.csQuaternion_GetEulerAngles(self)
    def SetMatrix(self, *args): return _csgeom.csQuaternion_SetMatrix(self, *args)
    def GetMatrix(self): return _csgeom.csQuaternion_GetMatrix(self)
    def NLerp(self, *args): return _csgeom.csQuaternion_NLerp(self, *args)
    def SLerp(self, *args): return _csgeom.csQuaternion_SLerp(self, *args)
    def Log(self): return _csgeom.csQuaternion_Log(self)
    def Exp(self): return _csgeom.csQuaternion_Exp(self)
    def Squad(self, *args): return _csgeom.csQuaternion_Squad(self, *args)
    v = _swig_property(_csgeom.csQuaternion_v_get, _csgeom.csQuaternion_v_set)
    w = _swig_property(_csgeom.csQuaternion_w_get, _csgeom.csQuaternion_w_set)
    def __add__(self, *args): return _csgeom.csQuaternion___add__(self, *args)
    def __sub__(self, *args): return _csgeom.csQuaternion___sub__(self, *args)
    def __mul__(self, *args): return _csgeom.csQuaternion___mul__(self, *args)
    def __str__(self):
      return "%s,%f"%(self.v,self.w)
    def __repr__(self):
      return "cspace.csQuaternion(%s)"%(self)

    __swig_destroy__ = _csgeom.delete_csQuaternion
    __del__ = lambda self : None;
csQuaternion_swigregister = _csgeom.csQuaternion_swigregister
csQuaternion_swigregister(csQuaternion)

class csSpline(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csSpline
    __del__ = lambda self : None;
    def Setup(self, *args): return _csgeom.csSpline_Setup(self, *args)
    def GetDimensionCount(self): return _csgeom.csSpline_GetDimensionCount(self)
    def GetPointCount(self): return _csgeom.csSpline_GetPointCount(self)
    def InsertPoint(self, *args): return _csgeom.csSpline_InsertPoint(self, *args)
    def RemovePoint(self, *args): return _csgeom.csSpline_RemovePoint(self, *args)
    def SetTimeValues(self, *args): return _csgeom.csSpline_SetTimeValues(self, *args)
    def SetTimeValue(self, *args): return _csgeom.csSpline_SetTimeValue(self, *args)
    def GetTimeValues(self): return _csgeom.csSpline_GetTimeValues(self)
    def GetTimeValue(self, *args): return _csgeom.csSpline_GetTimeValue(self, *args)
    def SetDimensionValues(self, *args): return _csgeom.csSpline_SetDimensionValues(self, *args)
    def SetDimensionValue(self, *args): return _csgeom.csSpline_SetDimensionValue(self, *args)
    def GetDimensionValues(self, *args): return _csgeom.csSpline_GetDimensionValues(self, *args)
    def GetDimensionValue(self, *args): return _csgeom.csSpline_GetDimensionValue(self, *args)
    def SetIndexValues(self, *args): return _csgeom.csSpline_SetIndexValues(self, *args)
    def GetIndexValues(self, *args): return _csgeom.csSpline_GetIndexValues(self, *args)
    def Calculate(self, *args): return _csgeom.csSpline_Calculate(self, *args)
    def GetCurrentIndex(self): return _csgeom.csSpline_GetCurrentIndex(self)
    def GetInterpolatedDimension(self, *args): return _csgeom.csSpline_GetInterpolatedDimension(self, *args)
csSpline_swigregister = _csgeom.csSpline_swigregister
csSpline_swigregister(csSpline)

class csCubicSpline(csSpline):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csCubicSpline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csCubicSpline
    __del__ = lambda self : None;
    def Setup(self, *args): return _csgeom.csCubicSpline_Setup(self, *args)
    def Calculate(self, *args): return _csgeom.csCubicSpline_Calculate(self, *args)
    def GetInterpolatedDimension(self, *args): return _csgeom.csCubicSpline_GetInterpolatedDimension(self, *args)
csCubicSpline_swigregister = _csgeom.csCubicSpline_swigregister
csCubicSpline_swigregister(csCubicSpline)

class csBSpline(csSpline):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csBSpline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csBSpline
    __del__ = lambda self : None;
    def Calculate(self, *args): return _csgeom.csBSpline_Calculate(self, *args)
    def GetInterpolatedDimension(self, *args): return _csgeom.csBSpline_GetInterpolatedDimension(self, *args)
csBSpline_swigregister = _csgeom.csBSpline_swigregister
csBSpline_swigregister(csBSpline)

class csCatmullRomSpline(csBSpline):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csCatmullRomSpline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csCatmullRomSpline
    __del__ = lambda self : None;
    def Clone(self): return _csgeom.csCatmullRomSpline_Clone(self)
csCatmullRomSpline_swigregister = _csgeom.csCatmullRomSpline_swigregister
csCatmullRomSpline_swigregister(csCatmullRomSpline)

CS_BOUNDINGBOX_MAXVALUE = _csgeom.CS_BOUNDINGBOX_MAXVALUE
CS_BOX_CORNER_xy = _csgeom.CS_BOX_CORNER_xy
CS_BOX_CORNER_xY = _csgeom.CS_BOX_CORNER_xY
CS_BOX_CORNER_Xy = _csgeom.CS_BOX_CORNER_Xy
CS_BOX_CORNER_XY = _csgeom.CS_BOX_CORNER_XY
CS_BOX_CENTER2 = _csgeom.CS_BOX_CENTER2
CS_BOX_EDGE_xy_Xy = _csgeom.CS_BOX_EDGE_xy_Xy
CS_BOX_EDGE_Xy_xy = _csgeom.CS_BOX_EDGE_Xy_xy
CS_BOX_EDGE_Xy_XY = _csgeom.CS_BOX_EDGE_Xy_XY
CS_BOX_EDGE_XY_Xy = _csgeom.CS_BOX_EDGE_XY_Xy
CS_BOX_EDGE_XY_xY = _csgeom.CS_BOX_EDGE_XY_xY
CS_BOX_EDGE_xY_XY = _csgeom.CS_BOX_EDGE_xY_XY
CS_BOX_EDGE_xY_xy = _csgeom.CS_BOX_EDGE_xY_xy
CS_BOX_EDGE_xy_xY = _csgeom.CS_BOX_EDGE_xy_xY
class csBox2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def MinX(self): return _csgeom.csBox2_MinX(self)
    def MinY(self): return _csgeom.csBox2_MinY(self)
    def MaxX(self): return _csgeom.csBox2_MaxX(self)
    def MaxY(self): return _csgeom.csBox2_MaxY(self)
    def Min(self, *args): return _csgeom.csBox2_Min(self, *args)
    def Max(self, *args): return _csgeom.csBox2_Max(self, *args)
    def Area(self): return _csgeom.csBox2_Area(self)
    def GetCorner(self, *args): return _csgeom.csBox2_GetCorner(self, *args)
    def GetCenter(self): return _csgeom.csBox2_GetCenter(self)
    def SetCenter(self, *args): return _csgeom.csBox2_SetCenter(self, *args)
    def SetSize(self, *args): return _csgeom.csBox2_SetSize(self, *args)
    def GetEdgeInfo(self, *args): return _csgeom.csBox2_GetEdgeInfo(self, *args)
    def GetEdge(self, *args): return _csgeom.csBox2_GetEdge(self, *args)
    def Intersect(self, *args): return _csgeom.csBox2_Intersect(self, *args)
    def In(self, *args): return _csgeom.csBox2_In(self, *args)
    def Overlap(self, *args): return _csgeom.csBox2_Overlap(self, *args)
    def Contains(self, *args): return _csgeom.csBox2_Contains(self, *args)
    def Empty(self): return _csgeom.csBox2_Empty(self)
    def SquaredOriginDist(self): return _csgeom.csBox2_SquaredOriginDist(self)
    def SquaredOriginMaxDist(self): return _csgeom.csBox2_SquaredOriginMaxDist(self)
    def SquaredPosDist(self, *args): return _csgeom.csBox2_SquaredPosDist(self, *args)
    def SquaredPosMaxDist(self, *args): return _csgeom.csBox2_SquaredPosMaxDist(self, *args)
    def StartBoundingBox(self, *args): return _csgeom.csBox2_StartBoundingBox(self, *args)
    def AddBoundingVertex(self, *args): return _csgeom.csBox2_AddBoundingVertex(self, *args)
    def AddBoundingVertexSmart(self, *args): return _csgeom.csBox2_AddBoundingVertexSmart(self, *args)
    def AddBoundingVertexTest(self, *args): return _csgeom.csBox2_AddBoundingVertexTest(self, *args)
    def AddBoundingVertexSmartTest(self, *args): return _csgeom.csBox2_AddBoundingVertexSmartTest(self, *args)
    def __init__(self, *args): 
        this = _csgeom.new_csBox2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _csgeom.csBox2_Set(self, *args)
    def SetMin(self, *args): return _csgeom.csBox2_SetMin(self, *args)
    def SetMax(self, *args): return _csgeom.csBox2_SetMax(self, *args)
    def Description(self): return _csgeom.csBox2_Description(self)
    def __iadd__(self, *args): return _csgeom.csBox2___iadd__(self, *args)
    def __imul__(self, *args): return _csgeom.csBox2___imul__(self, *args)
    def TestIntersect(self, *args): return _csgeom.csBox2_TestIntersect(self, *args)
    def __mul__(self, *args): return _csgeom.csBox2___mul__(self, *args)
    def __ne__(self, *args): return _csgeom.csBox2___ne__(self, *args)
    def __gt__(self, *args): return _csgeom.csBox2___gt__(self, *args)
    def __add__(self, *args): return _csgeom.csBox2___add__(self, *args)
    def __lt__(self, *args): return _csgeom.csBox2___lt__(self, *args)
    __swig_destroy__ = _csgeom.delete_csBox2
    __del__ = lambda self : None;
csBox2_swigregister = _csgeom.csBox2_swigregister
csBox2_swigregister(csBox2)

CS_BOX_CORNER_xyz = _csgeom.CS_BOX_CORNER_xyz
CS_BOX_CORNER_xyZ = _csgeom.CS_BOX_CORNER_xyZ
CS_BOX_CORNER_xYz = _csgeom.CS_BOX_CORNER_xYz
CS_BOX_CORNER_xYZ = _csgeom.CS_BOX_CORNER_xYZ
CS_BOX_CORNER_Xyz = _csgeom.CS_BOX_CORNER_Xyz
CS_BOX_CORNER_XyZ = _csgeom.CS_BOX_CORNER_XyZ
CS_BOX_CORNER_XYz = _csgeom.CS_BOX_CORNER_XYz
CS_BOX_CORNER_XYZ = _csgeom.CS_BOX_CORNER_XYZ
CS_BOX_CENTER3 = _csgeom.CS_BOX_CENTER3
CS_BOX_SIDE_x = _csgeom.CS_BOX_SIDE_x
CS_BOX_SIDE_X = _csgeom.CS_BOX_SIDE_X
CS_BOX_SIDE_y = _csgeom.CS_BOX_SIDE_y
CS_BOX_SIDE_Y = _csgeom.CS_BOX_SIDE_Y
CS_BOX_SIDE_z = _csgeom.CS_BOX_SIDE_z
CS_BOX_SIDE_Z = _csgeom.CS_BOX_SIDE_Z
CS_BOX_INSIDE = _csgeom.CS_BOX_INSIDE
CS_BOX_EDGE_Xyz_xyz = _csgeom.CS_BOX_EDGE_Xyz_xyz
CS_BOX_EDGE_xyz_Xyz = _csgeom.CS_BOX_EDGE_xyz_Xyz
CS_BOX_EDGE_xyz_xYz = _csgeom.CS_BOX_EDGE_xyz_xYz
CS_BOX_EDGE_xYz_xyz = _csgeom.CS_BOX_EDGE_xYz_xyz
CS_BOX_EDGE_xYz_XYz = _csgeom.CS_BOX_EDGE_xYz_XYz
CS_BOX_EDGE_XYz_xYz = _csgeom.CS_BOX_EDGE_XYz_xYz
CS_BOX_EDGE_XYz_Xyz = _csgeom.CS_BOX_EDGE_XYz_Xyz
CS_BOX_EDGE_Xyz_XYz = _csgeom.CS_BOX_EDGE_Xyz_XYz
CS_BOX_EDGE_Xyz_XyZ = _csgeom.CS_BOX_EDGE_Xyz_XyZ
CS_BOX_EDGE_XyZ_Xyz = _csgeom.CS_BOX_EDGE_XyZ_Xyz
CS_BOX_EDGE_XyZ_XYZ = _csgeom.CS_BOX_EDGE_XyZ_XYZ
CS_BOX_EDGE_XYZ_XyZ = _csgeom.CS_BOX_EDGE_XYZ_XyZ
CS_BOX_EDGE_XYZ_XYz = _csgeom.CS_BOX_EDGE_XYZ_XYz
CS_BOX_EDGE_XYz_XYZ = _csgeom.CS_BOX_EDGE_XYz_XYZ
CS_BOX_EDGE_XYZ_xYZ = _csgeom.CS_BOX_EDGE_XYZ_xYZ
CS_BOX_EDGE_xYZ_XYZ = _csgeom.CS_BOX_EDGE_xYZ_XYZ
CS_BOX_EDGE_xYZ_xYz = _csgeom.CS_BOX_EDGE_xYZ_xYz
CS_BOX_EDGE_xYz_xYZ = _csgeom.CS_BOX_EDGE_xYz_xYZ
CS_BOX_EDGE_xYZ_xyZ = _csgeom.CS_BOX_EDGE_xYZ_xyZ
CS_BOX_EDGE_xyZ_xYZ = _csgeom.CS_BOX_EDGE_xyZ_xYZ
CS_BOX_EDGE_xyZ_xyz = _csgeom.CS_BOX_EDGE_xyZ_xyz
CS_BOX_EDGE_xyz_xyZ = _csgeom.CS_BOX_EDGE_xyz_xyZ
CS_BOX_EDGE_xyZ_XyZ = _csgeom.CS_BOX_EDGE_xyZ_XyZ
CS_BOX_EDGE_XyZ_xyZ = _csgeom.CS_BOX_EDGE_XyZ_xyZ
class csBox3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def MinX(self): return _csgeom.csBox3_MinX(self)
    def MinY(self): return _csgeom.csBox3_MinY(self)
    def MinZ(self): return _csgeom.csBox3_MinZ(self)
    def MaxX(self): return _csgeom.csBox3_MaxX(self)
    def MaxY(self): return _csgeom.csBox3_MaxY(self)
    def MaxZ(self): return _csgeom.csBox3_MaxZ(self)
    def Min(self, *args): return _csgeom.csBox3_Min(self, *args)
    def Max(self, *args): return _csgeom.csBox3_Max(self, *args)
    def Volume(self): return _csgeom.csBox3_Volume(self)
    def Area(self): return _csgeom.csBox3_Area(self)
    def IsNaN(self): return _csgeom.csBox3_IsNaN(self)
    def GetCorner(self, *args): return _csgeom.csBox3_GetCorner(self, *args)
    def GetEdgeInfo(self, *args): return _csgeom.csBox3_GetEdgeInfo(self, *args)
    def GetFaceEdges(self, *args): return _csgeom.csBox3_GetFaceEdges(self, *args)
    def GetCenter(self): return _csgeom.csBox3_GetCenter(self)
    def SetCenter(self, *args): return _csgeom.csBox3_SetCenter(self, *args)
    def SetSize(self, *args): return _csgeom.csBox3_SetSize(self, *args)
    def GetSize(self): return _csgeom.csBox3_GetSize(self)
    def GetSide(self, *args): return _csgeom.csBox3_GetSide(self, *args)
    def GetAxisPlane(self, *args): return _csgeom.csBox3_GetAxisPlane(self, *args)
    def GetVisibleSides(self, *args): return _csgeom.csBox3_GetVisibleSides(self, *args)
    OtherSide = staticmethod(_csgeom.csBox3_OtherSide)
    def GetEdge(self, *args): return _csgeom.csBox3_GetEdge(self, *args)
    def In(self, *args): return _csgeom.csBox3_In(self, *args)
    def Overlap(self, *args): return _csgeom.csBox3_Overlap(self, *args)
    def Contains(self, *args): return _csgeom.csBox3_Contains(self, *args)
    def Empty(self): return _csgeom.csBox3_Empty(self)
    def StartBoundingBox(self, *args): return _csgeom.csBox3_StartBoundingBox(self, *args)
    def AddBoundingVertex(self, *args): return _csgeom.csBox3_AddBoundingVertex(self, *args)
    def AddBoundingVertexSmart(self, *args): return _csgeom.csBox3_AddBoundingVertexSmart(self, *args)
    def AddBoundingVertexTest(self, *args): return _csgeom.csBox3_AddBoundingVertexTest(self, *args)
    def AddBoundingVertexSmartTest(self, *args): return _csgeom.csBox3_AddBoundingVertexSmartTest(self, *args)
    def AddBoundingBox(self, *args): return _csgeom.csBox3_AddBoundingBox(self, *args)
    def __init__(self, *args): 
        this = _csgeom.new_csBox3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _csgeom.csBox3_Set(self, *args)
    def SetMin(self, *args): return _csgeom.csBox3_SetMin(self, *args)
    def SetMax(self, *args): return _csgeom.csBox3_SetMax(self, *args)
    def GetMin(self, *args): return _csgeom.csBox3_GetMin(self, *args)
    def GetMax(self, *args): return _csgeom.csBox3_GetMax(self, *args)
    def Description(self): return _csgeom.csBox3_Description(self)
    def Split(self, *args): return _csgeom.csBox3_Split(self, *args)
    def TestSplit(self, *args): return _csgeom.csBox3_TestSplit(self, *args)
    def AdjacentX(self, *args): return _csgeom.csBox3_AdjacentX(self, *args)
    def AdjacentY(self, *args): return _csgeom.csBox3_AdjacentY(self, *args)
    def AdjacentZ(self, *args): return _csgeom.csBox3_AdjacentZ(self, *args)
    def Adjacent(self, *args): return _csgeom.csBox3_Adjacent(self, *args)
    def CalculatePointSegment(self, *args): return _csgeom.csBox3_CalculatePointSegment(self, *args)
    def GetConvexOutline(self, *args): return _csgeom.csBox3_GetConvexOutline(self, *args)
    def Between(self, *args): return _csgeom.csBox3_Between(self, *args)
    def ManhattanDistance(self, *args): return _csgeom.csBox3_ManhattanDistance(self, *args)
    def SquaredOriginDist(self): return _csgeom.csBox3_SquaredOriginDist(self)
    def SquaredOriginMaxDist(self): return _csgeom.csBox3_SquaredOriginMaxDist(self)
    def SquaredPosDist(self, *args): return _csgeom.csBox3_SquaredPosDist(self, *args)
    def SquaredPosMaxDist(self, *args): return _csgeom.csBox3_SquaredPosMaxDist(self, *args)
    def ProjectBox(self, *args): return _csgeom.csBox3_ProjectBox(self, *args)
    def ProjectOutline(self, *args): return _csgeom.csBox3_ProjectOutline(self, *args)
    def ProjectBoxAndOutline(self, *args): return _csgeom.csBox3_ProjectBoxAndOutline(self, *args)
    def __iadd__(self, *args): return _csgeom.csBox3___iadd__(self, *args)
    def __imul__(self, *args): return _csgeom.csBox3___imul__(self, *args)
    def TestIntersect(self, *args): return _csgeom.csBox3_TestIntersect(self, *args)
    def __mul__(self, *args): return _csgeom.csBox3___mul__(self, *args)
    def __ne__(self, *args): return _csgeom.csBox3___ne__(self, *args)
    def __gt__(self, *args): return _csgeom.csBox3___gt__(self, *args)
    def __add__(self, *args): return _csgeom.csBox3___add__(self, *args)
    def __lt__(self, *args): return _csgeom.csBox3___lt__(self, *args)
    __swig_destroy__ = _csgeom.delete_csBox3
    __del__ = lambda self : None;
csBox3_swigregister = _csgeom.csBox3_swigregister
csBox3_swigregister(csBox3)

def csBox3_OtherSide(*args):
  return _csgeom.csBox3_OtherSide(*args)
csBox3_OtherSide = _csgeom.csBox3_OtherSide

class csOBB(csBox3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csOBB(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddBoundingVertex(self, *args): return _csgeom.csOBB_AddBoundingVertex(self, *args)
    def GetCorner(self, *args): return _csgeom.csOBB_GetCorner(self, *args)
    def GetMatrix(self, *args): return _csgeom.csOBB_GetMatrix(self, *args)
    def Volume(self): return _csgeom.csOBB_Volume(self)
    def FindOBB(self, *args): return _csgeom.csOBB_FindOBB(self, *args)
    def FindOBBAccurate(self, *args): return _csgeom.csOBB_FindOBBAccurate(self, *args)
    __swig_destroy__ = _csgeom.delete_csOBB
    __del__ = lambda self : None;
csOBB_swigregister = _csgeom.csOBB_swigregister
csOBB_swigregister(csOBB)

class csOBBFrozen(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Copy(self, *args): return _csgeom.csOBBFrozen_Copy(self, *args)
    def __init__(self, *args): 
        this = _csgeom.new_csOBBFrozen(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCorner(self, *args): return _csgeom.csOBBFrozen_GetCorner(self, *args)
    def ProjectOBB(self, *args): return _csgeom.csOBBFrozen_ProjectOBB(self, *args)
    __swig_destroy__ = _csgeom.delete_csOBBFrozen
    __del__ = lambda self : None;
csOBBFrozen_swigregister = _csgeom.csOBBFrozen_swigregister
csOBBFrozen_swigregister(csOBBFrozen)

class csSegment2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csSegment2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csSegment2
    __del__ = lambda self : None;
    def Set(self, *args): return _csgeom.csSegment2_Set(self, *args)
    def SetStart(self, *args): return _csgeom.csSegment2_SetStart(self, *args)
    def SetEnd(self, *args): return _csgeom.csSegment2_SetEnd(self, *args)
    def Start(self): return _csgeom.csSegment2_Start(self)
    def End(self): return _csgeom.csSegment2_End(self)
csSegment2_swigregister = _csgeom.csSegment2_swigregister
csSegment2_swigregister(csSegment2)

class csSegment3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csSegment3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _csgeom.csSegment3_Set(self, *args)
    def SetStart(self, *args): return _csgeom.csSegment3_SetStart(self, *args)
    def SetEnd(self, *args): return _csgeom.csSegment3_SetEnd(self, *args)
    def Start(self): return _csgeom.csSegment3_Start(self)
    def End(self): return _csgeom.csSegment3_End(self)
    __swig_destroy__ = _csgeom.delete_csSegment3
    __del__ = lambda self : None;
csSegment3_swigregister = _csgeom.csSegment3_swigregister
csSegment3_swigregister(csSegment3)

class csPath(core.scfPath):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csPath(*args)
        try: self.this.append(this)
        except: self.this = this
    def Setup(self, *args): return _csgeom.csPath_Setup(self, *args)
    __swig_destroy__ = _csgeom.delete_csPath
    __del__ = lambda self : None;
    def Length(self): return _csgeom.csPath_Length(self)
    def QueryObject(self): return _csgeom.csPath_QueryObject(self)
    def CalculateAtTime(self, *args): return _csgeom.csPath_CalculateAtTime(self, *args)
    def GetCurrentIndex(self): return _csgeom.csPath_GetCurrentIndex(self)
    def GetTime(self, *args): return _csgeom.csPath_GetTime(self, *args)
    def SetTime(self, *args): return _csgeom.csPath_SetTime(self, *args)
    def SetTimes(self, *args): return _csgeom.csPath_SetTimes(self, *args)
    def GetTimes(self): return _csgeom.csPath_GetTimes(self)
    def SetPositionVectors(self, *args): return _csgeom.csPath_SetPositionVectors(self, *args)
    def SetUpVectors(self, *args): return _csgeom.csPath_SetUpVectors(self, *args)
    def SetForwardVectors(self, *args): return _csgeom.csPath_SetForwardVectors(self, *args)
    def SetPositionVector(self, *args): return _csgeom.csPath_SetPositionVector(self, *args)
    def SetUpVector(self, *args): return _csgeom.csPath_SetUpVector(self, *args)
    def SetForwardVector(self, *args): return _csgeom.csPath_SetForwardVector(self, *args)
    def GetPositionVector(self, *args): return _csgeom.csPath_GetPositionVector(self, *args)
    def GetUpVector(self, *args): return _csgeom.csPath_GetUpVector(self, *args)
    def GetForwardVector(self, *args): return _csgeom.csPath_GetForwardVector(self, *args)
    def GetInterpolatedPosition(self, *args): return _csgeom.csPath_GetInterpolatedPosition(self, *args)
    def GetInterpolatedUp(self, *args): return _csgeom.csPath_GetInterpolatedUp(self, *args)
    def GetInterpolatedForward(self, *args): return _csgeom.csPath_GetInterpolatedForward(self, *args)
    def GetDimensionValues(self, *args): return _csgeom.csPath_GetDimensionValues(self, *args)
    def GetDimensionValue(self, *args): return _csgeom.csPath_GetDimensionValue(self, *args)
    def InsertPoint(self, *args): return _csgeom.csPath_InsertPoint(self, *args)
    def RemovePoint(self, *args): return _csgeom.csPath_RemovePoint(self, *args)
csPath_swigregister = _csgeom.csPath_swigregister
csPath_swigregister(csPath)

class pycsTriangleMesh(core.iTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _csgeom.pycsTriangleMesh_IncRef(self)
    def DecRef(self): return _csgeom.pycsTriangleMesh_DecRef(self)
    def GetRefCount(self): return _csgeom.pycsTriangleMesh_GetRefCount(self)
    def QueryInterface(self, *args): return _csgeom.pycsTriangleMesh_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _csgeom.pycsTriangleMesh_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _csgeom.pycsTriangleMesh_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _csgeom.pycsTriangleMesh_GetInterfaceMetadata(self)
pycsTriangleMesh_swigregister = _csgeom.pycsTriangleMesh_swigregister
pycsTriangleMesh_swigregister(pycsTriangleMesh)

class pycsTriangleMeshBox(core.iTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _csgeom.pycsTriangleMeshBox_IncRef(self)
    def DecRef(self): return _csgeom.pycsTriangleMeshBox_DecRef(self)
    def GetRefCount(self): return _csgeom.pycsTriangleMeshBox_GetRefCount(self)
    def QueryInterface(self, *args): return _csgeom.pycsTriangleMeshBox_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _csgeom.pycsTriangleMeshBox_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _csgeom.pycsTriangleMeshBox_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _csgeom.pycsTriangleMeshBox_GetInterfaceMetadata(self)
pycsTriangleMeshBox_swigregister = _csgeom.pycsTriangleMeshBox_swigregister
pycsTriangleMeshBox_swigregister(pycsTriangleMeshBox)

class scfTriangleMeshPointer(core.iTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IncRef(self): return _csgeom.scfTriangleMeshPointer_IncRef(self)
    def DecRef(self): return _csgeom.scfTriangleMeshPointer_DecRef(self)
    def GetRefCount(self): return _csgeom.scfTriangleMeshPointer_GetRefCount(self)
    def QueryInterface(self, *args): return _csgeom.scfTriangleMeshPointer_QueryInterface(self, *args)
    def AddRefOwner(self, *args): return _csgeom.scfTriangleMeshPointer_AddRefOwner(self, *args)
    def RemoveRefOwner(self, *args): return _csgeom.scfTriangleMeshPointer_RemoveRefOwner(self, *args)
    def GetInterfaceMetadata(self): return _csgeom.scfTriangleMeshPointer_GetInterfaceMetadata(self)
scfTriangleMeshPointer_swigregister = _csgeom.scfTriangleMeshPointer_swigregister
scfTriangleMeshPointer_swigregister(scfTriangleMeshPointer)

class csTriangleMesh(pycsTriangleMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMesh
    __del__ = lambda self : None;
    def AddVertex(self, *args): return _csgeom.csTriangleMesh_AddVertex(self, *args)
    def GetVertexCount(self, *args): return _csgeom.csTriangleMesh_GetVertexCount(self, *args)
    def GetVertices(self, *args): return _csgeom.csTriangleMesh_GetVertices(self, *args)
    def AddTriangle(self, *args): return _csgeom.csTriangleMesh_AddTriangle(self, *args)
    def AddTriangleMesh(self, *args): return _csgeom.csTriangleMesh_AddTriangleMesh(self, *args)
    def GetTriangles(self, *args): return _csgeom.csTriangleMesh_GetTriangles(self, *args)
    def GetTriangle(self, *args): return _csgeom.csTriangleMesh_GetTriangle(self, *args)
    def GetTriangleCount(self, *args): return _csgeom.csTriangleMesh_GetTriangleCount(self, *args)
    def Clear(self): return _csgeom.csTriangleMesh_Clear(self)
    def SetSize(self, *args): return _csgeom.csTriangleMesh_SetSize(self, *args)
    def SetTriangles(self, *args): return _csgeom.csTriangleMesh_SetTriangles(self, *args)
    def Lock(self): return _csgeom.csTriangleMesh_Lock(self)
    def Unlock(self): return _csgeom.csTriangleMesh_Unlock(self)
    def GetFlags(self): return _csgeom.csTriangleMesh_GetFlags(self)
    def GetChangeNumber(self): return _csgeom.csTriangleMesh_GetChangeNumber(self)
    def __iadd__(self, *args): return _csgeom.csTriangleMesh___iadd__(self, *args)
csTriangleMesh_swigregister = _csgeom.csTriangleMesh_swigregister
csTriangleMesh_swigregister(csTriangleMesh)

class csTriangleVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pos = _swig_property(_csgeom.csTriangleVertex_pos_get, _csgeom.csTriangleVertex_pos_set)
    idx = _swig_property(_csgeom.csTriangleVertex_idx_get, _csgeom.csTriangleVertex_idx_set)
    con_triangles = _swig_property(_csgeom.csTriangleVertex_con_triangles_get, _csgeom.csTriangleVertex_con_triangles_set)
    con_vertices = _swig_property(_csgeom.csTriangleVertex_con_vertices_get, _csgeom.csTriangleVertex_con_vertices_set)
    def __init__(self): 
        this = _csgeom.new_csTriangleVertex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleVertex
    __del__ = lambda self : None;
    def AddTriangle(self, *args): return _csgeom.csTriangleVertex_AddTriangle(self, *args)
    def AddVertex(self, *args): return _csgeom.csTriangleVertex_AddVertex(self, *args)
csTriangleVertex_swigregister = _csgeom.csTriangleVertex_swigregister
csTriangleVertex_swigregister(csTriangleVertex)

class csTriangleVertices(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleVertices(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleVertices
    __del__ = lambda self : None;
    def UpdateVertices(self, *args): return _csgeom.csTriangleVertices_UpdateVertices(self, *args)
    def GetVertexCount(self): return _csgeom.csTriangleVertices_GetVertexCount(self)
    def GetVertex(self, *args): return _csgeom.csTriangleVertices_GetVertex(self, *args)
csTriangleVertices_swigregister = _csgeom.csTriangleVertices_swigregister
csTriangleVertices_swigregister(csTriangleVertices)

class csTriangleMeshBox(pycsTriangleMeshBox):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMeshBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshBox
    __del__ = lambda self : None;
    def SetBox(self, *args): return _csgeom.csTriangleMeshBox_SetBox(self, *args)
    def GetVertexCount(self): return _csgeom.csTriangleMeshBox_GetVertexCount(self)
    def GetVertices(self):
      return CSMutableArrayHelper(self.GetVertexByIndex, self.GetVertexCount)


    def GetTriangleCount(self): return _csgeom.csTriangleMeshBox_GetTriangleCount(self)
    def GetTriangles(self):
      return CSMutableArrayHelper(self.GetTriangleByIndex, self.GetTriangleCount)


    def Lock(self): return _csgeom.csTriangleMeshBox_Lock(self)
    def Unlock(self): return _csgeom.csTriangleMeshBox_Unlock(self)
    def GetFlags(self): return _csgeom.csTriangleMeshBox_GetFlags(self)
    def GetChangeNumber(self): return _csgeom.csTriangleMeshBox_GetChangeNumber(self)
csTriangleMeshBox_swigregister = _csgeom.csTriangleMeshBox_swigregister
csTriangleMeshBox_swigregister(csTriangleMeshBox)

class csTriangleMeshPointer(scfTriangleMeshPointer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _csgeom.new_csTriangleMeshPointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshPointer
    __del__ = lambda self : None;
    def GetVertexCount(self): return _csgeom.csTriangleMeshPointer_GetVertexCount(self)
    def GetVertices(self):
      return CSMutableArrayHelper(self.GetVertexByIndex, self.GetVertexCount)


    def GetTriangleCount(self): return _csgeom.csTriangleMeshPointer_GetTriangleCount(self)
    def GetTriangles(self):
      return CSMutableArrayHelper(self.GetTriangleByIndex, self.GetTriangleCount)


    def Lock(self): return _csgeom.csTriangleMeshPointer_Lock(self)
    def Unlock(self): return _csgeom.csTriangleMeshPointer_Unlock(self)
    def GetFlags(self): return _csgeom.csTriangleMeshPointer_GetFlags(self)
    def GetChangeNumber(self): return _csgeom.csTriangleMeshPointer_GetChangeNumber(self)
csTriangleMeshPointer_swigregister = _csgeom.csTriangleMeshPointer_swigregister
csTriangleMeshPointer_swigregister(csTriangleMeshPointer)

class csIntArray(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csIntArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _csgeom.new_csIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _csgeom.csIntArray_GetSize(self)
    def Get(self, *args): return _csgeom.csIntArray_Get(self, *args)
    def Put(self, *args): return _csgeom.csIntArray_Put(self, *args)
    def Push(self, *args): return _csgeom.csIntArray_Push(self, *args)
    def Merge(self, *args): return _csgeom.csIntArray_Merge(self, *args)
    def MergeSmart(self, *args): return _csgeom.csIntArray_MergeSmart(self, *args)
    def Pop(self): return _csgeom.csIntArray_Pop(self)
    def Top(self, *args): return _csgeom.csIntArray_Top(self, *args)
    def Insert(self, *args): return _csgeom.csIntArray_Insert(self, *args)
    def Contains(self, *args): return _csgeom.csIntArray_Contains(self, *args)
    def DeleteAll(self): return _csgeom.csIntArray_DeleteAll(self)
    def Truncate(self, *args): return _csgeom.csIntArray_Truncate(self, *args)
    def Empty(self): return _csgeom.csIntArray_Empty(self)
    def IsEmpty(self): return _csgeom.csIntArray_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _csgeom.csIntArray_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _csgeom.csIntArray_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _csgeom.csIntArray_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _csgeom.csIntArray_DeleteRange(self, *args)
    def __eq__(self, *args): return _csgeom.csIntArray___eq__(self, *args)
    def __ne__(self, *args): return _csgeom.csIntArray___ne__(self, *args)
    def GetAllocator(self): return _csgeom.csIntArray_GetAllocator(self)
    def __getitem__(self, *args): return _csgeom.csIntArray___getitem__(self, *args)
    def __contains__(self, *args): return _csgeom.csIntArray___contains__(self, *args)
    def __delitem__(self, *args): return _csgeom.csIntArray___delitem__(self, *args)
    def __len__(self): return _csgeom.csIntArray___len__(self)
    def append(self, *args): return _csgeom.csIntArray_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
csIntArray_swigregister = _csgeom.csIntArray_swigregister
csIntArray_swigregister(csIntArray)

class csIntArrayArray(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _csgeom.delete_csIntArrayArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _csgeom.new_csIntArrayArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _csgeom.csIntArrayArray_GetSize(self)
    def Get(self, *args): return _csgeom.csIntArrayArray_Get(self, *args)
    def Put(self, *args): return _csgeom.csIntArrayArray_Put(self, *args)
    def Push(self, *args): return _csgeom.csIntArrayArray_Push(self, *args)
    def Merge(self, *args): return _csgeom.csIntArrayArray_Merge(self, *args)
    def MergeSmart(self, *args): return _csgeom.csIntArrayArray_MergeSmart(self, *args)
    def Pop(self): return _csgeom.csIntArrayArray_Pop(self)
    def Top(self, *args): return _csgeom.csIntArrayArray_Top(self, *args)
    def Insert(self, *args): return _csgeom.csIntArrayArray_Insert(self, *args)
    def DeleteAll(self): return _csgeom.csIntArrayArray_DeleteAll(self)
    def Truncate(self, *args): return _csgeom.csIntArrayArray_Truncate(self, *args)
    def Empty(self): return _csgeom.csIntArrayArray_Empty(self)
    def IsEmpty(self): return _csgeom.csIntArrayArray_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _csgeom.csIntArrayArray_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _csgeom.csIntArrayArray_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _csgeom.csIntArrayArray_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _csgeom.csIntArrayArray_DeleteRange(self, *args)
    def __eq__(self, *args): return _csgeom.csIntArrayArray___eq__(self, *args)
    def __ne__(self, *args): return _csgeom.csIntArrayArray___ne__(self, *args)
    def GetAllocator(self): return _csgeom.csIntArrayArray_GetAllocator(self)
    def __getitem__(self, *args): return _csgeom.csIntArrayArray___getitem__(self, *args)
    def __contains__(self, *args): return _csgeom.csIntArrayArray___contains__(self, *args)
    def __delitem__(self, *args): return _csgeom.csIntArrayArray___delitem__(self, *args)
    def __len__(self): return _csgeom.csIntArrayArray___len__(self)
    def append(self, *args): return _csgeom.csIntArrayArray_append(self, *args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
csIntArrayArray_swigregister = _csgeom.csIntArrayArray_swigregister
csIntArrayArray_swigregister(csIntArrayArray)

class csTriangleMinMax(csTriangle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    minx = _swig_property(_csgeom.csTriangleMinMax_minx_get, _csgeom.csTriangleMinMax_minx_set)
    maxx = _swig_property(_csgeom.csTriangleMinMax_maxx_get, _csgeom.csTriangleMinMax_maxx_set)
    def __init__(self): 
        this = _csgeom.new_csTriangleMinMax()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMinMax
    __del__ = lambda self : None;
csTriangleMinMax_swigregister = _csgeom.csTriangleMinMax_swigregister
csTriangleMinMax_swigregister(csTriangleMinMax)

class csTriangleMeshEdge(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vt1 = _swig_property(_csgeom.csTriangleMeshEdge_vt1_get, _csgeom.csTriangleMeshEdge_vt1_set)
    vt2 = _swig_property(_csgeom.csTriangleMeshEdge_vt2_get, _csgeom.csTriangleMeshEdge_vt2_set)
    tri1 = _swig_property(_csgeom.csTriangleMeshEdge_tri1_get, _csgeom.csTriangleMeshEdge_tri1_set)
    tri2 = _swig_property(_csgeom.csTriangleMeshEdge_tri2_get, _csgeom.csTriangleMeshEdge_tri2_set)
    active = _swig_property(_csgeom.csTriangleMeshEdge_active_get, _csgeom.csTriangleMeshEdge_active_set)
    def __init__(self): 
        this = _csgeom.new_csTriangleMeshEdge()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshEdge
    __del__ = lambda self : None;
csTriangleMeshEdge_swigregister = _csgeom.csTriangleMeshEdge_swigregister
csTriangleMeshEdge_swigregister(csTriangleMeshEdge)

class csTriangleMeshTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CalculateNormals = staticmethod(_csgeom.csTriangleMeshTools_CalculateNormals)
    CalculatePlanes = staticmethod(_csgeom.csTriangleMeshTools_CalculatePlanes)
    CalculateEdges = staticmethod(_csgeom.csTriangleMeshTools_CalculateEdges)
    CheckActiveEdges = staticmethod(_csgeom.csTriangleMeshTools_CheckActiveEdges)
    CalculateOutline = staticmethod(_csgeom.csTriangleMeshTools_CalculateOutline)
    IsMeshClosed = staticmethod(_csgeom.csTriangleMeshTools_IsMeshClosed)
    IsMeshConvex = staticmethod(_csgeom.csTriangleMeshTools_IsMeshConvex)
    CloseMesh = staticmethod(_csgeom.csTriangleMeshTools_CloseMesh)
    SortTrianglesX = staticmethod(_csgeom.csTriangleMeshTools_SortTrianglesX)
    PointInClosedMesh = staticmethod(_csgeom.csTriangleMeshTools_PointInClosedMesh)
    LineInClosedMesh = staticmethod(_csgeom.csTriangleMeshTools_LineInClosedMesh)
    BoxInClosedMesh = staticmethod(_csgeom.csTriangleMeshTools_BoxInClosedMesh)
    CalculateVertexConnections = staticmethod(_csgeom.csTriangleMeshTools_CalculateVertexConnections)
    def __init__(self): 
        this = _csgeom.new_csTriangleMeshTools()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csgeom.delete_csTriangleMeshTools
    __del__ = lambda self : None;
csTriangleMeshTools_swigregister = _csgeom.csTriangleMeshTools_swigregister
csTriangleMeshTools_swigregister(csTriangleMeshTools)

def csTriangleMeshTools_CalculateNormals(*args):
  return _csgeom.csTriangleMeshTools_CalculateNormals(*args)
csTriangleMeshTools_CalculateNormals = _csgeom.csTriangleMeshTools_CalculateNormals

def csTriangleMeshTools_CalculatePlanes(*args):
  return _csgeom.csTriangleMeshTools_CalculatePlanes(*args)
csTriangleMeshTools_CalculatePlanes = _csgeom.csTriangleMeshTools_CalculatePlanes

def csTriangleMeshTools_CalculateEdges(*args):
  return _csgeom.csTriangleMeshTools_CalculateEdges(*args)
csTriangleMeshTools_CalculateEdges = _csgeom.csTriangleMeshTools_CalculateEdges

def csTriangleMeshTools_CheckActiveEdges(*args):
  return _csgeom.csTriangleMeshTools_CheckActiveEdges(*args)
csTriangleMeshTools_CheckActiveEdges = _csgeom.csTriangleMeshTools_CheckActiveEdges

def csTriangleMeshTools_CalculateOutline(*args):
  return _csgeom.csTriangleMeshTools_CalculateOutline(*args)
csTriangleMeshTools_CalculateOutline = _csgeom.csTriangleMeshTools_CalculateOutline

def csTriangleMeshTools_IsMeshClosed(*args):
  return _csgeom.csTriangleMeshTools_IsMeshClosed(*args)
csTriangleMeshTools_IsMeshClosed = _csgeom.csTriangleMeshTools_IsMeshClosed

def csTriangleMeshTools_IsMeshConvex(*args):
  return _csgeom.csTriangleMeshTools_IsMeshConvex(*args)
csTriangleMeshTools_IsMeshConvex = _csgeom.csTriangleMeshTools_IsMeshConvex

def csTriangleMeshTools_CloseMesh(*args):
  return _csgeom.csTriangleMeshTools_CloseMesh(*args)
csTriangleMeshTools_CloseMesh = _csgeom.csTriangleMeshTools_CloseMesh

def csTriangleMeshTools_SortTrianglesX(*args):
  return _csgeom.csTriangleMeshTools_SortTrianglesX(*args)
csTriangleMeshTools_SortTrianglesX = _csgeom.csTriangleMeshTools_SortTrianglesX

def csTriangleMeshTools_PointInClosedMesh(*args):
  return _csgeom.csTriangleMeshTools_PointInClosedMesh(*args)
csTriangleMeshTools_PointInClosedMesh = _csgeom.csTriangleMeshTools_PointInClosedMesh

def csTriangleMeshTools_LineInClosedMesh(*args):
  return _csgeom.csTriangleMeshTools_LineInClosedMesh(*args)
csTriangleMeshTools_LineInClosedMesh = _csgeom.csTriangleMeshTools_LineInClosedMesh

def csTriangleMeshTools_BoxInClosedMesh(*args):
  return _csgeom.csTriangleMeshTools_BoxInClosedMesh(*args)
csTriangleMeshTools_BoxInClosedMesh = _csgeom.csTriangleMeshTools_BoxInClosedMesh

def csTriangleMeshTools_CalculateVertexConnections(*args):
  return _csgeom.csTriangleMeshTools_CalculateVertexConnections(*args)
csTriangleMeshTools_CalculateVertexConnections = _csgeom.csTriangleMeshTools_CalculateVertexConnections

CS_VEC_FORWARD = csVector3(0,0,1)
CS_VEC_BACKWARD = csVector3(0,0,-1)
CS_VEC_RIGHT = csVector3(1,0,0)
CS_VEC_LEFT = csVector3(-1,0,0)
CS_VEC_UP = csVector3(0,1,0)
CS_VEC_DOWN = csVector3(0,-1,0)
CS_VEC_ROT_RIGHT = csVector3(0,1,0)
CS_VEC_ROT_LEFT = csVector3(0,-1,0)
CS_VEC_TILT_RIGHT = -csVector3(0,0,1)
CS_VEC_TILT_LEFT = -csVector3(0,0,-1)
CS_VEC_TILT_UP = -csVector3(1,0,0)
CS_VEC_TILT_DOWN = -csVector3(-1,0,0)




