SubDir TOP scripts msi ;

# @@@ Not quite the same ...
MSM_VERSION ?= $(PACKAGE_VERSION) ;

if $(COMPILER.C++.VERSION_LIST)
{
  MSM_ARCH = "$(COMPILER.C++.TYPE)_$(COMPILER.C++.VERSION_LIST[1]).$(COMPILER.C++.VERSION_LIST[2])" ;
}
else
{
  MSM_ARCH = "$(COMPILER.C++.TYPE)" ;
}

# Architecture-independent
MSIMergeModuleFromList CS.doc : doc-manual doc-api : $(MSM_VERSION) : doc-manual:manual doc-api:api ;
MSIMergeModuleFromList CS.data : data-demo data-demo-maps data-runtime data-tool : $(MSM_VERSION) ;
MSIMergeModuleFromList CS.include : headers : $(MSM_VERSION) ;
MSIMergeModuleFromList CS.vfs : vfs : $(MSM_VERSION) ;
MakeLocate CS.register.msm : $(LOCATE.MSM) ;
MSIMergeModule CS.register.msm : CS.register.wxs ;

# Architecture-dependent
MSIMergeModuleFromList CS.arch.$(MSM_ARCH).include : headers-platform : $(MSM_VERSION) ;
MSIMergeModuleFromList CS.arch.$(MSM_ARCH).lib : libs-shared : $(MSM_VERSION) ;
MSIMergeModuleFromList CS.arch.$(MSM_ARCH).executable : app-demo app-tool plugin plugin-cg : $(MSM_VERSION) ;

rule MakeMSIsForArch
{
  local arch = $(1) ;
  
  MakeLocate CS-$(arch).msi : $(LOCATE.MSI) ;
  MSIPackage CS-$(arch).msi : CS.wxs :
    "MSM_CS_PATH=$(LOCATE.MSM)" "ARCH=$(arch)" "TOP=$(TOP)" ;
  #Depends CS-$(arch).msi : mergemodules ;
  Depends msis : CS-$(arch).msi ;
}
MakeMSIsForArch $(MSM_ARCH) ;
