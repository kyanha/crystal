// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_cseditorcore[] =
"<?xml version=\"1.0\"?>"
"<!-- cseditorcore.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>crystalspace.editor.plugin.core.cs3dpanel</name>"
"        <implementation>CS3DPanel</implementation>"
"        <description>CSEditor 3D Panel</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.editor.plugin.core.scenebrowserpanel</name>"
"        <implementation>SceneBrowserPanel</implementation>"
"        <description>CSEditor Scene Browser Panel</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.editor.plugin.core.assetbrowserpanel</name>"
"        <implementation>AssetBrowserPanel</implementation>"
"        <description>CSEditor Asset Browser Panel</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.editor.plugin.core.csobjectmaplistener</name>"
"        <implementation>CSObjectMapListener</implementation>"
"        <description>CSEditor CS Object Map Listener</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.editor.plugin.core.csinterfacewrappers</name>"
"        <implementation>CSInterfaceWrappers</implementation>"
"        <description>CSEditor CS Interface Wrappers</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef CS3DPanel_FACTORY_REGISTER_DEFINED 
  #define CS3DPanel_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(CS3DPanel) 
  #endif
  #ifndef SceneBrowserPanel_FACTORY_REGISTER_DEFINED 
  #define SceneBrowserPanel_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(SceneBrowserPanel) 
  #endif
  #ifndef AssetBrowserPanel_FACTORY_REGISTER_DEFINED 
  #define AssetBrowserPanel_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(AssetBrowserPanel) 
  #endif
  #ifndef CSObjectMapListener_FACTORY_REGISTER_DEFINED 
  #define CSObjectMapListener_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(CSObjectMapListener) 
  #endif
  #ifndef CSInterfaceWrappers_FACTORY_REGISTER_DEFINED 
  #define CSInterfaceWrappers_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(CSInterfaceWrappers) 
  #endif

class cseditorcore
{
SCF_REGISTER_STATIC_LIBRARY(cseditorcore,metainfo_cseditorcore)
  #ifndef CS3DPanel_FACTORY_REGISTERED 
  #define CS3DPanel_FACTORY_REGISTERED 
    CS3DPanel_StaticInit CS3DPanel_static_init__; 
  #endif
  #ifndef SceneBrowserPanel_FACTORY_REGISTERED 
  #define SceneBrowserPanel_FACTORY_REGISTERED 
    SceneBrowserPanel_StaticInit SceneBrowserPanel_static_init__; 
  #endif
  #ifndef AssetBrowserPanel_FACTORY_REGISTERED 
  #define AssetBrowserPanel_FACTORY_REGISTERED 
    AssetBrowserPanel_StaticInit AssetBrowserPanel_static_init__; 
  #endif
  #ifndef CSObjectMapListener_FACTORY_REGISTERED 
  #define CSObjectMapListener_FACTORY_REGISTERED 
    CSObjectMapListener_StaticInit CSObjectMapListener_static_init__; 
  #endif
  #ifndef CSInterfaceWrappers_FACTORY_REGISTERED 
  #define CSInterfaceWrappers_FACTORY_REGISTERED 
    CSInterfaceWrappers_StaticInit CSInterfaceWrappers_static_init__; 
  #endif
public:
 cseditorcore();
};
cseditorcore::cseditorcore() {}

}
