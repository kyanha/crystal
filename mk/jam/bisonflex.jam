#============================================================================
# Rules for flex and bison
#============================================================================

if $(CMD.FLEX)
{
  rule Flex
  {
    Depends $(<) : $(>) ;
    # We assume here that most people don't have flex installed so that
    # the people with bison installed want to include the autogenerated files
    # with their source.
    MakeLocate $(<) : $(SUBDIR) ;
    Clean clean : $(<) ;
  }
  RegisterFileType Flex : .l ;

  rule Flex++
  {
    C++ $(<) : $(<:S=.cpp) ;
    Flex $(<:S=.cpp) : $(>) ;
  }
  RegisterFileType Flex++ : .ll ;

  if $(COMPILER.TYPE) != "GCC"
  {
    # compilers like msvc don't like #line statements.
    FLEX.FLAGS += -L ;
  }
  # Use -t and output redirection to avoid flex choosing stupid names for it's
  # output files. Also use an own flex template which avoids some
  # compatibility problems with msvc.
  actions Flex
  {
    $(CMD.FLEX) -S$(TOP)/mk/support/flex.skl -t $(FLEX.FLAGS) $(>) > $(<)
  }
}

if $(CMD.BISON)
{
  rule Bison
  {
    Depends $(<) : $(>) ;
    # We're assume here that most people don't have bison installed so that
    # the people with bison installed want to include the autogenerated files
    # with their source.
    MakeLocate $(<) : $(SUBDIR) ;
    Clean clean : $(<) ;
    BISON.FLAGS on $(<) += $(BISON.FLAGS) ;
  }
  RegisterFileType Bison : .y ;

  rule Bison++
  {
    C++ $(<) : $(<:S=.cpp) ;
    Bison $(<:S=.cpp) : $(>) ;
  }
  RegisterFileType Bison++ : .yy ;

  if $(COMPILER.TYPE) != "GCC"
  {
    # compilers like msvc don't like #line statements.
    BISON.FLAGS += --no-lines ;
  }
  actions Bison
  {
    $(CMD.BISON) -d $(BISON.FLAGS) -o $(<) $(>)
  }
}

