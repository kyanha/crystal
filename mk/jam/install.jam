#============================================================================
# Rules for installation
#============================================================================

COPYDIRS ?= "cp -R" ;

INSTALL ?= "install" ;
INSTALL_PROGRAM ?= $(INSTALL) ;
INSTALL_DATA ?= "$(INSTALL) -m644" ;

# set some paths
appdatadir ?= [ ConcatDirs $(datadir) $(PACKAGE_NAME) ] ;
appdocdir ?= [ ConcatDirs $(datadir) doc $(PACKAGE_NAME) ] ;
appconfdir ?= [ ConcatDirs $(sysconfdir) $(PACKAGE_NAME) ] ;
plugindir ?= [ ConcatDirs $(libdir) $(PACKAGE_NAME) ] ;

##  InstallHeader headername [ : subdir ]
##    DoInstall a header file into the includedir directory. A subdirectory
##    relative to the includedir can be specified.
rule InstallHeader
{
    SEARCH on $(<:G=installheader) = $(SUBDIR) ;
    Depends install_include : 
	[ DoInstall $(<:G=installheader) : $(includedir) $(2) ] ;
}

##  InstallData files [ : subdir ]
##    Installs data files
rule InstallData
{
    SEARCH on $(<:G=installdata) = $(SUBDIR) ;
    Depends install_data :
	[ DoInstall $(<:G=installdata) : $(appdatadir) $(2) ] ;
}

##  InstallConfig files [ : subdir ]
##    Installs configuration files
rule InstallConfig
{
    SEARCH on $(<:G=installconfig) = $(SUBDIR) ;
    Depends install_config :
	[ DoInstall $(<:G=installconfig) : $(appconfdir) $(2) ] ;
}

##  InstallDoc files [ : subdir ]
##    Installs documentation files
rule InstallDoc
{
    SEARCH on $(<:G=installdoc) = $(SUBDIR) ;
    Depends install_doc : [ DoInstall $(<:G=installdoc) : $(appdocdir) $(2) ] ;
}

##  InstallMan files
##    Installs Unix manual files
rule InstallMan
{
    local dir i ;
    
    SEARCH on $(<:G=installman) = $(SUBDIR) ;
    for i in $(<:G=installman) {
        dir = $(mandir) ;
        switch $(i:S) {
            case .1 : dir += man1 ;
            case .2 : dir += man2 ;
            case .3 : dir += man3 ;
            case .4 : dir += man4 ;
            case .5 : dir += man5 ;
            case .6 : dir += man6 ;
            case .7 : dir += man7 ;
            case .8 : dir += man8 ;
            case .9 : dir += man9 ;
            case * :
                echo "WARNING: manfile has no *.[0-9] ending." ;
        }
        Depends install_man : [ DoInstall $(i) : $(dir) ] ;
    }
}

##  DoInstall sourcenames : directories [ : installapp : [ postinstallrules ]]
##    Creates a new install target for the given sources named by
##    `sourcenames'.  `directories' is a list of directory components
##    indicating the installation directory for `sourcename'.  `installapp' is
##    the actual program to run to install the sources.  If not specified, then
##    $(INSTALL_DATA) is used.  If the optional `postinstallrules' is provided,
##    it is a list of Jam rules to invoke on the installed target after it is
##    installed.  Each rule is invoked with the installed target as the first
##    argument, and the source target as the second.  This rule returns the
##    names of the installed targets, so it is convenient to use the results as
##    the input for another rule.  For example:
##        Depends install : [ DoInstall $(docfiles) : $(installdocdir) ] ;
##    (Implementation Note: We can't name this rule Install, because Jambase
##    already defines an action for DoInstall :-/)
rule DoInstall
{
    local targets target i dir gdir ;
    dir = [ ConcatDirs $(DESTDIR) $(2) ] ;

    gdir = $(dir:G=dir) ;
    MkDir $(gdir) ;
  
    for i in $(1)
    {
        target = $(i:BSR=$(dir):G=install) ;
        targets += $(target) ;
        Depends $(target) : $(gdir) $(i) ;
        Install1 $(target) : $(i) ;

        if "$(3)"
	{
            INSTALL_APP on $(target) = $(3) ;
        }
	else
	{
            INSTALL_APP on $(target) = $(INSTALL_DATA) ;
        }

	if "$(4)"
	{
	    local postrule ;
	    for postrule in $(4)
	    {
		$(postrule) $(target) : $(i) ;
	    }
	}
    }

    Always $(targets) ;
    return $(targets) ;
}

#----------------------------------------------------------------------------

INSTALLTARGETS = install_bin install_plugin install_lib install_include
		 install_data install_config install_doc ;

Always install $(INSTALLTARGETS) ;
NotFile install $(INSTALLTARGETS) ;
Depends install : $(INSTALLTARGETS) ;

if ! $(PACKAGE_INSTALL_NAME) { PACKAGE_INSTALL_NAME = $(PACKAGE_LONGNAME) ; }
if ! $(PACKAGE_INSTALL_NAME) { PACKAGE_INSTALL_NAME = $(PACKAGE_NAME) ; }
if ! $(PACKAGE_INSTALL_NAME) { PACKAGE_INSTALL_NAME = "the project" ; }
Help install : "Install $(PACKAGE_INSTALL_NAME)" : verbatim ;

actions Install1
{
  $(INSTALL_APP) $(INSTALLFLAGS) $(>) $(<) ;
}

actions CopyDirs
{
  $(COPYDIRS) $(>) $(<)
}
