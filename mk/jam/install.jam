#============================================================================
# Rules for installation
#============================================================================

# override crappy jam defaults
EXEMODE = 0755 ;
FILEMODE = 0644 ;

##  InstallApplication applicationname [ : subdir [ : options ] ]
##    Install an application into the bindir directory.  A subdirectory
##    relative to the bindir can be specified.  Possible options are "console"
##    if this is a console application (as opposed to a GUI application).  This
##    rule is already invoked by the Application rule, so usually there's no
##    need to call it manually.
rule InstallApplication
{
  local dir = [ FDirName $(INSTALLDIR.APPLICATION) $(2) ] ;
  local target = $(<:R=$(dir):G=install) ;

  CheckOptions console : $(3) : $(<) ;
  if [ IsElem console : $(3) ]
  {
    InstallApplicationConsole $(target) : $(<) ;
  }
  else
  {
    InstallApplicationGUI $(target) : $(<) ;
  }
  Depends install_apps : $(target) ;
}

##  InstallApplicationGUI installapp : app
##  InstallApplicationConsole installapp : app
##    Utility rules for InstallApplication which perform the actual
##    installation.  These default implementations merely invokes the Install
##    rule. Platforms with special installation requirements may override
##    these rules.
rule InstallApplicationGUI
{
  Install $(<) : $(>) ;
  MODE on $(<) = $(EXEMODE) ;
}

rule InstallApplicationConsole
{
  Install $(<) : $(>) ;
  MODE on $(<) = $(EXEMODE) ;
}


##  InstallPlugin pluginname [ : subdir ]
##    Install a plugin into the plugindir directory. A subdirectory relative
##    to the plugindir can be specified. After installing the plugin a .scf
##    file with metainformation about the plugin is generated.
##    This rule is already invoked by the Plugin rule, so usually there's no
##    need to call it manually.
rule InstallPlugin
{
  local dir = [ FDirName $(INSTALLDIR.PLUGIN) $(2) ] ;
  local target = $(<:R=$(dir):G=install) ;

  Install $(target) : $(<) ;
  MODE on $(target) = $(EXEMODE) ;
  
  if $(CMD.SCFREG)
  {
    local scf = $(<:R=$(dir):S=.scf:G=installscf) ;
    ScfFileGen $(scf) : $(target) ;
    Depends install_plugins : $(scf) ;
  }

  Depends install_plugins : $(target) ;
}

##  InstallLibrary libraryname [ : subdir ]
##    Install a library into the libdir directory. A subdirectory relative to
##    the libdar may be specified.
##    This rule is already invoked by the Library rule, so usually there's no
##    need to call it manually.
rule InstallLibrary
{
  local dir = [ FDirName $(INSTALLDIR.LIBRARY) $(2) ] ;
  local target = $(<:R=$(dir):G=install) ;
  
  Install $(target) : $(<) ;
  MODE on $(target) = $(FILEMODE) ;
  Depends install_libs : $(target) ;
}

##  InstallHeader headername [ : subdir ]
##    Install a headerfile into the includedir directory. A subdirectory
##    relative to the includedir can be specified.
rule InstallHeader
{
  local dir = [ FDirName $(INSTALLDIR.INCLUDE) $(2) ] ;
  local target = $(<:R=$(dir):G=install) ;
    
  Install $(target) : $(<) ;
  MODE on $(target) = $(FILEMODE) ;
  Depends install_headers : $(target) ;
}

##  InstallShellScript scriptname [ : subdir ]
##    Install a shell script into the bindir directory. A subdirectory
##    relative to the bindir can be specified.
rule InstallShellScript
{
  local dir = [ FDirName $(INSTALLDIR.APPLICATION) $(2) ] ;
  local target = $(<:R=$(dir):G=install) ;
  
  Install $(target) : $(<) ;
  MODE on $(target) = $(EXEMODE) ;
  Depends install_shellscripts : $(target) ;
}

##  InstallData datafiles [ : subdir ]
##    Install files into the datadir directory. A subdirectory relative to the
##    datadir may be specified. Note that the files should be marked as data
##    with the Data rule first.
rule InstallData
{
  local target dir d ;

  for d in $(<)
  {
    dir = [ FDirName $(INSTALLDIR.DATA) $(2) ] ;
    target = $(d:R=$(dir):G=install) ;
        
    Install $(target) : $(d:G=data) ;
    MODE on $(target) = $(FILEMODE) ;
    Depends install_data : $(target) ;
  }
}

##  InstallConfig configfiles [ : subdir ]
##    Install files into the configdir directory. A subdirectory relative to
##    the configdir may be specified. Note that the files should be marked as
##    config with the Config rule first.
rule InstallConfig
{
  local target dir c ;
  
  dir = [ FDirName $(INSTALLDIR.CONFIG) $(2) ] ;

  for c in $(<)
  {
    target = $(c:R=$(dir):G=install) ;
  
    Install $(target) : $(c:G=config) ;
    MODE on $(target) = $(FILEMODE) ;
    Depends install_configs : $(target) ;
  }
}

##  InstallDoc filename [ : subdir ]
##    Install documentation files. A subdirectory relative to the docdis may
##    be specified.
rule InstallDoc
{
  local dir target d ;
  
  dir = [ FDirName $(INSTALLDIR.DOC) $(2) ] ;
  LOCATE on $(<:G=install) = $(SUBDIR) ;

  for d in $(<)
  {
    target = $(d:R=$(dir):G=install) ;

    Install $(target) : $(d:G=install) ;
    MODE on $(target) = $(FILEMODE) ;
    Depends install_docs : $(target) ;
  }
}

rule InstallDocDir
{
  local target dir ;
  
  dir = [ FDirName $(INSTALLDIR.DOC) $(2) ] ;
  target = $(<:R=$(dir):G=doc_install) ;
  
  Depends $(target) : $(<) ;
  MODE on $(target) = $(FILEMODE) ;
  CopyDirs $(target) : $(DOCDIR_$(<)) ;
  Depends $(target) : $(<) ;
  Depends install_docs : $(target) ;
  Depends install_$(<) : $(target) ;
}

##  InstallMapfile name
##    Install a mapfile which has been specified with the Mapfile rule before
rule InstallMapfile
{
  local target dir m i ;
  
  for m in $(<)
  {
    local dir = [ FDirName $(INSTALLDIR.MAP) $(m) ] ;
    local target = $(MAP_$(m)_WORLDFILE:R=$(dir):G=install_$(m)) ;
    
    Install $(target) : $(MAP_$(m)_WORLDFILE) ;
    MODE on $(target) = $(FILEMODE) ;
    Depends install_maps : $(target) ;

    for i in $(MAP_$(m)_EXTRAFILES)
    {
      dir = [ FDirName $(INSTALLDIR.MAP) $(m) ] ;
      target = $(i:R=$(dir):G=install_$(m)) ;
      
      Install $(target) : $(i) ;
      MODE on $(target) = $(FILEMODE) ;
      Depends install_maps : $(target) ;
    }
  }
}

##  Install Targetname : sourcename : directory
##    Install a file. The filemode of the file has to be specified with the
##    MODE variable for the target.
##    Normally the InstallApplication/Plugin/Header... rules should be enough
##    so that there's no need to call this rule.
rule Install
{
  Depends $(<) : $(>) ;
  Always $(<) ;

  #Make sure the target directory exists
  Depends $(<) : $(<:D:G=dir) ;
  MkDir $(<:D:G=dir) ;
}

##  Data files ;
##    Mark files in the current directory as datafiles. This is needed when
##    using the InstallData rule.
rule Data
{
  LOCATE on $(<:G=data) = $(SUBDIR) ;
}

##  Config files ;
##    Mark files in the current directory as configfiles. This is needed when
##    using the InstallConfig rule.
rule Config
{
  LOCATE on $(<:G=config) = $(SUBDIR) ;
}

##  Mapfile name : worldfile [ : Additional Files ]
##    Mark a file as mapfile. It is possible to specify additonal files which
##    will be marked dependencies of the map.
rule Mapfile
{
  local i ;
  LOCATE on $(2:G=map_$(1)) = $(SUBDIR) ;
  
  LOCATE on $(3:G=map_$(1)) = $(SUBDIR) ;
  MAP_$(1)_EXTRAFILES += $(3:G=map_$(1)) ;
  MAP_$(1)_WORLDFILE = $(2:G=map_$(1)) ;
}

#----------------------------------------------------------------------------

INSTALLTARGETS = install_apps install_plugins install_libs install_headers
		 install_shellscripts install_data install_configs
		 install_maps ;
EXTRAINSTALL = install_docs ;

Always install $(INSTALLTARGETS) $(EXTRAINSTALL) ;
NotFile install $(INSTALLTARGETS) $(EXTRAINSTALL) ;

Depends install : $(INSTALLTARGETS) ;

actions Install
{
  $(CMD.INSTALL) -m$(MODE) $(>) $(<) $(INSTALLFLAGS) ;
}

rule ScfFileGen
{
  Depends $(<) : $(>) ;
}

actions ScfFileGen
{
  $(CMD.SCFREG) $(>) > /dev/null
}

actions CopyDirs
{
  cp -R $(>) $(<)
}

# disabled for now as this doesn't work reliable yet
#actions CsLight
#{
#  unset CRYSTAL
#  $(BINDIR)/cslight $(<)
#}
