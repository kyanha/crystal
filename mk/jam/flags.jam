#============================================================================
# Rules for specifying compiler and linker flags
#============================================================================

##  LinkWith appname : libs
##    Link an application with libraries. The specified libraries should have
##    build rules in the same project. For external libraries use the
##    ExternalLibs rule. Specify the library names without any extensions or
##    the leading "lib".
rule LinkWith
{
  local deplibs = [ CreateLibList $(>) ] ;
  DEPENDS $($(<)_TARGET) : $(deplibs) ;
  NEEDLIBS on $($(<)_TARGET) += $(deplibs) ;

  if $($(<)_TYPE) = plugin
  {
    $(<)_static.NEEDLIBS += $(>) ;
  }
}

##  CFlags target : flags
##    Sets cflags on all sourcefiles of a library, plugin or application target
##    This rule affects c++ and c compiler flags.
rule CFlags
{
  CCFLAGS on $($(<)_OBJECTS) += $(>) ;
  C++FLAGS on $($(<)_OBJECTS) += $(>) ;

  if $($(<)_TYPE) = plugin
  {
    CFlags $(<)_static : $(>) ;
  }
}

##  LFlags target : flags
##    Sets linker flags for a library, plugin or application target
rule LFlags
{
  LINKLIBS on $($(<)_TARGET) += $(>) ;
}

##  ExternalLibs appname : linkerflags
##    Link an application with external libraries. It is possible to give a
##    set of flags which will be passed to the linker when building the
##    application (typically -L and -l flags).
rule ExternalLibs
{
  local i ;
  
  for i in $(>)
  {
    CFlags $(<) : $($(i).CFLAGS) ;
    LFlags $(<) : $($(i).LFLAGS) ;

    if $($(<)_TYPE) = plugin
    {
      $(<)_static.LFLAGS += $($(i).LFLAGS) ;
    }
  }
}

##  ExtraObjects target : objectfiles
##    Link additional object files with a target
rule ExtraObjects
{
  EXTRAOBJECTS on $($(<)_TARGET) += $(>) ;
  Depends $($(<)_TARGET) : $(>) ;
  Clean $(<)clean : $(>) ;
  Clean clean : $(>) ;
}
