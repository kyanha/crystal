#============================================================================
# Rules for swig
#============================================================================

if $(CMD.SWIG)
{
  SED ?= sed ;

  # The sed commands/script with which the generated Swig file will be
  # post-processed.  We filter out CVS `Header' keywords in order to prevent
  # CVS from thinking that the file has changed simply because the Header
  # information is different.  This is especially important when the
  # Swig-generated files are created/updated by an automated script.  Further,
  # we define the sed script here rather than inline in the Swig action in
  # order to prevent accidental expansion of the `Header' keyword in this
  # script (swig.jam) itself, since it is likely that the command in the Swig
  # action will have additonal dollar signs following the sed commands; and CVS
  # will replace everything between the two dollar signs with the `Header'
  # information.
  SWIG.SED_SCRIPT = "'/\$Header:/d'" ;

  ## Swig cppfile : swigfile
  rule Swig
  {
    Depends $(<) : $(>) ;
    # Put the generated cpp files in the source directory. Because probably not
    # all people have swig installed so we want to add these generated files to
    # the sources.
    MakeLocate $(<) : $(SUBDIR) ;
    SWIG.FLAGS on $(<) += $(SWIG.FLAGS) ;
  }
  
  actions Swig
  {
    $(CMD.SWIG) $(SWIG.FLAGS) -o $(<) $(>)
    $(SED) $(SWIG.SED_SCRIPT) < $(<) > $(<).sed
    $(RM) $(<)
    $(MV) $(<).sed $(<)
  }

  rule SimpleSwig
  {
    local object = [ DoObjectGrist $(<:S=$(SUFOBJ)) ] ;
    local cppfile = $(<:S=.cpp) ;
    
    C++ $(object) : $(cppfile) ;
    Swig $(cppfile) : $(<) ;

    return $(object) ;
  }
  RegisterFileType SimpleSwig : .i ;

  if ! $(NO_SWIG_HEADER_SCANNING)
  {
    SWIG.HDRPATTERN = "^[ 	]*[%#][ 	]*include[ 	]*[<\"]([^\">]*)[\">].*$" ;
    RegisterHeaderRule HeaderRule : $(SWIG.HDRPATTERN) : .i ;
  }
}
