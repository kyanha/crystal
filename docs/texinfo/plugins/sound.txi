@c -*-texinfo-*-
@node Sound System, , Drivers, Drivers
@subsection Sound System
@cindex Sound System

@noindent
@emph{Written by Nathaniel Saint Martin, @email{noote@@bigfoot.com}.  Last
updated 22 September 1999.}

This is a description of the Crystal Space sound system which is comprised of
several sound renderers and sound drivers.

@subsubheading Supported Operating Systems

The Crystal Space sound system supports these operating systems:

@itemize @bullet
@item
Microsoft Windows using the @emph{WaveOut} functions (standard Win32
@sc{api}), Aureal3D 2.0, DirectSound3D (@sc{dx5}), @sc{eax} 2.0 and the
software renderer.

@item
Linux using an @sc{oss} driver by Gert Steenssens
(@email{gsteenss@@eps.agfa.be}).
(OSS).

@item
Macintosh using the MacOS toolbox.
@end itemize

@subsubheading Supported File Formats

The following file formats are supported:

@itemize @bullet
@item
Sun standard @file{.au} (or @file{.snd}), 8- and 16-bit @sc{pcm} and 8-bit
G.711 u-Law (no-compression).
@item
Microsoft @file{.wav}, 8- and 16-bit @sc{pcm}.
@item
Amiga @file{.8svx} and @file{.iff}, 8-bit @sc{pcm}.
@item
Macintosh @file{.aiff}, 8- and 16-bit @sc{pcm}.
@end itemize

@subsubheading How It Works

The sound system architecture is a bit like graphics system.  There are
different sound renderers and low-level driver accessed by the software
renderer.  The sound renderer enables 2D buffer (via the @samp{iSoundBuffer}
@sc{scf} interface) and 3D sound source (via the @samp{iSoundSource}
interface).  Attached with renderer (@samp{iSoundRender}) there is a listener
(@samp{iSoundListener})---basically the ears of the viewer/player---for the
3D mode.

Here is a run-down of the abstract @sc{scf} interface architecture :

@table @code
@item iSoundRender
This mixes and calculates all @samp{iSoundBuffer}.

@item iSoundDriver
This provides low-level access to the operating system sound facilities.  Only
used by software renderer.

@item iSoundBuffer
This is the played sound.  We can create this with via @samp{csSoundData}.

@item iSoundSource
The 3D sound emmitter control.

@item iSoundListener
The 3D listener.
@end table

@subsubheading Examples

Some examples may help to clarify the architecture.

@example
// The sound data object.
csSoundData* data;
// Load a sound file.
data = csSoundDataObject::GetSound(world, "beep.wav");
// Create a 2D sound buffer.
iSoundBuffer* buffer;
system->Sound->CreateSoundBuffer(&buffer, data);
// Play the sound.
buffer->Play();
// Stop this sound.
buffer->Stop();
@end example

And now a more complex example illustrating how to play a 3D sound:

@example
// The 3D source object.
iSoundSource* source;
// There are two methods to create a 3D source.  Either
// directly from iSoundRender or from an iSoundBuffer.
system->Sound->CreateSource(&source, data);
// Or...
buffer->CreateSource->(&source);
@end example

@subsubheading Sound System Configuration

In the configuration file (e.g. @file{cryst.cfg}) you can create a
@code{[SoundDriver]} section similar to the sample below:

@example
[SoundDriver]
; Maximum of channels to mix.
MAX_CHANNELS=16
; Frequency supported by sound device.
; (44100, 22050, 11025, etc.)
FREQUENCY=11025
; Control whether sound device uses 16-bits (if supported).
16BITS=false
; Enable stereo output on sound device (if it supported).
; For a 3D sound it is useful.
STEREO=true
; Enable or disable sound driver.
ACTIVE=true
; Set general volume in th range [0..1].  If you put -1
; or a value inferior to 0, current device volume is used.
VOLUME=-1
@end example

The variables from the configuration file are described below.

@table @code
@item MAX_CHANNELS
The maximum number of channels you can mix--only for software mixing (for a
hardware multi-voice the sound card fixes this).  The higher this value is,
the more @sc{cpu} resources it consumes.

@item FREQUENCY
The sample frequency for playing.  The higher this value is, the more @sc{cpu}
resources it consumes.  This value can be fixed by a hardware limit; verify
this by checking with your manual, driver, manufacturer, etc.

@item 16BITS
Use 16 bits instead of 8 bits for playing sounds.  Your sound card
capabilities may also place a limit on this value.

@item STEREO
Use stereo output if ``true''.  This one depends on your sound card too.  It
can be useful for 3D sound.

@item ACTIVE
Set this one to true to activate the sound driver.  Otherwise you won't hear
anything.

@item VOLUME
A software or hardware value, from 0 (no sound) to 1 (full volume); it depends
on your sound card and/or driver.
@end table

@subsubheading WaveOut Win32 Driver Configuration

The Waveout Win32 driver has its own configuration file (@file{wodrv.cfg}) in
addition to general sound driver configuration.  It has the following
contents:

@example
[SoundDriver.waveOut]
; Call-back type can be 'function' or 'thread'.
CALLBACK=thread
; Priority can be 'lowest', 'normal' or 'highest'.
THREAD_PRIORITY=highest
; Number of refreshes per second.
REFRESH=10
@end example

The variables from the configuration file are described below.

@table @code
@item CALLBACK
The call-back method has two possible settings, @samp{thread} or
@samp{function}.  The @emph{thread} method starts a process which fills sound
data when it receive order (by WaveOut).  The @emph{function} method
@dfn{blocks} the program while filling sound data, the call of the function is
done by WaveOut but if the @dfn{frames per second} (@sc{fps}) is low or system
idle is very low, calls to function can't be done (it is unstable).  I prefer
the thread method, which is (theoretically) independent of the main process
idle.

@item THREAD_PRIORITY
Only for thread method.  It sets the priority of the thread.  Possible values
are @samp{lowest}, meaning that the sound thread has a very low priority
compared to the main process; @samp{normal} meaning that the priority is equal
to the priority of the main process; and @samp{highest} meaning that the
thread priority is higher than main process.

@item REFRESH
The time of refresh of sound data.  A value of 10 means refresh the sound data
10 times per second.  But a warning, if you get an @sc{fps} value inferior to
this refresh value, it can crash for function call-back or cut sound for
thread method.
@end table

@subsubheading Problems

If you have problems with the sound output, consult the following list.

@itemize @bullet
@item
Are you sure to have a sound card?

@item
Are you sure that sound card is supported by your operating system?

@item
Are you sure Crystal Space has a sound driver for your operating system?

@item
Verify that @samp{ACTIVE} is set to @samp{true} in the configuration file.

@item
Consult the @file{CS/debug.txt} file.  If an error was reported in this file
by the sound driver try another configuration by changing @samp{FREQUENCY},
@samp{STEREO}, @samp{16BITS}, and @samp{VOLUME}.
@end itemize
