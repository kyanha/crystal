@c -*-texinfo-*-
@node AWS QT Designer and AWS, , AWS Architecture, AWS
@subsection Using QT Designer To Create @sc{aws} Definition Files

On many platforms Trolltechs Designer is available, a tool that lets you create graphical user interfaces like
Dialogs, Forms etc. It saves the interface description in an easy to read format (XML -  even though i was not 
able to locate a formal document type description (DTD) for it, it's format is pretty obvious).

You should be aware that not all features the Designer is capable of can be translated into @sc{aws} simply because
they are not available in @sc{aws}. The same is true for features available in @sc{aws} but not in Designer.

@subsubheading What you need

Since Designer saves its interface description in XML writing an extensible stylesheet to transform it into @sc{aws} format
was an obvious choice. So you will need a XSLT stylesheet processor. You can either choose a commercial product or
the excellent Xalan which is part of the Apache project. You can get it for free here:
@uref{http://xml.apache.org}
For development i used the Xalan Java 2 version at: @uref{http://xml.apache.org/xalan-j/index.html}

@subsubheading How to use it

Design your dialog or widget in Designer and save it somewhere.
To process the stylesheet with the java version of Xalan you call:
@example
java org.apache.xalan.xslt.Process \
    -IN path/to/the/saved/designer/file.ui \
    -XSL path/to/CS/scripts/aws/qt2aws.xsl
@end example

Append the output to a file containing skin definitions.

@subsubheading What controls are converted ?

@multitable @columnfractions 0.4 0.2 0.4
@item @strong{QT Class} @tab @tab @strong{AWS Class}
@item QPushButton @tab ==> @tab Command Button
@item QRadioButton @tab ==> @tab Radio Button
@item QSlider @tab ==> @tab Scroll Bar
@item QButtonGroup @tab ==> @tab Group Frame
@item QGroupBox @tab ==> @tab Group Frame
@item QFrame @tab ==> @tab Group Frame
@item QCheckBox @tab ==> @tab Check Box
@item QLineEdit @tab ==> @tab Text Box
@item QTextView @tab ==> @tab Multiline Edit
@item QLabel @tab ==> @tab Label
@item QLabel with Pixmap @tab ==> @tab Image View
@item QListBox @tab ==> @tab List Box
@item QListView @tab ==> @tab List Box
@item QDialog @tab ==> @tab Window
@item QWidget @tab ==> @tab Window
@item QTabWidget @tab ==> @tab Notebook
@end multitable

@subheading Special Notes

@subsubheading @sc{AWS} Signals and special properties

You can place special information in the controls @strong{whatsThis} property. The content will be broken into tokens
separated by the pipe (@sc{"|"}). A token consist of a token identifier, the colon @sc{:} and token text.
The following tokens are recognized:

@itemize
@item connect token
@itemize
@item token identifier: c
@item token text: a list of comma separated items
@item example:
@example
c:signalClicked,mySink::OnClick,signalBreak,mySink::ByeBye
@end example

This will be translated into

@example
connect 
@{
  signalClicked -> mySink::OnClick  
  signalBreak -> mySink::ByeBye
@}
@end example
@end itemize

@item literal token
@itemize
@item token identifier: l
@item token text: some text
@item example:
@example
l:LeftEye: "Blue"
@end example

This will be translated into

@example
LeftEye: "Blue"
@end example
@end itemize
@end itemize

Both examples from above would be concatenated and placed in the
@strong{whatsThis} property and would look like this:

@example
c:signalClicked,mySink::OnClick,signalBreak,
    mySink::ByeBye|l:LeftEye: "Blue"
@end example

@subsubheading How to handle your own @sc{AWS} controls

If you coded your own @sc{aws} control you can still use QT to layout the control (at least the common parameters 
like size and position). For this to work simply choose one of the supported controls and use it as a placeholder.
Additionally you use the  token identifier 't' in the @strong{whatsThis} property of that control to name of your control class.

Example:

I have created my own push button control. The name of the control class is awsMyFancyPushButtonControl. Since it uses
all the properties of the standard @sc{aws} command button i cleverly use the QPushButton as my placeholder and set all
the properties i need and QPushButton already offers like size, position, button text and others. Additionally i set the
t token identifier in property @strong{whatsThis} to awsMyFancyPushButtonControl.

@itemize
@item class type token
@itemize
@item token identifier: t
@item token text: the name of your class
@item example:
@example
t:awsMyFancyPushButtonControl
@end example

This will be translated into

@example
component "hitmehard" is "awsMyFancyPushButtonControl"
@{
  Frame: (10,330) - (121,350)
  Caption: "update"
@}
@end example
@end itemize
@end itemize


