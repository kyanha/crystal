@c -*-texinfo-*-
@node MeshObject Spr2D, MeshObject Spr3D, Writing MeshObjects, MeshObject
@subsection Sprite2D Mesh Object
@cindex MeshObject
@cindex 2D Sprite
@cindex @code{iMeshObject}
@cindex @code{iMeshObjectFactory}
@cindex @code{iMeshObjectType}
@cindex @code{iSprite2DState}
@cindex @code{iSprite2DFactoryState}
@cindex @code{iParticle}

@emph{Written by Jorrit Tyberghein,
(@email{jorrit.tyberghein@@uz.kuleuven.ac.be}).}

A 2D Sprite is basically a polygon that always faces the camera.  There are
some special effects that you can do with this but it is really very simple
otherwise.

@subsubheading Basic Structure

The following @sc{scf} class names are used (for @code{CS_LOAD_PLUGIN()}):

@itemize @bullet
@item
Type plugin: @samp{crystalspace.mesh.object.sprite.2d}
@item
Loader plugin: @samp{crystalspace.mesh.loader.sprite.2d}
@item
Factory loader plugin: @samp{crystalspace.mesh.loader.factory.sprite.2d}
@end itemize

Objects in this plugin implement the following @sc{scf} interfaces (get with
@code{SCF_QUERY_INTERFACE()}):

@itemize @bullet
@item
@emph{MeshObject}
@itemize @bullet
@item
Implements @samp{iMeshObject}
@item
Implements @samp{iSprite2DState}
@item
Implements @samp{iParticle}
@end itemize
@item
@emph{MeshObjectFactory}
@itemize @bullet
@item
Implements @samp{iMeshObjectFactory}
@item
Implements @samp{iSprite2DFactoryState}
@end itemize
@item
@emph{MeshObjectFactory}
@itemize @bullet
@item
Implements @samp{iMeshObjectType}
@end itemize
@end itemize

@subsubheading Factory State Interface

Use the @sc{scf} interface @samp{iSprite2DFactoryState} to acccess settings for
a 2D sprite factory.  The definition of this interface can be found in
@file{CS/include/imesh/sprite2d.h} and that is also the include file you need
to include in your applications to use this plugin.  Using this interface you
can access the material, blending mode (mixmode), and lighting settings.

@subsubheading Factory Loader

@table @code
@item LIGHTING
Enable/disable lighting.
@item MATERIAL
Material to use for the polygon.
@item MIXMODE
Blending mode; one of @samp{ADD}, @samp{ALPHA}, @samp{COPY}, @samp{KEYCOLOR},
@samp{MULTIPLY2}, @samp{MULTIPLY}, or @samp{TRANSPARENT}.
@item UVANIMATION
Define an uv animation, that is a sequence of frames which textures are all in
one big texture.  Thus the animation is achieved by altering the (u,v)
coordinates of the polygon defined by this sprite.
@item FRAME
Defines a single frame within an uv animation by specifying its duration in
milliseconds and the u,v coordinates to use.
@itemize
FRAME 'framename' (millisec, u,v coo list)
@end itemize
@end table

@subsubheading Object State Interface

@samp{iSprite2DState} is the @sc{scf} interface that you can use to set/get
settings for a 2D sprite object.  The definition of this interface can be found
in @file{CS/include/imesh/sprite2d.h} and that is also the include file you
need to include in your applications to use this plugin.  Using this
interface you can access the material, blending mode (mixmode), lighting
settings, and also the vertices of the 2D polygon controlled by this plugin.

@subsubheading Object Loader

@table @code
@item FACTORY
Name of the factory to use for creation of this instance.
@item MIXMODE
Blending mode, one of @samp{ADD}, @samp{ALPHA}, @samp{COPY}, @samp{KEYCOLOR},
@samp{MULTIPLY2}, @samp{MULTIPLY}, or @samp{TRANSPARENT}.
@item MATERIAL
Material to use for the polygon.
@item LIGHTING
Enable/disable lighting.
@item VERTICES
List of 2D vertices defining the polygon.
@item UV
List of texture mapping UV coordinates for the polygon.
@item COLORS
List of rgb colors for the polygon.
@item ANIMATE
Select an uv animation from the list of animations declared in the template
@itemize
ANIMATE ('ani name', timing, loop)
@itemize
@item
timing > 0 : every <timing> milliseconds the next frame will be shown
@item
timing < 0 : every <-timing> gameloop the next frame will be shown
@item
timing = 0 : timing attached to the frame will be used
@item
loop : loop the animation or stop after last frame (and show the last frame)
@end itemize
@end itemize
@end table

@subsubheading Example 1

This is how our world file looks:

@example
WORLD (
  TEXTURES (
    TEXTURE 'blow' (FILE(blow.png))
  )

  MATERIALS (
    MATERIAL 'explosion' (TEXTURE ('blow'))
  )

  MESHOBJ 'Explosion' (
    PLUGIN ('crystalspace.mesh.loader.factory.sprite.2d')
    PARAMS (
      MATERIAL ('explosion')
      UVANIMATION 'boom' (
        FRAME 'f1' ( 100, 0, 0, 0.5, 0, 0.5, 0.5, 0, 0.5)
        FRAME 'f2' ( 100, 0.5, 0, 1, 0, 1, 0.5, 0.5, 0.5)
        FRAME 'f3' ( 100, 0, 0.5, 0.5, 0.5, 0.5, 1, 0, 1)
        FRAME 'f4' ( 100, 0.5, 0.5, 1, 0.5, 1, 1, 0.5, 1)
      )
    )
  )

  sector 'space' (
    ; define all the stuff in space
    ; ...
    ; and now one of the enemies right after we met him
    MESHOBJ 'kaboom' (
      PLUGIN ('crystalspace.mesh.loader.sprite.2d')
      PARAMS (
        FACTORY ('Explosion')
        VERTICES (-1,1,1,1,1,-1,-1,-1)
        UV (0,0,1,0,1,1,0,1)
        COLORS (1,1,1,1,1,1,1,1,1,1,1,1)
	LIGHTING (no)
        ; show the animation, use the timings attached to
	; the frames, loop
        ANIMATE ('boom', 0, yes)
      )
      MOVE (0,0,0)
    )
  )  
)

@end example
