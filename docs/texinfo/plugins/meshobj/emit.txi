@c -*-texinfo-*-
@node MeshObject Emit, MeshObject Fire, MeshObject Fountain, MeshObject
@subsection Emitter Mesh Object
@cindex MeshObject
@cindex Emitter Particle System
@cindex @code{iMeshObject}
@cindex @code{iMeshObjectFactory}
@cindex @code{iMeshObjectType}
@cindex @code{iEmitState}
@cindex @code{iEmitFactoryState}
@cindex @code{iParticleState}

@emph{Written by Wouter Wijngaards,
@email{wouterw@@cs.vu.nl}.}

An emitter particle system is a very general particle system, that
can do a variety of things. See the general particle system documentation 
which is valid for all particle systems, for 
global options. @xref{MeshObject PartSys}.

The emitter can be customized to a high degree, using the iEmitGen3D 
objects. Particles are emitted from position you choose, with speeds
and accelerations you choose. During their lifetime they age and change
as you choose.

@subsubheading Basic Structure

The following @sc{scf} class names are used (for @code{LOAD_PLUGIN()}):

@itemize @bullet
@item
Type plugin: @samp{crystalspace.mesh.object.emit}
@item
Loader plugin: @samp{crystalspace.mesh.loader.emit}
@item
Factory loader plugin: @samp{crystalspace.mesh.loader.factory.emit}
@end itemize

Objects in this plugin implement the following @sc{scf} interfaces (get
with @code{QUERY_INTERFACE()}):

@itemize @bullet
@item
@emph{MeshObject}
@itemize @bullet
@item
Implements @samp{iMeshObject}
@item
Implements @samp{iParticleState}
@item
Implements @samp{iEmitState}
@end itemize
@item
@emph{MeshObjectFactory}
@itemize @bullet
@item
Implements @samp{iMeshObjectFactory}
@item
Implements @samp{iEmitFactoryState}
@end itemize
@item
@emph{MeshObjectFactory}
@itemize @bullet
@item
Implements @samp{iMeshObjectType}
@end itemize
@end itemize

@subsubheading Factory State Interface

The factory state interface has methods to create new Emit objects,
that implement the iEmitGen3D interface. These objects return a random
3d x,y,z value. They are used to specify starting position, speed  and
acceleration for the particles. Several exist:
@itemize @bullet
@item
@emph{iEmitFixed}
This emitter returns a fixed x,y,z value. Corresponds to a point in space,
a fixed speed, or fixed acceleration.
@item
@emph{iEmitBox}
Returns a value with each component between a min and max. Corresponds to
points from a box in space. Use it to variate x,y,z for speed and acceleration, or to get positions inside a box.
@item
@emph{iEmitSphere}
Returns a point in a sphere. The center of the sphere and a min and max radius
must be given. The point is between the min and max radius from the center.
Thus you can generate points from a hollowed sphere if you like.
The points are evenly distributed across the entire volume of the 
sphere.
@item
@emph{iEmitCone}
Returns a point inside a cone. Give a start point, aperture angle, azimuth
and elevation just like in the fountain particle system. The points are
chosen between a min and max distance from the origin.
@item
@emph{iEmitMix}
The mix has a set of other iEmitGen3D objects, and samples a weighted
distribution from them. You can give some other emitgen3ds and a weight
for each one. Items with a heavier weight will be asked to return a 
point more often.

For example, you could add several EmitLine objects to the mix, each 
with a weight equal to its length. Then the mix will return points from
a random line, but those points will be evenly distributed in space.

@item
@emph{iEmitLine}
Returns points from the line between start and end position.
@item
@emph{iEmitCylinder}
Give the start and end of the middle line of the cylinder, the two end
points. Returns points between min and max radius from the middle line.
The points are evenly distributed in space. Also, when the start = end point,
points from a circle are returned.
@item
@emph{iEmitSphereTangent}
The position point that is passed is used to compute a vector that is
tangential to a sphere, relative to given origin. Use it to give a speed
or acceleration tangential to a sphere. Speed is between min and max.
@item
@emph{iEmitCylinderTangent}
The position point that is passed is used to compute a vector that is
tangential to a cylinder, relative to given start and end of the middle line. 
Use it to give a speed or acceleration tangential to a cylinder. Speed is 
between min and max.
@end itemize

@subsubheading Factory Loader

The fountain mesh factory loader has no parameters.

@subsubheading Object State Interface

@samp{iEmitState} is the @sc{scf} interface that you can
use to set/get settings for a fire object. The definition of this
interface can be found in @file{CS/include/imesh/emit.h} and that's also the
include file you need to include in your applications to use this plugin.
Using this interface you can access the number of particles, the size
of the particles, and various other emitter parameters.
You can set:
@itemize @bullet
@item The number of particles
@item if particles are lighted
@item The time a particle lives, in msec (1/1000). This is the maximum age 
of the particles.
@item The starting position iEmitGen3D.
@item The starting speed iEmitGen3D.
@item The starting acceleration iEmitGen3D.
@item The attractor iEmitGen3D. You can also leave this at NULL, and 
no attractor is used. If given, each point is mysteriously attracted
to a point generated by the attractor iEmitGen3D. 
@item The force of the attractor, higher means a faster acceleration
towards the attractor. Negative will repel.
@item The shape of the particles, either rectanguler (given width, height)
or regular shaped (given nr sides and radius).
@item Also a table a ages and settings can be given. The particles will
have their settings interpolated from the table in their lifetime.
At a particular time (in msec), you can set the colour of the particle,
the alpha value of the particle (1=transparent), the swirlyness of the
particle (it will jiggle around a bit), the rotationspeed (positive or
negative) in radians per second, and the scale (relative to the starting
scale) of the particle.
@end itemize

In addition you can use @samp{iParticleState}.

@subsubheading Object Loader

Also see the general documentation for particle systems for other recognized
keywords.  @xref{MeshObject PartSys}.

@table @code
@item RECTPARTICLES
Set the width and height of the particles rectangular shape.
@item REGULARPARTICLES
Set the number of sides and a radius of the regular shaped particles.
@item TOTALTIME
Set the maximum age in msec.
@item LIGHTING
Disable or enable lighting for the particles
@item NUMBER
Set the number of particles
@item STARTPOS
Give an EMIT object for starting position.
@item STARTSPEED
Give the starting speed EMIT.
@item STARTACCEL
Give the starting acceleration EMIT.
@item ATTRACTORFORCE
Give the attractor force value.
@item ATTRACTOR
Give the EMIT that makes attracting points (per particle).
@item AGING
Give a age time, colour red, colour green, colour blue, alpha, swirl, 
rotationspeed and scale. 

@item EMITFIXED
Fixed (x, y, z) emitter.
@item EMITBOX
Box emitter, min x,y,z, max x,y,z.
@item EMITSPHERE
Sphere emitter, origin x,y,z, min, max.
@item EMITCONE
Cone emitter, start x,y,z, elevation, azimuth, aperture, min,max radius.
@item EMITMIX
Use several EMITMIX keywords in a row to create a mix with several EMITs.
Inside each EMITMIX, WEIGHT(value) can be used to set the weight.
@item EMITLINE
Line emitter, start, end point.
@item EMITCYLINDER
Cylinder emitter, start, end point, min, max distance.
@item EMITCYLINDERTANGENT
CylinderTangent emitter. Give start, end point, min, max speed.
@item EMITSPHERETANGENT
SphereTangent emitter. Give origin, min, max speed.
@end table
