@c -*-texinfo-*-
@node Feature List, Where to Get, DocGuide, CS Introduction
@section Feature List
@cindex Features

The first feature to mention here is that Crystal Space is an Open Source
project (or a Free Software project, depending on your religion) that is
freely available under the @sc{gnu} Lesser General Public License
(@sc{gnu lgpl}). @xref{License}. This means a number of things for developers,
but perhaps most important is that any program you write may freely link to the
Crystal Space libraries.

The second important feature of Crystal Space is that it is written to run
under a wide variety of hardware and software platforms. As of this writing
Crystal Space has been known to run on the following systems. Note that if a
system is listed here it does not necessarily mean that it is 100% supported:

@itemize @bullet
@item
Windows (Windows 9x/NT/ME/2000/XP)

@item
Unix (Linux, FreeBSD, etc.)

@item
MacOS/X
@end itemize

@noindent
Here are some of just some of Crystal Space's features in no particular order.
Whenever there is some documentation on the subject this is marked after
the feature. The most useful documentation comes first.

@c this used to be listed by library and plug-in, but I found that organization
@c redundant after looking at some other sections of the documentation,
@c namely the directory hierarchy section

@itemize @bullet
@item
Geometric utility library with handy classes such as 2D and 3D vectors,
matrices, transforms, quaternions, kdtree, axis aligned and oriented bounding
box routines, rectangle subdivision, @dots{}. @xref{csGeom}.

@item
General utility library with stuff like templated arrays, smart pointer,
hashmap, object registry, plugin manager, radix sort, bit array, optimized
allocators, strings, @dots{}. @xref{csUtil}.

@item
Higher level tool library containing things like some example procedural
textures (plasma, fire, and water), full screen effects, collider support,
texture generation tools, @dots{}.

@item
Graphics library with simple utilities to do mipmapping, color quantization,
calculation of color gradients, simple bumpmapping, @dots{}.

@item
2D and 3D polygons

@item
Shared Class Facility @sc{scf}.  @xref{SCF}, @xref{Tutorial Introduction}.

@item
Smart Pointers. @xref{HOWTO Smart Pointers}.

@item
Flexible plug-in system. @xref{SCF}, @xref{HOWTO Create Your Own Plugin}.

@item
Virtual file system and transparent support for @sc{zip} files. @xref{VFS}.

@item
Configuration files. @xref{Configuration File}.

@item
Command-line parsing. @xref{Tutorial Introduction}.

@item
Event system.

@item
Full screen effects (fading, whiteout, etc).

@item
Procedural textures. @xref{ProcTextures}, @xref{Texture Mapping}.

@item
Level of Detail. @xref{Level of Detail}.

@item
Animated 3D models (3D sprites). @xref{Animation}.

@item
2D animations.

@item
MD3 to Crystal Space convertor. @xref{md32spr Tutorial}.

@item
CAL3D to Crystal Space exporter. @xref{caltocs Tutorial}.

@item
Crystal Space native windowing system. @xref{AWS}, @xref{CSWS}.

@item
2D canvases (OpenGL, DirectDraw, X11, CoreGraphics, Cocoa, null, memory, line)

@item
3D renderers (OpenGL, software, null, line). @xref{Graphics Drivers}.

@item
Playing @sc{avi} streams (@sc{rle}, DivX 4, OpenDivX) on a texture.

@item
Various image loaders (@sc{bmp}, @sc{gif}, @sc{jpg}, @sc{png}, @sc{sgi},
@sc{tga}, @sc{wal}).

@item
Portals and sectors. @xref{Portal Engine}.

@item
Lighting: static, pseudo-dynamic, dynamic, halos, shadows, radiosity.@*

@noindent
@xref{Lighting}. @xref{HOWTO Pseudo DynLight}.

@item
Bezier curves.

@item
Visibility culling based on kd-tree with coverage buffers (Dynavis).
@xref{Visibility Culling}.

@item
Multiple cameras. @xref{HOWTO Camera Movement}.

@item
Textures, materials, and shaders. @xref{Texture Mapping}.

@item
Optional isometric engine.

@item
Sound drivers (CoreAudio, @sc{oss}, and WaveOut). @xref{Sound Drivers}.

@item
Sound renderers (software, DirectSound 3D, @sc{eax}, aRts).
@xref{Sound Drivers}.

@item
Sound loaders (@sc{wav}, @sc{au}, @sc{iff}, @sc{aiff}, @sc{mod}, @sc{mp3},
@sc{ogg}). @xref{Sound Drivers}.

@item
Thing and other mesh objects. @xref{MeshObject}, @xref{MeshObject Thing},
@xref{HOWTO Create Thing}.

@item
2D and 3D sprites. @xref{MeshObject Spr3D}, @xref{MeshObject Spr2D}.

@item
Terrain engines. @xref{MeshObject TerrFunc}.

@item
Metaballs. @xref{MeshObject Metaball}.

@item
Particle systems (fire, explosions, rain, snow, spirals, fountain).
@xref{MeshObject PartSys}.

@item
Haze mesh (a bit like volumetric light). @xref{MeshObject Haze}.

@item
Pull-down console that you can integrate in your own games.
@xref{Config Console}.

@item
Network sockets. @xref{Network Drivers}.

@item
Collision detection (using @sc{rapid} or @sc{opcode}).
@xref{HOWTO Collision Detection}.

@item
Powerful sequence manager to control movement, animation and other
features in a world. @xref{Sequence Manager}.

@item
Bitmapped and vector fonts (freefont). @xref{HOWTO Use custom font}.

@item
Map file loader and converters. @xref{XML File Format},
@xref{Tutorial Simple Map}, @xref{Old Map File Format}.

@item
Scripting engine (python, perl, ...). @xref{Scripting Languages}.

@item
Skeletal animation. @xref{MeshObject Spr3D}.

@item
Object movement. @xref{HOWTO Mesh Movement}.

@item
Movie Recording plugin. @xref{HOWTO Recording Movies}.

@item
Debugging system
@end itemize

