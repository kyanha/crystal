@c -*-texinfo-*-
@node io_scene_cs First Steps, io_scene_cs Export Scenes, io_scene_cs Installing, Blender
@subsection First Steps

This section presents the main panel of the user interface of the @code{io_scene_cs}
add-on script.

@heading Main export panel

The main @samp{Crystal Space Export} panel is placed in the @samp{Render} context of the
@samp{Properties} (or @samp{Buttons}) window. Some other panels are also added in some
other contexts of the @samp{Properties} window, they will be presented later.

@picturess{content,io_scene_cs,io_scene_cs_interface}

The panel is composed of several buttons and controls to configure and run the exporter:

@itemize @bullet
@item
@strong{Export path}: path to the folder where the generated files will be put.
@item
@strong{Export}: export the scene to the specified path.
@item
@strong{Export and Run}: export the scene then run it in Crystal Space's @samp{walktest}.
@item
@strong{Console}: enable the @code{-console} flag of @samp{walktest}
@item
@strong{Verbose}: enable the @code{-verbose=-scf} flag of @samp{walktest}
@item
@strong{Silent}: enable the @code{-silent} flag of @samp{walktest}
@end itemize

If the @samp{CRYSTAL} environment variable is not defined or pointing to a directory
containing the @samp{walktest} application, then most of these controls are not present and
are replaced instead by the comment @samp{'walktest' isn't available!}. See the
@ref{HOWTO Setting the CRYSTAL environment variable, dedicated section} in order to solve this.

@heading The 'Export' button

When you click on the @strong{Export} button, Blender will start working and writing
informations about the export process on the
@url{http://wiki.blender.org/index.php/Doc:2.6/Manual/Interface/Window_system/Console_window, Blender console},
until the final message: @samp{EXPORTING complete}. The files generated should have been
placed in the given export folder.

The structure of the files is the following:

@itemize @bullet
@item
a @file{world} file containing your scene is created at the root of the export directory
@item
a @file{textures} directory is created in the export directory, and all texture files are
put in it
@item
a @file{factories} directory is created in the export directory, and all library files (i.e.
the mesh factories) are put in it
@end itemize

If you want to visualize the exported objects, then you can open the library files with
@samp{viewmesh}. Take care for that that the path where are your files should be mounted
correctly in the @ref{VFS, Virtual File System} of Crystal Space (@sc{vfs}).

In order to mount the VFS path, use the following command:

@itemize @bullet
@item
@code{viewmesh -R=<export_path> factories/<library_file>}
@end itemize

@heading The 'Export and Run' button

This button allows the user to either launch the export process and view the result in
the @ref{Walktest, @samp{walktest}} application.

In order to work correctly, your scene needs:

@itemize @bullet
@item
at least one camera,
@item
at least one light lighting your objects,
@item
some objects below the camera, to be used as a roof and in order for the @samp{walktest}'s
camera to not fall into the void as soon as you start the map.
@end itemize

Once clicked on the @strong{Export and Run} button, the export process will start until
the status message: @strong{EXPORTING complete} appears on the Blender console. Shortly
after that, the @samp{walktest} window should appear (otherwise, check the Blender console
for some output message).

Using the arrow keys, you will be able to move around your scene. Using the @samp{8} key
you can deactivate the gravity and fly around. Note that @samp{walktest} has a lot of
different keys and options, so you may want to have a look at the
@ref{Walktest, dedicated manual page} for that.

@subsubheading If the 'walktest' window fails to open

@itemize @bullet
@item
Check that there are no errors in the
@url{http://wiki.blender.org/index.php/Doc:2.6/Manual/Interface/Window_system/Console_window, Blender console window}.
@end itemize

@subsubheading If the 'walktest' screen is kept black

@itemize @bullet
@item
Check if there is a light, and if it is close enough to your geometry.
@item
It is also possible that since the gravity is activated by default in walktest, the
camera pans away from the set view too fast. Ensure that you press the @samp{8} key to
deactivate gravity, or that you added a floor below you camera.
@item
Check the console to ensure that your entire scene is being exported. Sometimes only the
camera will be exported hence you will only see black. If you have this problem select all
the objects in your scene (Hotkey @samp{A}) and then press @samp{Export and Run}.
@item
Check that the normals from the objects are pointing in the correct direction. If you made a
cube surrounding the player this usually means you need to reverse its normals (in Blender
and in Edit mode, press the hotkey @samp{W} then select @samp{Flip Normals}).
@end itemize


@node io_scene_cs Export Scenes, io_scene_cs Export Genmesh, io_scene_cs First Steps, Blender
@subsection Exporting Scenes

This section presents the main objects and files that are created when a Blender scene is
exported.

@itemize @bullet
@item @strong{Sectors}

Crystal Space maps can be split in several sectors linked by portals. This should be defined
through @url{http://wiki.blender.org/index.php/Doc:2.6/Manual/Interface/Scenes, Blender's scenes},
with one scene per sector. This feature is however still in developement and the
@code{io_scene_cs} add-on can currently support only one scene.

@item @strong{Cameras}

All cameras in Blender will be exported as camera positions (i.e. iCameraPosition objects)
in the Crystal Space @file{world} file. Currently, the positions will appear in the inverse
order than they are created, although being ordered alphabetically would be better.

@item @strong{Lights}

All lamps in Blender will be exported as lights in Crystal Space. Whatever the lamp type used
in Blender, the lamp will be exported as a point light.

The parameters that get exported from a lamp are the distance (radius), the colour (RGB
components) and the energy (brightness). The attenuation type and the other lamp properties
are ignored.

@item @strong{Meshes and Mesh factories}

All the mesh objects that are present in the Blender scene will be exported, either as a
@ref{io_scene_cs Export Genmesh, static mesh} or an @ref{io_scene_cs Export Animesh, animated mesh}.
For each different mesh, a file containing the definition of the mesh factory will be generated
in the @file{factories} directory. Each instance of the mesh will get an entry in the
@file{world} file.

You can parent objects in Blender and they will be exported as similar object hierachies
in Crystal Space. 

@item @strong{Materials and Textures}

Blender has a complex system for materials and textures, e.g. with the
@url{http://wiki.blender.org/index.php/Doc:2.6/Manual/Composite_Nodes, node composition system}
allowing to modify dynamically images and material properties. This system is very powerful
in an offline rendering, but is not always suited for real-time rendering such as what is
made in Crystal Space.

The current status of the material exporting functionalities of the @code{io_scene_cs}
add-on are also simply quite poor, and most Blender parameters are not yet exported.

@end itemize


@node io_scene_cs Export Genmesh, io_scene_cs Export Animesh, io_scene_cs Export Scenes, Blender
@subsection Exporting Static Meshes

If a Blender mesh object has neither an armature nor any shape keys, then it will be
exported as a @ref{MeshObject Genmesh, Genmesh Mesh Object}. In the other case, then it
will be @ref{io_scene_cs Export Animesh, exported as an animated mesh}.

@subsubheading Exported Genmesh Data

The data of the mesh that are exported are

@itemize @bullet
@item
the vertices of the mesh. Note that because of the triangulation process made, the count
of vertices once exported in Crystal Space will generally be greater than the one in the
Blender mesh.
@item
the faces of the mesh. Blender can use faces with any number of vertices while Crystal
Space only uses triangles, therefore the faces are triangulated during the export process.
@item
the submeshes of the mesh. Every different Blender material that is actually used by some
face of the mesh will correspond to a different submesh in the Genmesh. Every face that is
exported will be placed in the corresponding submesh. 
@item
the UV coordinates
@item
the normals
@item
the vertex colors
@end itemize

All this data is put in the corresponding library file in the @file{factories} directory.

@subsubheading Instanced Meshes

Instanced meshes can be defined using the @samp{Crystal Mesh Group} panel in the @samp{Object}
context of the @samp{Properties} window.

@subsubheading Warning on the Blender Object Modifiers

The Blender object modifiers that can be defined in the @samp{Object Modifier}
context of the @samp{Properties} window are not supported by the @code{io_scene_cs} add-on.
Please make sure that all modifiers are either applied or removed before exporting your mesh.


@node io_scene_cs Export Animesh, io_scene_cs ToDo, io_scene_cs Export Genmesh, Blender
@subsection Exporting Animated Meshes

If a Blender mesh object contains either an armature or any shape keys, then it will be
exported as an animated mesh. In the other case, then it
will be @ref{io_scene_cs Export Genmesh, exported as a static mesh}.

The data that is exported is the same as the one exported with static meshes, plus the data
relevant for the animation (that will be presented in this section).

All this data will be split in two different files in the @file{factories} directory:

@itemize
@item
the animated mesh factory, in a file of the same name than the Blender mesh.
@item
the skeleton factory and the animations, in a file of the same name than the Blender mesh
plus the @samp{_rig} postfix.
@end itemize

@subsubheading Submeshes

Faces that uses a different material are put in a separate submesh, similarly to the
@ref{io_scene_cs Export Genmesh, static meshes}.

@subsubheading Morph Targets

The Blender shape keys (i.e. variations of the positions of the vertices of the mesh)
are exported as Crystal Space's morph targets.

The shape key with the name @samp{Basis} is selected as the default position of the
vertices (i.e. the main @samp{vertex} render buffer of the animated mesh). All other shape
keys are exported as a different morph target.

@subsubheading Skeleton and Bone Influences

The Blender armature of the mesh, if any, is exported as the Crystal Space's skeleton
of the animated mesh. Along with the skeleton, the Blender weight map of the mesh
(defining in which proportion each vertex is influenced by the motion of the bones)
is exported as the bone influences of the animated mesh.

@subsubheading Animations

All the keyframe animations of the mesh are exported too.

@emph{Warning}: Only the positional and rotational components of the key frames are
exported. The Crystal Space's animated mesh doesn't (yet) support morphing and scaling
components.

@emph{Warning}: The Blender object constraints defined on the skeleton will not be
exported correctly. So make sure to disable any constraint first (in the
@samp{Object Constraints} context of the @samp{Properties} window, when the skeleton
is selected).

@subsubheading Sockets

With mesh sockets you can mount meshes. Child mesh will follow parent's animation. You can use it for example for keeping weapon or ride a horse. At this moment you can use socket only with animesh+skeletal animation. 

To make a socket you need dummy mesh (for example small sphere or box - size doesn't matter, only center of the mesh matters) then set position for it. Now parent it to bone. To do it you need set armature to pose mode, select dummy socket mesh, keep SHIFT, select bone, CTRL+P, 'Make parent to: Bone'.

Sockets are exported in the same library file as the animesh factory. Each socket defines a name, a bone and the transformation to apply to an object we want to attach to that bone.


@node io_scene_cs ToDo, , io_scene_cs Export Animesh, Blender
@subsection ToDo

@itemize @bullet
@item
definitions of materials and exports of texture files are frequently incomplete
@item
the consistency of 'world' file is not guaranteed
@item
lamps are exported as simple point light sources
@item
erroneous normals: non duplicated Blender vertices on surface edges lead to inconsistent cs normals
@item
no support for trees of armatures: only the root armature is exported, not the children ones
@item
no support for double sided faces: they are exported as single sided faces
@item
no support for inverse kinematics: keyframes will be missing for bones animated by IK
@item
no support for groups of animated meshes
@item
no support for portals and sectors
@item
no terrain support
@item
no colliders support
@item
no support for scaling modifications during animations (only translations and rotations are exported)
@item
lack of a configurable b2.5cs export panel (e.g. selection of objects and properties to export, export of normals with or without vertex duplication)
@end itemize

