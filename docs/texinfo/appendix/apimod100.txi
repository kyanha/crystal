@c -*-texinfo-*-
@node Release Notes 100, Release Notes 98, Release Notes, Release Notes
@appendixsec Release Notes from 0.98 to 1.00
@cindex Release Notes

This section documents the major changes between versions 0.98 and 1.00 of
Crystal Space.

@subheading @code{csArray<>} Index and Size Type Change

@code{csArray<>} has been changed to use the @code{size_t} instead of
@samp{int} for array sizes and indices.  Probably, the most significant
semantic difference of this change is that @samp{size_t} is @emph{unsigned} as
opposed to @samp{int} which is @emph{signed}.

@strong{Read this paragraph carefully.} In actual code, this change may result
in nothing more than simple-looking compiler warnings. However, it may have
caused @emph{semantics} to change subtly.

This has the greatest impact in the following areas discussed below.

@subsubheading Iterating Over @code{csArray<>} Contents

For this purpose, usually, @samp{int} typed variables were used for keeping
track of the index of the current item of an array iteration.  Fixing forward
iteration over a @code{csArray<>} to instead use @samp{size_t} is simple:

@example
csArray<@dots{}> a;
for (int i = 0, n = a.Length(); i < n; i++)
@{
  @dots{}
@}
@end example

@noindent
Is changed to:

@example
@dots{}
for (size_t i = 0, n = a.Length(); i < n; i++)
@dots{}
@end example

Backward iteration is a bit more problematic. As mentioned before, 
@samp{size_t} is unsigned, so you do not have negative values. This can be a
problem in constructs like:

@example
csArray<@dots{}> a;
for (int i = a.Length() - 1; i >= 0; i--)
@{
  @dots{}
@}
@end example

If the @samp{int} is changed simply to a @samp{size_t}, this 
@code{for}-loop misbehaves unexpectedly. When @samp{i} becomes 0, the body 
of the loop is executed correctly. However, decrementing @samp{i} will 
@strong{not} cause @samp{i} to have a negative value---after all, @samp{size_t}
is unsigned. Instead, decrementing will make @samp{i} wrap around from 0 to
0xffffffff (on 32-bit machines). Clearly, this is greater
than 0, effectively causing an infinite loop. The same thing also happens when
@samp{a} has no items (i.e. @samp{a.Length() == 0}). Here the
-1 in the initialization of @samp{i} causes wrap-around.

Possible solutions include:

@itemize @bullet
@item
Use an @code{int}-typed counter variable and cast the array length to
@samp{int}.  This is not entirely elegant, but it does the job in most cases.

@item
Re-write the loop to deal properly with the unsigned nature of @samp{size_t}:

@example
csArray<@dots{}> a;
for (size_t i = a.Length(); i-- > 0;)
@{
  @dots{}
@}
@end example

This code does the same as the @samp{int} version above, iterating from 
@samp{a.Length() - 1} to 0, inclusively. It also correctly works
in the case @samp{a.Length() == 0}. The ``trick'' is to place the 
modification of @samp{i} as a post-decrement in the loop condition. This 
way, as soon as @samp{i} becomes 0, the loop is terminated. The 
post-decrement ensures that @samp{i} has the expected value in the loop body.

@end itemize

@subsubheading Searching

Functions like @code{csArray<>::FindSortedKey()} and @code{csArray<>::Find()}
used to return -1 to signify that an item was not found.  This is still the
case, but with a twist.  Now, @samp{(size_t)-1} is returned.  For convenience,
a constant, @samp{csArrayItemNotFound}, has been added, which has this exact
value.  It can be used in comparions to make it clear what is actually being
checked.

Apropros comparisons: Recall that @samp{size_t} is @emph{unsigned}, so checking
whether an index returned by @samp{FindSortedKey()} or @samp{Find()} is 
actually a valid index by testing with @samp{>= 0} no longer works since
@samp{(size_t)-1} is always @code{>= 0}. Replace such checks with tests of
equality against @samp{csArrayItemNotFound}:

@example
csArray<@dots{}> a;
int index = a.Find (@dots{});
if (index >= 0)
@{
  /* Item found */
  @dots{}
@}
else
@{
  /* Item not found */
  @dots{}
@}
@end example

Must be replaced with:

@example
csArray<@dots{}> a;
size_t index = a.Find (@dots{});
if (index != csArrayItemNotFound)
@{
  /* Item found */
  @dots{}
@}
else
@{
  /* Item not found */
  @dots{}
@}
@end example

@subheading Texture and Material Preparation

Texture and material preparation is now fully automatic. It is no longer
necessary to @dfn{prepare} a texture or a material before you can use it. It is
sufficient simply to register the texture or material. This means that the
following functions have been removed (and you can just remove invocations of
them from your applications if you used them):

@itemize @bullet
@item
@code{iMaterialHandle::Prepare()}
@item
@code{iTextureHandle::Prepare()}
@item
@code{iTextureManager::PrepareMaterials()}
@item
@code{iTextureManager::PrepareTextures()}
@end itemize

@subheading Input Definitions

The file @code{inpnames.h} in @code{csutil} has been renamed to
@code{inputdef.h} and the following functions have been removed:

@itemize @bullet
@item
@code{csTypeOfInputDef}
@item
@code{csParseKeyDef}
@item
@code{csGetKeyDesc}
@item
@code{csParseMouseDef}
@item
@code{csGetMouseDesc}
@item
@code{csParseJoystickDef}
@item
@code{csGetJoystickDesc}
@end itemize

These functions allowed you to convert a string such as @code{"Ctrl+A"},
@code{"JoystickX"} or @code{"Alt+Mouse1"} into values describing input events
and vice versa.

The correct way to do this is now to use @code{csInputDefinition} which is
defined in @code{inputdef.h}. The preferred way to convert a string to a
definition is to construct a @code{csInputDefinition} from a
@code{const char *}, and the preferred way to convert a definition back to a
string (perhaps constructed some other way) is with the @code{ToString} method.

However, there are static helper methods in @code{csInputDefinition} which
accept arguments in a similar way to the old functions, which perform the
work of instantiating the object for you:

@itemize
@item
@code{csInputDefinition::ParseKey}
@item
@code{csInputDefinition::GetKeyString}
@item
@code{csInputDefinition::ParseOther}
@item
@code{csInputDefinition::GetOtherString}
@end itemize

@subheading Pollution Reduction

The following global header files have been renamed in order to avoid possible
conflict with headers installed by other packages.

@itemize @bullet
@item
@code{platform.h} @result{} @code{csplatform.h}
@item
@code{qint.h} @result{} @code{csqint.h}
@item
@code{qsqrt.h} @result{} @code{csqsqrt.h}
@item
@code{volatile.h} @result{} @code{csconfig.h}
@end itemize

The following symbols have been renamed in order to avoid pollution of the
global namespace.

@itemize @bullet
@item
@code{QInt} @result{} @code{csQint()}
@item
@code{QInt8} @result{} @code{csQint8()}
@item
@code{QInt16} @result{} @code{csQint16()}
@item
@code{QInt24} @result{} @code{csQint24()}
@item
@code{qisqrt} @result{} @code{csQisqrt()}
@item
@code{qsqrt} @result{} @code{csQsqrt()}
@item
@code{QRound} @result{} @code{csQround()}
@item
@code{COMP_BC} @result{} @code{CS_COMPILER_BCC}
@item
@code{COMP_GCC} @result{} @code{CS_COMPILER_GCC}
@item
@code{COMP_VC} @result{} @code{CS_COMPILER_MSVC}
@item
@code{DO_MMX} @result{} @code{CS_USE_MMX}
@item
@code{DO_NASM} @result{} @code{CS_USE_NASM}
@item
@code{OS_DOS} @result{} @code{CS_PLATFORM_DOS}
@item
@code{OS_MACOSX} @result{} @code{CS_PLATFORM_MACOSX}
@item
@code{OS_UNIX} @result{} @code{CS_PLATFORM_UNIX}
@item
@code{OS_WIN32} @result{} @code{CS_PLATFORM_WIN32}
@item
@code{PROC_FOO} @result{} @code{CS_PROCESSOR_FOO} (where @samp{FOO} is
@samp{X86}, @samp{M68K}, etc.)
@item
@code{CS_PROCSIZE} @result{} @code{CS_PROCESSOR_SIZE}
@item
@code{WIN32_VOLATILE} @result{} @code{CS_WIN32_CSCONFIG}
@end itemize
