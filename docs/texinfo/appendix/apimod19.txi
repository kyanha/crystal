@c -*-texinfo-*-
@node API Modifications 19, API Modifications 18, API Modifications, API Modifications
@appendixsec @sc{api} Changes from 0.18 to 0.19
@cindex @sc{api} Changes

This section documents the major changes between versions 0.18 and 0.19 of of
Crystal Space.

@subheading @code{csObject}, @sc{rtti}, @sc{scf}

@@@@@@TODO

@subheading Platform Portability Encapsulation

The new macro @samp{CS_IMPLEMENT_APPLICATION} must now be invoked by exactly
one compilation unit of each application.  This macro encapsulates
platform-specific implementation details for any given platform.  For instance,
on Windows, this macro defines the @code{WinMain()} function required by all
Windows @sc{gui} applications.

The new macro @samp{CS_IMPLEMENT_PLUGIN} must now be invoked by exactly one
compilation unit of each plugin module.  This macro encapsulates
platform-specific implementation details for any given platform.  For instance,
on Windows, this macro defins the @code{DllMain()} function required by all
Windows @sc{dll} modules.

These macros alleviate the need to link applications with specially prepared
object files or libraries.  The summary below explains what this means for
various platforms.

@itemize @bullet
@item
Unix

No longer required to link plugin modules against the @file{dummy.o} file.

@item
Visual-C++

No longer required to link applications against Crystal Space's
@file{win32exe.lib} library.  No longer required to link plugin modules
(@sc{dll}'s) against the @file{win32dll.lib} library.  Also, the
@file{libwin32exe.dsp} and @file{libwin32dll.dsp} project files have been
removed.

@item
Mingw

No longer required to link applications with the @file{exeentry.o} object file.
No longer required to link plugin modules (@sc{dll}'s) with the
@file{dllentry.o} object file.

@item
@sc{os/2}

No longer required to link plugin modules with the @file{dllentry.o} object
file.
@end itemize

@subheading Image Loading
@cindex @code{csImageLoader}
@cindex @code{iImageIO}

@samp{csImageLoader} is gone and has now become a plugin which implements
the @code{iImageIO} interface. To use it you typically use the following
code:

@example
#include "igraphic/imageio.h"
@dots{}
iDataBuffer* buf = @dots{};
iImageIO* imgldr = CS_QUERY_PLUGIN (System, iImageIO);
imgldr->Load (buf->GetUint8 (), buf->GetSize (),
txtmgr->GetTextureFormat ());
@dots{}
imgldr->DecRef ();
@end example

@subheading Level Loading (csLoader)
@cindex @code{csLoader}
@cindex @code{iLoader}
@cindex Level Loading

At this moment the level loader is not yet a plugin but already
behaves like one. For that reason you still have to do:

@example
SCF_REGISTER_STATIC_LIBRARY (lvlload)
@end example

Somewhere in the beginning of your program (this is a declaration, put
it outside code).

Then make sure you have the level loader plugin by putting the following
in your config file:

@example
System.PlugIns.LevelLoader = crystalspace.level.loader
@end example

@noindent
Or else put the following line in your @code{main} routine right
before calling @code{csSystemDriver}'s @code{Initialize()} method:

@example
System->RequestPlugin("crystalspace.level.loader:LevelLoader");
@end example

@noindent
Then you can get the level loader with:

@example
iLoader* level_loader =
  CS_QUERY_PLUGIN_ID (System, CS_FUNCID_LVLLOADER, iLoader);
@end example

When you don't need it anymore you must call @code{level_loader->DecRef ()}.
Check the API reference to see what functions you can use on level_loader.
There are functions to load a map, textures, mesh objects, etc. Many of
these functions have been renamed as well.

@subheading Things are Mesh Objects
@cindex @code{csThing}
@cindex mesh objects
@cindex @code{iThing}
@cindex @code{iThingState}

@code{iThing} has been removed. Instead there is @code{iThingState}.
@@@@@@ TODO

@subheading Map File Changes

@@@@@@ TODO
@itemize @bullet
@item
@code{PLANE} @result{} @code{ADDON}
@item
@code{THING} @result{} @code{MESHOBJ}
@item
@code{SKY} @result{} @code{MESHOBJ + RENDPRI}
@item
@code{MESHOBJ} @result{} @code{MESHFACT} --- (for factories)
@item
@code{BEZIER} @result{} @code{ADDON}
@item
@code{MATERIALS}
@item
@code{RENDERPRIORITIES}
@item
@code{PLUGINS}
@end itemize

@subheading Sky Objects Gone

@@@@@@ TODO

@subheading Using the Engine as a Plugin
@cindex Engine Plugin
@cindex Plugin, Engine

It is now recommended to use the engine as a plugin. Linking directly
to the @file{csengine} library is still possible but strongly discouraged.
We will not be able to guarantee @sc{api} compatibility on this level.

Using the engine as a plugin means in the first loading the engine plugin
instead of linking to the @file{csengine} library.  You can do this with:

@example
System->RequestPlugin ("crystalspace.engine.core:Engine");
System->Initialize (argc, argv, NULL);
@dots{}
iEngine* engine = CS_QUERY_PLUGIN (System, iEngine);
@end example

You then use the engine through @sc{scf} interfaces.  Therefore, your programs
should include header files from @file{CS/include/iengine} rather than
@file{CS/include/csengine}.  Importing files from @file{CS/include/csengine}
is discourages.

@subheading Sectors Have No Polygons
@cindex @code{csSector}
@cindex @code{iSector}

Sectors can no longer contain polygons. All geometry is now represented
with mesh objects (see the section above about how to create csThing
mesh objects). To create the outer walls of a sector (i.e. the geometry
that used to go to the sector in 0.18 or earlier) you create a csThing
mesh object. In a world file this happens like this:

@example
SECTOR 'room' (
  MESHOBJ 'walls' (
    PLUGIN ('crystalspace.mesh.loader.thing')
    PARAMS (
      VERTEX (@dots{}) @dots{}
      POLYGON (@dots{}) @dots{}
    )
    ZFILL ()
    PRIORITY ('wall')
  )
  @dots{}
)
@end example

In code you can use @code{iEngine::CreateSectorWallsMesh()} like this:

@example
iMeshWrapper* mesh =
  engine->CreateSectorWallsMesh (sector, "walls");
@end example

@subheading Include Directory Changes
@cindex @sc{scf}

All @sc{scf} interfaces (class names starting with the letter @samp{i} such as
@samp{iPolygon3D}) have moved from @file{CS/include} to individual
subddirectories of @file{CS/include}.  A few brief examples:

@itemize @bullet
@item
@code{imeshobj.h} @result{} @code{imesh/object.h} and @code{iengine/mesh.h}
@item
@code{light.h} @result{} @code{iengine/light.h}
@item
@code{ipolygon.h} @result{} @code{imesh/thing/polygon.h}
@end itemize

The following new header directories exist:

@table @code
@item include/iengine
Everything related to the engine itself
(@code{view.h}, @code{camera.h}, @code{light.h}, @code{sector.h},
@code{engine.h}, @code{texture.h}, @dots{}).
@item include/igame
For the @file{csgame} plugin (@code{csgame.h}).
@item include/igeom
For the @file{csgeom} library (@code{clip2d.h}).
@item include/igraphic
For the @file{csgfx} library and the image loader
plugins (@code{image.h}, @code{imageio.h}, and @code{loader.h}).
@item include/imap
For the map loader and mesh object loaders and
savers (@code{parser.h}, @code{reader.h}, and @code{writer.h}).
@item include/imesh
For everything related to mesh objects and the
state interfaces of mesh objects (@code{object.h}, @code{spr3d.h},
@code{ball.h}, @code{thing/thing.h}, @code{thing/polygon.h}, @dots{}).
@item include/inetwork
For networking plugins (@code{driver.h} and @code{socket.h}).
@item include/isound
For sound (@code{listener.h}, @code{renderer.h}, @dots{}).
@item include/isys
Everything related to the system driver and its facilities (@code{event.h},
@code{evdefs.h}, @code{plugin.h}, @code{vfs.h}, and @code{system.h}).
@item include/iutil
For the @file{csutil} library (@code{string.h}, @code{object.h},
@code{config.h}, @dots{}).
@item include/ivideo
Everything for the 3D and 2D driver subsystems (@code{graph2d.h},
@code{graph3d.h}, @code{texture.h}, @code{fontserv.h}, @code{txtmgr.h},
@dots{}).
@item include/ivaria
Everything that does not fit anywhere else
(@code{collider.h}, @code{conin.h}, @code{conout.h}, @code{iso.h},
@code{keyval.h}, @code{script.h}, @dots{}).
@end table

@subheading Global @sc{api} Changes

All @sc{scf} macro names are now prefixed with @samp{SCF_} in order to avoid
polluting the global namespace.

@itemize @bullet
@item
@code{CONSTRUCT_EMBEDDED_IBASE} @result{} @code{SCF_CONSTRUCT_EMBEDDED_IBASE}
@item
@code{CONSTRUCT_IBASE} @result{} @code{SCF_CONSTRUCT_IBASE}
@item
@code{CREATE_INSTANCE} @result{} @code{SCF_CREATE_INSTANCE}
@item
@code{DECLARE_EMBEDDED_IBASE} @result{} @code{SCF_DECLARE_EMBEDDED_IBASE}
@item
@code{DECLARE_FACTORY} @result{} @code{SCF_DECLARE_FACTORY}
@item
@code{DECLARE_FAST_INTERFACE} @result{} @code{SCF_DECLARE_FAST_INTERFACE}
@item
@code{DECLARE_IBASE_EXT} @result{} @code{SCF_DECLARE_IBASE_EXT}
@item
@code{DECLARE_IBASE} @result{} @code{SCF_DECLARE_IBASE}
@item
@code{DEC_REF} @result{} @code{SCF_DEC_REF}
@item
@code{EXPORT_CLASS_DEP} @result{} @code{SCF_EXPORT_CLASS_DEP}
@item
@code{EXPORT_CLASS_TABLE_END} @result{} @code{SCF_EXPORT_CLASS_TABLE_END}
@item
@code{EXPORT_CLASS_TABLE} @result{} @code{SCF_EXPORT_CLASS_TABLE}
@item
@code{EXPORT_CLASS} @result{} @code{SCF_EXPORT_CLASS}
@item
@code{IMPLEMENTS_EMBEDDED_INTERFACE} @result{} @code{SCF_IMPLEMENTS_EMBEDDED_INTERFACE}
@item
@code{IMPLEMENTS_INTERFACE_COMMON} @result{} @code{SCF_IMPLEMENTS_INTERFACE_COMMON}
@item
@code{IMPLEMENTS_INTERFACE} @result{} @code{SCF_IMPLEMENTS_INTERFACE}
@item
@code{IMPLEMENT_EMBEDDED_IBASE_DECREF} @result{} @code{SCF_IMPLEMENT_EMBEDDED_IBASE_DECREF}
@item
@code{IMPLEMENT_EMBEDDED_IBASE_END} @result{} @code{SCF_IMPLEMENT_EMBEDDED_IBASE_END}
@item
@code{IMPLEMENT_EMBEDDED_IBASE_GETREFCOUNT} @result{}@*@code{SCF_IMPLEMENT_EMBEDDED_IBASE_GETREFCOUNT}
@item
@code{IMPLEMENT_EMBEDDED_IBASE_INCREF} @result{} @code{SCF_IMPLEMENT_EMBEDDED_IBASE_INCREF}
@item
@code{IMPLEMENT_EMBEDDED_IBASE_QUERY_END} @result{}@*@code{SCF_IMPLEMENT_EMBEDDED_IBASE_QUERY_END}
@item
@code{IMPLEMENT_EMBEDDED_IBASE_QUERY} @result{} @code{SCF_IMPLEMENT_EMBEDDED_IBASE_QUERY}
@item
@code{IMPLEMENT_EMBEDDED_IBASE} @result{} @code{SCF_IMPLEMENT_EMBEDDED_IBASE}
@item
@code{IMPLEMENT_FACTORY} @result{} @code{SCF_IMPLEMENT_FACTORY}
@item
@code{IMPLEMENT_IBASE_DECREF} @result{} @code{SCF_IMPLEMENT_IBASE_DECREF}
@item
@code{IMPLEMENT_IBASE_END} @result{} @code{SCF_IMPLEMENT_IBASE_END}
@item
@code{IMPLEMENT_IBASE_EXT_DECREF} @result{} @code{SCF_IMPLEMENT_IBASE_EXT_DECREF}
@item
@code{IMPLEMENT_IBASE_EXT_END} @result{} @code{SCF_IMPLEMENT_IBASE_EXT_END}
@item
@code{IMPLEMENT_IBASE_EXT_GETREFCOUNT} @result{} @code{SCF_IMPLEMENT_IBASE_EXT_GETREFCOUNT}
@item
@code{IMPLEMENT_IBASE_EXT_INCREF} @result{} @code{SCF_IMPLEMENT_IBASE_EXT_INCREF}
@item
@code{IMPLEMENT_IBASE_EXT_QUERY_END} @result{} @code{SCF_IMPLEMENT_IBASE_EXT_QUERY_END}
@item
@code{IMPLEMENT_IBASE_EXT_QUERY} @result{} @code{SCF_IMPLEMENT_IBASE_EXT_QUERY}
@item
@code{IMPLEMENT_IBASE_EXT} @result{} @code{SCF_IMPLEMENT_IBASE_EXT}
@item
@code{IMPLEMENT_IBASE_GETREFCOUNT} @result{} @code{SCF_IMPLEMENT_IBASE_GETREFCOUNT}
@item
@code{IMPLEMENT_IBASE_INCREF} @result{} @code{SCF_IMPLEMENT_IBASE_INCREF}
@item
@code{IMPLEMENT_IBASE_QUERY_END} @result{} @code{SCF_IMPLEMENT_IBASE_QUERY_END}
@item
@code{IMPLEMENT_IBASE_QUERY} @result{} @code{SCF_IMPLEMENT_IBASE_QUERY}
@item
@code{IMPLEMENT_IBASE} @result{} @code{SCF_IMPLEMENT_IBASE}
@item
@code{INC_REF} @result{} @code{SCF_INC_REF}
@item
@code{QUERY_INTERFACE_FAST} @result{} @code{SCF_QUERY_INTERFACE_FAST}
@item
@code{QUERY_INTERFACE_SAFE} @result{} @code{SCF_QUERY_INTERFACE_SAFE}
@item
@code{QUERY_INTERFACE} @result{} @code{SCF_QUERY_INTERFACE}
@item
@code{REGISTER_STATIC_CLASS_DEP} @result{} @code{SCF_REGISTER_STATIC_CLASS_DEP}
@item
@code{REGISTER_STATIC_CLASS} @result{} @code{SCF_REGISTER_STATIC_CLASS}
@item
@code{REGISTER_STATIC_LIBRARY} @result{} @code{SCF_REGISTER_STATIC_LIBRARY}
@end itemize

Macro names related to @code{iSystem::Printf()} are now prefixed with
@samp{CS_} in order to avoid polluting the global namespace.

@itemize
@item
@code{MSG_INTERNAL_ERROR} @result{} @code{CS_MSG_INTERNAL_ERROR}
@item
@code{MSG_FATAL_ERROR} @result{} @code{CS_MSG_FATAL_ERROR}
@item
@code{MSG_WARNING} @result{} @code{CS_MSG_WARNING}
@item
@code{MSG_INITIALIZATION} @result{} @code{CS_MSG_INITIALIZATION}
@item
@code{MSG_CONSOLE} @result{} @code{CS_MSG_CONSOLE}
@item
@code{MSG_STDOUT} @result{} @code{CS_MSG_STDOUT}
@item
@code{MSG_DEBUG_0} @result{} @code{CS_MSG_DEBUG_0}
@item
@code{MSG_DEBUG_1} @result{} @code{CS_MSG_DEBUG_1}
@item
@code{MSG_DEBUG_2} @result{} @code{CS_MSG_DEBUG_2}
@item
@code{MSG_DEBUG_0F} @result{} @code{CS_MSG_DEBUG_0F}
@item
@code{MSG_DEBUG_1F} @result{} @code{CS_MSG_DEBUG_1F}
@item
@code{MSG_DEBUG_2F} @result{} @code{CS_MSG_DEBUG_2F}
@end itemize

Plugin management macro names are now prefixed with @samp{CS_} in order to
avoid polluting the global namespace.

@itemize
@item
@code{QUERY_PLUGIN} @result{} @code{CS_QUERY_PLUGIN}
@item
@code{QUERY_PLUGIN_ID} @result{} @code{CS_QUERY_PLUGIN_ID}
@item
@code{QUERY_PLUGIN_CLASS} @result{} @code{CS_QUERY_PLUGIN_CLASS}
@item
@code{LOAD_PLUGIN} @result{} @code{CS_LOAD_PLUGIN}
@item
@code{_LOAD_PLUGIN} @result{} @code{_CS_LOAD_PLUGIN}
@end itemize

Macros for classifying events are now prefixed with @samp{CS_} in order to
avoid polluting the global namespace.

@itemize
@item
@code{IS_KEYBOARD_EVENT} @result{} @code{CS_IS_KEYBOARD_EVENT}
@item
@code{IS_MOUSE_EVENT} @result{} @code{CS_IS_MOUSE_EVENT}
@item
@code{IS_JOYSTICK_EVENT} @result{} @code{CS_IS_JOYSTICK_EVENT}
@item
@code{IS_NETWORK_EVENT} @result{} @code{CS_IS_NETWORK_EVENT}
@end itemize

Methods in many classes and @sc{scf} interfaces have been renamed in order to
improve naming consistency throughout the project.
The following method names changes follow the pattern where
@code{GetNumSomething()} or @code{GetNumberSomething()} became
@code{GetSomethingCount()}.

@itemize @bullet
@item
@code{GetMiniBspNumVerts()} @result{} @code{GetMiniBspVertexCount()}
@item
@code{GetNumActions()} @result{} @code{GetActionCount()}
@item
@code{GetNumberAging()} @result{} @code{GetAgingCount()}
@item
@code{GetNumberEmitters()} @result{} @code{GetEmitterCount()}
@item
@code{GetNumberMetaBalls()} @result{} @code{GetMetaBallCount()}
@item
@code{GetNumberParticles()} @result{} @code{GetParticleCount()}
@item
@code{GetNumCameraPositions()} @result{} @code{GetCameraPositionCount()}
@item
@code{GetNumChars()} @result{} @code{GetCharCount()}
@item
@code{GetNumCollections()} @result{} @code{GetCollectionCount()}
@item
@code{GetNumCollisionPairs()} @result{} @code{GetCollisionPairCount()}
@item
@code{GetNumCurves()} @result{} @code{GetCurveCount()}
@item
@code{GetNumCurveVertices()} @result{} @code{GetCurveVertexCount()}
@item
@code{GetNumDimensions()} @result{} @code{GetDimensionCount()}
@item
@code{GetNumEdges()} @result{} @code{GetEdgeCount()}
@item
@code{GetNumElements()} @result{} @code{GetElementCount()}
@item
@code{GetNumFonts()} @result{} @code{GetFontCount()}
@item
@code{GetNumFormats()} @result{} @code{GetFormatCount()}
@item
@code{GetNumFrames()} @result{} @code{GetFrameCount()}
@item
@code{GetNumMaterials()} @result{} @code{GetMaterialCount()}
@item
@code{GetNumMeshFactories()} @result{} @code{GetMeshFactoryCount()}
@item
@code{GetNumMeshObjects()} @result{} @code{GetMeshObjectCount()}
@item
@code{GetNumNormals()} @result{} @code{GetNormalCount()}
@item
@code{GetNumObjects()} @result{} @code{GetObjectCount()}
@item
@code{GetNumPalEntries()} @result{} @code{GetPalEntryCount()}
@item
@code{GetNumPlanes()} @result{} @code{GetPlaneCount()}
@item
@code{GetNumPlugIns()} @result{} @code{GetPlugInCount()}
@item
@code{GetNumPoints()} @result{} @code{GetPointCount()}
@item
@code{GetNumPolygons()} @result{} @code{GetPolygonCount()}
@item
@code{GetNumPolyTxtPlanes()} @result{} @code{GetPolyTxtPlaneCount()}
@item
@code{GetNumRepeats()} @result{} @code{GetRepeatCount()}
@item
@code{GetNumShadows()} @result{} @code{GetShadowCount()}
@item
@code{GetNumSpokes()} @result{} @code{GetSpokeCount()}
@item
@code{GetNumTexels()} @result{} @code{GetTexelCount()}
@item
@code{GetNumTextureLayers()} @result{} @code{GetTextureLayerCount()}
@item
@code{GetNumTextures()} @result{} @code{GetTextureCount()}
@item
@code{GetNumTriangles()} @result{} @code{GetTriangleCount()}
@item
@code{GetNumVertices()} @result{} @code{GetVertexCount()}
@item
@code{GetNumVertsToLight()} @result{} @code{GetVertexToLightCount()}
@item
@code{GetStaticNumSamples()} @result{} @code{GetStaticSampleCount()}
@item
@code{NumVertices()} @result{} @code{GetVertexCount()}
@item
@code{ReportNumberTriangles()} @result{} @code{ReportTriangleCount()}
@item
@code{SetNumber()} @result{} @code{SetCount()}
@item
@code{SetNumberMetaBalls()} @result{} @code{SetMetaBallCount()}
@item
@code{SetNumberParticles()} @result{} @code{SetParticleCount()}
@item
@code{SetNumEdges()} @result{} @code{SetEdgeCount()}
@item
@code{SetNumPolygons()} @result{} @code{SetPolygonCount()}
@item
@code{SetNumSpokes()} @result{} @code{SetSpokeCount()}
@item
@code{SetNumVertices()} @result{} @code{SetVertexCount()}
@item
@code{Update_Num()} @result{} @code{UpdateCount()}
@end itemize

The prefix @samp{cs} was added to the following list of functions, and their
names were also normalized.

@itemize @bullet
@item
@code{ByteSwap16bit()} @result{} @code{csByteSwap16bit()}
@item
@code{ByteSwap16bitBuffer()} @result{} @code{csByteSwap16bitBuffer()}
@item
@code{ByteSwap32bit()} @result{} @code{csByteSwap32bit()}
@item
@code{ByteSwap32bitBuffer()} @result{} @code{csByteSwap32bitBuffer()}
@item
@code{Combinations()} @result{} @code{csCombinations()}
@item
@code{expandname()} @result{} @code{csExpandName()}
@item
@code{FindNearestPowerOf2()} @result{} @code{csFindNearestPowerOf2()}
@item
@code{fnamematches()} @result{} @code{csFilenameMatches()}
@item
@code{fSquare()} @result{} @code{csSquareFloat()}
@item
@code{fSwap()} @result{} @code{csSwapFloat()}
@item
@code{GenerateHalo()} @result{} @code{csGenerateHalo()}
@item
@code{GenerateNova()} @result{} @code{csGenerateNova()}
@item
@code{get_token()} @result{} @code{csGetToken()}
@item
@code{get_token_float()} @result{} @code{csGetTokenFloat()}
@item
@code{get_token_int()} @result{} @code{csGetTokenInt()}
@item
@code{IsPowerOf2()} @result{} @code{csIsPowerOf2()}
@item
@code{iSwap()} @result{} @code{csSwapInt()}
@item
@code{RndNum()} @result{} @code{csRndNum()}
@item
@code{ScanStr()} @result{} @code{csScanStr()}
@item
@code{skip_token()} @result{} @code{csSkipToken()}
@item
@code{splitpath()} @result{} @code{csSplitPath()}
@item
@code{strnew()} @result{} @code{csStrNew()}
@end itemize

@subheading @code{csfx} Library Renamed
@cindex @code{csfx} Library
@cindex @code{cstool} Library

The @samp{csfx} library was renamed to @samp{cstool}.

@subheading @code{csobject} library removed
@cindex @code{csutil} Library
@cindex @code{csobject} Library

The @file{csobject} library has been removed. All files in that
library have moved to @file{csutil}.

@subheading @code{csCollider}
@cindex @code{csCollider}
@cindex @code{csColliderWrapper}

The @samp{csCollider} facility moved from @samp{csengine} to @samp{cstool} and
was renamed to @samp{csColliderWrapper}.

@subheading Key/Node Mechanism
@cindex @code{csKeyValuePair}

The @samp{csKeyValuePair} class moved from @file{csengine} to @file{cstool}.

@subheading System Driver Variables

The following instance variables in @samp{csSystemDriver} are now private and
are slated for removal:

@itemize @bullet
@item
@code{Config}
@item
@code{VFS}
@item
@code{G3D}
@item
@code{G2D}
@item
@code{Sound}
@item
@code{NetDrv}
@item
@code{Console}
@item
@code{MotionMan}
@end itemize

In most cases, applications should now maintain these variables themselves
rather than relying upon the system driver to do so.  Currently, in the case of
@samp{VFS}, code can invoke the @code{CS_QUERY_PLUGIN()} macro to obtain a
pointer to the shared @sc{vfs} instance.  For example:

@example
iSystem* sys = @dots{};
iVFS* vfs = CS_QUERY_PLUGIN (sys, iVFS);
@end example

@subheading @sc{ddg} Terrain Engine Removed
@cindex @sc{ddg} Terrain Engine

The @sc{ddg} landscape engine which used to be featured in Crystal Space has
been removed and was replaced with a simpler landscape engine, but one which is
better integrated with the project.

@subheading Miscellaneous Changes
@cindex @code{iPortal}
@cindex @code{csMeshWrapper}

Renamed @code{iPortal::GetPortal()} to @code{GetSector()} and
@code{iPortal::SetPortal()} to @code{SetSector()}.

Removed @code{csMeshWrapper::GetChildren()}.  Instead use
@code{csMeshWrapper::AddChild()} and @code{csMeshWrapper::RemoveChild()}.
