@c -*-texinfo-*-
@node API Modifications 98, API Modifications 96, API Modifications, API Modifications
@appendixsec @sc{api} Changes from 0.96 to 0.98
@cindex @sc{api} Changes

This section documents the major changes between versions 0.96 and 0.98 of of
Crystal Space.

@subheading Polygon Texture Mapping Changes
@cindex @code{iPolygon3D}
@cindex @code{iPolyTexNone}
@cindex @code{iPolyTexGouraud}
@cindex @code{iPolyTexFlat}
@cindex @code{iPolyTexLightMap}
@cindex shading

The following interfaces have been removed: @code{iPolyTexNone},
@code{iPolyTexGouraud}, @code{iPolyTexFlat}, and  @code{iPolyTexLightMap}.
The combined @sc{api} from @code{iPolyTexNone} and the @code{iPolyTexLightMap}
have moved to @code{iPolygon3D} itself.

@code{iPolygon3D->SetTextureType()} and @code{GetTextureType()} have been
removed.  Instead use:

@itemize @bullet
@item
@code{iPolygon3D->EnableTextureMapping()}
@item
@code{iPolygon3D->IsTextureMappingEnabled()}
@end itemize

@code{iPolygon3D->GetPolyTexType()} has been removed.

The @samp{shading} keyword in polygons now accepts a boolean value
instead of @samp{NONE}, @samp{FLAT}, @samp{GOURAUD}, or @samp{LIGHTMAP}.
With this you can enable/disable lightmapping.

If you want gouraud shaded polygons you should use the @samp{genmesh}
mesh object plugin instead.

@subheading Bezier Curve Changes
@cindex Bezier Curve Changes
@cindex @code{iCurveTemplate}
@cindex @code{iCurve}
@cindex @code{iBezierState}
@cindex @code{iBezierFactoryState}

The notion of curve templates has been reworked. @code{iCurveTemplate} has
been removed and it's functionality has moved to @code{iCurve} itself.
As a consequence of this change the bezier addon loader has been removed.
Also curves have been seperated from the thing plugin and now live in the
'bezier' plugin. So a curve like this in the past:

@example
<addon>
  <plugin>crystalspace.mesh.loader.thing.bezier</plugin>
  <params>
    <name>b1</name>
    <material>mosaic</material>
    <v>0</v> <v>1</v> <v>2</v>
    <v>3</v> <v>4</v> <v>5</v>
    <v>6</v> <v>7</v> <v>8</v>
  </params>
</addon>
<meshfact name="tunnel">
  <plugin>crystalspace.mesh.loader.factory.thing</plugin>
  <params>
    <curvecenter x="0" y="0" z="0" />
    <curvescale>80</curvescale>
    <curvecontrol x="5" y="2" z="0" u="1" v="0" />
    @dots{}
    <curve name="bez">b1</curve>
  </params>
</meshfact>
@end example

@noindent
should now become (mark the new plugin line):

@example
<meshfact name="tunnel">
  <plugin>crystalspace.mesh.loader.factory.bezier</plugin>
  <params>
    <curvecenter x="0" y="0" z="0" />
    <curvescale>80</curvescale>
    <curvecontrol x="5" y="2" z="0" u="1" v="0" />
    @dots{}
    <curve name="b1">
      <material>mosaic</material>
      <v>0</v> <v>1</v> <v>2</v>
      <v>3</v> <v>4</v> <v>5</v>
      <v>6</v> <v>7</v> <v>8</v>
    </curve>
  </params>
</meshfact>
@end example

On the @sc{api} side nothing much changes except that when you use
the bezier mesh plugin you need to use @code{iBezierState} and
@code{iBezierFactoryState}.

The @code{iThingEnvironment} no longer has code to maintain bezier curve
templates.

@subheading iThingState and iPolygon3D Changes
@cindex @code{iThingState}
@cindex @code{iThingFactoryState}
@cindex @code{iPolygon3D}
@cindex @code{iObject}
@cindex @code{iMeshObject}
@cindex @code{iMeshObjectFactory}

@code{iPolygon3D} and @code{iThingState} no longer implement @code{iObject}.
So the @code{QueryObject()} function has been removed. Polygons can still
have names though. Added @code{SetName()} and @code{GetName()} for that.

@code{iPolygon3D} has been split in @code{iPolygon3D} and
@code{iPolygon3DStatic}. The static version contains all static data that
can be put in a factory. Several functions like
@code{iThingState->CreatePolygon()} will now return @code{iPolygon3DStatic}.

@code{iThingState} has been split in @code{iThingState} and
@code{iThingFactoryState}. A thing mesh no longer implements both a mesh
object and a mesh object factory. Instead things now work like usual
mesh objects where @code{iMeshObjectType->NewFactory()} creates a
factory that implements @code{iThingFactoryState} and
@code{iMeshObjectFactory->NewInstance()} creates an instance that implements
@code{iThingState}. The engine conveniance functions to create a thing
mesh will automatically create both the factory and mesh so you don't
have to worry about that. You can use @code{iThingState->GetFactory()}
from a thing mesh object to get the @code{iThingFactoryState} so you can
build the polygons. Note that @code{SCF_QUERY_INTERFACE} of
@code{iThingFactoryState} no longer works on a thing mesh object. You must
use @code{GetFactory}.

@subheading Polygon Planes
@cindex @code{iPolyTxtPlane}
@cindex @code{iThingEnvironment}

Polygon planes are removed. So it is no longer possible to use
the plane addon loader to define texture mapping for a polygon outside
of the polygon itself. To fix this you must specify all texture mapping
information in the @code{texmap} statement of the polygon. @file{map2cs}
now correctly outputs polygons like this (no longer outputs planes) and
@file{levtool} can convert old style maps to new format like this:

@code{iThingEnvironment} no longer has code to maintain polygon texture
mapping planes.

The plane loader and saver addons have been removed from the thing
loader plugin.

Removed @code{iPolyTxtPlane} interface. Added
@code{iPolygon3DStatic->GetTextureSpace()} function to get texture space
definition for polygon.

@example
levtool -planes yourmap.zip
@end example

@subheading Portal changes
@cindex @code{iPortal}

Several methods in @code{iPortal} have changed slightly. For example
@code{SetMirror} now expects a plane instead of a polygon.

@subheading Datatype changes

The @code{csSome}, @code{csConstSome} and @code{uint} types have been removed.
Use @code{void*}, @code{const void*} and @code{usigned int} instead.

@subheading csHashMap changes
@cindex @code{csHashMap}
@cindex @code{csHashIterator}
@cindex @code{csGlobalHashIterator}

@code{csHashIterator} can no longer iterate over all objects. To do that
you need to use @code{csGlobalHashIterator}.

@subheading Procedural textures

Instead of only built-in types, procedural textures have been moved into 
plugins. That means that the @code{<type>} token now works the same way
as the @code{<plugin>} token for meshes. That is, either specify a full
class ID (e.g. @code{crystalspace.proctex.loader.fire}), or a shortcut
specified in the @code{<plugins>} token of the world. To simulate the
old @code{<type>} behaviour, paste the following lines into a map's 
@code{<plugin>} section:

@example
<plugin name="dots">crystalspace.proctex.loader.dots</plugin>
<plugin name="fire">crystalspace.proctex.loader.fire</plugin>
<plugin name="water">crystalspace.proctex.loader.water</plugin>
<plugin name="plasma">crystalspace.proctex.loader.plasma</plugin>
@end example

This requires that you move the @code{<plugin>} block in front of the 
@code{<textures>} block, as otherwise the shortcuts won't be recognised.

The behaviour of procedural textures also differs as a material of the same
name was created along with the texture; this isn't the case any more, you
have to create a material which uses the procedural texture manually.

@subheading Mesh factories and iPolygonMesh

Some mesh factories used to support the querying of the @code{iPolygonMesh}
interface (e.g. Thing, Sprite3D). Although this may still work in some cases,
doing so is discouraged, and this feature is subject to be dropped without 
further notice. Instead, if you want the polygon mesh of a factory, query for
the @code{iObjectModel} interface instead and use one of the
@code{GetPolygonMeshXXX()} methods, depending on what you need (the interface
query returned the collision detection mesh.)

