@c -*-texinfo-*-
@node Directory Hierarchy, Makefile Structure, Dependencies, Anatomy
@section Directory Hierarchy
@cindex Directory Hierarchy
@cindex Hierarchy, Directory

This section is intended to explain the general CS directory structure. It
contains all directories, so maybe some will be missing, if you just
downloaded the files for a specific port like Linux or Win32.

Documentation written by Thomas Hieber (@email{thieber@@gmx.net}).

@emph{Note}: This section may be slightly outdated and missing a few
directories which have shown up since this description was written.

Crystal Space consists of the following directories:

@c --------------------------------------------------------------------------
@c Most directories should get a very short note and a link to their real
@c documentation.
@c --------------------------------------------------------------------------
@table @file
@item CS
The main directory for Crystal Space.  You can choose any path for it, as long
as it is supported by your operating system.  This is the path that all
compiled programs end up in.  This should be your working directory for these
executables.  Configuration files (@file{.cfg}) also reside here.

@item CS/apps
This is where all applications which ship with Crystal Space reside.
@xref{Applications}.

@table @file
@item CS/apps/tests
Applications for testing specific features of the project reside here.
@end table

@item CS/bin
Some scripts to support the build process on various platforms.

@item CS/data
Here you should place your levels like @file{large.zip}. You can use any
directory for this, so this is only a suggestion. If you change the name, you
must update the information in the configuration for the Virtual File System,
(@file{vfs.cfg}).

@item CS/docs
The root of the Crystal Space documentation hierarchy.  There are several
subdirectories.

@table @file
@item CS/docs/texinfo
Texinfo is the master format for all Crystal Space documentation.  This
directory and its subdirectories contain all of the Texinfo source and images
which comprise the Crystal Space manual.  Most users need not concern
themselves with this directory since the Texinfo documentation is
automatically converted to @sc{html} which is more accessible to the general
user.  Documentation writers and maintainers may be interested in this
directory.

@item CS/docs/html
This directory contains the @sc{html} conversion of the Texinfo Crystal Space
documentation.  Most users will want to look at @file{CS/docs/html/index.htm}
which resides here.

@item CS/docs/incoming
This is a temporary staging area for documentation which has not yet been
converted to Texinfo format.  Much of this documentation is useful and worth
perusing.
@end table

@item CS/include
Here are the headers that can be used from other modules. The path for the
headers reflect the structure of the modules in the lib directory. So for
furter explanation of a specific directory see the @file{CS/lib} section.

@item CS/libs
Here are all Modules provided be Crystal Space. Some modules will consist of
only one subdirectory in libs, some will be a combination of several
subdirectories.

@table @file
@item CS/libs/cs2d
The 2D driver component which manages creation of the Crystal Space window
used for rendering and also supports limited 2D drawing capabilities
(including 2D pixmaps).  It can be used standalone but it is currently very
limited and not very useful (may change in the future).  There are several
implementations of this component.  All are specific to some 3D Rasterizer
(for example, the OpenGL 3D Rasterizer on Unix requires the OpenGL 2D XLib
Driver).

@multitable @columnfractions .25 .75
@item @file{CS/libs/cs2d/common}
@tab Common code for 2D drivers

@item @file{CS/libs/cs2d/be}
@tab BeOS version

@item @file{CS/libs/cs2d/csdive}
@tab @sc{os}/2 version

@item @file{CS/libs/cs2d/ddraw}
@tab Win32 using Direct Draw

@item @file{CS/libs/cs2d/ddraw6}
@tab Win32 using Direct Draw (DirectX 6)

@item @file{CS/libs/cs2d/dosraw}
@tab @sc{dos}

@item @file{CS/libs/cs2d/ggi}
@tab Unix, using @sc{ggi}

@item @file{CS/libs/cs2d/softx}
@tab Unix, using X

@item @file{CS/libs/cs2d/svgalib}
@tab Unix, using @sc{svga}lib

@item @file{CS/libs/cs2d/mac}
@tab Macintosh

@item @file{CS/libs/cs2d/next}
@tab MacOS/X Server, OpenStep, NextStep

@item @file{CS/libs/cs2d/glid2dcommon}
@tab Common code for to Glide2 drivers

@item @file{CS/libs/cs2d/beglide2}
@tab Glide2X 2D driver for BeOS

@item @file{CS/libs/cs2d/macglide2}
@tab Glide2x 2D driver for Macintosh

@item @file{CS/libs/cs2d/unxglide2}
@tab Glide2x 2D driver for Unix

@item @file{CS/libs/cs2d/winglide2}
@tab Glide2x 2D driver for Win32

@item @file{CS/libs/cs2d/winglide3}
@tab Glide3x 2D driver for Win32

@item @file{CS/libs/cs2d/openglcommon}
@tab Common code for all OpenGL 2D drivers

@item @file{CS/libs/cs2d/openglbe}
@tab OpenGL 2D driver for BeOS

@item @file{CS/libs/cs2d/openglmac}
@tab OpenGL 2D driver for Macintosh

@item @file{CS/libs/cs2d/openglos2}
@tab OpenGL 2D driver for @sc{os}/2

@item @file{CS/libs/cs2d/openglwin}
@tab OpenGL 2D driver for Win32

@item @file{CS/libs/cs2d/openglx}
@tab OpenGL 2D driver for Unix/X Windows
@end multitable

@item CS/libs/cs3d
The 3D rasterizer component is required by the 3D engine but may also be
useful standalone.  It needs a 2D Driver.  There are currently several classes
of this component which correspond to particular @sc{api}s: software, OpenGL,
Glide, and Direct3D.  Some rasterizers are operating system independent, such
as OpenGL and software.  Some rasterizer techonolgy is only available on
certain operating systems, such as DirectX.

@multitable @columnfractions .25 .75
@item @file{CS/libs/cs3d/common}
@tab Common code for 3D rasterizers

@item @file{CS/libs/cs3d/direct3d5}
@tab Direct3D rasterizer using DirectX 5

@item @file{CS/libs/cs3d/direct3d6}
@tab Direct3D rasterizer using DirectX 6

@item @file{CS/libs/cs3d/glide2}
@tab 3D rasterizer using glide2x

@item @file{CS/libs/cs3d/glide3}
@tab 3D rasterizer using glide3x

@item @file{CS/libs/cs3d/opengl}
@tab 3D rasterizer using OpenGL

@item @file{CS/libs/cs3d/software}
@tab Software based rasterizer

@item @file{CS/libs/cs3d/line}
@tab A vector based rasterizer (draws only lines)

@item @file{CS/libs/cs3d/inf}
@tab The @emph{infinite} rasterizer (draws nothing at all)
@end multitable

@item CS/libs/csengine
The 3D engine is one of the corner stones of Crystal Space and also what
originally sparked the birth of the Crystal Space project.  It needs the 3D
rasterizer component to display output and also requires a number of other
libraries (csutil, csgeom, csgfxldr).  The 3D engine exports a number of
@sc{scf} interfaces to allow access through the @sc{scf} mechanism.

@multitable @columnfractions .25 .75
@item @file{CS/libs/csengine/colldet}
@tab Collision detection system

@item @file{CS/libs/csengine/light}
@tab Lighting system

@item @file{CS/libs/csengine/objects}
@tab Sprites and things

@item @file{CS/libs/csengine/polygon}
@tab Polygon related functionality
@end multitable

@item CS/libs/csgame
The Crystal Space Game library.  This is set of utility classes that focus on
creating a real game.  You can think of it, as an easier way to use Crystal
Space in your own games, at the cost of some flexibility.

@item CS/libs/csgeom
The geometry library.  Various geometry related functions and classes can be
found here: matrices, vectors, @sc{bsp} trees, clipper, planes, etc.

@item CS/libs/csgfxldr
The graphics loader library.  Routines to support loading various graphic file
formats and put them internally in the same format.  This library supports
@sc{jpg}, @sc{gif}, @sc{tga}, @sc{png}, and @sc{bmp}.

@item CS/libs/csinput
The input library (mouse, keyboard, joystick, etc.).

@item CS/libs/csnetdrv
Network drivers.  The only existing driver is a @sc{bsd} socket-based
@sc{tcp/ip} driver.

@item CS/libs/csobject
Hierarchy of Crystal Space independant classes, that are used as base for most
Crystal Space classes.  The main use for these classes is a system for
run-time type information and for management of attributes like names that can
dynamically be attached to objects at run-time.

@item CS/libs/csparser
A library which parses @sc{ascii} world files and imports the world into the
3D engine.

@item CS/libs/csscript
This library contains a very primitive scripting engine.  It is not very
powerful and needs to be replaced by something better.  However, it is still
used by some of the current levels.

@item CS/libs/cssnddrv
System dependent sound drivers.  There are currently drivers for Macintosh,
@sc{oss} (Linux), and Windows.

@multitable @columnfractions .25 .75
@item @file{CS/libs/cssnddrv/macsnd}
@tab Sounddriver for Macintosh

@item @file{CS/libs/cssnddrv/oss}
@tab Sounddriver for Unix

@item @file{CS/libs/cssnddrv/waveoutsd}
@tab Sounddriver for Win32
@end multitable

@item CS/libs/cssfxldr
Routines to support loading various sound file formats and put them internally
in the same format.  This library supports @sc{wav}, @sc{aiff}, @sc{au}, etc.

@multitable @columnfractions .25 .75
@item @file{CS/libs/cssfxldr/common}
@tab Code common to many sound loaders.
@end multitable

@item CS/libs/cssndrdr
System dependent sound renderers.

@multitable @columnfractions .25 .75
@item @file{CS/libs/cssndrdr/software}
@tab Software based sound renderer

@item @file{CS/libs/cssndrdr/a3d}
@tab 3D sound renderer for @sc{a3d}

@item @file{CS/libs/cssndrdr/ds3d}
@tab 3D sound renderer for Direct Sound 3D

@item @file{CS/libs/cssndrdr/eax}
@tab 3D sound renderer for @sc{eax}
@end multitable

@item CS/libs/cssys
All system dependent stuff (non-graphics and non-sound related) is in this
library.

@multitable @columnfractions .25 .75
@item @file{CS/libs/cssys/general}
@tab Code which may be shared between system drivers which can make use of it.

@item @file{CS/libs/cssys/be}
@tab BeOS

@item @file{CS/libs/cssys/djgpp}
@tab @sc{dos} using the @sc{djgpp} compiler

@item @file{CS/libs/cssys/wcc}
@tab @sc{dos} using the Watcom compiler

@item @file{CS/libs/cssys/mac}
@tab Macintosh

@item @file{CS/libs/cssys/next}
@tab MacOS/X Server, OpenStep, NextStep

@item @file{CS/libs/cssys/os2}
@tab @sc{os}/2

@item @file{CS/libs/cssys/unix}
@tab Unix, including Linux, Solaris, Irix, etc.

@item @file{CS/libs/cssys/win32}
@tab Win32

@item @file{CS/libs/cssys/amiga}
@tab Amiga
@end multitable

@item CS/libs/tools
High level application tools. This are specialized objects which provide
applications with high-level functionality. Though specialized, they are
still general enough to be useful to certain types of applications. An
example is csSimpleConsole which provides basic input/output facilities
within an application framework.

@item CS/libs/csutil
This library contains various utilities.  There is an Archive class which can
read/write @sc{zip} archives.  There is a vector class, a sparse matrix class
and some other useful goodies.  This library requires the use of the external
@file{zlib} library which is used to read/write @sc{zip} archives.

@item CS/libs/csws
The Crystal Space Window System which is nicely integrated with Crystal Space.
It is also platform independent.

@item CS/libs/libjpeg
Library to handle @sc{jpeg} format files.  This library is not part of Crystal
Space.

@item CS/libs/libpng
Library to handle @sc{png} format files.  This library is not part of Crystal
Space.

@item CS/libs/zlib
Library to handle @sc{zip} format files.  This library is not part of Crystal
Space.
@end table

@item CS/mk
This directory contains the common parts of the makefiles for many systems

@multitable @columnfractions .25 .75
@item @file{CS/mk/mwcw}
@tab Project files for Macintosh CodeWarrior

@item @file{CS/mk/visualc}
@tab Project files for Win32 using MSVC 5.0/ 6.0
@end multitable

@item CS/plugins
Plug-in, dynamically loaded modules.  Communication with these modules is
performed strictly via @sc{scf} interfaces.  @xref{SCF}.

@multitable @columnfractions .25 .75
@item @file{CS/plugins/csclear}
@tab The Crystal Clear plug-in, a game abstraction library.

@item @file{CS/plugins/cscon}
@tab A console plug-in for displaying a textual console within the graphic
environment.

@item @file{CS/plugins/cspython}
@tab A Python interpreter plug-in (unfinished).
@end multitable

@item CS/support
Support routines.

@multitable @columnfractions .25 .75
@item @file{CS/support/debug}
@tab Support routines for extensive memory checking.

@item @file{CS/support/gnu}
@tab Replacement for getopt (missing on some systems).
@end multitable
@end table
