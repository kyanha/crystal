@c -*-texinfo-*-
@node Mipmapping
@section Mipmapping
@cindex Mipmapping

In order to minimize the large memory requirements of the Texture Cache and
also to make nicer looking textures when the polygons are far away,
mipmapping is used.

There are four levels: the first level is the original unchanged texture.

Every following level is made by halving the previous level both horizontally
and vertically and applying some anti-aliasing filter. Currently three
filters are supported:

@itemize @bullet
@item
Just remove all odd pixels and retain the others. This is fast to precompute
but not very nice in appearance.

@item
Just calculate the mean color value of every block of four pixels. This is
reasonably fast but there is a slight shift in the mipmapped textures.
@item
The best result can be had by applying the following filter:

@example
1 2 1
2 4 2
1 2 1
@end example
@end itemize

The last algorithm is the best and is the one that should be used. I will
remove the other algorithms soon.

Note that the general filter algorithm is slowest but this speed penalty is
only for precomputing the textures. The renderer is not affected by this.

Mipmapping affects other parts of the engine as well. When lighting is
precalculated this needs to be done for all four mipmap levels.
