@c -*-texinfo-*-
@node Tutorial Simple, Tutorial Simple 2, Tutorial Introduction, Tutorials
@section Simple Tutorial 1
@cindex Tutorial, Simple
@cindex Simple Tutorial

This tutorial provides a step-by-step explanation on how you can use the 3D
Engine from within your application.  This tutorial is mainly based on the
@file{simple} application which you can compile and run to see what it does.
There are various ways to use Crystal Space.  The @file{simple} application
uses inheritance to create a subclass of the system dependent main class
@samp{SysSystemDriver} but you don't need to do it like this.

When you downloaded the Crystal Space package it contains a @samp{CS/include}
directory.  This directory contains all header files you need to be able to
use the Crystal Space components and libraries in your own applications.  On
one hand, the include directory contains @sc{scf} interface definitions.
These pure interface file names start with the letter @samp{i} (as in
@file{iengine.h}).  On the other hand we also have plain C++ include files for
interfacing with the libraries of Crystal Space.  When you install Crystal
Space on your development system (for instance, by invoking @samp{make
install}), these headers are placed in a location where they can be easily
accessed when writing new programs based on Crystal Space.  On Unix systems,
for instance, these files usually end up in @file{/usr/local/crystal/include}.

Crystal Space also has a reference manual and @sc{api} documentation.
The manual is included in @sc{html} form Crystal Space itself and is also
available online.  The @sc{api} documentation can be generated locally or
viewed online.  @xref{Where to Get}.

@menu
* Simple Minimum Requirements:: Minimum Application Requirements
* Simple System Driver:: Creating the Simple System Driver
* Simple Event Handling:: Event Handling
* Simple World:: Creating a ``World''
* Simple Camera:: The Camera
* Simple Locomotion:: Locomotion (Moving Around)
@end menu

@node Simple Minimum Requirements, Simple System Driver, Tutorial Simple, Tutorial Simple
@subsection Minimum Application Requirements
@cindex Tutorial Minimum Application Requirements
@cindex Minimum Application Requirements, Tutorial

For an application to be considered a proper ``Crystal Space application'',
there are a few requirements.  These are:

@itemize @bullet
@item
Each and every source file (@file{.cpp}) must import @file{cssysdef.h} as the
very first included Crystal Space header files.  @file{cssysdef.h} should never
be included by a header file.

@item
The @code{main()} function must be declared with the following prototype:
@example
int main(int argc, char *argv[]);
@end example
@end itemize

Following these guidelines will help to ensure that your application builds
and runs on all platforms supported by Crystal Space.

@node Simple System Driver, Simple Event Handling, Simple Minimum Requirements, Tutorial Simple
@subsection Creating the Simple System Driver
@cindex Tutorial Simple System Driver
@cindex Simple System Driver, Tutorial

First a little explanation.  @samp{SysSystemDriver} is a system dependent
class which is reponsible for controlling the main Crystal Space stuff.  It
loads and initializes the needed components (drivers) and also manages the
main event loop.  The @file{simple} application creates a subclass of this to
provide it with its own functionality.  So we start by creating an include
file @file{simple.h} with the following contents:

@example
#ifndef __SIMPLE_H__
#define __SIMPLE_H__

#include <stdarg.h>
#include "cssys/sysdriv.h"

struct iEngine;
struct iLoader;
struct iGraphics3D;

class Simple : public SysSystemDriver
@{
  typedef SysSystemDriver superclass;
private:
  iEngine* engine;
  iLoader* loader;
  iGraphics3D* g3d;

public:
  Simple ();
  virtual ~Simple ();

  virtual bool Initialize (int argc, const char* const argv[],
    char const *iConfigName);
@};

#endif // __SIMPLE_H__
@end example

In the source file @file{simple.cpp} we place the following:

@example
#include "cssysdef.h"
#include "cssys/system.h"
#include "csutil/cscolor.h"
#include "cstool/csview.h"
#include "apps/simple/simple.h"
#include "isys/plugin.h"
#include "iutil/objreg.h"
#include "iengine/sector.h"
#include "iengine/engine.h"
#include "iengine/camera.h"
#include "iengine/light.h"
#include "iengine/texture.h"
#include "iengine/movable.h"
#include "iengine/material.h"
#include "imesh/object.h"
#include "imesh/thing/polygon.h"
#include "imesh/thing/thing.h"
#include "ivideo/graph3d.h"
#include "ivideo/graph2d.h"
#include "ivideo/txtmgr.h"
#include "ivideo/texture.h"
#include "ivideo/material.h"
#include "imap/parser.h"

// Needed for every CS application.
CS_IMPLEMENT_APPLICATION

// The global system driver
Simple *System;

Simple::Simple ()
@{
  engine = NULL;
  loader = NULL;
  g3d = NULL;
@}

Simple::~Simple ()
@{
  if (engine) engine->DecRef ();
  if (loader) loader->DecRef ();
  if (g3d) g3d->DecRef ();
@}

void Cleanup ()
@{
  delete System;
@}

bool Simple::Initialize (int argc, const char* const argv[],
  char const* iConfigName)
@{
  if (!superclass::Initialize (argc, argv, iConfigName))
    return false;

  iObjectRegistry* object_reg = GetObjectRegistry ();
  iPluginManager* plugin_mgr = CS_QUERY_REGISTRY (object_reg, iPluginManager);

  // Find the pointer to engine plugin
  engine = CS_QUERY_PLUGIN (plugin_mgr, iEngine);
  if (!engine)
  @{
    Printf (CS_MSG_FATAL_ERROR, "No iEngine plugin!\n");
    exit (1);
  @}

  loader = CS_QUERY_PLUGIN_ID (plugin_mgr, CS_FUNCID_LVLLOADER, iLoader);
  if (!loader)
  @{
    Printf (CS_MSG_FATAL_ERROR, "No iLoader plugin!\n");
    abort ();
  @}

  g3d = CS_QUERY_PLUGIN_ID (plugin_mgr, CS_FUNCID_VIDEO, iGraphics3D);
  if (!g3d)
  @{
    Printf (CS_MSG_FATAL_ERROR, "No iGraphics3D plugin!\n");
    abort ();
  @}

  // Open the main system. This will open all
  // the previously loaded plug-ins.
  if (!Open ("Simple Crystal Space Application"))
  @{
    Printf (CS_MSG_FATAL_ERROR, "Error opening system!\n");
    Cleanup ();
    exit (1);
  @}

  Printf (CS_MSG_INITIALIZATION,
    "Simple Crystal Space Application.\n");

  // First disable the lighting cache.
  // Our app is simple enough not to need this.
  engine->SetLightingCacheMode (0);

  // Create our world.
  Printf (CS_MSG_INITIALIZATION, "Creating world...\n");
  engine->Prepare ();
  Printf (CS_MSG_INITIALIZATION, "Created.\n");

  return true;
@}

/*---------------*
 * Main function *
 *---------------*/
int main (int argc, char* argv[])
@{
  srand (time (NULL));

  // Create our main class.
  System = new Simple ();

  // We want at least the minimal set of plugins
  System->RequestPlugin (
    "crystalspace.kernel.vfs:VFS");
  System->RequestPlugin (
    "crystalspace.font.server.default:FontServer");
  System->RequestPlugin (
    "crystalspace.graphic.image.io.multiplex:ImageLoader");
  System->RequestPlugin (
    "crystalspace.graphics3d.software:VideoDriver");
  System->RequestPlugin (
    "crystalspace.engine.3d:Engine");
  System->RequestPlugin (
    "crystalspace.level.loader:LevelLoader");

  // Initialize the main system. This will load all needed
  // plug-ins (3D, 2D, network, etc.) and initialize them.
  if (!System->Initialize (argc, argv, NULL))
  @{
    System->Printf (CS_MSG_FATAL_ERROR, "Error initializing system.\n");
    Cleanup ();
    exit (1);
  @}

  // Main loop.
  System->Loop ();

  // Cleanup.
  Cleanup ();
  return 0;
@}
@end example

This is almost the simplest possible application and it is absolutely useless.
Also don't run it on an operating system where you can't kill a running
application because there is no way to stop the application once it has
started running.

Before we start making this application more useful lets have a look at what
actually happens here.

Before doing anything at all, after including the necessary header files, we
first need to use a few macros.  The CS_IMPLEMENT_APPLICATION macro is
essential for every application using CS.  It makes sure that the @code{main()}
routine is correctly linked and called on every platform.

The main routine first creates an instance of our
@samp{Simple} class. We put this instance into a global variable to make
access to it easier. The next step is the creation of the world.  The world
is actually the main 3D engine class and is one of the most important classes
for interfacing with the engine (see @samp{iEngine} reference for more
information).

To initialize the system, we call @code{Initialize()} on our @samp{Simple}
instance.  This is a function inherited from @samp{SysSystemDriver} and is
responsible for initializing all needed plugins.  It is also responsible for
parsing the command line and feeding all the options to the appropriate
handlers.  Note that you should always test for failure of such routines as
there may be various reasons for failure.

Because we are making a simple application we don't have a config file.
This means that the third argument to @code{Initialize()} will be @samp{NULL}
(name of config file). It also means we cannot depend on the config file
to load plugins (like 3D driver and so on) so we have to do that in the code
by explicitely calling @code{RequestPlugin()} for all plugins that we
want.

@samp{Initialize()} retrieves a pointer to the engine via a call to the
@sc{scf} function @code{CS_QUERY_PLUGIN()} and then ``opens'' the system, which
basically means that all graphics subsystems are opened (i.e.  a window will
be opened). All plugins that were specified in the config file or requested
for with @code{RequestPlugin()} will also be loaded and opened. This function
can also fail, so again test for this.
In addition to retrieving a pointer to the engine it will also get a pointer
to the level loader (which we are going to use later to load textures) and
the 3D driver itself.

The call to @code{Loop()} puts Crystal Space in the main event loop.  This is
where the application really starts running and interacting with the user.
This call returns as soon as an exit message was received by the system at
which point we call @code{Cleanup()} to clean up everything.

@node Simple Event Handling, Simple World, Simple System Driver, Tutorial Simple
@subsection Event Handling
@cindex Event Handling, Simple Tutorial
@cindex Simple Tutorial Event Handling

To make the testing somewhat easier we will add a way to terminate the
application by responding to the @key{ESC} key.  Add the following public
method to our class in @file{simple.h}:

@example
virtual bool HandleEvent (iEvent&);
@end example

HandleEvent() is inherited from the system driver and is automatically called
as each event is received, several of which can accumulate between frames.
Our version checks if the @key{ESC} key has been pressed, and sets
Shutdown to true if so.  Now add this code to @file{simple.cpp}:

@example
bool Simple::HandleEvent (iEvent& Event)
@{
  if (superclass::HandleEvent (Event))
    return true;

  if (Event.Type == csevKeyDown && Event.Key.Code == CSKEY_ESC)
  @{
    Shutdown = true;
    return true;
  @}

  return false;
@}
@end example

This code first gives the superclass a chance to respond to the event.  If the
superclass couldn't handle the event, then our code tries to do so by checking
for the @key{ESC} key and beginning the termination sequence if it found that
that key had been pressed.  Otherwise @samp{false} is returned to indicate
that the event was not handled at all.

@node Simple World, Simple Camera, Simple Event Handling, Tutorial Simple
@subsection Creating a ``World''
@cindex Tutorial, Creating a ``World''
@cindex World, Creating, Simple Tutorial
@cindex iMaterialWrapper
@cindex iSector
@cindex iThingState
@cindex iPolygon3D
@cindex iStatLight
@cindex iMeshWrapper

Now we have a very exciting application which opens a black window and waits
for the @key{ESC} key to quit.  We assume this is the application you always
wanted to have?  No?  Ok then, let's create some 3D stuff.

We'll add a texture manager, a room (technically called a @dfn{sector}) and
some lights.  First, add these relevant declarations to @file{simple.h} so
that it looks like this:

@example
@dots{}
struct iSector;

class Simple : public SysSystemDriver
@{
  typedef SysSystemDriver superclass;
private:
  iEngine* engine;
  iLoader* loader;
  iGraphics3D* g3d;
  iSector* room;
  @dots{}
@end example

Now add these chunks of code (texture manager, room, lights) to
@file{simple.cpp}:

@example
bool Simple::Initialize (int argc, const char* const argv[],
  char const* iConfigName)
@{
  @dots{}
  // Open the main system. This will open all
  // the previously loaded plug-ins.
  if (!Open ("Simple Crystal Space Application"))
    @dots{}

  // Setup the texture manager
  iTextureManager* txtmgr = G3D->GetTextureManager ();
  txtmgr->SetVerbose (true);

  // Initialize the texture manager
  txtmgr->ResetPalette ();
  @dots{}
  // Create the world.
  Printf (CS_MSG_INITIALIZATION, "Creating world...\n");

  if (!loader->LoadTexture ("stone", "/lib/std/stone4.gif"))
  @{
    Printf (CS_MSG_FATAL_ERROR, "Error loading 'stone4' texture!\n");
    Cleanup ();
    exit (1);
  @}
  iMaterialWrapper* tm =
    engine->GetMaterialList ()->FindByName ("stone");

  room = engine->CreateSector ("room");
  iMeshWrapper* walls = engine->CreateSectorWallsMesh (room, "walls");
  iThingState* walls_state =
    SCF_QUERY_INTERFACE (walls->GetMeshObject (), iThingState);
  iPolygon3D* p;
  p = walls_state->CreatePolygon ();
  p->SetMaterial (tm);
  p->CreateVertex (csVector3 (-5, 0, 5));
  p->CreateVertex (csVector3 (5, 0, 5));
  p->CreateVertex (csVector3 (5, 0, -5));
  p->CreateVertex (csVector3 (-5, 0, -5));
  p->SetTextureSpace (p->GetVertex (0), p->GetVertex (1), 3);

  p = walls_state->CreatePolygon ();
  p->SetMaterial (tm);
  p->CreateVertex (csVector3 (-5, 20, -5));
  p->CreateVertex (csVector3 (5, 20, -5));
  p->CreateVertex (csVector3 (5, 20, 5));
  p->CreateVertex (csVector3 (-5, 20, 5));
  p->SetTextureSpace (p->GetVertex (0), p->GetVertex (1), 3);

  p = walls_state->CreatePolygon ();
  p->SetMaterial (tm);
  p->CreateVertex (csVector3 (-5, 20, 5));
  p->CreateVertex (csVector3 (5, 20, 5));
  p->CreateVertex (csVector3 (5, 0, 5));
  p->CreateVertex (csVector3 (-5, 0, 5));
  p->SetTextureSpace (p->GetVertex (0), p->GetVertex (1), 3);

  p = walls_state->CreatePolygon ();
  p->SetMaterial (tm);
  p->CreateVertex (csVector3 (5, 20, 5));
  p->CreateVertex (csVector3 (5, 20, -5));
  p->CreateVertex (csVector3 (5, 0, -5));
  p->CreateVertex (csVector3 (5, 0, 5));
  p->SetTextureSpace (p->GetVertex (0), p->GetVertex (1), 3);

  p = walls_state->CreatePolygon ();
  p->SetMaterial (tm);
  p->CreateVertex (csVector3 (-5, 20, -5));
  p->CreateVertex (csVector3 (-5, 20, 5));
  p->CreateVertex (csVector3 (-5, 0, 5));
  p->CreateVertex (csVector3 (-5, 0, -5));
  p->SetTextureSpace (p->GetVertex (0), p->GetVertex (1), 3);

  p = walls_state->CreatePolygon ();
  p->SetMaterial (tm);
  p->CreateVertex (csVector3 (5, 20, -5));
  p->CreateVertex (csVector3 (-5, 20, -5));
  p->CreateVertex (csVector3 (-5, 0, -5));
  p->CreateVertex (csVector3 (5, 0, -5));
  p->SetTextureSpace (p->GetVertex (0), p->GetVertex (1), 3);

  walls_state->DecRef ();

  iStatLight* light;
  light = engine->CreateLight (NULL, csVector3 (-3, 5, 0), 10,
  	csColor (1, 0, 0), false);
  room->AddLight (light);
  light = engine->CreateLight (NULL, csVector3 (3, 5,  0), 10,
  	csColor (0, 0, 1), false);
  room->AddLight (light);
  light = engine->CreateLight (NULL, csVector3 (0, 5, -3), 10,
  	csColor (0, 1, 0), false);
  room->AddLight (light);

  engine->Prepare ();
  Printf (CS_MSG_INITIALIZATION, "Created.\n");

  txtmgr->SetPalette ();
  return true;
@}
@end example

This extra code first loads a texture with @code{LoadTexture()}.
The first parameter is the name of the texture as it will be known in the
engine; and the third is the
actual filename on the @sc{vfs} volume (@pxref{VFS}).  Note, if you don't have
the @file{stone4.gif} texture you can use another one.  The only requirement
is that it must have sizes which are a power of 2 (e.g. 64x64). This functions
returns a @samp{iTextureWrapper} which we don't use.  Instead we use
the @samp{iMaterialWrapper} which is created automatically by
@code{LoadTexture()}.

Then we create our room with @code{CreateSector()}.  This room will initially
be empty.  A room in Crystal Space is represented by @samp{iSector} which is
basically a container which can hold geometrical objects. Objects
in Crystal Space are represented by @sc{mesh objects} (@pxref{MeshObject}).
There are several types of mesh objects in Crystal Space. Every type of
mesh object represents some different way to represent geometry. In this
tutorial we are only going to use the 'thing' mesh object type. This mesh
object type is very useful for walls of indoor type levels or buildings.

Now we want create the six walls of our room. First we make our thing mesh
object. Because this is a very common case there is a conveniance function
in the engine (called @code{CreateSectorWallsMesh()}) which will create a
thing mesh and add it to the given sector. The only thing that has to be
done after this is add polygons to that mesh. To do this we first query
the interface called @code{iThingState} from the thing mesh object.
We use the macro @code{SCF_QUERY_INTERFACE} which is part of @sc{scf}
(@pxref{SCF}). This will see if the mesh object (which is wrapped by
the mesh wrapper) actually implements @code{iThingState} (which should
be the case here) and if so it will return a pointer to the implementation
of @code{iThingState}. All mesh objects implement some kind of state
interface which is used to set up or query the state of that mesh object.
Note that all interfaces which you query using @code{SCF_QUERY_INTERFACE}
should be released when you no longer need them (by calling @code{DecRef()}).

The returned thing state we can now use to create polygons by calling
@code{CreatePolygon()} for every wall. This will return a pointer to a
polygon (@code{iPolygon3D}). On this we can set various parameters like
the material. Then we add four vertices (note that in Crystal Space
a polygon is visible if vertices are oriented clock-wise). The location
given to @code{CreateVertex()} is in object space (in contrast with
world space and camera space).
To define how the texture is mapped on the polygon we use
@code{SetTextureSpace()}.  There are several versions of this function.  The
one we use in this tutorial is one of the simplest but it offers the least
control.  In this particular case we take the first two vertices of the
polygon and use that for the u-axis of the texture.  The v-axis will be
calculated perpendicular to the u-axis.  The parameter 3 indicates that the
texture will be scaled so that one texture tile is exactly 3x3 world units in
size.

Finally we create some lights in our room to make sure that we actually are
able to see the walls.  The interface @samp{iStatLight} represents a static
light which can not move and change intensity.  We create three such lights
and add them to the room with @code{AddLight()}.  When creating a light we use
several parameters. First we have the name of the light. This is not used
often and mostly you can set this to @code{NULL}. The second parameter is
the location of the light in the world. Then follows a radius. The light will
not affect polygons which are outside the sphere described by the center of
the light and the radius.  The next parameter is the color of the light in
@sc{rgb} format (@code{<1,1,1>} means white and @code{<0,0,0>} means black).
The last parameter indicates whether or not we want to have a pseudo-dynamic
light.  A pseudo-dynamic light still cannot move but it can change intensity.
There are some performance costs associated with pseudo-dynamic lights so
it is not enabled by default.

The call to @code{Prepare()} prepares the engine for rendering your scene.  It
will prepare all textures and create all lightmaps if needed.  Only after this
call can you start rendering your world, because lightmaps may have to be
converted to a format more suitable for the chosen 3D renderer.

The last code we added allocates the palette.  Note that is needed even if you
are running on a true-color display which has no palette.  That's because the
code does some other things beside setting up a palette.

Ok, now we have created our room and properly initialized it.  If you would
compile and run this application you would still see a black screen.  Why?
Because we have not created a camera through which you can see.

@node Simple Camera, Simple Locomotion, Simple World, Tutorial Simple
@subsection The Camera
@cindex Tutorial, Camera
@cindex Camera, Tutorial
@cindex iView
@cindex iCamera

In Crystal Space there is an interface called @code{iView} which
encapsulates both @samp{iCamera} and @code{iClipper2D} instances.
In principle you can use those classes directly but using @code{iView} is
easier.  Now edit @file{simple.h} to make use of @code{iView}:

@example
@dots{}
struct iSector;
struct iView;
@dots{}

class Simple : public SysSystemDriver
@{
private:
  @dots{}
  iView* view;

public:
  @dots{}
  virtual void NextFrame ();
  @dots{}
@end example

Then edit @file{simple.cpp} and make the following changes to the constructor
and destructor of @samp{Simple}:

@example
Simple::Simple ()
@{
  view = NULL;
  @dots{}
@}

Simple::~Simple ()
@{
  if (view) view->DecRef ();
  @dots{}
@}
@end example

At the end of our @code{Initialize()} function we add the following:

@example
bool Simple::Initialize (int argc, const char* const argv[],
  char const* iConfigName)
@{
  @dots{}
  Printf (CS_MSG_INITIALIZATION, "Created.\n");

  view = new csView (engine, g3d);
  view->GetCamera ()->SetSector (room);
  view->GetCamera ()->GetTransform ().SetOrigin (csVector3 (0, 5, -3));
  iGraphics2D* g2d = g3d->GetDriver2D ();
  view->SetRectangle (0, 0, g2d->GetWidth (), g2d->GetHeight ());

  txtmgr->SetPalette ();
  return true;
@}
@end example

So first we create a view for our world and 3D graphics renderer.  The view
has a current sector which is passed to the camera and is set by
@code{SetSector()}.  The camera also has a position in that sector which you
can set by first getting the camera with @code{GetCamera()} and then setting
the position (which is a @samp{csVector3}) with @code{SetPosition()}.  The
view also holds a clipping region which corresponds to the area on the window
that is going to be used for drawing the world.  Crystal Space supports convex
polygons to be used as viewing areas, but in case we use a simple rectangle
which has almost the size of the window.  We set this viewing rectangle with
@code{SetRectangle()}.

Now, this still isn't enough.  We have a camera but the camera is not used.
We still need to write a @code{NextFrame()} method which tells the camera to
actually render the 3D image at each animation frame.  Implement NextFrame()
as follows:

@example
void Simple::NextFrame ()
@{
  superclass::NextFrame ();

  // Tell 3D driver we're going to display 3D things.
  if (!g3d->BeginDraw (
      engine->GetBeginDrawFlags () | CSDRAW_3DGRAPHICS))
      return;

  // Tell the camera to render into the frame buffer.
  view->Draw ();

  // Drawing code ends here.
  g3d->FinishDraw ();
  // Display the final output.
  g3d->Print (NULL);
@}
@end example

First we indicate to the 3D rasterizer that we want to start drawing 3D
graphics.  This call makes sure that the needed buffers are set up and
performs all necessary initialization. The engine often needs extra settings
for this as well so you @emph{must} call @code{engine->GetBeginDrawFlags()} to
get these flags and or them with the ones that you want.
Then we draw through our view by calling @code{iView::Draw()} which
updates the view area with the 3D world data as seen through the camera.
After this we finish 3D drawing with
@code{FinishDraw()} and then update the display by calling @code{Print()}.
The @samp{NULL} pointer given to @code{Print()} is the area that you want to
update (it is a rectangle).  If @samp{NULL} is used then the entire window is
updated.

Compile and run this example.  For the first time you should see something.  A
solid wall.  Congratulations, you have created your first almost useful
Crystal Space application.

@node Simple Locomotion, , Simple Camera, Tutorial Simple
@subsection Locomotion (Moving Around)
@cindex Tutorial Simple Locomotion
@cindex Locomotion, Tutorial
@cindex Movement, Tutorial

Staring at that solid wall gets a bit boring after some time.  The problem is
that we can't move the camera to change our view point.  Let's add some code
to do exactly this.  Edit @file{simple.cpp} again and change
@file{NextFrame()} as follows:

@example
void Simple::NextFrame ()
@{
  superclass::NextFrame ();
  // First get elapsed time from the system driver.
  csTime elapsed_time, current_time;
  GetElapsedTime (elapsed_time, current_time);
  
  // Now rotate the camera according to keyboard state
  float speed = (elapsed_time / 1000.0) * (0.03 * 20);

  iCamera* c = view->GetCamera();
  if (GetKeyState (CSKEY_RIGHT))
    c->GetTransform ().RotateThis (VEC_ROT_RIGHT, speed);
  if (GetKeyState (CSKEY_LEFT))
    c->GetTransform ().RotateThis (VEC_ROT_LEFT, speed);
  if (GetKeyState (CSKEY_PGUP))
    c->GetTransform ().RotateThis (VEC_TILT_UP, speed);
  if (GetKeyState (CSKEY_PGDN))
    c->GetTransform ().RotateThis (VEC_TILT_DOWN, speed);
  if (GetKeyState (CSKEY_UP))
    c->Move (VEC_FORWARD * 4 * speed);
  if (GetKeyState (CSKEY_DOWN))
    c->Move (VEC_BACKWARD * 4 * speed);
  @dots{}
@}
@end example

That's all!  With this simple change you can rotate the camera with the left
and right arrow keys and move forward and backward with the up and down arrow
keys.  Try it out to see the effect.  To rotate the camera we use
@code{RotateThis()} which expects a vector to rotate along and an angle given in
radians (the speed parameter).  There are a number of predefined vectors which
you can use.  A couple of them are used in this example.

That's it for now.  In this tutorial you learned how to setup the Crystal
Space system for use, how to create a simple room with some lights, event
handling, and how to handle some basic camera operations.

You can now go on to the next tutorial (@pxref{Tutorial Simple 2})) to learn
how to add a 3D sprite to this engine.
