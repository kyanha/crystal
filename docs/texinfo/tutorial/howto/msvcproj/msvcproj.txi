@c -*-texinfo-*-
@node HOWTO Creating External MSVC Application, HOWTO Setting the CRYSTAL enviroment variable, HOWTO CS Project, HOWTO
@subsection Creating an External @sc{msvc} Application

This @sc{howto} is a step by step guide for creating a Crystal Space
application with @sc{msvc} outside the Crystal Space source tree.  For the
complete sample application in a zip archive see @emph{simple1.zip} in the
following directory:

@noindent
@file{CS\docs\texinfo\tutorial\howto\msvcproj}

@subsubheading @sc{msvc} External Step 1

Open @sc{msvc} and click on @emph{New} from the @emph{File} menu.  You will now
be confronted with a dialog box for creating a new project.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap0}
@end ifnotinfo

@subsubheading @sc{msvc} External Step 2 

Click on @emph{Win32 Application} since @file{simple1} is a @sc{gui}
application.  If we were creating a Crystal Space console application we would
use @emph{Win32 Console Application}.  Now enter the name of your application
in the @emph{Project name} text box.  In this example, the application is named
@file{simple1}.

Click @sc{ok} and you will next be confronted with another dialog box.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap1}
@end ifnotinfo

@subsubheading @sc{msvc} External Step 3

Click on @emph{Finish} and yet another dialog box will be presented.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap2}
@end ifnotinfo

@subsubheading @sc{msvc} External Step 4

Click on @sc{ok} and we should now be in the @sc{msvc} @sc{ide} with our basic
new Win32 @sc{gui} (Graphical User Interface) application project created and
ready to be filled in.

@subsubheading @sc{msvc} External Step 5

Next, copy and paste the @file{simple1.cpp} and @file{simple1.h} from the
Crystal Space code tree and paste them into the newly created @file{simple1}
project directory.  Thes files can be found here:

@noindent
@file{CS/apps/tutorial/simple1}

Alternately, you could type in your own Crystal Space program, but for the sake
of this tutorial, using the existing @file{simple1} application is simpler.

@subsubheading @sc{msvc} External Step 6

Now, in the left hand @emph{Workspace} window, right click on the @emph{Source
Files} folder and then click on @emph{Add Files to Folder}.  Browse to
@file{simple1.cpp} and double click on it and it will be added to the project.
Do the same for @file{simple1.h} to add that file to the @emph{Header Files}
section.

@subsubheading @sc{msvc} External Step 7

Now configure the paths so @sc{msvc} can see both the Crystal Space include and
library files.  First, make sure that the @emph{simple1 files} section is
highlighted.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap3}
@end ifnotinfo

Next, from the @emph{File} menu click on @emph{Tools}, and then @emph{Options}.
You will be confronted with the @emph{Options} dialog box.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap4}
@end ifnotinfo

@subsubheading @sc{msvc} External Step 8

Click on the @emph{Directories} tab.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap5}
@end ifnotinfo

Use the browser to point @sc{msvc} at the @emph{CS\include} directory.  Next,
click on the @emph{Show directories for} drop-down list and select
@emph{Library files}, and point it at either of the two following directories,
depending on what type of build of Crystal Space you performed.

@noindent
@file{CS\mk\visualc\csdebug\bin\libs}@*
@file{CS\mk\visualc\csrelease\bin\libs}

Once you have performed these two action click on @sc{ok} to exit back to the
@sc{ide}.

@subsubheading @sc{msvc} External Step 9

Now, configure the individual and required build settings for Crystal Space.
First, from the @emph{File} menu, click on @emph{Project} then @emph{Settings}
and you will be confronted with a @emph{Project Settings} dialog box.  Next,
click on the @emph{C/C++} tab.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap6}
@end ifnotinfo

In the @emph{Preprocessor definitions} text box replace its contents with the
line below.
@iftex
(In the @sc{ide}, the text is typed on a single line, though it appears
wrapped in this example in order to fit on the printed page.)

@noindent
@code{WIN32,_DEBUG,_CONSOLE,_MBCS,WIN32_VOLATILE,}@*
@code{__CRYSTAL_SPACE__,CS_DEBUG}
@end iftex
@ifnottex

@noindent
@code{WIN32,_DEBUG,_CONSOLE,_MBCS,WIN32_VOLATILE,__CRYSTAL_SPACE__,CS_DEBUG}
@end ifnottex

For a release build it is slightly different.  See the attached sample
application for what to insert in that case.

Next click on the @emph{Category} drop-down menu and select @emph{Code
Generation}.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap7}
@end ifnotinfo

In @emph{Use run-time library} change @emph{Debug Single-threaded} to
@emph{Debug Multithreaded}. Also make sure too change the directive
@emph{/MT or /MTD} too @emph{/MD or /MDd} for release and debug builds
respectively.

Note: In a release build this is slightly different.  See the attached sample
application for settings in that case.

Next, click on the @emph{Link} tab.
@ifnotinfo

@picturesss{tutorial,howto,msvcproj,snap8}
@end ifnotinfo

In the @emph{Object/library modules} text box add the Crystal Space libraries
as named below into the box with those already listed.

For debug builds use the following names. The @emph{_d} indicates a debug CS library.

@iftex
@code{libcssys_d.lib libcsutil_d.lib libcsgeom_d.lib}@*
@code{libcsgfx_d.lib libcstool_d.lib}
@end iftex
@ifnottex
@code{libcssys_d.lib libcsutil_d.lib libcsgeom_d.lib libcsgfx_d.lib libcstool_d.lib}
@end ifnottex

For release builds use the following naming for the CS libraries.

@iftex
@code{libcssys.lib libcsutil.lib libcsgeom.lib}@*
@code{libcsgfx.lib libcstool.lib}
@end iftex
@ifnottex
@code{libcssys.lib libcsutil.lib libcsgeom.lib libcsgfx.lib libcstool.lib}
@end ifnottex

These libraries are needed to successfully link the @file{simple1} application,
though other libraries are also available.  You can examine other existing
Crystal Space applications to see which other libraries and features are
available.

Finally, click on @sc{ok} to return to the @sc{ide} and then build the project.
