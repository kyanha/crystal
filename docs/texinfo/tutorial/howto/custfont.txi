@c -*-texinfo-*-
@node HOWTO Use custom font, HOWTO Recording Movies, HOWTO Simple Map Example, HOWTO
@subsection Using a Custom Font
@cindex font, csf

This section describes how to use a custom font within
Crystal Space.

Crystal Space has a plugin that specifies the font server
to use.  The font server that almost all applications use
is the font plexer (@samp{crystalspace.font.server.multiplexer}) 
together with the FreeType2 (@samp{crystalspace.font.server.freetype2})
and the default font server (@samp{crystalspace.font.server.default}).

The font plexer not just searches both the FreeType2 and default font
server for a font, but also can search multiple fonts for a glyph. This
is especially important if you plan to internationalize your applications;
you need to care less whether a font supports the glyphs for a specific
language or not. (CS comes along with the GNU unifont, which is used as a
fallback by default. So you have pretty good support for internationalizion
out-of-the-box.)

@subsubheading Standard Fonts

Every font server is expected to return a font
given the following strings:

@itemize @bullet
@item
@code{CSFONT_LARGE "*large"}
@item
@code{CSFONT_ITALIC "*italic"}
@item
@code{CSFONT_COURIER "*courier"}
@item
@code{CSFONT_SMALL "*small"}
@end itemize

The default font server has these 4 fonts built in.  They are as
follows:

@itemize @bullet
@item
@code{CSFONT_LARGE police}
@item
@code{CSFONT_ITALIC italic}
@item
@code{CSFONT_COURIER courier}
@item
@code{CSFONT_SMALL tiny}
@end itemize

To use these fonts simply use the LoadFont method and
pass the font desired.

@example
Font = G2D->GetFontServer()->LoadFont (CSFONT_LARGE);
@end example

@subsubheading Loadable Fonts

The default font server will also look for a file in 
the virtual file system with the name specified.  The
file must be in the "csf" font format.  This format is
pretty simple binary format that supports individual characters
with different widths and optionally an alpha component
to provide anti-aliasing.

To specify an alternate font simply use the LoadFont method
with the file name (and optionally a size) such as:

@example
Font = G2D->GetFontServer()->LoadFont ("/fonts/ttf/Vera.ttf", 12);
@end example

@subsubheading Creating New Loadable Fonts

The easiest way to create a loadable font is to
use the @filename{csfgen} util that comes with CS. It converts 
a true type font to the @sc{csf} format.

Once the @sc{csf} file is created it can be included
in the application no matter what platforms are 
targeted.  The base font does not have to be on
that system.  This is useful if you don't want or can't
distribute a font with your program and can't rely on
the presence of it, either. 
