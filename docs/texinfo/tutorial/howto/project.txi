@c -*-texinfo-*-
@node HOWTO CS Project, HOWTO Creating External MSVC Application, HOWTO User Objects, HOWTO
@subsection Creating an External Crystal Space Application
@cindex External Crystal Space Application

This section describes one easy way to use the Crystal Space development kit
for your application without having to place your application in the Crystal
Space source code tree.  Your application's source code can reside wherever you
like.

@subsubheading External Application Requirements

For this to work you need to have a sufficiently Unix-like environment.
The environments provided by the MingW and Cygwin compilers are usually
okay, but you must use the @samp{bash} shell.

@subsubheading The @file{cs-config} Script
@cindex @file{cs-config}

The first thing you need to do is to go to the Crystal Space directory and
type:

@example
make csconfig
@end example

This will create a script called @file{cs-config}.  Copy that script unmodified
to the directory where your project is located.  Note that this script is
platform dependent so you should not put it in your project's @sc{cvs}
repository.  Everyone who uses your project will have to generate their own
@file{cs-config} script by invoking @samp{make csconfig} from within the
Crystal Space project directory.

@subsubheading Makefile
@cindex Makefile

In the Crystal Space directory you will find the following file:

@noindent
@file{scripts/cs-config/Makefile.template}.

@noindent
Copy this file to the directory where your project is located and rename it to
@file{Makefile}.

You need to edit this file for your own project.  It is
recommended that you change at least the following variables:

@itemize
@item
@samp{EXECUTABLE} should be the name of your executable. The .exe suffix
is automatically appended if needed on the platform.
@item
@samp{OBJSRC} should point to the source code of your project.
@item
@samp{LINKFLAGS} should be modified to list all the Crystal Space libraries
that you want to use.
@end itemize

This will enable the makefile to compile an executable for you.
If, in addition, you want to compile a plugin for Crystal Space, you
have to change these variables:

@itemize
@item
@samp{PLUGIN} should be the name of your plugin. The .dll suffix
is automatically appended if needed on the platform.
@item
@samp{PLUGIN.OBJSRC} should point to the source code of your plugin.
@item
@samp{PLUGIN.LINKFLAGS} should be modified to list all the Crystal Space 
libraries that you want to use for your plugin.
@end itemize

@subsubheading Larger Changes to the Makefile

If you do not wish to make an executable at all, delete, or comment 
out with a @samp{#} sign the following lines:

@itemize
@item
@samp{EXECUTABLE=} ..., comment or delete this line.
@item
@samp{OBJSRC=} ..., comment or delete this line.
@item
@samp{OBJS=} ..., comment or delete this line.
@item
@samp{LINKFLAGS =} ..., comment or delete this line.
@item
@samp{all: $(CSCONFIG.MAK) $(EXECUTABLE) $(PLUGIN)} change this line to read:
@samp{all: $(CSCONFIG.MAK) $(PLUGIN)}.
@item
@samp{$(EXECUTABLE): } ... and its following line 
@samp{$(DO.EXEC)} need to be commented out or deleted.
@item
@samp{$(RM) $(OBJS) $(PLUGIN.OBJS)} change this to read:
@samp{$(RM) $(PLUGIN.OBJS)}.
@item
@samp{gcc -MM $(CXXFLAGS $(OBJSRC) > makefile.dep} remove this line, and 
in the next line change @samp{>>} to @samp{>}.
@end itemize

If, on the other hand you wish to compile only an application executable,
and not a plugin, do the following:

@itemize
@item
@samp{PLUGIN=} ..., comment or delete this line.
@item
@samp{PLUGIN.OBJSRC=} ..., comment or delete this line.
@item
@samp{PLUGIN.OBJS=} ..., comment or delete this line.
@item
@samp{PLUGIN.LINKFLAGS =} ..., comment or delete this line.
@item
@samp{all: $(CSCONFIG.MAK) $(EXECUTABLE) $(PLUGIN)} change this line to read:
@samp{all: $(CSCONFIG.MAK) $(EXECUTABLE)}.
@item
@samp{$(PLUGIN): } ... and its following line 
@samp{$(DO.PLUGIN)} need to be commented out or deleted.
@item
@samp{$(RM) $(OBJS) $(PLUGIN.OBJS)} change this to read:
@samp{$(RM) $(OBJS)}.
@item
@samp{gcc -MM $(CXXFLAGS $(PLUGIN.OBJSRC) >> makefile.dep} remove this line.
@end itemize

Note that the difference between compiling an executable and a plugin
is the change of @samp{$(DO.EXEC)} to @samp{$(DO.PLUGIN)}, and vice
versa. Of course, an application must have a main routine and initialize
Crystal Space, and a plugin needs to declare its SCF class table and
interfaces.

@subsubheading Using the Makefile

If you installed Crystal Space (usually in @file{/usr/local/crystal}), then
this is all you need to do.  If not, then you must set the @samp{CRYSTAL}
environment variable to point to the location where Crystal Space
resides.  For instance, using the Bourne shell, you can do this with the
following command:

@example
export CRYSTAL=/home/cs_user/CS
@end example

The following targets are supported by this makefile:

@itemize
@item
@samp{all} builds the application.
@item
@samp{depend} calculates dependency information.
@item
@samp{clean} removes object files and other detritus.
@end itemize
