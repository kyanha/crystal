@c -*-texinfo-*-
@node Directory Hierarchy, Requirements, Building, Building
@section Directory Hierarchy
@cindex Directory Hierarchy
@cindex Hierarchy, Directory

@noindent
@emph{Written by Thomas Hieber, @email{thieber@@gmx.net}.  Last updated 21 June
2002 by Chris Forno, @email{jcore@@arbornet.org}.}

This section is intended to explain the general CS directory structure. It
lists all the directories, however some may be missing from your copy of
Crystal Space if you just downloaded the files for a specific port like
Linux or Win32.

Crystal Space consists of the following directories:

@c --------------------------------------------------------------------------
@c Most directories should get a very short note and a link to their real
@c documentation.
@c --------------------------------------------------------------------------
@table @code
@item CS
The main directory for Crystal Space.  You can choose any path for it, as long
as it is supported by your operating system.  This is the path that all
compiled programs end up in.  This should be your working directory for these
executables.  The two files @file{vfs.cfg} and @file{scf.cfg} also reside in
this directory.

@item CS/out
This directory is used by the build process. It will contain all object,
dependency, and other files needed for building the Crystal Space
applications, libraries, and plugins.

@item CS/apps
This is where all applications which ship with Crystal Space reside.
@xref{Applications}.

@table @code
@item CS/apps/tests
Applications for testing specific features of the project reside here.
@end table

@item CS/bin
Some scripts to support the build process on various platforms.

@item CS/data
Here you should place your levels like @file{flarge.zip}. You can use any
directory for this, so this is only a suggestion. If you change the name, you
must update the information in the configuration for the Virtual File System,
(@file{vfs.cfg}).

@item CS/data/config
Most applications and plugins utilize a (@file{.cfg}) file.  For convenience
they are all grouped here.

@item CS/docs
The root of the Crystal Space documentation hierarchy.  There are several
subdirectories.

@table @code
@item CS/docs/texinfo
Texinfo is the master format for all Crystal Space documentation.  This
directory and its subdirectories contain all of the Texinfo source and images
which comprise the Crystal Space manual.  Most users need not concern
themselves with this directory since the Texinfo documentation is
automatically converted to @sc{html} which is more accessible to the general
user.  Documentation writers and maintainers may be interested in this
directory.

@item CS/docs/html
This directory contains the @sc{html} conversion of the Texinfo Crystal Space
documentation.  Most users will want to look at the file
@file{CS/docs/html/index.html} that resides here.

@item CS/docs/pubapi
This directory contains the Crystal Space @sc{sdk}'s public @sc{api} reference
manual rendered in @sc{html} format.

@item CS/docs/support
This directory contains support scripts and templates for automatically
generating documentation.
@end table

@item CS/include
Here are the headers that can be used from other modules. The path for the
headers reflect the structure of the modules in the @file{CS/lib} directory. So
for further explanation of a specific directory see the @file{CS/lib} section.
Include files which live in this directory itself (i.e. not deeper in the
hierarchy) contain definitions for @sc{scf} interfaces.
@xref{SCF}.

@item CS/libs
Here is where all the modules provided by Crystal Space live. Some modules will
consist of only one subdirectory, others will be a combination of several
subdirectories.

@table @code
@item CS/libs/csengine
The 3D engine is one of the cornerstones of Crystal Space and also what
originally sparked the birth of the Crystal Space project.  It needs the 3D
rasterizer component to display output and also requires a number of other
libraries (csutil, csgeom, csgfxldr).  The 3D engine exports a number of
@sc{scf} interfaces to allow access through the @sc{scf} mechanism.

@table @code
@item CS/libs/csengine/basic
Collections, movable sector list, polygon edges
@item CS/libs/csengine/light
Lighting system
@item CS/libs/csengine/objects
Things and mesh objects
@item CS/libs/csengine/polygon
Polygons and portals
@end table

@item CS/libs/csgeom
The geometry library. Various geometry related functions and classes can be
found here: matrices, vectors, transforms, clipper, planes, etc.

@item CS/libs/csgfx
The graphics library. Here you will find bumpmapping, mipmapping, quantizers,
and routines to support loading an image file (through the various image
loading plug-ins).

@item CS/libs/cssys
All system-dependent source and make files (non-graphics and non-sound related)
are located here.

@table @code
@item CS/libs/cssys/general
Code which may be shared between system drivers that can make use of it.
@item CS/libs/cssys/djgpp
@sc{dos} using the @sc{djgpp} compiler
@item CS/libs/cssys/next
MacOS/X, MacOS/X Server 1.0 (Rhapsody), OpenStep, and NextStep
@item CS/libs/cssys/os2
@sc{os/2}
@item CS/libs/cssys/unix
Unix, Linux, FreeBSD, NetBSD, Solaris, Irix, etc.
@item CS/libs/cssys/win32
Windows 32-bit (9x, @sc{nt}, @sc{me}, 2000, @sc{xp})
@end table

@item CS/libs/cstool
This library contains low-level code that the rest of Crystal Space depends on.
It includes procedural textures, a video preference manager, 2D animations,
key-value pairs, screen effects, map nodes, and more.

@item CS/libs/csutil
This library contains various utilities.  The utilities include an archiver,
configuration manager, virtual clock, scheduler, strings, hash maps, @sc{scf}
(@pxref{SCF}), @sc{md5} algorithm, map file parser, command-line parser, event
structures, and many others.

@item CS/libs/csws
The Crystal Space Windowing System which is nicely integrated with Crystal
Space and is also platform independent.
@end table

@item CS/mk
This directory contains the common parts of the makefiles for many systems

@table @code
@item CS/mk/msvcgen
Component for automatic generation of Visual C++ project files based upon
information gleaned from @sc{gnu} makefiles project-wide.
@item CS/mk/visualc
Project files for Win32 using @sc{msvc} 5.0/6.0
@item CS/mk/visualc7
Project files for Win32 using @sc{msvc} 7.0
@end table

@item CS/plugins
Dynamically loaded plug-ins. Communication with these modules is performed
strictly via @sc{scf} interfaces. @xref{SCF}.

@table @code
@item CS/plugin/aws
Alternate Windowing System

@item CS/plugins/bugplug
Crystal Space Debugger

@item CS/plugins/collide
Collision detection plugins.

@table @code
@item CS/plugins/collide/rapid
This is the @sc{rapid} collision detection plugin.

@item CS/plugins/collide/opcode
This is the Opcode collision detection plugin which is based upon the Opcode
library.
@end table

@item CS/plugins/console
Various console plugins for input/output. A console is typically overlayed
on top of the 3D display.

@item CS/plugins/cscript
The Crystal Script plugins. Crystal Script plugins allow programmers to
interact with the Crystal Space engine in a scripting language.

@table @code
@item CS/plugins/cscript/cslua
Lua @sc{swig} interface

@item CS/plugins/cscript/cspython
Python @sc{swig} interface
@end table

@item CS/plugins/csparser
A plugin which parses @sc{ascii} map files and imports the map into the
3D engine.

@table @code
@item CS/plugins/csparser/services
Crystal Space format loader services (for @sc{cs} World loading).
@end table

@item CS/plugins/culling
visibility culling plug-ins

@table @code
@item CS/plugins/culling/dynavis
Dynavis visibility culling system
@item CS/plugins/culling/frustvis
Frustvis visibility culling system (default culler if no other is selected)
@end table

@item CS/plugins/device
hardware device plugins

@table @code
@item CS/plugins/device/joystick
joystick input support (currently only for Linux)
@end table

@item CS/plugins/engine
The engine plugin: the preferred method of interfacing with the Crystal Space
engine.

@table @code
@item CS/plugins/engine/3d
The main 3D engine

@item CS/plugins/engine/iso
This is an alternative engine used in Crystal Space. It gives an isometric view
instead of a real 3D view. Mesh objects can also work with this engine
with a few limitations (mostly regarding size).
@end table

@item CS/plugins/filesys
filesystem-related plugins

@table @code
@item CS/plugins/filesys/vfs
Virtual Filesystem, @sc{vfs}.  @xref{VFS}.
@end table

@item CS/plugins/font
a collection of font servers

@table @code
@item CS/plugins/font/server/csfont
standard (bitmapped) Crystal Space font server
@item CS/plugins/font/server/freefont
FreeType (version 2) font server
@item CS/plugins/font/server/fontplex
font server multiplexer
@end table

@item CS/plugins/isoldr
the old isometric world loader plug-in

@item CS/plugins/mesh
Various mesh object implementations (@pxref{MeshObject}). For every mesh object
there is typically one implementation in @file{object/} and one or more
loader/saver plugins in @file{persist/}. @file{persist/standard/} is the loader
in Crystal Space format.

@item CS/plugins/motion
Skeletal Motion

@item CS/plugins/net
Network Communications

@table @code
@item CS/plugins/net/driver/ensocket
Ensocket Network Driver

@item CS/plugins/net/driver/socket
@sc{bsd} Sockets Network Driver
@end table

@item CS/plugins/perfstat
Performance Statistics

@item CS/plugins/physics
Plug-ins relating to the physics of motion

@table @code
@item CS/plugins/physics/odedynam
@sc{ode} Dynamics
@end table

@item CS/plugins/reporter
Reporter

@item CS/plugins/sequence
This is the sequence manager which is useful for managing timed sequences
of events such as for demos.

@item CS/plugins/sound
Sound Plugins

@table @code
@item CS/plugins/sound/driver
System-dependent sound drivers.

@table @code
@item CS/plugins/sound/driver/coreaudio
CoreAudio Sound Driver (MacOS/X)
@item CS/plugins/sound/driver/oss
Open Sound System (@sc{oss}) Sound Driver (@sc{unix})
@item CS/plugins/sound/driver/waveoutsd
WaveOut Sound Driver (win32)
@end table

@item CS/plugins/sound/loader
Loaders for various sound file formats.

@item CS/plugins/sound/renderer

@table @code
@item CS/plugins/sound/renderer/arts
aRts Sound Renderer

@item CS/plugins/sound/renderer/common
common sound rendering routines

@item CS/plugins/sound/renderer/ds3d
DirectSound 3D Sound Renderer

@item CS/plugins/sound/renderer/eax
@sc{eax} Sound Renderer

@item CS/plugins/sound/renderer/software
Software Sound Renderer
@end table

@end table

@item CS/plugins/stdrep
Standard Report Listener

@item CS/plugins/video
All plugins directly related to rendering to a video surface

@table @code
@item CS/plugins/video/canvas
The 2D driver component which manages creation of the Crystal Space window
used for rendering and also supports limited 2D drawing capabilities
(including 2D pixmaps). It can be used standalone but it is currently very
limited and not very useful (this may change in the future).

@table @code
@item CS/plugins/video/canvas/allegro
Allegro Game driver

@noindent
@iftex
@code{http://www.talula.demon.co.uk/}@*
@code{allegro/}
@end iftex
@ifnottex
@url{http://www.talula.demon.co.uk/allegro/}
@end ifnottex

@item CS/plugins/video/canvas/asciiart
@sc{ascii} Art driver

@item CS/plugins/video/canvas/common
Common code for 2D drivers

@item CS/plugins/video/canvas/csdive
@sc{os/2} @sc{dive} driver

@item CS/plugins/video/canvas/ddraw
Windows DirectDraw driver

@item CS/plugins/video/canvas/ddraw8
Windows DirectDraw (version 8) driver

@item CS/plugins/video/canvas/directxcommon
Common DirectX (Win32) code

@item CS/plugins/video/canvas/dosraw
@sc{dos} graphics (@sc{bios}-level)

@item CS/plugins/video/canvas/linex
X11 Line3D Driver

@item CS/plugins/video/canvas/macosx
MacOS/X CoreGraphics and OpenGL

@item CS/plugins/video/canvas/memory
Memory driver (render a scene directly to memory)

@item CS/plugins/video/canvas/next
MacOS/X Server 1.0 (Rhapsody), OpenStep, and NextStep drivers

@item CS/plugins/video/canvas/null2d
@sc{null} 2D driver

@item CS/plugins/video/canvas/openglcommon
Common code for all OpenGL 2D drivers

@item CS/plugins/video/canvas/openglos2
OpenGL 2D driver for @sc{os/2}

@item CS/plugins/video/canvas/openglwin
OpenGL 2D driver for Windows

@item CS/plugins/video/canvas/openglx
OpenGL 2D driver for X11

@item CS/plugins/video/canvas/softx
X11 software 2D driver

@item CS/plugins/video/canvas/svgalib
SVGAlib

@item CS/plugins/video/canvas/xextf86vm
X-extension driver (X11)

@item CS/plugins/video/canvas/xextshm
@sc{mit} X-extension shared memory driver (X11)

@item CS/plugins/video/canvas/xwindow
X11 driver
@end table

@item CS/plugins/video/format
Code for playing video files on a surface

@table @code
@item CS/plugins/video/format/avi
Audio-Video Interlace format

@item CS/plugins/video/format/codecs
Video codecs for various formats (currently only @sc{avi})

@table @code
@item codecs/divx4
DivX version 4

@item codecs/opendivx
OpenDivX

@item codecs/rle
Run-Length Encoded
@end table
@end table

@item CS/plugins/video/loader
Loaders for various graphics file formats

@item CS/plugins/video/renderer
The 3D rasterizer component is required by the 3D engine but may also be
used in a standalone environment.  It requires a 2D Driver to function.

@table @code
@item CS/plugins/video/renderer/common
Common code for 3D rasterizers

@item CS/plugins/video/renderer/inf
Infinite 3D renderer

@item CS/plugins/video/renderer/line
Line 3D renderer

@item CS/plugins/video/renderer/null
@sc{null} renderer (required to work with 2D graphics only)

@item CS/plugins/video/renderer/opengl
OpenGL renderer

@item CS/plugins/video/renderer/software
Software (non-accelerated) renderer
@end table
@end table
@end table
@end table
