@c -*-texinfo-*-
@node Win32, NeXT, Unix, Platform Instructions
@subsection Windows
@cindex Windows

@emph{Originally written by Dan Ogles, @email{dogles@@peachtree.com}; updated
by Nathaniel ``Noote'' Saint Martin, @email{noote@@bigfoot.com}; and
Thomas Hieber, @email{thieber@@gmx.net}. 
maintained by Frank O''Connor @email{frank@@oconnors.org};
Last updated 20 January 2000.}

The Windows port of Crystal Space is maintained by Frank O'Connor,
@email{frank@@oconnors.org}.  Crystal Space supports a wide variety of Windows
installations and optional technologies such as DirectInput, DirectX, and
Direct3D.

@menu
* Win32 Quick Start:: Quick Start
* Win32 Workspace:: Workspace
* Win32 FAQ:: Frequently Asked Questions (@sc{faq})
@end menu

@node Win32 Quick Start, Win32 Workspace, Win32, Win32
@subsubsection Quick Start

To compile Crystal Space, you'll have to perform the following steps using
Microsoft Visual C++ 6.0.  If anything doesn't work, see the Win32 @sc{faq},
@ref{Win32 FAQ}.

@enumerate
@item
Load @file{mk/visualc/csall.dsw}.

@item
Make ``grpAll Files'' your active project.

@item
Select menu @emph{Build/Rebuild All}.

@item
After a while the compilation should finish with almost no warnings and no
errors.

@item
Change your settings in @file{cryst.cfg} (included in the ``Configuration
Files'' folder in the CrystalSpace project) to the following (or whatever you
prefer):

@example
DRIVER = crystalspace.graphics3d.software
WORLDFILE = flarge
@end example

This will set up CrystalSpace to run in software mode using the world file
@file{flarge}.  @emph{Make sure that you have downloaded a worldfile from the
Crystal Space Website before this}.  These files are in @sc{zip} format and
should be placed in the @file{$/CS/data} directory.  Do not attempt to extract
this archive---Crystal Space decompresses the @sc{zip} file on the fly.

@item
Open @emph{Project/Settings}, select WalkTest on the left list.  Select the
``Debug'' tab in the register, select category ``General'' and enter the
same directory the @file{exe} sits in as work directory.  If the executable
would be in @file{E:\cvs\Cs\walktest.exe}, you should select @file{E:\cvs\Cs\}
as working directory.  Make sure you do these settings for ``Win32 Debug'' and
``Win32 Release'' (Using the combo box on top of the left list).  Then confirm
the settings by pressing @sc{ok}.  Now select ``WalkTest Files'' in the
Workspace files tab, click the right mouse button and select ``Set as Active
Project''.  Now call @emph{Build/Execute walktest.exe}.  Alternatively, you
can switch to the windows explorer and run @file{walktest}.
@end enumerate

@node Win32 Workspace, Win32 FAQ, Win32 Quick Start, Win32
@subsubsection Workspace

The Crystal Space workspace is divided into several projects.  They all exist
as separate project files (@file{*.dsp}).  All of them are being bound
together by a workspace @file{csall.dsw}.  This workspace will also ensure 
correct linking between the various projects, so you need to use a predefined 
workspace or, if you create your own, you will have to set project 
dependencies right.

Currently the project files are created by using @sc{ms} Visual C++ 6.0. You can
use @sc{msvc} 5.0 but need to create your own workspace to hold the project 
files (@file{*.dsp}).

The workspace uses a prefix system for naming the projects and grouping them. 
There are currently four prefixes in use. The prefix @emph{grp} is used to group 
the projects into the three main categories: Libraries, Plugins, and Applications. 
There is also a special group @emph{grpAll} that contains the three major 
groups @emph{grpLibs, grpApplications, grpPlugins}. These groups hold the following
respectively: 

@enumerate
@item
Projects that output a library (lib) are prefixed with lib. 

@table @code
@item libCSclear
More information on the CrystalClear project can be found at the CrystalClear project page. http://crystalclear.sourceforge.net/ 

@item libCSengine
The core of CrystalSpace 3D engine.

@item libCSgame
A library intended to make creation of games simpler by providing a more game
oriented @sc{api} of the engine.

@item libCSgeom
This library holds commonly used 2D and 3D geometry classes.

@item libCSgfxldr
This library contains the graphic loaders and savers for the various formats.

@item libCSobject
Library that holds csObject implementation.

@item libCSparser
Library contains the components needed to load and parse a map file.

@item libCSphyzik
The Phyziks library is a dynamics modeling and simulation engine. The core of the engine is a numerical integrator that solves the equations of motion for given bodies. Different types of bodies will have different equations of motion. A simple example would be the equations of motion for the center of mass of a rigid body. 

@item libCSscript
Library contains the current simple scripting system.

@item libCSsfxldr
Library is used to load various sound formats.

@item libCSsys
Library contains the platform specific implementation of the CS Engine.

@item libCSterr
Library contains the terrain rendering code.

@item libCStools
Library holds the original statically linked CS Simple Console. New plugin based consoles now exist.

@item libCSutil
Holds the implementation of SCF, and various helper classes.

@item libCSws
The goal of Crystal Space Windowing System (CSWS) is to provide a clean, effective and cross-platform base for creating Crystal Space-related utilites.
@item libCSwin32dll
Handles the dll entry for win32 dll's.

@item libCSwin32exe
Handles the exe entry for win32 exe's.

@end table

@item
Projects that output a plugin (dll) are prefixed with plg. 

@table @code
@item plgCrystalClear
Contains the bulk of the Crystal Clear application framwork.

@item plgCSfont
Font plugin that implements the basic CS fonts.

@item plgCSNetMan

@item plgDirectDraw3dDX61render
DX Render plugin designed to work on DX6.1 and later.

@item plgDirectDraw2D
Canvas driver (2d) designed to run on any version of DX.

@item plgDirectDraw2dDX61
Canvas driver (2d) specifically written for DX6.1 and later.

@item plgDungeon
Random level generator plugin for Crystal Space
Written by Martin Geisse (@email{mgeisse@gmx.net})

@item plgFreeFont
Font plugin that implements the FreeType system for Crystal Space. Allows the use of TrueType fonts in CrystalSpace. (Fonts not provided)

@item plgOpenGL2D
Canvas plugin for OpenGL render to use.

@item plgOpenGLRender
OpenGL renderer plugin.

@item plgSoftwareRender
Software renderer plugin.

@item plgSoundDriverWaveOut
Sound Driver plugin for wav based sound devices.

@item plgSoundRenderDS3D
Sound renderer plugin for the DirectSound 3D API

@item plgSoundRenderSoftware
Software based sound renderer plugin.

@item plgCScon
Plugin containing Funky Console and a standard console implementation.

@item plgCSSocket
Basic Socket based network plugin (cross-platform).

@item plgColDetRapid
Plugin that implements the RAPID system of collision detection.

@item plgMetaBalls
Plugin that encapsulate the MetaBall code. 

@item plgSCFDog
Example plugin for the SCF Tutorial.

@item plgSCFWorm
Example plugin for the SCF Tutorial.

@end table

@item
Projects that output an application (exe) are prefixed with app. 

@table @code
@item appBlocks
A 3D tetris like game built using CS.

@item appCCTest
A test application for the CrystalClear framework.

@item appCSWSTest
A test application for the CSWS subsystem.

@item appDemoNets
A test application for the Networking system.

@item DTSimple
A test application for procedural textures (used to be called Dynamic Textures). 

@item Dungeon
A test application which uses the Random Dungeon Generator (plgDungeon).

@item Map2cs
A convertor to convert Quake map files to Crystal Space.  See docs\map2cs for
details.

@item appMazeD
An editor based on CS and CSWS.

@item appMDS2SPR
A MDL to SPR file converter.

@item appMetademo
A Test app for the MetaBall plugin.

@item appPhyzTest
A test application for libPhyzik.

@item appSCFReg
A scf application for registering dll's and updating SCF.CFG

@item appSCFZoo
A simple application for the SCF tutorial.

@item appShooter
A simple 3d shooter game created in CS.

@item appSimple
The simple application used in the main CS tutorial.

@item appWalkTest
The basic CS test application. Contains many bleeding-edge features of the engine (quite messy). 

@item appNetdrvClient
A test application for the Network subsystem

@item appNetdrvServer
A test application for the Network subsystem

@item appNSTPc
The client side of the NSTP implementation.

@item appNSTPs
The server side of the NSTP implementation.

@item appSquawk
Test application which implemented multiple views.

@end table

@node Win32 FAQ, , Win32 Workspace, Win32
@subsubsection Frequently Asked Questions (@sc{faq})

This is the list of frequently asked questions for the Win32 port of Crsytal
Space.  Please consult this list if you are having difficulty building or
using the project.

@subsubheading General Questions

@itemize @bullet
@item
Q. @emph{How do I compile Crystal Space using Visual C++ 5.0?}

A. @sc{msvc} 5.0 should work, if you have installed the latest Service
Release, and the necessary @sc{sdk}'s (esp.  DirectX.  You will need at least
the DirectX 5.0 @sc{sdk}.  The DirectX runtime version, that is usually
bundled with games will not be enough!).  It should be enough to follow the
steps described in this doc.  If you have further questions, you might want to
contact Brad `GreyBear' Davis (@email{jbdavis@@uswest.net}), as he has
recently reported successful compilation of Crystal Space, using @sc{msvc}
5.0.

@item
Q. @emph{How do I compile Crystal Space using Visual C++ 6.0?}

A. Refer to the Quick Start section, @xref{Win32 Quick Start}.  Be sure to do
exactly what is written there.  If that doesn't work, read on.
@end itemize

@subsubheading Compilation

@itemize @bullet
@item
Q. @emph{I get errors like the following:}

@example
plugins\video\canvas\ddraw61\ig2d.h(14) : error C2061:
  syntax error : identifier 'LPDIRECTDRAW4'
plugins\video\canvas\ddraw61\ig2d.h(16) : error C2061:
  syntax error : identifier 'LPDIRECTDRAWSURFACE4'
@end example

A. You have not installed the correct DirectX @sc{sdk}.  (Or it is not
installed properly, which means manual adjustment of the library and include
directorys in @sc{msvc}.) Either install the @sc{sdk} correctly or unload the
DirectX 6.1 related projects.

@item
Q. @emph{Where are the @file{zlib.h}, @file{png.h} and @file{jpeglib.h} files?}

A. Those files are not part of the Crystal Space project, but they are
required to build it.  You must get a version of the following packages, most
of which can be easily found on the Internet.  You can download precompiled
versions of these libraries or grab the source code and compile it yourself if
you prefer.  @xref{External Libraries}.

The resources from these packages should be placed in the following locations.

@example
CS\libjpeg.dll
CS\png.dll
CS\zlib.dll
CS\include\cssys\win32\jconfig.h
CS\include\cssys\win32\jerror.h
CS\include\cssys\win32\jinclude.h
CS\include\cssys\win32\jmorecfg.h
CS\include\cssys\win32\jpeglib.h
CS\include\cssys\win32\png.h
CS\include\cssys\win32\pngconf.h
CS\include\cssys\win32\zconf.h
CS\include\cssys\win32\zlib.h
CS\libs\cssys\win32\lib\zlib.lib
CS\libs\cssys\win32\lib\png.lib
CS\libs\cssys\win32\lib\libjpeg.lib
@end example

Note that the source code package generally already contains the files from
the @file{include} and @file{libs} directories, so you may not have to bother
with them.  The @sc{cvs} repository contains these files as well.

@item
Q. @emph{Will I need to install additional @sc{sdk}'s?}

A. If you are using @sc{msvc} 6.0 (which is highly recommended), you have all
needed headers and libraries for DirectX 5 and OpenGL installed.  If you want
to use Glide, @sc{eax}, @sc{a3d} or DirectX 6, you will have to download the
@sc{sdk}'s from the appropriate sites.  If you want to just build Crystal
Space using those @sc{api}s, but don't need any documentation or samples, you
can get a minimum version of these @sc{api}s from NooTe's homepage at:

@uref{http://www.multimania.com/noote/CrystalSpace}

Look at the ``Sources'' section.  You will need @sc{a3d} 2.0, @sc{eax} 1.0 and
Glide2x.  Of course, you can also get the full @sc{sdk} at Aureal (@sc{a3d}),
CreativeLabs (@sc{eax}) and 3D/FX (Glide).  You can get the most current
DirectX @sc{sdk} from @uref{http://www.microsoft.com} (but they sometimes
remove it after a while, so you can't be certain.)
@end itemize

@subsubheading Linking

@itemize @bullet
@item
Q. @emph{Where are the files @file{png.lib} and @file{zlib.lib}?}

A. Just look above at the question about @file{zlib.h} and @file{png.h}.
It's the same problem, and if you have already done what is explained there, I
can't do much for you!

@item
Q. @emph{I've got unresolved symbols.}

What kind of symbols?

@itemize @minus
@item
@samp{_png_@dots{}}: That means that you don't link the project with
@file{png.lib}.  Just take a look below where it is explained how to do so.

@item
@samp{_inflate@dots{}} and @samp{_deflate@dots{}}: Well, it seems to your
project lacks @file{zlib.lib}.  The trick is explained just below, so hang on.

@item
@samp{_DirectDraw@dots{}}: Same as above, but for @file{ddraw.lib} (DirectX
component), look below.

@item
Any others: Well, I always have a solution, but this one is more difficult.
It seems that there is a missing source file in your project.  But the
question is, which source file? If it isn't obvious by the name of the
functions, just to the following: In the menu @emph{Edit}, select the option
@emph{Find in Files@dots{}}.  Put the name of the function in the field ``Find
What'', check that the ``In Folder'' field content is the Crystal Space source
directory and press @emph{Find}.  You should get a bunch of files, many of
them just making a call to the function.  But there is surely one which
contains the definition of the function.  Look at the position of the file
where it is defined, and add it to the project (menu @emph{Project/Add To
Project/Files}).

In order to add (or remove) a library for the link process, invoke the
@emph{Project/Settings/Link} menu item, then select the ``General'' category
tab..  There is a field called ``Object/Library Modules'' that lists all the
libraries added to the project at link time.
@end itemize
@end itemize

OK, Now, it should link.  So you should have an executable file called
@file{walktest.exe} in your src directory.  Let's run it!

@subsubheading Miscellaneous

@itemize @bullet
@item
Q. @emph{I just get a Black Screen.}

A. When I start @file{walktest} I just get a black screen, maybe with some
text output, but after a few seconds it drops back to the normal windows
screen without an error.

This shouldn't happen any more, because in most cases now, @file{walktest}
will display proper error messages.  Anyway, you should make sure you have set
an appropriate directory set (see above).  Make sure you have specified the
level in @file{cryst.cfg} as @samp{WORLDFILE=} (also keep in mind, that your
current directory is, where the executable sits.)

@item
Q. @emph{I don't care about @sc{png} support, what can I do?}

A. It's easy.  In the @emph{Project/Settings} panel, choose the ``C/C++''
tab, ``General'' category, select the field ``Preprocessor Definitions'' and
remove @samp{DO_PNG}.  Be sure to remove the @file{png.lib} from the modules
added during link time (see above).

@item
Q. @emph{I don't care about Direct3D support.}

A. Right click on the Direct3DRender project, and click @emph{Unload
Project}.  It won't be compiled any longer after that.  To reload it, right
click on it and click @emph{Load Project}.

@item
Q. @emph{I have a working @sc{jpeg} library, how can I let CrystalSpace use
it?}

A. Add @samp{DO_JPEG} in the same place as above (for @sc{png}).  Be sure to
create the @file{libjpeg} directory (with @file{libjpeg.lib}, @file{jpeg.h},
@file{jerror.h}, @file{jmorecfg.h} and @file{jconfig.h} in it).

@item
Q. @emph{My last update did compile, but now I got a new version from the
@sc{cvs} repository and everthing seems to be broken.}

A. When working with Crystal Space, always keep in mind, that this is a
multiplatform project.  So sometimes not all features will work correct on all
platforms.  Sometimes a specific port may even be broken due to changes in
other ports.  Since the introduction of @sc{cvs} (@pxref{CVS}) this is usually
only for a short time, so if you got your version out of @sc{cvs}, it usually
pays off, to post a message describing the problems to the Crystal Space
Mailing List describing you problem and include the exact error messages.  If
you wait a while, this will probably be fixed, or at least be worked around.
@xref{Mailing Lists}.

@item
Q. @emph{I compile for the first time, and I have a problem that you haven't
solved here!}

A. Try sending a note to the Crystal Space mailing list and asking your
question there.  @xref{Mailing Lists}.  As a last resort, you might also try
contacting me, Thomas Hieber at @email{thieber@@gmx.net}.
@end itemize


