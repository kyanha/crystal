@c -*-texinfo-*-
@node MacOS/9, OS2, NeXT, Platform Instructions
@subsection MacOS/9
@cindex MacOS/9

@noindent
@emph{Written by K.  Robert Bate, @email{rbate@@mac.com}.  Last
updated 8 December 1999.}

The MacOS/9 port of Crystal Space is maintained by K.  Robert Bate.  If you
have any questions or problems, contact him at @email{rbate@@mac.com}.

This port of Crystal Space is based upon the pre-Carbon Macintosh Toolbox API.
Because it utilizes the classic Macintosh API it is suitable for MacOS/9 as
well as possibly earlier releases.  This port of Crystal Space will not work on
MacOS/X since it is not Carbon-compatible

You will need the following to compile Crystal Space:

@enumerate
@item
Compiler: Metrowerks CodeWarrior Pro 4 or later.
@item
Include Files: Universal Includes 3.2 from Apple
@end enumerate

@subsubheading Getting Ready To Develop

If you are going to build the Open GL Renderer you need to download the OpenGL
@sc{sdk} from Apple:

@uref{ftp://ftp.apple.com/developer/opengl/opengl_sdk.hqx}

This will download a self mounting disk image.  Double click on it.  Create a
folder in the @file{Metrowerks CodeWarrior:MacOS Support} folder called
@file{OpenGL SDK}.  Copy the folders @file{Headers}, @file{Libraries} and
@file{Resources} from the @file{OpenGL SDK} disk and place them into the
@file{OpenGL SDK} folder you just created.

@subsubheading Working with the Crystal Space Projects

There are 22 Crystal Space projects in the @file{mwcw} folder:

@noindent
Three projects that build static libraries:

@table @code
@item CSpace.mcp
Generates the static linked library, which includes the majority of the code
for Crystal Space.
@item CSWS.mcp
Generates the static linked library, which includes the code for the Crystal
Space Windowing System.
@item impexp.mcp
Generates the static linked library, which includes the code for the import
and export code.
@end table

@noindent
Seven projects that build shared libraries:

@table @code
@item Driver2D.mcp
Generates the 2D Graphics shared library.
@item SftRndr.mcp
Generates the SoftwareRender shared library, which includes the 3D graphics
driver for software rasterization.
@item OpenGLRndr.mcp
Generates the OpenGL Render shared library.
@item Sound.mcp
Generates the mac sound driver shared library and software sound render shared
library.
@end table

@noindent
Ten projects that generate applications

@table @code
@item Blocks.mcp
A Tetris type game.
@item scfreg.mcp
The application which registers the shared libraries.
@item CSWSTest.mcp
The application which tests the Crystal Space Windowing System.
@item MazeD.mcp
The Crystal Space Editor.
@item MetaDemo.mcp
A meta-balls demo application.
@item Simple.mcp
Simple Crystal Space application.
@item Squawk.mcp
A Crystal Space application.
@item Walktest.mcp
Another Simple Crystal Space application.
@end table

@noindent
Two project that builds other projects

@table @code
@item MakeShared.mcp
Makes sure all of the shared libraries and scfreg are up to date.
@item MakeApps.mcp
Makes sure all of the applications are up to date.
@end table

Generally you will just build an application and all of the other pieces will
be built for you.  All of the resulting libraries and applications will be
placed in the src directory.

@enumerate
@item
Open MakeShared.mcp in CodeWarrior and make it.
@item
This step is optional.  If you find that a plugin module is not properly
registered with SCF, then you may try registering it with the scfreg
application.  To do this, switch back to the finder, select all of the files
that end in @file{.shlb} in the src folder and drop them on the scfreg
application.
@item
Choose an application to build.  I generally start with walktest.  Make it.
@item
Make sure the map file @file{flarge.zip} is in the data folder.
@end enumerate

@noindent
You're all set to run the application.

@subsubheading Frequently Asked Questions (@sc{faq})

@itemize @bullet
@item
Q. @emph{There are a lot of warnings during compile.}

A. Well, that's normal as long as there are no errors.

@item
Q. @emph{What is this ``ignored `fopen' (code) in @code{MSL.C.PPC.Lib}'' link
warning?}

A. In order to keep from changing a lot of Crystal Space to fix the differences
in path separators, I wrote a new version of @code{fopen()} which handles the
path separators then calls the same routines that the @sc{msl} library version
of @code{fopen()} does.  The warning is harmless and you should only worry if
you don't get the warning message.

@item
Q. @emph{What is this ``ignored `fgets' (code) in @code{MSL.C.PPC.Lib}" link
warning?}

A. In order to keep from changing a lot of Crystal Space to fix the
differences in line endings, I wrote a new version of @code{fgets()} which
handles the line endings then calls the same routines that the @sc{msl}
library version of @code{fgets()} does.  The warning is harmless and you
should only worry if you don't get the warning message.

@item
Q. @emph{I need to get to the command line, where is it?}

A. When you launch the application, if you hold down the option key a command
line dialog will pop up.  If the command line that you are typing needs to be
the same all the time, create a @samp{str#} resource with an @emph{id} of 1024
and make the first string in it the command line you want and it will be
automaticly used.  Also, if you drop a text file on the application, the first
255 characters of the file are read and used as the command line.
@end itemize
