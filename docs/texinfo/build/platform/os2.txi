@c -*-texinfo-*-

@macro OSTWO{}
@sc{os}/2
@end macro

@node OS2, MS-DOS, NeXT, Platform Instructions
@subsection @sc{os}/2
@cindex @sc{os}/2

@noindent
@emph{Written by Andrew Zabolotny, @email{bit@@eltech.ru, Andrew Zabolotny}.}

This section contains configuration, compilation, and installation
instructions for the @OSTWO{} port of Crystal Space, which was created, and is
maintained by Andrew Zabolotny (@email{bit@@eltech.ru}).  Details of the
internals of the @OSTWO{} port are also available, @ref{OS2 Details}

Currently Crystal Space compiles under @sc{os}/2 only with @sc{gnu} C/C++
compiler.  Theoretically it can be done with VisualAge and Watcom compilers
(almost) as well, but you will have to do it all yourself.  Besides, currently
assembler optimizations are available only for @sc{gnu} C/C++ compiler (they
uses @sc{gas} syntax) so most likely you anyway will want to use @sc{gcc}.
Also you may consider using Pentium-optimizing @sc{gcc} (@sc{pgcc}) instead of
simple @sc{gcc} which can be found at @uref{http://goof.com/pcg/os2}.  Also
you need the @sc{emx} package; you need at least @sc{emx} tools (like
@file{emximp}), include files and C libraries.

Crystal Space provides support for @sc{mmx} instructions; @sc{gas} 2.6 which
is shipped with as-of-today-latest @sc{emx} 0.9c does not; so you will need
@sc{gas} 2.8.1 or later compiled for @sc{os}/2.  You can find a pre-compiled
binary on the above web page.

Also you will need @sc{gnu} @samp{make} (you should have it already if you're
using @sc{gcc}).  You will also need @sc{gnu} @samp{sed} if you want to make
dependency files (you can get Crystal Space up and running without them as
well, but you will want them if you're going to make changes to source code).
You also will need a Unix-like shell (for example, @samp{bash}) for this since
@file{cmd.exe} locks up with long command lines (Crystal Space sometimes
generates 1@sc{k} and even more!) and redirection.  You will need to use this
shell only when building dependencies.

You will need a Resource Compiler (which is bundled with the @sc{os}/2 itself,
during installation you should click the @samp{Development tools} checkbox or
so).  Also it is available in @sc{os}/2 Toolkit.

@sc{os}/2 makefile allows both Unix-like shells and @sc{os}/2's standard
@file{cmd.exe} to be used.  By default it is configured for cmd.exe since it
is faster.  You can switch shells by changing the @samp{SHELL=} line in
@file{makefile.os2}.

You also will need @sc{ibm} @sc{os}/2 Toolkit for @sc{dive} headers.
Theoretically it can be made with @sc{dive} headers for @sc{emx} which can be
found on several sites.

You will also require @samp{zlib} (de/compression library), @samp{pnglib} (if
you're going to work with @sc{png} files), and @samp{libjpeg} (if you're going
to use @sc{jpeg} format).  @sc{png} and @sc{jpg} support are optional, but
highly recommended.  @xref{External Libraries}.

@subsubheading Compiling the Libraries

You will need to pre-compile at least @samp{zlib} prior to compiling Crystal
Space itself.  In the following I suppose you downloaded all three libraries;
however if you didn't download @samp{libjpeg} or @samp{libpng} simply skip
corresponding instructions.

Find and download (preferably latest) versions of @samp{zlib}, @samp{pnglib}
and @samp{libjpeg}.  Unpack them into the @file{CS/} subdirectory; usually
they unpacks in a directory named something like @file{libjpeg-x.xx} or
@file{zlib-x.xx} where @samp{x.xx} is current version number.  You should
rename them to @file{CS/libs/zlib}, @file{CS/libs/libjpeg} and
@file{CS/libs/libpng} so that Crystal Space will find them.  You should have a
tree like:

The most recent @samp{zlib} and @samp{pnglib} already includes makefiles for
compiling them under @sc{os}/2 with @sc{emx}/@sc{gcc}; even if you got a
library that does not, you can find all required makefiles in
@file{CS/libs/cssys/os2}.  There is a @file{README} file in each directory
which will tell you what you should do; in short, for @samp{zlib}:

@example
cd CS
xcopy /s libs\cssys\os2\zlib zlib
xcopy /s libs\cssys\os2\libpng libpng
xcopy /s libs\cssys\os2\libjpeg libjpeg
@end example

Now you should build each library:

@example
cd zlib
make -f os2/makefile.os2 OMF=0
del *.o
make -f os2/makefile.os2 OMF=1
@end example

You should run @samp{make} twice to build both @file{a.out} format libraries
(@code{OMF=0}) and @sc{omf} libraries (@code{OMF=1}).  You also should delete
@file{.o} files between compilations since in any case makefiles builds
@file{.o} (not @file{.obj}) files; however the final library will have
@file{.lib} or @file{.a} extension depending on format.

After compilation, you will have four copies of the @samp{zlib} library, each
in a different format, as summarized by this table.

@quotation
@multitable @columnfractions .12 .88
@item @code{z.dll} @tab Dynamic library.
@item @code{z.a} @tab Static library in @file{a.out} format.
@item @code{zdll.a} @tab Dynamic import library in @file{a.out} format.
@item @code{z.lib} @tab Static library in @sc{omf} format.
@item @code{zdll.lib} @tab Dynamic import library in @sc{omf} format.
@end multitable
@end quotation

You can leave libraries in their place; you only will need to copy (or move)
@file{z.dll} into a directory somewhere on your @samp{LIBPATH} if you're going
to use dynamic version of @samp{zlib}.  Also you can (but you aren't required
to) copy (or move) @file{.lib} and @file{.a} files into a directory on your
@samp{LIBRARY_PATH} (say @file{f:/emx/lib}) if you're going to use them in
other projects too (or to avoid recompiling zlib upon receiving of future
Crystal Space updates).

Similarly:

@example
cd libpng
make -f makefile.os2 OMF=0
del *.o
make -f makefile.os2 OMF=1

cd libjpeg
make -f os2/makefile.os2 OMF=0
del *.o
make -f os2/makefile.os2 OMF=1
@end example

@unmacro OSTWO
