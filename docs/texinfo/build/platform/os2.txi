@c -*-texinfo-*-
@node OS/2, Macintosh, NeXT, OSSpecific
@subsection OS/2
@cindex OS/2

The OS/2 port of Crystal Space was created, and is maintained by
@email{bit@@eltech.ru, Andrew Zabolotny}.

@menu
* OS2 prereq:: Pre-requisites
* OS2 compile:: Compiling the libraries
@end menu

@node OS2 prereq, OS2 compile, OS/2, OS/2
@subsubsection Pre-requisites

Currently Crystal Space compiles under OS/2 only with GNU C/C++ compiler.
Theoretically it can be done with VisualAge and Watcom compilers (almost) as
well, but you will have to do it all yourself.  Besides, currently assembler
optimizations are available only for GNU C/C++ compiler (they uses GAS
syntax) so most likely you anyway will want to use GCC.  Also you may
consider using Pentium-optimizing GCC (PGCC) instead of simple GCC which can
be found on @uref{http://goof.com/pcg/os2}.  Also you need the EMX package;
you need at least EMX tools (like emximp), include files and C libraries.

Crystal Space provides support for MMX instructions; GAS 2.6 which is
shipped with as-of-today-latest EMX 0.9c does not; so you will need GAS 2.8.1
or later compiled for OS/2.  You can find a pre-compiled binary on the above
Web page.

Also you will need GNU Make (you should have it already if you're using
GCC).  You will also need GNU sed if you want to make dependency files (you
can get CrystalSpace up and running without them as well, but you will want
them if you're going to make changes to source code).  You also will need a
Unix-like shell (for example, BASH) for this since CMD.EXE locks up with long
command lines (CrystalSpace sometimes generates 1K and even more!) and
redirection. You will need to use this shell only when building dependencies.

You will need Resource Compiler (which is bundled with the OS/2 itself,
during installation you should click the @samp{Development tools} checkbox or
so). Also it is available in OS/2 Toolkit.

OS/2 makefile allows both Unix-like shells and OS/2's standard cmd.exe to
be used.  By default it is configured for cmd.exe since it is faster. You can
switch shells by changing the @samp{SHELL=} line in @file{makefile.os2}.

You also will need IBM OS/2 Toolkit for DIVE headers.  Theoretically it can
be made with DIVE headers for EMX which can be found on several sites, for
example on @uref{ftp.leo.org}, but I've never tried it.

You will also require Z-lib (de/compression library) PNGlib (if you're
going to work with PNG files) and libJPEG (if you're going to use JPEG
format).  PNG and JPG support are optional, but highly recommended.

For example, you can look for them at:

@uref{ftp://ftp.uu.net/graphics/png/src}@code{/zlib???.zip} @*
@uref{ftp://ftp.uu.net/graphics/png/src}@code{/lpng???.zip} @*
@uref{ftp://ftp.uu.net/graphics/jpeg}@code{/jpegsrc.???.tar.gz}

@node OS2 compile, , OS2 prereq, OS/2
@subsubsection Compiling the libraries

You will need to pre-compile at least Z-lib prior to compiling
CrystalSpace itself.  In the following I suppose you downloaded all three
libraries; however if you didn't download libjpeg or libpng simply skip
corresponding instructions.

Find and download (preferably latest) versions of Z-lib, PNGlib and
libJPEG; unpack them in the CS/ subdirectory; usually they unpacks in a dir
called somewhat like @file{libjpeg-x.xx} or @file{zlib-x.xx} where x.xx is
current version number.  You should rename them into @file{zlib},
@file{libjpeg} and @file{pnglib} so that CrystalSpace will find them.
You should have a tree like:

@table @file
@item CS/
CrystalSpace project root & source code

@item CS/docs
CrystalSpace documentation

@item CS/libs/zlib
Z-lib library

@item CS/libs/pnglib
PNG library

@item CS/libs/libjpeg
JPEG library

@item ...
(other directories)
@end table

Latest Z-lib and PNGlib already includes makefiles for compiling them
under OS/2 with EMX/GCC; even if you got a library that do not, you can find
all required makefiles in @file{CS/libs/cssys/os2}. There is a @file{README}
file in each directory which will tell you what you should do; in short, for
Z-lib:

@example
cd CS
xcopy /s libs\cssys\os2\zlib zlib
xcopy /s libs\cssys\os2\libpng libpng
xcopy /s libs\cssys\os2\libjpeg libjpeg
@end example

Now you should build each library:

@example
cd zlib
make -f os2/makefile.os2 OMF=0
del *.o
make -f os2/makefile.os2 OMF=1
@end example

You should run MAKE twice to build both @file{a.out} format libraries
(@code{OMF=0}) and @file{OMF} libraries (@code{OMF=1}). You also should
delete @file{.o} files between compilations since in any case makefiles
builds @file{.o} (not @file{.obj}) files; however the final library will
have @file{.lib} or @file{.a} extension depending on format.

After compilation, you will have:
@table @file
@item z.dll
The libZ dynamic library

@item z.a
The libZ static library in a.out format

@item zdll.a
The libZ dynamic import library in a.out format

@item z.lib
The libZ static library in OMF format

@item zdll.lib
The libZ dynamic import library in OMF format
@end table

You can leave libraries in their place; you only will need to copy (or
move) @file{z.dll} into a directory somewhere on your @code{LIBPATH} if
you're going to use dynamic version of Z-lib. Also you can (but you aren't
required to) copy (or move) @file{.lib} and @file{.a} files into a directory
on your @code{LIBRARY_PATH} (say @file{f:/emx/lib}) if you're going to use
them in other projects too (or to avoid recompiling zlib upon receiving of
future CrystalSpace updates).

Similarily:
@example
cd libpng
make -f makefile.os2 OMF=0
del *.o
make -f makefile.os2 OMF=1

cd libjpeg
make -f os2/makefile.os2 OMF=0
del *.o
make -f os2/makefile.os2 OMF=1
@end example
