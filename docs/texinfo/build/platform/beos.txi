@c -*-texinfo-*-

@macro BeOS{}
@sc{b}e@sc{os}
@end macro

@node BeOS, MS-DOS, Macintosh, Platform Instructions
@subsection @sc{b}e@sc{os}
@cindex @sc{b}e@sc{os}

@emph{Written by Eric Sunshine, @email{sunshine@@sunshineco.com}.  Copyright
@copyright{} 1999, 2000 by Eric Sunshine.  Last updated 13 October 2000.}

CrystalSpace is a full-featured 3D graphics engine.  The original @BeOS{}
port was created by Xavier Pianet (@email{xavier@@planet.dk}).  David Huen
(@email{david@@huen.freeserve.co.uk}) performed a small amount of maintenance
after Xavier abandoned the project.  Most recently, Eric Sunshine
(@email{sunshine@@sunshineco.com}) re-engineered the port almost completely
from scratch in order to ensure that all programs compile cleanly and run
properly straight out of the box.  He also heavily updated the accompanying
documentation.

This section contains configuration, compilation, and installation
instructions.  A list of @BeOS{}-specific bugs and future plans is also
presented.  @xref{BeOS Notes}.

It is assumed that you will have obtained a full set of sources at this stage.
Full sources includes the Crystal Space sources as well as those for the
supporting library, @samp{libjpeg}.  After downloading and unpacking the
@sc{jpeg} library into @file{CS/libs/libjpeg}, you can build it by following
these simple instructions:

@example
cd CS/libs/libjpeg
sh ./configure
make libjpeg.a
@end example

Other required libraries, @samp{zlib} and @samp{libpng} are already present on
@BeOS{} 4.5, so there is no need to install them manually.

@menu
* BeOS Building:: Building
* BeOS Running:: Running the Applications
* BeOS Notes:: Final Notes
@end menu

@node BeOS Building, BeOS Running, BeOS, BeOS
@subsubsection Building

You set up the compilation environment by changing to the @file{CS/} directory
in terminal and typing:

@example
make beos
make depend    # @r{Optional.}
@end example

This sets up everything you should need to compile the system.  After this,
the simplest way to build the project is to type:

@example
make -k all
@end example

If you prefer more control over the build process, then you can compile the
various modules separately or in batches.  To compile all the basic drivers
and plug-in modules, type:

@example
make -k plugins
@end example

Or for even more fine-grained control:

@example
make -k drivers2d
make -k drivers3d
make -k netdrivers
make vfs
make csfont
make rapid
make simpcons
make cscon
@end example

The graphics libraries consist of several @BeOS{}-specific 2D drivers and
OS-independent 3D renderer.  You may compile these manually if you like,
though they are normally built as part of the targets already mentioned,
such as @samp{all}, @samp{plugins}, @samp{drivers2d}, @samp{drivers3d}.

@enumerate
@item
Software Renderer

@example
make be2d
make soft
@end example

@item
OpenGL

@example
make glbe2d
make gl3d
@end example

@item
Glide

@example
make glidebe2d
make glide3d2
@end example

@emph{Note}: The Glide2 driver for BeOS is untested---owing to lack of
appropriate hardware on the maintainer's part---however, it does compile.
Also, it is only meaningful to invoke this makefile target if  the
experimental Glide2 support is installed on your BeOS system.
@end enumerate

Finally, if you did not invoke the makefile target @samp{all}, you can build
the example applications manually:

@example
make -k apps
@end example

@node BeOS Running, BeOS Notes, BeOS Building, BeOS
@subsubsection Running the Applications

You will need to have a world file to do anything.  It is suggested that you
download @file{flarge.zip} or any of the other world files offered on the
Crystal Space web site.  Place the downloaded file in the @file{CS/data}
directory.

To use a particular world file, mention it on the command line when invoking
the WalkTest application.  If you wish this file to be used by default, you
may want to edit @file{cryst.cfg} to set the @samp{WORLDFILE} variable to the
chosen file.

@example
WORLDFILE=flarge
@end example

The rest of the settings are mostly self evident and can often be overridden
at the command line.

You may want to switch to a different workspace and set the screen resolution
to something like 800*600, 16 bit, though this is not strictly necessary.

From @samp{Terminal} within this workspace, change to the @file{CS/} folder
and type:

@example
walktest
@end example

This will run the WalkTest example program with the settings from the
@file{cryst.cfg} file (usually using software renderer, though you can change
this).  Alternately you can choose the driver by specifying the @samp{-driver}
keyword on the command-line:

@example
walktest -video=software  # @r{Runs in software mode}
walktest -video=opengl    # @r{Runs in OpenGL mode}
walktest -video=glide     # @r{Runs in Glide mode}
@end example

If you are using the OpenGL renderer, then invoking @kbd{@key{ALT}-f} will
switch in and out of full screen.

Note that walktest requires a good world file to show off effectively (like
@file{flarge.zip}).  Make sure that @file{cryst.cfg} is correctly set to
identify this file or type it on the command line:

@example
walktest flarge
@end example

You may have to adjust the @samp{Ambient.White} level in
@file{data/config/cryst.cfg} if the maps appear too dark.  After adjusting
the ambient level, specify @samp{-relight} on the command-line to instruct
Crystal Space to recalculate the lighting information.

@example
walktest -relight flarge
@end example

Other interesting example applications which you can run are @file{blocks},
@file{metademo}, @file{shooter}, and @file{mazed}.

@node BeOS Notes, , BeOS Running, BeOS
@subsubsection Final Notes

This section lists future plans as well as problems or potential problems with
the @BeOS{} port of Crystal Space.

@itemize @bullet
@item
Now that the engine supports window resizing, the @BeOS{} 2D drivers should
also support this feature.  Also enable the ``zoom'' button on the window.

@item
Pause when not foreground application.  Make sure that screen redraws
correctly even when paused.

@item
Add full-screen support for software mode.  Be careful about the resolution,
since Crystal Space can use any arbitrary window dimension.

@item
The various 2D graphics drivers (software, OpenGL, Glide) should all be
derived from a common class rather than being nearly identical copies of one
another.

@item
Technically, the software and Glide 2D drivers should be employing
double-buffering since a @dfn{window-exposed} event in the subthread which is
running the @samp{BApplication} will draw using the @samp{BBitmap} even though
the main thread in which Crystal Space is running may be in the process of
updating the bitmap.  This thread-@emph{unsafe} behavior could lead to visual
anomalies.

@item
Not all key combinations generate @code{KeyDown()} and @code{KeyUp()} events,
yet Crystal Space applications may want to intercept them.  For instance,
MazeD expects to responds to the keystrokes @kbd{@key{CTRL}-1},
@kbd{@key{CTRL}-2}, etc., yet these key combinations are not seen by the
system driver since @code{KeyUp()} and @code{KeyDown()} are never called in
the canvas view subclasses  To fix this, it should be possible to intercept
such keystrokes in @code{MessageReceived()} within each BView subclass in
the 2D driver and respond directly to the @samp{B_UNMAPPED_KEY_DOWN} and
@samp{B_UNMAPPED_KEY_UP} messages.

@item
Consider using @samp{DirectWindow} rather than @samp{DirectBitmap} where
supported since @samp{DirectWindow} puts much less load on the @sc{cpu}.
Auto-detect if @samp{DirectWindow} is available and use it if so.  Note,
though, that David Huen says this might not be worthwhile on account of the
fact that the software renderer reads from the frame buffer, and this can be a
slow operation on some hardware.

@item
It is possible to depress the window's close button while Crystal Space is
still initializing, however the close button is ignored until the Crystal
Space event loop is activated---at which time Crystal Space processes the
window-close event.  It might be worthwhile to offer the user the option to
forcibly kill the application in this case, but at the very least the user
must be warned that doing so might corrupt data on disk (for instance, if
the engine is updating a @sc{zip} file on a @sc{vfs} volume.

@item
Ked Shayer (@email{c.shayer2@@ukonline.co.uk}) suggests using @sc{nasm} for
the assembler code.
@end itemize

@unmacro BeOS
