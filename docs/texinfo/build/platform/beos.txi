@c -*-texinfo-*-
@node BeOS, MS-DOS, Macintosh, OSSpecific
@subsection BeOS
@cindex BeOS

CrystalSpace is a full-featured 3D graphics engine and the BeOS port was
originally created by Xavier Pianet.  David Huen performed a small amount of
maintenance after Xavier abandoned the project.  Most recently,
@email{sunshine@@sunshineco.com, Eric Sunshine} significantly cleaned up and
almost totally re-engineered the BeOS port, ensuring that all programs compile
cleanly and run properly right out of the box.  He also heavily updated the
accompanying documentation.

It is assumed that you will have obtained a full set of sources at this stage.
Full sources includes the Crystal Space sources as well as those for the
supporting library, @samp{libjpeg}.  After downloading and unpacking the
@sc{jpeg} library into @file{CS/libs/libjpeg}, you can build it by following
these simple instructions:

@example
cd CS/libs/libjpeg
sh ./configure
make libjpeg.a
@end example

Other required libraries, @samp{zlib} and @samp{libpng} are already present on
BeOS 4.5, so there is no need to install them manually.

@menu
* BeOS settings::
* BeOS Program settings:: Program settings
* BeOS testing:: Testing
* BeOS To-Do and Bug List:: To-Do and Bug List
@end menu

@node BeOS settings, BeOS Program settings, BeOS, BeOS
@subsubsection BeOS settings

You set up the compilation environment by changing to the @file{CS/} directory
in terminal and typing:

@example
make beos
make depend    # Optional.
@end example

This sets up everything you should need to compile the system.  After this,
the simplest way to build the project is to type:

@example
make all
@end example

If you prefer more control over the build process, then you can compile the
various modules separately or in batches.  To compile all the basic drivers
and plug-in modules, type:

@example
make plugins
@end example

Or for even more fine-grained control:

@example
make drivers2d
make drivers3d
make netdrivers
make cscon
@end example

The graphics libraries consist of several BeOS-specific 2D drivers and
OS-independent 3D renderer.  You may compile these manually if you like,
though they are normally built as part of the targets already mentioned,
such as @samp{all}, @samp{plugins}, @samp{drivers2d}, @samp{drivers3d}.

@enumerate
@item
Software Renderer.

@example
make be2d
make soft
@end example

@item
OpenGL.

@example
make glbe2d
make gl3d
@end example

@item
Glide.  @strong{Warning}: @emph{The Glide driver is currently broken.  Do not
use these commands.}

@example
make glidebe2d
make glide3d
@end example
@end enumerate

Finally, if you did not invoke the makefile target @samp{all}, you can build
the example applications manually:

@example
make apps
@end example

@node BeOS Program settings, BeOS testing, BeOS settings, BeOS
@subsubsection Program settings

You will need to have a world file to do anything.  It is suggested that you
download @file{flarge.zip} or any of the other world files offered on the
Crystal Space web site.  Place the downloaded file in the @file{CS/data}
directory.

To use a particular world file, mention it on the command line when invoking
the WalkTest application.  If you wish this file to be used by default, you
may want to edit @file{cryst.cfg} to set the @samp{WORLDFILE} variable to the
chosen file.

@example
WORLDFILE=flarge
@end example

The rest of the settings are mostly self evident and can often be overridden
at the command line.

@node BeOS testing, BeOS To-Do and Bug List, BeOS Program settings, BeOS
@subsubsection Testing

You may want to switch to a different workspace and set the screen resolution
to something like 800*600, 16 bit, though this is not strictly necessary.

From Terminal within this workspace, change to the @file{CS/} folder and type:

@example
walktest
@end example

This will run the WalkTest example program with the settings from the
@file{cryst.cfg} file (usually software renderer).  Alternately you can
choose the driver by specifying the @code{-driver} keyword:

@example
walktest -video=software  # Runs in software mode.
walktest -video=opengl    # Runs in OpenGL mode.
walktest -video=glide     # Runs in Glide mode (currently broken).
@end example

Alt-f will switch you in and out of full screen.  (Note, the software driver
does not currently implement full screen mode, though OpenGL does.)

Note that walktest requires a good world file to show off effectively (like
@file{flarge.zip}).  Make sure that cryst.cfg is correctly set to identify
this file or type it on the command line:

@example
walktest flarge
@end example

You may have to adjust the @samp{AMBIENT_WHITE} level in @file{cryst.cfg} if
the levels appear too dark.  After adjusting the ambient level, specify
@code{-recalc} on the command line to instruct Crystal Space to recalculte
the lighting information.

@example
walktest -recalc flarge
@end example

Other interesting example applications which you can run are blocks, metademo,
shooter, and mazed.

You should be able to start experimenting with the BeOS port at this stage.

There may well be mistakes in this document.  Please feel free to correct
them and send the text to one of the port maintainers:

Eric Sunshine (@email{sunshine@@sunshineco.com}),@*
Jorrit Tyberghein (@email{Jorrit.Tyberghein@@uz.kuleuven.ac.be}), or possibly@*
David Huen (@email{david@@huen.freeserve.co.uk}).

@node BeOS To-Do and Bug List, , BeOS testing, BeOS
@subsubsection To-Do and Bug List

Here is the list of BeOS-specific bugs and To-Do items compiled by
Eric Sunshine.  These items are addressed as time permits.

@itemize @bullet
@item
The BeOS system driver should determine the directory in which the
application resides, and set that as the current working directory. This
would (presumably) allow the programs to be launched from the Tracker
application by merely double-clicking on them.

@item
Add full-screen support for the software renderer.  Be careful about the
resolution, since CS can use any arbitrary window dimension.

@item
Application should be able to redraw rendering window when BeOS asks
for a redraw even if CS is busy (that is, not pushing out a continuous
stream of frames). There are already cases where this is needed, and will
be very important when a pause feature is added.

@item
Pause when not foreground application. Make sure that screen redraws
correctly even when paused.
@end itemize

@strong{IGNORE}: @emph{This text is from an earlier edition of this
documentation and is now mostly inaccurate and obsolete, and will be removed
in the future.}

As it currently stands, the Glide renderer can be activated by the following
steps.

To get the search paths correct, you need to comment out the following in the
makefile:
@example
CFLAGS.GLIDE3D+=-I/usr/local/glide/include -DDO_GLIDE -DGLIDE24_ONLY
LIBS._GLIDE3D+=-lglide2x
@end example
and add instead
@example
LIBS._GLIDE3D+=/boot/develop/lib/x86/glide2x.so
@end example

You will also need to comment out the following line in @file{glrender.mak}:
@example
LIBS._GL3D+=-L$(X11_PATH)/lib -lXext -lX11
@end example
<<< IGNORE: THIS SECTION WILL SOON BE OBSOLETE <<<
