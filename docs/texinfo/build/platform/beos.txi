@node BeOS
@subsection BeOS
@cindex BeOS

CrystalSpace is a full-featured 3D graphics engine and the BeOS port was
originally created by Xavier Pianet.  David Huen performed a small amount
of maintenance after Xavier abandoned the project.
Most recently, @email{sunshine@@sunshineco.com, Eric Sunshine} significantly
cleaned up and re-engineered the BeOS port, ensuring that all programs
compile cleanly and run properly right out of the box. He also heavily
updated the accompanying documentation.

Here is the list of BeOS-specific bugs compiled by Eric Sunshine.
These bugs are being actively eradicated.

@itemize @bullet
@item
The BeOS system driver should determine the directory in which the
application resides, and set that as the current working directory. This
would (presumably) allow the programs to be launched from the Tracker
application by merely double-clicking on them.

@item
Add full-screen support. Be careful about the resolution, since CS can
use any arbitrary window dimension.

@item
Application should be able to redraw rendering window when BeOS asks
for a redraw even if CS is busy (that is, not pushing out a continuous
stream of frames). There are already cases where this is needed, and will
be very important when a pause feature is added.

@item
Pause when not foreground application. Make sure that screen redraws
correctly even when paused.
@end itemize

It is assumed that you will have obtained a full set of sources at this
stage. Full sources includes the Crystal Space sources as well as those for
the supporting library, libjpeg. After installing the JPEG library, you can
build it by follow these simple instructions:

@example
cd CS/libs/libjpeg
sh ./configure
make libjpeg.a
@end example

Other required libraries, zlib and libpng are already present on BeOS 4.5,
so there is no need to manually install them.

@node BeOS settings
@subsubsection BeOS settings

You set up the compilation environment by going into the @file{CS/} directory
in terminal and typing:
@example
make beos
make depend    # Optional.
@end example

This sets up everything you should need to compile the system.  After this,
the simplest way to build the project is to type:

@example
make all
@end example

If you prefer more control over the build process, then you can compile the
various modules separately or in batches.  To compile all the basic drivers:

@example
make netdrivers
make snddrivers
@end example

Note that sound has not yet been implemented in the BeOS port, so this just
builds null sound driver.

The graphics libraries consist of a OS-specific 2D driver and a
OS-independent 3D renderer.  To get:

1) software renderer
@example
make be2d
make soft
@end example

2) OpenGL
@example
make glbe2d
make glrender
@end example

>>> GLIDE IS CURRENTLY BROKEN >>>@*
3) Glide
@example
make glidebe2d
make glide3d
@end example
<<< GLIDE IS CURRENTLY BROKEN <<<@*

Finally, to build the example applications:

@example
make apps
@end example

@node BeOS Program settings
@subsubsection Program settings

You will need to have a world file to do anything.  I suggest downloading
@file{flarge.zip}. Place this file in the @file{CS/data} directory.

Edit @file{cryst.cfg} to set the world file accordingly (used by walktest):
@example
WORLDFILE=flarge
@end example

The rest of the settings are mostly self evident and can often be overridden
at the command line.

@node BeOS testing
@subsubsection Testing

You may want to switch to a different workspace and set the screen resolution
to something like 800*600, 16 bit, though this is not strictly necessary.

Form Terminal within this workspace, go to the @file{CS/} folder and type:
@example
walktest
@end example

This will run the WalkTest example program with the settings from the
@file{cryst.cfg} file (usually software renderer).  Alternately you can
choose the driver by specifying the @code{-driver} keyword:

@example
walktest -video=software  # Runs in software mode.
walktest -video=opengl  # Runs in OpenGL mode.
walktest -video=glide  # Runs in Glide mode.
@end example

Alt-f will switch you in and out of full screen.  (Note, the software driver
does not currently implement full screen mode.)

Note that walktest requires a good world file to show off effectively (like
@file{flarge.zip}).  Make sure that cryst.cfg is correctly set to identify
this file or type it on the command line:

@example
walktest flarge
@end example

You may have to adjust the @samp{AMBIENT_WHITE} level in @file{cryst.cfg} if
the levels appear too dark.  After adjusting the ambient level, specify
@code{-recalc} on the command line, as in:

@example
walktest -recalc flarge
@end example

Other interesting example applications which you can run are blocks,
metademo, shooter, and mazed.

You should be able to start experimenting with the BeOS port at this stage.

There may well be mistakes in this document.  Please feel free to correct
them and send the text to one of the port maintainers, such as
Eric Sunshine     (@email{sunshine@@sunshineco.com}),
David Huen        (@email{david@@huen.freeserve.co.uk}), or
Jorrit Tyberghein (@email{Jorrit.Tyberghein@@uz.kuleuven.ac.be}).

>>> IGNORE: THIS SECTION WILL SOON BE OBSOLETE >>>
As it currently stands, the Glide renderer can be activated by the following
steps.

To get the search paths correct, you need to comment out the following in the
makefile:
@example
CFLAGS.GLIDE3D+=-I/usr/local/glide/include -DDO_GLIDE -DGLIDE24_ONLY
LIBS._GLIDE3D+=-lglide2x
@end example
and add instead
@example
LIBS._GLIDE3D+=/boot/develop/lib/x86/glide2x.so
@end example
  
You will also need to comment out the following line in @file{glrender.mak}:
@example
LIBS._GL3D+=-L$(X11_PATH)/lib -lXext -lX11
@end example
<<< IGNORE: THIS SECTION WILL SOON BE OBSOLETE <<<
