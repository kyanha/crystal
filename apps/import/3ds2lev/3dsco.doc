Note from Jorrit Tyberghein:
This is the original document from the 3dsco20.zip archive
from which this source was derived. The version of the 3DS
reader you find here has been completely modified for Crystal
Space and only roughly resembles the original version. Output
conversions for the other formats have been removed.




  3D Studio (Autodesk Ltd) objectfile loader/converter
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

						by
                        
              Mats Byggmastar aka. MRI
               (3D-coder in Doomsday)

                  Tue 7 May  1996
                   Espoo Finland

           This material is not copyrighted.
          If you find anything useful in it,
                use it and be happy!

             If you see me on #coders you
              could say hello though :-)
                    (helloware)


  What this program does
  ~~~~~~~~~~~~~~~~~~~~~~
    This program is a tool that can import 3D Studio objects (.3DS) into e.g.
    demos and games. Some simpler optimizations can be done on the loaded
    objects before outputting them in either C++ source, ASM source or as a
    binary file. The x,y,z,u,v values for the vertices are outputted as 16
    bit integers (as my object space is only 16 bit).

  About the source
  ~~~~~~~~~~~~~~~~
    This version is written completly from scratch but based om my old 
    converter that has been used for some time now. The old converter could
    only load .ASC files. Anyone who has worked with these files knows that
    they get wery big and 3D Studio takes wery long time loading them.
    Because of this they are a real pain to work with (they are simple to
    understand though).

    This 3DS data loader is pretty generic and can easely be expanded to load
	more of the 3DS data-chunks. Object name, vertices, mapping coordinates,
	faces + flags and transformation matrix for each object is currently
	supported. Data can be loaded from a file or from memory. The loader is
    based on Jare's (Iguana) code but this one is not recursive.

	The converter on the other hand is pretty much for my own personal use.
	All vertices (and mapping coordinates) in all objects are collected to
    one big array that can be "optimized" i.e. duplicated and unused vertices
	removed. Null faces are also removed (i.e. triangles that are only a line
	or a point, really small triangles that is).

	The vertices are treated as one big chunk but the faces are kept separate
	for each object. This is so that the 3D engine later on can rotate and
	move the objects as one big object. The faces for each "subobject" can on
	the other hand be sorted and plotted separately.

	You do know that you can split a big object in 3D Studio into smaller
	objects by selecting those faces you want to detach and then select
    create/face/detach from the menu. This way you will get duplicated
    vertices where the new object connects with the old. It's these vertices
    that the converter can remove. To me this means that I can smoothly
    Phong-shade over from one object to the next because the two objects
    share the same lightvectors where they connect. Also, removing duplicated
    vertices vill obviously give you less vertices to rotate. The time spent
    rotating objects is only a small part of the total rendering time though
    (to me that is 3-15% for a typical scene).

    The output from the converter can be in either C++ source, Assembly
    source or as a binary file (that can be patched to the executable or
    loaded separately at runtime). See 3DSOUT.CPP

	The format of the output data is in raw form that I expand at runtime
    setup to a full 3D object structure, that my 3D engine can understand.
    (i.e. indexes turned into pointers, normal vectors calculated etc.). This
    raw form might not be of any use to you but the base is there and it
    should be pretty simple to modify it.

  Compiling the source
  ~~~~~~~~~~~~~~~~~~~~
	A general rule is that you should throw in as many optimization switches
	as you can find on your compiler. The converter has lots of nested loops
	wich makes it slow. But do be careful about adding optimization switches
	that might try to align or alter the datastructures. We don't want that
    to happen. I had these kind of problems with the GNU compiler. The
    compiler always altered a datastructure so that each variable was aligned
    on dword boundary. I had to split the structure to avoid it.

    Anyway, the source has been compiled successfully with the following
    compilers and switches:

	Watcom C/C++ 10.0  (DOS 32bit protected mode, flat model)
      wcl386 -oneatx -5r -fp5 3dsco.cpp

	Borland C/C++ 3.1  (DOS 16bit real mode, large model)
      bcc -ml -3 -O2 -f287 3dsco.cpp

    GNU C/C++ 2.6  (Linux, cool model)
      g++ -O3 -o 3dsco 3dsco.cpp

    (There is a simple makefile included. Modify it to suit your compiler.)

  Why this material is released
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	The 3DS loading specific code is based on 3DSRDR10.C by Jare/Iguana found
	at x2ftp.oulu.fi and also on 3DSFORM.TXT by Jim Pitts (jp5@ukc.ac.uk)
	found at the same place. Jare writes in his source:
       "If you decide to work on this further, please make your findings
        public like we have already done, ok? Upload it to x2ftp.oulu.fi,
        THE place for programming info."

  Files that should be in this package
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    3DSLOAD.CPP   - 3DS loader source
    3DSLOAD.H     - Include file for the above
    3DSCO.CPP     - Object converter/optimizer source
    3DSOUT.CPP    - Object output source
    MAKEFILE      - Makefile for all sources. (use WMAKE or MAKE to compile)
    3DSCO.DOC     - This file
    3DSCO.TXT     - Short description 
    FILE_ID.DIZ   - What's DIZ ID FILE for?

  Who I am
  ~~~~~~~~
	I'm a 24 year old natural born coder just finnishing my studies at the
	Swedish Institute of Technology in Espoo, Finland. I'll graduate as an
    telecommunication and computer engineer in about a month. My interests
	lies in coding realtime 3D graphics for the PC platform in C/C++ and
	Assembly wich I've been doing for 3 years now. Even though I'm born and
	breed in Finland I speek Swedish. Heh, I just had to say that.

  Contact info
  ~~~~~~~~~~~~
    Don't know how long they'll let me keep these accounts at school:
	  mri@penti.sit.fi
      (byggmasm@stud.sit.fi)
	  http://www.sit.fi/~mri
	The following address will probably be longer lasting.
	(thanks to Jimmen who let's me have it for free :)
	  mri@surfnet.fi

  Greetings
  ~~~~~~~~~
     LoZEr, FatPhil, JCK, Jimmen
     Doomsday: Addict, Damac, Dice, Doom, Swallow
     #coders: BX, Nix_LD, MacFeenix
