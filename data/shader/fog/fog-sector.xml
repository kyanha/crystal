<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />

    <input name="litColor" type="rgba" />
    <input name="Position" type="position4_object" />
    
    <block location="cg:vertexIn">
      <uniform type="float4" name="fogPlaneS" />
      <uniform type="float4" name="fogPlaneT" />
    </block>

    <block location="cg:vertexIn">
      <uniform type="float4x4" name="ModelView" binding="state.matrix.modelview" />
    </block>
    
    <block location="cg:fragmentIn">
      <uniform type="tex2d" name="fogTex" />
      <uniform type="rgb" name="fogColor" />
    </block>
    
    <block location="cg:vertexToFragment">
      <?if vars."fog density".float &gt; 0 ?>
	float2 fogTC;
      <?endif?>
    </block>
    
    <block location="cg:vertexMain">
      <?if vars."fog density".float &gt; 0 ?>
	// @@@ FIXME: let coercion do the magic here, really.
	float4 eyePos = mul (vertexIn.ModelView, Position);
	vertexToFragment.fogTC.x = dot (eyePos, vertexIn.fogPlaneS);
	vertexToFragment.fogTC.y = dot (eyePos, vertexIn.fogPlaneT);
      <?endif?>
    </block>
    
    <block location="cg:variablemap">
      <?if vars."fog density".float &gt; 0 ?>
	<variablemap variable="fog color" destination="fragmentIn.fogColor" />
	<!-- See the glshader_fixed plugin source for a detailed explanation 
	     of the formular below. -->
	<?if vars."fogplane".z &gt; 0 ?>
	  <variablemap destination="vertexIn.fogPlaneS" type="expr">
	    <sexp>
	    (make-vector 
	      0 
	      0 
	      "fog density" 
	      (- (min (max (* (elt4 fogplane) "fog density") -1) 0) (* 0.1 "fog density"))
	    )</sexp>
	  </variablemap>
	  <variablemap destination="vertexIn.fogPlaneT" type="expr">
	    <sexp>
	    (make-vector
	      (/ (* (elt1 fogplane) "fog density") (elt3 fogplane))
	      (/ (* (elt2 fogplane) "fog density") (elt3 fogplane))
	      "fog density"
	      (+ (min (max (pow (+ 1 (* (elt4 fogplane) 0.2)) 5) 0) 1)
		 (* "fog density" (- (/ (elt4 fogplane) (elt3 fogplane)) 0.1)))
	    )
	    </sexp>
	  </variablemap>
	<?else?>
	  <variablemap destination="vertexIn.fogPlaneS" type="expr">
	    <sexp>(make-vector 0 0 "fog density" (* -0.1 "fog density"))</sexp>
	  </variablemap>
	  <variablemap destination="vertexIn.fogPlaneT" type="vector4">0,0,0,1</variablemap>
	<?endif?>
      <?endif?>
    </block>
    
    <block location="pass">
      <?if vars."fog density".float &gt; 0 ?>
	<!-- We need the fog lookup texture -->
	<texture name="standardtex fog" destination="fragmentIn.fogTex" />
      <?endif?>
    </block>
    
    <block location="cg:fragmentMain">
      foggedColor = litColor;
      <?if vars."fog density".float &gt; 0 ?>
	foggedColor.rgb = lerp (litColor.rgb, fragmentIn.fogColor, 
	  tex2D (fragmentIn.fogTex, vertexToFragment.fogTC).a);
      <?endif?>
    </block>
    
    <output name="foggedColor" type="rgba" />
  </technique>
</snippet>
