//---------------------------------------------------------------------------------
//Input
//---------------------------------------------------------------------------------

struct app2vert
{
	float4 Position  : POSITION;   
	float4 Normal    : NORMAL;
	float4 Color	 : COLOR;
	float2 TexCoord  : TEXCOORD0;
};

//---------------------------------------------------------------------------------
//Output
//---------------------------------------------------------------------------------

struct vert2frag
{
	float4 Position      : POSITION;	
	float4 Color	   	 : COLOR;
	float4 PosRefl       : TEXCOORD0;
	float4 PosRefr       : TEXCOORD1;
	float2 NormalTC		 : TEXCOORD2; 
	float3 Normal;
	float4 Pos;
	float2 o2wPos;
};


/**
	Wave displacement functions as outlined in section 4.1 of
	http://www.finelightvisualtechnology.com/docs/coursenotes2004.pdf
**/

//Wave displacement x-z
float2 WaveDisp(float2 k, float amp, float2 pos, float freq, float phase, float time) 
{ 
    float2 normk = normalize(k);
	return normk * amp * sin(dot(k, pos) - (freq * time) + phase);
}

//Wave displacement y
float WaveDispVert(float2 k, float amp, float2 pos, float freq, float phase, float time)
{
	return amp * cos(dot(k, pos) - (freq * time) + phase);
}


//---------------------------------------------------------------------------------
//Shader entry
//---------------------------------------------------------------------------------

vert2frag main (app2vert IN,
			 uniform float time,
			 uniform float4 colorVer,
			 uniform float4x4 ModelViewIT : state.matrix.modelview.invtrans,
			 uniform float4x4 ModelViewProj : state.matrix.mvp,
			 uniform float4x4 o2w,
			 uniform float4 reflectXform,
			 uniform float4 refractXform)
{
    vert2frag OUT;

	float3 amps = float3(0.05,0.05,0.05);
	float3 kxs = float3(1.4,-1.1,0.5);
	float3 kys = float3(1.6,0.7,-2.5);
	float3 freqs = float3(2.0,1.7,1.6);
	float3 phases = float3(0.0,1.0,1.41);	
	
	
	float4 inPos = IN.Position;

	//Grab xz position
	float2 xzpos = mul(o2w, IN.Position).xz;

	//Displace once
	float2 k = float2(kxs.x, kys.x);
	float2 wdxz1 = WaveDisp(k, amps.x, xzpos, freqs.x, phases.x, time);
	float wdy1 = WaveDispVert(k, amps.x, xzpos, freqs.x, phases.x, time);
	
	//Displace twice
	k = float2(kxs.y, kys.y);
	float2 wdxz2 = WaveDisp(k, amps.y, xzpos, freqs.y, phases.y, time);
	float wdy2 = WaveDispVert(k, amps.y, xzpos, freqs.y, phases.y, time);
	
	//Displace thrice, three times displacement!
	k = float2(kxs.z, kys.z);
	float2 wdxz3 = WaveDisp(k, amps.z, xzpos, freqs.z, phases.z, time);
	float wdy3 = WaveDispVert(k, amps.z, xzpos, freqs.z, phases.z, time);

	//Add all the displacements
	inPos.x -= wdxz1.x + wdxz2.x + wdxz3.x;
	inPos.z -= wdxz1.y + wdxz2.y + wdxz3.y;
	inPos.y = wdy1 + wdy2 + wdy3; 
	
	//Get real position
	float4 reflrefrTC = mul(ModelViewProj, inPos); 
	float4 frTC = mul(ModelViewProj, IN.Position); 
	OUT.Position = reflrefrTC;
	OUT.Pos = reflrefrTC;
	OUT.o2wPos = xzpos;
	OUT.Normal = normalize(reflrefrTC.xyz - frTC.xyz);
	
	float3 reflScale = float3 (reflectXform.xy, 0.5);
	float3 reflXlate = float3 (reflectXform.zw, -0.5) * reflrefrTC.w;
	
	float3 refrScale = float3 (refractXform.xy, 0.5);
	float3 refrXlate = float3 (refractXform.zw, -0.5) * reflrefrTC.w;
		
	OUT.PosRefl.xy = reflrefrTC.xy * reflScale.xy + reflXlate.xy;
	OUT.PosRefl.wz = reflrefrTC.wz;
	OUT.PosRefr.xy = reflrefrTC.xy * refrScale.xy + refrXlate.xy;
	OUT.PosRefr.wz = reflrefrTC.wz;

	OUT.NormalTC = IN.TexCoord;
	OUT.Color = colorVer;	
	
    return OUT;
}

//---------------------------------------------------------------------------------
//end
//---------------------------------------------------------------------------------
