<!--
  Copyright (C) 2008 by Frank Richter

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <!-- Render a reflection of the current view -->
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    
    <input name="positionO" type="position4_object" />
    <input name="positionC" type="position4_camera" />
    <input name="perturb" type="float2" default="value" defval="0,0" />
    
    <input name="texReflect" type="tex2d" default="complex">
      <block location="pass">
	<texture name="tex plane reflect" destination="fragmentIn.texReflect" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texReflect" />
      </block>
      
      <block location="cg:fragmentMain">
	texReflect = fragmentIn.texReflect;
      </block>
    </input>
    <input name="texReflectDepth" type="tex2d" default="complex">
      <block location="pass">
	<texture name="tex plane reflect depth" destination="fragmentIn.texReflectDepth" />
      </block>
      
      <block location="cg:fragmentIn">
	<uniform type="tex2d" name="texReflectDepth" />
      </block>
      
      <block location="cg:fragmentMain">
	texReflectDepth = fragmentIn.texReflectDepth;
      </block>
    </input>
    
    <input name="ModelViewProj" type="float4x4" default="complex" private="yes">
      <block location="cg:vertexIn">
	<uniform type="float4x4" name="ModelViewProj" binding="state.matrix.mvp" />
      </block>
      
      <block location="cg:vertexMain">
	ModelViewProj = vertexIn.ModelViewProj;
      </block>
    </input>
    
    <input name="ProjInv" type="float4x4" default="complex" private="yes">
      <block location="cg:fragmentIn">
	<uniform type="float4x4" name="ProjInv" binding="state.matrix.projection.inverse" />
      </block>
      
      <block location="cg:fragmentMain">
	ProjInv = fragmentIn.ProjInv;
      </block>
    </input>
    
    <input name="reflectXform" type="float4" default="complex" private="yes">
      <block location="cg:vertexIn">
	<uniform type="float4" name="reflectXform" />
      </block>
      
      <block location="cg:variablemap">
	<variablemap variable="reflection coord xform" destination="vertexIn.reflectXform" />
      </block>
      
      <block location="cg:vertexMain">
	reflectXform = vertexIn.reflectXform;
      </block>
    </input>
    
    <block location="cg:vertexToFragment">
      <varying type="position4" name="reflTC" />
    </block>
    
    <block location="cg:vertexMain">
      surfaceColor = float4 (0, 0, 0, 1);
      surfaceColor_attr_perfragment = true;
      mirroredPointDist = 0;
      
      reflTC = mul (ModelViewProj, positionO);
      float3 reflScale = float3 (reflectXform.xy, 0.5);
      float3 reflXlate = float3 (reflectXform.zw, -0.5) * reflTC.w;
      reflTC.xyz = reflTC.xyz * reflScale + reflXlate;
    </block>
    
    <block location="cg:fragmentMain">
      float3 tc = reflTC.xyw;
      float inv_reflW = 1 / reflTC.w;
      
      float camDepth = tex2Dproj (texReflectDepth, tc).x*-2 + 1;
      float2 screenPos = (reflTC.xy * inv_reflW)*float2(2)-float2(1);
      float4 positionProjected = float4 (
        screenPos.x, screenPos.y, camDepth, 1);
      float4 positionUnprojected = mul (ProjInv, positionProjected);
      positionUnprojected /= positionUnprojected.w;
      
      float distPlaneFromEye = length (positionC.xyz);
      float distRefrFromEye = length (positionUnprojected.xyz);
      
      mirroredPointDist = distRefrFromEye - distPlaneFromEye;
      //debug (float4 (float3 (mirroredPointDist), 1));
      
      float perturbWeight = min (inv_reflW, saturate (mirroredPointDist));
      tc.xy += perturb * perturbWeight;
      surfaceColor = tex2Dproj (texReflect, tc);
      surfaceColor_attr_perfragment = true;
    </block>
    
    <output name="surfaceColor" type="rgba">
      <attribute name="perfragment" type="bool" />
    </output>
    <output name="mirroredPointDist" type="float" />
  </technique>
</snippet>
