<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    
    <input name="Hposition" type="position4_object" default="complex">
      <block location="cg:vertexToFragment">
	<varying type="position4" name="position" binding="POSITION" />
      </block>
      
      <block location="cg:vertexIn">
	<varying type="position4" name="Hposition" binding="POSITION" />
      </block>
    </input>
    
    <block location="cg:vertexIn">
      <!-- Slightly dirty: float4x4 is no weaver type, so gets written out 
	   verbatim -->
      <uniform type="float4x4" name="ModelViewProj" binding="state.matrix.mvp" />
    </block>
      
    <block location="cg:vertexMain">
      position_object = vertexIn.Hposition;
      position = mul (vertexIn.ModelViewProj, position_object);
      vertexToFragment.position = position;
    </block>
    
    <output name="position" type="position4_screen" />
    <!-- @@@ FIXME: Other blocks may need the object space input as well... 
         Pass through. But is there a better (ie automatic) way? -->
    <output name="position_object" type="position4_object" />
  </technique>
</snippet>
