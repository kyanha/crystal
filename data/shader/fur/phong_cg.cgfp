<cgfp>
<program>
<![CDATA[
		
struct vertex2fragment { 
	float4 HPosition : POSITION;
	float3 LightVec : TEXCOORD0;	
	float3 WorldNormal : TEXCOORD1;		
	float3 WorldView: TEXCOORD2;	
};

float4 main (vertex2fragment IN,
			uniform float SpecExpon, // constant parameters from
			uniform float4 AmbiColor, // application
			uniform float4 SurfColor,
			uniform float4 LightColor) : COLOR
{
	float4 OUT = float4(0, 0, 0, 1);
	SpecExpon = 180;
	AmbiColor = 0.5;
	SurfColor = float4(0.51, 0.34, 0.25, 1);
	LightColor = 0.2;
	
	float3 Ln = normalize(IN.LightVec);
	float3 Nn = normalize(IN.WorldNormal);
	float3 Vn = normalize(IN.WorldView);
	float3 Hn = normalize(Vn + Ln);
	
	// scalar product between light and normal vectors:
	float ldn = dot(Ln, Nn);
	// scalar product between halfway and normal vectors:
	float hdn = dot(Hn, Nn);
	
	// specialized “lit” function computes weights for
	// diffuse and specular parts:
	float4 litV = lit(ldn, hdn, SpecExpon);

	float4 diffContrib = SurfColor * ( litV.y * LightColor + AmbiColor);
	
	float4 specContrib = litV.y * litV.z * LightColor;
	
	// sum of diffuse and specular contributions:
	float4 result = diffContrib + specContrib;
	OUT = result;
	return OUT; // output of pixel shader	
	
}

]]>
</program>
</cgfp>