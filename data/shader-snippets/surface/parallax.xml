<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet type="compound">
  <technique priority="100">
    <snippet id="eyeVecObj" file="/shader-snippets/eye-direction-obj.xml" />
    
    <snippet id="parallax">
      <technique priority="100">
	<combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
        <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />
	
	<input file="/shader-snippets/texCoord.inp" />
	
	<!-- vector pointing to eye, in tangent space -->
	<input name="eyeVec" type="direction_tangent" />
	
	<input name="texHeight" type="tex2d" default="complex">
	  <block location="cg:pass">
	    <texture name="tex height" destination="fragmentIn.texHeight" />
	  </block>
          <block location="glsl:pass">
            <texture name="tex height" destination="in_texHeight" />
          </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="tex2d" name="texHeight" />
	  </block>
	  
          <block location="glsl:inputs">
            <uniform type="tex2d" name="in_texHeight" />
          </block>
          
	  <block location="cg:fragmentMain">
	    texHeight = fragmentIn.texHeight;
	  </block>
          
          <block location="glsl:fragmentMain">
            #sampler_assign texHeight in_texHeight
          </block>
	</input>
       
	<block location="cg:definitions">
	  <?Include /shader-snippets/cg-common.cginc?>
	</block>
	<block location="glsl:definitions">
	  <?Include /shader-snippets/glsl-parallax.glsli?>
	</block>
	
	<input name="tcScaleOffs" type="translateScale2" default="complex">
	  <block location="shadervars">
	    <shadervar name="tex height scale" type="vector4">1,1,0,0</shadervar>
	  </block>
	  
	  <block location="cg:fragmentIn">
	    <uniform type="translateScale2" name="tcScaleOffs" />
	  </block>
	  <block location="glsl:inputs">
	    <uniform type="translateScale2" name="in_tcScaleOffs" />
	  </block>
	  
	  <block location="cg:fragmentMain">
	    tcScaleOffs = fragmentIn.tcScaleOffs;
	  </block>
	  <block location="glsl:fragmentMain">
	    tcScaleOffs = in_tcScaleOffs;
	  </block>
	
	  <block location="cg:variablemap">
	    <variablemap variable="tex height scale" 
			 destination="fragmentIn.tcScaleOffs" />
	  </block>
	  <block location="glsl:variablemap">
	    <variablemap variable="tex height scale" 
			 destination="in_tcScaleOffs" />
	  </block>
	</input>
	
	<block location="tags">
	  <tag>parallax</tag>
	</block>
	
	<block location="cg:vertexMain">
	  // In case the coords are used on the VP side...
	  texCoordOffset = texCoord;
	</block>
	<block location="glsl:vertexMain">
	  // In case the coords are used on the VP side...
	  texCoordOffset = texCoord;
	</block>
	
	<block location="cg:fragmentMain">
	  float2 offset = float2 (0, 0);
	  <?if vars."tex height".texture ?>
	    float2 usedTC;
	    usedTC = texCoord * tcScaleOffs.xy + tcScaleOffs.zw; 
	    offset = ComputeParallaxOffset (texHeight, usedTC, 
	      -normalize (eyeVec), 0.04);
	  <?endif?>
	  texCoordOffset = texCoord + offset;
	</block>
	<block location="glsl:fragmentMain">
	  vec2 offset = vec2 (0, 0);
	  <?if vars."tex height".texture ?>
	    vec2 usedTC;
	    usedTC = texCoord * tcScaleOffs.xy + tcScaleOffs.zw; 
	    offset = ComputeParallaxOffset (texHeight, usedTC, 
	      -normalize (eyeVec), 0.04);
	  <?endif?>
	  texCoordOffset = texCoord + offset;
	</block>
	
	<output name="texCoordOffset" type="texcoord2" />
      </technique>
    </snippet>
    <connection from="eyeVecObj" to="parallax" />
  </technique>
  
  <technique priority="50">
    <snippet id="parallax">
      <technique priority="100">
	<combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
        <combiner name="glsl" plugin="crystalspace.graphics3d.shader.combiner.glsl" />
	
	<input file="/shader-snippets/texCoord.inp" />
	
	<block location="cg:vertexMain">
	  // In case the coords are used on the VP side...
	  texCoordOffset = texCoord;
	</block>
	
        <block location="glsl:vertexMain">
          // In case the coords are used on the VP side...
          texCoordOffset = texCoord;
        </block>
        
	<block location="cg:fragmentMain">
	  texCoordOffset = texCoord;
	</block>
	
        <block location="glsl:fragmentMain">
          texCoordOffset = texCoord;
        </block>
        
	<output name="texCoordOffset" type="texcoord2" />
      </technique>
    </snippet>
  </technique>
</snippet>
