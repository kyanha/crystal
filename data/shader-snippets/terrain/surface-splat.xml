<!--
  Copyright (C) 2007 by Frank Richter
	    (C) 2007 by Jorrit Tyberghein

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet>
  <technique priority="100">
    <combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
    
    <input name="texCoordSplat" type="texcoord2" />
    <input file="/shader-snippets/texCoord.inp" private="yes" />

    <input name="position" type="position4_camera" />
    
    <input name="texDiffuse" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="tex diffuse" destination="fragmentIn.texDiffuse" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texDiffuse" />
      </block>
      
      <block location="cg:fragmentMain">
	  texDiffuse = fragmentIn.texDiffuse;
      </block>
    </input>

    <input name="texAlpha" type="tex2d" default="complex">
      <block location="pass">
	  <texture name="splat alpha map" destination="fragmentIn.texAlpha" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="tex2d" name="texAlpha" />
      </block>
      
      <block location="cg:fragmentMain">
	  texAlpha = fragmentIn.texAlpha;
      </block>
    </input>
    
    <input name="alphamap_scale" type="translateScale2" default="complex" private="yes">
      <block location="shadervars">
	  <shadervar name="alpha map scale" type="vector4">1,1,0,0</shadervar>
      </block>
      
      <block location="cg:variablemap">
	  <variablemap variable="alpha map scale" destination="vertexIn.alphamap_scale" />
	  <variablemap variable="alpha map scale" destination="fragmentIn.alphamap_scale" />
      </block>
      
      <block location="cg:vertexIn">
	  <uniform type="float4" name="alphamap_scale" />
      </block>
      
      <block location="cg:fragmentIn">
	  <uniform type="float4" name="alphamap_scale" />
      </block>
      
      <block location="cg:vertexMain">
	  alphamap_scale = vertexIn.alphamap_scale;
      </block>
      
      <block location="cg:fragmentMain">
	  alphamap_scale = fragmentIn.alphamap_scale;
      </block>
    </input>

    <block location="cg:vertexMain">
      surfaceColor = float4(0);
      surfaceColor_attr_perfragment = true;
    </block>
    
    <block location="cg:fragmentMain">
      surfaceColor = tex2D (texDiffuse, texCoordSplat);
      float2 tcAlpha = texCoord*alphamap_scale.xy + alphamap_scale.zw;
      surfaceColor *= tex2D (texAlpha, tcAlpha).x;
      surfaceColor_attr_perfragment = true;
    </block>
    
    <output name="surfaceColor" type="rgba">
      <attribute name="perfragment" type="bool" />
    </output>
  </technique>
</snippet>
