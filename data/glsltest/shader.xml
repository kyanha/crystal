<shader compiler="xmlshader" name="glslshader">

  <technique priority="200">
    <pass>

      <buffer source="position" destination="in_position" />
      <buffer source="texture coordinate" destination="in_texcoord"/>
      <texture name="tex diffuse" destination="texdiff"/>

      <shader plugin="glsl">
        <vp>
          <program>
            <![CDATA[
              #version 410

              in vec3 in_position;
              in vec2 in_texcoord;
              out vec2 texcoord;

              void main (void)
              {
                texcoord = in_texcoord;
                gl_Position = vec4 (in_position, 1.0);
              }
            ]]>
          </program>
        </vp>

        <cp>
          <program>
            <![CDATA[
              #version 410
              #extension GL_EXT_gpu_shader4 : enable

              layout (vertices = 3) out;

              in vec2 texcoord[];
              out vec2 tc[];

              void main (void)
              {
                const float inner = 4;
                const float outer = 4;
                #define ID gl_InvocationID

                // in modern GL, attributes other than the position must be
                // specified explicitly
                tc[ID] = texcoord[ID];
                // vertex position is built-in
                gl_out[ID].gl_Position = gl_in[ID].gl_Position;

                if (ID == 0) {
                  gl_TessLevelInner[0] = inner;
                  gl_TessLevelInner[1] = inner;
                  gl_TessLevelOuter[0] = outer;
                  gl_TessLevelOuter[1] = outer;
                  gl_TessLevelOuter[2] = outer;
                  gl_TessLevelOuter[3] = outer;
                }
              }
            ]]>
          </program>
        </cp>

        <ep>
          <variablemap variable="object2world transform"
                       destination="mat_object" />
          <variablemap variable="world2camera transform"
                       destination="mat_camera" />
          <variablemap variable="projection transform"
                       destination="mat_projection" />

          <program>
            <![CDATA[
              #version 410
              #extension GL_EXT_gpu_shader4 : enable

              layout(triangles, equal_spacing, cw) in;

              uniform mat4 mat_object;
              uniform mat4 mat_camera;
              uniform mat4 mat_projection;

              in vec2 tc[];
              out vec2 texcoord;

              void main (void)
              {
                vec2 t0 = gl_TessCoord.x * tc[0];
                vec2 t1 = gl_TessCoord.y * tc[1];
                vec2 t2 = gl_TessCoord.z * tc[2];
                texcoord = t0 + t1 + t2;

                vec4 p0 = gl_TessCoord.x * gl_in[0].gl_Position;
                vec4 p1 = gl_TessCoord.y * gl_in[1].gl_Position;
                vec4 p2 = gl_TessCoord.z * gl_in[2].gl_Position;
                vec4 pos = p0 + p1 + p2;

                // doing projection after tessellation avoids
                // screen-space interpolation of the vertices
                mat4 mat_final = mat_projection * mat_camera * mat_object;
                gl_Position = mat_final * pos;
              }
            ]]>
          </program>
        </ep>

        <gp>
          <program>
            <![CDATA[
              #version 410
              #extension GL_EXT_geometry_shader4 : enable

              // let's make the tessellation visible :)
#define LINES 1
#if LINES
              layout (line_strip, max_vertices = 4) out;
#else
              layout (triangle_strip, max_vertices = 3) out;
#endif

              in vec2 texcoord[];
              out vec2 tc;

              void main (void)
              {
                gl_Position = gl_PositionIn[0];
                tc = texcoord[0];
                EmitVertex ();
                gl_Position = gl_PositionIn[1];
                tc = texcoord[1];
                EmitVertex ();
                gl_Position = gl_PositionIn[2];
                tc = texcoord[2];
                EmitVertex ();
#if LINES
                gl_Position = gl_PositionIn[0];
                tc = texcoord[0];
                EmitVertex ();
#endif
                EndPrimitive ();
              }
            ]]>
          </program>
        </gp>

        <fp>
          <variablemap destination="coeff" type="vector3">
            <![CDATA[1.0,1.0,0.1]]>
          </variablemap>

          <program>
            <![CDATA[
              #version 410

              uniform vec3 coeff;
              uniform sampler2D texdiff;
              in vec2 tc;

              void main (void)
              {
                vec4 col = texture (texdiff, tc);
                gl_FragColor = col * vec4 (coeff, 0.0);
              }
            ]]>
          </program>
        </fp>
      </shader>

    </pass>
  </technique>

  <technique priority="100">
    <pass>

      <buffer source="texture coordinate" destination="IN.texCoord"/>
      <texture name="tex diffuse" destination="textureDiffuse"/>

      <vp plugin="glcg">
        <cgvp>
          <program>
            <![CDATA[
                     struct App2Vertex
                     {
                       float4 Position : POSITION;
                       float2 texCoord;
                     };
                     
                     struct Vertex2Fragment
                     {
                       float4 Position : POSITION;
                       float2 texCoord;
                     };

                     Vertex2Fragment
                       main (App2Vertex IN,
                             uniform float4x4 ModelViewProj : state.matrix.mvp)
                     {
                       Vertex2Fragment OUT;
                       OUT.Position = mul (ModelViewProj, IN.Position);
                       OUT.texCoord = IN.texCoord;
                       return OUT;
                     }
            ]]>
          </program>
        </cgvp>
      </vp>

      <fp plugin="glcg">
        <cgfp>
          <program>
            <![CDATA[
                     struct Vertex2Fragment
                     {
                       float4 Position : POSITION;
                       float2 texCoord;
                     };

                     float4 main (Vertex2Fragment IN, sampler2D textureDiffuse) : COLOR
                     {
                       return tex2D (textureDiffuse, IN.texCoord);
                     }
            ]]>
          </program>
        </cgfp>
      </fp>

    </pass>
  </technique>
</shader>
